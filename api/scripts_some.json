[{:name=>"test.vim", :summary=>"example utility script file -- used for testing vimonline", :description=>"This is an example of a utility script file. I added this so people could see what a script looks like in vimonline -- the file itself is empty. Originally this was just to show how people could use vimonline. Now I use it do do a final test of new code once I deploy it to production."}, {:name=>"test.zip", :summary=>"example of a set of scripts zipped together", :description=>"Here is where I would put more details on the scripts I uploaded"}, {:name=>"test_syntax.vim", :summary=>"example syntax file upload", :description=>"Just an example of a syntax file uploaded to vim online - the actual script is empty. I just wanted to show how you can use vimonline."}, {:name=>"ToggleCommentify.vim", :summary=>"comment lines in a program", :description=>"This is a (very) simple script to comment lines in a program. Currently supported languages are C, C++, the vim scripting language, python, and ox. Given the simplicity of the program it very easy to add support for new languages. The comments in the file should provide sufficient information on how to proceed.\n\n "}, {:name=>"DoxyGen-Syntax", :summary=>"DoxyGen Highlighting on top of c/c++/java", :description=>"This Script has been moved into Vim7.\n\n:set syntax=cpp.doxygen\n\nProvides DoxyGen Highlighting on top of c/c++/idl/java.  DoxyGen is close to JavaDoc that it should be fine for JavaDoc as well.  It supports most of the keywords in DoxyGen in one way or another.\n\nThere may be some problems where doxygen tags need to be included in exclusion groups of the c/c++/java/idl files.\n\nAt the moment, it uses non-conventional colours, which I think is good, as it differentiates it from the source-code.  Please let me know if your opinion differs, especially if you have a set of standard defaults that would be appropriate.\n"}, {:name=>"keepcase.vim", :summary=>"Functions for doing case-persistant substitutions", :description=>"Usage: Using KeepCase or KeepCaseSameLen defined here, do a substitution like this:\n\n%s/\\u\\<old_word\\>/\\=KeepCaseSameLen(submatch(0), 'new_word')/g\n\n* KeepCase( original_word , new_word )  \n  returns the new word maintaining case \n  simply uses heuristics to work out some different common situations\n    given   NewWord\n    Word   \t--> Newword\n    WORD    --> NEWWORD\n    word    --> newword\n    WoRd    --> NewWord\n    woRd    --> newWord\n\n* KeepCaseSameLen( original_word , new_word )    \n\tReturns the new word maintaining case\n\t  Keeps the case exactly the same letter-for-letter\n\t  It does work if the words aren't the same length, as it truncates or\n\t  just coppies the case of the word for the length of the original word.\n\n* :SubstituteCase#\\ctoto\\(Titi\\)tata#\\1Tutu#g\n     totoTitiTata -> titiTutu\n     TotoTitiTata -> TitiTutu\n     tototititata -> tititutu\n     tototitiTata -> titiTutu\n     TototitiTata -> TitiTutu\n"}, {:name=>"ifdef.vim", :summary=>"#ifdef highlighting in c/c++/idl", :description=>"Provides highlighting for  #ifdef  #ifndef  #else  #endif  blocks, with the ability to mark a symbol as defined or undefined.\nHandles nesting of #ifdefs (and #if) as well, but does not handle  #if defined().\n\nSupports vim_ifdef:  modelines and .defines (_defines for win16/win32s) files to specify defined/undefined symbols."}, {:name=>"vimbuddy.vim", :summary=>"Vimbuddy: An absolutely unuseful little thing", :description=>"Puts a smiley on your status line. Nose will rotate on <Left> and <Right>\nWill frown on errors and warnings"}, {:name=>"buffoptions.vim", :summary=>"Per-buffer options/menus/maps", :description=>"BuffOptions.vim - Per-buffer options and mappings\nIntroduction:\nSome of Vim's options are set per-buffer, but not all. This extension allows you to set any options and also mappings for a particular buffer or filetype.\n\nThe idea is that you push options onto a stack (the old values are in fact what are pushed) with PushOption( ... ) and then restore the values with RestoreOptions(). \n\nAn extension to the filetypes allow easy use of these macros for a specific filetype. The autocommands filetypeEnter and filetypeLeave have been added.\n\nBase Commands:\nPushOption( option1|map1|menu1|abbrev1, value1, ...) - Push any number option/value pairs where: \noptionn is a vim 'option' name. \nmapn is a map of the form '{n|v|o|i|c}map <lhs>' defining what kind of map is being defined (mandatory with multiple allowed) \nabbrevn is an insert mode abbreviation - the abbreviation is set by push and deleted by RestoreOptions() (as it is not possible to silently check for original abbreviations). \nmenun is a menu setting of the form '{a|n|v|o|i|c}menu <lhs>' defining where the menu is available. <lhs> can include the position of the menu (eg '100.100 Tools.Test') \nvaluen is the value or mapping to set. \nRestoreOptions() - Restore all options to their previous value \nautocomd User filetypeEnter - Called on 'BufEnter' of a file of filetype. \nautocomd User filetypeLeave - Called on 'BufLeave' of a file of filetype. \nReadFileTypeMap(types, filename) - Source filename with per-buffer map/menu options defaulting to the specified list offiletypes. Lines of the form: \n\" FileTypes: cpp\nExample:\n\naug specialEdit\nau!\nau User sgmlEnter call PushOptions(\"keywordprg\",\"/bin/htmlkey\")\nau User cEnter call PushOptions(\"breakat\",\". )&|\",  \"complete\",\".,k/usr/dict,]\",  \"nmap <c-enter>\",\"<esc>o\")\nau User cEnter call PushOptions(\"amenu 10.100 Tools.Compile\\\\ C\",\":make<cr>\" )\n\nau User sgmlLeave,cLeave  call RestoreOptions()\naug END\n\n\nPer File mappings\nThis is not really recommended, as it gives the document virus a foot in... so be warned.\n\nGetOptionsFromFile(comment) is a little trick to allow mappings defined for a particular file within the file. The lines recognized are of the form:\n\n<comment>vimexe: <arguments>\n\nwhere the arguments are the same as for PushOption. And Comment is passed as an argument.\n\nDespite the given example, I would recomend that you map a key to parse the options from a file initially.\n\nNote that the options are cached, so once read, you would have to unlet b:VIMEXE to be able to get it to reparse.\n\n\naug MyOpts\nau!\nau User vimEnter call GetOptionsFromFile('\"')\nau User vimLeave call RestoreOptions() \naug END\n\nMappings from filetype files\nFor when you have a file that is used for the mappings for a particular filetype.\nAll lines in the file except those starting with map and menu will get executed. Any maps/menus will get inserted into a BuffOption() for the specified filetype \n\nCommands:\nFTExe(Filetypes, command) - Have mapping/menu command executed as a per-buffer option for the specified (comma separated) filetypes \nReadFileTypeMap(filetypes,filename) - Sets all map/menu entries existing in filename to be specific to the filetypes specified and executes all other lines. Comment lines of the form: \n\"FileTypes: cpp,c,rc,idl\n\nwill cause the following maps/menus to be for the specified filetypes. A blank filetype string causes the maps/menus to be executed immediately.\n\nThis implementation requires the existance of buffoptions_mac.vim in the same directory as buffoptions.vim\nThe source code for that is in an if 0 block at the bottom of buffoptions.vim\n\n:SO filename - Call ReadFileTypeMap with blank original filetypes. \nExample:\nlet filename =$home.'/vim/txtsettings.vim'\ncall ReadFileTypeMap('txt',filename)\nSO ~/vim/txtsettings.vim\n"}, {:name=>"fortune.vim", :summary=>"put a signature file at end of e-mail (BRAM)", :description=>"This macro will add a signature (from\n~/.fortunes) to the end of a file.\n(preferably an e-mail) This script\nwas copied from a macro from:\nhttp://www.moolenaar.net which was\nmade by Bram Moolenaar.  I changed it\nso it would stick on the sig then\nquit."}, {:name=>"drawing.vim", :summary=>"Ascii drawing primitives with mouse in vim GUI (box, arrow, line). (unstable)", :description=>"Read script file for macro definition. You can draw some box, line or arrow\nby marking an area in visual mode in vim. Both corner of the visual selection\nare the point used for drawing.\n\nThe script is vim 5.4 compatible."}, {:name=>"ctags.vim", :summary=>"Display function name in the title bar.", :description=>"This script uses exuberant ctags to build the list of tags for the current file.  CursorHold event is then used to update titlestring.\n\nUpon sourcing an autocommand is created with event type CursorHold.  It updates the title string using the function GetTagName.  Another autocommand of type BufEnter is created to generate tags for *.c, *.cpp and *.h files.\n\nFunction GenerateTags builds an array of tag names.\n\nFunction GetTagName takes line number argument and returns the tag name."}, {:name=>"closetag.vim", :summary=>"Functions and mappings to close open HTML/XML tags", :description=>"This script eases redundant typing when writing html or xml files (even if you're very good with ctrl-p and ctrl-n  :).  Hitting ctrl-_ will initiate a search for the most recent open tag above that is not closed in the intervening space and then insert the matching close tag at the cursor.  In normal mode, the close tag is inserted one character after cursor rather than at it, as if a<C-_> had been used.  This allows putting close tags at the ends of lines while in normal mode, but disallows inserting them in the first column.\n                                                                              \nFor HTML, a configurable list of tags are ignored in the matching process.  By default, the following tags will not be matched and thus not closed automatically: Area, Base, Br, DD, DT, HR, Img, Input, LI, Link, Meta, P, and Param.\n                                                                              \nFor XML, all tags must have a closing match or be terminated by />, as in <empty-element/>.  These empty element tags are ignored for matching.\n                                                                              \nComments are not currently handled very well, so commenting out HTML in certain ways may cause a \"tag mismatch\" message and no completion.  ie, having '<!-- a href=\"blah\">link!</a -->' between the cursor and the most recent open tag above doesn't work.  Well matched tags in comments don't cause a problem.\n"}, {:name=>"htmlcmd.vim", :summary=>"Rich HTML/XML commands", :description=>"This script handles a number of mundane tasks in HTML / XML.  It allows you to create a default HTML header (Alt+0),  to define headings <h1> .. <h6> (Alt+1.. Alt+6), to toggle bold, italic, underline, paragraphs & kbd commands.  It gives shortcuts for ordered/unordered lists and row definitions.  \n\nThe script has commands to insert horizontal rules, line-breaks, and a number of  special symbols (just email me to add your favourite).  \n\nIt has imap mappings that give you ampersands (&&), smart-quotes (single - &' and double &\"), <, > symbols,   and more.  It allow you to insert these and text descriptors or as numbers (for strict XML)\n\nYou can close the next open tag (alt-;) or close all open tags at that point (alt->).  \nNot you may need to remap these for other platforms.\n\n\nIf you have defined 'htmlcmd_AUTOCLOSE' then there is some reasonably intrusive code that will close open tags: \ntry typing this\n<p>Testing<b>bold</p>\n\nThis should automatically close the <b>\n\nYou can also generate a quick Table Of Contents for your document based on <H1>..<H6> headings.  There is a menu item to insert it.. and any options you give \nare remembered for when you re-generate the TOC. \n\nGenerateTOC( [<headingtypes>| * ]) \n:GenTOC [<headingtypes>| * ]\n\nThe optional argument is a string of types for each indent level. Eg. \" 1ai.\" would mean level 1 is default (bullet), level 2 is a numbered list, level 3 has letters and level three has roman numerals. \nIt uses references where it can find them, and generates new ones where it can't.\nThe arguments supplied are remembered so the TOC can be regenerated without resuplying them.\nIf * is supplied as an argument, the script prompts for arguments - showing what the current values are.\n\nWhen used with buffermenu.vim - Menus (for TOC generation) are local to the buffer.\n"}, {:name=>"ccase.vim", :summary=>"Script to setup maps/menus to add in using Clearcase.", :description=>"Based on what Vim detects you are running, allows for Unix or WinNT based Clearcase.  Script will setup command-line abbreviations to shortcut checking-in/out, uncheckout, list checkouts (current directory, recurse directories, or all vobs), list version history.  Also sets up a Clearcase Menu if you are running a gui version of Vim, which provides the same operations."}, {:name=>"compiler.tar.gz", :summary=>"[Defunct] Part of functionality for Vim 6.0", :description=>"After a discussion of ways of setting the correct error format for various compilers on vim-dev, I threw together this script to allow you to do:\n:Compiler bcc55\n\nand have the errorformat for compiler be setup.  Currently it replaces the default errorformat, but is easily changed to be appended to the current value of errorformat.  Uses the :runtime command to search for a filename (this case, bcc55.vim) in a 'compiler' directory under one of the runtime directories.  Commonly, ~/.vim/compiler."}, {:name=>"ls.vim", :summary=>"Directory Browser for UNIX/CYGWIN", :description=>"A simple file/directory browser written in vim script."}, {:name=>"calendar.vim", :summary=>"Open a calendar in a read-only buffer for viewing.", :description=>"Requires the Unix command program 'cal' or its equivalent.  Really only provides a way of pulling up a calendar into a buffer in Vim.  The script opens a buffer if one doesn't exist.  The buffer is set up to be readonly and not modified (or modifiable if 6.0 or better).  Should work for both 5.7 and 6.0x.\n\nUsage is:  Cal 2001   | \" for current year calendar\n              Cal 4 2001 | \" for April of 2001 month  calendar"}, {:name=>"dl.vim", :summary=>"converts file links to GetRight GRX files", :description=>"Use this script when you have a www page with the list of downloadable \nlinks and want to download all/some of them using GetRight.\n\nThe script assumes that you have a file, each line of which containing a link(s)\nto file you want to download. Such file may be produced, for examle, if You open \nsome html file and issue a command : \n\n:gl /href=\".*zip\"/ . write! >> files.grx\n:e files.grx\n\nWhen loaded, the script loads and maps following functions :\n1. UnHref() - which removes everything except URLs themselves, and puts every URL on a single line\n2. Ability to set the destination directory\n3. MakeList() - Function that converts pure URLs to GetRight acceptable information - before invoking it,\neach line should contain pure single URL.\n"}, {:name=>"jcommenter.vim", :summary=>"A script for automatically generating JavaDoc comments", :description=>"Updated 29.12.2002 KB\n\nDescription:\nGenerates JavaDoc (and some other) comments for java-sources. This is triggered by executing the JCommentWriter()-function while the cursor is over something meaningfull, or if a selection exists, the selected text is parsed and the comment template is generated based on that.\n\nThe following comments are generated (in the appropriate situations):\n1. File comments: user specifies the template, generated when the cursor is on the first line of the file.\n2. Class comments: generated when on top of a class declaration\n3. Method comments: generated when on top of a metod declaration. @return, @params, and @throws are generated, if applicable. If executed on a method declaration which already has JavaDoc-comments, updates the javadoc-comments by removing/adding tags as needed.\n4.  Field comments. Simply adds an empty JavaDoc-comment template above the field declaration\n5. Copy @<name> -tags. When executed on @something, creates a tag with the same name directly above the line the cursor is currently on.\n6. @throws for RuntimeExceptions. When executed on a line containing something like \"throw new RuntimeException()\", a @throws-tag is added to the previous JavaDoc-comment.\n7. Block-end comments. When executed on a line containing a '}'-character and possibly some whitespace (but nothing else), generates a one-line-comment describing what block the '}' is terminating. For example, the comment for \"aVeryLongMethod\" is  \"// END: aVeryLongMethod\".\n\nThere are a bunch of other functions to support the comment generation (see the start of the script for full documentation). The style of the comment templates is configurable (see the file for configuration and description of the options)"}, {:name=>"info.vim", :summary=>"GNU info documentation browser.", :description=>"requires vim 6.x and GNU info. adds new command `Info': without arguments it displays \"directory\" node, with single argument displays this file (eg `:Info libc'). with two arguments, first specifies file and second node to display (eg `:Info libc POSIX\\ Threads' -- note space escaping). within browser, press h key to see available key shortcuts."}, {:name=>"hunspchk.zip", :summary=>"Hungarian spell checker", :description=>"(Hungarian description - see below)\n\nThe Hungarian spelling checker uses Vim's highlighting ability to make misspelled (Hungarian) words show up as \"Error\" (usually white on a red background).\n\nThe Vim-based Hungarian spell checker also supports entering words that the cursor is on into a temporary or permanent dictionary and allows one to skip to the previous or subsequent spelling error (if any).\n\nIdeea is based on Charles.Campbell's English spelling checker (see\nhttp://users.erols.com/astronaut/vim/#Spelling)\n\n\nMagyar helyesírás-ellenõrzõ: a hibás szavakat pirossal kiemeli a ViM \"syntax\" parancsa segítségével. Hibás az, ami nincs benne a script-ben.\nTermészetesen a lista nem teljes; kiegészítéseket szívesen fogadok (legjobb egy saját file-ba összegyûjteni többet és úgy elküldeni).\n\nInstallálás, saját szavak gyûjtése: ld. feljebb az angol szöveget, ill. a megjegyzéseket a file elején. Végsõ esetben persze hozzám is lehet fordulni :-)"}, {:name=>"EnhCommentify.vim", :summary=>"comment lines in a program", :description=>"The development of the script is done at http://kotka.de/projects/enhancedcommentify/index.html. Releases may be downloaded from below.\n\nThere is a major rework for Vim7 underway. In case you are missing any features, this is the time to suggest them. Send me an email or report your bugs or suggestions in the trac at the link above. This is a serious request from me to the users. In the past a lof of people complained on mailing lists, that \"this doesn't work\" or \"that feature is missing\", without contacting me. If you don't tell the upstream author, then this won't change!\n\nStay tuned."}, {:name=>"LoadHeaderFile.vim", :summary=>"load filename from an #include line", :description=>"Here are the mappings I use for this script (which I'll use in my description)\n\nmap <F12> :call LoadHeaderFile( getline( \".\" ), 0 )<CR>\nmap <C-F12> :call LoadHeaderFile( getline( \".\" ), 1 )<CR>\n\nTo use the script, just have your cursor on a #include line and hit F12 to load the .h file or C-F12 to load the corresponding .cpp file.  It splits the window when it loads the file.  If it can't find the file it just gives you an error that it can't find the file.\n\nYou have to have your path set up correctly for it to work.  If you don't know how to do that, simply add a \"se path=.,c:/path/**,c:/another path/**\" to you _vimrc.  Obviously there is a better explanation of paths in the help.\n\nThe code works on includes with <> or \"\".  It only checks for .h and .cpp, but you could modify it to do more.  I kept it simple so it's quicker.\n\nAnd as I'm typing this up I noticed that the #include has to be at the beginning of the line...can't have spaces or tabs.  I'll fix that in the next version :)\n\nIf you see any flaws or ways to improve this script, please let me know since I'm still learning how to script."}, {:name=>"mailbrowser.vim", :summary=>"Browse Berkeley mbox format mailbox files", :description=>"This script allows you to browse (read) email from a standard Berkeley mbox formatted mail file.  When you type :Mail or :Mail <filename>, it will scan the file for headers, extract them, and present you with a list of the mail items present in the file.  You can easily select mail items to view.  It does not (as yet) allow you to send mail in any form, or to delete mail from the mailbox.\n\nSee the script for more detailed usage information."}, {:name=>"vimmailr.zip", :summary=>"Send (MAPI) mail from vim", :description=>"This script and dll (source included) allows you to send email from within vim (via MAPI). Supports To, CC, pulling in a signature file, and adding a file attachment. Win32, obviously. Tested on Win2k only so far.\n\nEnjoy!"}, {:name=>"format.vim", :summary=>"formats the current paragraph - smooth right and left", :description=>"a function to format paragraphs of text by inserting spaces. text is nicely justified to current text width after use\t\t"}, {:name=>"vimxmms.tar.gz", :summary=>"Control XMMS from Vim", :description=>"I found that most of the time the only reason I exit from my Vim window is to change songs in XMMS. This script uses libcall () and a little library I wrote to control XMMS from Vim. You can change songs, change the volume, delete the playing song, shuffle play and pause."}, {:name=>"sourceSafe.zip", :summary=>"Check out files from Microsoft SourceSafe directly from vim", :description=>"Interfaces with Microsoft Visual SourceSafe and provides a shortcut to the most frequently used operations such as checkin, checkout, get current file, check differences, and so on.  Key features:\n- Takes advantage of Vim6.0's built-in diff feature for comparing the working version with the one in VSS.\n- Displays a list of all files checked out by the current user in a separate window.  Operations on multiple files can be done from this window.\n- The lock status of the current buffer is displayed in the status bar.\n- Online documentation.\n- Commands are available in the command line and the menubar.\n- Easy configuration."}, {:name=>"python.vim", :summary=>"A set of menus/shortcuts to work with Python files", :description=>"Written by Mikael Berthe.\n\nThis script can be useful when editing Python scripts. It provides the following menus:\n- Select a block of lines with the same indentation\n- Select a function\n- Select a class\n- Go to previous/next class/function\n- Go to the beginning/end of a block\n- Comment/uncomment the selection\n- Jump to the last/next line with the same indent\n- Shift a block (left/right)\n- Creates list of classes and functions for easy code navigation\nVersion 1.8+ requires Vim 7, earlier versions require Vim 6"}, {:name=>"a.vim", :summary=>"Alternate Files quickly (.c --> .h etc)", :description=>"A few of quick commands to swtich between source files and header files quickly.\n\n:A switches to the header file corresponding to the current file being edited (or vise versa)\n:AS splits and switches\n:AV vertical splits and switches\n:AT new tab and switches\n:AN cycles through matches\n:IH switches to file under cursor\n:IHS splits and switches\n:IHV vertical splits and switches\n:IHT new tab and switches\n:IHN cycles through matches\n<Leader>ih switches to file under cursor\n<Leader>is switches to the alternate file of file under cursor (e.g. on  <foo.h> switches to foo.cpp)\n<Leader>ihn cycles through matches\n\nE.g. if you are editing foo.c and need to edit foo.h simply execute :A and you will be editting foo.h, to switch back to foo.c execute :A again. \n\nCan be configured to support a variety of languages. Builtin support for C, C++ and ADA95"}, {:name=>"vimrc.tcl", :summary=>"Adds a SQLWorksheet type interface to Oracle SQL*Plus", :description=>"This small hack requires Tcl to be compiled into your\ncopy of Vim.\n\nThe default settings will allow this hack to work on\nthe default SQL*Plus temp file, afiedt.buf, only.\n\nTo use simply highlight the query you would like to\nrun and press Enter.  You should drop back down to\nSQL*Plus.  Do the usual '/' and your good to go.\n\nHave not tried this hack with PL/SQL or multiple\nQuery's but I cannot see why it won't work, or why it\nwould for that matter.\n\nBUGS\n----\n1) :wq causes an error message about writing the file.\n   Safe to ignore but would be nice to get rid of this.\n\n2) No checks to make sure you have highlighted a valid\n   Query.  Hence all hell breaks loose if you don't.\n\n3) You *HAVE* to have a trailing ';' on your Query for\n   this hack to work.  Would be nice if you didn't have\n   to have that.  Would also be nice if you could run\n   a group of statements.\n"}, {:name=>"oravim.txt", :summary=>"SQL*Plus without SQL*Plus", :description=>"This script allows you to have a SQLWorksheet-type interface to Oracle. Similar to Jeremy Collins&#039 script (vimtip #33), and actually the idea was based on his. It, too, requires that TCL is built in to Vim, and also has a few other requirements: links and a version of SQL*Plus that supports HTML output. \n\n     The usage is quite a bit different, though. \n\n     Start by simply editing a file in vim, and move your cursor to a SQL statement. You can visually select it or not, it doesn&#039t matter as long as there is a blank line before and after. Then, based on these keybindings, hit <C-k> and your statement will be executed, formatted, and popped up in a split     window below. To run another statement, move to another one and hit <C-k> again. It will replace the bottom window with the new results. \n\nMore detail (and latest versions) at http://oravim.dashf.com/"}, {:name=>"javabean.vim", :summary=>"Adds property getters and setters", :description=>"Given a number of Java properties in a basic format, this will generate the getters and setters for them; for example, given:\n\nString myString\nint myInt\n\nyou will get:\n\nprotected String m_myString;\nprotected int m_myInt;\n\npublic void setMyString( String val )\n{\n  m_myString = val;\n}\n\npublic String getMyString()\n{\n  return m_myString;\n}\n\npublic void setMyInt( int val )\n{\n  m_myInt = val;\n}\n\npublic int getMyInt()\n{\n  return m_myInt;\n}\n\n"}, {:name=>"jbean.vim", :summary=>"Completion of Get/Set method", :description=>"This is result of this script.\nIf you modified _vimrc, you'll get this with ALT-B.\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n\nprivate String name;\n\npublic String getName()\n{\nreturn this.name;\n}\npublic void setName(String name)\n{\nthis.name = name;\n}"}, {:name=>"vimvccmd.zip", :summary=>"patch for vim to \"remote control\" visual c++", :description=>"I know that this isn't a macro and I haven't used it in a while but I always have people emailing me about it so I figured I'd try putting it up here.\nThe header file has instructions for adding it to the vim project.  Anyone is more than welcome to pick/clean this up.  Usage is\nstraight forward and there is latent ( read: not working ) support for setting breakpoints from vim.  \nI wrote this a while ago so it's not a stellar example of using ATL etc.\n\nUsage:  :vc <cmd>\nwhere <cmd> is any exported command in Visual Studio.  See the keybindings to see all of the different commands.\n\nIt's also available at my web page as well as other vim stuff\nhttp://www.nh.ultranet.com/~bsturk\n\n"}, {:name=>"dbhelper.tgz", :summary=>"Helper for Writing DocBook Documents", :description=>"This script is an adaption of Dan York's (dyork at lodestar2.com) VIMRC file that acts as a helper in making docbook documents.  This script uses abbreviations in the form of \",<chracter>\" to trigger automatic insertion of docbook tags.  I have added a few new abbreviations to the original exhaustive list from Dan York's original list.  I have further extended it to add compilation of the document from within VIM itself to generate the output in your most favourite format by using VIM's inbuilt \"make\" facility.    Please send your inputs and comments to vivekv at users.sourceforge.net\t"}, {:name=>"matchit.zip", :summary=>"extended % matching for HTML, LaTeX, and many other languages", :description=>"The matchit.vim script allows you to configure % to match more than just\nsingle characters.  You can match words and even regular expressions.\nAlso, matching treats strings and comments (as recognized by the\nsyntax highlighting mechanism) intelligently.\nThe default ftplugins include settings for several languages:\nAda, ASP with VBS, Csh, DTD, Essbase, Fortran, HTML, JSP\n(same as HTML), LaTeX, Lua, Pascal, SGML, Shell, Tcsh, Vim, XML.\n(I no longer keep track, so there may be others.)\nThe documentation (included in the zip file) explains how to configure\nthe script for a new language and how to modify the defaults.\n\nSince vim 6.0, matchit.vim has been included in the standard vim distribution,\nunder the macros/ directory; the version here may be more recent.\n"}, {:name=>"DrawIt", :summary=>"Ascii drawing plugin: lines, ellipses, arrows, fills, and more!", :description=>"DrawIt is a plugin which allows one to draw lines left, right, up, down, and along both slants. Optionally one may \"cap\" the lines with arrowheads.  One may change the horizontal, vertical, slant, and crossing characters to whichever characters one wishes.\n\nIts easy to start and stop DrawIt: use\n\n   \\di to start DrawIt and\n   \\ds to stop  DrawIt.\n\nThe alpha/beta version is available at  http://mysite.verizon.net/astronaut/vim/index.html#DRAWIT.\n\nWhen DrawIt has been started you may use the number pad to leave a trail of dashes, vertical bars, etc.  The lines will be expanded as needed to accomodate your drawing.  DrawIt can also draw boxes and ellipses on a blank-filled area (DrawIt can produce these) which can be useful for drawing boxes around comments.\n\nViart's <drawing.vim> has been merged with the original DrawIt (vimscript#11) (by permission).  Use visual-block selection to specify starting and ending positions and a Bresenham line drawing algorithm will be used to connect the two.  DrC has written an ellipse-drawing Bresenham-style procedure: again, use the visual block selection to specify a box to contain the ellipse and \\e to trigger the ellipse drawing.\n\nDrawIt incorporates an \"erase\" mode, toggled by the <space> key, that will leave a trail of blanks behind and under the cursor as it is moved by the number pad.  Using the shift-arrow keys, DrawIt will move the cursor, expanding lines and inserting spaces as needed, without changing underlying text.\n\nDrawIt is now in the vimball format, which is understood by the new Vim 7.0 release.  After decompressing the DrawIt.vba.gz file, edit it with Vim, and then source it (:so %).  The components of DrawIt will then be placed where they belong, based on your Vim's runtimepath.\n\nDrawIt records many user options that affect DrawIt and all maps that starting DrawIt creates.  When DrawIt is terminated it restores the user's maps and options.  DrawIt's number pad maps will expand the file as necessary to accomodate the drawing, automatically.\n\nSupported Features\n   <left>       move and draw left\n   <right>      move and draw right, inserting lines/space as needed\n   <up>         move and draw up, inserting lines/space as needed\n   <down>       move and draw down, inserting lines/space as needed\n   <s-left>     move left\n   <s-right>    move right, inserting lines/space as needed\n   <s-up>       move up, inserting lines/space as needed\n   <s-down>     move down, inserting lines/space as needed\n   <space>      toggle into and out of erase mode\n   >            draw -> arrow\n   <            draw <- arrow\n   ^            draw ^  arrow\n   v            draw v  arrow\n   <pgdn>       replace with a \\, move down and right, and insert a \\\n   <end>        replace with a /, move down and left,  and insert a /\n   <pgup>       replace with a /, move up   and right, and insert a /\n   <home>       replace with a \\, move up   and left,  and insert a \\\n   \\>           draw fat -> arrow\n   \\<           draw fat <- arrow\n   \\^           draw fat ^  arrow\n   \\v           draw fat v  arrow\n   \\a           draw arrow based on corners of visual-block\n   \\b           draw box using visual-block selected region\n   \\e           draw an ellipse inside visual-block\n   \\f           fill a figure with some character\n   \\h           create a canvas for \\a \\b \\e \\l\n   \\l           draw line based on corners of visual block\n   \\s           adds spaces to canvas\n   <leftmouse>  select visual block\n <s-leftmouse>  drag and draw with current brush (register)\n   \\ra ... \\rz  replace text with given brush/register\n   \\pa ...      like \\ra ... \\rz, except that blanks are considered\n                to be transparent\n\nThank you for ranking DrawIt!\n"}, {:name=>"rcs-menu.vim", :summary=>"Interface to RCS (Revision Control System)", :description=>"rcs-menu.vim is a plugin which allows you to easily interace with the command line versions of rcs, ci, co, rlog and rcsdiff.  If you are running a GUI version of Vim, you will get a new menu in the menu bar for RCS.  This plugin can also be found at http://lanzarotta.tripod.com/vim.html."}, {:name=>"bufexplorer.zip", :summary=>"Buffer Explorer / Browser", :description=>"With bufexplorer, you can quickly and easily switch between buffers by using the one of the default public interfaces:\n\n  '\\be' (normal open)  or\n  '\\bs' (force horizontal split open)  or\n  '\\bv' (force vertical split open)\n\nOnce the bufexplorer window is open you can use the normal movement keys (hjkl) to move around and then use <Enter> or <Left-Mouse-Click> to select the buffer you would like to open. If you would like to have the selected buffer opened in a new tab, simply press either <Shift-Enter> or 't'. Please note that when opening a buffer in a tab, that if the buffer is already in another tab, bufexplorer can switch to that tab automatically for you if you would like. More about that in the supplied VIM help.\n\nBufexplorer also offers various options including:\n- Display the list of buffers in various sort orders including:\n    - Most Recently Used (MRU) which is the default\n    - Buffer number\n    - File name\n    - File extension\n    - Full file path name\n- Delete buffer from list \n\nFor more about options, sort orders, configuration options, etc. please see the supplied VIM help."}, {:name=>"sccs-menu.vim", :summary=>"Adds a SCCS menu in GVim to acces SCCS functions.", :description=>"Script to access most commonly used SCCS functions thr' vim. Allows to get the latest version, any required version of a file. You can check in/out the file, add the file in sccs, unedit the file, revert back the changes made. You can view diff of any 2 versions of the file, see the change log etc."}, {:name=>"completeWord.py", :summary=>"Complete word from Python src files.", :description=>"Completes the word under the cursor by scanning the current file and any imported Python modules that have source available."}, {:name=>"Mail_Sig.set", :summary=>"Erase signatures at the end of your replies", :description=>"This file defines an alternative to the macro :\n\n                          map ,kqs G?^> *-- $dG \n\n\nIt comes as a command. This time, VIM won't complains about not found ^> *-- $ pattern. BTW, It also deletes all the empty lines (quoted or not) just above the signature to delete.\n\nOlder versions (for VIM 5.7) of the file define the function Erase_Sig(). \nThe latest version (for VIM 6.x) defines the command :EraseSignature. \n\nIt can also delete up to two signatures -- some mailing lists add another dashes-delimited\nsignature. And it keeps our signature that may be automatically inserted by some MUAs \nlike Mutt.\n\n\nSince v1.4: the operator-pending mode mapping '--' is defined. Hitting d--, c-- or y--\nwill delete, change or yank lines until our own signature (if present) or the end of the file.\n"}, {:name=>"Mail_mutt_alias.set", :summary=>"Extract an e-mail address from the mutt aliases file.", :description=>"This script permit to insert an alias from the mutt aliases file while editing an\ne-mail within vim.\n\nSince the version 2.0, we can hit <tab> (in INSERT-mode) within an address \nfield (To:, Cc:, Bcc:, Reply-To) to expand an alias. \nIf several contacts match the to-be-expanded pattern, a menu is proposed in a \nsplitted window in order to choose the addresses. \n\nDependencies :\nv2.x+ : a.vim                http://vim.sourceforge.net/scripts/script.php?script_id=31\n          Actually, you should download an old version of a.vim that still exports its functions\n\nv2.2+ : words_tools.vim http://vim.sourceforge.net/scripts/script.php?script_id=143\n\n\nN.B.: The command (:Ca) and the macro (,Ca) have been abandonned since version 2.3."}, {:name=>"Mail_Re.set", :summary=>"Merge the all the \"Re: Re:\" in e-mail subjects in only one.", :description=>"May be, you have allready noticed and used the two macros : ,re that merges all the \"[Rr][Ee]:\" in the subject in only one \"Re:\" and ,Re that merges \"[Rr][Re]: Re[n]\" in \"Re[n+1]\". \nThis file combines the features from both macros without any visual bell or incremention of the first number in the subject. \n"}, {:name=>"Triggers.vim", :summary=>"Helps to toggle definitions (maps, sets, abbr)", :description=>"This big file defines functions that help to toggle the definitions of many things -- like mappings, settings \nor abbreviations. The very simple application is to map (/ unmap) a macro when we hit (/rehit) the trigger. \nA much more useful application is to map all the definitions from a function when hitting the trigger and \nunload them on a second hit and reload on a third, etc..\n\nFor examples of use, cf. the header part of the file, or  <http://hermitte.free.fr/vim/general.php >.\n"}, {:name=>"Mail_cc.set", :summary=>"Function that deletes one's e-mail address from the Cc: list", :description=>"Bothered of receiving a copy of all your messages when you reply to a group of people ? Well, this file is for you ! \n\nIn order to use it, source this file or delete its last line and call DelFromCC() by yourself.\n\nIt works fine with MUTT and ELM ; I haven't test any other MUA. MUTT defines the option metoo that should handle this... I've never successed to make it work properly :-(("}, {:name=>"Map-Tools", :summary=>"Bracketing system + Tools for programming mappings", :description=>"Here is an archive containing different functions and commands aimed at (ft)plugins\ndeveloppers.\n\nYou fill find :\n- functions to define context dependent mappings : i.e. mappings that won't expand\n  within comment or string context -> MapNoContext() & MapNoContext2()\n- a function that insert a pair of tokens around a visual area -> MapAroundVisualLine()\n- a function that expands mappings contained into strings -> BuildMapSeq()\n- commands that eats the <spaces> you hit at the end of abbreviations\n\n- a set of definitions to insert markers and jump to them (derived from Stephen \n  Riehm bracketing system) ; the markers can be customized, erased or deleted, \n  etc.\n\n- my bracketing system : through a set of buffer-relative options, we can activate \n  (and tune) the insertion of pairs of brackets when we hit the opening bracket. It \n  works in insert, normal and visual modes. If markers are available and wanted, \n  they will be inserted in insert-mode.\n  It also proposes functions (from auctex.vim) that delete pairs of brackets, \n  change them (to '{}', '()', or '[]'), toogle backslashes, etc.\n\nYou fill found a much more complete documentation and examples within the archive, and there:\nhttp://hermitte.free.fr/vim/settings.php#brackets"}, {:name=>"cscope_macros.vim", :summary=>"basic cscope settings and key mappings", :description=>"This script implements the recommended settings for vim's cscope interface, and also provides a set of key mappings I've found useful.  If you don't know what cscope is, go to http://cscope.sourceforge.net and check it out--it's more powerful than ctags, though it works with fewer languages (primarily C/C++/Java).\n\nThe script takes care of automatically loading any cscope database you have in the current directory, or that you have set the $CSCOPE_DB environment variable to point to.  It also tells vim to allow cscope to share the CTRL-]  (goto tag) command with ctags.  Finally, it creates a set of keyboard maps (all starting with CTRL-spacebar) that perform the various types of cscope search, and which can either display cscope's results in a new vim window or in the current window.\n\n--------------------------------------------------\nA quick vim/cscope tutorial:\n--------------------------------------------------\n\n0) Get and install cscope if you don't have it already on your machine.\n\n1) Install this plugin (see instructions below).\n\n2) Go into a directory with some C code in it, and enter 'cscope -r'.  Check out the native cscope interface program (which will call vim to edit files if you set your EDITOR variable to 'vim').  The native cscope interface is very nice, but has the problem that you need to exit vim each time you want to do a new search.   Hit CTRL-D to exit cscope.\n\n3) Start up vim.  If you want, you can start it with a C symbol (ex: 'vim -t  main'), and you should hop right to the definition of that symbol in your code.\n\n4) Put the cursor over a C symbol that is used in several places in your program.  Type \"CTRL-spacebar s\" in quick succession, and you should see a menu showing you all the uses of the symbol in the program.  Select one of them and hit enter, and you'll jump to that use.  As with ctags, you can hit CTRL-T to jump back to your original location before the search (and you can nest searches and CTRL-T will unwind them one at a time).\n\n5) Try the same search, but this time via \"CTRL-spacebar h s\".  This time, the window will split in two horizontally, and the cscope search result will be put in the new window. [If you have trouble hitting the keys fast enough for this to work, go into the cscope_macro.vim script and change vim's timeout settings as described in the comments.]  \n\n6) Try splitting the window vertically, by using 'v' instead of 'h' in the above search.\n\n7) Explore some of the other cscope search types, like 'find file' and 'find functions that call the function under the cursor'.  These are all described in the comments in cscope_macros.vim.\n\n8) Try using cscope with another language, like Java or C++.  The best way to do this is by doing \"ls *.java > cscope.files\"  (or \"find -name '*.java' > cscope.files\" if you've got a directory tree of Java files), then running cscope.\n\n9) Try setting the $CSCOPE_DB environment variable to point to a cscope database you create, so you won't need to lauch vim in the same directory as the database. This is particularly useful for projects where code is split into multiple subdirectories.  (Note: for this to work, you should build the database with absolute pathnames: cd to /, and do \"find /my/fancy/project -name '*.c' -o -name '*.h' > /my/cscope.files\", then run cscope in the same directory as the cscope.files file, then set and export the $CSCOPE_DB variable, pointing it to the cscope.out file that results).\n\n10) Use \":help cscope\" within vim, and/or \"man cscope\" from your shell to answer any questions you have.  I.e., RTFM."}, {:name=>"calendar.vim--Matsumoto", :summary=>"Calendar", :description=>"This script create calender window.\nThis don't use the external program(cal)."}, {:name=>"colorize.vim", :summary=>"Change background color when in insert mode", :description=>"It is hard to adjust to command/insert mode.  \nIf you don't pay attention, all that typing is lost, etc.\nThese lines are added to your resource file _gvimrc\nand will change the background color when you\ngo into insert mode (not every key, but the main\nones i,s,a,and o.)  The color changes back when\nyou press escape.\nVery helpful for newbies!\n"}, {:name=>"ConvertBase.vim", :summary=>"Convert to/from various numeric bases", :description=>"This script is basically just three functions:\n  ConvertToBase(int, base)\n  ConvertFromBase(str, base)\n  ConvertBases(str, base1, base2)\n\nAnd two example functions that are commented out.\n\nThe following mappings may also be useful:\n\" Translate the character under the cursor to a decimal value:\nnmap <M-a>d i<C-R>=char2nr(getline(line(\".\"))[col(\".\") - 1])<CR><ESC>lx\n\" ... hexadecimal value:\nnmap <M-a>h ix<C-R>=ConvertToBase(char2nr(getline(line(\".\"))[col(\".\") - 1]),16)<CR><ESC>lx\n\" ... octal value:\nnmap <M-a>o i<C-R>=ConvertToBase(char2nr(getline(line(\".\"))[col(\".\") - 1]),8)<CR><ESC>lx"}, {:name=>"TagsMenu.zip", :summary=>"Creates a menu of all the tags in the current file.", :description=>"*TagsMenu.txt*   Plugin to add all known tags to a menu.\n\n--------------------------------------------------------------------------\nThe following is a cut-and-paste of the TagsMenu help file that is packaged in the attached zip file.\n--------------------------------------------------------------------------\n\nPURPOSE                                             *TagsMenu-purpose*\n\nThis plugin will find all the tags in the current file, and make a menu of these tags.  Each menu item is a move command to that tag (not actually a :tag command, but a /unique search pattern/ to that tag).\n\n\nREQUIREMENTS                                        *TagsMenu-requirements*\n\nThe only requirement for this plugin to work is that Exuberant Ctags (see |ctags|) version 5.x is installed somewhere in your path.  If you do have it installed but not in your path, you could also set the |TagsMenu_ctagsCommand| to explicitly point to your ctags installation.  No other external requirements are necessary.\n\n\nINSTALLATION                                        *TagsMenu-installation*\n\nTo add the plugin, see the vim help on the subject |add-global-plugin| (:h add-global-plugin).  To add the accompanying help file, see the vim help on the subject |add-local-help|.\n\n\nEXECUTION                                           *TagsMenu-execution*\n\nAutomatic execution:  the plugin will automaticly execute (depending on the value of the |TagsMenu_useAutoCommand| option) when a buffer is entered of a recognized filetype (see |TagsMenu-filetypes|).\n\nManual execution:  there are two ways to manually force the recalculation of the menu: \n    <leader>t\n        - this mapping depends on the value of <leader> for your configuration.  By default it is '&#039.  See |mapleader|.\n    menu Tags -> Rebuild Tags Menu \n        - this will only appear if the tags menu has already been created.\n\n\nREGOGNIZED FILETYPES                                *TagsMenu-filetypes*\n\nThe current list of recognized |filetypes| is limited to the list of types recognized by ctags.  These include: asm, awk, c, cpp, cxx, sh, cobol, eiffel, fortran, java, lisp, make, pascal, perl, php, python, rexx, ruby, scheme, tcl, and vim.\n\n\n\nVersion: 0.93\nAuthor: Jay Dickon Glanville (plus others) <jayglanville at rogers.com>\nLocation: http://members.rogers.com/jayglanville/tagsmenu\nLast Modified: 4 Dec 2001\n"}, {:name=>"perl.vim", :summary=>"Perl compiler script", :description=>"This is compiler script that runs perl -Wc and parses all error and warnings. For more information how to use compilers in VIM read help.\n\nThis version has workaround with redirecting stderr on windows platform so it can run either on unixes or windows.\n\nEnjoy. Lukas"}, {:name=>"oberon.vim", :summary=>"simple Oberon syntax file", :description=>"oberon.vim is a very simple syntax file to get a colored view of Oberon modules (*.Mod files)..."}, {:name=>"cvsmenu.vim", :summary=>"Menu for CVS-Versioncontrol", :description=>"Supports most cvs commands and adds som extended functions, e.g. \n- Query update (like WinCVS/gCVS)\n- Local Status (offline: displays status and version info)\n- Clickable/sorted output : easily open conflicting files, etc.\nWorks on single files as well as on whole directories, when called from fileexplorer.\nIncludes highlighting / mappings to navigate through cvs output or show conflicts."}, {:name=>"dtags", :summary=>"Create tag files for Borland Delphi/Kylix", :description=>"This Perl script scans (a given or local) directory tree for Delphi/Kylix files and prints a tag-file to stdout.\n"}, {:name=>"delphi.vim", :summary=>"Syntax file for Borlands Delphi/Kylix", :description=>"This syntax file for Borlands ObjectPascal (Delphi,Kylix) is derived from the original pascal.vim.\nSome basic VCL-Classes are added and some keywords have new meanings (e.g. read/write, assign).\nIt also includes a different color scheme.\n"}, {:name=>"Embperl_Syntax.zip", :summary=>"Syntax for Embperl", :description=>"Rewrite of the official embperl syntax file. There is a color scheme for setting GUI like Interdev (yellow perl code).\n\nThis is \"beta\" version of the script. It needs more testing (in vim < 6.0)."}, {:name=>"whatdomain.vim", :summary=>"Find out meaning of Top Level Domain", :description=>"If you ever wondered what country the domain .tv belonged to, you had to look it up in some database - you had to leave Vim. No More!\nThis plugin offers you a simple function which will identify the domain and print it out. You can call the function WhatDomain directly (with one string argument, the TLD), ot even better, use the following command on the Vim command line:\n    :WhatDomain\nIt will ask you for the domain you want to have identified and subsequently prints out which country or category this domain belongs to. You can also pass the domain you ask for as a parameter (:WhatDomain de) or use the function call syntax (:call WhatDomain)."}, {:name=>"emacs.vim", :summary=>"Emacs like colors", :description=>"  This colorscheme implements colors that let Vim look just a little like Emacs.\n  It is not perfect in several respects: For one Emacs has very different categories for its syntax highlighting. Many more, often, which tends to let your screen light up like a christmas tree sometimes. I can't reproduce that without changing the syntax files, and I don't want that. The scheme tries to look like Emacs, but I only really checked for C++. The most important thing is the color of comments, and these are right. The other aspect is the suitability of the script for terminal based Vims - I didn't check, it's for GVim.\n"}, {:name=>"po.vim", :summary=>"PO (portable object) helper functions", :description=>"  PO files are textfiles which contains translations. These are used by localized programs using gettext.\n  Ever saw the Emacs PO mode? It's great. This little filetype plugin tries to at least give you some help editing those PO files, and while it's certainly not (yet?) as good as the Emacs PO mode, it's good enough to get the work done.\n  This script adds some menu entries. No keystrokes defined. There are search functions for the next untranslated entry, the next fuzzy entry, or both; there's a \"remove fuzzy\" entry. To edit longer entries use \"remove quotes\"; you then can edit the entry as you like (using \"gq\", for instance); afterwards add the quotes again with \"add quotes\". When you're finished, send your file to the translation project (but take care that you filename must be the name the TP Robot requires - use a symlink, for instance)."}, {:name=>"CD.vim", :summary=>"CD to whatever directory the current buffer is using.", :description=>"This is a tiny little script to allow the VIM user to CD to whatever directory your buffer currently is in.  So, if you \"vim my/dir/deeply/in/src/file.txt\" a lot then \":CD\" will move VIM into my/dir/deeply/in/src so that you can edit other files easily within the same directory.\n"}, {:name=>"_vim_wok_visualcpp01.zip", :summary=>"Simulating some cool features of MS Visual Studio C++ (TM) by Microsoft Corp.", :description=>"Some key extensions, which simulate MS Visual Studio C++ behaviour under VIM. E.g. CTRL-F2 sets/unsets anonymous marks on current line, F2 jumps to next mark. HOME toggles cursorpos between first column of line and first non-white-char on current line. TAB indents all currently selected lines by one shiftwidth (SHIFT-TAB unindents). CTRL-SPACE does keyword completion.\nEven people who never used (or will use) the MS IDE, these key bindings make some tasks quicker/simpler... Just try the CTRL-F2 / F2 feature and you'll love it. Same for the new HOME behaviour.\nThis is my first VIM script, so don't blame me, if things work in even more simple ways... just drop me an email - and tell me how!"}, {:name=>"nqc.vim", :summary=>"NQC programming support (for the LEGO MINDSTORMS RCX-Controller)", :description=>"gvim-menus for NQC (Not Quite C),  Version 2.3r1  (and newer).\nNQC is a C-like language for programmimg the LEGO MINDSTORMS RCX-Controller.\nThese menus turn gvim into an IDE for the RCX-programming:\n - insertion of NQC statements, function calls, comments, RCX constants\n - download programs and firmware to RCX\n - upload the datalog from RCX\n - erase programs and datalogs in RCX\n\n\nHere are some screen shots : http://lug.fh-swf.de/vim/vim-nqc/screenshots-en.html"}, {:name=>"vfp.vim", :summary=>"Visual FoxPro 3.0, 5.0, and 6.0 syntax file", :description=>"\n     This file builds on the FoxPro for DOS v2.x syntax file maintained by Powing Tse <powing@mcmug.org> and the Clipper 5.2 & FlagShip syntax file maintained by C R Zamana <zamana@zip.net>.\n\n     This syntax file should work with Visual Foxpro versions 3.0 - 6.0 and OS platforms Windows, Mac, and Unix.  The best fit will be VFP 6 (which is Windows only).  Older versions may have things highlighted that aren't actually available in that version.  For example, GETHOST() is new in VFP 6, but would show up in a VFP 3 program as a reserved word.  Consider this as a future-proofing feature and not a bug.  ;-)\n\n     Because of the messy nature of the Visual FoxPro documentation *and* the language itself, I've had to combine reserved word lists from several, slightly different, sources.  This means I might have missed a reserved word here or there.  If you find one, please let me know so I can add it to this file.\n\n"}, {:name=>"project.tar.gz", :summary=>"Organize/Navigate projects of files (like IDE/buffer explorer)", :description=>"You can use this plugin's basic functionality to set up a list of\nfrequently-accessed files for easy navigation. The list of files\nwill be displayed in a window on the left side of the Vim\nwindow, and you can press <Return> or double-click on\nfilenames in the list to open the files. This is similar to how\nsome IDEs I've used work. I find this easier to use than\nhaving to navigate a directory hierarchy with the file-explorer.\nIt also obviates the need for a buffer explorer because you\nhave your list of files on the left of the Vim Window.\n\n\nBut there's much, much more . . . .\n\nYou can also instruct the Plugin to change to a directory and\nto run scripts when you select a file. These scripts can, for\nexample, modify the environment to include compilers in\n$PATH. This makes it very easy to use quickfix with multiple\nprojects that use different environments. I give examples in\nthe documentation.\n\nOther features include:\n\to Loading/Unloading all the files in a Project (\\l, \\L, \\w, and \\W)\n\to Grepping all the files in a Project (\\g and \\G)\n\to Running a user-specified script on a file (can be used\n\t  to launch an external program on the file) (\\1 through \\9)\n\to Running a user-specified script on all the files in a Project\n\t  (\\f1-\\f9 and \\F1-\\F9)\n\to Also works with the netrw plugin using directory\n\t  names like ftp://remotehost\n             (Good for webpage maintenance.)\n\to Support for custom mappings for version control\n\t  integration (example of perforce in the documentation).\n\to I also give an example in the documentation on how to \n\t  set up a custom launcher based on extension. The\n\t  example launches *.jpg files in a viewer. I have also set\n\t  up viewers for PDF (acroread) and HTML files (mozilla)\n\t  for my own use.\n\nThis plugin is known to work on Linux, Solaris, and Windows.\nI cannot test it on Windows, though, so please let me know if\nyou run into any problems. If you use it on other platforms,\nlet me know.\n\n(Let me know if you need a .zip file)\n"}, {:name=>"pt.vim.gz", :summary=>"Syntax file for Synopsys PrimeTime tcl", :description=>"This is a syntax file for Synopsys' PrimeTime tcl language\n\n ** These files are no longer being maintained here **  \n\nGo to my website www.zimmerdesignservices.com for the latest versions."}, {:name=>"dctl.vim.gz", :summary=>"Syntax file for Synopsys DesignCompiler tcl", :description=>" This is a syntax file for Synopsys' DesignCompiler tcl language \n\n ** These files are no longer being maintained here **  \n\nGo to my website www.zimmerdesignservices.com for the latest versions."}, {:name=>"foo.vim", :summary=>"examples of Vim functions (and a few commands, etc.)", :description=>"This file is a collection of Vim functions I have written, many of them in\nresponse to questions posted on the vim users' list.  They are all reasonably\nshort, so I hope they will be good examples if you are trying to learn how to\nwrite your own Vim functions.  You may even find some of the functions\nuseful, such as the :Range command and the Mark(), Common(), Count(),\nGetModelines(), VarTab(), and SmartBS() functions."}, {:name=>"word_complete.vim", :summary=>"automatically offers word completion as you type", :description=>"Each time you type an alphabetic character, the script attempts\nto complete the current word.  The suggested completion is selected\nin Select mode, so you can just type another character to keep going.\nOther options:  <Tab> to accept, <BS> to get rid of the completion,\n<Esc> to leave Insert mode without accepting the completion, <C-N>\nor <C-P> to cycle through choices, <C-X> to enter <C-X> mode.\n\nLimitations:\nThe script works by :imap'ping each alphabetic character, and uses\nInsert-mode completion (:help i_ctrl-p).  It is far from perfect.  For example, the :imap's mean that you are constantly switching out of Insert mode, which means that undo only works a few characters at a time.  This also messes up any abbreviations you may have defined.  Since Select mode uses the same mappings as Visual mode, the special keys mentioned above may conflict with what you are used to in Visual mode.  I have received one report that mswin.vim interferes with this script.\n\nEvery second character you type is in Select mode, so with versions of vim before 6.2, completions are offered only half the time."}, {:name=>"aux2tags.vim", :summary=>"Generate a tags file from a LaTeX .aux file", :description=>"     This script provide a command, :TeXtags, that will generate a tags\nfile in the current directory based on a LaTeX .aux file.  If you are editing\nthe file foo.tex in the current directory, just type :TeXtags.  You can then\nuse Vim's tag functions to display, or jump to, labels in foo.tex.\n\n     At the moment, this only works for \\label{} commands, not bibliographic\ncitations.  TODO:  handle \\bibcite; handle multiple files with \\input lines;\nbe more intelligent about directories; escape problematic characters in tags;\nuse :silent and <buffer> for Vim 6.0; etc."}, {:name=>"javaimp.vim", :summary=>"Open a Java source file from its import statement", :description=>"Set of functions to open a Java import statement as a file.\nMaintained by Darren Greaves http://boncey.org/showBlog.go?id=138\nSuggested stuff to add to your ~.vimrc:\nlet $JAVASOURCEPATH=\"$SERVLET_HOME/src/share,$JAVA_HOME/src,$XML_HOME/src\"\nmap H :call OpenJavaImport($JAVASOURCEPATH)<CR>\nThen press H while on a import line and the file should open (you'll need the\nsource files and the path to have been set already.\n\nThe paths in $JAVASOURCEPATH should have the source packages directly\nunderneath each path.  The script needs to be able to add the package to the\npath element and open a file.\n"}, {:name=>"uri-ref", :summary=>"Easily insert references to URLs in emails", :description=>"Inline URIs in emails make the text around them obscure. This is why I put references to URIs at the bottom of the email.\n\nThis script provides a prompt to do so in a painless way.\n\nExamples and documentation are at: http://larve.net/people/hugo/2001/02/email-uri-refs/"}, {:name=>"incfiles.vim", :summary=>"create menu entries for each include file in a C/C++ file", :description=>"This script generates menu entries for each include file within the actual edited C/C++ file.\nAfter executing it, you can enter any of the include files by selecting them via menu.\n\nThe script is just quick and (hope not very) dirty written, but working (only short tests up to now)\nunder GVIM 5.8, NT4.0, Novell network\n"}, {:name=>"functags.vim", :summary=>"create menu entries for each function definition in a C/C++ file", :description=>"This script generates menu entries for each C/C++ function definition within the actual edited C/C++ file.\nAfter executing it, you can move to any of the functions by selecting them via menu.\n\n- adds a menu entry under a main menu 'Proj'\n- creates a file cfunctags.vim as script for generating the menu entries\n\nBUGS: does not handle references ('&') and destructors (~) correctly.\n           If anyone would add these, please let me know.\n\nThe script is just quick and (hope not very) dirty written, but working (only short tests up to now)\nunder GVIM 5.8, NT4.0, Novell network\n\n"}, {:name=>"wordlist.vim", :summary=>"Autocorrect wordlist from Office XP", :description=>"When Vim parses this file it will give you autocorrection of words (\"andthe\" becomes \"and the\")."}, {:name=>"files2menu.pm", :summary=>"add all files recursively as menu entry", :description=>"DESCR     finds files according to predefined file masks in all subdirs starting in parent dir (default).\n\tcreates menu commands for gvim for each file found (creates submenues automatically after 40 menu entries).\n\tfilemasks and other settings may be easily changed within the perl script for your needs.\n\n\tUsage: \tfiles2menu.pm <options>\n\toptions:\n\t                    \tgenerate file list on stdout (default)\n\t -o <filelist>      \tgenerate filelist in file <filelist>\n\t -v                 \tgenerate VIM scriptfile\n\t -v <scriptfile>    \tgenerate VIM Scriptfile <scriptfile>\n\t -f <patternlist>   \tuse search pattern <patternlist>\n\t\t                predefined pattern lists:   CPP, EXE, MAK, GL, DOC, VIM\n\t -m                 \tcreate menu entry <menuEntry> for each found file  (blanks allowed in name)\n\t -c                 \tcreate submenu after <n> entries\n\t -d                 \tdebug mode\n\t -s <startdir>      \tstart in CWD (default) or parent dir ('..') or <startdir>\n\n\nI used 'ls' because any other tools had trouble with that genious system of long file names under Windows and Novell."}, {:name=>"translate.vim", :summary=>"Look up a word in a dictionary file", :description=>"This script looks up a word in a\ndictionary file using egrep (you can change this to grep, of course).\nWhen the word was found, a new window with the search results is opened at the bottom of the screen.\n\nThis script was inspired by Emacs' translate.el."}, {:name=>"AppendComment.vim", :summary=>"Append comment at end of line", :description=>"One thing I liked in Emacs is the ability to insert comments\nat the end of line using <M-;>. \nThis script tries to achieve the same for Vim.\nIf there's already a comment, it's aligned.\n\nMaybe, your language is supported. \nIf not, it's easy to add new ones.\n\nThis script was inspired by Meikel Brandmeyers EnhCommentify.vim: vimscript#23"}, {:name=>"let-modeline.vim", :summary=>"Extends the modeline feature to the assignment of variables", :description=>"The file defines the function FirstModeLine().\n\nIts purpose is very simple. It consists in extending VIM modelines (:h modeline for more info) to custom variables -- these variables can then be used to customize other VIM scripts.\n\nFor instance, if your file foo.vim has as one of its first or last lines:\n   \" VIM: let b:toto=\"foo\" g:tata=4 g:egal=\"t=y\".&tw $CPPFLAG='-I../../libs'\nThen, once the buffer is (re)loaded, one buffer relative variable (b:toto) and two global variables (g:tata and g:egal) are defined to the value specified after the equal sign.\n\nPersonnaly, I use it in conjunction with tex-tools.vim in order to know the name of the main file of the current document and then call latex on the main file and not on the currently edited file -- I use intensively \\\\include{} and \\\\includeonly{}.\n\nRegarding the security issue, the script forbids calls to functions in the right hand operand -- it prevents from trojans. Nevertheless, it is possible to call functions thanks to a buffer relative callback feature. This time, only one function could be called. Trojans are still possible if the callback functions (that you have accepted in your configuration) want it to be possible -- like calling a function named after the value passed in parameter... \nThe callback feature has been implemented to be used in conjunction with ftplugins ; cf. tex-maps.vim and tex-tools.vim on my Web site:\n    http://hermitte.free.fr/vim/tex.php\n\nNote: The version 1.5 is the last one which can be used with Vim 5.x."}, {:name=>"gdbvim.tar.gz", :summary=>"Watch in vim what you debug in gdb. And more.", :description=>"You have one window with (g)vim open, other window with gdb running. When you reach source line in your code, it appears in the vim window. In the opposite direction, you can send commands from vim to gdb (e.g., set breakpoints on given line).\n\nYou  may want to look at vimtip #357. I did not test that, but it may ease your work with this script.\n\nIt is possible that slightly fixed version and more on-line information is at http://www.volny.cz/zellerin/gdbvim/ ."}, {:name=>"Mkcolorscheme.vim", :summary=>"Help write colorscheme files from existing settings", :description=>"This is a simple script to help turn your existing highlight settings into a vim colorscheme file."}, {:name=>"brief.vim", :summary=>"Plugin for Brief-style Home and End", :description=>"Pressing \"Home\" successively puts you at the beginning of the current line, beginning of the screen, and the beginning of the file.  \nSimilarly, for \"End\".\n"}, {:name=>"plkeyb.vim", :summary=>"Polish dead-key keyboard emulation", :description=>"Polish letters in iso-8859-2 encoding. \nPress \"~\" (tilde), then [ACELNOSZXacelnoszx] to insert polish equiv.\nNEW :\n'keymap' version. Unzip the file in your $VIMRUNTIME/keymap or $HOME/.vim/keymap directory.\nYou'll be able to select the new 'polish' keymap from Edit/Keymap menu.\nActivate with Edit/Keymap/polish or :set keymap=polish.\n"}, {:name=>"vimtips.zip", :summary=>"Display a helpful tip the first time you start Vim each day.", :description=>"     Whenever you start Vim (but no more than daily) the script will open a\nhelp window with a Vim tip. You must download the tips separately, from\nhttp://vim.sourceforge.net/tips/tip_download.php\n\n    After installation, you can get the next tip with\n\n:TipOfTheDay\n\n(usual abbreviation rules apply) or go to the top of the tips file with\n\n:help vimtips.txt"}, {:name=>"savevers.vim", :summary=>"Automatically save and diff multiple, sequentially numbered revisions (like VMS)", :description=>"Automatically saves and compares multiple, sequentially numbered\nold revisions of files (like in VMS)\n\nIf the 'patchmode' option is non-empty, then whenever a file\nis saved, a version of the previously saved version is kept,\nbut renamed to {file}.{number}.{patchext}, where:\n    {file}     is the filename of the file being saved\n    {number}   is a number between 0001 and 9999\n    {patchext} is the value of the 'patchmode' option.\n\nOptionally, the saved versions can be placed in a subdirectory.\n\nNote that this plugin is DISABLED if 'patchmode' is empty.\nAlso, this plugin won't work if 'backupdir' is empty or if\n'backup' is unset, so to get started, put the following in\nyour \".vimrc\"\n\n    set backup\n    set patchmode=.clean\n\nSo, for example, if 'patchmode' is '.clean' and we save a\nfile named \"test.txt\" we'll have the following files:\n\n-rw-r----- 1 eralston admin  106 Sep 20 11:14 test.txt\n-rw-r----- 1 eralston admin  102 Sep 20 11:12 test.txt.0001.clean\n\nIf we make subsequent changes to \"test.txt\" and save it a\nfew more times, we'll end up with something like:\n\n-rw-r----- 1 eralston admin  226 Sep 20 11:43 test.txt\n-rw-r----- 1 eralston admin  102 Sep 20 11:12 test.txt.0001.clean\n-rw-r----- 1 eralston admin  106 Sep 20 11:14 test.txt.0002.clean\n-rw-r----- 1 eralston admin  132 Sep 20 11:22 test.txt.0003.clean\n-rw-r----- 1 eralston admin  148 Sep 20 11:34 test.txt.0004.clean\n\nCOMMANDS:\n   :Purge [-a] [-v] [N]\n      Removes all but the patchmode files numbered N and below.\n      The [N] is optional, and defaults to 1.\n      Normally, this operates only on the patchmode files associated\n      with the current buffer, but if the [-a] flag is given, then\n      it operates on all patchmode files in the directory of the\n      current file.\n      If the optional [-v] (verbose) flag is given, then the filename\n      of each deleted patchmode file is printed.\n\n      Use \":Purge 0\" to delete all of the patchmode files for the\n      current file.\n\n      Use \":Purge -a 0\" to delete all of the patchmode files in\n      the directory of the current file.\n\n   :VersDiff [arg]\n      Does a \"diffsplit\" on the current file with the version\n      indicated by [arg].  So, for example, if the current\n      file is \"test.txt\" then the \":VersDiff 5\" command will\n      do a \"diffsplit\" with \"test.txt.0005.clean\", assuming\n      &patchmode is \".clean\"\n\n      If [arg] is zero (the default), then the diff is done with\n      the current saved version of the file.\n\n      If [arg] is negative, then the diff is done with the\n      [arg]th oldest file; e.g., if [arg] is \"-5\" and there are\n      versions 0001-0023 saved on disk, then the version that\n      is diffed will be (23-5+1)=19, i.e, \"test.txt.0019\" will\n      be diffed.\n\n      If [arg] is \"-cvs\", then the diff is done with the most recently\n      checked-in version of the file.\n\n      If [arg] is \"-\", then the current VersDiff window is decremented.\n      If [arg] is \"+\", then the current VersDiff window is incremented.\n          (Note that if VersDiff is currently doing a cvs diff, then\n          the cvs revision is incremented/decremented)\n\n      If [arg] is \"-c\", then any current VersDiff window is closed.\n\nHINTS:\n   If you use GNU 'ls', then try adding \"-I'*.clean'\" (without the\n   double quotes) to your 'ls' alias (assuming &patchmode==.clean)\n\n   It's also helpful to have the patchmode value in the backupskip,\n   suffixes, and wildignore vim options:\n\n      :exe \"set backupskip+=*\" . &patchmode\n      :exe \"set suffixes+=\" . &patchmode\n      :exe \"set wildignore+=*\" . &patchmode\n\n   Also, here are some nice mappings that allow quick comparison\n   of the current file with previous versions.  Pressing <F5>\n   successively shows the diff with older versions.\n\n      \" <F5> decrease version viewed in VersDiff window\n      \" <F6> increase version viewed in VersDiff window\n      \" <F7> do VersDiff with cvs version of current file\n      \" <F8> cancel VersDiff window\n      nmap <silent> <F5> :VersDiff -<cr>\n      nmap <silent> <F6> :VersDiff +<cr>\n      nmap <silent> <F7> :VersDiff -cvs<cr>\n      nmap <silent> <F8> :VersDiff -c<cr>"}, {:name=>"vcscommand.vim", :summary=>"CVS/SVN/SVK/git/hg/bzr integration plugin", :description=>"VIM 7 plugin useful for manipulating files controlled by CVS, SVN, SVK, git, bzr, and hg within VIM, including committing changes and performing diffs using the vimdiff system.  Keywords:  bazaar bzr cvs CVS cvscommand git mercurial hg subversion SVN svk vcscommand\n\nThe source for this plugin is available in git at git://repo.or.cz/vcscommand .  A web front end is available at http://repo.or.cz/w/vcscommand.git .\n\nPlease submit any issues at http://code.google.com/p/vcscommand/\n"}, {:name=>"nsis.vim", :summary=>"This is a vim syntax file for NSIS script.", :description=>"NSIS stands for 'NullSoft Installation System' and is a handy free scriptable installation system made by NullSoft ( the \nguys who made Winamp). For more information on this, see http://www.nullsoft.com/free/nsis/\nThis syntax is very straight forward as the syntax of the scripting language is simple. \n\nIf you use NSIS, please give it a try and tell me what you think as this is the first I actually write and vim syntax file.\nThanks,"}, {:name=>"borland.vim", :summary=>"Classic borland IDE like Vim color scheme", :description=>"\n"}, {:name=>"tex.vim", :summary=>"LaTeX macros in Vim (which emulate operator-pending mode operations)", :description=>"This file type plugin intended provides some insert mode macros for the\nLaTeX typesetting language. The nice thing about these mappings is that\nthey emulate the operator pending mode in the insert mode.  i.e, the user\ndoes NOT have to type the LHS in a hurry or without making mistakes. This\nfacilitates using the macros greatly.\n\nSee below for the detailed list of macros provided or just browe the file after downloading it.\nIn brief, this file provides stubs for the most commonly used typsetting\ncommands such as figures, matrices etc. As an example, the commonly used\nmatrix element is provided. Typing\n\nmat<tab>\n\nin the insert mode will expand to the following familiar matrix element:\n\n\\left[\n\\begin{array}{_}\n\\end{array}\n\\right]\n\nwith the cursor placed where the underscore is shown (note the underscore is\nnot part of the macro, it just shows the cursor placement)\nNOTE: <tab> is part of the LHS of the mapping. however, the characters need\n      NOT be typed in quick succession as in most insert mode commands.\n\nSee the section \"ADDING\" in the file in order to modify/add new mappings.\n\nA quick way to enter greek symbols is also provided. For example, typing\n'\\q<tab>' will expand to \\theta. (NOTE: quotes are not part of the LHS).\nSee the section \"SYMBOLS\" in the file for adding/modifying the way the\ngreek alphabet is mapped into the english alphabet. Again <tab> can be \nconviniently pressed after a long time or after moving around and coming back.\n\na few other shortcuts: \n== expands to &=& (useful while writing eqnarrays) \n$$ expands to $$ but the cursor is repositioned before the last $ (so you dont have to go back) \n_ expands to _{} \n^ expands to ^{} \n\n============================================================================\nLIST OF AVAILABLE MACROS\n============================================================================\n\n1. TABLE: tab<tab>\n\\begin{table}\n\\centering\n\\begin{tabular}{-}\n\n\\end{tabular}\n\\label{tab:}\n\\caption{}\n\\end{table}\n\n2. ARRAY: bar<tab>\n\\left\n\\begin{array}{-}\n\n\\end{array}\n\\right\n\n3. ENUMERATE: ben<tab>\n\\begin{enumerate}\n\\item -\n\\end{enumerate}\n\n4. ITEMIZE:\tbit<tab>\n\\begin{itemize}\n\\item -\n\\end{itemize}\n\n\n5. EQUATION: beq<tab> \n\\begin{equation}\n-\n\\end{equation}\n\n6. EQUATION ARRAY: bqn<tab> \n\\begin{eqnarray}\n-\n\\end{eqnarray}\n\n6. EPS FIGURE: bfg<tab> \n\\begin{figure}[h]\n\\centerline{\\psfig{figure=-.eps}}\n\\caption{}\n\\label{fig:}\n\\end{figure}\n\n7. EMPTY FIGURE: bfe<tab> \n\\begin{figure}\n\\vspace{-}\n\\caption{}\n\\end{figure}\n\n8. TABULAR: btb<tab> \n\\begin{tabular}{-}\n\n\\end{tabular}\n\n9. TABLE: bta<tab> \n\\begin{table}\n\\centering\n\\begin{tabular}{-}\n\n\\end{tabular}\n\\label{tab:}\n\\caption{}\n\\end{table}\n\n10. PICTURE: pic<tab> \n\\begin{picture}(4,4)\n\\put(0.5,0){\\framebox(4,4){-}}\n\\end{picture}\n\n11. MATRIX: mat<tab> \n\\left[\n\\begin{array}{-}\n\\end{array}\n\\right]\n\n12. FRAC: frac<tab> \n\\frac{-}{}\n\n13. DOT: dot<tab> \n\\dot{-}\n\n14. DOUBLE DOT: ddot<tab> \n\\ddot{-}\n"}, {:name=>"express.vim", :summary=>"syntax file for Step21 express schema", :description=>"this is a syntax file for coloring the data structure description language EXPRESS as defined in the STEP (Standard for the Exchgange of Product Model) standard formarly\nISO-10303.  Express is describe in the part 11 of this standard"}, {:name=>"winmanager", :summary=>"A windows style IDE for Vim 6.0", :description=>"winmanager: A classical windows type environment for vim6.0 \n\nSnapshot                 : http://robotics.eecs.berkeley.edu/~srinath/vim/snapshot2.JPG \nDetailed Instructions : http://robotics.eecs.berkeley.edu/~srinath/vim/winmanager.htm \nUpates                    : http://robotics.eecs.berkeley.edu/~srinath/vim/winmanager-2.0.htm \n\nwinmanager is a plugin which implements a classical windows type IDE in Vim-6.0. Basically, you have the directory tree\nand the buffer list as 2 windows which stay on the left and the editing is done in a seperate area on the left. People\nhave already made excellent File and Buffer explorers seperately and I thought that it might be a cool idea to combine\nthem both.  winmanager.vim combines the standard File Explorer which ships with Vim6.0 and a Buffer Explorer written by\nJeff Lanzarotta into one package.  It has the following features: \n\n1. the buffer listing is dynamic: i.e as you keep changing windows, editing new files, etc, the buffer list changes\ndynamically. the window also resizes dynamically, i.e it tries to occupy the minimum possible space to display all the\ncurrently listed windows. also, only the filename (i.e without path) is displayed in this window. however, the full path\nname is echoed on the command line as one moves around. \n\n2. the file explorer window doesn't actually edit a directory. Its a new empty file with modifiable off, etc. so that it\ndoesnt eat up buffer numbers as you roam around the directory tree. I found the original behaviour slightly annoying...\nAlso, I didnt find a way to change drives i.e go from c:/ to h:/ in the original explorer.vim. therefore i have added a\ntiny new mapping 'C' which changes the currently displayed directory to pwd. \n\nThanks! \n\n"}, {:name=>"methods.vim", :summary=>"java, c++ menu classbrowser", :description=>"This little script offers an Class- and Sessionmenue for all languages\nctags understand (java,c++,c,eiffel,fortran). \n - ClassMembers: all attributes/methods of actual class\n - SessionClasses: all Classes in the current session\nBy clicking on the entries, vim jumps to the specified location.The menue is updated via autocommands."}, {:name=>"sqlplus.vim", :summary=>"Execute SQL queries and commands from within VIM (using Oracle's SQL*Plus)", :description=>"Jamis Buck no longer maintains this script. Dani Rey is the new maintainer. Alas, the vim.org system is not configured to allow project owners to change, and the vim.org maintainers are silent when help requests are sent, so we're doing this the hard way.\n\nIf you want to use sqlplus.vim, please go grab Dani Rey's version, here:\n\n  http://www.vim.org/scripts/script.php?script_id=2821\n\nEnjoy!"}, {:name=>"spec.vim", :summary=>"spec file plugin", :description=>"This is a spec file for creating/editing rpm spec files. It supports internal and external macros.\nThere are currently two commands:\n\\ch creates a new changelog entry\n\\CH creates a new single change"}, {:name=>"mail.tgz", :summary=>"mail plugin for vim", :description=>"This plugin's purpose is helping with mail editing.  It has two major roles.\nThe first is email address retrievel and the second is added functionality\nwhile editing.\n\nBelow is a description of the user callable functions in this plugin.\n\nEmail address retrieval\n=================\n\nMailAliasList\n------------------\n\nThis routine is designed to run an external program, allow the user to select\na bunch of emails, and then these emails are returned in a comma seperated\nlist.  For example, suppose the following line exists (the cursor is at the\ncaret):\n\n    To:\n          ^\n\nIf the user hits '\\al' then the currently configured program launches and the\nplugin will wait for the email list to be retrieved.  At present, only Abook\nis supported in this manner.  Patches are welcome.\n        \nMailAliasQuery\n---------------------\n\nThis routine is designed to take the <cword> under the cursor and do a lookup\non it.  This lookup should return a mutt email query, for example, given the\nfollowing:\n\n    To: john\n          ^\n\nIf the user hits \\aq, then the plugin will go out and attempt to lookup \"john\"\nin the current alias source.  Currently, all sources work with this mode.\n\nFormatting\n========\n\nMailFormatQuote\n-------------------------\n\nFormat a quote segment using QuoteMotion1.\n\nMailFormatLine\n----------------------\n\nFormats the current line.\n\nMailFormatMerge\n-------------------------\n\nConjoins the current line with the previous line.\n\nMailFormatParagraph\n-------------------------------\n\nFormats the current paragraph.\n\nQuote Manipulation\n==============\n\nMailQuoteEraseSig\n----------------------------\n\nThis routine will remove quoted signatures.  It always operates over the\nentire email.\n\n% | No, I don't agree with you.\n%\n% Nonsense.  You are wrong.  Grow up.\n%\n% | I can't believe I'm even replying to this.\n% | --\n% | Some power user\n%\n% Yeah, believe it, brother.\n% --\n% Some other user\n\nwill become:\n\n% | No, I don't agree with you.\n%\n% Nonsense.  You are wrong.  Grow up.\n%\n% | I can't believe I'm even replying to this.\n%\n% Yeah, believe it, brother.\n\nMailQuoteFixupSpaces\n---------------------------------\n\nThis will take a quote segment and try to put spaces in quote blocks where\nthey don't currently exist.  For example,\n    \n    >>% hello\n    >> bob\n\nwould turn into:\n\n    > > % hello\n    > > bob\n\nIn normal mode the ranger to operate over comes from mail_quote_motion1.\n\nMailQuoteMangledMerge\n------------------------------------\n\nThis routine will try and make sense out of 'Mangled' quoted paragraph.\nFor example, it will try and turn\n\n> > starting to look like a distro problem... Anyone\n> else\n> > having this problem running a different distro\n> besides\n> > LinuxBlast 8? Anyone tried 8.1 yet?\n\ninto:\n\n> > starting to look like a distro problem... Anyone else\n> > having this problem running a different distro besides\n> > LinuxBlast 8? Anyone tried 8.1 yet?\n\nIn normal mode this routine will operate over the current and next line.\n\nMailQuoteDelEmpty\n-----------------------------\n\nThis will search through the given range and attempt to delete all\nlines consisting of a quote block and optional white space.\n\nFor example,\n\n% > yellow\n% > blue\n% > \n% yes\n\nwill become:\n\n% > yellow\n% > blue\n\n% yes\n\nIn normal mode this routine will operate over the entire email.\n\nMailQuoteRemoveDpth\n----------------------------------\n\nThis routine will try and decrease the quote depth of a quote segment by one.\nHowever, it will remove the last layer of quoting.  This is because it is\nassumed that the user wants the oldest quote to be gone.\n\nFor example,\n\nab> % > I really\nab> % > like\nab> % > apples\n\nwill become:\n\nab> % I really\nab> % like\nab> % apples\n\nIn normal mode the ranger to operate over comes from mail_quote_motion1.\n\nQuote Motions\n===========\n\nA quote motion is a vim linewise motion that operates over quotes.  The\ndefault motion character is 'q'.  These motions are analogous to '$', 'E', and\nothers.  They allow the user to use operator commands over a quote range.  For\nexample, dq would allow the user to delete the current quote.  This means that\n\ngiven:\n\n> % Hi                                  <<< cursor on this line,\n> % How are you doing?\n> % How are things?\n> Fine.\n\nAnd the user hits dq, the text will be transformed into:\n\n> Yeah, It only took a few months.\n\nOr if the user were to hit, dqq, the text would be transformed into:\n\n> % Hi How are you doing?  How are things?\n> Yeah, fine.\n\nTo re-define the first or define the other two, use something like this:\n\n    omap <silent> <unique> q <Plug>MailQuoteMotion1\n    omap <silent> <unique> Q <Plug>MailQuoteMotion2\n    omap <silent> <unique> x <Plug>MailQuoteMotion3"}, {:name=>"TagsBase.zip", :summary=>"Creates a menu of tags (functions, fields...) keep track of the current function", :description=>"Tags Base started as the merge and enhancements of the scripts:\n *TagsMenu (http://members.home.net/jayglanville/tagsmenu/TagsMenu.html) script\n \t\t    Jay Dickon Glanville  dickon@nortelnetworks.com\n\n *ctags.vim (http://vim.sourceforge.net/scripts/script.php?script_id=12) script\n \t\t\tAlexey Marinichev   lyosha@lyosha.2y.net\n see |TagsBase-Credits|\nIt now is a complete rewrite of those scripts plus additional functionality in embedded\nperl as well as some of the original vim code which is used to provide the same functionality\nwhen you are unlucky enough not to have access to the +perl or +perl/dyn feature in\nyour vim build.\n\nTags Base automatically uses |ctags| to generate a |tag| file for the currently\nedited file, refreshes it if the file is newer than the tags file and uses it\nto provide a set of advanced feature to vim.\n\nBeware that this means that some tag files are left behind on your computer,\n\tthey may end up in the same directory as your files or in a temporary\n\tdirectory depending on the rights of the file directory. You can specify the\n\tprefixe and suffix used to compute those temporary files.  There is also\n                some options to cleanup those file, the default being of only cleaning up\n                the temp directory.\n\nRight now the feature provided are:\n    *Detection of the currently edited tag and its type and presentation of this information in the\n     title bar. Most of the time when editing a C/C++/java... file this means you have on the \n     title bar the name of the current function.     *Creation of a menu of tags in the file this \n     contains things such as method, function, class... the type of tags supported depends on \n     the current language and on the implementation of the |ctags| program\n\n    TagsBase manipulates all tags supported by |ctags|. (For the full list of\n    supported tags and attributes, see \"http://ctags.sourceforge.net/&quot;\n\n\nAdditional description can be found in the included help file. This script requires a version 5.0 of ctags.\n\nThis script has also been used by me as a test bed for embedding perl in vim scripts specifically for\nperformance reasons since parsing a large set of tags can take a fair amount of time.\nFor this reason you'll find a couple fo files (TagsBase.pl and VIM.pm) which I use in the development\nprocess, to find out about this see vimtip #140"}, {:name=>"nlist.vim", :summary=>"Vim global plugin for adding line numbers", :description=>"Description:\nThis provides a command and a function.  They both can be called with or\nwithout a range.  In addition, they can be called with or without arguments.\nWithout a range they operate on the current line.  The arguments are described\nbelow:\n\n    arg1 -> the number to start at.  The default is one.  This will\n            number your selected lines sequentially.  The start can be a\n            number, ., $, or, 'x (like getline).\n    arg2 -> Text to append after numbers.  The default is a space.\n    arg3 -> Controls formatting.  Can be \"left\", \"right\", or \"none\".  The\n            default is \"right\".\n\nExamples:\n    To make a list start at 1:\n        :'<,'>Nlist\n        :'<,'>call Nlist()\n    To number the whole buffer (with it's actual line number):\n        :%Nlist\n        :%call Nlist()\n    To number a subset of lines with their line number (and put a '] ' in\n    front of every number):\n        :'<,'>Nlist . ]\\\n        :'<,'>call Nlist(\".\", \"] \")\n    To number the whole buffer (with it's actual line number) without\n    justification:\n        :%Nlist 1 \\ left\n        :%call Nlist(\"1\", \" \", \"none\")\n\nExample mappings that a user can define:\nnnoremap <unique> <Leader>N :%Nlist<cr>\nvnoremap <unique> <Leader>N :Nlist<cr>"}, {:name=>"DirDiff.vim", :summary=>"A plugin to diff and merge two directories recursively.", :description=>"This is a utility that performs a recursive diff on two directories and generate a diff \"window\".  Based on that window you can perform various diff operations such as opening two files in Vim's diff mode, copy the file or directory recursively to the other, or remove the directory tree from the source directory."}, {:name=>"regview.vim", :summary=>"Interactively browse register contents", :description=>"This global plugin allows interactive browsing of register\ncontents.  It also allows pasting or executing the contents of\nthe currently viewed register. "}, {:name=>"BlockHL", :summary=>"highlighting different levels of {} in C", :description=>"Blockhl.vim supports block-oriented highlighting of leading white space for C/C++.\n\nFor dark backgrounds, as one gets deeper into curly braces, the leading indentation will change to ever lighter colors (up to 7 such levels, then it cycles).\n\nFor light backgrounds, increasing curly brace depths will cause ever darker colors to be used (again, 7 levels).\n\nYou will need to source the <blockhl.vim> file in if you change colorschemes.\n\n\tRequired: gvim\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#BLOCKHL)\n"}, {:name=>"desert.vim", :summary=>"A dark-background color scheme inspired by my hometown of Santa Fe, New Mexico", :description=>"I started with the evening colorscheme included in the distro, and tweaked a few colors to my liking.  Then I decided to do a major overhaul and give the whole thing a desert evening sort of feel.  I find it a very pleasing, easy-on-the-eyes theme.  \n\nScreenshot: http://hans.fugal.net/vim/colors/desert.html"}, {:name=>"colorscheme_template.vim", :summary=>"A template to make coming up with your own color scheme a bit easier.", :description=>"The philosophy here is to provide a ready-to-uncomment list of highlight commands for all the important groups.  Then you can deviate from the default until you come up with one you like."}, {:name=>"SelectBuf", :summary=>"A fast and extensible buffer explorer.", :description=>"PLEASE READ THE INSTALL SECTION COMPLETELY.\n\nSelectBuf is a buffer explorer similar to the file explorer plugin that comes\nwith Vim, the difference being that file explorer allows you to view the files\non the file system, where as buffer explorer limits the view to only the files\nthat are already opened in the current Vim session. It is even possible and \neasy to extend the plugin with new commands.\n\nSince the first time I released it in Jul '99 (try sending an email to \nvim-thread.1235@vim.org), the script has gone many\nrevisions and enhancements both in technology and features, taking advantage of all the niceties that the new versions of Vim has to offer.\n\nFor detailed help, see \":help selectbuf\" or read doc/selectbuf.txt. \n\n- Install the plugin, restart vim and press <F3> (the default key binding) to\n  get the list of buffers.\n- Move the cursor on to the buffer that you need to select and press <CR> or\n  double click with the left-mouse button.\n- If you want to close the window without making a selection, press <F3>\n  again.\n- You can also press ^W<CR> or O to open the file in a new or previous window.\n  You can use d to delete or D to wipeout the buffer. Use d again to\n  undelete a previously deleted buffer (you need to first view the deleted\n  buffers using u command).\n\nYou can change the default key mapping to open browser window by setting \n\n      nmap <unique> <silent> <YourKey> <Plug>SelectBuf\n\nAlmost everything is configurable, including all the key mappings that are\navailable. E.g., you can change the help key to <C-H> instead of the default ?,\nso you can free it to do backward searches in the file list, using the\nfollowing mapping:\n\n      noremap <silent> <Plug>SelBufHelpKey <C-H> \n\nSome highlights of the features are:\n\n- It is super fast as the buffer list is cached and incrementally built as new\n  files are added and the old ones are deleted.\n- Hide buffer numbers to save on real estate (goes well with \"Always On\" mode\n  or when used with WinManager).\n- Opens a new window to avoid disturbing your existing windows. But you can\n  change the behavior to reuse the current window or even to permanently keep\n  it open.\n- You can select block of buffers and delete or wipeout all the buffers at once.\n- You can toggle various settings on and off while you are in the browser. You\n  can e.g., toggle showing the buffer indicators by pressing i.\n- Goes very well with WinManager.\n- There are different sorting keys available. You can sort by buffer number,\n  name, type (extension), path, indicators and MRU order. You can even select a\n  default sort order\n- If you use multiple windows, then the browser restores the window sizes after\n  closing it.\n- Syntax coloring makes it easy to find the buffer you are looking to switch to.\n- Full configurability.\n- Extensibility.\n- Support for WinManager and multiselect plugins.\n- and many more.\n\nFor more information, read the vim help on seletbuf.\n\n\nSearch_key_words: buffer selectbuf bufexplorer explorer list select multvals genutils multiselect Hari Krishna Dara\n"}, {:name=>"bufNwinUtils.vim", :summary=>"*obsolete* A nice set of useful functions", :description=>"This script is not maintained any more. I have renamed it to genutils.vim and added many more functions. Unless you are using a very old version of one of my other scripts, that require this, you should download the new script, genutils.vim\n\n(http://vim.sourceforge.net/scripts/script.php?script_id=197\n\n-----------\n\nDefines the following functions:\n\n- NumberOfWindows\n- FindWindowForBuffer\n- FindBufferForName\n- SaveWindowSettings\n- RestoreWindowSettings\n\nAnd other misc. functions."}, {:name=>"lightWeightArray.vim", :summary=>"*obsolete* Small utility to work with vim multivalues variables", :description=>"I have improved this script and uploaded as a new script called multvals.vim. Please download it from here:\n\nhttp://vim.sourceforge.net/scripts/script.php?script_id=171\n\nThis defines two readonly functions to work with ',' separated multivalues such as \"tags\". You can also use it as a light-weight array operations. You can make up an array by concatenating a set of values with a ',' in between them and later use these functions to extract the individual values. "}, {:name=>"golden.vim", :summary=>"Gold based color scheme", :description=>"A dark colorscheme that encorporates a gold theme.  Supports folds, and splitbuffers.  examples can be found at http://www.trolocsis.com/vim/goldencpp.html and http://www.trolocsis.com/vim/pythontest.html"}, {:name=>"torte.vim", :summary=>"Grey on black, slighter contrasts (for TFT)", :description=>"Dark colorscheme, uses grey/green/yellow text on black.\nNo bold chars (better for small fonts)."}, {:name=>"borland.vim--Maerz", :summary=>"compiler plugin for some Borland compilers", :description=>"Contains a single errorformat for all supported compilers, as well as detailed settings/comments for each.\nSupported/tested compilers : \n- Turbo C 2.0; Borland C 3.1, 5.2; CBuilder 4, 5;\n- Turbo Pascal 7.0; Delphi 5, 6; Kylix 1.0;\n- Free pascal 1.0 (GNU)"}, {:name=>"idutils", :summary=>"Simple interface with GNU id-utils (deprecated)", :description=>"This script has been superceded by vimscript #1062 with many enhancements.\n\nThis script provides a simple interface with GNU id-utils.\n\nSummary Of Features:\n  Command Line:\n      IGInitialize, IDGrep, IDGrepAdd\n                                                                              \n  Settings:\n      g:IGlidcmd, g:IGfiltercmd, g:IGautoCopen\n                                                                              \nHelp:\n      IDGrep    <keyword>\n      IDGrep    [<lid argument> ...] <lid keyword pattern> \n      IDGrep    <lid options> [+f <filter arguments> ...]\n      IDGrepAdd <keyword>\n      IDGrepAdd [<lid options> ...] <lid keyword pattern> \n      IDGrepAdd <lid arguments> [+f <filter arguments> ...]\n                                                                              \n  You can use all the regular quickfix commands to traverse from one hit to\n    another.\n                                                                              \n      :h quickfix \n                                                                              \n  Each time you run IDGrepAdd, the new list of matches are added to the\n    existing list. This works the same as 'grepadd' command. If you can't\n    use a single filter to get all the matches then this command helps you to\n    still work with a single list instead of generating multiple lists.\n                                                                              \n  Use the g:IGlidcmd, g:IGfiltercmd, g:IGautoCopen global variables to set\n    the path to 'lid' command, filter command name/path (defaults to 'grep')\n    and if the error list window should automatically be opened (runs\n    |:cwindow| at the end).\n                                                                              \n  You can pass as many filters as you want, each prefixed with +f option.\n    The filter arguments are escaped such a way that the arguments are\n    passed through the shell, unmodified to the filter.\n                                                                              \nExamples: \n  - Filter the lines that don't contain src.\n      IDGrep main +f src\n                                                                              \n  - Filter the lines that contain src.\n      IDGrep main +f -v src\n                                                                              \n  - To search for the current word in all the files and filter the results\n    not containing \\.java in the grepped output. This will potentially\n    return all the occurences in the java files only. \n      IDGrep <cword> +f \\.java \n                                                                              \n  - If any argument contains spaces, then you need to protect them by\n    prefixing them with a backslash.  The following will filter those lines\n    that don't contain \"ABC XYZ\".\n      IDGrep <cword> +f ABC\\ XYZ \n\n\nSearch_key_words: idutils id-utils gnu id grep gid mkid lid Hari Krishna Dara"}, {:name=>"MultiPrompt.vim", :summary=>"\"Emulates\" a multifield prompt dialog even in console mode!", :description=>"\"Emulates\" a multifield prompt dialog in console mode!\nIdeal tool for speeding up your typing. Good for constructs, which contains constant text with a few small variable texts.\nSee the examples in the script!\nWARNING: Don't use with a beta version! It will crash vim. (due to a bug in vim)"}, {:name=>"blue.vim", :summary=>"a blue theme for vim", :description=>"I just wanted a blue theme for use with vim ... and I did this one. I looks better on gvim, because of the hexa color values there. but works good on the console too. some things need to fix, but by now its working good for me. ;-)"}, {:name=>"csharp.vim", :summary=>"C# Syntax file", :description=>"This is off of the comp.editors newsgroup. I wanted to make sure it wasn't \"lost\" so I am uploading it to here. I have tweaked it slightly. I am not a syntax guru so please someone take it...modify it...love it! I do not know who the original author is otherwise I would give him credit in the file."}, {:name=>"cs.vim", :summary=>"Another C# Syntax Colorizer File", :description=>"Another C# syntax colorizer, this one made by a friend and I over the course of Beta 2. Some things don't work correctly, or aren't done yet (#region folding, stuff like that), but it's fairly generic enough to have a nice base for adding things.\n\nTo add:\n- error classes\n- directionals (and call them that)\n- operators\n- #region folding\n\nI'll copy the contents of the System classes and integrate coloring for that (probably by copying wholesale from vimscript #116) if someone really wants me to do so. Ain't Open Source great? =P"}, {:name=>"Shell.vim", :summary=>"A shell buffer in vim.", :description=>"Many a time I find myself missing the power of\n*the* editor while typing shell commands. This\nscript opens a new buffer which can be used to\nenter shell commands. Commands will be\nexecuted when you type <Enter>. Simply put, it\ndoes a :r!command<cr> and a little more.\n\nThe global variable g:PROMPT wil be used as\nthe prompt string."}, {:name=>"vim.vim", :summary=>"indentation for vim script with support for embedded scripting language", :description=>"This script is for those of us who uses embedded scripting language in the here document form.\nsee :help perl, :help ruby, :help python, :help tcl\nif you embed a script in vim using the \nperl<<EOF\n#some perl code\nEOF\nor equivalent for other script languages, the scripts won't be correctly indented.\nWorse, if you write some python this way and reindent your file the whole script is trashed since\nthe indentation was meaningfull and it is lost.\n\nThis scripts add support for indenting the embedded script.\nPlease mail me any problems you encounter with this script"}, {:name=>"Decho", :summary=>"Vim script internal debugger (output in separate window, tab, or remote vim)", :description=>"The Decho.vim plugin provides debugging messages in a separate window.  One puts\n\n    Decho \"some message here\"\n-or-\n    call Decho(\"another message\")\n\nand Decho will split the screen with a five line debugging window on the bottom of the display where the messages will appear.  Allows one to inspect multiple error messages with the usual vim editing commands!\n\nTo better support the debugging of scripts, Decho.vim also provides:\n\n    call Dfunc(\"YourFunctionName([arg1<\".a:arg1.\"> arg2<\".a:arg2.\">])\")\n    call Dret(\"YourFunctionName [returnvalue]\")\n\nThese two functions use Decho(), but also provide function tracking.  The .vim/syntax/Decho.vim provides special highlighting for the DBG buffer, too.  See the example below!\n\nOne may redirect the output of arbitrary vim commands to the DBG buffer with the following function:\n\n    call Dredir(\"command\")\n\nFor example, consider\n\n\tcall Dredir(\"ls\")\n\nDecho.vim makes it easy to turn debugging on and off in your scripts:\n\n    Turning Debugging On:\n        vim yourscript.vim\n        :DechoOn\n        :wq\n\n    Turning Debugging Off:\n        vim yourscript.vim\n        :DechoOff\n        :wq\n\nSome plugins use events such as WinEnter and others attempt to control window layout.  Decho supports these plugins with four methods to avoid disturbing the display:\n\n\tDechoMsgOn  -- subsequent debugging output uses :echomsg\n\tDechoRemOn  -- subsequent debugging output goes to a remote gvim which DechoRemOn will set up itself\n        DechoTabOn  -- subsequent debugging output goes to a separate debugging tab/window\n\tDechoVarOn  -- subsequent debugging output goes to a variable (default value: g:dechovar)\n\nWith any of these enabled, subsequent Dfunc, Dret, Decho, and Dredir output will be directed as indicated.\n\n ---------------------------------------------------------------------\nExample:\n\n    LocalBrowse(dirname<.>) {\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |dirname</home>\n    |Perform directory listing...\n    |bufnr(dirname</home>)=1\n    |dirnamenr=1 dirname</home> pre-exists\n    |changed directory to</home>\n    |buffer already exists, but needs listing (buf#1)\n    |Setting up local browser maps\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |NetGetcwd() {\n    ||return NetGetcwd /home/cec/.vim/VIMSCRIPT/ }\n    |set up banner\n    |directories will be sorted by name\n    |LocalBrowseList(dirname</home>) {\n    |(elided for brevity)\n    ||return LocalBrowseList }\n    |SetSort() bannercnt=8 {\n    |(elided for brevity)\n    ||return SetSort }\n    |NetSort() {\n    ||return NetSort }\n    |return LocalBrowse : file</home> }\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#DECHO)"}, {:name=>"asu1dark.vim", :summary=>"Color scheme with dark background.", :description=>"My favorite dark color scheme. Very colorful :) Tried only in Win32 gvim, and DOS vim."}, {:name=>"Astronaut", :summary=>"DrChip's colorscheme: looks the same for vim and gvim (dark background)", :description=>"IF YOU DON'T CARE ABOUT VIM AND GVIM USING THE SAME COLORS, THIS COLORSCHEME IS NOT FOR YOU!!!  (guess I'm tired of those who complain about the use of only 8 colors...)\n\nThis colorscheme is a dark-background style colorscheme with the advantage that it works with console/terminal vim in the same way that it works with GUI vim.  Thus it is restricted to using just the basic eight colors that many xterms are limited to.\n\nThe <astronaut.vim> file gives you my dark background preferred colorscheme.  If you'd like to see a preview, check out\n   \n http://mysite.verizon.net/astronaut/vim/colors/colorscheme.html\n    \nwhich has a small picture of yacc code being highlighted by <astronaut.vim>.\n          \nAs of version 2 of the astronaut colorscheme, <astronaut.vim> supports some options which help console vims display properly.  There's a help file (doc/astronaut.txt) which you can enable by typing in a vim\n                     \n    :helptags ~/.vim/doc/\n                         \n(correct the path as needed).  The options include:\n                                \n  let astronaut_bold=1      : use the bold modifier for term, cterm, and gui\n\n  let astronaut_dark=1      : dark colors used (otherwise some terminals\n                              make everything bold, which can be all one\n                              color)\n\n  let astronaut_underline=1 : assume that underlining works on your terminal\n                              Otherwise some groups will have dark-magenta\n                              background highlighting.\n\nFor example, on my old Sgi workstation, I've found that the Irix o/s needs let astronaut_dark=1 even though its only an 8-color terminal.  Otherwise most everything shows up as yellow.\n"}, {:name=>"sum.vim", :summary=>"sum the values of a range of rows", :description=>"A little script that sum some values of a range of rows. That's all :)\nSum.vim use the powerfull bc utility (you must install it!).\nThe script work also with older version of vim... i tested it also under win32 and it work (of course you must install the porting of bc)"}, {:name=>"quickhigh.tgz", :summary=>"Highlight quickfix erros", :description=>"This is a plugin for highlighting quickfix errors.\n\nIt provides mappings for manualy adding the highlights and commands to automatically add the highlights.\nIt has the ability to work with both the :make and :grep commands.\nIt also has the ability to distinguish between warning and error compiler messages.  \n\nPlease see the documenation for configuration (help quickhigh.txt after installation)."}, {:name=>"selbuff.vim", :summary=>"Another buffer select script", :description=>"selbuff.vim is an easy way to select a buffer, very similar to bufexplorer.  It works by creating a window (n < (&lines/2) ? n : (&lines/2)) lines high listing all buffers (except the selection temp buffer) at the bottom of the vim frame.  Moving the cursor to a line and pressing <CR> shows the selected buffer in the window you were in when you pressed <Leader>bl. Moving the cursor to a line and pressing 'd' delete's the buffer.  Moving the cursor to a line and pressing 'w' will write the file.  Pressing 'q' within the select buffer window closes the window."}, {:name=>"ctx-1.15.vim", :summary=>"Describes your cursor&#039s current scope or context when editing a C file.", :description=>"CTX is an attempt to help Vim users navigate in C\nprogram files with very large function definitions. Such\nfiles should generally not exist, but alas they do, and\nsometimes we need to make changes to them.\n\nThis script helps by opening a small window in your Vim\nsession and keeping up-to-date with a few lines of text\ndescribing your cursor&#039s current scope or context in a C\nfile.\n\nhttp://www.bluweb.com/us/chouser/proj/ctx/\n"}, {:name=>"runscript.vim", :summary=>"Plugin for running Python scripts.", :description=>"Vim global plugin for running Python scripts\nVersion: 1.1\nMaintainer: Frederick Young <lordfyb@hotmail.com>\nLast change: 2001 Oct 30 \n--Pressing the \"F12\" key will run the Python script in the current buffer\n \n--Pressing the \"F11\" key will designate the Python script in the current\n  buffer as the script to run when pressing F12\"\n   \n--Pressing \"Shift-F11\" will remove the designation performed by pressing \"F11\"\n  and will allow pressing \"F12\" to run the script in the current buffer\n   \n--Typing the Ex command \"Rs\" will also allow you to run a Python script but\n  with the benefit of allowing you to pass up to 20 parameters to the script.\n   \n   Sample syntax...\n\n   \t:rs -xy 800 600\n\n  The above will run the script in the current buffer or the one designated\n  to run when pressing \"F11\" and pass to it the parameters \"-xy 800 600\"\n\n--Pressing \"F9\" will toggle the display of a buffer containing the output\n  produced when running the Ex command \"Rs\" or pressing \"F12\".\n\nAlso, the value of the variable s:PathToExecutable in the script may need to be changed to reflect the location of Python on your system.\n\n  With some minor modifications, it should be possible to run other scripts\n  like perl, vbscript, or even executables compiled with the Ex command\n  \"make\"."}, {:name=>"random_vim_tip.tar.gz", :summary=>"Python script - not vim - displays random vim command or tip.", :description=>"Displays random vim command (with explanation) or tip, then starts vim. Can be set to show tip once per X launches. "}, {:name=>"PushPop.vim", :summary=>"Pushd/Popd implementation for vim command-line", :description=>"PLEASE READ THE INSTALL SECTION.\n\n- The script provides a pushd/popd functionality for Vim taking Bash as a\n  reference. It defines new commands called Pushd, Popd and Cd and Dirs.\n  It also defines abbreviations pushd and popd (the lower case versions)\n  to make it easier to type and get used to, but if it causes any\n  trouble for your regular command line typing (as the abbreviations are\n  expanded anywhere you type), just set the g:pushpopNoAbbrev variable in\n  your .vimrc, or install cmdalias.vim also along with PushPop.vim (in\n  which case additional abbreviations are defined for dirs and cdp as\n  well). The cmdalias.vim plugin provides support for defining\n  abbreviations that expand only at the start of the command-line, which\n  make the abbreviations behave just like bash aliases, or like the Vim\n  built-in commands (read the plugin's description for more information).\n- Most of the Bash pushd/popd syntax is supported.\n- The plugin integrates seamlessly with the vim features such as 'cdpath'.\n  It handles the protected command and space chars correctly as expected,\n  however, unprotected spaces are not treated as separators (which is the\n  case with 'cdpath' for the sake of backward compatibility with age old\n  vim 3.0).\n- Vim provides a \"cd -\" command to quickly jump back to the previous\n  directory on the lines of bash, to make it complete, the script\n  sets the g:OLDPWD variable to mimic the $OLDPWD variable of bash.\n- The Cdp command will push the directory of the current file on to the\n  stack and cd into it.\n- It provides commands to make it easy to manipulate the \"cdpath\" and save\n  and restore it (unless the persistence feature of genutils.vim is\n  disabled), without needing to manually edit the vimrc. The \"PPAddDir\"\n  command will allow you to add the specified directory or the current\n  directory (with no arguments) to 'cdpath'. The \"PPRemoveDir\" command can\n  be used to remove a directory by its name or index, or just the current\n  directory (whith no arguments). Both commands accept \"-l\" as an option\n  to specify the directory argument literally (the directory name is then\n  not modified). The \"-l\" option with no arguments can also be used to\n  add/remove \"empty\" directory entry (represented as ^, or ,, or ,$ in the\n  'cdpath'). If you need to add entried that have wild-cards in them (such\n  as \"src/**\", the above commands can't be used as Vim will try to expand\n  the wildcards before the plugin can see them, so in this case use\n  \"PPAddPat\" and \"PPRemovePat\" commands. Pass \"-l\" option to avoid\n  modification.\n- To view the list of directories in your 'cdpath', use the regular \"set\n  cdpath?\" command or just \"Cdpath\". In addition, the \"Cd\" command accepts\n  \"-i\" option to cd directly into one of the directories in 'cdpath'. With\n  no arguments, you will be prompted with the list of directories to\n  select from, and with an index as the argument (starting from 0), you\n  can directly cd into the directory at that index.\n- If g:pushpopCdable_vars is set, the plugin emulates the bash\n  'cdable_vars' feature. When the built-in \":cd\" fails, the argument is\n  assumed to be the name of a global variable whose value is the directory\n  to change to. Normally, you don't necessarily need to use the :Cd\n  command instead of :cd command, but in this particular case, the feature\n  will not work unless you use the :Cd command. Consider aliasing :cd to\n  :Cd as described in Deprecations section below.\n- The main functions are also exposed as global functions, which can be used\n  by the script writers to recursively traverse directories and finally\n  return back to the original directory.\n\nPlease see the script header for more information such as deprecations etc.\n\nPlease send in your comments/feedback/suggestions/contributions for improving the script.\n\n=================================================\nYou can refer to the bash manual page for more information on how to use Pushd, Popd and Dirs commands. In case you don't have access to it, here is an extract from bash man page (on cygwin):\n\n       pushd [-n] [dir]\n       pushd [-n] [+n] [-n]\n              Adds a directory to the top of the directory stack,\n              or  rotates  the  stack,  making the new top of the\n              stack the current working directory.  With no argu-\n              ments,   exchanges  the  top  two  directories  and\n              returns 0, unless the  directory  stack  is  empty.\n              Arguments,  if  supplied,  have the following mean-\n              ings:\n              +n     Rotates the stack so that the nth  directory\n                     (counting from the left of the list shown by\n                     dirs, starting with zero) is at the top.\n              -n     Rotates the stack so that the nth  directory\n                     (counting  from  the right of the list shown\n                     by dirs, starting with zero) is at the  top.\n              -n     Suppresses  the  normal  change of directory\n                     when adding directories  to  the  stack,  so\n                     that only the stack is manipulated.\n              dir    Adds  dir to the directory stack at the top,\n                     making it the new current working directory.\n\n              If  the pushd command is successful, a dirs is per-\n              formed as well.  If the first form is  used,  pushd\n              returns  0  unless  the  cd to dir fails.  With the\n              second form, pushd returns 0 unless  the  directory\n       popd [-n] [+n] [-n]\n              Removes  entries from the directory stack.  With no\n              arguments,  removes  the  top  directory  from  the\n              stack,  and performs a cd to the new top directory.\n              Arguments, if supplied, have  the  following  mean-\n              ings:\n              +n     Removes the nth entry counting from the left\n                     of the list shown  by  dirs,  starting  with\n                     zero.   For example: ``popd +0'' removes the\n                     first directory, ``popd +1'' the second.\n              -n     Removes the  nth  entry  counting  from  the\n                     right  of  the  list shown by dirs, starting\n                     with zero.  For example: ``popd -0'' removes\n                     the  last directory, ``popd -1'' the next to\n                     last.\n              -n     Suppresses the normal  change  of  directory\n                     when removing directories from the stack, so\n                     that only the stack is manipulated.\n\n              If the popd command is successful, a dirs  is  per-\n              formed  as  well, and the return status is 0.  popd\n              returns false if an invalid option is  encountered,\n              the directory stack is empty, a non-existent direc-\n              stack is empty, a non-existent directory stack ele-\n              ment is specified, or the directory change  to  the\n              specified new current directory fails.\n              tory stack entry is  specified,  or  the  directory\n              change fails.\n       dirs [-clpv] [+n] [-n]\n              Without  options,  displays  the  list of currently\n              remembered directories.  The default display is  on\n              a  single  line  with  directory names separated by\n              spaces.  Directories are added to the list with the\n              pushd  command;  the  popd  command removes entries\n              from the list.\n              +n     Displays the nth  entry  counting  from  the\n                     left  of the list shown by dirs when invoked\n                     without options, starting with zero.\n              -n     Displays the nth  entry  counting  from  the\n                     right of the list shown by dirs when invoked\n                     without options, starting with zero.\n              -c     Clears the directory stack by  deleting  all\n                     of the entries.\n              -l     Produces a longer listing; the default list-\n                     ing format uses a tilde to denote  the  home\n                     directory.\n              -p     Print the directory stack with one entry per\n                     line.\n              -v     Print the directory stack with one entry per\n                     line, prefixing each entry with its index in\n                     the stack.\n\n              The return value is 0 unless an invalid  option  is\n              supplied  or n indexes beyond the end of the direc-\n              tory stack.\n=================================================\n\nSearch_key_words: push pop directory cd change bash csh dirs pushpop genutils Hari Krishna Dara"}, {:name=>"usr2latex.pl", :summary=>"Convert vim usrguide txt files to latex", :description=>"This script can be very useful to produce a readable book version of your usr_*.txt files.\nIt generates on its standard output a latex file from all the usr_*.txt.\n\nI know, it's far from perfect but it produced a quite good latex file for me.\nEmail me if you want to get latex, dvi or pdf generated output."}, {:name=>"spellcheck.vim", :summary=>"spell checker  for vim", :description=>"This script enables spell checking capabilities known from text \nprocessors:\n\n*SpellCheck: highlights all misspelled words\n*Propose: checks word under cursor - giving proposals for correcting\n*AddToDictionary: adds word under cursor to dictionary\n*SpchkNxt: jumps to next error\n*SpchkPrv: jumps to previous error\n*SetLanguageTag: which language to use (uk_UK | de_DE ...)\n*SpellAutoEnable: enables automatic higlighting of misspelled words\n  (this is done via CursorHold)\n*SpellAutoDisable: disables automatic check\n\nproblems:\n-syntax highlighting does not work correctly in every syntax-mode\n solution: set syntax=off and then do the spellcheck\n-to add a word to the list of known words, the skript has to know \n which private dictionary aspell is using (something like \n $HOME/.aspell.xxx.pws where xxx depends on the language tag)\n the current relation is: \n   uk_UK|us_US -> english (.aspell.english.pws)\n   de_DE -> de (.aspell.de.pws)\n to add entries or change existing ones, there is a little adjustment table.\n"}, {:name=>"PopupBuffer.vim", :summary=>"Vim global plugin for selecting buffer from PopUp menu", :description=>"This script is an adaptation of the default list buffer menu from menu.vim file. With mousefocus on and horizontally splited windows, it's very difficult to select an other buffer for the bottom window from the Buffer menu :). With the PopupBuffer script, right-click on the bottom window and select an other buffer from the Buffers submenu."}, {:name=>"TableTab.vim", :summary=>"global plugin for variable-width tab stops", :description=>"When active, TableTab.vim remaps the <Tab> key in insert mode, to\nthe function, which adjusts the tab stops according to the previous\nline.  If this line matches /^\\s*[_=*\\-]\\+ *$/  (it is only of ===,\n--- etc.) the line before is checked.\n\nShould be useful for editing tables.\n"}, {:name=>"djgpp.vim", :summary=>"Compiler file for DJGPP", :description=>"Compiler file to use QuickFix features with DJGPP compiler."}, {:name=>"vim-spell.tar.gz", :summary=>"Another spell-checker plugin", :description=>"VIM-Spell is a spell-checker plugin for VIM based on Ispell or Aspell.\n\nThis plugin can parse a file and look for misspellings, highlight them, jump from one to another, choose the language, add new words to the dictionary, ignore some, and so on. \n\nThe main feature is probably the split window used to propose alternatives for a misspelling and to correct it. To give an idea, here is a little screenshot :\n    http://hermitte.free.fr/vim/ressources/VS-capture.gif\n\nMore over, in order to speed up the processing, the calls to ispell/aspell are regrouped. All the alternatives for every misspelling in the current document are cached in a local file. Then, obtaining the alternatives for a given misspelling is an instantaneous operation.\n\nFor more information, you can take a look at the help file archived in the\ntarball or look at :\n    http://hermitte.free.fr/vim/ressources/vimfiles/doc/VS_help.html\nRem.: the site is quite slow.\n\nThe latest version have been tested with VIM 6.1 under a PC/WindowsXP/cmd.exe and PC/WindowsXP/Cygwin-bash.\n\nChangelog available at:\n http://hermitte.free.fr/vim/ressources/vimfiles/macros/vim-spell/ChangeLog\nBTW, you may find a more up-to-date version of the plugin at:\n http://hermitte.free.fr/vim/ressources/\nNote: the latest versions are no longer compatible with Vim 5.x.\n"}, {:name=>"ada.vim", :summary=>"Ada language default plugin", :description=>"Perform Ada specific completion & tagging.\n\nProvides mapping overrides for tag jumping that figure out the current Ada object and tag jump to that, not the 'simple' vim word.\n\nSimilarly allows <Ctrl-N> matching of full-length ada entities from tags.\n\nExports 'AdaWord()' function to return full name of Ada entity under the cursor (or at given line/column), stripping whitespace/newlines as necessary.\n\nSee also Ada indent script, vimscript #137.\n\n"}, {:name=>"ada.vim-indent", :summary=>"Ada language auto-indent settings", :description=>"Sets indentexpr for Ada langauge; fairly comprehensive indent calculations, but don't expect 1G=G to work very well!  As it happens, it now seems to fare fairly well ...\n\nLet me know if you find a situation you'd like fixed.\n\nSee also Ada ftplugin, vimscript #136."}, {:name=>"which.vim", :summary=>"This is a unix like \"Which\" function.", :description=>"This is a unix like \"Which\" function.\nWe can check whether program was installed in script.\n:echo Which('wget')\n"}, {:name=>"VirMark.vim", :summary=>"Ability to create virtual marks.", :description=>"Based on some advice given by Benji Fisher on utilizing a buffer local variable to store the current position.  It becomes a virtual mark as it doesn't take up one of the normal vim 'marks' a-zA-Z, instead it uses a variable.  They are local to a buffer, just like normal marks.  Useful for scripts that need to keep position, but don't want to change the user's mark setting."}, {:name=>"oracle.vim", :summary=>"Oracle SQL*Plus IDE", :description=>"Description:\nThis file contains functions/menus/commands/abbreviations to make Vim an\nOracle SQL*Plus IDE.\nHere are the main highlights of this script:\n\n- SqlMake(): lets you open any stored procedure and compile from within vim.\n\t Will display and optionally highlight the errors, navigate\n\t thru errors in the quickfix mode.\n\t\n- Adds a SQL*Plus menu\n\n- SqlPlus(): lets you start an external SQL*Plus, execute the whole file\n\t contents in SQL*Plus and return the results back in the same\n\t buffer, or select a portion of the buffer, execute it and\n\t display the results in a new buffer.\n\n- GetSource(): get the stored procedure code from the database\n\n- Abbreviations: lot of abbreviations to make coding in PL/SQL a breeze,\n\t all accessible thru menu as well\n\nMappings:\n\n  <Leader>c\tSelect Database dialog\n  <Leader>C\tGet column names for the tablename under cursor\n  <Leader>F\tStored procedure code from DB for the function/procedure name\n  \t\tunder cursor\n  <Leader>i\tFind Invalid Objects\n  CTRL+S \t\tStart SQL*Plus window (external)\n  <Leader>r\tExecute current file in SQL*Plus window (external)\n  <Leader>s\tExecute current file in SQL*Plus and get the result to same\n  \t\tbuffer\n  <Leader>s\tExecute current selection in SQL*Plus and get the result to a\n  \t\tnew window\n\n  Following mappings from ftplugin sql.vim\n  <C-D>\t\tDescribe the object under cursor\n  <LocalLeader>d\tmake a dbms_output.put_line statement for word/selection\n  \t\tbelow current line\n  <LocalLeader>D\tmake a dbms_output.put_line statement for word/selection\n  \t\tabove current line\n\n\nOptional files:\n  sql.vim\t- sql filetype plugin load to your ftplugin folders. This file is\n  \t\t  needed for Abbreviations and some mappings\n\nNote:\n\tI have tested this only under gvim6.0 on Win2000 and Oracle 8.1.5. I do\n\tnot have any other platform to test these.\n\nScreen Shots:\nhttp://www.geocities.com/rajesh_kallingal/vim/vimsql01.jpg\nhttp://www.geocities.com/rajesh_kallingal/vim/vimsql02.jpg\nIf the above links don't work try this one.\nhttp://www.geocities.com/rajesh_kallingal/vim"}, {:name=>"sql.vim", :summary=>"This is a file type plugin for Oracle SQL files.", :description=>"This is a file type plugin for Oracle SQL files. This is a companion file\nfor oracle.vim script -Oracle IDE (http://vim.sourceforge.net/scripts/script.php?script_id=141) \n                                                                          \nThis has a lot of abbreviations, some mappings, few settings and syntax.\n"}, {:name=>"words_tools.vim", :summary=>"Alternatives to expand(\"<cword>\")", :description=>"A tip would have been more accurate regarding what I am presenting here. But as some functions proposed are needed by another script of mine, here is a script file containing the definitions of three functions that can be used instead of expand(\"<cword>\").\n\nexpand(\"<cword>\") is a nice feature in VIM, but it is not very helpful when we have to deal with automatic completion -- you know : when you hit <tab> within VIM's command line or your favourite shell. Indeed, \"<cword>\" refers to the word under/after the cursor, while we need the word under/before the cursor.\n\nSo, here is three functions :\n* GetPreviousWord() that returns the word preceding the cursor ; the word is either truncated at the cursor's position or completed by as many spaces as needed to reach this position. I call a word, a sequence of keyword characters ('\\k', see :h isk).\n  It is handy, in C programming, to test what precedes the cursor when we hit '(', and then expand C control-structures (for, if, else, elif, switch, etc.) to anything desired.\n\n* GetCurrentWord() returns the word which is either stricly under the cursor or just before -- if the cursor is preceded by a space, an empty string is returned. Here, a word is a sequence of non white space characters : '\\S' -- in order to expand regular expressions. \n  Cf. http://vim.sourceforge.net/scripts/script.php?script_id=46 v2.2\n\n* GetNearestWord() returns the word ('\\S') either under, just before or just after the cursor.\n\nYou can take a look at a table showing the different returned values by this functions in equivalent contexts : http://hermitte.free.fr/vim/general.php3#expl_words_tools\n\nAs I said before, a tip would have been more appropriate. These functions are just examples of want could be done on this topic. They fulfill some specific needs I had. "}, {:name=>"chcmdmod.vim", :summary=>"Misc. commands for search and colon mode", :description=>"This script evolved from a mistake that I used to sometimes make. To start a search, instead of using \"/\", I would sometimes start with \":\" and after typing some text realize I am in the wrong mode, so I wrote this plugin to be able to switch between modes without loosing the text that you already typed, but I added more features to it later.\n\n- When you are in one of the :, / or ? modes, switch to a different mode\n  by typing ^X/ or ^X: or ^X?.\n- While searching you can press ^S to find the next hit, without needing to\n  first press <Enter> followed by n or N. You need to have 'incsearch'\n  option turned on for this to work. You can mix this with the ^X/ and ^X?\n  to reverse the search without needing to press enter and start over.\n- While searching using 'incsearch', you can use ^Xw to complete the\n  current word (or ^XW for WORD), <S-Right> to fetch one extra character\n  from the end of current match position (or <S-Left> from the beginning).\n\n\n\n\nSearch_key_words: command chcmdmod change search Hari Krishna Dara"}, {:name=>"increment.vim", :summary=>"quickly create incremented lists", :description=>"Sometimes you want to search for a string in the text \nand add an auto incremented number to each occurence of the string. \nLet's say, you want to make a numbered list. \nYou write something like:\nqwerty: The first line\nqwerty: the second one\nqwerty: and so on ...\nThen you type a command\n:let I=0\nfollowed by a replace command\n:%s/qwerty/\\=INC(1)/\nThe first 'qwerty' is replaced by number 1, \nthe second by number 2, and so on... .\nSometimes you might want to generate numbers with a leadimg zeroes. \nYou simply initialize global variable I to value like \n:let I=99890000\nthen you make the replacement \n:%s/my_token_word/\\=INC(1)/g\nfollowed by\n:%s/9989//g\n\nYou have to initialize a global variable I \nbefore the first use of INC() function,\nothervise the numbering will continue where it stopped \nduring the last replace.\n\nText Pad has a very similar metacharacter for replacement - \\i."}, {:name=>"CmdlineCompl.vim", :summary=>"Completion behavior on the command line. Without cedit.", :description=>"Script for getting regular insert mode type completion, while on the command line.\nOriginally posted by Stefan Roemer, allows completion without needing the commandline edit window."}, {:name=>"SearchCompl.vim", :summary=>"Completion on the '/' search line.", :description=>"Similar to CmdlineCompl that it does the\ncompletion in-line, and without the use of cedit.  (Also originally by Stefan Roemer, thanks Stefan!)."}, {:name=>"perl_io.vim", :summary=>"Perl : using 'print' and 'printf' instead of 'VIM::Msg'", :description=>"This plugin uses 'Tie::Handle' mechanism to create two output handles: VIMOUT and VIMERR. Then standard output is\nassociated with VIMOUT. This allows normal use of 'print' and 'printf' operators:\n\n\t:perl << EOP\n\t\tprint 'Line:', $curwin->(Cursor())[0];\n\t\tprintf '%d:%d\", $curwin->Cursor();\n\t\tprint VIMERR \"Error: $!\";\n\tEOP\n\nValue in $, is handled correctly:\n\t\n\t:perl $, = '; ';\n\t:perl print 'a' .. 'e'; # prints 'a; b; c; d; e'\n\nValue in $\\ is ignored and  there is no buffering, so it works as if $\\ was set to \"\\n\":\n\n\t:perl print 'one'; print 'two' \n\t\nprints same as \n\t\n\t:perl print \"one\\ntwo\"\n"}, {:name=>"darkslategray.vim", :summary=>"Dark slate gray background, pastel colored text", :description=>"Emacs in RedHat Linux used to have (still does?) a kind of 'Wheat on DarkSlateGray' color scheme by default. This color scheme is created in the same spirit.\n\nDarkslategray is intended to be nice to your eyes (low contrast) and to take advantage of syntax hilighting as much as possible.\n\nscreenshot (rather old):\nhttp://www.hut.fi/~tsusi/vim/darkslategray.png"}, {:name=>"undoins.vim", :summary=>"Undeleted the immediate previous <C-W> or <C-U> action.", :description=>"- Vim provides a number or ways to recover some text that you have deleted\n  (multiple undos, numbered registers, unnamed register etc.), however,\n  there is no way to recover a line or word that you killed either\n  accidentally (e.g., pressing <C-W> one extra time) or deliberately if you\n  are already in insert mode.\n- This little script tries to compensate for this missing functionality for\n  the most commonly used two commands, <C-W> and <C-U> such that the text\n  that is going to be killed is first backed up in an internal script\n  variable before letting Vim continue to do what you asked it to do.\n- The script also provides a mapping (by default <C-X><C-U> which you can\n  customize by using the <Plug>UndoInInsModeUndoKey mapping) that you can\n  execute to put back the text at the current cursor position. A <C-X><C-U>\n  immediately followed by a <C-U> or <C-W> is effectively works like an undo\n  of the previous action.\n- The script is only going to \"estimate\" what is going to be deleted by ^W,\n  but for certain filetypes it may not exactly match the word that Vim is\n  going to delete, in which case the undo might undo too much or too little.\n\n\nThis is essentially a 6.0 version of my previous undoInInsertMode.vim script,\n  except that the script works much better now for ^W, thanks to Luc Hermitte\n  (hermitte at laas dot fr) for helping me get this done.\n\n\nSearch_key_words: undo insert mode undoins undoins.vim Hari Krishna Dara"}, {:name=>"cisco-syntax.tar.gz", :summary=>"Cisco config syntax file", :description=>"first pass at a syntax for cisco router configs. Comments suggestion are most welcome.\n"}, {:name=>"ShowMarks", :summary=>"Visually shows the location of marks.", :description=>"ShowMarks provides a visual representation of the location marks.\nMarks are useful for jumping back and forth between interesting points in a buffer, but can be hard to keep track of without any way to see where you have placed them.  ShowMarks hopefully makes life easier by placing a sign in the leftmost column of the buffer.  The sign indicates the label of the mark and its location.\nIt can be toggled on and off and individual marks can be hidden(effectively removing them).\n\nBy default the following keymappings are defined:\n   \\mt : Toggles ShowMarks on and off.\n   \\mh : Hides an individual mark.\n   \\ma : Hides all marks in the current buffer.\n   \\mm : Places the next available mark.\n\nShowMarks requires that Vim is compiled with the +signs feature.\n"}, {:name=>"EasyHtml.vim", :summary=>"Allows to add attributs/values/CSSProperties to HTML tags/attributs very easily.", :description=>"With EasyHtml, you no longer need to look for tags attributes, attributes values or CSS properties values while editing HTML files. EasyHtml let you select the right attribute or value by showing you an attributes/values list for the tag/attribute/CSS property under the cursor.\n\nMove the text cursor on the tag, attribute, or CSS property word then :\n\n- Press <F2> key to display attributes for the tag before/under the cursor\n- Press <F3> key to display values for the attribute before/under the cursor\n- Press <F4> ket to display values for the CSS Property befor/under the cursor\n\nIn the EasyHtml buffer, use :\n\n       - h,j,k,l or <Left>,<Down>,<Up>,<Right> keys to change selected item.\n       - <PageUp>/<PageDown> or <C-F>,<C-B> keys to scroll list one page downward/forward.\n       - <Home> or <C-Home> to select the first item.\n       - <End> or <C-End> to select the last item.\n       - <ENTER> to add selected item WITHOUT exiting from items list.\n       - <S-ENTER> to add selected item AND exit from items list.\n       - q or <ESC> to exit without adding selected item.\n\nDeprecated attributes as declared by W3C are red highlighted, while right attributes are blue highlighted.\n\nSet g:easyHtmlSplitRight variable to 0 or 1 to open items list at left or right of current window. By default, use splitright setting.\n\nSet g:eh_singlequote variable to 0 (default) or 1 to use double or single quote when adding attributes (For example id=\"\" or id='')\n\nSet g:eh_incsearch variable to 0 (default) or 1 to dis- or en-able incremental list search. This feature allows to select an item by typing its beginning. When this is enable, 'q', 'h', 'j', 'k' and 'l' keys aren't used to exit from list and to move highlighting. Use 'Q', '<Left>', '<Down>', '<Up>' and '<Right>' instead.\n\nSet g:eh_atfirstplace to 0 (default) or 1 to indicate if attributes must be added at the end or at the beginning of the tag.\n\n+ Useful mappings :\n  . d<F2> : delete tag before/under cursor\n  . d<F3> : delete attribute before/under cursor\n"}, {:name=>"ctags.vim--Shields", :summary=>"add to or replace your tags file from vim", :description=>"Plugin that allows you to add to or replace your tags file from the menu.\n\nThe script takes the current working directory and finds C/C++ source to be added to your tags file.\nUnix only; requires ctags, find and egrep. The default tag file is $HOME/.tags\n\n\n"}, {:name=>"ant_menu.vim", :summary=>"plugin for ant", :description=>"A simple script that provides a pull-down menu and keyboard shortcuts for calling ant, a java build \nutility.  By default, ant.vim assumes that the build.xml file is in the current directory.  The user can \nset the build file in another directory by selecting the \"Set build file\" option or by using \",s\" in \ncommand mode. \n\nGlobal options can be set in your .vimrc file.      For example:\n\nlet g:buildFile = 'foo.xml'\nlet g:antOption = '-debug'\nlet g:logFile = 'foo.log'\n\nIf you are on a windows box and you cannot see compilation errors in your quickfix window,\ntry setting the shellpipe to \"2>\" in your _vimrc."}, {:name=>"increment.vim--Avadhanula", :summary=>"yet another script for incrementing numbers.", :description=>"This script provides a way to quickly create incremented lists (either\nincreasing or decreasing) using the visual block mode. \n\nSynopsis:\n=========\n1. Suppose you have a column of the following form:\n    array(1) = 3;\n    array(1) = 3;\n    array(1) = 3;\n    array(1) = 3;\n    array(1) = 3;\n2. Choose the column of '1's using Ctrl-V and then run the command Inc (you\n   should see \"'<,'>Inc\" on the command line at this point)(if you do not\n   have any other user commands starting with 'I', just I will suffice).\n   This will tranform the text as:\n    array(1) = 3;       array(1) = 3;\n    array(1) = 3;       array(2) = 3;\n    array(1) = 3;  --> array(3) = 3;\n    array(1) = 3;       array(4) = 3;\n    array(1) = 3;       array(5) = 3;\n3. You can then choose the column of '3's (again using Ctrl-V) and run the\n   command \"Inc 3\" to generate another incremented list. This will\n   generate:\n    array(1) = 3;        array(1) =  3;\n    array(2) = 3;        array(2) =  6;\n    array(3) = 3;  -->  array(3) =  9;\n    array(4) = 3;        array(4) = 12;\n    array(5) = 3;        array(5) = 15;\n    \n    Note: increment.vim automatically pads the numbers in the the column\n    with spaces in order to get them right aligned. This is useful in most\n    cases, but for cases when this might be bad, use IncN which doesnt do\n    any alignment. \n\nCommands provided:\n==================\n1. Inc : generates a column of increasing numbers with RIGHT  alignment.\n2. IncN: generates a column of increasing numbers with NO     alignment.\n3. IncL: generates a column of increasing numbers with LEFT   alignment\n\nTip:\nA mapping which goes well with this command is the following:\n\nvnoremap <c-a> :Inc<CR>\n\nWith this mapping, select a column of numbers and press Ctrl-A, which will\nget them in increasing order. I use <c-a> because its similar to the <c-a>\ncommand in normal mode which increments the number under the cursor.\n\nAcknowledgements:\n===============\nThere are other scripts which have been made to do almost the same thing.\nCharles E Campbell's vimtip #150         uses a similar visual block strategy\nStanislav Sitar's         vimscript #145     uses a searc/replace strategy\n\n"}, {:name=>"autoload_cscope.vim", :summary=>"Script that will search for and load cscope.out databases automatically", :description=>"This plugin will automatically load cscope.out databases into vim when you open a C file. (headers included)\n\nIt does a search starting at the directory that the file is in, and checking the parent directories until it find the cscope.out file.  The idea being that you can start editing a source file deep in a project dir, and it will find the correct cscope database a couple dirs up.\n\nThis version also creates some macros and a menu that can be useful.  If you don't like them, you can set g:autocscope_menus to 0 and they won't load.\n\n"}, {:name=>"foldutil.vim", :summary=>"Utility for creating folds (using specified match criteria)", :description=>"  The plugins provides useful commands for the ease of creating folds using\n  different match-criteria. They support creating folds in three different\n  modes, in the whole buffer, or only in the selected range:\n      - block mode\n        You give a starting and ending pattern for the blocks.\n      - outline mode\n        You give a pattern that determines the start of the block. A new\n        block automatically starts whenever the pattern is found.\n      - non-block mode\n        You give a pattern which determines the set of lines that should be\n        included in the folds. Useful to see only the matching/non-matching\n        lines with or without context.\n                                                                               \n  The first set of commands use pattern matching criteria (using the\n  built-in =~ operator, see help on |expr-=~|).\n  \n    FoldMatching - All arguments are optional. The first argument specifies\n                   the begin pattern and an optional second argument can be\n                   passed to specify an end pattern (for block mode) and\n                   additionally the number of context lines to be shown\n                   (which defaults to 1 if not specified). To specify an\n                   outline mode, a special value of -1 should be specified\n                   as context.\n        Syntax:\n          [range]FoldMatching[!] [pattern] [endPattern] [context]\n\n        Ex:\n          FoldMatching\n            Uses current search pattern and creates folds in non-block mode\n            with the default context of 1.\n          FoldMatching! ^\\s*// 0\n            This potentially folds away all the lines that are not in\n            C++/Java single-line comments such that you can see only those\n            comments.\n          FoldMatching public -1\n            Uses \"public\" as the pattern and creates folds in outline mode.\n          FoldMatching /\\* \\*/ 0\n            Creates folds for all the C++/Java style block comments with no\n            context.\n                                                                               \n    FoldNonMatching - This is just an alias for \"FoldMatching\" with a bang.\n                                                                               \n  The following commands use line number as match criteria\n  \n    FoldShowLines - Pass a comma-separated list of line numbers and an\n                    optional number of context lines to show/hide. All the\n                    rest of the lines (excluding those in context) will be\n                    folded away. You can also create blocks by specifying an\n                    optional list of line numbers as a second argument. You\n                    can give a range too.\n        Syntax:\n          [range]FoldShowLines[!] {lineNumbers} [endLineNumbers] [context]\n  \n        Ex:\n          FoldShowLines 10,50,100 3\n            Creates four folds exposing the lines 10, 50 and 100 with a\n            context of 3 lines.\n          FoldShowLines! 5,15,25 10,20,30 0\n            Creates three folds with 5 to 10, 15 to 20 and 25 to 30 as blocks.\n                                                                               \n    FoldShowMarks - Shows all the lines that have a mark defined in the\n                    current buffer, by folding away all the rest of the\n                    lines. Only the marks from a-z and A-Z are considered\n                    for match criteria.\n        Syntax:\n          [range]FoldShowMarks [context]\n                                                                               \n  The following command takes a highlight group as a match criteria, and\n    uses it to show/hide lines.\n  \n    FoldShowHiGroup - Pass a highlight group name and an optional number of\n                    context lines to be shown. All the rest of the lines\n                    (excluding those in context) will be folded away. You\n                    can also create blocks by specifying an optional end\n                    highligh group as a second argument. You can give a\n                    range too.\n        Syntax:\n          [range]FoldShowHiGroup[!] {HiGroup} [endHiGroup] [context]\n  \n        Ex:\n          FoldShowHiGroup Todo\n            Folds away all the lines except those that have a TODO item\n            mentioned (in Java, this is all the comments containing the\n            words TODO or FIXME, by default) with a context of 1 line.\n          FoldShowHiGroup Special 0\n            In HTML this reveals just the lines containing special characters.\n          FoldShowHiGroup! Comment 0\n            This will fold away all the comment lines in any language.\n  \n  The following is purely for convenience to reduce the number of commands\n  to be executed (you need to create separate folds).\n                                                                               \n    FoldShowRange - All the lines are folded except for the lines in the range\n                    given. Helps to search only in a range of lines, as it is\n                    easy to identify when the cursor goes out of the range.\n                    Also consider removing \"search\" and \"jump\" from\n                    'foldopen' setting.\n        Syntax:\n          [range]FoldShowRange\n  \n        Ex:\n          50,500FoldShowRange\n  \n      The defaults for pattern and context are current search pattern\n        (extracted from / register) and 1 respectively.\n      The outline mode additionally modifies the 'foldtext' such that the\n        starting line shows up as the summary line for the fold (without the\n        usual dashes and number of lines in the prefix). This allows you to\n        view the matched lines more clearly and also follow the same\n        indentation as the original (nice when folding code). You can\n        however set g:foldutilFoldText to any value that is acceptable for\n        'foldtext' and customize this behavior (e.g., to view the number of\n        lines in addition to the matched line, set it to something like:\n            \"getline(v:foldstart).' <'.(v:foldend-v:foldstart+1).' lines>'\").\n                                                                               \n      Ex: \n        - Open a vim script and try: \n            FoldNonMatching \\<function\\> -1\n        - Open a java class and try: \n            FoldNonMatching public\\|private\\|protected -1\n        - Open files with diff/patch output for several files and try:\n            FoldMatching diff -1\n                                                                               \n        Please send me other uses that you found for the \"-1\" context and I\n        will add it to the above list.\n                                                                               \n  Notes:\n  - The plugin provides several ways to specify the fold blocks, but not all\n    of them might make sense to you, especially when used with the *bang*\n    option to invert the match.\n                                                                               \n  - For :FoldMatching command, the pattern is searched using the built-in\n    search() function, so any limitations application to this function apply\n    to the patterns passed to the command as well.\n                                                                               \n  - You can change the default for context by setting g:foldutilDefContext.\n                                                                               \n  - The arguments are separated by spaces, so to include spaces in the\n    patterns, you need to protect them with a back-slash. Specifying a bang\n    makes the match inverse, so it allows you to show matching lines,\n    instead of folding them away.\n                                                                               \n  - You can change the context alone by using :FoldSetContext command or\n    completely end folding and revert the settings modified by the plugin by\n    using the :FoldEndFolding command.\n                                                                               \n  - When the commands are executed, if the current 'foldmethod' is not\n    \"manual\", it is switched to \"manual\" temporarily and restored when the\n    folding is ended using the :FoldEndFolding command. It also remembers\n    other fold related settings (such as the existing folds and\n    'foldminlines') and restores them as much as possible. For help on\n    working with folds, see help on |folding|.\n                                                                               \n  - The plugin by default, first clears the existing folds before creating the\n    new folds. But you can change this by setting g:foldutilClearFolds to 0,\n    in which case the new folds are added to the existing folds, so you can\n    create folds incrementally.\n                                                                               \n  - The plugin provides a function to return a string with Vim commands to\n    recreate the folds in the current window. Executing the string later\n    results in the folds getting recreated as they were before (so you can\n    use it to save the folds). You need to make sure that 'fdm' is either in\n    \"manual\" or \"marker\" mode to be able to execute the return value (though\n    lline is an int, you can pass in the string '$' as a shortcut to mean\n    the last line).\n                                                                               \n      String  FoldCreateFoldsStr(int fline, int lline)\n                                                                               \n  - You can create your own match criteria and extend the functionality of\n    the plugin by using the b:fuSearchFn variable. If you set the name of\n    your search function with custom match criteria to this variable, before\n    calling the :FoldMatching or :FoldNonMatching commands, the plugin uses\n    the custom function instead of one of the standard search functions that\n    comes with the plugin. The prototype of the function is:\n                                                                               \n      int Search(pattern, negate)\n                                                                               \n    The function should behave very much like the built-in search()\n    function, ie., it should search for the next line matching the give\n    pattern (using your custom match criteria), position the cursor at the\n    matched line and return the line number. When the match fails, it\n    should return 0 and shouldn't change the cursor position\n    (see :help search()).\n                                                                               \n    See one of the existing functions, s:SearchForPattern(),\n    s:PositionAtNextLine() and s:PositionAtNextHiGroup() for examples.\n                                                                               \nSummary Of Features:\n  Command Line:\n    FoldMatching (or FoldNonMatching), FoldShowLines, FoldShowMarks,\n    FoldShowHiGroup, FoldShowRange, FoldEndFolding\n                                                                               \n  Functions:\n    FoldCreateFoldsStr\n                                                                               \n  Settings:\n      g:foldutilDefContext, g:foldutilClearFolds, g:foldutilFoldText\n\n\n\nSearch_Key_Words: foldutil foldutils fold util folds Hari Krishna Dara"}, {:name=>"minibufexpl.vim", :summary=>"Elegant buffer explorer - takes very little screen space", :description=>"Several modern GUI editors list your open buffers as tabs along the top or bottom of your screen (VisualStudio, DreamWeaver, EditPlus and UltraEdit come to mind), now we have this feature in VIM! You can checkout a screenshot here: http://www.wavell.net/vim/vim_screenshot.gif.\n\nYou can quickly switch buffers by double-clicking the appropriate \"tab\" (if you don't want to use the mouse just put the cursor on the \"tab\" and press enter). As you open and close buffers the tabs get updated. Buffers that are modified get visually marked and buffers that are open in a window get visually marked. The -MiniBufferExplorer- opens automatically when you open more than one eligible buffer (no need to open the explorer if you\u0092re only editing one file.) -MiniBufExplorer- doesn't bother showing non-modifiable or hidden buffers. You can delete buffers by selecting them and pressing d on the keyboard. \n\nWhen you are in the -MiniBufExplorer- window, Tab and Shift-Tab move forward and backward respectively through the buffer list. \n\nThere are a growing number of optional features in this script that are enabled by letting variables in your .vimrc:\n\n  control + the vim direction keys [hjkl] can be made to move you between windows. \n  control + arrow keys can be made to do the same thing\n  control + tab & shift + control + tab can be setup to switch through your open windows (like in MS Windows)\n  control + tab & shift + control + tab can alternatively be setup to cycle forwards and backwards through your modifiable buffers in the current window\n\nNOTE: Some versions of vim don't support all of the key mappings that this script uses so you may experience degraded functionality. For example on Solaris SHIFT-TAB appears to fire the regular TAB mappings (same for console and gvim.) Also CONTROL+ARROWS appears to work in gvim on Solaris, but not in my xterm. All of the key bindings appear to work in Windows.\n\n[Thanks to Jeff Lanzarotta for his BufExplorer plugin (http://vim.sourceforge.net/scripts/script.php?script_id=42) that got me started down this slippery slope.]"}, {:name=>"gtkvim.tgz", :summary=>"GTK+ widget interface to gvim", :description=>"C source to 'GtkVim' widget, which embeds a gvim into your application as if it were a normal widget (actually runs a gvim as another process, displaying in your widget via a GtkSocket).\n\nThe current version is for GTK2, and unfortunately requires a pached vim.  This is pending, should make it into vim 7.0 in some fashion, and may even make it into 6.4.  I'll update this note as and when a decision is made.\n\nNext step I guess is to extend GtkVim to be a full Bonobo (?) widget to allow more flexible use in applications which support that (like evolution, I think).\n\n==== Old GTK1 notes ====\n\nVersions 1.x require a GTK+ gvim 6.0 and probably GTK+ 1.2.8 or later.\n\nIf you have focusing problems, you may also require the following patch to your GTK libraries (inc. the latest [at time of writing] 1.2.10) for automatic focusing (e.g., upon <Tab>) to work correctly.  Point-and-click activation will still work OK without this patch.\n\nCurrently still /not/ working is the ability to set the GtkVim widget's focus at startup (gtk_widget_grab_focus() or gtk_window_set_focus()).\n\n--- gtk/gtkwindow.c.focus\tFri Mar  9 18:39:16 2001\n+++ gtk/gtkwindow.c\tThu Jul  5 10:34:00 2001\n@@ -985,7 +985,13 @@\n       break;\n     case EnterNotify:\n     case LeaveNotify:\n-      if (xev->xcrossing.detail != NotifyInferior &&\n+      /* We only track the actual destination of keyboard events for real\n+       * toplevels, not for embedded toplevels such as GtkPlug. The reason for\n+       * this is that GtkPlug redirects events so the widget may effectively not\n+       * have the focus even if it actually has the focus.\n+       */\n+      if (gdk_window_get_parent (GTK_WIDGET (window)->window) == GDK_ROOT_PARENT () &&\n+\t  xev->xcrossing.detail != NotifyInferior &&\n \t  xev->xcrossing.focus && !window->window_has_focus)\n \t{\n \t  window->window_has_pointer_focus = (xev->xany.type == EnterNotify) ? TRUE : FALSE;\n"}, {:name=>"FavMenu.vim", :summary=>"A new menu, like IE's Favourites, or Netscape's Bookmark", :description=>"Adds a new menu to vim\nYou can add your favourite files (and dirs) into it, and open them later by clicking on the corresponding menu item.\nThe file list is persistent, data is stored in a file, which is the value of the $FAVOURITES\nThis variable should hold the name of your favourites files with full path.\nSo it must look like \"~/.vim_favourites\" or 'c:\\program files\\vim\\_favourites'.\n"}, {:name=>"auctex.vim", :summary=>"macros for latex", :description=>"This is a large collection of Latex macros, with inspiration\nfrom the emacs package \"auctex\", among other places.  \nRead the file for details;  I have written many comments.  \n\nBy popular demand, here is a more extensive description of\nthe key bindings:\nhttp://www.math.rochester.edu/people/faculty/cmlr/Latex/auctex-vim-keybindings\n\nThere is also Vim-LaTeX,\nhttp://vim-latex.sourceforge.net \nIt is a more extensive package, developed by a group, and I have \ncontributed most of my ideas to this project.  You might prefer \nmy script if you like something smaller, with parts that are (mostly) \nindependent and easy to modify.\n\nBriefly,\n\nIn normal mode, F1 - F4 will insert latex templates, unless they are\nalready there in the file.  You have to provide these templates yourself.\n\nIn insert mode, F1 - F5 will insert environments such as \\begin{..} \\end{..}.\n\nS-F1 through S-F5 will alter existing environments.\n\n(), $$, [], \\[\\], {}, \\{\\}, && are inserted in matching pairs.\n\nOutside of a math environment, tab does word completion, \nor gives a tab if the previous character is a space or \na line beginning.  Within a math environment, \ntab moves you between parentheses or to the end of the \nenvironment.\n\nMany Latex commands are bound to the ` key.  (This comes from auctex).\nFor instance, \\alpha is bound to `a, and \\infty is bound to `8.\n\\frac{}{} is bound to `/  .\n\nMenu items allow you to change or delete matching pairs of brackets,\nas well as insert \\left..\\right automatically.  \n\nNow pressing <Insert> twice will also allow modification of brackets, according \nto a menu that appears at the bottom.\n\nIn normal mode, K runs latex, takes you to the position of the first error (if any),\nand displays the error message with highlighting.\n\nTo get \\mathbf{R}, type r<Insert>b.  To get \\mathcal{R}, type r<Insert>c. \n<Insert>s produces \\sqrt{}.\n\nSome macros are polymorphic.  For instance, when preceded by bracket, \n<Insert>l will insert \\left..\\right around the brackets.  Otherwise it \nwill insert \\label{} and position the cursor in between the {}.\nLikewise, <Insert>c will produce \\cite{} when preceded by a blank or at \nthe beginning of the line;  but, for example, b<Insert>b will produce \\mathbf{B}.\n\nThere are \"smart quotes\".  That is, typing \" will produce a `` if there is\na space before the \", and will produce '' otherwise.\n\nYou can embrace the visual region with () by typing `(.  This works \nfor other kinds of parentheses, too, as well as $$ and &&.\n\nLong lines are automatically split up to keep $..$ (math expressions)\non the same line.\n\nThere are several abbreviations, such as \\b for \\bigskip.\n\nYou can add your own macros, the macro key is ;\n\nInspired by LaTeX-Suite, the tab key has some new uses.  Inside \\ref{}, it opens \na subwindow with the reference keys.  Pressing enter will insert that reference.  \nDitto for \\cite{}, the subwindow will show either your bibitem entries (if any) or \nyour bibtex file.  Pressing enter within the bibtex reference will insert the proper \ncitation key."}, {:name=>"ruby-macros.vim", :summary=>"macros for the ruby language", :description=>"This plugin is for editing ruby files.\n\nTyping \"for\" on a blank line will result in\n\nfor  in  \nend\n\nwith the cursor positioned before the \"in\".  \nThe same will happen with \"while\", \"until\", \nand so on.  But if the line is not blank,\n\"for\" will just insert itself.\n\nAlso, symbols like \" are inserted in matching\npairs, with the cursor in between.\n\n\"K\" runs ruby on the current buffer, and \nthe \"F1\" function key puts a line\n#!/usr/math/bin/ruby\non the first line.  (You will have to edit \nthis part).\n"}, {:name=>"html-macros.vim", :summary=>"macros for html", :description=>"Here are some macros for html.\n\nIn normal mode, the function key F1 will insert an html skeleton.\nIn insert mode, F1 will complete the previous uncompleted tag.\nTyping \"<\" will result in a pair \"<>\", with the cursor in between.\nThere are a number of macros beginning with \";\".  For instance,\n;1 will result in <h1></h1>, with the cursor in the middle.\nTyping ;1 in visual mode will embrace the region with the tags <h1></h1>."}, {:name=>"vimsh.tar.gz", :summary=>"terminal/shell buffer script for python enabled [g]vim", :description=>"A terminal/shell buffer script for python enabled [g]vim (+python).  Allows execution of shell commands in a vim buffer.\nIt does not use r! <cmd>.  \n\nSome of it's features:\n\n* It retains state because it's interactive.  Set an environment variable and it \"stays\" because the shell process is the same through the whole session.\n* It can run interactive line based programs like ftp/telnet/python/ssh/etc including masked password input (pty supported platform only).\n* Since it's a vim buffer you can go into normal mode and move around the buffer, yank, paste, use word completion, etc.\n* Runs on Linux, OS X, Windows, and other UNIX platforms.  Primary development and testing is done on Linux.  Windows has limitations (no interactive programs or Ctrl-C) due to lack of pty support.\n       \nRequirements:\nTo use it you must have a python enabled [g]vim and run on a platform that supports pty (i.e. Linux, OS X),\nor pipes (Windows). The pty version has much better formatted output than the pipes\nversion and supports running interactive programs.  Please read the README for other installation\nand configuration details.  Tested on vim 6.0/7.x using Slackware, Ubuntu, and Gentoo Linux, FreeBSD, Mac OS X, and Windows XP/Vista.  \n\nI'd also like to hear from users running other operating systems, i.e. QNX/Solaris/other BSDs.\n\n!!!!! WINDOWS USERS !!!!!, there is a zip file available at the below link. The version\nkept here on vimonline is a tarred, gzipped file ( tar.gz ). If you are going to use\nWinzip with the .tar.gz file be sure to turn off the \"Tar file smart CR/LF handling\". It doesn't work\nwell.\n\nPlease send me bug reports and suggestions if you use it.  I appreciate all the patches\nI've been getting lately!\n\nVisit:\n\n    http://home.comcast.net/~bsturk/vim.html\n\nSee \"terminal buffer\" for more information.  There is also a (old) screenshot\nof it running on Slackware Linux and Vim 6.0."}, {:name=>"libList.vim", :summary=>"Library of functions to work with lists/arrays", :description=>"libList.vim is a set of functions to work with lists or one level arrays.\n\n\n\nLists are strings variables with values separated by g:listSep character (comma by default). You may redefine g:listSep variable as you wish.\n\n\n\nHere are available functions :\n\n\n\n- AddListItem( array, newItem, index ) : Add item \"newItem\" to array \"array\" at \"index\" position\n\n- GetListItem( array, index ) : Return item at \"index\" position in array \"array\"\n\n- GetListMatchItem( array, pattern ) : Return item matching \"pattern\" in array \"array\"\n\n- GetListCount( array ) : Return the number of items in array \"array\"\n\n- RemoveListItem( array, index ) : Remove item at \"index\" position from array \"array\"\n\n- ReplaceListItem( array, index, item ) : Remove item at \"index\" position by \"item\" in array \"array\"\n\n- ExchangeListItems( array, item1Index, item2Index ) : Exchange item \"item1Index\" with item \"item2Index\" in array \"array\"\n\n- QuickSortList( array, beg, end ) : Return array \"array\" with items between \"beg\" and \"end\" sorted\n\n\n\nExample:\n\nlet mylist=\"\"\n\necho GetListCount( mylist ) \" --> 0\n\nlet mylist = AddListItem( mylist, \"One\", 0 ) \" mylist == \"One\"\n\nlet mylist = AddListItem( mylist, \"Three\", 1 ) \" mylist == \"One,Three\"\n\nlet mylist = AddListItem( mylist, \"Two\", 1 ) \" mylist == \"One,Two,Three\"\n\necho GetListCount( mylist ) \" --> 3\n\necho GetListItem( mylist, 2 ) \" --> Three\n\necho GetListMatchItem( mylist, \"w\" ) \" --> two\n\necho GetListMatchItem( mylist, \"e\" ) \" --> One\n\nlet mylist = RemoveListItem( mylist, 2 ) \" mylist == \"One,Two\"\n\necho GetListCount( mylist ) \" --> 2\n\nlet mylist = ReplaceListItem( mylist, 0, \"Three\" ) \" mylist == \"Three,Two\"\n\nlet mylist = ExchangeListItems( mylist, 0, 1 ) \" mylist == \"Two,Three\"\n\nlet mylist = AddListItem( mylist, \"One\", 0 ) \" mylist == \"One,Two,Three\"\n\nlet mylist = QuickSortList( mylist, 0, GetListCount(mylist)-1 ) \" mylist == \"One,Three,Two\""}, {:name=>"perforce.vim", :summary=>"Perforce source control features", :description=>"Perforce is a source control system from http://www.perforce.com\n\nFeatures:\n- menu and keyboard shortcuts to open (checkout), revert, and sync files.\n- prompts to open a file for editing when you attempt to change a checked-in file.\n- perforce status displayed on the ruler.\n- tested on Windows operating systems only.\n\nThis plugin provides a relatively few commonly used commands. If you are looking for the ability to carry out many perforce commands from within vim, you may wish to look at  Hari Krishna Dara's plugin (script 240)  at http://vim.sourceforge.net/scripts/script.php?script_id=240."}, {:name=>"idevim.tgz", :summary=>"Control Gdb from inside Vim", :description=>" Vim is the best editor in the world, and gdb the best debugger. Try to imagine the integration of both. Well, let me just say that if God had this tool when he wrote the world, this would have been a better place.\n\n Idevim also features an Assembley debugger, and other features like Automatic Core Dump detection etc. All in all, it is the best IDE for a Vim fan."}, {:name=>"email.vim", :summary=>"Email auto-completion for vim. It&#039s simple, clean and useful :)", :description=>"Just as the name implies, this script will add auto-complete functionality for email addresses in vim. This is very handy for those who use vim with mutt. Enjoy.\n\nFor those of you who would rather just look at the code through your browser:\nhttp://www.itodd.org/~itodd/email.vim\n\nThanks to Luc Hermitte for writing a much more advanced autocomplete script [ vimscript #46 ] which helped me create this one.\n\n-- \nTodd Boland\nhttp://www.itodd.org/\n\n:wq"}, {:name=>"mcant.vim", :summary=>"a minimalist vim+ant configuration", :description=>"Submitted in response to ant.vim, this 1 liner is all I've ever needed to be completely happy and efficient with ant and vim. All the benefits of vim error parsing, with no configuration or other fiddling required.\n\nIf you don't feel like downloading the script, just put this in your .vimrc file:\n\nset makeprg=ant\\ -quiet\\ -emacs\\ -find\\ build.xml "}, {:name=>"multvals.vim", :summary=>"Array library that uses patterns as separators", :description=>"The new version requires Vim 6.3.\n\nThis is an array library useful for script developers.\n\nI started off from the lightWeightArray.vim script as a basis and created this\nmore complete script to call it an array. You can now manipulate the Vim's\nmulti-valued variables or create your own using this script. This makes it easy\nfor you to support variables having multiple values and familiar for the users\nof your script.\n\nSee file header for function prototypes.\n\n- An array is nothing but a string of multiple values separated by a\n  pattern.  The simplest example being Vim's multi-value variables such as\n  tags. You can use the MvAddElement() function to create an array.\n  However, there is nothing special about this function, you can as well\n  make up the string by simply concatinating elements with the chosen\n  pattern as a separator.\n- The separator can be any regular expression (which means that if you\n  want to use regex metacharacters in a non-regex pattern, then you need\n  to protect the metacharacters with backslashes). However, if a regular\n  expression is used as a separtor, you need to pass in a second separator,\n  which is a plain string that guarantees to match the separator regular\n  expression, as an additional argument (which was not the case with\n  earlier versions). When the array needs to be modified (which is\n  internally done by some of the reader functions also) this sample\n  separator is used to preserve the integrity of the array.\n- If you for example want to go over the words in a sentence, then an easy\n  way would be to treat the sentence as an array with '\\s\\+' as a\n  separator pattern. Be sure not to have zero-width expressions in the\n  pattern as these would otherwise confuse the plugin.\n- Suggested usage to go over the elements is to use the iterater functions\n  as shows in the below example\n  Ex Usage:\n    \" The below pattern avoids protected comma's from getting treated as\n    \"   separators.\n    call MvIterCreate(&tags, '\\\\\\@<!\\(\\\\\\\\\\)*\\zs,', 'Tags', ',')\n    while MvIterHasNext('Tags')\n      call input('Next element: ' . MvIterNext('Tags'))\n    endwhile\n    call MvIterDestroy('Tags')\n                                                                            \nALMOST ALL OPERATIONS TAKE THE ARRAY AND THE SEPARATOR AS THE FIRST TWO\n  ARGUMENTS.\nAll element-indexes start from 0 (like in C++ or Java).\nAll string-indexes start from 0 (as it is for Vim built-in functions).\n\n\n\nPlease let me know of any bugs and problems that you face.\n\n\nSearch_key_words: array arrays multvals sort multiple values multivals Hari Krishna Dara"}, {:name=>"TeTrIs.vim", :summary=>"A tetris game in pure vim", :description=>"A funny way to get used to VIM's h k l and <Space> key.\nThe first (I hope) interactive game inside pure VIM!\nIt's a work-in-progress version.\n\nTodo:\n- better random\n- better timing\n- shorter code\n\nIf you like games, also see Sokoban vimscript#211!"}, {:name=>"boxdraw", :summary=>"Draw diagrams and tables using boxdrawing characters", :description=>"Summary\n-------\n * Draw diagrams and tables using \"real box drawing characters\" (AKA ANSI\nart).\n * Move rectangular/linear blocks of text around.\n * Trace box-drawing typeset diagrams -- follow the lines, etc.\n\nDetailed description\n--------------------\nThese scripts facilitate drawing simple 'ANSI' graphic containing box\ndrawing characters (not just '+', '-' and '|', but REAL box drawing\ncharacters).  It can be useful to draw diagrams and fancy tables (at\nleast, I use it this way).\n\nUpon sourcing the script defines several macros:\n\n<shift+arrow> -- moves cursor in specified direction leaving trail of\nbox drawing characters, making all joins and crossings.\ng+<arrow> -- follow line of boxdrawing characters until it reaches\nintersection or ends.\n<shift+arrow> in visual mode -- move selected rectangular block in\nspecified direction.\n\\e -- ends box drawing mode (unmap shift+arrows macros and restore\nvirtualedit value)\n\\b -- restarts box drawing (map shift+arrows macros and set virtual\n      edit=all)\n\\s -- selects 'single-line' boxdrawing characters\n\\d -- selects 'double-line' boxdrawing characters\n\\a -- convert all characters in selection into ascii '+', '-', '|' (utf8\n      only, not implemented)\n(\"\\\" prefix may be changed by changing mapleader variable, see :h mapleader)\n\nWhen rectangular block is selected, it can be moved around using\n<shift-arrow> keys. Unfortunately, as of version 6.1 multibyte\ncharacters and rectangular blocks do not live together too good, so this\nfeature is experimental.\n\nWhen line block is selected, <shift-up> and <shift-down> moves it up or down\nnondestructively, <shift-left> decreases indent and <shift-up> increases\nindent.\n\nCurrently box drawing is supported for utf8 and cp437 (DOS) encodings.\n\nScript does not use any \"weird\" box drawing characters from unicode set\nthat are not present in, say, cp437. So, it is safe to save utf-8 file\nin any single byte encoding that contains regular single box drawing\ncharacters.\nThis script also contains mapping that converts all boxdrawing\ncharacters in current selection into ascii '+', '-', '|'.\n\nIf vim encoding is single byte, this script assumes cp437 (DOS). Most\nencodings have boxdrawing characters at the same place, however, some\n(notably, koi8-r) have them in different code postions.\nIf you want to use it with encoding that contains such\ncharacters in diferent place, please drop me a note -- I will be happy\nto add support for that codepage too.\n\nTo help you determine which boxdrawing characters are suppored by your\nterminal I have included file sampler.txt. Just type it (or cat it) on\nthe termianal and encoding that labels the block that looks \"right\" will\nbe your supported encoding.\n\nNote for PuTTY users\n--------------------\n\nIt turns out that PuTTY does not translate Shift+Arrow combination into\nX key code (like xterm does), so mappings will not work for this\nterminal. I have modified initialization script to use <arrows> instead\nof <shift>+<arrows> in Unix environment.\n\nPerl scripts\n------------\n\nSome box-drawing related procedures are more naturally done with\nexternal scripts. These scripts take ascii standard input and produce\nutf8 encoded standard output.\n\nbdua2b.pl -- converts regular '+-|'-style drawing into single-line utf8\n  boxdrawing. This script has does not just blindly replace characters,\n  but instead looks to the neighbourhood and chooses boxdrawing\n  character that fits best. Use this script as a filter to convert\n  existing ascii drawings.\n  Option -ss selects single border characters, -sd -- double border,\n  -sh -- single vertical double horizontal, -sv single horizontal double\n  vertical.\n\noutline.pl -- outlines groups of similar characters in the input with\n  boxdrawing characters. Option -d makes output twice as wide, options\n  -s* select boxdrawing flavor as in previous script.\n  For example,\n\n  aaaacc\n  abbcc\n  ccbbc\n  cccb\n\nwill be converted into\n\n  ┌───┬─┐\n  │┌─┬┘┌┘\n  ├┴┐└┐│\n  │ └┐├┘\n  └──┴┘\n\nor\n\n  ┌───────┬───┐\n  │ ┌───┬─┘ ┌─┘\n  ├─┴─┐ └─┐ │\n  │   └─┐ ├─┘\n  └─────┴─┘\n\n\nBoth scripts were tested with ActivePerl 5.6.1.\n\nPlans:\n------\n* Support double boxes in a cleaner way.\n\nInstallation\n------------\nCopy boxdraw.vim to the place where you normally keep vim scripts (e.g. ~/.vim\nor c:\\vim\\vimfiles) and source it every time you want to draw a diagram or nice\ntable.\n\nYou may wish also to add this to your menu by adding a line to your .gvimrc\n(_gvimrc) file (use actual path to boxdraw.vim):\n:menu Tools.Bo&x\\ Draw :so ~/.vim/boxdraw.vim<CR>\n\nEnvironment\n-----------\nI run Windows and use boxdraw.vim in gvim (it supports utf-8 very\nnicely) and bd-single in vim (its support of utf-8 is kind of unclear\nfor me). Both major Windows monospaced fonts (Courier New and Lucida\nConsole) support wide range of Unicode characters, including box\ndrawing.\n\nWhy use box drawing characters?\n-------------------------------\nThese characters are in Unicode standard for compatibility with wide\nrange of existing 8-bit encodings that have them. The wording of Unicode\nstandard discourages usage of such characters, other than for the\npurpose of converting between encodigns and storage of legacy data.\nHaving said all that I found that sometimes a picture, even crude and\nprimitive, is worth pages of explanations. Just about the only way to\ninclude picture in source code is to use ascii or \"ansi\" art. Ascii is\nmore compatible, but \"ansi\" looks way better. Since I have to use\nUnicode to include cyrillic characters in comments anyway, I decided to\nstop on \"ansi\" art as a format of choice for in-source drawings.\n\nAuthor\n------\nAndrew Nikitin <nsg21@hotmail.com>\n"}, {:name=>"tf.vim", :summary=>"tf (TinyFugue) indent file", :description=>"Provides indent rules for tf (TinyFugue)."}, {:name=>"CreateMenuPath.vim", :summary=>"Create a menu that mirrors a directory tree", :description=>"This file provides a function to create a menu that mirrors a directory tree.\n\nUsage:\nCreateMenuPath({path} [, {menu name} [, {menu priority} [, {filename ignore pattern1} [, {filename ignore pattern2} ...]]]])\n\nExamples:\n:call CreateMenuPath('~')   \" Creates a menu of your home directory.\n\n:call CreateMenuPath('~/public_html', 'Files.Web\\ Page', '600.100', '\\c.\\(gif\\|jpe\\=g\\|png\\|ico\\|bmp\\|tiff\\=\\)$')  \" Files.Web Page menu, priority 600.100, ignoring some image files.\n\nA default filename ignore pattern is provided which ignores a number of image, audio and archive files, but it's incomplete.\n\nThe global variable \"CMP_Recurse_Limit\" can be set to specify the maximum sub-directory depth to scan.  Set it to 0 (the default) for infinite recursion.  Set it to 1 to scan only the specified directory.\n"}, {:name=>"Lineup--A-simple-text-aligner", :summary=>"Aligns the Nth occurence of a string or RE", :description=>"Use Align.vim vimscript#294, it knows a lot more!\n\nIt is a simple text aligner\n:'<,'>Lineup = to align your visually selected equations.\n"}, {:name=>"Justify", :summary=>"Simple text justifier inspired by Kartik Murari's format.vim (vimscript#27)", :description=>"This script defines a new Justify command.\nYou can define ranges with the script, and optionally you can define the text width.\n\nI am happy to link to other similar programs, just drop me a mail!"}, {:name=>"A-better-tcl-indent", :summary=>"A better tcl indent (for me:)", :description=>"I noticed some bugs (maybe vim's bug) when reindenting lines in a tcl code, write my own indent file, which works well for me."}, {:name=>"ViMail", :summary=>"Compose and send mail from vim.", :description=>"This script is intended to provide an easy and quick way of sending e-mail messages from within vim."}, {:name=>"remcmd.vim", :summary=>"Send commands to remote Vim sessions", :description=>"This script came out of my misc utility functions to send some useful commands to a remote Vim session. It basically adds four commands as follows (assuming that your <Leader> is set to \\):\n\n    \\ro - Opens the current file in a remote Vim session.\n    \\re - Executes a command in the remote Vim session.\n    \\ta - Opens the current tag in the remote Vim session.\n    \\ts - Selects the current tag in the remote Vim session.\n\nEach one of the above commands prompts the user to select the name of a remote Vim and executes the command. To make your life easier, it even remembers your previous selection, so repeated execution of remote commands in the same remote Vim session is easy.\n\nThough it adds only 4, it is because I don't know what commans other might like to add. But it is easy enough for you to add your favourite commands this way. It exposes the basic functions necessary to do it yourself from your own script or .vimrc:\n\n       RemCmdServerList(), RemCmdSelectServer(), RemCmdSendRemoteCommand()\n\nTake a look at the script on how to use these functions. For convenience, you can add regular and/or popup menu group for this with the name \"Remcmd\" by setting some global variables in your .vimrc. Take a look at the script header for details.\n"}, {:name=>"prt_mgr.zip", :summary=>"VIM Print Manager providing N-up and manual duplex printing.", :description=>"This plugin extends the flexibility of printing from VIM using PSUtils - http://www.tardis.ed.ac.uk/~ajcd/psutils/. The plugin supports:\n\no N-up printing,\no Manual duplex printing (feeding printed pages back into the printer to print the reverse sides)\no Reverse page order printing.\no Print to file.\n\nThere are also VIM functions to allow the Print Manager to be called from other scripts, as well as being hooked to the :hardcopy command using the printexpr option.\n\nSee included help file for details on setting up and using the Print Manager plugin.\n\nNOTE: This replaces the dup_prt.zip Duplex Printing plugin - if you had previously installed this plugin then please remove this from your runtime directories."}, {:name=>"SuperTab", :summary=>"Do all your insert-mode completion with Tab!", :description=>"The script has MOVED (since Eric Van Dewoestine is the new maintainer).\n\nSo go to vimscript#1643 for the new version.\n\nThank Eric to taking over the maintainership!"}, {:name=>"treeexplorer", :summary=>"uses perl and tree to create a tree file explorer", :description=>"IMPORTANT: See UPDATES below - this script is now an orphan\n\nUses perl and the unix tree command (available on linux, or find sources on freshmeat.net) to create a tree based explorer for your directory structure.   Features:\n\n- directories are foldable\n- different filetypes are highlighed\n- open a file in a new window\n- mappings for naviagation,\n- lazy loading of directory structure\n\nCaveats:\nProbably doesn't work right for non-unix systems, I'm working on this, but help is welcome\n\nUPDATES: \n- I have reimplemented this script using only vim.  The new implementation can be found at http://vim.sourceforge.net/scripts/script.php?script_id=184 - vimtreeexplorer.vim.  That approach is faster as well as requiring no external programs.  I have now abandoned the original implementation because the new implementation can do recursive expansion if you want it to.\n\n\n\nScott"}, {:name=>"vtreeexplorer", :summary=>"tree based file explorer - the original", :description=>"Creates a tree based file explorer within vim.\n\nThis is like the directory explorer plugin that ships with vim, but instead of presenting just one directory at a time, this plugin present portions of the filesystem hierarch in a tree view.  This type of view should be familiar from modern graphical file managers.  This explorer persents navigation, exploration, and opening of files only -  unlike the standard directory explorer that allow you to delete and rename files.   This a handy tool for becoming familiar with source trees.\n\n\nFeature summary:\n- directories are foldable (fold markers are highlighted invisible)\n- directories and links are syntax highlighted\n- open a file in a new window\n- mappings for naviagation (keyboard and mouse) - goto parent, change dir, go up, cd to home, refesh, etc\n- lazy loading of directory structure - one directory at a time.  Recursive expansion also available.\n\nCaveats:\nMay not work well for obscure systems - unix and windows work well.  Please send bugs or patches.\n\nThis is a reimplementation of the treeexplorerer (see http://vim.sourceforge.net/scripts/script.php?script_id=183 ) that doesn't require perl or the tree command - it's pure vim.\n\nScott"}, {:name=>"bk-menu.vim", :summary=>"Integration of Bitkeeper with Vim", :description=>"This is a hack of the sccs-menu.vim plugin to work with Bitkeeper instead.  At this stage things are likely to be broken but feedback (and patches?) are most welcome.\n\nThanks to Pradeep Unde for the SCCS plugin.\n"}, {:name=>"glib.vim", :summary=>"syntax highlighting for additional glib types", :description=>"This syntax file, written by my friend Jason Thomas, adds to your existing C syntax file many of the extra types and so forth given to you by the excellent glib library from http://www.gtk.org/\n\nIt is believed to be complete (at least for 1.2.x), though feel free to submit patches if you find something missing.\n"}, {:name=>"win-manager-Improved", :summary=>"Adds directory shortcuts to winmanager for faster traversal across file system", :description=>"Introduction:\n-----------------\n  This plugin will help user in quick traversal between various directories in a project, across the filesystems. This allows user to create shortcuts to directories. All shortcuts created by user are persistent across sessions and are available through the menu. Users who don't have a graphical interface can access menu through wild menu options.\n   All shortcuts created are stored in a text file which user can modify, if he has confidence. \n                  Support for adding current directory to shortcuts and direct access to shortcuts file has been given.(v 1.01)\n\n\nUsage:\n---------\n   Use Dir-shortcut menu to add shortcuts and traverse to them.\n   All commands of winmanager can be used as earlier. A summary of what might be needed by you follows:\n   :WManager\tto start Windows manager\n   :WMClose\tto close it\n   :WMtoggle\tto toggle between visible and hidden modes of winmanager.\n\n Testing:\n ----------\n \tI'm using these scripts from about a month now and feel they work good enough to be released to users.\n\n Thanks :\n ----------\n    Srinath for the wonderful script he has written.\n    To the vim-community, who encourage people even like me to contribute to make vim the best editor. \n    To my team mates for valuable support and suggestions I get from them.\n\n\nSuggestions and Bugs:\n---------------------------------\n    Report suggestion and bugs directly to me at anubhav47@hotmail.com. \n"}, {:name=>"ruby-menu.vim", :summary=>"Adds a Ruby menu and some functions under that.", :description=>"Currently does the following:\n\nRun the script out of the buffer\nRuns RI on a word under cursor\nRuns the script using the word under the cursor as an argument\nComment lines\nUncomment lines\n\nPlease e-mail with contributions or desires. I will add the appropriate \"who did what\" to the script\nif you contribute."}, {:name=>"renumber.vim", :summary=>"Egads! It's *another* renumber utility :-)", :description=>"This would seem to be very similar in function to Inc (vimscript #156) - I put it here mainly for posterity.\n\nThe main differences are that it will honour preceeding zeros (without assuming octal ... plus, 0 in hex numbers are honoured: \"0x0001\"), and it will 'tidy up' misaligned numbers, to a degree (only right-aligns ATM). It uses the location of the first number to determine the alignment location.\n\nYou may now renumber starting at the /bottom/ of a block with the 'r' (reverse) option.  Note that you still have a default increment of +1, so to renumber a block ending at '10' you need to change the last number in the file to \"10\", make your selection and \"Renumber r s-1\".\n\nRenumber will also renumber days & months (e.g., Jan,Feb.Mar, etc.).  To renumber days, use the 'd' argument - for months, it's 'm'.\n\nUse by selecting the block of text (visually, linewise or blockwise, etc.), then issuing:\n\n:'<,'>Renumber\n\n.. or some other range indicator.\n\nRenumber will search the selection for a number (left -> right), and use that (hence use blockwise selection (<Ctrl-V>) to specify a column).  It will only edit numbers it finds in subsequent lines that have approximately the same position within each line.\n\nYou may pass in any arguments in any order:\n\na  - consider whole of line when searching for next number (even blockwise).\nd - renumber with day names\nm - renumber with month names\nr - reverse block order: start renumbering from bottom of block upwards\nsN  - [no space] use increment N (may be negative).\n\nEg.,\n\n:'<,'>Renumber a\n:'<,'>Renumber s4\n:'<,'>Renumber a s-2\n:'<,'>Renumber m s3\n:'<,'>Renumber r s-1\n\n\nTodo - add a left-justify option (probably '-').\n"}, {:name=>"navajo.vim", :summary=>"Colorscheme with light background.", :description=>"The colorschemes I've seen on vim.sf.net seem to all have dark\nbackgrounds, but the dark backgrounds really bother my eyes.\nAlso, the default white background of gvim is too bright for me.\nPerhaps I'm alone, but a nice off-white background allows me to\nmerrily spend all day long staring at screen after screen after\nscreen of code, day after day, week after week, year after\nyear...  Editing code, reviewing code, documenting code,\ndebugging code, dreaming code in the nightmare that has become my\nlife... Oh, well -- at least this pleasant little colorscheme helps me\nget through the day.\nThe screen capture at http://vim.eralston.net/?id=navajo should help you\ndecide whether this colorscheme is right for you.\n\nYour first impression may be that the background is kinda ugly,\nand I guess that's probably true.  But hey, I find it much more\nreadable, and it sure beats a poke in the eye with a sharp stick.\nIt works well in the gui, and to get a similar background\nin a color xterm, start your xterm with\n\"xterm -bg NavajoWhite3 -fg black\"\n\nIf you have any questions, feel free to ask; but to save you the\ntime and effort, the answer will invariably be 42."}, {:name=>"wcd.vim", :summary=>"Wherever Change Directory in vim", :description=>"wcd.vim plugin adds the :Wcd command, which allows to quickly\naccess any directory - same way as with wcd under the shell.\nwcd.vim requires wcd.exe to be installed on your system.\n\nFor more information on wcd, see:\n  http://www.xs4all.nl/~waterlan/\n"}, {:name=>"RExplorer", :summary=>"Tree explorer with color", :description=>"This is an attempt to implement a tree explorer purely using vim 6.0 language. I have tried it on a unix and windows system and runs without any problem. Not sure about the behaviour in a different OS.\n\nIn the current version, the explorer window opens always on the left hand side.\n-Arun\n\nAscii snapshot:\n----------------------\n[+] /\n[-] /home/user\n | [+] install\n | [+] mail\n | [+] misc\n | [+] src\n | [+] tmp\n |  |- README.txt\n |  |- hello.c  \n |"}, {:name=>"fortune.vim--Avadhanula", :summary=>"Adding fortunes to your e-mails and fancy mail quoting", :description=>"This script provides a way to have vim put a fortune at the end of your mail messages. Most unix mail clients automatically handle the capability of having a program output as the signature file, but most windows mail clients, (at least PC-pine) do not (yet) provide a way to do this. This script provides a vim way to do the equivalent, if your mail client is capable of using external editors to compose mails. \n\nIn addition, this script also provides a way to change the style in which you quote the reply to your mails. by default, PC-pine quotes messages with the header:\n   On Sat 12 Jun 2001, John Doe wrote:\ntoo boring? \nThis script will change this to:\n   In our last exciting episode on Sat 12 Jun 2001, John Doe said:\nYou can ofcourse customize this to your special whackiness by changing the function ReplaceQuote().\n"}, {:name=>"MRU", :summary=>"Most recently used files in your file menu", :description=>"It stores data in the file called $MRU.\nSee also vimscript#161\n\nHint: If you want a lightweight solution, you can use marks 0..9"}, {:name=>"Engspchk", :summary=>"Spelling checker: On-the-fly spell checking, multi-language, alternate spellings", :description=>"There are a fair number of ispell/aspell based spelling checkers out there -- but engspchk isn't one of them.  The engspchk source uses Vim's native syntax highlighting to catch spelling errors, so you get quick on-the-fly spellchecking!  An optional external program, agrep, may be used to suggest alternative spellings. With the optional <engspchk.rare> dictionary, <engspchk.vim> now provides over 186730 words (over 189000 when including proper names)!\n\nEngspchk flags rare/unusual words and allows the user to specify his/her preferred dialect (let g:spchkdialect=\"usa\", \"uk\", or \"can\").  Click-N-Fix by enabling the mouse (example: :set mouse=n) and a leftmouse click in the document will advance the cursor to the next spelling error; a leftmouse click in the alternative spellings window will substitute the selected word for the misspelled word.  A rightmouse click will do that substitute for all such misspellings in your file.\n\nEngspchk is no longer English-only: it supports multiple languages.  You can tell it what language (dictionary) to use by either renaming it (ex.  engspchk.vim -> frspchk.vim for French) or by specifying the variable g:spchklang (ex. let g:spchklang=\"ger\" for German).  See http://mysite.verizon.net/astronaut/vim/index.html#vimlinks_scripts for some dictionaries: currently, that includes Dutch, French, Galician, German, Hungarian, Italian, Polish, Russian, Spanish, and Yiddish.\n\nThe engspchk s/w includes maps for jumping to the next and preceding spelling errors, alternative spellings, and for saving words either permanently in a custom dictionary or just for the current session.\n\nEngspchk's dictionaries are optional.  SpellChecker, for example, claims to load faster because it doesn't handle unusual words.  Merely deleting <CVIMSYN/engspchk.rare> will speed up loading (which is pretty fast anyway).  Both support flagging dialect-sensitive words, but only Engspchk has Click-N-Fix and rare word support.  Telling the difference between \"or the\" and \"ort he\" is easy -- the \"ort\" will show up with RareWord highlighting (default: black on cyan).\n\nTo begin checking your spelling with engspchk, and assuming that <engspchk.vim> has been put into your .vim/plugin directory, simply start up engspchk by applying the English Check map:\n\n    \\ec\n\nand your spelling errors will show up highlighted in white-on-red.  Alternatively, if you're using gvim, select DrChip:Load Spelling Checker from the menu.\n\nIf you want to change languages, engspchk provides a lot of ways to help you:\n\n  * set g:spchklang appropriately and \\ec will load that language's dictionary.  The backslash is actually using <mapleader>, so you can customize the backslash to whatever you want.\n  * you may embed a modeline at the beginning or at the end of the file:  ex. spchk: lang=nl.\n  * using gvim, there's a \"Load AltLang Spelling Checker\" submenu for choosing whatever language(s) for which you have dictionaries!\n  * engspchk looks over your dictionaries and constructs simple commands: :Engspchk  :Frspchk  :Gerspchk  :Nlspchk  :Spanspchk  etc,\n\nIt will work with some cooperating syntax files to check out spelling in comments, including:\n\namiga, bib, c, cpp, csh, d, dcl, dtml, elmfilt, exports, fortran, html, java, lex, lisp, mail, maple, sh, sm, smarty, tcsh, tex, vim, and xmath\n\nIf your favorite computer language isn't on that list, perhaps you can talk that language's maintainer into making it engspchk compatible.\n\nMore Features:\n\nVersion 42-45:\n  click'n'fix button support improved: with a click, one can re-try alternates, accept misspellings (skip by them), and apply corrected spelling to entire document.  (see :he engspchk-clicknfix)\n\n  The alternative spellings window can now be either on the bottom or on the right hand side. (see :he engspchk-variables)\n\n  PreProc highlighting used to emphasize word selected for alternate spellings\n\n  A number of bug fixes -- see   :help |engspchk-history| (after downloading, of course!)\n\nVersion 41:\n    Engspchk can be loaded into multiple windows concurrently; one can force spell checking of non-highlighted text with the g:spchknonhl variable; RareWord and Dialect added to the @Spell cluster; and the 'hidden' option is set to allow preserve engspchk highlighting (\\ee will restore the user's hidden setting).\n\nVersion 40:\n    *@Spell cluster utilized.\n    *Allow two or more sequential capitalized\n     letters to be ignored (English only, acronym support).\n    *Yura Kloubakov's inclusion of the user's\n     mapleader in the DrChip menu and removal\n     of \\ec after use\n    *Entered dozens of city names into <engspchk.proper>\n\nVersion 34:\n    The latest engspchk includes:\n    differentiating between common, dialect, and rare words, saving/restoring gdefault option maps to make a word a temporary/permanent BadWord\n    Click-N-Fix\n\nVersion 32:\n    English dialects supported (usa can uk); bug fixes (ending engspchk, alternatives, etc)\n\n\nVersion 30:\n    Engspchk, the native Vim spelling checker, is better than ever!\n\n    * Click'n'Fix:\n      - leftmouse to move to the next error\n      - leftmouse to select correctly spelled word\n      - rightmouse to fix all instances of\n        misspelled word\n      Makes spell-checking a document Fast and Easy!\n\n    * New maps:\n      - \\eS, \\eT to take a word under the cursor\n        out of the user dictionary (permanently\n        or just this session)\n      - \\ee to end engspchk; restores prior maps\n        and restores normal highlighting\n      - <tab> in alternative-word window does\n        a global replace of the misspelled word\n        with the user-selected correctly spelled\n        word\n\n    * optional auto-jump to next spelling error\n      for \\es, \\et, and \\ea.\n    * will signal if syntax highlighting is off.\n    * Plus a bugfix for Mac users\n\n    Plus engspchk supports a non-English languages,\n    checks for spelling inside comments for C, C++,\n    Fortran, DCL (VMS), csh/sh/ksh/bash, tex, and\n    more.\n\nVersion 27: New features for the Vim-based spelling checker!\n\n    * Maps to remove words from the user dictionary\n      (\\eT, \\eS).\n\n    * If g:spchk_autonext exists, then \\et, \\es, and\n      \\ea (if a word is selected) will automatically\n      do a \\en jump to the next spelling error.\n\n    * \\en and \\ep will now examine words inside folds,\n      opening the fold as necessary to display spelling\n      errors.\n\nVersion 23:\n    Can handle English, French, German, Spanish, Dutch,\n    Hungarian -- just set up a dictionary and set a\n    g:spchklang variable!  Native vim code, no external\n    programs necessary\n\nVersion 19:\n    Now contains: engspchk.vim engspchk.dict\n    engspchk.wb engspchk.txt Over 187192 words!\n    non-English support menus, documentation, English\n    punctuation checking (g:spchkpunc)\n\n\nAlternative Spelling Checkers\n    SpellChecker - Ajit Thakkar                   - syntax     - vimscript#499\n    vimspell          - Mathieu Clabaut            - [ia]spell   - vimscript#465\n    spellcheck      - Matthias Veit                 - ispell       - vimscript#131\n    spell                - Yegappan Lakshmanan - spell        - vimscript#232\n    vim-spell         - Luc Hermite                    - [ia]spell  - vimscript#135\n\n\nThank you for ranking engspchk!\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#ENGSPCHK)\n"}, {:name=>"vcal.vim", :summary=>"Vcal.vim is a simple scheduling calendar script.", :description=>"Vcal.vim is a calendar plugin that can read vcard files.  Appointments can be set and it can handle simple recurring dates.  This currently only works on Linux."}, {:name=>"genutils", :summary=>"General utility functions", :description=>"The new version requires Vim 7.0 and it employs the new autoload mechanism. If you have plugins that use both the new version and previous non-autoloaded version, then see the installation instructions for both to coexist.\n\nThis script provides functions that are mostly useful to script developers, but some of the functions can be easily converted to good utilities.\n\nSee script header for documented public functions with help and usage information along with the function prototypes.\n\nThis script provides many useful utility functions for buffers, windows and other misc things. I needed a place to share all the misc. utility functions so I renamed bufNwinUtils.vim and started adding these additional functions. I intend to create/collect many more useful functions and add to this script.\n\n- Read the \"Documentation With Function Prototypes\" section below.\n- Misc. window/buffer related functions, genutils#NumberOfWindows(),\n  genutils#FindBufferForName(), genutils#MoveCursorToWindow(),\n  genutils#MoveCurLineToWinLine(), genutils#SetupScratchBuffer(),\n  genutils#MapAppendCascaded()\n- Save/Restore all the window height/width settings to be restored later.\n- Save/Restore position in the buffer to be restored later. Works like the\n  built-in marks feature, but has more to it.\n- genutils#AddNotifyWindowClose() to get notifications *after* a window\n  with the specified buffer has been closed or the buffer is unloaded. The\n  built-in autocommands can only notify you *before* the window is closed.\n  You can use this with the Save/Restore window settings feature to\n  restore the dimensions of existing windows, after your window is closed\n  (just like how Vim does while closing help windows). See selectbuf.vim\n  or perforce.vim for examples.\n  There is also a test function called RunNotifyWindowCloseTest() that\n  demos the usage (you need to uncomment RunNotifyWindowCloseTest and\n  NotifyWindowCloseF functions).\n- genutils#ShowLinesWithSyntax() function to echo lines with syntax coloring.\n- genutils#ShiftWordInSpace(), genutils#CenterWordInSpace() and\n  genutils#AlignWordWithWordInPreviousLine() utility functions to move\n  words in the space without changing the width of the field. A\n  genutils#GetSpacer() function to return a spacer of specified width.\n- Binary search function genutils#BinSearchList() for sorted lists, to\n  find the index after which a given item can be inserted to keep the list\n  in sorted order. You can also use these functions to just search for\n  boundaries.\n  There are also a couple of functions genutils#BinSearchForInsert() and\n  genutils#BinSearchForInsert2() to find the location for a newline to be\n  inserted in an already sorted buffer or arbitrary data.\n  There are also a few comparison functions that can be used with sort() or\n  the above functions.\n- ExecMap function has now been separated as a plugin called execmap.vim.\n- New genutils#CommonPath() function to extract the common part of two\n  paths, and genutils#RelPathFromFile() and genutils#RelPathFromDir() to\n  find relative paths (useful HTML href's). A side effect is the\n  genutils#CommonString() function to find the common string of two\n  strings.\n- genutils#UnEscape() and genutils#DeEscape() functions to reverse and\n  genutils#Escape() to compliment what built-in escape() does. There is\n  also an genutils#EscapeCommand() function to escape external command\n  strings.\n- Utility functions genutils#CurLineHasSign() and genutils#ClearAllSigns()\n  to fill in the gaps left by Vim.\n- genutils#GetVimCmdOutput() function to capture the output of Vim built-in\n  commands, in a safe manner.\n- genutils#OptClearBuffer() function to clear the contents and undo\n  history of the current buffer in an optimal manner. Ideal to be used\n  when plugins need to refresh their windows and don't care about\n  preserving the current contents (which is the most usual case).\n- genutils#GetPreviewWinnr() function.\n- Functions to have persistent data, genutils#PutPersistentVar() and\n  genutils#GetPersistentVar(). You don't need to worry about saving in\n  files and reading them back. To disable, set g:genutilsNoPersist in your\n  vimrc.\n- A function to emulate the default Vim behavior for |timestamp| changes.\n  It also provides hooks to get call backs before and after handling the\n  default FileChangedShell autocommand (effectively splitting it into a\n  Pre and a Post event). Suggested usage is to use\n  genutils#AddToFCShellPre() and either install a default event handling\n  mechanism for all files by calling genutils#DefFCShellInstall() or\n  create your own autocommand on a matching pattern to call\n  genutils#DefFileChangedShell() function. Most useful for the source\n  control plugins to conditionally reload a file, while being able to\n  default to the Vim's standard behavior of asking the user. See\n  perforce.vim for usage examples.\n- Utility function genutils#ExtractFuncListing() that is useful to to\n  create snippets (see breakpts.vim, ntservices.vim and ntprocesses.vim\n  for interesting ideas on how to use this function).\n                                                                                   \nFunction Prototypes:\n    The types in prototypes of the functions mimic Java.\n    This is just a full list for a quick reference, see\n      \"Documentation With Function Prototypes\" for more information on the\n      functions.\n                                                                                   \nvoid    genutils#DebugShowArgs(...)\nString  genutils#ExtractFuncListing(String funcName, String hLines, String tLines)\nint     genutils#NumberOfWindows()\nint     genutils#FindBufferForName(String fileName)\nString  genutils#GetBufNameForAu(String bufName)\nvoid    genutils#MoveCursorToWindow(int winno)\nvoid    genutils#MoveCurLineToWinLine(int winLine)\nvoid    genutils#CloseWindow(int winnr, boolean force)\nvoid    genutils#MarkActiveWindow()\nvoid    genutils#RestoreActiveWindow()\nvoid    genutils#IsOnlyVerticalWindow()\nvoid    genutils#IsOnlyHorizontalWindow()\nint     genutils#GetNextWinnrInStack(char dir)\nint     genutils#GetLastWinnrInStack(char dir)\nvoid    genutils#MoveCursorToNextInWinStack(char dir)\nvoid    genutils#MoveCursorToLastInWinStack(char dir)\nvoid    genutils#OpenWinNoEa(String openWinCmd)\nvoid    genutils#CloseWinNoEa(int winnr, boolean force)\nvoid    genutils#SetupScratchBuffer()\nvoid    genutils#CleanDiffOptions()\nboolean genutils#ArrayVarExists(String varName, int index)\nvoid    genutils#MapAppendCascaded(String lhs, String rhs, String mapMode)\nvoid    genutils#SaveWindowSettings()\nvoid    genutils#RestoreWindowSettings()\nvoid    genutils#ResetWindowSettings()\nvoid    genutils#SaveWindowSettings2(String id, boolean overwrite)\nvoid    genutils#RestoreWindowSettings2(String id)\nvoid    genutils#ResetWindowSettings2(String id)\nvoid    genutils#SaveVisualSelection(String id)\nvoid    genutils#RestoreVisualSelection(String id)\nvoid    genutils#SaveSoftPosition(String id)\nvoid    genutils#RestoreSoftPosition(String id)\nvoid    genutils#ResetSoftPosition(String id)\nvoid    genutils#SaveHardPosition(String id)\nvoid    genutils#RestoreHardPosition(String id)\nvoid    genutils#ResetHardPosition(String id)\nint     genutils#GetLinePosition(String id)\nint     genutils#GetColPosition(String id)\nboolean genutils#IsPositionSet(String id)\nString  genutils#CleanupFileName(String fileName)\nString  genutils#CleanupFileName2(String fileName, String win32ProtectedChars)\nboolean genutils#OnMS()\nboolean genutils#PathIsAbsolute(String path)\nboolean genutils#PathIsFileNameOnly(String path)\nvoid    genutils#AddNotifyWindowClose(String windowTitle, String functionName)\nvoid    genutils#RemoveNotifyWindowClose(String windowTitle)\nvoid    genutils#CheckWindowClose()\nvoid    genutils#ShowLinesWithSyntax() range\nvoid    genutils#ShiftWordInSpace(int direction)\nvoid    genutils#CenterWordInSpace()\nint     genutils#BinSearchList(List list, int start, int end, Object item,\n                           [Funcref|String] cmp, int direction)\nint     genutils#BinSearchForInsert(int start, int end, String line,\n                           String cmp, int direction)\nint     genutils#BinSearchForInsert2(int start, int end, line, String cmp,\n                            int direction, String accessor, String context)\nString  genutils#CommonPath(String path1, String path2)\nString  genutils#CommonString(String str1, String str2)\nString  genutils#RelPathFromFile(String srcFile, String tgtFile)\nString  genutils#RelPathFromDir(String srcDir, String tgtFile)\nString  genutils#Roman2Decimal(String str)\nString  genutils#Escape(String str, String chars)\nString  genutils#UnEscape(String str, String chars)\nString  genutils#DeEscape(String str)\nString  genutils#CrUnProtectedCharsPattern(String chars)\nString  genutils#EscapeCommand(String cmd, List/String args, List/String pipe)\nint     genutils#GetShellEnvType()\nString  genutils#ExpandStr(String str)\nString  genutils#QuoteStr(String str)\nboolean genutils#CurLineHasSign()\nvoid    genutils#ClearAllSigns()\nString  genutils#UserFileComplete(String ArgLead, String CmdLine,\n               String CursorPos, String smartSlash, String searchPath)\nString  genutils#UserFileComplete2(String ArgLead, String CmdLine,\n               String CursorPos, [Map params])\nString  genutils#UserDirComplete2(String ArgLead, String CmdLine,\n               String CursorPos, [Map params])\nString  genutils#UserFileExpand(String fileArgs)\nString  genutils#GetVimCmdOutput(String cmd)\nvoid    genutils#OptClearBuffer()\nint     genutils#GetPreviewWinnr()\nvoid    genutils#PutPersistentVar(String pluginName, String persistentVar,\n               String value)\nvoid    genutils#GetPersistentVar(String pluginName, String persistentVar,\n               String default)\nvoid    genutils#AddToFCShellPre(String funcName)\nvoid    genutils#RemoveFromFCShellPre(String funcName)\nvoid    genutils#DefFCShellInstall()\nvoid    genutils#DefFCShellUninstall()\nboolean genutils#DefFileChangedShell()\nvoid    genutils#SilentSubstitute(String pat, String cmd)\nvoid    genutils#SilentDelete(String pat)\nvoid    genutils#SilentDelete(String range, String pat)\nString  genutils#GetSpacer(int width)\nString  genutils#PromptForElement(List array,\n    \t   [String defaultValue | int defaultIndex], String msg,\n    \t   String skip, boolean useDialog, int nCols)\nint     genutils#GetSelectedIndex()\n\nDeprecations:\n  - UserFileComplete() is now deprecated, use UserFileComplete2().\n  - CleanDiffOptions() is deprecated as Vim now has the :diffoff command.\n  - MakeArgumentString, MakeArgumentList and CreateArgString are deprecated.\n    Vim7 now includes call() function to receive and pass argument lists\n    around.\n  - The g:makeArgumentString and g:makeArgumentList are obsolete and are\n    deprecated, please use MakeArgumentString() and MakeArgumentList()\n    instead.\n  - FindWindowForBuffer() function is now deprecated, as the corresponding\n    Vim bugs are fixed. Use the below expr instead:\n      bufwinnr(genutils#FindBufferForName(fileName))\n  - QSort(), QSort2(), BinInsertSort() and BinInsertSort2() functions are\n    now deprecated in favor of sort() function.\n\n\n\n\nSearch_key_words: genutils variable arguments window buffer windows buffers preview save restore cursor position notify close echo syntax shift sort library typing error errors scriptid clean reset diff eatchar align word words space file filename binary search multvals Hari Krishna Dara"}, {:name=>"template-file-loader", :summary=>"Loads a template file and does customizable processing when editing a new file.", :description=>"This plugin is for loading template files when editing new files.  A template file will be loaded if found, keywords in that template are expanded, and/or a customized function for that type of files is called.\n\nFor all new files, the script checks to see if you have a skeleton (template) file for the extension of that file.  For example, \":new temp.c\"  would check for the existence of \"skel.c\".  Files without extensions are handled also - if you did \":new makefile\", the script checks for the existence of \"skel.noext.makefile\".\n\nskel.* files are looked for in a directory specified with the environment variable $VIMTEMPLATE or in your ~/.vim directory if that env var doesn't exist.  This allows you to use mutliple sets of template files - some for work files and some for personal files, for example.\n\nThis plugin is meant to be customized - add your own keywords for expansion or your own file specific template functions (example provided in script).\n\nThe script includes many example skel.* files - some are links to others.\n\n\n"}, {:name=>"charset.vim", :summary=>"Read file in proper encoding (xml, html...)", :description=>"Some types of documents have their encoding written in them. This plugin makes this information accessible to vim and ensures that they are read in proper encoding.\n\nAlso can be used for plain files in modeline-like way.\n\nCurrently, xml and html files are recognized and the last line of .txt files is checked to find out encoding."}, {:name=>"ComplMenu.vim", :summary=>"A completion menu (shows all possibilities as you type)", :description=>"Features:\nobsolate. Just use vim7 instead"}, {:name=>"bcbuf.vim", :summary=>"Broadcast commands for buffers", :description=>"This scripts allows to use / share buffers over multiple, clientserver-enabled vims.\nEspecially, the :BCbuffer command allows to \"steal\" a buffer which is opened in another vim.\n\nThe file bcbuf.vim provides further documentation.\n "}, {:name=>"quickfonts.vim", :summary=>"quickly switch between a list of favorite fonts, manage list of favorite fonts", :description=>"UPDATES \n - allow specification of base menu in which to put quickfonts menu (e.g. 'Plugin')\n - bug fixes and handling of gtk2 style fonts\n\n\nThis plugin manages a list of favorite fonts, and allows you to swich quickly between those fonts.  This is useful if you normally like to use several fonts, for example, if your eyes get tired looking at a small font, or someone comes to look at code on your monitor, or your vision is blurry from a night of heavy drinking, you can quickly switch to a larger font, and the go back to a smaller font when the conditions allow it.\n\nAll functionality is available through an optional menu or through custom vim commands.\n\nFonts are read from a file specified with the global variable g:quickFontsFile or the default file $HOME/.vimquickfonts if that variable doesn't eists.  At vim start up, the file is read, if it doesn't exist your list will be empty. If the 'quickFontsAutoLoad' global variable is set (i.e. in your .vimrc), the script will load the last used font upon gvim start-up. On vim quit, your list of favorites is written to the file as well as the quickfont used last.\n\nYou can switch between the fonts with the mappings Alt-< and Alt->, which I find useful because they also work in some terminal programs (rxvt/xterm on some systems). You can change the mappings in the plugin if those don't suit you or disable them and add your own if you want (see help file).  The same functionality is available with the commands :QuickFontBigger and :QuickFontSmaller.\n\nYou can add a font to your favorites list with the command \n:QuickFontAdd\nwhich either takes no argument, in which case the value of 'guifont' will be added if available, or if an argument of '*' is given, the guifont selector is called, if you select a font from that (with no errors) that font will be added to the list.  A full font specification string can also be given as an argument. Duplicate fonts are eliminated, and new fonts are inserted sorted by pixel size in the list. UPDATE - sorting is done on font width * height rather than just width (for unix/Xwindows).  You  can disable this with: \n\"let quickFontsNoXwininfo = 1\" in your vimrc.\n\nYou can remove a favorite font with the command\n:QuickFontDel\nwhich with no argument deletes the current selected font from the list, or if you give it a number, it will delete the font at that index in the list.\n\nYou can get info on your favorite font list and the currenlty selected font with the command\n:QuickFontInfo\n\nYou can reload your font list from your config file (abandoning any changes to the list) with the command\n:QuickFontReload\n\nFinally, you can always edit the config file by hand, in which case, an autocommand will re-read your changes when you write the file.\n\nCaveats: should work with non-X style fonts, except the font sorting.  There are stubs for sorting fonts for other systems - just not filled out - let me know if want to help with that.\n\n"}, {:name=>"DSP-Make", :summary=>"Set Makeprg for MSDEV DSP", :description=>"This is a Vim 6 Plugin that is invoked by menu (Code.Set DSP Make) and a map  <leader>dsp, that sets makeprg to the desired msdev project.\n\nIt is useful for those using MSDEV projects and want to make from within VIM, and allows choosing a specific target from within a project.\n\nIt scans the current directory, and the directory of the current file, and presents a dialog with a choice of all the dsp projects present (assuming there is more than one) and when you choose one, displays a choice of the targets available in that DSP.\n'makeprg' is then modified to build that target within the desired project.\n\nNow type :make to make the project!\n\n(It does rely on &grepprg being set to a valid program -either grep or findstr work fine).\n"}, {:name=>"vimconfig", :summary=>"Vim 6.3 configuration files: vimrc, ftplugins, plugins", :description=>"Vim 6.3 configuration files.\n\nThis package include vimrc file, filetype plugins (mail, perl, TeX) and some plugins from another projects.\n\nUseful functions (e.g. for folding, autoreload of ~/.vimrc ...)\n\nThe LATEST version of project can be downloaded from:\n\nhttp://platon.sk/projects/vimconfig/\n\n\nYou can submit bugs, feature requests etc. at\nhttp://platon.sk/projects/vimconfig/\n"}, {:name=>"morse.vim", :summary=>"Script for writing morse code in vim", :description=>"When we relax on trips in the country, we probably value script for communication in morse code (notebook and vim are necessary, of course :) What is in the vim's window, we can blink by flash-lamp :)\n\nAfter sourcing morse.vim, type <F5> to start 'morse' in normal or insert mode and type <F5> again to stop it. (This is default map, remaping this keystroke is on lines 33-34) \n\nFeature 1:\nIs possible switch on some 'special' characters like ,;/?.: 'to morse'. If you want this feature, please, uncomment  line \"let g:var_morse_ext = 1\"\n\nFeature 2:\nMaybe is good (?) to treble spaces between words for better reading;  If you want this, please, uncomment line \"let g:var_morse_3spc = 1\"\n\nEnjoy"}, {:name=>"LaTeX-Help", :summary=>"Help for LaTeX in vim.help format", :description=>"This is LaTeX Help info files `translated' as vim help file.\nYou can add this file to your help system and then type\n\n:help kill\n\nor\n\n:help \\kill\n\nto read something about this command."}, {:name=>"MRU-Menu", :summary=>"Plugin to manage a MRU (Most Recently Used) menu", :description=>"Description:\n\tThis plugin will create a MRU menu to keep track of most recently visited\n\tbuffers. You can customize Menu Label, menu size and whether to show\n\tnumbered or non-numbered menu\n                                                                            \n  Global Variables Used:\n  \tMRU_BUFFERS - keeps the lsit of recent buffers, usedto build the menu\n  \tMRU_MENUSIZE - maximum entries to keep in the list\n  \tMRU_HOTKEYS - whether to have a hot key of 0-9, A-Z in the menu\n  \tMRU_LABEL - menu name to use, default is 'M&RU'\n                                                                            \nScreen Shots: \n  \thttp://www.geocities.com/rajesh_kallingal/vim/vimmru01.jpg \n  \thttp://www.geocities.com/rajesh_kallingal/vim/vimmru02.jpg \n\n  \tIf the above links don't work try this http://www.geocities.com/rajesh_kallingal/vim\n     \nTODO:\n\t- handle menu size of more than 35\n\t- help document\n"}, {:name=>"ctx", :summary=>"Describes your cursor's current scope or context when editing a C file.", :description=>"CTX is an attempt to help Vim users navigate in C\nprogram files with very large function definitions. Such\nfiles should generally not exist, but alas they do, and\nsometimes we need to make changes to them.\n\nThis script helps by opening a small window in your Vim\nsession and keeping up-to-date with a few lines of text\ndescribing your cursor's current scope or context in a C\nfile.\n\nhttp://www.bluweb.com/us/chouser/proj/ctx/"}, {:name=>"Perldoc.vim", :summary=>"perldoc command from vim", :description=>"The Perldoc.vim plugin is a command + function that enables the perldoc command to be used from within the Vim text editor.  When activated the Perldoc command opens a new window at the top of the screen and places the output of the perldoc command into that window. This read-only window is just a Vim window, so you can perform all of the normal commands that you can in Vim - such as searching for a word or expression, yanking examples and code snippets."}, {:name=>"fine_blue.vim", :summary=>"Colorscheme with light background.", :description=>"If you want to update this file, please download rainbow.zip.\nhttp://www.vim.org/script.php?script_id=463\n\nIf you edit this like\n:%s/#\\(\\x\\x\\)\\(\\x\\x\\)\\(\\x\\x\\)/#\\3\\2\\1/g | %s/blue/red/ | w fine_red.vim\nyou can get fine_red.vim!\n\nNOTE:This colorscheme is GUI only."}, {:name=>"sokoban.vim", :summary=>"Sokoban Game for Vim!", :description=>"The goal of VimSokoban is to push all the packages ($) into the  home area (.) of each level using hjkl keys or the arrow keys. \nThe arrow keys move the player (X) in the  corresponding direction, pushing a package if it is in the way and there is a clear \nspace on the other side.\n\nUse the \n:Sokoban       - or -    :Sokoban <level num>     (no split window)\n:SokobanH     - or -    :SokobanH <level num>   (horizontal split window)\n:SokobanV     - or -    :SokobanV <level num>   (vertical split window)\ncommands to start the game\n\nh or <Left> - move the man left\nj or <Down> - move the man down\nk or <Up> - move the man up\nl or <Right> - move the man right\nr - restart level\nn - next level\np - previous level\nu - undo move\n\nLevels came from the xsokoban distribution which is in the public domain.\n http://www.cs.cornell.edu/andru/xsokoban.html\n\nTake a look at VIM Tetris (vimscript#172) too....the game which started the VIM Game revolution :) "}, {:name=>"linuxmag.vim", :summary=>"linuxmag.vim is a syntax highlighting file for Linux Magazine articles", :description=>"\nIf you ever find yourself writing an article for Linux Magazine,\ntry this syntax highlighting file out.  It understands the mark-up\nconventions used by the editors there.  A short overview of the\nmark-up format is included in the archive.\n\n\n"}, {:name=>"c.vim", :summary=>"C/C++ IDE --  Write and run programs. Insert statements, idioms, comments etc.", :description=>"**   Statement oriented editing of  C / C++ programs\n**   Speed up writing new code considerably.\n**   Write code und comments with a professional appearance from the beginning.\n**   Use code snippets\n\n - insertion of various types of comments   (file prologue, function descriptions, file section headers\n    keyword comments, date, time, ...  ) \n- insertion of empty control statements   (if-else, while, do-while, switch, ... )\n- insertion of various preprocessor directives\n- insertion of C-idioms   (enum+typedef, loops, complete main, empty function, file open dialogs, ... )\n- insertion of C++ -idioms   ( frames for simple classes and template classes, try-catch blocks, \n    file open dialogs, output manipulators, ios flags, ... )\n- use and organize your own collection of code snippets\n- compile / link / run support for one-file projects   (without a makefile)\n- run buffer through splint\n- personalization of comments   (name, email, ... )\n- menus can be switched on and off   (Tools menu)\n\nHere are some screen shots : http://lug.fh-swf.de/vim/vim-c/screenshots-en.html\n\nThe help file online :   http://lug.fh-swf.de/vim/vim-doc/csupport.html\n\nThe key mappings of this plugin (PDF) : http://lug.fh-swf.de/vim/vim-c/c-hotkeys.pdf\n\nSee also the http://www.thegeekstuff.com tutorial \n\"Make Vim as Your C/C++ IDE Using c.vim Plugin\"\n(http://www.thegeekstuff.com/2009/01/tutorial-make-vim-as-your-cc-ide-using-cvim-plugin/)\n\nDOCUMENTATION\n--------------------------------------------------------\nThis plugin comes with a help file (csupport.txt). Read it with  \n\n:h csupport \n\n ** PLEASE READ THE DOCUMENTATION **\n\nEditing actions differ for different modes!  \nThere are  a lot of  features which can be configured or customized\nto match your needs.\n\n\nMAILING LIST\n--------------------------------------------------------\nYou can subscribe to the vim-plugins-list mailing list to post your questions or\nsuggestions for improvement or to report bugs.  The list will also be used to\nannounce new releases ( c.vim / bash-support / perl-support / doxygen-support ).\nVisit the following page for subscribing to the mailing list:\n     \n  http://lug.fh-swf.de/cgi-bin/mailman/listinfo/vim-plugins-list\n\nThe vim-plugins-list list is very low on traffic.\n"}, {:name=>"lh-vim-lib", :summary=>"a library plugin for script writers", :description=>"lh-vim-lib is a collection of miscellanous VimL functions. \nAn exhaustive list of the functions provided can be found at: http://code.google.com/p/lh-vim/wiki/lhVimLib\n\nRequirements: Vim 7+ (this plugin is actually exclusivelly made of autoload plugins)\n\nNote: vimscript # 214 used to be menu-map which is now part of lh-vim-lib."}, {:name=>"tagmenu.vim", :summary=>"Tags menu for various programming language source files", :description=>"The taglist plugin supersedes the tags menu plugin. The taglist plugin\nintegrates the functionality of the tagsmenu plugin.\n\n The taglist plugin displays the list of tags defined in the current file in the\n\"Tags\" menu (in GUI Vim). The taglist plugin provides much more\nfunctionality than the tagsmenu plugin. You can download it from:\n\nhttp://vim.sourceforge.net/scripts/script.php?script_id=273\n\nYou can get more information about the taglist plugin from the\nfollowing page:\n\n    http://vim-taglist.sourceforge.net\n\nThe tags menu plugin is no longer maintained.\n\nOverview\n\nThe \"Tags Menu\" plugin provides the following features:\n\n1. Creates a \"Tags\" menu containing all the tags (variables, functions,\n   classes, methods, macros, etc) defined in the current file.\n2. Creates a popup menu with the contents of the \"Tags\" menu. This popup\n   menu can be accessed  by right clicking the mouse.\n3. Groups the tags by their type and displays them in separate submenus.\n4. The \"Tags\" menu can be sorted either by name or by line number.\n5. When a tag name is selected from the \"Tags\" menu, positions the cursor\n   at the definition of the tag.\n6. Automatically updates the \"Tags\" menu as you switch between\n   files/buffers.\n7. If the number of tags in a particular type exceeds a configurable limit,\n   splits the menu for that tag type into one or more submenus.\n8. Supports the following language files: Assembly, ASP, Awk, C, C++,\n   Cobol, Eiffel, Fortran, Java, Lisp, Make, Pascal, Perl, PHP, Python,\n   Rexx, Ruby, Scheme, Shell, Slang, TCL, Verilog, Vim and Yacc.\n9. Runs in all the platforms where the exuberant ctags utility and Vim are\n   supported (this includes MS-Windows and Unix based systems).\n10. Will run only in the GUI version of Vim.\n11. The ctags output for a file is cached to speed up updating the \"Tags\"\n    menu.\n\nThis script relies on the exuberant ctags utility to get the tags defined in\na file. You can download the exuberant ctags utility from\nhttp://ctags.sourceforge.net. The exuberant ctags utility must be installed\nin your system to use this plugin. You should use exuberant ctags version\n5.3 and above.  There is no need for you to create a tags file to use this\nplugin.\n\nConfiguration\n\nBy changing the following variables you can configure the behavior of this\nscript. Set the following variables in your .vimrc file using the 'let'\ncommand.\n\nThe script uses the Tmenu_ctags_cmd variable to locate the ctags utility.\nBy default, this is set to ctags. Set this variable to point to the\nlocation of the ctags utility in your system:\n\n          let Tmenu_ctags_cmd = 'd:\\tools\\ctags.exe'\n\nIf a file contains too many tags of a particular type (function, variable,\netc), greater than a configurable limit, then the tags menu for that tag\ntype will be split into sub-menus.  The default limit is 25.  This can be\nchanged by setting the Tmenu_max_submenu_items variable:\n\n          let Tmenu_max_submenu_items = 20\n\nIf the number of tags of a particular tag type is more than that specified\nby Tmenu_max_submenu_items setting, then the tags menu for that tag type\nwill be split into sub-menus. The name of the submenu is formed using the\nnames of the first and the last tag entries in that submenu. Only the first\nTmenu_max_tag_length characters from these names will be used to form the\nsubmenu name. Change the Tmenu_max_tag_length setting if you want to include\nmore or less characters:\n\n          let Tmenu_max_tag_length = 10\n\nBy default, the tag names will be added to the menu in the order in which\nthey are defined in the file. You can alphabetically sort the tag names\nin the menu by selecting the \"Sort menu by->Name\" menu item. You can also\nchange the default order by setting the variable Tmenu_sort_type to\n\"name\" or \"order\":\n\n          let Tmenu_sort_type = \"name\"\n\nThis script will not work in 'compatible' mode.  Make sure the 'compatible'\noption is not set. This script depends on the file type detected by Vim.\nMake sure the Vim file type detection (:filetype on) is turned on."}, {:name=>"xmms-play-and-enqueue", :summary=>"This snippet plays a file or enqueues it using xmms.", :description=>"If a file contains filenames, each in a separate line,\nthen a filename can be played or enqueued into xmms\nby pressing Shift+F3 and F3 respectively.\n\nThis script requires no external dependencies except \nxmms."}, {:name=>"cmvc.vim", :summary=>"Menu / Mappings for CMVC version control application", :description=>"This script integrates using the IBM Configuration Management Version Control (CMVC) application from within Vim.  It provides keyboard shortcuts as well as a menu to access common functions such as checking files in and out, viewing and responding to defects, etc.\n\nCurrently, only the functions I use regularly (Defect, File, Track, and VerifyCm) are implemented.  If you want to add others, the API should be fairly straightforward to do so.  Of course, I would appreciate receiving any changes you make, so that I can incorporate it into the next version (and avoid duplicating the work myself).\n\nNOTE:  This script currently requires Vim 6.  If there is interest in making it 5.x compatible, let me know and I will see what I can do.\n\nTODO:\t    Here are some other things I want to add when I get around to it:\n    -\tImplement more functions, like Report, to get a list of available defects / files / etc., which you can then view or\n\tcheckout.\n    -\tMake the script more \"plugin-ized\", like allowing users to override the default mappings and use their own.\n    -\tKeep a history of releases, components, and families used, then present them in a \"confirm\" dialog so the user\n\tcan just pick one instead of retyping it.  Inlcude an \"other\" button to bring up an \"inputdialog\" so the user can still\n\tenter an unlisted / new value.\n    -\tAdd commands to let the functions be used in Command mode."}, {:name=>"tex.vim--Tanzler", :summary=>"Indent file for TeX", :description=>"This is an indent file for LaTeX.\n\nIt emulates Emacs' way of indenting item-environments, i.e., continuation lines of '\\item', '\\item[]', and '\\bibitem' will be indented separately.\n\nNOTE: I searched for an indent file for TeX and didn't found one -- so I wrote this script. Right now I've noticed that Johannes Zellner has already created an indent file for TeX (you can find his version at http://www.zellner.org/vim/indent/tex.vim). I think that's the official version.\nNevertheless, since his version doesn't indent \\items the way I want them to be, I decided to release my version, too. Try both of them, use the one you like most."}, {:name=>"bccalc.vim", :summary=>"evaluate equations within vim", :description=>"This scirpt calculates equations using the program 'bc' (found on most linux systems, available for most systems).  Visually select the equation you want to calculate, then hit ;bc - if the selection ends with an '=' sign, the answer will be appended after the equal, otherwise, the answer is echoed as a message. Equations can span multiple lines, and the full bc syntax is probably supported.  Additionally, sin (), cos (), etc, are transformed into the names used by bc (s () c (), etc).\n\nThis script was first entered as a tip, but someone pointed out that functions are hard to use when posted as tips, so this makes it easier to download and use.\n\nHere are some example lines:\n\n2 * sqrt (2) =\n\n3 * (2 - 1) + 4.0 ^ 6 =\n\n4 / 3 =\n\n3 +\n   4 -\n      2 * (1 / (3 + 2)) =\n\ndefine rad (x) {\n  return (x / 180) * 4 * atan (1)\n}\ncos (rad (45)) =\n\nibase = 2; obase = 2;\n0100 * 0101 = \n\nSelect each of these in turn (continguous non-blank lines, and hit ;bc for each), and this is what you get:\n2 * sqrt (2) = 2.82842712474619009760\n\n3 * (2 - 1) + 4.0 ^ 6 = 4099.000000\n\n4 / 3 = 1.33333333333333333333\n\n3 +\n   4 -\n      2 * (1 / (3 + 2)) = 6.60000000000000000000\n\ndefine rad (x) {\n  return (x / 180) * 4 * atan (1)\n}\ncos (rad (45)) = .70710678118654752440 \n\nibase = 2; obase = 2;\n0100 * 0101 = 10100\n\nChaining is now allowed:\n\nstart with this\n\n2 + 3 = \n;bc\n2 + 3 = 5\nadd some more stuff:\n2 + 3 = 5 * 2 = \n;bc\n2  + 3 = 5 * 2 = 10"}, {:name=>"mkview.vim", :summary=>"implementation of mkview without requiring a view file", :description=>"This module provides functions which emulate the |mkview| function of vim\nwithout requiring the creation of |view-file|s. This is useful when you\nhave an explorer type window with some arbitrary level of folding which\nneeds to be remembered. This module is therefore of interest to script\nwriters and not to the casual vim user.\n\nSynopsis:\n\n1. let viewInfo = MkView()\n   This returns a formatted string viewInfo (see file for the format) which\n   contains the minimal information needed to\n   . Restore manually folds. Restore manually opened and closed folds.\n     (this is the behavior of |mkview| when 'viewoptions' contains\n     \"folds\".\n   . Restore the cursor row and column position.\n   The file is allowed to have arbitrarily nested folds.\n   If there is prior information about the folds, then the following\n   variants described below can be used.\n\n2. let viewInfo  = MkViewNoFolds()\n   When it is known that there are no folds in the file, then use this\n   function. It will contain just the information needed to restore the\n   cursor row and column positions.\n\n3. let viewInfo = MkViewNoNestedFolds()\n   When it is known apriori that there are no folds with |foldlevel|\n   greater than 1, i.e, there are no nested folds, then use this function\n   which takes advantage of the fact to be faster than MkView(). Nested\n   folds, if they exist will be silently ignored if this function is used.\n\n4. call LoadView(viewInfo)\n   This function restores the fold state of the file as described in\n   MkView(). It eliminates the folds already in the file before restoring\n   the original fold state so that additional nestedness is not introduced.\n"}, {:name=>"VIlisp.vim", :summary=>"Send Lisp code to a running Lisp interpreter", :description=>"New: 19 May 2008: See also http://theclapp.org/blog/posts/intro_to_lw-vim-mode/ about a partial vi-mode for Lispworks.\n\nNew: 1 May 2008: Interested users should check out LIMP at http://mikael.jansson.be/hacking/limp/docs/ and/or vimscript#2219.  Among other improvements, it replaces funnel.pl with screen, which I've thought would be a good idea for a while now but never got around to implementing.\n\n---\n\nVIlisp.vim defines functions and key mappings to send Lisp code to a CMU Common Lisp process running in a separate terminal window.  VIlisp basically automates cut-and-paste from Vim to Lisp.  Vim writes to a FIFO created by a Perl script, funnel.pl.  Funnel takes input from Vim and the keyboard and sends it to Lisp.\n\nI use: Vim v6.3.71, CMU CL 19a-release-20040728 + minimal debian patches, and Perl 5.8.4.  funnel.pl requires the GNU Readline library (4.2 or higher), and Perl modules IO::Pty, Term::ReadLine, and Term::ReadLine::Gnu.  Developed on Debian \"sarge\" GNU/Linux, kernel 2.6.6.  YMMV.\n\nfunnel.pl would probably work with any Lisp that will run in an xterm; just change how it exits Lisp; CMU CL uses \"(ext:quit)\".  With other minor alterations, it'd probably work with other scrolled-from-the-bottom interpreters (e.g. I've received reports of it working with Octave and R).\n\nInterested users should also see vimscript #165.  I haven't tried it, but from the description, it looks like it might fit the bill.\n\nAs of June 2002:\n\nVIlisp.vim also interfaces to your local copy of the Common Lisp HyperSpec (e.g. lookup \"defun\"), and does Lisp keyword lookups via an included Vim thesaurus file (e.g. expand \"with-\" into with-accessors, then with-compilation-unit, then with-condition-restarts, etc).\n\nSee the README for documentation."}, {:name=>"mu-template", :summary=>"Mu template (fill-out forms, expression substitution)", :description=>"This is a micro-template file.\nTemplates should be in $VIMTEMPLATES directory.\nThe default is $VIM/vimfiles/template.\nTemplate files should be named template.&ft (&ft is the filetype)\nIf filetype is not known, template.unknown will be read.\nYou shouldn't modify the script (unless you have <C-J> mapped..). All customizing is inside the templates.\nYou can insert 'fields' to the template. With the chars '<<' and '>>'.\nEditing will be started at the first field in selectmode.\nYou can jump to the next field by pressing <C-J>\n(sorry <C-J> is remapped in normal, insert (and visual) mode)\nExpression evaluation:\nUse the ¡ (press <m-!>) symbol to surround your expression.\nEg.: Creation date: ¡strftime('%c')¡ \nThe template set is very limited, but you will get the idea, I hope.\n(At least I hope you can learn some programming tricks)\nFEEDBACK PLEASE!"}, {:name=>"xl_tiv.vim", :summary=>"Translate sequences of ampersand-pound-digits-semicolon in html source", :description=>"Source for vimtip #217.\n\nI found a website *cough*Tivoli.com*cough* that likes to obfuscate some of its help file web pages using ampersand-pound-digits-semicolon instead of normal ascii.  If you load the source with Vim (in Opera you can just designate Vim as your source viewing program), you can :so xl_tiv.vim to make it readable.\n"}, {:name=>"night.vim", :summary=>"Colorscheme with dark background.", :description=>"If you want to update this file, please download rainbow.zip.\nhttp://www.vim.org/script.php?script_id=463\n\nThis is colorscheme(GUI only)."}, {:name=>"einstimer.vim", :summary=>"Syntax file for IBM Einstimer tcl", :description=>"This is a syntax file for IBM's Einstimer tcl language\n\nThe syntaxing can handle optional arguments and all their legal abbreviations.\nThe command names themselves, however, have to be spelled out completely.\nI haven't figured out a clean way of doing the command abbreviations.\n\nThis syntax file sources the standard tcl syntax file from the vim\nrelease to do most of the tcl stuff.  I have just added the language-specific\nextensions.  I'm not an expert in vim syntaxing, but they seem to work\nreasonably well.  Send comments and suggestions to:\n\npaulzimmer@zimmerdesignservices.com"}, {:name=>"closeb", :summary=>"Close complex brackets or tags", :description=>"This plugin closes complex brackets / tags.\nIt is an extended version of closetag, (http://vim.sourceforge.net/scripts/script.php?script_id=13)\n\nIt comes with configuration for closing XML/SGML tags and LaTeX environments but is easily configured for other filetypes.\n\nClosing a bracket / tag also (optionally) inserts a newline and / or indentation, but only if the matching bracket / tag stood on a line of its own.\n\nIf, during scanning for the bracket / tag to close, mismatching brackets are found, they are optionally highlighted.\n\nA path function is provided, which displays all open tags. For example, this function may be used in the status line for a constant display of location in an XML file.\n"}, {:name=>"Brown", :summary=>"Brown GUI color scheme.", :description=>"A light brown colorscheme for GVIM."}, {:name=>"Expand-Template", :summary=>"Template expander.", :description=>"This script is no longer supported. Use vimscript #1733 (aedit) instead."}, {:name=>"searchInRuntime", :summary=>"Search files through the paths lists, and execute any command on them", :description=>"This plugin extends the command 'runtime' (:h runtime) to execute any command (not only 'source') on files found in the '&runtimepath' option.\n\nIt defines the command \":SearchInRuntime\" which takes as a first parameter the command to execute and then the search patterns used to search files in the 'runtimepath' directories list.\n\nE.g. 1:\n     :SearchInRuntime! source here/foo*.vim \nis equivalent to :\n     :runtime! here/foo*.vim\n\nE.g. 2:\n     :silent exe 'SearchInRuntime 0r there/that.'.&ft\nwill search 'runtimepath' list for the first file named \"that.<filetype>\" present in the directory \"there\", and inserts it in the current buffer. If no file is found, nothing is done.\n\nN.B.: The [!] (bang) character can be used to apply the command to all found files. Otherwise, 'SearchInRuntime' stops after the first file.\n\nSince the version 1.1 : \n(*) the 'verbose' option is supported :\n    >= 0 -> display when no file is found\n    >= 1 -> display the list of file found\n    >= 3 -> display the list of directories searched\n(*) ':SearchInPATH' : like ':SearchInRuntime', but with $PATH\n(*) ':SearchInVar' : works on any list of directories defined in a variable.\n(*) Contrary to ':runtime', the search can accept absolute paths, for instance :\n     :runtime! /usr/local/share/vim/*.vim                           is not valid while\n     :SearchInRuntime source /usr/local/share/vim/*.vim   is accepted.\n\nSince the version 1.5.:\n(*) The commands passed to the different :SearchIn* commands can accept any number of arguments before the names of the files found.To use them, add at the end of the :SearchIn* command: a pipe (' |0 ') and then the list of the other parameters. For instance:\n      :SearchInRuntime! grep plugin/*foo*.vim |0 text\n    For every file name plugin/*foo*.vim in the 'runtimepath', this will execute:\n      :grep text {path-to-the-file}\n\n(*) The commands passed to the different :SearchIn* commands can accept any number of arguments after the names of the files found. To use them, add at the end of the :SearchIn* command: a pipe (' | ') and then the list of the other parameters\n\n        :SearchInRuntime! Echo plugin/*foo*.vim | final arguments\n    For every file name plugin/*foo*.vim in the 'runtimepath', this will execute:\n        :Echo {path-to-the-file} final arguments\n\nSince Version 2.0.x:\n- Custom auto-completion added -- if vim supports it\n- New commands: :Split and :Vsplit to split open files found into &path\n\nSince Version 2.1.0:\n- new commands for vim7+ only: :GSplit and :GVSplit\n- overloaded mapping for vim7+ only: gf and CTRL-W_f\n- new mapping: glf that echoes the files in 'path' that match the pattern under the cursor\n\nGSplit, GVSplit, gf and CTRL-W_f permit to help the end-user to select a file among those matching a file-pattern (either given as parameter to the commands, or written under the cursor). If the selected file is already opened in a window, then that window is made the new active window -- this avoid to split-open the same file again and again.\n\nFull documentation available on:\n    http://hermitte.free.fr/vim/ressources/vimfiles/doc/searchInRuntime.html\nor within the tarball archive."}, {:name=>"Brace-Complete-for-CCpp", :summary=>"Adds braces after if, else, while", :description=>"This is for use with the style of C/C++ coding that says ALWAYS have braces after an if, and always start braces on a new line: \n\nif(a ==1 )\n{\n}\nelse\n{\n}\nit also changes\nelse{\nto \nelse\n{\n\nFor those whoe get lazy :) "}, {:name=>"Smart-Tabs", :summary=>"Use tabs for indent, spaces for alignment", :description=>"There are many different arguments about tabs and stuff.  My current personal preference is a choice of tabbing that is independent of anybody&#039s viewing settings.  \n\nFor the beginning of the line, this means we can use <tabs> which will expand whatever the reader wants it to.  Trying to line up tabs at the end of the line is a little trickier, and making a few assumptions, my preference is to use spaces there.\n\nThis script allows you to use your normal tab settings for the beginning of the line, and have tabs expanded as spaces anywhere else.  This effectively distinguishes 'indent' from 'alignment'.  \n\n<tab>  Uses editor tab settings to insert a tab at the beginning of the line (before the first non-space character), and inserts spaces otherwise.\n<BS>  Uses editor tab settings to delete tabs or 'expanded' tabs ala smarttab\n\n :RetabIndent[!] [tabstop]\n    This is similar to the :retab command, with the exception that it  affects all and only whitespace at the start of the line, changing it to suit your current (or new) tabstop and expandtab setting.  With the bang (!) at the end, the command also strips trailing  whitespace.\n\nCAUTION: After 1.1, this is no longer a filetype plugin by default ( set g:ctab_filetype_maps=1 to override)\n\nUsing spaces for alignment of code under unmatched brackets is now supported."}, {:name=>"spell.vim", :summary=>"Vim 'spell' utility plugin", :description=>"\nVim plugin for using the 'spell' Unix utility.  Provides commands to spell\ncheck the current buffer, or a range of lines in the current buffer, current\nword or a supplied string and to highlight misspelled words.  This plugin\nprovides the functionality similar to that provided by the emacs spell.el\nscript.\n\nThis plugin provides the following commands: \n\n   1. Spell\n      Spell check lines in the current buffer.  The default behavior is to\n      spell check the entire buffer. You can specify an ex command-line\n      range to spell check only lines in that range. If a word is\n      misspelled, you will be prompted to enter the correct spelling for the\n      word.  If you enter the correct spelling, then you will be prompted\n      for replacing every occurrence of that word in the current buffer.  If\n      you press just enter, then the word will be skipped.  If you press\n      <Esc>, the spell check will be stopped. \n\n   2. SpellWord \n      Check the spelling of the current word under the cursor. If the word\n      is misspelled, you will be prompted for the correct spelling.  If you\n      enter the correct spelling, you will be prompted for replacing every\n      occurrence of that word in the current buffer.  If you press just\n      enter, then the word will be skipped. \n\n   3. SpellString <string> \n      Check the spelling of the supplied string.  All the misspelled words\n      in the string will be displayed. \n\n   4. SpellHighlight\n      Highlight all the misspelled words in the current buffer. This command\n      also takes a range of lines.\n\n   5. SpellHighlightClear\n      Clear the highlighting for the misspelled words.\n\nThe 'spell' utility only checks the spelling and will not provide the \nalternatives (correct spelling) for a word.  As this plugin depends on the \n'spell' utility, you will not get the correct spelling for a word.  You will \nonly know whether a word is spelled correctly or not."}, {:name=>"print_bw.zip", :summary=>"Highlight scheme for black and white only printing.", :description=>"This colorscheme is just black and white but uses the font attributes bold, italic, and underline.  This allows printing of highlighted files on black and white printers where shades of gray can be hard to read.  On color printers it also means you don't use up the more expensive colored inks.\n\nThe colorscheme is meant to be used just when printing.  Change colorscheme to print_bw, print, and then change back to your prefered scheme.  This could be done via a map or a script I guess."}, {:name=>"std_c.zip", :summary=>"A Standard C syntax file.", :description=>"This C syntax file is to help developing portable Standard C code.  That is C code that has to be able to compile on many different compilers.  The default is to highlight C89 C code, but it can be configured to allow or flag as an error C94 and C99 language features (types, constants, etc.)\n\nAdditional non-standard C features can be allowed - C++ comments, GNU C keywords, $ in identitfiers for VMS C, etc.\n\nThe syntax file also has the following benefits:\n\no more language elements highlighted (e.g. function and identifier names)\no more syntax errors highlighted, and\no better highlighting of macros.\n\nDetails of all configuration options are documented in the supplied help file.\n\nMore detail can be found at http://www.eandem.co.uk/mrw/vim/syntax/index.html#ansic"}, {:name=>"Naught-n-crosses", :summary=>"Dumb Naught and crosses games", :description=>"Naught and Crosses game inside VIM against the (dumb) computer.\nIf you like games, see also the Tetris vimscript#172 and the Sokoban vimscript#211"}, {:name=>"SourceSafe-Integration", :summary=>"Fairly complete file-based SourceSafe Integration", :description=>"This package is now deprecated.  Use Source Control  ( vimscript #770 ) instead.\n"}, {:name=>"Michaels-Standard-Settings", :summary=>"Some standard 'vimrc' settings & mappings that I use", :description=>"Here are some standard vimrc settings that I use.  Mostly they are pretty well commented.\nThey are intended as a springboard - most serious users will be beyond this. "}, {:name=>"Hex-Output", :summary=>"Output a number as HEX", :description=>"Function to output a number as HEX\n\necho HexOut( 255)\n should output 'ff'"}, {:name=>"Visual-Mapping-Maker", :summary=>"Create a mapping for the visual selected block", :description=>"well ... write something like that :\n\nif(|)\n{\n\n}\n\nSelect it in visual mode, type ',t' and it will replace the block by the equivalent mapping (placing the cursor at the place of the underscore)\n\nfeedbacks and bug reports would be very nice"}, {:name=>"perforce", :summary=>"Feature Rich Perforce SCM Integration.", :description=>"PLEASE READ THE INSTALL SECTION COMPLETELY.\n\nThis is a fairly complete integration with the perforce version control system for the most commanly used operations, including many administrative commands. It includes a great menu that is modelled very close to the p4win (the perforce GUI client) and is quite extensive.\n\n---------------------------------------------------------------------------------------------------------------------------------------------------\nLately, I am not finding enough time to add features to this, so if anybody is interested to help me add new features or even take over the responsibility, you are very much welcome.\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\nInstall the files as described in the installation section below and read and type \":h perforce.txt\" for help on using the plugin.\n\nIf you find any problems please report them to me. If you happen to add new features or fix any problems, I would appreciate if you send me in the diff. This will speed up the future enhancements (there is a lot more that can be done) and also benefit all the script users.\n\nSearch_key_words: perforce scm source control interface p4 p4d p4win multvals genutils Hari Krishna Dara"}, {:name=>"xul.vim", :summary=>"Syntax for the eXtensible User interface Language", :description=>"Syntax highlighting for XUL based on the DocBook highlighting by Devin Weaver. Optional attribute highlighting for common XUL attributes is included."}, {:name=>"cream-capitalization", :summary=>"Capitalize a selection in one of four ways", :description=>"\nA simple collection of functions (and mappings) to capitalize a selection in one of four ways:\n  UPPERCASE, lowercase, Title Case and rEVERSE cASE.\n\ncream-capitalize makes these F5 combination keyboard shortcuts available:\n\n  F5           Capitalize selection, title case\n  Shift+F5     Uppercase selection\n  Alt+F5       Lowercase selection\n  Ctrl+F5      Reverse case of selection\n\nThis is one of many custom utilities and functions for gVim from the Cream project ( http://cream.sourceforge.net ), a configuration of Vim for those of us familiar with Apple and Windows software. \n\n"}, {:name=>"mu-marks", :summary=>"Script inspired by AlphaTk & Stephen Riemhm's bracketing function", :description=>"Template expander.\nUnique feature: one command for insert and visual-mode expansion.\n\nThe MarkMap and MarkMapB commands allows you to make global and filetype-specific mappings. MarkMapB commands can be in your ftplugin dir in the appropiate file. The only weirdness is the typing of the command. Well, these weird characters should be configurable. (But I think they're at least readable, and look good)\nOne example mapping (in my vim.vim)\nMarkMapB wh wh «»<CR>¶endw«¡»\nAfter typing wh, and pressing <C-Space> (you can change it) in insert mode, you will get\nwh |\nendw«»\n| symbols the cursor.\nSo the «» characters are the cursor positions, and the furthers are the jump-points. There can be an explanation text between these 2 chars, so «explanation» is allowed.\nIf you have a line\necho 'Hello world'\nand you select it visually, press <C-Space> and type wh<CR>, you will get\nwh |\n  echo 'Hello world'\nendw\nSo the ¶ sign is replaced by the visually selected text (adding an extra newline if needed).\nIf you want to remove the trailing newline (if any) you can use the · symbol.\nNotice, that there is no mark after the endw.\nMarks, that begin with «¡ are not used in visual mappings."}, {:name=>"imaps.vim", :summary=>"another template or stub expander", :description=>"imaps.vim is yet another template expander or Stubs expander like several\nothers out there.\n\nThe expander works by the user pressing '\\&#039 (or whatever the leader\ncharacter is), after a \"keyword\". the keywords are filetype specific. to\ngive an example, suppose you press '\\&#039 after the word 'bfg' in a latex file\n(filetype = tex), then the word 'bfg' will expand to:\n\n\\begin{figure}[h]\n\\centerline{\\psfig{figure=*.eps}}\n\\caption{}\n\\label{fig:}\n\\end{figure}\n\nand the cursor will be placed where '*' is shown. vim remains in insert\nmode so that you can continue typing. if you type '\\&#039 after something which\nis not defined as a keyword for the current filetype, then you will simply\nget a '\\&#039.\n\nthe file already contains several mappings mainly for latex and some for\nhtml. however it should be very easy to extend it to your liking. it should\nbe fairly obvious how to extend it if you look at the file, but here's the\nlittle description:\n\nsuppose you want the keyword 'bit' to expand to \n\n\\begin{itemize}\n\\item * \n\\end{itemize}\n\nand have the cursor be positioned where '*' is shown, add the following\nline to imaps.vim (actually, this line is already there, but it makes for\na good example)\n\nlet s:tex_bit       = \"\\\\begin{itemize}\\<cr>\\\\item ä\\<cr>\\\\end{itemize}\"\n\nexplanation:\n1. the suffix 's:' is to make it script specific.\n2. then 'tex' makes imaps.vim treat 'deg' as a keyword only for latex\n   files.\n3. 'bit' is the keyword itself.\n4. the rhs is what you want to have 'bit' expand to. if you want the cursor\n   not to be positioned anywhere special, then nothing needs to be done.\n   the cursor will be placed at the end. However, if like in this example,\n   you want it to be at a specific place, put a \"ä\" (the a-double-dot\n   character) where you want the cursor to be. (the ä character is obtained\n   by typing control-k-a-colon <C-k> + a + : ). \n\nNOTE: \n\n1. if you want a \"dynamic\" rhs, i.e you want the keyword 'date' to expand\n   to the present date, then you can have the rhs begin with the string\n   \"<C-r>=\". for example, the following line does the date thingie:\n\n   let s:_date = \"\\<c-r>=strftime('%b %d %Y')\\<cr>\"\n    \n   (\":help i_CTRL-R\" for how this works).\n\n2. if you want a keyword to be filetype insensetive (i.e to work across all\n   files) like the date thing above, then like the example above, do not\n   prepend any file type, just use \n\n   let s:_keyword = expansion\n\n   (note the leading underscore after s:)\n\n"}, {:name=>"JavaRun", :summary=>"Compile and run Java program", :description=>"Save/compile (if necessary) and run the Java, Python, Perl, Ruby, Tcltk or CLisp source program in the current buffer.\n\nSome useful abbreviations for Java programming, e.g. psvm for \"public static void main(String[] args) { }\", cl for class, etc."}, {:name=>"Buffer-Menus", :summary=>"Add menus for the current buffer only.", :description=>"Adds menus for the current buffer.   When you leave the buffer, they get removed, and when you go back in, they are added again.\nIt cannot be used effectively to replace a menu as it is not possible to find out what the mapping used to be (as for map commands), and therefore not possible to restore it (*sigh*)\n\nThis is taken from my 'buffoptions' script, and should be useful in enabling menus to be added to ftplugin scripts.\n\nNOTE: When adding to ftplugin scripts make VERY sure that the menus only get added ONCE (reinclude protection is good here).\n\nTODO: (Please email me to add to this list)\n- Allow 'Unmenu' of individual menus\n\n\nUsage -\n:Bmenu[!] [\"<silent>\"] [\"<unmenu>\"|\"<disable>\"] [<modes>] [<priority>] <Menuname> <Mapping>\n \t\tAdd menus to different modes for the current buffer.  (Bang is used to\n        specify 'noremenu')\n:B[ivacn]menu[!][\"<silent>\"] [\"<unmenu>\"|\"<disable>\"]  [<priority>] <Menuname> <Mapping>\n\t    Add menu for one mode (or 'a' for all modes) for the current buffer.\n      (Bang is used to specify 'noremenu')\n\nB[ivacn]noremenu [\"<silent>\"] [\"<unmenu>\"|\"<disable>\"] [<modes>] [<priority>] <Menuname> <Mapping>\n      Adds a 'norecursive' menu.\n\nThe above commands accept '<silent>' as a flag to do a silent mapping.\nThey also allow <SID> (providing you have done the \"exe FindBufferSID()\"\nat the beginning of the script), and will expand <leader> and <localleader>\nin menu names.\n\nIf g:buffermenu_use_disable is set to 1 then all buffermenus use\nenable/disable to update the menus.  Otherwise, they will use menu/unmenu.\nTo override for one menu only, use <unmenu> or <disable>\n\n\n:Bunmenuall\n      Remove all menus for the current buffer\n\nBufferOneShot( <ident> )\n \t\tUse this to make sure Bmenus only get added ONCE per buffer.\n \t\teg:\n \t\tif BufferOneShot('MyProgram')\n \t\t\tBmenu 10.20 Test.Test iHello<esc>\n \t\tendif\n \t\tA buffer local-variable called b:buffer_oneshot_MyProgram will be\n \t\tcreated (just in case you want to unlet it when testing).\n\nexe FindBufferSID() \n\t\t:exe the result of this function when using <SID> in menu commands so that the correct\n\t\tfunction gets called.\n\n"}, {:name=>"cream-ascii", :summary=>"Insert an ASCII character from a dialog box", :description=>"\nInsert an ASCII character from a dialog box. See the screenshot at http://cream.sourceforge.net/screenshot-ascii.png.\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software. \n\n"}, {:name=>"vimRubyX", :summary=>"enhancements to vim ruby interface", :description=>"Enhancements to the VIM-Ruby interface.\nThis allows you to easily define and call vim functions from ruby.\nCalling is done as if all the vim user defined and built in functions were\nmethods on the VIM module\nDefining is done by adding a new method to the VIM module."}, {:name=>"update_vim", :summary=>"Shell script for updating(patching) vim 6.1", :description=>"This script download all new patches for vim (currently 6.1.x), patch sources, recompile it and install new version of vim."}, {:name=>"bnf.vim", :summary=>"Highlight BNFs", :description=>"Pretty straight forward.  It highlights a BNF grammar definition.  Not too fancy, but it makes writing a BNF more pleasant.  You can see a screenshot of bnf.vim at http://students.cs.byu.edu/~mtb6/bnf_vim.png .  For more complex BNF grammar definitions, you may want to check out http://vim.sourceforge.net/script.php?script_id=545 which is an EBNF syntax file by Hans Fugal."}, {:name=>"lid.vim", :summary=>"Plugin to integrate GNU id-utils tool with Vim", :description=>"Overview\nThe lid.vim Vim plugin provides a way to interact with the lid tool to\nlookup keywords in the ID database.\n\nFor more information about id utilities (lid, aid, etc), visit the \nfollowing pages: \n\n    http://www.delorie.com/gnu/docs/id-utils/id-utils_toc.html \n    http://www.gnu.org/software/idutils/idutils.html \n\nYou can download the id-utils binaries for MS-Windows from: \n\n    http://gnuwin32.sourceforge.net/packages/id-utils.htm\n\nUsage\nYou can lookup keywords in the ID database using the 'Lid' command. For\nexample,\n\n      :Lid<Enter> \n\nThis will prompt you for the keyword to lookup.  The default is the current\nkeyword under the cursor.  You can retrieve previously entered keywords\nusing the up and down arrow keys. You can cancel the lookup by pressing the\nescape key.\n\nYou can map a key to invoke the Lid command:\n\n      nnoremap <silent> <F4> :Lid <C-R><C-W><CR>\n\nAdd the above mapping to your ~/.vimrc file.\n\nYou can also specify the keyword to the Lid command like this:\n\n      :Lid <keyword>\n\nIn the above command format, you can press the <Tab> key to expand\nkeywords from a tags file.\n\nYou can use the \"-p\" and \"-v\" option to the 'Lid' command to selectively\ndisplay lines from the lid output. You can use the \"-p\" option to the 'Lid'\ncommand to list only those lid matches that contain a pattern. You can use\nthe \"-v\" option to the 'Lid' command to list only those lid matches that\ndoes not contain a pattern. Only one of the \"-p\" or \"-v\" options can be used\nat a time.\n\n       :Lid -p\n       :Lid -v\n\nIf you use the any one of the above options, you will prompted to enter the\npattern you are interested in.\n\nThe output of the lid command will be listed in the Vim quickfix window.\n1. You can select a line in the quickfix window and press <Enter> or double\n   click on a match to jump to that line.\n2. You can use the \":cnext\" and \":cprev\" commands to the jump to the next or\n   previous output line.\n3. You can use the \":colder\" and \":cnewer\" commands to go between multiple\n   Lid quickfix output windows.\n4. The quickfix window need not be opened always to use the lid output.\n   You can close the quickfix window and use the quickfix commands to jump\n   to the lid matches.  Use the \":copen\" command to open the quickfix\n   window again.\n\nFor more information about other quickfix commands read \":help quickfix\"\n\nConfiguration\nBy changing the following variables you can configure the behavior of this\nplugin. Set the following variables in your .vimrc file using the 'let'\ncommand.\n\nThe path to the lid executable is specified by the 'LID_Cmd' variable.  By\ndefault, this variable is set to lid. You can change the lid executable path\nby setting the 'LID_Cmd' variable:\n\n      let LID_Cmd = '/my/path/lid'\n\nBy default, this plugin uses 'ID' as the name of the database.  This is\ndefined by the 'LID_File' variable.  You can change the name/location of the\nID database by setting the 'LID_File' variable:\n\n      let LID_File = '/my/path/ID'\n\nYou can also specify more than one ID file names in the LID_File variable.\nThe ID file names should be separated by a ',' character.\n\n      let LID_File = '/my/path1/ID,/my/path2/ID,/my/path3/ID'\n\nThe plugin will use the first ID file name and run lid using that filename.\nIf a match is found, it will return the results. If a match is not found,\nthen the second ID file name will be used and this will be repeated till\neither a match is found or all the specified ID file names are processed.\n\nIf more than one ID file is specified using the 'LID_File' variable, you can\nset the 'LID_Search_Multiple_ID_Files' variable to 1 to always search for a\nkeyword in all the specified ID files. By default,\n'LID_Search_Multiple_ID_Files' variable is set to one. All the specified ID\nfiles are searched for the keyword. \n\n      let LID_Search_Multiple_ID_Files = 0\n\nBy default, when you invoke the :Lid command the quickfix window will be\nopened with the lid output.  You can disable opening the quickfix window,\nby setting the 'LID_OpenQuickfixWindow' variable to 1:\n\n      let LID_OpenQuickfixWindow = 1\n\nYou can manually open the quickfix window using the :cwindow command.\n\nThe 'LID_Shell_Quote_Char' variable specifies the character to use to\nescape the keyword before passing it to the lid command.  By default,\nfor MS-Windows systems, no shell quote character is set.  For other\nsystems, \"'\" is used as the the shell quote character.  You can change\nthis by setting the 'LID_Shell_Quote_Char' variable:\n\n      let LID_Shell_Quote_Char = '\"'\n\nBy default, the ID file specified by the LID_File variable will be used.  If\nyou set the 'LID_Prompt_ID_Filename' variable to 1, then every time the LID\ncommand will prompt for the location of the ID file.  The default ID file\nlocation displayed will be the last used value.  You can again set the\n'LID_Prompt_ID_Filename' variable back to 0, to turn off this prompt.  The\nlast supplied ID file will be used for further Lid invocations.\n\n      let LID_Prompt_ID_Filename = 1\n\nBy default, when the lid output is displayed, the cursor will be\nautomatically positioned at the first matching line.  You can set the\nLID_Jump_To_Match variable to 0 to prevent this.  In this case, only the\noutput from LID will be displayed.\n\n      let LID_Jump_To_Match = 0\n"}, {:name=>"UserMenu.vim", :summary=>"(gvim) Menu for inserting longer pieces of text", :description=>"\" For gvim.\n\" Registers are good for executing vim commands but not perfect for inserting\n\" longer parts of normal text. This menu for gvim help you easy creating,\n\" saving end editing eg. headers for various .tex and .html files."}, {:name=>"midnight.vim", :summary=>"Dark blue, low contrast colorscheme.", :description=>"Midnight is a colorscheme with a dark blue background and light blue foreground.  It is designed to keep contrast at a minimum.  It is the same as midnight2.vim (vimscript #424).  I will attempt to keep both up to date with the same version of the colorscheme."}, {:name=>"tmpl.vim", :summary=>"Syntax for HTML-Template", :description=>"Syntax highlignting for HTML containing HTML-Template tag(<TMPL_XXX .. >).\nIt uses $VIMRUNTIME/syntax/html.vim.\n"}, {:name=>"ihtml.vim", :summary=>"iHTML syntax highlighting", :description=>"Does \"smart\" highlighting of all iHTML syntax.  Handles up to iHTML Enterprise Edition 2.20.  Also highlights SQL within SQL= attributes (which you can turn off if you'd like).  If you're using foldmethod=syntax, there are some nice folds setup by this syntax file.\n\nLatest version always available here:\nhttp://www.markfeeney.com/resources/ihtml.vim"}, {:name=>"pascii", :summary=>"Ascii table printing", :description=>"This package prints ascii table into a new buffer. "}, {:name=>"XSLT-syntax", :summary=>"Syntax for XSLT (with HTML and others)", :description=>"Syntax highlighting for XSLT with HTML keywords.\n                                               \ncontaining keywords\n- HTML\n- CSS (use syntax/css.vim)\n- JavaScript (use syntax/javascript.vim)\n- VBScript (use syntax/vb.vim)\n- PerlScript (use syntax/perl.vim)"}, {:name=>"htmlmap", :summary=>"macros to help type HTML entities", :description=>"This script defines a number of macros, all for insert mode in HTML files. Once installed, it will automatically \"translate\" characters into their &...; strings: so for instance if you type \"ä\" the characters \" & a u m l ; \" will be inserted (without the intervening spaces). A mechanism similar to Vim's \"digraphs\" is also supported but with another key (F12, but you can replace it with something else if it doesn't suit you), so that e.g. \"<F12>oe\" inserts the numeric code for the oe ligature (above 255, some browsers know the numeric codes but not the symbolic entities such as &oelig;).\n\nThe script contains a lot of comments to make it largely self-explanatory."}, {:name=>"lastchange.vim", :summary=>"automatically set time-stamp on modification", :description=>"this (very) lightweight script automatically updates the time-stamp on a file when you :write it out.\nthe time-stamp is of the form:\n     Last Change: Sat Mar 30 04:00 PM 2002 PST\n\nThe script is similar to the example given in :help autocmd, the difference being that the time-stamp already\nthere is checked. If it is identical to the one being added, then nothing is done. Since the time-stamp\nis truncated to the last hour, this ensures that the undo buffer is changed only for :write's every hour.\n\nSet g:timeStampLeader in your ~/.vimrc to change 'Last Change: ' \n(to 'Last modified: ' for instance)\n\nUse :NOMOD to force the time-stamp to be not updated.\nUse :MOD to change it back.\n\nPS: The update only works if the string 'Last Change: ' is found somewhere\nin the first 20 lines of the file. Only the first found occurence is processed.\n"}, {:name=>"manxome-foes-colorscheme", :summary=>"a pleasant scheme for long vimming sessions", :description=>"The colorschemes that ship with vim all made me wince, and after several hours of editing, even the most innocuous of them would become unpleasant.  I designed this scheme to be both clearly marked up and easy on my eyes.  It reminds me of the default colorscheme of the Telegard BBS."}, {:name=>"vimdoc", :summary=>"produce vim documentation in man, html and LaTeX(PostScript) format", :description=>"This project is far from perfect, but it already works.\n\nUse this to produce vim documentation in html, man and LaTeX(PostScript) format."}, {:name=>"doc.vim", :summary=>"Syntax colouring for ASCII documentation", :description=>"Gives you syntax coloring for ASCII-documentation files.\nNot perfect, but may be a base for your own.\n\nDetects headlines (underlined with '-' or '='),\nenumerations, lists (starting with '-' or '*')\nsome simple time, date formats \nsome simple email addresses, web addresses."}, {:name=>"csc.vim", :summary=>"Compiler file for MS C#.  (csc, csc.exe)", :description=>"Use the Microsoft C# compiler from within Vim.  Parses error output from the compiler and populates the quickfix window."}, {:name=>"aspnet.vim", :summary=>"ASP.NET syntax highlighting", :description=>"Provide syntax highlighting for C# code withing <script runat=\"server\"> ... </script> blocks as well as @ directives in *.(aspx|ascx|asmx) files.\n\nThis is a work in progress.  It's not perfect by any means, but it's quite usable."}, {:name=>"brief.vim--Lakshmanan", :summary=>"Brief editor key binding emulation in Vim", :description=>"The brief.vim Vim plugin emulates the brief editor key bindings and behavior\nin Vim.\n\nThe brief editor has only one mode - insert-mode. This plugin uses the Vim\n\"insertmode\" option to emulate the brief insert mode. This plugin will automatically\nstart the insert mode.  To properly use this plugin, you have to be in\ninsertmode always.  If you press escape, Vim will not go to the normal mode.\nIf you want to use any of the normal commands, press <C-o> and then the normal\nmode command. \n\nThis plugin uses the CTRL and ALT keys for the mappings. Before\nusing this plugin, make sure that the ALT and CTRL keys work in your Vim\ninstallation.\n\nThe following list of brief like key-mappings are provided:\n\nCursor Movement Keys:\n\n<Up>         - Move cursor up one line\n<Down>       - Move cursor down one line\n<C-Left>     - Goto beginning of previous word\n<C-Right>    - Goto beginning of next word\n<Home>       - Home key.  If you press once, cursor will move to the first\n               column in the current line.  If you press twice, cursor will\n               move to the first column in the first line in the current\n               page.  If you press thrice, cursor will be positioned at the\n               top of the file.\n<End>        - End key. If you press once, cursor will move to the last\n               column in the current line.  If you press twice, cursor will\n               move to the last column in the last line in the current page.\n               If you press thrice, cursor will be positioned at the end of\n               the file.\n<C-PageUp>   - Goto-beginning of file\n<C-PageDown> - goto-end of file\n<C-Home>     - Beginning-of-window\n<C-End>      - End-of-window\n<C-d>        - Scroll line down\n<C-e>        - Scroll line up\n<A-Home>     - Move the cursor to the first character on screen\n<A-End>      - Move the cursor to the last character on screen\n<C-b>        - Move the current line to the bottom of the window\n<C-c>        - Move the current line to the center of the window\n<C-t>        - Move the current line to the top of the window\n\nEditing Keys:\n\n<C-CR>       - Open a new line below the current line and goto that line\n<S-CR>       - open a new line below the current line, cursor stays in the\n               current line\n<A-i>        - Toggle insert mode\n<A-k>        - Delete from the cursor position to the end of line\n<C-k>        - Delete from the cursor position to the start of line\n<A-d>        - Delete the current line\n<kPlus>      - Copy line or mark to scrap buffer.  Vim register 'a' is used\n               as the scrap  buffer.\n<kMinus>     - Cut line or mark to scrap buffer.  Vim register 'a' is used\n               as the scrap buffer.\n<Ins>        - Paste scrab buffer contents to current cursor position.  Vim\n               register 'a' is used as the scrap buffer\n<C-Ins>      - Copy marked text to system clipboard.  If no mark, copy\n               current line\n<S-Ins>      - Paste the system clipboard contents to current cursor\n<S-Del>      - Cut the marked text to system clipboard. If no mark, cut the\n               current line\n<C-Del>      - Remove the marked text\n<C-v>        - Clipboard paste\n<A-g>        - Goto line\n<C-BS>       - Delete the previous word\n<A-BS>       - Delete the next word\n<A-/>        - Complete a partially typed word\n<A-q>        - Quote the next character\n\nDelete Keys:\n\n<A-u>          :\n<kMultiply>  : Undo last operation.  Either keypad * key or <A-u> can be used.\n<A-y>          : Restore line\n<C-y>          : Redo the previously undid commands\n\nSearch and Replace Commands:\n\n<C-f>          :\n<F5>          :\n<A-s>         : String search\n<S-F5>       : search again\n<A-F5>       : Reverse search\n<F6>          : Search and replace from the current cursor position\n<A-t>         : Search and replace the current word from the current cursor position\n<S-F6>       : Repeat last search and replace\n<C-F5>       : toggle case sensitivity of search commands.\n\nBuffer Commands:\n\n<A-e>        - Open file\n<A-x>        - Exit\n<A-r>        - Read file\n<A-w>        - Save the current file\n<A-o>        - Save the current file in a different file name\n<A-n>        - Select next buffer from the buffer list\n<A-->        -\n<A-p>        - Select previous buffer from the buffer list\n<C-->        -\n<C-kMinus>   - Delete current buffer from buffer list\n<A-b>        - Display buffer list\n<A-f>        - Display buffer information\n\nCompiler related commands:\n\n<A-F10>      - Compile current buffer\n<C-n>        - Jump to the next error\n<C-l>        - pJump to the next previous error\n<C-p>        - View compiler output\n\nMark commands:\n\n<A-m>        - Toggle standard text marking mode\n<A-l>        - Toggle line marking mode\n<A-c>        - \n<A-a>        - Toggle column marking mode\n<A-h>        - Mark current word\n\nMisc commands:\n\n<A-v>        - Show version\n<C-Up>\n<C-Down>     - Goto next/previous function\n<A-z>        - Start a shell\n<A-F1>       - Search for a keyword in online help\n\nBookmark:\n\n<A-0>        - Mark bookmark 0\n<A-1>        - Mark bookmark 1\n<A-2>        - Mark bookmark 2\n<A-3>        - Mark bookmark 3\n<A-4>        - Mark bookmark 4\n<A-5>        - Mark bookmark 5\n<A-6>        - Mark bookmark 6\n<A-7>        - Mark bookmark 7\n<A-8>        - Mark bookmark 8\n<A-9>        - Mark bookmark 9\n<A-j>        - Jump to a bookmark\n\nWindows Commands:\n\n<F3>         - Split window\n<F4>         - Delete window\n<A-F2>       - Zoom window\n<A-Down>     - Goto the window below the current window\n<A-Up>       - Goto the window above the current window\n\n"}, {:name=>"java.vim", :summary=>"Convenience mappings for Java programming", :description=>"Contains several mappings (about 30) to save typing when Java programming.  Most are short for keywords, types, etc.  (e.g. ,p ,s ,f ^Ts  -->  public static final String).  Some are more complex, like inserting a javadoc comment or expanding a constructor.\n\nThe script is commented sufficiently.\n\nI haven't added anything to this for ages, but there is no limit to how useful this can be, so please feel free to add updates."}, {:name=>"Nsis-color", :summary=>"Nullsoft install system scripts syntax highlight", :description=>"Nullsoft install system (NSIS) scripts syntax highlight. NSIS is free and produce vary small and pretty installers. Look http://www.nullsoft.com/free/nsis/ for details."}, {:name=>"byteme.vim", :summary=>"Goto Hex Offset", :description=>"A few years ago I had to write a streaming single-page to multi-page TIFF converter.  Doing so required that I spend a lot of time wondering around in a HEX editor looking at the bytes that made up the TIFF headers.  The biggest part to tweaking the image files was getting all of the offsets calculated correctly.\n\nI was using MultiEdit for an editor at the time and needed \"Goto Hex Offset\" functionality that ME didn't have so I wrote a cmac function to do it for me.  It's purpose was to take me to a specified _byte_ in _me_ (MultiEdit) hence I named the function \"ByteMe\".\n\nA few months ago, I started using VIM.  Once again I needed \"Goto Hex Offset\" functionality which VIM did not have.  So, I rewrote my cmac ByteMe functionality in VIM and the result was this byteme.vim plugin.\n\nI'm fairly new to VIM so I expect my code could be much, much simpler, but this at least works for now.\n\nI wrote this on a Win2000 box using GVim 6.0 and have since upgraded to GVim 6.1 with no effect to byteme.vim.  I also tested it in gvim 6.0 running in Red Hat Linux 7.2 and it appeared to work ok (after passing it through dos2unix).  I even tested it in vim 6.0 on Red Hat Linux 7.2 and the byteme.vim functionality works but I have not figured out how to make the key mapping work.  I could only fire off the function using \":call ByteMe()\".\n\nI am using the xxd utility to generate the hex.  For anyone who might not have xxd on your Windows box, I got mine by downloading and installing Cygwin and then adding c:\\cygwin\\bin to my path. (Little warning about installing cygwin and then putting it at the beginning of your windows path. At least for me, this breaks my vim ftp functionality every time.  I keep getting this 'bad port' error.  To fix it, I just go to ...\\cygwin\\bin\\ftp.exe and rename it to ...\\cygwin_ftp.exe.  That forces vim to use the default Windows ftp and fixes the 'bad port' error. If I want to use the cygwin ftp, I just type cygwin_ftp.)\n\nbyteme.vim is written to use the format returned by the generic xxd hex dump.  If you use any switches to get xxd to change the format, or use some other utility to generate the hex, you'll probably have to rewrite byteme.vim.\n\nTo use: Once you have installed the plugin, reopen VIM, open the file you plan to view, convert to hex, hit <M-g> (Alt-g on a Windows style keyboard), enter the new offset in hex (e.g. fe09), hit enter, and you should be there.  An entry containing non-valid hex chars (e.g. fgtr) should take you to byte 0.  If the offset you enter is past then end of your file, you should end up at the end of the file but without any major error/warning so pay attention."}, {:name=>"scite-colors", :summary=>"Scite-like colors (GUI only)", :description=>"Color scheme based on the SciTE editor's colors.\nHere is a snapshot:\nhttp://www.mcl.hu/~kgergely/scite.png"}, {:name=>"Cool-colors", :summary=>"Colors based on inverted SciTE colors (GUI only)", :description=>"Dark background.\nHere is a screenshot:\nhttp://www.mcl.hu/~kgergely/cool.png"}, {:name=>"navajo-night", :summary=>"A blue scheme, inverse of navajo", :description=>"This is simply the inverse of the navajo colour scheme.\nI was using navajo, and hit visual bell enough times to go \"hey, that looks cool\" ;-)\n\nSo here it is.  Also includes the statusbar colours  and assistance for spell checking from the Cream version of the navajo scheme.\n\nThanks to R. Edward Ralston for navajo, Steve Hall for Cream, and Srinath Avadhanula for misc bug fixes.\n"}, {:name=>"multi.vim", :summary=>"using Greenhills Multi as C/C++ compiler for quickfix", :description=>"Script to use Greenhills Multi as C/C++ compiler from vim with ':make <project_build_file>'.\nSets compiler and errorformat for use with quickfix commands.\nNeeds a tool ('catch', not supported) on NT4 to catch stderr and stdout in my environment.\n(Probably not necessary under Unix).\n\nDoes not catch all error and warning formats (especially. no linker problems)."}, {:name=>"taglist.vim", :summary=>"Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc)", :description=>"The \"Tag List\" plugin is a source code browser plugin for Vim and\nprovides an overview of the structure of source code files and allows\nyou to efficiently browse through source code files for different\nprogramming languages.  You can visit the taglist plugin home page for\nmore information:\n\n      http://vim-taglist.sourceforge.net\n\nYou can subscribe to the taglist mailing list to post your questions\nor suggestions for improvement or to report bugs. Visit the following\npage for subscribing to the mailing list:\n\n      http://groups.yahoo.com/group/taglist/\n\nFor more information about using this plugin, after installing the\ntaglist plugin, use the \":help taglist\" command."}, {:name=>"User-Defined-Type-Highlighter", :summary=>"Generate vim highlighting groups from C++ typedefs, structs, and classes.", :description=>"Generates vim highlighting groups for typedefs, classes, and structs that you have defined in your C++ header files.  There are a few options that you can set to control its behavior, so read the included help file so you can know what options you can change in your .vimrc if you want."}, {:name=>"camo.vim", :summary=>"Dark Color Scheme", :description=>"For a screenshot goto http://www.geocities.com/aldy0169/images/camo.jpg\n"}, {:name=>"adrian.vim", :summary=>"A dark background color scheme, with light color for text comments", :description=>"This colorscheme is a dark background colorscheme.  Comments are in light grey and other text is highlighted to aid me in thermal analysis syntax highlighting.\n\nThe latest version should always be found at: http://www.naglenet.org/vim/vimfiles/colors/adrian.vim\n\nSample screen shot:\nsmall> http://www.naglenet.org/images/vim/tak_scrnsht-s.jpg\noriginal> http://www.naglenet.org/vim/tak_screenshot.html\n\nComments are always welcome."}, {:name=>"PrintWithLNum", :summary=>"Prepend line numbers to each line for printing", :description=>"In response to a query on the vim mailing list I developed this quick function which prepends the line number to the beginning of each line. The line numbers are left justified and formatted with a 1 character white space on either side of the number.\n\nThere are two methods of operation. The first prepends the line numbers to each line and is activated with :Printwln    (or \":Printwln(0)\" ). The second method of calling causes the program to prepend the line number and then go on to print the file using \":hardcopy\", and then undo the changes it just made. This allows you to print off the contents of a file without changing it.\n\nHope it helps someone.\n\nColin."}, {:name=>"sybase.vim", :summary=>"Connect to a sybase database from within VIM", :description=>"Follows is an adaption of sqlplus.vim written by Jamis Buck see http://vim.sourceforge.net/scripts/script.php?script_id=97\nfor the original. \n\nThis script contains code required to execute SQL queries from withing VIM.  It uses sqsh (http://www.sqsh.org/) however it could trivially be adapted to use isql.  It is very ruff and ready but seems to offer required functionality.\n\nThanks to Jamis Buck for creating sqlplus.vim I am sure if you compair the code you will see how little I have had to do to get this code to work ;-) \n\nINSTRUCTIONS\n============\n\nEdit ~/.sqshrc and add the line \\set semicolon_hack=1 \n\nSave the code into a file and source from your .vimrc or use your favourate autoload system.\n\nEdit the code to add the credentials for the databases you would like to connect to.\n\nIn highlight mode hit F8 to execute the hightlighed SQL.  It will cope with broken lines.\n\nHit F8 with no highlighted selection and VIM will prompt you for a database to connect to.\n\n"}, {:name=>"Projmgr", :summary=>"A fancy way of using 'session'", :description=>"This plugin provides a more easy to use interface for the Vim session\nfeature.\n\nI wrote it first only for my own needs. I have a bunch of small\nprojects lying around on my hard disk. I would like to load a whole\nproject, play around with it, switch to another if I like, or simply\nunload it.\n\nThis plugin provide a menu system for 'Load', 'Unload' 'Switch to' a\nproject(session). None-menu-driven version is not available at the\nmoment.\n\nThis version is for Linux only. I am still struggling to get a Win32 version done.\n\nA screenshot (333879 in size) at:\nhttp://www.geocities.com/wzhliang/vim/image/fullscreen1.png\n\n"}, {:name=>"netdict", :summary=>"A frontend to the Unix dict protocol command-line client.", :description=>"Netdict is a plugin to lookup definitions via the Internet with a dict command-line client. It has the following features:\n\n    - specifying an alternate database and search strategy\n    - term matching\n    - syntax highlighting\n    - customizable settings\n    - GUI when available"}, {:name=>"ExecPerl", :summary=>"Utilities for executing perl scripts", :description=>"Provides the following commands:\n\n:ExecPerl script_name\n\tThis will execute script_name using the perl\n\tinterpreter.\n\n:ExecPerlMore\n\tThis will execute script_name using the perl\n\tinterpreter.  If the output would scroll past the end\n\tof the screen, execution pauses and waits for a\n\tkeystroke before continuing.\n\n:ExecPerlDump\n\tThis will ask you for an output file and then\n\texecute script_name using the perl interpreter.  The\n\toutput from the script is dumped to the file that you\n\tentered when you were prompted.  You may press enter\n\tinstead of entering a file name to accept the default\n\tfilename.\n\nAlso, The following keys are mapped by default.  You'll have to\ncomment them if you don't want this behavior:\n\n\t<F5>:    ExecPerl the current file being edited\n\t<C-F5>:  ExecPerlMore the current file being edited\n\t<S-F5>:  ExecPerlDump the current file being edited\n\n"}, {:name=>"candy.vim", :summary=>"color scheme ( background is black )", :description=>"If you want to update this file, please download rainbow.zip.\nhttp://www.vim.org/script.php?script_id=463\ncandy.vim is renamed to neon.vim.\n\nThis is color scheme."}, {:name=>"txt2pdf.vim", :summary=>"Script to save the current file and convert it to PDF using txt2pdf", :description=>"Script to save the current file and convert it to PDF using txt2pdf. You need to install txt2pdf http://www.sanface.com/txt2pdf.html\n\nYou can also use txt2pdf PRO http://www.sanface.com/txt2pdfPRO.html and txt2pdf PRO + crypt http://www.sanface.com/txt2pdfPROcrypt.html to\nmake more complex PDFs like\nhttp://www.sanface.com/pdf/Purchase_Order.pdf\nhttp://www.sanface.com/pdf/invoice.pdf\nhttp://www.sanface.com/pdf/hfmus.pdf\nhttp://www.sanface.com/pdf/heraldbill.pdf\n"}, {:name=>"unilatex.vim", :summary=>"display LaTeX symbols as unicode while editing", :description=>"Vim supports unicode since version 6. This means it's possible to display many mathmatical symbols in vim. Writing LaTeX texts can now be much easier. To display unicode symbols while editing LaTeX documents, I've written a plugin for vim.\n\nScreenshot:\nhttp://www.fenk.wau.nl/~oever/software/vim/\n\nWhat does the plugin do?\n\n- Convert all symbols like \\alpha to the unicode symbol α when reading a LaTeX file.\n- Convert these commands when typing them.\n- Convert the unicode symbols back to LaTeX when saving the document."}, {:name=>"potts.vim", :summary=>"Doug's Colorscheme", :description=>"This is the colorscheme I've come up with \"over the years\".  It assumes for console that\nyou have the term set for a black background and gray text.  If you switch to a lighter\nscheme, it may not be very visible. \n\nIt works pretty well on transparent term windows, better if you can partially shade them.\n\nSorry it doesn't have a flashy name, but it doesn't seem to have any theme to it.\nScreen shots at http://pottsdl.github.com/colors.html\nScreen shot of console vim and GUI (Motif) vim."}, {:name=>"sessmgr", :summary=>"Manage session and viminfo like CodeWrite", :description=>"Manages sessions and viminfo so that when you start vim in a particular directory (e.g. a \"project\"), then vim starts up with all the files and windows set the way they were last, including history and other settings.  Allows multiple named sessions in each project, including the ability to quickly and easily switch between them."}, {:name=>"outlineMode.vim", :summary=>"Create an outline view for source files in various programming languages.", :description=>"This script is now retired, as it is superceded by vimscript #273"}, {:name=>"aqua", :summary=>"An aqua like color scheme", :description=>"This is just an blueish aqua color scheme."}, {:name=>"serverlist.vim", :summary=>"Switch between VIM windows quickly", :description=>"Script creates key mappings for each existing VIM window.  After sourcing the script, you can press \\a in normal mode to switch to window 1, \\b for window 2, etc.  The keys are broadcasted to each window, such that the same key always map to the same window.  \\. will show mapping for current window."}, {:name=>"ruby-matchit", :summary=>"'Matchit' for Ruby.", :description=>"Map '%' to jump from one keyword to its corresponding 'end' in Ruby files. Inspired by 'matchit.vim' that comes with Vim.\n\n"}, {:name=>"autodate.vim", :summary=>"A customizable plugin to update time stamps automatically.", :description=>"This plugin inserts and updates a time stamp automatically.\n\nUsers can specify a format and position of the time stamp by options.\nBy default, autodate.vim searches a keyword \"Last Change:.\"\nin the first 50 lines of the buffer, and inserts a time stamp.  Example: \n    Last Change: 24-Jun-2003. \n\nSetting Example:\n    :let b:autodate_keyword_pre = '<!--DATE-->'\n    :let b:autodate_keyword_post = '<!--DATE-->'\n    :let b:autodate_format = '%Y/%m/%d'\nThe Result:\n    <!--DATE-->2003/06/24<!--DATE-->\n\nSee comments in autodate.vim for more details."}, {:name=>"xian.vim", :summary=>"kind'a pastel colorscheme (dark bg, GUI only)", :description=>"based on a dark background color I saw\non a web page some time back.\n\nComments are welcome.\nChristian"}, {:name=>"utl.vim", :summary=>"Univeral Text Linking - Execute URLs, footnotes, open emails, organize ideas", :description=>"--- WHAT IS UTL.VIM?\n\nIt brings the benefits of URL-based hyperlinking to plain text, extending the\nURL syntax for plain text needs, in accordance with the RFC 2396 (towards\ncurrent RFC 3986) URL specification.\n\nUtl is very easy to start. Just  :so %  the .vba file and dive into the live examples\nof the doc.\n\n--- USAGES\n\n- Open any URLs found in text with appropriate handler\n- Open files of any media type from within Vim (.pdf, .jpg, etc)\n- Small helper utilities via embedded Vimscript\n- Project management\n- Organizing ideas\n- Commenting source code\n- Personal Wiki\n- Editing HTML\n- Bookmark files, directories, URLs\n\n--- CHARACTERISTICS\n\n- Well documented and helpful verbose mode\n- Is easy to get started\n- Stays out of the way, no side effects\n- Extensible\n\n--- KEYWORDS\nHypertext, URL, URI, email, footnotes, Wiki, bookmarks\n\n--- CHANGES SINCE UTL V2.0\n\nThe most important changes are:\n\n- Added generic media type handler: open .pdf, .doc,\n  .jpg etc without the need to define handler variables.\n- Added support for footnote references: make \"[1]\"\n  executable.\n- Added scheme to open emails, e.g.\n  <mail:///Inbox?26.07.2008 16:01>\n- Added verbose mode: Better figure out what's going on\n- Added 'copy link/filename to clipboard' function\n- Changed user interface: Basic Command :Utl instead\n  only mapping \\gu\n- Alternate http access method: open web documents\n  directly in Vim\n- Support network files (shares, NFS), e.g.\n  <file://127.0.0.1/path/to/file&gt;\n- Improved jumping back and forth\n- More versatile scheme handler interface\n- Fixed Bugs\n\n--- EXAMPLES\n\nFor live examples and tutorial you can have a look into the docs\nwithout installing by opening the download link below and search\nfor \"getStarted\""}, {:name=>"Align", :summary=>"Help folks to align text, eqns, declarations, tables, etc", :description=>"                                                    [ALIGN/ALIGNMAPS NEEDS VIM 7.0 AS OF V29/34]\n\nAlign and AlignMaps lets you align statements on their equal signs, make comment boxes, align comments, align declarations, etc.\n\nNote: this plugin is not a left&right margin justification tool!  See vimscript#177 or vimscript#2324 for that.\nNote: if you have vim 7.1 or later, your vimball should unpack just fine without having to update it.\n\nThere are two basic commands provided by this package:\n\n        AlignCtrl options sep1 sep2 sep3 ...\n        [range]Align sep1 sep2 sep3 ...\n\nThe \"sep#\" are regular expressions which describe separators that delineate fields; Align will line up the separators. The range may be any Vim range, _including_ visual-blocks.  Align works on lines of the form:\n(ws==whitespace, sep==separator, field==text)\n\n    ws-field-ws-sep-ws-field-ws-sep-ws-field-...\n    ws-field-ws-sep-ws-field-ws-sep-ws-field-...\n\nNote that white-space (ws) surrounding separators is ignored.\n\nThe Align package includes:\n\n  Align : the basic alignment command\n  AlignCtrl : provides options for the next call to :Align\n  AlignMaps : many three or four key maps which support aligning C/C++ style declarations, ()?..:.., expressions, C/C++ comments, numbers, C preprocessor definitions, tables based on tabs or spaces, and more.\n\nIn addition, AutoAlign (vimscript#884) uses the Align function to align =s as you type.\n\nAlign handles alignment on multiple separators, not just the first one, and the separators may be the same across the line or different.  With AlignCtrl one may specify that separators are cyclic (re-used sequentially) or equivalent (all separators are simultaneously active).\n\nThere are several options to help with deciding what to do with initial white space.   By default Align re-uses the first line's initial white space, but one may use AlignCtrl to retain or remove each line's initial white space.\n\nThe <Align.vim> and <AlignMaps.vim> files are plugins and require vim 6.1 or higher.\n\n\nEXAMPLES:\n\n:5,10Align =\n    Align on '=' signs\n\n:'<,'>Align = + - \\* /\n    Align on any of the five separator characters shown.\n    Note that visual block mode was used to fire off Align.\n\n:AlignCtrl =lp1P1I\n    which means:\n    = all separators are equivalent\n    l fields will be left-justified\n    p1 pad one space before each separator\n    P1 pad one space after each separator\n    I  preserve and apply the first line's leading white space to all\n       Align'd lines\n\n:help align\n    Gives help for Align\n\n\nALIGNMENT CONTROL\n\nAlignment control allows for left or right justification or centering of fields, cyclic (sequentially active) or equivalent (simultaneously active) regular expressions to specify field separators, initial white space control, optional visual-block use (ie. apply Alignment only within a block), user-specified white-space padding about separators, and multiple separators.\n\nMANY ALIGNMENT MAPS\n\nAlignMaps.vim provides a number of maps which make using this package easy.  They typically either apply to the range 'a,. (from mark a to current line) or use the visual-selection (V, v, or ctrl-v selected):\n\n\t\\t=  : align assignments (don't count logic, like == or !=)\n\t\\t,  : align on commas\n\t\\t|  : align on vertical bars (|)\n\t\\tsp : align on whitespace\n\t\\tt  : align LaTeX tabular tables\n\nAlignMaps also provides some internally complex maps for aligning C declarations, Ansi C function arguments, html tables, LaTeX tabulars, and trailing comments:\n\n\t\\acom : align comments\n\t\\adec : align C declarations (one variable per line)\n\t\\afnc : align ansi-style C function input arguments\n\t\\Htd  : align html tables\n\t\nTo see some examples of this, check out\n\n    http://mysite.verizon.net/astronaut/vim/align.html#Examples\n\n(the proportional fonts used by most browsers in showing you this page preclude showing the examples here). The help for Align and AlignCtrl also contains many examples.\n\nALIGNMENT ON VISUAL BLOCKS AND g,v-LIKE CONTROL\n\nSometimes one wants to align only a subset of text in a range, based on patterns or column extents.  Align supports both types of restrictions!\n    \n    Visual-block selection may be used to restrict Align to operate only\n    within that visual block.\n    \n    AlignCtrl supports \"g\" and \"v\" patterns that restrict Align to\n\n    operate on lines which match (or don't match, respectively) those\n    patterns.\n\nNEW STUFF:\n\nThere's a number of new AlignCtrl options:\n    \n    - allows one to skip a separator (treat it as part of a field)\n    + repeat the last lrc justification (ex. lr+ == lrrrrrr... )\n    : treat the rest of the line as a field; acts as a modifier\n      to the last lrc. \n    < left-justify the separator\n    > right-justify the separator\n    | center the separator\n\nThese are, except for the \":\", cyclic parameters.  In other words, >< is equivalent to ><><><><... .  Thus separators can be of differing lengths (ex.  -\\+ as a separator pattern can match -, --, ---, etc and the separators will be left/right/center justified as you wish).\n\nTo get automatic, as-you-type, aligning of = in the C, vimL, and other languages, check out vimscript#884 for several ftplugins (which use Align).\n\n\nAlternative Aligners:\n    Gergely Kontra's vimscript#176\n\nThank you for rating Align!\n\n---------------------------------------\nDISCUSSION and COMMENTS:\n---------------------------------------\n\nPlease use email for bugs.  Enjoy!\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#ALIGN)\n"}, {:name=>"bluegreen", :summary=>"dark green and blue colorscheme", :description=>"this is another colorscheme by me, featuring a dark blue and green motif."}, {:name=>"showbrace", :summary=>"Shows line that matches the entered curlybrace", :description=>"\nA simple script I made for editing Java source. When an ending curly-brace } is inserted the script\nshows the line with the opening brace on the statusline.\n\nOnly works when noshowmode is set."}, {:name=>"latextags", :summary=>"Perl script to generate tags for LaTeX files.", :description=>"This is a perl script to generate tags\nfor Latex files. The script generates\ntags for labels, newcommands and bibliography\nitems. \nThis is script was derived from Michael Schaap's\npltags.pl script.\nThe format of the tags file is usable from VIM."}, {:name=>"vimfortune", :summary=>"Show random tips when launching VIM", :description=>"This simple script shows you a random tip using 'fortune' program when launching VIM\nwithout specifying filename(s) to edit(ie. '%vim' and not '%vim foobar.c').\nYou can also explicitly view a tip by typing\n:TIPS\nor\n:!fortune vimtips\n\nIncluded are pre-formatted datafiles converted from the vim tips available from:\nhttp://vim.sourceforge.net/tips/download.php"}, {:name=>"TabIndent", :summary=>"Overload the <Tab> key to either insert a tab, or indent the current line", :description=>"The TabIndent plugin allows you use the <Tab> key in Insert mode to indent the current line, as well as retain its usual task of inserting a real <Tab> character.  TabIndent exhibits a bit of intelligence by making sure that the current line is only indented if you're editing source code, by checking the 'cindent' and 'indentexpr' options.  Editing text files will never cause the <Tab> key to perform indentation.\n\nYou can also change the behaviour of when indentation is performed; some people prefer <Tab> to always perform indentation, and others may want to indent only if the cursor is at the start of the line.  TabIndent is designed to make every user work the way they want to."}, {:name=>"Vimacs", :summary=>"Vim-Improved eMACS: Emacs emulation for Vim", :description=>"Vimacs (Vim-Improved eMACS) brings Emacs's extensive key bindings and modeless editing features to the Vim world, while completely retaining Vim's powerful moded editing style.\n\nVimacs is based on the keymaps of GNU Emacs 21 and XEmacs, so if you are familiar with them, you'll feel right at home in Vimacs.  For Emacs users, most (if not all) of the common key maps in Emacs are present in Vimacs, such as <C-Space>, <C-w> and <C-y> to mark, kill and yank regions, <C-x><C-f> to find a file, and <C-x>2 to vertically split a window.  However, you can now take advantage of the incredible power of Vim's Normal and Command modes with a touch of the <Esc> key.\n\nIf you're a long-time Vim user, you retain vi's powerful moded editing paradigm while gaining all the benefits of Emacs' modeless editing.  After a while, the <C-a> and <C-e> keys will become second nature to you, just as you're used to the h, j, k, and l keys for movement.  Some of the keys familiar to you in Insert mode have been changed, but you won't take long to get used to Emacs's keys: just like Vim, Emacs's key layout has been designed so that commonly used keys are quick to access.\n\nSee the homepage at http://www.algorithm.com.au/code/vimacs/ for more information."}, {:name=>"xmledit", :summary=>"A filetype plugin to help edit XML, HTML, and SGML documents", :description=>"This script provides some convenience when editing XML (and some SGML including\nHTML) formated documents. It allows you to jump to the beginning or end of the\ntag block your cursor is in. '%' will jump between '<' and '>' within the tag\nyour cursor is in. When in insert mode and you finish a tag (pressing '>') the\ntag will be completed. If you press '>' twice it will complete the tag and\nplace the cursor in the middle of the tags on it's own line.\n\nFor the latest development snapshot visit\n    http://github.com/sukima/xmledit/\n\nPlease fork this project. We need help making this better."}, {:name=>"AnsiEsc.vim", :summary=>"ansi escape sequences concealed, but highlighted as specified (conceal)", :description=>"Files with ANSI escape sequences look good when dumped onto a terminal that accepts them, but have been a distracting clutter when edited via vim.  The AnsiEsc.vim file, when sourced, will conceal Ansi escape sequences but will cause subsequent text to be colored as the escape sequence specifies when used with Vince Negri's conceal patch.  AnsiEsc.vim v3 or later uses the conceal patch to accomplish this.\n\nWithout that conceal patch, the best that can be done is to suppress Ansi escape sequences with \"Ignore\" highlighting.  AnsiEsc.vim v2 does that.\n\n------------------------------\nVIM Developer's Corner:\n------------------------------\n\n   \nVince Negri's \"conceal\" patch to vim6.3 and vim7.0 allows one to suppress strings within a line; ie. in-line folding! This feature is ideal for Ansi escape sequence handling.  Starting with AnsiEsc's version 3 the <AnsiEsc.vim> script makes use of that new capability to display Ansi-sequence containing files.  The Ansi escape sequences themselves are concealed (except for the line where the cursor is), but they have their desired colorizing effect.  Note that you must have Vim7.0 with the +conceal option for the latest <AnsiEsc.vim> (v8) to work.  Apply Vince Negri's patch to the Vim 7.0 source code and compile Vim for \"huge\" features.  Once you've done that, simply source the <AnsiEsc.vim> file in when you want to see Ansi-escape sequenced text in Vim.\n\n    ----------------------------------\n    Typical Compiling Directions:\n    ----------------------------------\nTo use the AnsiEsc v2, just source it in when you wish to; your vim version needs +syntax, which is fairly common.\n\nTo use the conceal-mode AnsiEsc (those with versions >= 3), you'll need to have a Vim that has been patched with Vince Negri's concealownsyntax patch; the version will show both +syntax and +conceal.\n\nTypical compiling directions:\n\n        * cd ..wherever../vim70/\n        * browse http://sites.google.com/site/vincenegri/ for the conceal/ownsyntax patch\n        * patch -p0 < conceal-ownsyntax.diff\n        * make distclean\n        * configure --with-features=huge\n        * make\n        * make install\n\n\n(also see: vimtip#1308)\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#ANSIESC)\n"}, {:name=>"ftpluginruby.vim", :summary=>"Ruby filetype plugin with matchit, lots more", :description=>"This is a pretty complete Ruby filetype script.\nIt provides for the use of matchit.vim, as well as setting the include path correctly (by calling ruby if you have it). It also deals with the possibility of :: in identifiers, both for tags and for finding keywords."}, {:name=>"pyimp.vim", :summary=>"load python file from import statement", :description=>"Set of functions to open a Python import statement as a file.\nThis is a modification of javaimp.vim by Darren Greaves <darren@krapplets.org> http://boncey.org/vim.shtml\nSuggested stuff to add to your ~.vimrc:\nlet $PYTHONSOURCEPATH=\"/usr/lib/python2.2/,/usr/lib/python2.2/lib,/usr/lib/python2.2/site-packages,~/python\"\nmap H :call OpenPythonImport($PYTHONSOURCEPATH)<CR>\nThen press H while on a import line and the file should open (you'll need the\nsource files and the path to have been set already.\n\nThe paths in $PYTHONSOURCEPATH should have the source packages directly\nunderneath each path.  The script needs to be able to add the package to the\npath element and open a file.\n\nI still need to figure out how to load the \"from blah.bleh.blih import yada\" type of imports"}, {:name=>"sql_iabbr.vim", :summary=>"Makes all your favorite SQL keywords uppercase automatically.", :description=>"With this ftplugin you can type \"create table foo (foo_id int);\" and get \"CREATE TABLE foo (foo_id INT);\".  It is based on both sql.vim and the output from postgresql's \\dT command while in psql.  That makes it a tad bit tailored to postgresql, but it will work with any SQL compliant dbms.  Please note that I am not an SQL wizard.  I just know how to copy and paste and use \":%s///\".  :)  Enjoy!  Comments are welcome.  Many thanks to Hari Krishna Dara for improving this plugin and making it generally more useful."}, {:name=>"gnome-doc.vim", :summary=>"auto-generate C document headers for GTK+/GNOME functions", :description=>"Add a document header to your function. The headers can be parsed and converted into documentation by the gtk-doc tools."}, {:name=>"xemacs-colorscheme", :summary=>"Vim with xemacs-like colors", :description=>"Copy it to your $HOME/.vim/colors and do a :colorscheme xemacs from within vim. I've tried to mimic xemacs\ncolors as best as I could, but suggestions would be very much welcome."}, {:name=>"fog-colorscheme", :summary=>"A gentle colorscheme for code editing.", :description=>"This color scheme is meant for the person that spends hours and hours and hours and... in vim and wants some contrast to help pick things out in the files they edit, but doesn't want **C**O**N**T**R**A**S**T**!\n"}, {:name=>"CSV-delimited-field-jumper", :summary=>"Map keys to easily jump to fields in CSV files", :description=>"I wrote these simple functions to easily jump to specific fields in CSV (and tildle delimited) data/text files.  There are two functions: one tells you the current field number the cursor is on, and the other prompts you for the field number to move to on the current line.\n\nAt work, all of our data files are CSV, so this has saved me countless hours verifying data.\n\nAt the bottom of mmfield.vim, you can specify which keys to map to the functions."}, {:name=>"cream-sort", :summary=>"sort a file by lines", :description=>"\n:call Cream_sortfile() will sort the current file alphabetically by line. User is prompted to choose the column of the sort. The function uses the operating system's sort command (both Windows or Unix) for speed since our original use was for 7mb dictionary wordlists(!). (cream-sort actually creates and sorts a temp file copied from the current to preserve the original file since it would be destroyed by the OS during the process.) \n\nPlease notice three other sort libraries included within the script below the advertised first one. They were \"research\" during the project and may serve certain users better than ours!\n\nThis is one of the many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim in the vein of Apple and Windows software you already know.\n\n"}, {:name=>"grep.vim", :summary=>"Grep search tools integration with Vim", :description=>"Overview\n\nThe grep plugin integrates the grep, fgrep, egrep, and agrep tools with\nVim and allows you to search for a pattern in one or more files and jump\nto them.\n\nTo use this plugin, you need the grep, fgrep, egrep, agrep, find and\nxargs utilities. These tools are present in most of the Unix installations.\nFor MS-Windows systems, you can download the GNU grep and find utilities\nfrom the following sites:\n\n   http://gnuwin32.sourceforge.net/packages/grep.htm\n   http://gnuwin32.sourceforge.net/packages/findutils.htm\n\nUsage\n\nThe grep.vim plugin introduces the following Vim commands:\n\n:Grep          - Search for the specified pattern in the specified files\n:GrepAdd       - Same as \":Grep\" but adds the results to the current results\n:Rgrep         - Run recursive grep\n:RgrepAdd      - Same as \":Rgrep\" but adds the results to the current results\n:GrepBuffer    - Search for a pattern on all open buffers\n:GrepBufferAdd - Same as \":GrepBuffer\" but adds the results to the current\n                 results\n:Bgrep         - Same as :GrepBuffer\n:BgrepAdd      - Same as :GrepBufferAdd\n:GrepArgs      - Search for a pattern on all the Vim argument \n                 filenames (:args)\n:GrepArgsAdd   - Same as \":GrepArgs\" but adds the results to the current\n                 results\n:Fgrep         - Run fgrep\n:FgrepAdd      - Same as \":Fgrep\" but adds the results to the current\n                 results\n:Rfgrep        - Run recursive fgrep\n:RfgrepAdd     - Same as \":Rfgrep\" but adds the results to the current\n                 results\n:Egrep         - Run egrep\n:EgrepAdd      - Same as \":Egrep\" but adds the results to the current\n                 results\n:Regrep        - Run recursive egrep\n:RegrepAdd     - Same as \":Regrep\" but adds the results to the current\n                 results\n:Agrep         - Run agrep\n:AgrepAdd      - Same as \":Agrep\" but adds the results to the current\n                 results\n:Ragrep        - Run recursive agrep\n:RagrepAdd     - Same as \":Ragrep\" but adds the results to the current\n                 results\n\nThe above commands can be invoked like this:\n\n   :Grep   [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Rgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Fgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Rfgrep [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Egrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Regrep [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Agrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :Ragrep [<grep_options>] [<search_pattern> [<file_name(s)>]]\n\n   :GrepAdd   [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :RgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :FgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :RfgrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :EgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :RegrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :AgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]\n   :RagrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]\n\n   :GrepBuffer [<grep_options>] [<search_pattern>]\n   :Bgrep [<grep_options>] [<search_pattern>]\n   :GrepArgs [<grep_options>] [<search_pattern>]\n\n   :GrepBufferAdd [<grep_options>] [<search_pattern>]\n   :BgrepAdd [<grep_options>] [<search_pattern>]\n   :GrepArgsAdd [<grep_options>] [<search_pattern>]\n\nIn the above commands, all the arguments are optional.\n\nYou can specify grep options like -i (ignore case) or -w (search for a word)\nto the above commands.  If the <grep_options> are not specified, then the\ndefault grep options specified by the variable Grep_Default_Options is \nused.\n\nYou can specify the grep pattern to search as an argument to the above\ncommands.  If the <search_pattern> is not specified, then you will be\nprompted to enter a search pattern. By default, the keyword under the cursor\nis displayed for the search pattern prompt. You can accept the default or\nmodify it.\n\nThe search pattern is automatically enclosed by the character specified in\nthe Grep_Shell_Quote_Char variable. You should not enclose the search\npattern with a shell escape character.\n\nIf you want to specify a search pattern with space characters or a\nmulti-word pattern, then you should use the Grep command pattern input\nprompt to supply the pattern.\n\nYou can specify one or more file names (or file patterns) to the above\ncommands.  If the <file_names> are not specified, then you will be prompted\nto enter file names.  By default, the pattern specified by the\nGrep_Default_Filelist variable is used. To specify the file name(s) as an\nargument to the above commands, you have to specify the search pattern also.\n\nWhen you enter only the command name, you will be prompted to enter the\nsearch pattern and the files in which to search for the pattern. By default,\nthe keyword under the cursor is displayed for the search pattern prompt.\nDepending on the command, you may prompted for additional parameters like\nthe directories to search for the pattern.\n\nYou can retrieve previously entered values for the Grep prompts using the up\nand down arrow keys. You can cancel the command by pressing the escape key.\nYou can use CTRL-U to erase the default shown for the prompt and CTRL-W to\nerase the previous word in the prompt. For more information about editing\nthe prompt, read ':help cmdline-editing' Vim help topic.\n\nAfter invoking any of the grep commands, you can cancel the command, when\nyou are prompted for a search pattern or file names or a directory by\npressing the <Esc> key. You cannot cancel (or kill) the\ngrep/fgrep/egrep/agrep commands after the external command is invoked.\n\nThe GrepAdd, RgrepAdd and other *Add commands append the search output to\nthe current search output. This is useful if you want to see the search\nresults for multiple patterns at the same time. These commands are available\nonly in Vim version 7.0 and above.\n\nYou can map a key to invoke any of the above commands. For example, the\nfollowing map invokes the :Grep command to search for the keyword under the\ncursor:\n\n      nnoremap <silent> <F3> :Grep<CR>\n\nThe output of the grep command will be listed in the Vim quickfix window.\n1. You can select a line in the quickfix window and press <Enter> or double\n   click on a match to jump to that line.\n2. You can use the \":cnext\" and \":cprev\" commands to the jump to the next or\n   previous output line.\n3. You can use the \":colder\" and \":cnewer\" commands to go between multiple\n   grep quickfix output windows.\n4. The quickfix window need not be opened always to use the grep output.\n   You can close the quickfix window and use the quickfix commands to jump\n   to the grep matches.  Use the \":copen\" command to open the quickfix\n   window again.\n\nFor more information about other quickfix commands read \":help quickfix\"\n\nWhen using GUI Vim, the Tools->Search menu item with a few sub-menu items is\ncreated for few variations of the search command.\n\nConfiguration\n\nBy changing the following variables you can configure the behavior of this\nplugin. Set the following variables in your .vimrc file using the 'let'\ncommand.\n\nThe 'Grep_Path' variable is used to locate the grep utility. By default,\nthis is set to grep. You can change this using the let command:\n\n      :let Grep_Path = 'd:\\tools\\grep.exe'\n\nThe 'Fgrep_Path' variable is used to locate the fgrep utility. By default,\nthis is set to fgrep. You can change this using the let command:\n\n      :let Fgrep_Path = 'd:\\tools\\fgrep.exe'\n\nThe 'Egrep_Path' variable is used to locate the egrep utility. By default,\nthis is set to egrep. You can change this using the let command:\n\n      :let Egrep_Path = 'd:\\tools\\egrep.exe'\n\nThe 'Agrep_Path' variable is used to locate the agrep utility. By default,\nthis is set to agrep. You can change this using the let command:\n\n      :let Agrep_Path = 'd:\\tools\\agrep.exe'\n\nThe 'Grep_Find_Path' variable is used to locate the find utility. By\ndefault, this is set to d:\\tools\\find.exe. You can change this using the let\ncommand:\n\n      :let Grep_Find_Path = 'd:\\tools\\find.exe'\n\nThe 'Grep_Xargs_Path' variable is used to locate the xargs utility. By\ndefault, this is set to xargs. You can change this using the let\ncommand:\n\n      :let Grep_Xargs_Path = 'd:\\tools\\xargs.exe'\n\nWhen running any one of the Grep commands, you will be prompted for the\nfiles in which to search for the pattern. The 'Grep_Default_Filelist'\nvariable is used to specify to default for this prompt. By default, this\nvariable is set to '*'. You can specify multiple matching patterns separated\nby spaces. You can change this settings using the let command:\n\n      :let Grep_Default_Filelist = '*.[chS]'\n      :let Grep_Default_Filelist = '*.c *.cpp *.asm'\n\nThe 'Grep_Default_Options' is used to pass default command line options to\nthe grep/fgrep/egrep/agrep utilities. By default, this is set to an empty\nstring. You can change this using the let command:\n\n      :let Grep_Default_Options = '-i'\n\nThe 'Grep_Skip_Dirs' variable specifies the list of directories to skip\nwhile doing recursive searches. By default, this is set to 'RCS CVS SCCS'.\nYou can change this using the let command:\n\n      :let Grep_Skip_Dirs = 'dir1 dir2 dir3'\n\nThe 'Grep_Skip_Files' variable specifies the list of files to skip while\ndoing recursive searches. By default, this is set to '*~ *,v s.*'. You can\nchange this using the let command:\n\n      :let Grep_Skip_Files = '*.bak *~'\n\nBy default, when you invoke the Grep commands the quickfix window will be\nopened with the grep output.  You can disable opening the quickfix window,\nby setting the 'Grep_OpenQuickfixWindow' variable  to zero:\n\n      :let Grep_OpenQuickfixWindow = 0\n\nYou can manually open the quickfix window using the :cwindow command.\n\nBy default, for recursive searches, the 'find' and 'xargs' utilities are\nused.  If you don't have the 'xargs' utility or don't want to use the\n'xargs' utility, \" then you can set the 'Grep_Find_Use_Xargs' variable to\nzero. If this is set to zero, then only the 'find' utility is used for\nrecursive searches:\n\n      :let Grep_Find_Use_Xargs = 0\n\nTo handle file names with space characters in them, the xargs utility\nis invoked with the '--null' argument. If the xargs utility in your system\ndoesn't accept the '--null' argument, then you can change the\nGrep_Xargs_Options variable. For example, to use the '--print0' xargs\nargument, you can use the following command:\n\n\t:let Grep_Xargs_Options = '--print0'\n\nThe Grep_Cygwin_Find variable should be set to 1, if you are using the find\nutility from the cygwin package. This setting is used to handle the\ndifference between the backslash and forward slash path separators.\n\n      :let Grep_Cygwin_Find = 1\n\nThe 'Grep_Null_Device' variable specifies the name of the null device to\npass to the grep commands. This is needed to force the grep commands to\nprint the name of the file in which a match is found, if only one filename\nis specified. For Unix systems, this is set to /dev/null and for MS-Windows\nsystems, this is set to NUL. You can modify this by using the let command:\n\n      :let Grep_Null_Device = '/dev/null'\n\nThe 'Grep_Shell_Quote_Char' variable specifies the quote character to use\nfor protecting patterns from being interpreted by the shell. For Unix\nsystems, this is set to \"'\" and for MS-Window systems, this is set to an\nempty string.  You can change this using the let command:\n\n      :let Grep_Shell_Quote_Char = \"'\"\n\nThe 'Grep_Shell_Escape_Char' variable specifies the escape character to use\nfor protecting special characters from being interpreted by the shell.  For\nUnix systems, this is set to '&#039 and for MS-Window systems, this is set to\nan empty string.  You can change this using the let command:\n\n      :let Grep_Shell_Escape_Char = \"'\"\n"}, {:name=>"ipsec_conf.vim", :summary=>"Syntax highlighting for FreeS/WAN ipsec.conf", :description=>"Highlights keywords, IP addresses, numbers, and strings in FreeS/WAN's (http://www.freeswan.org/) ipsec.conf configuration file.\n\nSomewhat validating: it flags unknown constructs as errors in red."}, {:name=>"EDIFACT-position-in-a-segment", :summary=>"works out the position of the cursor in an EDIFACT segment", :description=>"i spend quite a lot of time reading, editing, and translating EDIFACT messages.  so i have produced this to help me work out where i am in the file.\n\nthe EDIFACT position dscription\nSG2.PNA.C816.3836\nisnt that helpful without a spec for reference.  the first two parts (segment group 2, segment PNA) are quite clear, but the last two arent very useful.\n\nfor an example segment\nPNA+PAT+NHS_NUM1:OPI+++SU:SURNAME1+FO:FORENAME1A+TI:TITLE1+MI:FORENAME1B+FS:FORENAME1C'\n\nthat is the fragment \"SURNAME1\"\n\nso instead i use numbers for the element and fragment positions, both numbered from zero.  \"PNA\" is element zero, \"PAT\" element one, etc.\n\nusing this function, place your cursor in the \"SURNAME1\" fragment, and it will return the info:\nelement = 5 , fragment = 1\n\nwhen using this, make sure that every segment starts on a new line in your file (search for ' and replace with '\\r will do this nicely).  trying to read EDIFACT when it is all one line is just to painful, so i dont recorment it.\n\nthis function has the seperators \"+\" and \":\" hard coded at the moment, and doesnt handle escaped seperators."}, {:name=>"tomatosoup.vim", :summary=>"A humorous colorscheme based on tomato soup and grilled cheese sandwiches!", :description=>"Download this, look at it, go make some tomato soup and grilled cheese sandwiches and enjoy them.  Then when you are done eating, use a serious colorscheme.  You could possibly set some useful commands to change the colorscheme to tomatosoup.vim around lunch and dinner time.  :)  Have fun, and happy vimming!"}, {:name=>"xchat-log-syntax", :summary=>"a syntax file for xchat log files", :description=>"this is a syntax file for xchat log files so those that look at them alot\ncan read them easier than pure flat uncolored text\n\nthe syntax is setup just like what xchat outputs minus the colored nicks option\ni hope to add that sometime but it could be a while if at all\n"}, {:name=>"broadcast.vim", :summary=>"Send keystrokes to all VIM windows", :description=>"This plugin lets you broadcast to all GVIM windows (or all other windows except current).  Especially handy for someone who prefers to open each file in a separate window instead of a separate buffer.  Lots of things possible, for example:\n\nGlobally replace text across all GVIM windows:\n   :Bcast :%s/oldtext/newtext/g<CR>\n\nExit all other opened GVIM windows:\n   :Bcast0 :q<CR>\n"}, {:name=>"vera.vim", :summary=>"Syntax file for the Vera language", :description=>"This is a vera.vim syntax file.  It\nhas been updated to reflect Vera 5.0.\nDeprecated tasks in the language are\nnow linked to \"Error\" in order to\nhighlight them in the code."}, {:name=>"f.vim", :summary=>"Function that shows lines that do contain a given regexp. The rest is folded.", :description=>":call F()\nThis function lets you see all the lines in a file\nthat contain a given regular-expression.\n\nThe remaining lines are folded with the manual method,\nand can be opened to see some 'nearby' line.\n\nIf no regular expression is specified, the last regular expression\nspecified for search is utilized.\n\nThe idea comes from the mainframe ISPF editor.\n\nAfter you get your folds, you can give commands affecting only the folded lines\nusing:\n\n:folddoclosed\n\nor use:\n\n:folddoopen\n\nto operate only on the visible lines.\n\nzo   to open a fold a bit\nzozj to open a fold a bit and leave the cursor on the fold line\nzO   to open a fold completely \nzE   to open all folds\n\nzf{motion} to close folders 'a bit more' (or to create folders)\nIf you have 2 adjacent folders, zf<ENTER> will 'merge' them.\nIn the same way a visible line can be 'added' to a nearby folder.\n\n:call FA()\nThis function is similar to F() above, except instead of typing in\na regular expression, the current word the cursor is over is used as\nthe regular expression.\n\nThe function FA() has been prepared and added by:\nKen Huisman - ken.huisman@gmail.com\n\nSuggested mappings:\n:map <F5> :call F()<CR>\n:map <F6> :normal zozj<CR>\n\n:<Up> to recall the macro after having executed it once\n\nediting the \"f.vim\" file itself:\n\ntry giving as an expression  nfold\ntry giving as an expression  as\ntry giving as an expression   as     [that is: ' as' ]\ntry giving as an expression  let\ntry giving as an expression  ^\":\ntry giving as an expression  :fun\\|:endf\ntry giving as an expression  :endf\ntry giving as an expression  ^:endf\n\nfor remarks, complaints, etc. write to: azc100@gmail.com\nversion 05042001"}, {:name=>"highlightline.vim", :summary=>"This script allows you to highlight lines.", :description=>"This is a highlight current line script.\n\npress F2 to highlight the current line\npress F2 again to unhighlight the current highlighted line"}, {:name=>"hungarian_to_english", :summary=>"Strips Hungarian notation from C and C++ identifiers.", :description=>"A function to strip Hungarian decorations from C and C++ \nidentifier names.  In some cases, this can make code \neasier to read.  It might also change how your program \nruns or make it not compile, so use with caution!\n"}, {:name=>"Buffer-Search", :summary=>"Different search patterns across Multiple Windows.", :description=>"This plugin lets your search pattern be specific to \nthat buffer. This is especially handy when one \nworks with multiple windows and wants different\nsearch pattern highlighted in different windows.\n\nNormally  if you do :/abc in one window, all other\nwindows will also highlight \"abc\".\nNow by using this plugin you can do\n:Bs abc    which will highlight \"abc\" only in that\nwindow.  Likewise you can have multiple search\npattern highlighted in different windows.\n\nSide Effects: This plugin will unset hlsearch option\n\n-ncr"}, {:name=>"srecord.vim", :summary=>"Syntax highlights S-Record files.", :description=>"Syntax highlights S-Record files."}, {:name=>"reformat.vim", :summary=>"Reformat paragraphs according to file type", :description=>"This script defines the common <C-J> key binding to reformat paragraphs, but also takes cares of properly reformatting paragraphs having no blank lines around them, but delimited by specific markup like <p> ... </p>, <para> ... </para>, /* ... */ or any other constructs: it can be easily extended for about any syntax."}, {:name=>"multivim", :summary=>"Integrate multiple vim windows", :description=>"Based on bcbuf.vim (vimscript #201), this script allows the user to open a new vim window from within vim, and manage the buffers in all open vim sessions (windows) in a centralized manner. One can:\n\n\n\n\n\n\n\n\n\n0. Open a new vim window from within vim by the command \":nf\"\n\n\n\n\n\n\n\n\n\n1. Yank and Put across multiple sessions using the usual mappings.\n\n\n\n\n\n\n\n\n\n2. Edit a file, first in one session, then in another, using :edit, :split, :vsplit, etc.\n\n\n\n\n\n\n\n\n\n3. Look at all buffers in all sessions using :files, :buffers, etc.\n\n\n\n\n\n\n\n\n\n4. Push a command from one session's history and pop it in another.\n\n\n\n\n\n\n\n\n\nFor more details look at the comments at the start of the script. "}, {:name=>"JavaImp.vim--Lee", :summary=>"Insert and sort Java import statements, view JavaDoc from class name, and more.", :description=>"This script can generate a Java class name to package mapping file from multiple source paths.  Once you have create the mapping file,  you can use this file to insert import statements in your .java file using a simple key mapping.  It can also sort your imports too!  \n\nJavaImp can also be integrated with JavaDoc, where you can lookup APIs very quickly by just hitting a hot key on a class name.  This script can save the time you spent looking up docs and typing in routine import package names.  Give it a try!"}, {:name=>"PHPcollection", :summary=>"PHP Collection contains: compiler, ftplugin, script for K key, dicts", :description=>"PHP Collection contains 3 files and 2 links:\ncompiler, ftplugin, script for use with 'keywordprg' and PHP\nmanual, links to vim dictionaries of PHP functions and prototypes.\n\nI. PHP compiler (cphp.vim)\nRequirements:\n1. PHP compiled as cgi\n2. bash\n3. grep compatible tool :help grep\n4. standard message error from PHP (it doesn't use debugger) :help\ncompiler\nHelp:\n:make <file_name> <QUERY_STRING>\n\nII. PHP ftplugin (php.vim)\nInspired by Christopher Swingley I add some things and put it in\nftplugin file.\nFirst part is ``objective'' and contains only important(?) settings. In\nsecond are some useful options commented by default.\n\nIII. Bash script for 'keywordprg' option. (phpmanual.sh)\nWritten by Leszek Krupinski <leszek@php.net> for use with K.\nDefault settings points to lynx and directory where Mkd8.2 puts\nphp-manual rpm.\n\nIV. Links. Both dictionaries where created by Leszek Krupinski\nDictionary of PHP functions:\nhttp://www.leon.w-wa.pl/texts/phpfunclist\nDictionary of PHP prototypes:\nhttp://www.leon.w-wa.pl/texts/phpproto\n\nThanks for Doug Kearns, Leszek Krupinski and Christopher Swingley\n\nAll faults are only mine.\n\nMikolaj Machowski\n<mikmach@wp.pl>\n"}, {:name=>"JHTML-syntax-file", :summary=>"Syntax file for ATG Dynamo's jhtml markup.", :description=>"Syntax file for the jhtml markup language created by ATG for their Java-based Dynamo Application Server. "}, {:name=>"Nightshimmer", :summary=>"a darkblue scheme with shimmering colors", :description=>"This is a calm, soothing color scheme for silent nights and other magic moments. It reminds me a little of Monkey Island, or of Sandman. Or of something I've found in a dream.\n\nHere's a screenshot: http://protean.freezope.org/pub/files/vim/screenshots/nightshimmer-01.png\n\nI hope you like it!\n"}, {:name=>"cfengine-syntax-file", :summary=>"Syntax file for cfengine configuration files", :description=>"See http://www.cfengine.org for more information about cfengine"}, {:name=>"code2html", :summary=>"Generate HTML or XHTML+CSS from a Vim buffer using the syntax-hili colorscheme", :description=>"WHAT:\nThis is a substantially modified rewrite of the \"2html.vim\" script that's found in the Vim runtime \"syntax\" directory, and used exactly as that file is used (i.e.): \n\n  :so[urce] ~/scripts/code2html.vim\n\nRECENT:\n24 Sep 2008 - ATTENTION PLEASE! There will be no more revisions to this script under *this* name.  Because there is a collision between the name \"code2html[.vim]\" and another F/LOSS software project by that name, I am renaming this script to \"buf2html[.vim]\".  THE NEW SCRIPT IS LOCATED AT http://www.vim.org/scripts/script.php?script_id=2384.\n\nWHO:\nBased on work by Bram Moolenaar and David Nečas (\"Yeti\"), now maintained by Soren Andersen.  Past contributions by Christian Hujer.       \n\nWHY:\nThe main thing this module changes is the automatic addition of some simple css code to specify the fixed-width (monospace) font you want the HTML-ized syntax-colored code to be rendered in -- IF any of those fonts are findable by the reader's WWW browser. This provides an HTML rendering in modern browsers that can surprisingly closely replicate the appearance in the GVIM editor.\n\nINSTALL:\nSave this vim file to a directory convenient for you. Do *not* place it in a runtime plugin directory; you do not want it to be evaluated when opening any file for editing.  This is a script but not a plugin.  The author tends to have a ~/scripts dir on his accounts, and places this file there, alongside awk, sed, perl and other such script/programs.\n\nFEATURES:\nThe code will find out what \"guifont\" value the user is using, and convert that specification (usually set in \".gvimrc\") to a css font spec. There are also changes to output an up-to-date xml -type header (DTD) by Christian Hujer.\n\nIt will also create a \"<DIV>\" section containing the main \"<PRE>\" block. To understand why this is good, running a test example shows better than a thousand words. It allows specification of the font in css, as well as some other things, like padding of the contents of the \"<PRE>\" and some differing bgcolor for the document as a whole vs the \"code\" content. This is all primarily a matter of personal preference of course.\n\nExamples of source highlighted with this script can be found at my home page at http://intrepid.perlmonk.org\n\nIf you view the output of this script -- run on your GVIM on one of your own source code documents, and viewed in a competent css-supporting browser -- you may find that the document looks so identical to your GVIM display that you'll be tempted to start sending vim commands to your browser ;-). \n\nUPDATE: 22 Oct 2002\nIn a little while a new version will be uploaded (presently I am having Christian check our merged changes before we commit to releasing this major update).\n  * Made output of DTD not dependant on whether user has html_use_css=1.\n  * Made significant changes to program flow, fixed a problem with output of the style definitions in the header STYLE block.\n  * Added several new variables that the user can set to change the behavior of the script.\n\nAll in all, the program is more robust, outputs more correct (according to latest W3C standards) HTML, script has more configurability, and the output is prettier (as source).\n\nUPDATE: Aug 08 2002 20:32:28 EDT\nSorry -- did not have time right now to properly document ALL the changes in v1.1, but these include:\n  * fixed the stupid \".main_code\" bug (should have written to the head style block \"#main-code\" instead of \".main-code\"). aargh.\n  * added a new function to create the CSS font specifier, it is doing a much better job than the previous code\n  * the output is much more cosmetically proper.\nThank you very much to all the people who downloaded version 1.0. Please give the update a try -- it is much improved.\n"}, {:name=>"prt_hdr", :summary=>"Alternate page header printing when PostScript printing.", :description=>"These files enable you to have page headers printed differently. Styles available include underlined, gray background, and in a box.\n\nTo select the style you want you will need to edit the file and comment out 1 line and uncomment another. See comments in the file (lines beginning with %).  There is no control from within VIM short of editing this file.\n\nThis file will only work if you are printing headers (i.e. header in printoptions has a value of 1 or more) and that the header fits on a single line. Otherwise the header style will be applied to the first line of text on each page."}, {:name=>"cream-progressbar", :summary=>"draw a progress bar in the command line", :description=>"\nA function that, when called, draws a progress bar in the command line:\n\n    Loading file... [####################             ] 65%\n\nDisplays and allows options to:\n  1. Display the progress through RPM-like characters\n  2. Display an initial description string\n  3. Allows selection of the character used for the bar\n  4. Optionally, allows any bar length (default is window width)\n\nJust use a call such as:\n  call ProgressBar( 65, \"Loading file...\", \"#\", 0 )\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software. \n\n"}, {:name=>"QuickAscii", :summary=>"Quick adding of characters not on your keyboard.", :description=>"Yet another ASCII table plugin :). I often need to insert some high-ASCII character that my keymap doesn't allow to write and none of the *ASCII plugins I saw was so easy and quick to use, so I wrote my own. It's my first plugin for VIM and I welcome any bug reports, ideas and suggestions.\n\nSince version 2.0 it has ability to use any number of intervals to display and  to use any file for character input. UTF8 is supported as well."}, {:name=>"bw.vim", :summary=>"Black and White cterm color scheme", :description=>"This color scheme mimics vim's default behavior on a non-color terminal (like vt100), in a color terminal (like xterm, rxvt, etc.) Great for if you have a complex colorful background image and transparent terminals.\n\nScreenshot: http://hans.fugal.net/vim/colors/bw.vim.html"}, {:name=>"lh-cpp-ftplugins", :summary=>"C++ (and C) ftplugins", :description=>"This package contains several ftplugins addressed at the edition of \nC and C++ files. I think the C ftplugin <c_set.vim> could be used \nwith other type of files like Java, C#, etc.\n\nFor a complete and quite extensive description of what is contained, \nyou can take a look at my web site :\n    http://hermitte.free.fr/vim/c.php\nand http://hermitte.free.fr/vim/ressources/vimfiles/ftplugin/c/doc/lh-cpp-readme.txt\n\nShortly, the C control statements ('if', 'else', 'elif', 'switch', 'while', 'for') are expanded as they are typed, with respect of the context: i.e. they are not expanded within string or comment contexts. So, there is no need of having obscure keybindings to expands them.\nIn Visual (/normal) mode, we can hit ',if', ',for' (',' beeing the localleader), etc to insert the control statement around the current visual selection (/line).\nIf the bracketing system I propose is installed, markers (<< and >>) will be inserted. This can be very disturbing when one is not used to this addicting little feature -> \"vim foo.cpp ;; :help lh-cpp-first-steps\". Give it a try!\n\nRegarding the C++ part, there are some other statements (like 'try', 'catch') supported in the same way.\n\n\nMore important, there are several commands (and indirectly functions) aimed at inserting C++ lines of code and comments. The two most interresting are certainly:\n(*) ;AA that will guide you all along the insertion of class attributes (member data) and their accessors and mutators (getters and setters).\n(*) ;GI that will split-open the implementation file (.cpp) and jump to the implementation of the current function-prototype under the cursor. If there is no implementation for this function, a default one will be provided on the fly.\nThe main ideas regarding this facility come from Leif Wickland and Robert KellyIV ;  check vimtip#335\n\nIn the archive, you will also find some other ftplugins (of interrest for C and C++ programming, like a folding plugin for C&C++, ...) that come from here (vim.sf.net), and many plugins *needed* by the ftplugins -- actually some are only recommended or useful.\n\nIn the plugins, there is for instance a late customisation of Gergely Kontra's mu-template for C and C++ programming.\n\nFeedback welcome.\nPS: a more up-to-date version may be available on my web site.\nPPS: a changelog is available here: http://hermitte.free.fr/vim/ressources/vimfiles/ftplugin/cpp/changelog"}, {:name=>"vtags", :summary=>"tags file generator", :description=>"VTags is a tags file generator, written entirely in Vim.\n\nIt currently supports only the PHP and Vim languages, but adding a new\nlanguage should be trivial. \n\nThe speed is not one of the best around yet, but I'm working on this.\n\nThis one being the first release, it's quite in alpha stage. The\nlanguage definitions are experimental, to verify that the parsing engine\nworks. The parser only works on full lines, so if a line contains more,\nsay, function definitions, only the first one will be taken. I will be\nworking on supporting multiple definitions in one line, but _after_\nI get the speed fixed :)\nIt's the first unstable slow alpha testing thing. Be kind with me ;)\n\nAny feedback would be very much appreciated.\n\nRequires: vimscript #338 (vtags_def)"}, {:name=>"vtags_def", :summary=>"vtags language definitions", :description=>"VTags language definitions script.\nGet vtags.vim and this script.\n\nThis script does not do anything on it's own.\nRequired by: vimscript #337 (vtags)"}, {:name=>"ASP-maps", :summary=>"Maps to facilitate coding in ASP", :description=>"Based intially on Gavin Sinclair's Java script (vimscript #266), these are mappings to facilitate coding in VBScript ASP.\n\nExamples of use:\n\nTo get:\n<%\nResponse.Write \"SomeText\"\n%>\nIn insert mode you type:\n,%,r,wSomeText\n\nTo get:\nIf Trim(Request.QueryString(\"option\")) then\nEnd If\nIn insert mode you type:\n:i<Ctrl+f>t,R,qoption\n\nYou have:\nstrOption = Request(\"option\")\nAnd you want:\nstrOption = Trim(Request(\"option\"))\nYou mark Request(\"option\") in visual mode and press <Ctrl+f>t\n\n\n\nI will be adding more soon."}, {:name=>"tforge.vim", :summary=>"Text::Forge syntax file", :description=>"This is the syntax file for Text::Forge templates. See http://text-forge.sf.net/ for more info on what Text::Forge is. This depends on a good html and perl syntax file, which comes with the default vim distribution."}, {:name=>"pf.vim", :summary=>"OpenBSD pf.conf (packet filter configuration)", :description=>"Syntax file for OpenBSD's packet-filter (pf) configuration file: pf.conf.\n\nPreview \"screenshot\" here: http://www.sentia.org/downloads/pf.conf.html\n"}, {:name=>"sand", :summary=>"Light sand-like background color scheme with miscellaneous dark grains", :description=>"GUI only colorscheme.\nI created it some time ago when I found no light colorscheme that I like at vim.sf.net\nNow there are some, but I still like this one. So I decided to put it here.\n\nLook at http://sunsite.cs.msu.su/~tim/vim/index.html It shows this scheme in work :) \nThis page was generated with syntax/2html.vim script."}, {:name=>"fstab-syntax", :summary=>"fstab syntax", :description=>"fstab syntax highlighting\nLatest version: http://ld.yi.org/vim/fstab.vim\n\nFeatures:\n- You can place let fstab_unknown_fs_errors = 0 in your .vimrc to instruct the highlighter to not show unknown filesystems as errors"}, {:name=>"MqlMenu.vim", :summary=>"menus for eMatrix users", :description=>"Creates a menu of Matrix mql commands\nMatrix is a Product Data Management system from MatrixOne http://www.matrixone.com \nIt has an SQL-like command language called mql . \nWhen you run the menu items, it runs/imports/etc with mql using the current file as input\n"}, {:name=>"lcscheck.vim", :summary=>"check 'listchars' for valid eol byte for utf-8. (Not needed for Vim 6.2)", :description=>"Under utf-8, characters 128 and over become multi-byte. Therefore, under  Vim 6.1 or earlier, they should not be used for the option values in 'listchars'. This script takes care of the \"eol:\" sub-option, the only one which gave me problems. If you use characters >= 128 for other sub-options, similar scripts can easily be written (based on this one) to take care of them.\n\nThis script has intentionally been abundantly commented to make it understandable.\n\nSee vimtip#246 for a related tip."}, {:name=>"php.vim", :summary=>"Indent for php", :description=>"This was the original vim php indent file written in 2002 and included in Vim 6.X releases.\n\nIndents after <?php tag, <? tag (optional), ( )or { }.  The script can also format switch/case statements and more recently will automatically format /* comment sections */\n\nIt likes the following format:\n<pre>\n    if($something)\n    {\n         dothis();\n    }\n</pre>\nIt was not designed to and will not handle if blocks etc. without braces and also does not format html.  Please use braces and separate display logic for more readable code.\n"}, {:name=>"textlink.vim", :summary=>"Another way to hyperlink plain text files. |FileName|@|SearchString| notation...", :description=>"This is (yet?) another way to implement hypertext styling linking in plain text files (a.k.a. source code).\n\nThe notation is extremely simple and easy to type (and comprehend at a glance): |FileName|@|SearchString| (even easier to understand at a glance with highlighting: see the Colors section of textlink.vim for details)\n\nThe format of a textlink is | filename to load_fullpath |@| text to search for |\n\n\nBasically this is just :split FileName, gg, /SearchString. (ok very basically). You can omit loading of the file or searching for the SearchString if you like via the provided commands. You may also :vsplit if you like.\n\n\nCOMMANDS:\n:TTL\n    Mnemonic: test text link\n    Test text link. (echos the found FileName and SearchString)\n\n:TL\n    Mnemonic: text link\n    :split, :edit FileName, gg, /SearchString (basically). This is to say splits the current window and loads the specified file name then searches for the specified SearchString from the top of the file.\n\n:TLF\n    Mnemonic: text link file\n    Like :TL save ignores the SearchString... basically a short cut to :split and gf\n\n:TLS\n    Mnemonic: text link string (or search)\n    Like :TL save ignores the FileName... useful when FileName is |T|\n    (this file) and you do not want to split the window.\n\n\n:TTL\n    Mnemonic: test text link\n    Test text link. (echos the found FileName and SearchString)\n\n:VTL\n:VTLF\n:VTLS\n    Same as the above commands save :vsplit vs :split.\n\n\nEXAMPLES:\n|T|@|Examples:|\n    This will search for 'Examples:' in this file (T for this). useful with either :TL or :TLS\n\n|A|@|Examples:|\n    This will search for 'Examples:' in the AlternateFile (A for alternate) from a.vim, see NOTE below. ? Wonderful for leaving notes about a function in a header file for instance.\n\n|$VIM/vimfiles/plugin/textlink.vim|@|\" Examples:|\n    Environmental variables are expanded in the FileName portion, thanks to VIM :) In fact any(?) valid vim filename will work for FileName, I believe.\n\nSee: |~\\cvs.html|@|if(somenum < 25 || somenum > 15)|, pretty cool eh?\n    Although there can only be a single TextLink on any given line, it can appear anywhere in that line. (this is due to the greedy matching of the searchstring bars... to allow such a search string as this example..\n\n\nNOTE\nPlease see the comments in the file for more information and stuffs.\n\nAlso this can (and is setup to) use a.vim by Mike Sharpe (http://vim.sourceforge.net/scripts/script.php?script_id=31)\n\nThis works well enough to use everyday (I do) however there are probably a few quirks in it yet. (we all know how that goes ;) )\n\nI hope this is as useful to you as it is to me :)\n\n\nAlso of note (text hyperlinking) see  Stefan Bittner's http://vim.sourceforge.net/scripts/script.php?script_id=293\n\n\nHappy VIMing!\n\nRemoved buggy/broken versions below, as there was no reason to use them (they were buggy!). I believe 1.32 is (finaly stable, sorry for all the bugs in the first place!)"}, {:name=>"White-Dust", :summary=>"A light color scheme for GUI", :description=>"A light color scheme for GUI"}, {:name=>"ruby.vim", :summary=>"Ruby language compiler plugin", :description=>"NB: The ruby compiler plugin is now part of the vim-ruby project at rubyforge.org.  Please visit the vim-ruby project page for the latest information about this plugin and the vim-ruby project.  This page no longer contains the most recent version of the plugin.\n\nhttp://vim-ruby.rubyforge.org\nhttp://rubyforge.org\n\nThis is a compiler plugin for the Ruby language.  Not terribly glamorous, but it does take advantage of multi-line errorformats, and it's a little more graceful than the errorformats I've seen so far."}, {:name=>"Highlight-UnMatched-Brackets", :summary=>"Capture those unmatched brackets while u r still in insert-mode", :description=>"Its really irksome when your compiler\ncomplains for any unmatched \"{\" or \"(\" or \"[\".\nWith this plugin you can highlight all\nthose unmatched \"{\" or \"(\"  or  \"[\" as you type.\nThis helps you to keep track of where\nthe exact closing bracket should come.\n\nThis plugin also warns you of any extra \"}\" or \")\" or \"]\" you typed.\n\nCustomization:   \n\t\t   - Specifying Additional Bracket-pairs.\n         \t\t   \t  User can specify additional matching pairs in\n                     the global option 'matchpairs', see :help 'matchpairs'\n                     For eg: set mps+=<:> (to include <> pair)\n                     put the above setting in .vimrc file and restart vim.\n                  - To get rid of highlighting when you quit insert\n                     mode, add this mapping in your vimrc\n                           noremap! <Esc> <Esc>:match NONE<CR>\n\nTo test how this plugin works type something like\n{\n  (     ) [ ]\n  ( ( ( ) ) )\n}\n\nHappy vimming.\n\n-ncr"}, {:name=>"localColorSchemes.vim", :summary=>"Local color schemes", :description=>"This allows the use of buffer-specific color schemes.  Every time one moves from one buffer to another, the color scheme will change to the specified one; setting the variable b:colorscheme inside an ftplugin will allow for all files of a particular type to have that scheme (such as morning for vim files, peachpuff for Java files etc.).\n\nTo use, there are three mappings, all starting with <Leader>:  sl prompts and sets a local color scheme, sg does the same for a global color scheme and rl removes any locally set color schemes.  There is also a convenience command called Colorscheme which behaves just like the regular colorscheme command (except for the command-line completion); it also modifies the global colorscheme name.\n\nI have placed the value of the colorscheme names my 'statusline' option so I can tell which colors are being used -- and I stick either a g: or b: before the name so I know if it's a local or global setting.  (Hint:  use a non <SID> version of GetVar -- included within).\n\nThe only problem I know of is that syntax settings set by plugins (such as the excellent ShowMarks) get reset every time a color scheme is changed (since they start with a syntax clear)."}, {:name=>"multipleRanges.vim", :summary=>"Selecting different ranges of lines", :description=>"This script lets you choose multiple non-consecutive ranges and then execute commands on them all at the same time.  Just visually select a range of lines and hit the mapping sequence.  Repeat until all the ranges have been selected (they will be highlighted).  Then, execute the script-defined command Rangecommand with the actual command (and arguments) as arguments to Rangecommand and it'll do it.  The ranges will remain selected until you execute the reset mapping allowing you to execute more commands on the ranges.\n\nNOTE:  VERSION 1.2 AND ABOVE DEPEND ON MY getVar.vim vimscript#353 AND variableSort.vim vimscript#354.  Sorry I neglected to mention that before."}, {:name=>"getVar.vim", :summary=>"Convenient retrieval of buffer or global script options.", :description=>"This is just two convenience functions that are useful for retrieval of plugin options that can be set globally as well as having buffer-specific over-rides.\n\nExample:  I have a global variable called \"g:sortOrder\" which is set to \"a\".  In the test.java buffer, I create a buffer variable called \"b:sortOrder\" which is set to \"d\".  Now, GetVar( \"sortOrder\" ) will return \"d\" when I'm in test.java and \"a\" everywhere else.  My plugin code doesn't need to actually check for buffer or global variables; I can just call GetVar and be done with it.\n\nWhy is this useful?  It mimics the behaviour of options.  For example, :set grepprg? will return the value of 'grepprg'; if a local version has been set (:setlocal grepprg=<something>), it will quietly return that.  Otherwise, it will return the global value.  GetVar allows the same behaviour for variables.\n\nGetVar will take an optional second parameter which will be the default value to return if neither a buffer nor a global variable by the specified name is found (the default default :) is -1).\n\nExample:  GetVar( \"userID\", \"NONE\" ) will take either a userID or the string \"NONE\" if there isn't one.  This can be useful where a script should just use an assumed default if the user hasn't specified an override (global or otherwise).\n\nVarExists simply returns true if any of the scopes used by GetVar exist (in the same order of checking as GetVar)."}, {:name=>"variableSort.vim", :summary=>"Function to sort a simulated array variable set.", :description=>"This is  a sorting function which  takes the name of  an array-like variable\nwhich ends  in numerical  subscripts along  the lines  of var0,  var1, var2.\nThese can be created quite easily with the var{i} notation of Vim 6.\n\nOther parameters are the starting  and ending subscripts (inclusive) and the\ndirection of the sort (1 or 'a' for ascending, otherwise descending).\n\nThe array is sorted in place; there is no return value from the function.\n\nOptional  argument  is the  name  of  a swap  function  that  takes the  two\nsubscripts  and  swaps the  variable  (there  is  one provided  that  should\nactually be good enough for most  cases; however, if something special needs\nto be  done for the swap  -- such as  multiple records, then this  should be\nused.  In this  case, it  is  assumed the  swap function  already knows  the\nvariables it's going to swap and thus aren't passed in.)\n\nSample custom swap function:\nfunction! MultipleRangeSwap( sub1, sub2 )\n  let temp = b:rangeS{a:sub1}\n  let b:rangeS{a:sub1} = b:rangeS{a:sub2}\n  let b:rangeS{a:sub2} = temp\n\n  let temp = b:rangeE{a:sub1}\n  let b:rangeE{a:sub1} = b:rangeE{a:sub2}\n  let b:rangeE{a:sub2} = temp\nendfunction\n\nSample call:\ncall SortArray( \"b:rangeS\", 0, b:numRanges - 1, 1, \"MultipleRangeSwap\" )\n\nThis will perform an ascending sort  on a variable sequence named b:rangeS0,\nb:rangeS1 etc.,  using the MultipleRangeSwap  function for the  actual swap.\nThis function  was needed here  because two  variables needed to  be swapped\ntogether  even though  only  one was  used  in the  sort.  The default  swap\nwould've only swapped b:rangeS variables, leaving the b:rangeE variables out\nof sync."}, {:name=>"vimrc_nopik", :summary=>"Customized vimrc by Nopik", :description=>"After quite long usage of vim I&#039ve got quite useful vimrc file. Its newest version can be found at http://www.nopik.of.pl\nRight now it uses all of function keys for easy buffer browsing and compilation (it is tailored for C/C++). There is also few other nice features and keybindings."}, {:name=>"dbext.vim", :summary=>"Provides database access to many dbms (Oracle, Sybase, Microsoft, MySQL, DBI,..)", :description=>"This plugin contains functions/mappings/commands to enable Vim to access several databases. Current databases supported are: Mysql, PostgreSQL, Ingres, Oracle, Oracle Rdb (VMS), Sybase Adaptive Server Anywhere, Sybase Adaptive Server Enterprise, Microsoft SQL Server, DB2, Interbase and SQLite and ODBC are supported.  New to version 5.x of dbext introduces the support for Perl's DBI layer.  If the database you are using is not *natively* supported by dbext, but has a DBI interface, dbext's standard feature set is available.  For those already using dbext, the DBI interface should provide a performance boost when running statements against your database.  DBI also provides an ODBC bridge, therefore any ODBC compliant database is also accessible.\n\nNOTE: As of version 4.0 this plugin requires Vim 7.\nVersion 5.0 supports Vim 7's autoload feature.\n\ndbext provides a common interface between your editor and a database.  If your company/project moves onto a new database platform, there is no need to learn the new databases tools.  While editing your SQL (and without leaving Vim) you can execute database commands, run queries, display results, and view database objects.  dbext understands various programming languages, and can parse and prompt the user for [host] variables and execute the resulting statement.  See below for more details.\n\nAdds a menu for the common commands for gvim users.\n\nSome of the features that are supported:\n\nTutorial\n-----------\nA tutorial has been added to help you become familiar with the features of the plugin, :h dbext-tutorial.\nIf you dislike reading docs, then at a minimum follow the tutorial.  It will give you the basics of the features and introduce some \"best\" practices, like creating connection profiles.\n\nConnection Profiles\n-----------------------------\nYou can create as many profiles as you like in your vimrc.  Each profile specifies various connection information.  Each buffer can be connected to a different database.   The plugin will automatically prompt the user for connection information.  If you have defined profiles in your vimrc, for ease of use,  you can choose from a numbered list.\n\nSQL History\n-----------\nAs of version 3.0, dbext maintains a history file which is shared between multiple instances of Vim.  A statement added in one instance of Vim will be immediately available in a different instance of Vim on the same computer.  To re-run a statement you can either press <enter> on the line, or if you prefer the mouse you can double click on the statement.\n\nModeline Support\n---------------------------\nSimilar to Vim modelines, you can specify connection information as comments within your buffers.  To prevent sensitive information (i.e. passwords) from being visible, you can specify a connection profile as part of your modeline.  \n\nObject Completion\n----------------------------\ndbext ties into Vim dictionary feature.  You can complete table names, procedure names and view names using the i_CTRL-X_CTRL-K feature.\n\nViewing Lists of Objects\n------------------------------------\nYou can browse through the various objects in the database you are connected to and specify wildcard information.  For example you can say, \"Show me all tables beginning with 'ml_' \".  These objects are currently supported: Tables, Procedures, Views,  Columns (for a table).\n\nResult Buffer\n-------------------\nThe output from any of the commands is placed into a new buffer called Result.  In the event of an error, both the error and the command line is included for inspection.\n\nMappings\n----------------\nThere are many maps created for convenience.  They exist for most modes (command, visual and insert).\n\nPlace the cursor on a word, and invoke the default mapping (or menu) and a Result buffer will open with the contents of the table displayed (i.e. select * from <word>.  Optionally you can be prompted for the table name, and a WHERE clause.\n\nDescribe a table (see column names and datatypes).\n\nDescribe a stored procedure (see input and output datatypes).\n\nVisually highlight statements and execute them against the database.\n\nParsing Statements\n-----------------------------\nBy default any statement will be parsed looking for input parameters (host variables), if any are found you are prompted to enter a suitable value for the parameter.  This option can be turned off either globally or on a per\nbuffer basis.\n        SELECT first_name, city\n          FROM customer\n         WHERE last_name    = @name\nIn the case you will be asked for a value for @name.  The rules for defining input parameters are customizable either globally or on a per buffer basis. See help file for more details.\n\nFileType Support\n--------------------------\nSQL can be used from a variety of languages.  Each development language (PHP, Perl, Java, ...) language has different syntax for creating SQL statements that are sent to the database.  dbext has support for several\ndifferent filetypes, so that it can understand and correctly parse a SQL statement.\n\nThe current supported languages are:\n        PHP, Java, JSP, JavaScript, JProperties, Perl, SQL, Vim\n\nFor example assume you had the following Java code:\nString mySQL = \n    \"SELECT s.script, ts.event, t.name                  \" +\n    \"     , s.script_language, sv.name                  \" +\n    \"  FROM ml_script s, ml_table_script ts, ml_table t \" +\n                \"     , ml_script_version sv                        \" +\n    \" WHERE s.script_id   = \" + script_version +\n    \"   AND ts.version_id = \"+obj.method() +\n    \"   AND ts.table_id   = t.table_id                  \";\n\nIf you visually select from the \"SELECT ... to the \"; and ran \n :'<,'>DBExecSQL    (or used the default map <Leader>se)\n\nThe Java filetype support would concatenate each individual string into one\nsingle string.  In this case it removed the \" + \" and concatenated  the\nlines to result in the following (assuming this is on one line): \n       SELECT s.script, ts.event, t.name , s.script_language, sv.name\n       FROM ml_script s, ml_table_script ts, ml_table t \n                  , ml_script_version sv\n      WHERE s.script_id   = \" + script_version + \"\n        AND ts.version_id = \"+obj.method() +\"\n        AND ts.table_id   = t.table_id \n\nNext, it will prompt you for replacement values for the various variables or  objects you used in the string.\nAssuming you had the default behaviour turned on, you would be prompted  to supply a value for: \n                \" + script_version + \"\n                \"+obj.method() +\"\n\nSo assuming you entered: \n                100\n                'Project_Yahoo'\n\nThen the resulting string sent to your database would be (again, this would technically be on one line): \n       SELECT s.script, ts.event, t.name , s.script_language, sv.name\n       FROM ml_script s, ml_table_script ts, ml_table t \n                  , ml_script_version sv\n      WHERE s.script_id   = 100\n        AND ts.version_id = 'Project_Yahoo'\n        AND ts.table_id   = t.table_id \n\nBenefit:  \nYou did not have to test your SQL by cutting and pasting it into a separate tool and replacing all the object and host variables yourself.  Just by visually selecting the string and running the command DBExecSQL (or the default mapping <Leader>se) the SQL statement was executed against the database and allowed to you enter host variables.\n\nAdditional Commands\n---------------------------------\nDBExecSQL - Enter any command you want sent to the database\nDBExecRangeSQL - Enter any range of statements you want executed\nSelect  - Enter the remainder of a select (ie :Select * from customer)\nCall  - Call a stored procedure\nUpdate  - Enter the remainder of an update\nInsert  - Enter the remainder of an insert\nDelete  - Enter the remainder of an delete\nDrop    - Enter the remainder of a drop\nAlter   - Enter the remainder of an alter\nCreate  - Enter the remainder of a create"}, {:name=>"openroad.vim", :summary=>"Goodies for OpenROAD users", :description=>"Some useful mappings & functions for OpenROAD programmers\n\n1) Shortcut menus for methods, procedures & event blocks  - click on a method/procedure/event name & vim jumps to that section of code.\nThese functions were based on \"incfiles.vim\" by Thomas Ramming (much changed, I hasten to add - I have actually done some work here!)\n\n2) Folding - text folds at BEGIN/END blocks - makes long files easier to navigate\n  <F3> opens folds, <F4> closes. To turn off this feature, comment out the line \"set foldmethod=marker\"\n\n3) Help on keywords - place cursor on an openroad keyword then shift-K opens the appropriate part of the openroad help file (need to use pre-4.1 MR help file)\n\n4) command completion - type part of a word, press CTRL-space & Vim will guess the rest. I've taken this from \"_vim_wok_visualcpp01.zip\" by Wolfram Esser.\n\nIt's my first vim script, so I apologise if it seems crude\n\nPaul Humphrey"}, {:name=>"java_apidoc.vim", :summary=>"Java API documentation viewer (JavaDoc)", :description=>"When viewing/editing a Java source file, put the cursor on an 'import...' line, or on a class name such as 'String', and then press F2. A browser opens showing the API (generated JavaDoc HTML pages) for the imported package or class. The mechanism can be extended to include your own generated JavaDocs."}, {:name=>"ABAP.vim", :summary=>"Syntax highlighting for SAP/ABAP files", :description=>"It is used to highlight the structure of a ABAP/4 programs. It is a very early version and only some of the keywords have been highlighted. Send comments to swapan@yahoo.com"}, {:name=>"rcsdiff.vim", :summary=>"Visual rcsdiff", :description=>"This script will create a new command, 'Rcsdiff'.\n\nNAME\n        Rcsdiff - Compare RCS revisions to current working file.\n\nSYNOPSIS\n        :Rcsdiff [rev]\n\nARGUMENT\n        rev - Revision number. [Optional]\n \nDESCRIPTION\n        Display a diff comparison of the current working file and its\n        RCS (Revision Control System) revision.\n\n        An optional argument is provided to compare a specific revision.\n        If omitted, the latest revision will be used. This is useful for\n        determining changes since the last checkin.\n\nNOTES\n        See the rcsdiff script for more documentation and mappings."}, {:name=>"snippet.vim", :summary=>"Replace a word with any text", :description=>"Snippets are fragments of code, usually related to keywords . \nFor example the C language defines \"for\" and \"do\" as keywords, \namong others.  Since \"for\" is usually written\n    as : \n         for (...;...;...) {\n                 //code here\n         }\nMost users will create an abbreviation for the keyword \"for\" to add the\nparenthesis and curly-braces such as : \n         iabb xFor for<space>(<space>;<space>;<space>)<space>{<cr><cr>}\n\nTo accomplish this using snippets, create a file with these lines :\n\n for ( <#cursor#>; ; ) {\n\n }\n\nNow when editing a 'c' file, when you type 'for<C-S>' ,for is replaced by the\nsnippet of code you placed in the file.  Additionally the cursor is placed \nbetween the opening ( and the first ; ... ready for you to begin typing.\n"}, {:name=>"opsplorer", :summary=>"tree file explorer", :description=>"The opsplorer script is intended to be an alternative to the file-explorer\nplugin that comes with the vim package. It's got a tree structure (you can\nalso quickly change the tree root path) and is designed to be as compact as\npossible.\n\nFor detailed description, see :help opsplorer.txt\n\nHave fun :-)"}, {:name=>"cream-showinvisibles", :summary=>"Toggle view of invisible tabs, returns, trailing spaces", :description=>"\nToggle view of invisible characters such as tabs, trailing spaces and hard returns. The script includes intuitive presets for these characters, a global environmental variable (g:LIST) that is retained and initialized across sessions if you use a viminfo, and a familiar (to some of us) keyboard shortcut mapping to F4.\n\nThis configuration includes characters as nice looking as your specific setup will allow, determined by hardware, operating system and Vim version. (Vim version 6.1.469 supports multi-byte characters, used with UTF-8 encoding.)\n\nThis is one of the many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software. \n\n"}, {:name=>"bash-support.vim", :summary=>"BASH IDE -- Write and run BASH-scripts using menus and hotkeys.", :description=>"Write BASH-scripts by inserting comments, statements, tests, variables, builtins, etc..\nSpeed up writing new scripts considerably.\nWrite code und comments with a professional appearance from the beginning.\n\nHere are some screen shots :   http://lug.fh-swf.de/vim/vim-bash/screenshots-en.html\n\nThe help file online :   http://lug.fh-swf.de/vim/vim-doc/bashsupport.html\n\nThe key mappings of this plugin (PDF) : http://lug.fh-swf.de/vim/vim-bash/bash-hot-keys.pdf\n\nDOCUMENTATION \n--------------------------------------------------------\nThis plugin comes with a help file (bashsupport.txt). \nRead it with   \n \n  :h bashsupport \n\n** PLEASE READ THE DOCUMENTATION **\n\nEditing actions differ for different modes!  \nThere are  a lot of  features which can be configured or customized to match your needs.\n\nThe installation explained: http://www.thegeekstuff.com article \n\"Make Vim as Your Bash-IDE Using bash-support Plugin\"\n(http://www.thegeekstuff.com/2009/02/make-vim-as-your-bash-ide-using-bash-support-plugin)\n\nPlugin featured in the  linux.com article 'Turn Vim into a bash IDE' : http://www.linux.com/articles/114359\n\nMAILING LIST\n--------------------------------------------------------\nYou can subscribe to the vim-plugins-list mailing list to post your questions or\nsuggestions for improvement or to report bugs.  The list will also be used to\nannounce new releases ( c.vim / bash-support / perl-support / doxygen-support ).\nVisit the following page for subscribing to the mailing list:\n     \n  http://lug.fh-swf.de/cgi-bin/mailman/listinfo/vim-plugins-list\n\nThe vim-plugins-list list is very low on traffic.\n"}, {:name=>"ldraw.vim", :summary=>"Syntax file for LDraw (LEGO Draw) models files.", :description=>"See http://www.ldraw.org/ for more information about LDraw and other related applications."}, {:name=>"DirDo.vim", :summary=>"Performs Vim commands over files recursively under multiple directories.", :description=>"This plugin is like :argdo but it works recursively under a directory (or\nmultiple directories).  The limitation for :argdo is that it does not glob\nthe files inside the subdirectories.  DirDo works in a similar manner but\nyou're allowed to specify multiple directories (good for refactoring code\nand modifying files in a deep hierarchy).  DirDo also globs the files in\nthe subdirectories so you can make sure an operation is performed\nconsistantly."}, {:name=>"oceandeep", :summary=>"dark colorscheme, pleasant, mainly blue and blueish-green", :description=>"dark colorscheme, pleasant, mainly blue and blueish-green,\nbased on Nightshimmer (vimscript #328) by Niklas Lindström (http://vim.sourceforge.net/profile.php?user_id=577);\n\nYou'll find a screenshot at my place over here:\nhttp://www.tomsdiner.org/vim/oceandeep/index.html\n\nThanks for voting this up, I'm surprised and delighted that you like this scheme as much as I do :-)"}, {:name=>"atomcoder-vim", :summary=>"Atomcoder Vim Environment", :description=>"Atomcoder Vim Scripts \n\nEnter Vim commands like game cheat codes, press Enter then type command. Commands are entered in command line and not as maps. This means you could correct typing mistakes before invoking the command.\n\nJust my various Vim settings, mappings, functions for Java Programming.\n\nPress Enter (<CR>) invokes \":Vim\" prompt in command line. \":Vim\" calls the \"Vim\" function. Then type \"lc<CR>\" to line comment the current line (or highlighted lines) of Java, Vim, XML code. \"<CR>nlc<CR>\" will uncomment it.\n\nSome \":Vim\" commands:\n- tt - toggle tomcat\n- tr - tomcat shutdown tomcat startup\n- te - tomcat shutdown\n- cvsd - cvs diff on current file\n- cvsci - cvs ci\n- cvsru - :del % then cvs up\n- cvstF - cvs tag -F with hardcoded tag\n- cvsup - cvs up\n- cvsv - cvs up -p\n- cvslga - cvs log\n- fe - start Sexplorer\n- cd - cd to directory containing current file\n\nSome maps:\n- <F8> - :!ant work-webapp\n- <F9> - :!ant work-compile\n- p - works more like mswin <C-V> when text is highlighted\n- g/ - put current word in the \"/ register so that a substring that matches it gets highligthed\n- g? - put current word in the \"/ register so that a word that matches it gets highligthed\n- ZR :e!<CR>\n- ZU :up<CR>\n- ZZ <Nop>\n- ZD :bd!<CR>\n- ZC :bd<CR>\n"}, {:name=>"Expmod", :summary=>"explorer.vim modification for viewing files and relative path", :description=>"expatch adds 2 new commands to explorer.vim: v and g\nv - view graphic file\ng - get full file name and store it in global variable\n\nIt works also with mouse and <Enter>:\nv == <2-LeftMouse> == <Enter> (if file is graphic file)\ng == <2-S-LeftMouse>\n\nexpmod.vim takes care about global variable. Behaviour of <F8> depends\non file name and file type of current buffer. The most dramatic effects\nare if ft=html.\nFor graphic files it _o_pens new line and inserts:\n<img src=\"relative_path\" width=\"100\" height=\"100\" alt=\"short_file_name\"\nborder=\"0\">\n\nrelative_path is a relative path from edited file to graphic file. E.g.\n\"../images/alpha.gif\"\ndimensions are given by identify\nshort_file_name is short file name ;)\nborder is default value.\n\nFor all other files it inserts:\n<a href=\"relative_path\" class=\"\">\n\n<F8> works also for other 'ft' values:\nFor php: include(\"relative_path\");\nFor c: #include <relative_path>\n"}, {:name=>"timstamp.vim", :summary=>"Global plugin for automated time stamping", :description=>"Content of the help document:\n\n*timstamp.txt*  Global plugin for automated time stamping - v0.95\n\nThe timstamp general plugin provides automated time-stamping functionality.\n\n1. General\t\t    |timstamp_general|\n2. Specification format\t    |timstamp_specformat|\n3. Default specs\t    |timstamp_default_specs|\n4. Control variables\t    |timstamp_control|\n\n==============================================================================\n\n1. General\t\t\t\t\t\t*timstamp_general*\n\nWhenever a file is written, this plugin will look for 'Time-stamp lines'\namongst the first and last lines of the file to be written. If any of these\nlines contain e.g. ' Time stamp:' or 'Last change:', the plugin will update\nthese lines before writing the file.\n\nThe plugin is fully controlled by the user. It does provide two standard\n'Time-stamp line' specifications as well as their replacement spec. The user\ncan add additional values as well as remove the default values.\n\nThe plugin and its documentation file can be installed as described under\n|add-global-plugin| and |add-local-help|. Do not forget to run |:helptags|.\n\n==============================================================================\n\n2. Specification format\t\t\t\t\t*timstamp_specformat*\n\nThe specification format for a time-stamp line consists of the {pat} and {sub}\nparts required to build the desired substitute command. These {pat} and {sub} \nparts must be separated by a \"!\" character.\n\nAn examplespec may clarify this: \"( Last changed:\\).*$!\\1 %Y %b %d\".\nThe {pat} part instructs the plugin to look for any line that ends on\n' Last changed: ...'.\n\nThe {sub} part is passed on to |strftime()|, which (at least at the time I am\nwriting this) translates \"%Y %b %d\" into \"2002 Aug 11\". Of course, these would\nbe the values at the time of the plugin execution, which is the moment before\nwriting the file. Any % tokens known by your version of |strftime()| can be \nused.\n    \nAdditionally, some # tokens have been defined by the plugin. These are\nreplaced by their corresponding value after |strftime()| processing and \nbefore performing the actual substitutions:\n\n    #f\tfilename    |timstamp_filename|\n    #h  hostname    |timstamp_hostname|\n    #H  Hostname    |timstamp_Hostname|\n    #n  username    |timstamp_username|\n    #u  userid\t    |timstamp_userid|\n\n#f  filename\t\t\t\t\t\t*timstamp_filename*\n\n    The #f token is replaced by the filename of the current buffer. This is a\n    name without any path components.\n\n#h  hostname\t\t\t\t\t\t*timstamp_hostname*\n\n    The #h token is replaced by the hostname of the current vim process. \n   \n    The user can specify the desired value with the glabal variable\n    g:timstamp_hostname. If that variable does not exist, the value of the\n    $HOSTNAME environment variable will be used. If there is no $HOSTNAME, the\n    output of the hostname() function is used. However, only the last word\n    returned by that function is preserved. The platform type of qualifier\n    (e.g. PC) is not kept.\n\n#H  Hostname\t\t\t\t\t\t*timstamp_Hostname*\n\n    The #H token is also replaced by the hostname. However, the platform\n    qualifier is not removed.\n\n#n  username\t\t\t\t\t\t*timstamp_username*\n\n    The #n token will be replaced by the user name. This will be obtained from\n    the g:timstamp_username variable if it exists. Otherwise, it is\n    initialised from the $USERNAME environment variable.    \n\n#u  userid\t\t\t\t\t\t*timstamp_userid*\n\n    The #u token will be replaced by the userid. This will be obtained from\n    the g:timstamp_userid variable if it exists. Otherwise, it is\n    initialised from the $LOGNAME environment variable. \n    \n==============================================================================\n\n3. Default specs\t\t\t\t    *timstamp_default_specs*\n\nThe plugin defines two default specs, which can be overwritten by the user:\n\n    Last Change Spec   |timstamp_last_change_spec|\n    Time Stamp spec    |timstamp_time_stamp_spec|\n    \n3.1. Last Change Spec\t\t\t\t*timstamp_last_change_spec*\n\t\n    The last change spec has following default value:\n\n    '\\( Last \\?\\(changed\\?\\|modified\\):\\).*$!\\1 %Y %b %d' \n\t\n    which can be overruled by providing a different value in the \n    g:timstamp_1 variable.\n\n    The {pat} part is '\\( Last \\?\\(changed\\?\\|modified\\):\\).*$'. This will \n    process lines containing ' Last changed', ' Last modified' or its \n    variations.\n\n    The {sub} part is '\\1 %Y %b %d'. This will preserve the ' Last ...:' \n    string and replace the remainder with the current 4 digit year, \n    the short month name and the day of month. \n\n    This file contains a 'Last Change' line at |timstamp_examples|.\n\t\n3.2. Time Stamp spec\t\t\t\t    *timstamp_time_stamp_spec*\n\n    The time stamp spec is a bit more complex:\n\n\t'\\( Time[- ]\\?stamp:\\).*$!\\1 <#f %a %Y/%m/%d %H:%M:%S #u #h>'\n\n    and can be overruled by defining the global g:timstamp_2 variable.\n\n    The {pat} part is shorter: '\\( Time[- ]\\?stamp: \\)<.*>$'. It will trigger \n    on lines containing ' Time-stamp', ' Time stamp' or ' Timestamp'\n    immediately followed by a ':'.\n\n    The {sub} part is '\\1 <#f %a %Y/%m/%d %H:%M:%S #u #h>'. This will \n    preserve the ' Time...:' string, and replace the remainder of the line \n    with e.g. ' <timstamp.txt Sun 2002/08/11 13:03:01 guivho BTM4BZ>'. Please\n    refer to the |timstamp_specformat| above for the # tokens.\n\n    This file contains a 'Time stamp' line at |timstamp_examples|.\n\n==============================================================================\n\n4. Control variables\t\t\t\t\t*timstamp_control*\n\nThe plugin can be fully controlled by the user. Each of the internal variables\nthat control the operation, can be overruled by providing a corresponding\nglobal value.\n\n    g:timstamp_1, \n    g:timstamp_2, \n    g:timstamp_...\t    |timstamp_specs|\n    g:timstamp_automask\t    |timstamp_automask|\n    g:timstamp_hostname\t    |timstamp_hostname|\n    g:timstamp_Hostname\t    |timstamp_Hostname|\n    g:timstamp_ignorecase   |timstamp_ignorecase|\n    g:timstamp_language\t    |timstamp_language|\n    g:timstamp_modelines    |timstamp_modelines|\n    g:timstamp_userid\t    |timstamp_userid|\n    g:timstamp_username\t    |timstamp_username|\n\n4.1. g:timstamp_1, g:timstamp_2, g:timstamp_...\t\t    *timstamp_specs*\n\nThe |timstamp_default_specs| section has described the two default specs\nprovided by the plugin. If the user is happy with those two specs, no entry is\nrequired in the .vimrc file.\n\nHowever the user may overrule these default values by defining a g:timstamp_1\nand / or a g:timstamp_2 variable, e.g:\n\n    :let g:timstamp_1='\\( Last change:\\).*$!\\1 %A %Y %b %d'\n    \nif the user would always want to include the day of the week as in\n\n    ' Last Change: Wednesday 2002 Aug 14'  \n\nThe user can add additional specs, e.g. a g:timstamp_3 etc... :\n\n    :let g:timstamp_3='\\( Last messed up at:\\).*$\\1 %Y %b %d'\n\nfor those files that are still in early development? :-)\n    \n\nNote that the first empty or not existing spec will terminate processing.\n\nIf e.g. a g:timstamp_3 has been defined, but g:timstamp_2 has been set to \"\" \nprocessing will not continue beyond g:timstamp_2. On the other hand, if the\nfirst two specs are non empty (either while they have not been overruled, or \nas they have been replaced by a non empty value), processing will continue \nwith g:timstamp_3, g:timstamp_4, g:timstamp_5 ... as long as each consecutive \nvariable exists and has a non empty value.\n\n4.2. g:timstamp_automask\t\t\t\t*timstamp_automask*\n\nBy default, the plugin installs an \"autocommand BufWrite\" for all files. So it\nuses '*' as {pat} (cfr |:autocmd|). The user can overrule this behaviour by\ndefining g:timstamp_automask with the desired value, e.g.:\n\n    :let g:timstamp_automask = \"*.html\"\n>\nto limit timestamping to html files.\n\n4.3. g:timstamp_hostname\t\t\t    Cfr |timstamp_hostname|.\n\n4.4. g:timstamp_Hostname\t\t\t    Cfr |timstamp_Hostname|.\n\n4.5. g:timstamp_ignorecase\t\t\t\t*timstamp_ignorecase*\n\nThe plugin ignores case when performing the eventual substitution. \nSo ' lAsT cHanGe:' is as valid as ' Last Change:'. The user can prevent this\nby defining global variable g:timstamp_ignorecase to an empty value: <\n\n    :let g:timstamp_ignorecase = \"\"\n>\n\n4.6. g:timstamp_language\t\t\t\t*timstamp_language*\n\nThe plugin assumes that one usually wants english timestamps. By default it\nexecutes a ':language time en' to achieve this. The user can specify a\ndifferent language to be used by means of the g:timstamp_language variable.\n\n\n4.7. g:timstamp_modelines\t\t\t\t*timstamp_modelines*\n\nThe plugin uses the value of the |'modelines'| option to define the number of\nhead or tail lines to be taken into account. The user can specify a different\nvalue by means of the g:timstamp_modelines variable. \n\nThis can even be set to '$' if all file lines have to be taken into account.\nBe aware that this would change any line that matches any of your\n|timspec_specs|. This may be more than you would expect.\n\n4.8. g:timstamp_userid\t\t\t\t    Cfr |timstamp_userid|\n\n4.9. g:timstamp_username\t\t\t    Cfr |timstamp_username|\n\n==============================================================================\n\n\t\t\t\t\t\t\t*timstamp_examples*\n Version: 0.95\n Last change: 2003 Feb 13\n Timestamp: <timstamp.txt Thu 2003/02/13 22:58:16  MSDOG>\n Maintainer: Guido Van Hoecke <Guido@VanHoecke.org>\n vim:tw=78:sw=4:ts=8:ft=help:norl:\n"}, {:name=>"Red-Black", :summary=>"A red and black color scheme", :description=>"A red and black color scheme."}, {:name=>"ftpluginruby.vim--Sinclair", :summary=>"The official ftplugin/ruby.vim", :description=>"This is the official ftplugin intended for installation in the *global* ftplugin directory.\n\nIt contains *no* settings, as no settings/mappings are known that transcend personal taste\nto become globally useful Ruby settings.\n\nThe version included in Vim 6.1 sets shiftwidth and formatoptions, which is inappropriate."}, {:name=>"indentruby.vim", :summary=>"The official indent/ruby.vim", :description=>"This is the official ftplugin intended for installation in the *global* indent directory. \n\nIt fixes a bug in the version included with Vim 6.1.  (Comment ending in [,.*(] screws\nup the indenting for the next line(s).) \n"}, {:name=>"Denim", :summary=>"Dark Color Scheme with lots of blue", :description=>"see a screen shot here\nhttp://www.geocities.com/aldy0169/images/denim.jpg"}, {:name=>"mof.vim", :summary=>"Syntax file for CIM Managed Object Format (MOF) files", :description=>"Syntax highlighting for CIM Managed Object Format (MOF) files.  See http://www.dmtf.org for details on CIM."}, {:name=>"vim-game-of-life", :summary=>"Game of Life in VIM.", :description=>"A totally useless and not interactive vim script showing an implementation of the famous game of life.\n"}, {:name=>"ia64.vim", :summary=>"Syntax highlight file for Intel IA64 Itanium processor", :description=>"This version (0.7) of ia64.vim scripts fixes the highlighting problem with (tbit.z.*) instructions as pointed out by a user. Version (0.6) which comes with vim 6.1 does not highlight these instructions correctly.\n"}, {:name=>"d.vim", :summary=>"Syntax file for the D programming language.", :description=>"Syntax file for the D programming language.\n\nNote that the new maintainer for versions > 0.18 is Jesse Phillips. New versions will still be published to this page for the foreseeable future."}, {:name=>"PreviewTag.vim", :summary=>"Resize preview window hieght to show \"entire\" tag (if a recognized type of tag)", :description=>"Basically, does a  g}  command to bring up the tag in the preview window.  \nNext, it looks at the located tag, and based on what it looks like adjusts the preview window height and posistions the file in the preview window so that the \"entire\" tag is shown -- in the case of a structure, the \"entire\" tag includes the opening brace through the closing brace.  That's where the style used can have an effect.  We use the style:                                            \n                                                                              \n     typedef struct foo {                                                     \n          int   member1;                                                      \n          long  member2;                                                      \n     } FooType;                                                               \n                                                                              \nSo, including the line having the opening brace through the line having the   \nclosing brace shows the entire type.                                          \n                                                                              \nIf it doesn't work with your style, it should only take some minor tweaks to  \nthe patterns used to identify different tags to treat specially.\n\nIf the tag isn't recognized as \"special\", the tag is previewed \"normally\" (i.e., whatever g} does normally, based on your vim settings."}, {:name=>"ShowLine.vim", :summary=>"Display line(s) in the command area (like echo), but syntax highlighted.", :description=>"Display a line or lines in the command area, like the builtin echo, but using the original lines' syntax highlighting.\n\nUseful to other scripts for displaying lines of text, highlighted as they appear in the editor window (e.g., see ShowBlockName.vim -- vimscript #382)"}, {:name=>"ShowBlockName.vim", :summary=>"Show the name of the code-block (e.g. function) the cursor is in on the cmd line", :description=>"Display the name of the current \"block\" the cursor is in in the command-line\narea (i.e., with vim's echo).\n\nA \"block\" is context-sensitive, (e.g., function name, variable name if in an\ninitialization, type name if in a typedef, etc.)\n\nNOTE: The only languages with specific support as-is are vim scripts, Perl, and C.  Support for other languages can be added by modifying the script with appropriate search patterns.\n\nTypical use (.vimrc):\n  au CursorHold *\tcall ShowBlockName('quiet')\n\n  \" Show the name of the function we're in on the message line; pnuemonic [[\n  map <silent> g[[\t:call ShowBlockName()<CR>\n\n  \" Disable ShowBlockName (once); to prevent the CursorHold autocommand from\n  \" overwriting something in the command window (e.g., SyntaxAttr() output).\n  map <silent> g]] :call ShowBlockName('OFF')<CR>\n\n\n  \" Tweak commands like [d so that they disable ShowBlockName so\n  \" it doesn't obliterate the output of this command.\n  nnoremap [d :call ShowBlockName('[d')<CR>\n  nnoremap [i :call ShowBlockName('[i')<CR>\n\nNOTE:\n\tThis will NOT work if the start-of-block is the first line in a file.\n\nTHIS SCRIPT USES ShowLine ( vimscript #381 )"}, {:name=>"SyntaxAttr.vim", :summary=>"Show syntax highlighting attributes of character under cursor.", :description=>"Displays the syntax highlighting attributes of the character under the cursor; including syntax group (and what it's linked to, if linked), foreground/background colors (name and numeric equivallent), bold, underline, etc.\n\nExample output:\n\n[WIth cursor on a function name in a vim script]\n     group: vimUserFuncName guifg=DarkCyan(#008b8b) gui=bold\n\n[With cursor on \"function\" keyword in vim script]\n     group: vimFuncKey->Statement guifg=Brown(#a52a2a) gui=bold\n\n[WIth cursor on \"let\" keyword in vim script]\n     group: vimLet->Statement guifg=Brown(#a52a2a) gui=bold\n\nThis can be helpfull both developing syntax files, and for determining what something is (according to the syntax rules), since the group names used in syntax files are usually well-named.\n\nRecommended use with a mapping such as:\n\n  map -a\t:call SyntaxAttr()<CR>"}, {:name=>"DarkOcean.vim", :summary=>"Its really dark", :description=>"dark colorscheme. snapshot available at\nhttp://www.geocities.com/ncr_10/snapshot.html \ninspired by Tom Regner's oceandeep colorscheme (vimscript #368)\n\n\n-ncr"}, {:name=>"ibmedit.vim", :summary=>"Color scheme similar to IBM Edit from MS-DOS. Also looks a bit like Borland IDE.", :description=>"DarkBlue background. easy on the eyes. best used in gui."}, {:name=>"python_match.vim", :summary=>"Extend the % motion and define g%, [%, and ]% motions for Python files", :description=>"This script redefines the % motion so that (in addition to its usual behavior)\nit cycles through if/elif/else, try/except/catch, for/continue/break, and\nwhile/continue/break structures.  The script also\ndefines g% to cycle in the opposite direction.  Two other motions, [% and ]%,\ngo to the start and end of the current block, respectively.\n\nAll of these motions should work in Normal, Visual, and Operator-pending\nmodes.  For example, d]% should delete (characterwise) until the end of the\ncurrent block; v]%d should do the same, going through Visual mode so that\nyou can see what is being deleted; and V]%d makes it linewise."}, {:name=>"rnc.vim", :summary=>"RELAX NG Compact Syntax", :description=>"Syntax highlighting for RELAX NG Compact Syntax: http://www.oasis-open.org/committees/relax-ng/compact-20020607.html\n\nThis is currently very helpful (a little color goes a long way), but not quite fully mature. I am happy to add the feature you want most, and incrementally it will grow into a mature syntax file."}, {:name=>"LbdbQuery.vim", :summary=>"Look up email addresses with lbdbq.", :description=>"This script invokes lbdbq to look up the email address. mutt-heads that edit headers with vim might find this one useful. The results are displayed in a split window. The window is closed when the key 'q' is hit. Hit the \"+\" key to select the email id of interest and insert it into the file.\n"}, {:name=>"scratch-utility", :summary=>"A simple utility to create scratch buffers", :description=>"This is a simple plugin that creates a scratch buffer for your\nvim session and helps to access it when you need it.  \n                                                                 \nIf you like the custom mapping provided in the script - hitting\n<F8> should create a new scratch buffer. You can do your scribes\nhere and if you want to get rid of it, hit <F8> again. If you want to \nget back to the scratch buffer hit <F8> again.\n"}, {:name=>"plp.vim", :summary=>"Syntax file for PLP code, which is HTML + Perl", :description=>"PLP is yet another Perl embedder, primarily for HTML documents. Unlike with other Perl embedders, there is no need to learn a meta-syntax or object model: one can just use the normal Perl constructs. PLP runs under mod_perl for speeds comparable to those of PHP, but can also be run as a CGI script. \n\nThis syntax file adds proper PLP highlighting to vim."}, {:name=>"LaTeX-functions", :summary=>"Functions and mappings for editing LaTeX documents.", :description=>"This package has functions for inserting various LaTeX commands. Has ability to insert, delete, change enviroment. Has macros for operating on commands with two or more argument, etc.\n\nAlso there is functions for operating with citations and references. Mainly it's insertion into document, with quite user-friendly selection.\n\nNow it has documentation, in style of VIM help files.\n\nSo if you have any wishes, ideas, etc. feel free to contact me."}, {:name=>"ocean.vim", :summary=>"Syntax hilighting for Open Command Environment for Analysis (OCEAN)", :description=>"This file provides syntax hilighting for Open Command Environment for Analysis(OCEAN). OCEAN is a scripting language used in EDA tools from Cadence Design Systems that simulates analog and digital circuits at the differential equation level."}, {:name=>"spectre.vim", :summary=>"Syntax hilighting for Spectre circuit simulator input netlist", :description=>"Spectre is an advanced circuit simulator from Cadence Design Systems that simulates analog and digital circuits at the differential equation level."}, {:name=>"bugfixes-to-vim-indent-for-verilog", :summary=>"bugfixes: previous version was evaluating expressions inside comments", :description=>"The current version of verilog.vim used for indentation evaluates expressions inside '//' comments leading to a grossly misindented code fixed the same"}, {:name=>"gri.vim", :summary=>"Vim syntax file for Gri", :description=>"gri.vim provides basic syntax support for Gri, it is based mainly in gnuplot.vim, as it is a scripting language for scientific plots. "}, {:name=>"scilab.vim", :summary=>"Vim syntax file for Scilab", :description=>"scilab.vim provides basic syntax support for Scilab, it is based on matlab.vim, because Scilab it is a Matlab like languaje."}, {:name=>"ShowFunc.vim", :summary=>"Creates a list of all tags / functions from a window, all windows or buffers.", :description=>"This script creates a hyperlink list of all the tags (i.e. functions, subroutines, classes, macros or procedures) from a single buffer, all open windows or buffers and displays them in a dynamically sized cwindow.\n\nSupported File types with Exuberant Ctags version 5.5.4 (and newer):  Asm, Asp, Awk, Beta, C, C++, c#, Cobol, Eiffel, Erlang, Fortran, Java, Javascript, Lisp, Lua, Make, Pascal, Perl, PHP, Python, PL/SQL,  REXX, Ruby, Scheme, Shell, SLang, SML, SQL, Tcl, Vera, Verilog, Vim, YACC......and any user defined (i.e. --regex-lang=) types. \n\nDefault Key Mappings:\n<F1>    Run scan and open cwindow.\n              \nTo reassign add the following to your .vimrc:\n      map  NewKey   <Plug>ShowFunc\n      map! NewKey   <Plug>ShowFunc\nFor example to change the <F1> mapping to <F7>\n      map  <F7>   <Plug>ShowFunc\n      map! <F7>   <Plug>ShowFunc\n\nShowFunc Window commands:\nc       Close cwindow.\nh       Display help dialog.\nr        Refresh.\ns       Change file sort, results will appear in either alphabetical or file order.  (Default: file order)\nt       Change scan type, results will be from either the current file, all open windows or all open buffers.  (Default: all open buffers)"}, {:name=>"maxima.vim", :summary=>"syntax file for the Maxima language", :description=>"This is a vim syntax file for the Maxima programming language. Maxima (based on GNU Common Lisp) is a GNU licensed system for doing computer algebra. It is an outgrowth of MIT's original Macsyma implementation."}, {:name=>"ironman.vim", :summary=>"Color scheme with bright background", :description=>"Color scheme with bright background to work hours and hours in front of the monitor.\nHow it looks? http://www.emm97.de/vim/ironman.png\n\nFor GUI only."}, {:name=>"sean.vim", :summary=>"dark color scheme", :description=>"Nice colours on a black background, mainly set up for C++ but seem sto be OK on most file types."}, {:name=>"regRedir.vim", :summary=>"Vim plugin to redirect command output into a register", :description=>"\" Description: This plugin defines a 'Redir' command that takes a register\n\" and one or more {bar} separated commands. This command will execute \n\" these commands and collect their output into the specified register.\n\" The resulting register could than be inserted anywhere with a :put\n\" The register must always be specified, and is the first character \n\" of the command argument. The remainder of the argument is the command\n\" to be captured. This command may be separated from the register with \n\" a space. Several commands can be specified, but have to be separated\n\" with a bar:\n\"\n\" :Redir {reg} {cmd} [ | {cmd} [ | {cmd} ... ] ]\n\" \n\" Examples:\n\" 1) Simple case of one command (e.g. :version) to be captured into \n\"    register v\n\"\t    :Redir vversion\n\"\t or\n\"\t    :Redir v version\n\" 2) Example of two commands (ls and set) to be collected into \n\"\t register p\n\"\t    :Redir p ls | set\n\"\t or\n\"\t    :Redir pls|set\n\" 3) Example of a command (g/exe) to be appended to register x\n\"\t    :Redir Xg/exe\n\"\t or\n\"\t    :Redir X g/exe\n\"\n"}, {:name=>"colormenu.vim", :summary=>"Menu showing all available color schemes", :description=>"A simple plugin that adds a menu with all color schemes in the runtime path.  Selecting an item from the menu activates that color scheme."}, {:name=>"eruby.vim", :summary=>"Highlight eruby code blocks within html.", :description=>"This script properly highlights <% ... %>, <%=...%>, and <%#...%> as ruby code within html."}, {:name=>"getmail.vim", :summary=>"Syntax file for getmailrc", :description=>"A syntax file for getmail (a fetchmail replacement written in Python). Based on samba.vim.\n\ngetmail homepage: http://pyropus.ca/software/getmail/"}, {:name=>"colour_flip.pl", :summary=>"perl script to inverse colourscheme colours", :description=>"Ever held visual bell on and thought \"gee, that doesn't look too bad?\" then spent hours inverting your colourscheme by hand to make a new one?\nWell, stop wasting time.  Just pipe the colourscheme through this here funky perl script, and save the output as your new scheme.  It takes a whole 0.035 seconds to run on a 433Mhz Celeron.  This amounts to a considerable (~102857) amount of time saving!\nIt will recognise both RGB and system colour names and do its best to invert them.\nNOTE: it will break on colourscheme files where the highlight commands span multiple lines.  Maybe I'll fix that someday, but then again maybe not.  Feel free to upload a new version which does that."}, {:name=>"blackdust.vim", :summary=>"darkish colour scheme, inverse of whitedust", :description=>"I inverted whitedust.vim (vimscript #348) by hand, then decided that was a complete waste of time, and wrote vimscript #405 to do automatic inversions for me :)\nIn any case, here is blackdust, the inverse of whitedust."}, {:name=>"CVSAnnotate.vim", :summary=>"Simple syntax file for use with the cvscommand.vim plugin.", :description=>"This syntax file provides syntax definitions for buffers created by the cvscommand.vim plugin (version 1.10 and above)."}, {:name=>"beanshell.vim", :summary=>"Runs the current buffer using BeanShell.", :description=>"This script invokes BeanShell ( see http://www.beanshell.org ) on the contents of the current buffer.\n\nThe script depends on java (needed to run BeanShell) as well as BeanShell itself.  The java executable should be in your PATH and the BeanShell jar should be in your CLASSPATH in order to use this script in its default configuration.\n\nPress \"<Leader>br\" and BeanShell will be invoked on the contents of the current buffer (the current buffer will not be written out).  The output from BeanShell will appear in a new window.\n\nBeanShell may also be invoked by entering the command \":BeanShell\" or by selecting the \"Invoke BeanShell\" item from the \"Plugin\" menu.\n\nStarting with version 1.2, a range may be supplied to the \"BeanShell\" command and the key command may be activated within a visual block.  Invoking BeanShell this way will cause it to act upon the specified lines rather than the entire buffer."}, {:name=>"svn.vim", :summary=>"Subversion commits syntax highlight (like CVS)", :description=>"Simple syntax highlight when commiting a file with Subversion (SVN). \nThis is based on CVS version."}, {:name=>"muf.vim", :summary=>"Syntax hilites and indenting for the MUF language", :description=>"This contains both syntax hiliting and smart indent scripts for the MUF programming language.  MUF is the Multi-User Forth language used with several Muck server variations."}, {:name=>"tex.vim--Fisher", :summary=>"an updated version of the standard ftplugin/tex.vim", :description=>"     This is an updated version of the file ftplugin/tex.vim included in the\nstandard vim distribution.  It sets options appropriately for editing TeX\n(especially LaTeX) files.  It is fairly conservative:  it may not do everything\nyou want, but it will probably not do anything to annoy you.\n\n     This will set the buffer-local variable b:tex_flavor to \"tex\" (for plain TeX)\n or \"latex\".  Other mappings, plugins, etc. may use this variable to modify\ntheir behavior."}, {:name=>"cvopsefsa.vim", :summary=>"CVOPS EFSA language syntax file", :description=>"Syntax highlighting for the state automaton language files (.aut) used inside Celtius CVOPS."}, {:name=>"ActionScript", :summary=>"ActionScript syntax highligting", :description=>"what to say?"}, {:name=>"plsql.vim", :summary=>"PL/SQL indent file", :description=>"An Oracle PL/SQL indent file that indents after BEGIN IF AS IS THEN WHEN LOOP ELSE ELSIF CASE EXCEPTION and DECLARE, and unindents after the corresponding end of these statements/sections."}, {:name=>"Zenburn", :summary=>"Low contrast colour scheme for low light conditions", :description=>"This colour scheme is intended to be pleasant for the eyes when working in low-light conditions. The low contrast will reduce eyestrain.\n\nIf you like to work in a darkened room with a fullscreen Vim, this is for you! Even if you don't, try this one out :-)\n\nThere is now a higher-contrast mode (with darker background) which is enabled via \":let g:zenburn_high_Contrast=1\" then \":colors zenburn\". See the syntax file itself for further options.\n\nZenburn official site: http://slinky.imukuppi.org/zenburnpage/\nZenburn screenshot: http://slinky.imukuppi.org/zenburn/"}, {:name=>"Kent-Vim-Extensions", :summary=>"Entering folds and other stuff", :description=>"The purpose of these extensions is to make the use of Vim easier, especially for programming tasks, while preserving the extraordinary features of Vim, which make\nit (imho) one of the best editors available.\n\nThe main part, and probably of most interest for you, is the possibility to enter folds. Entering a fold means to hide everything apart from the fold, so that only the fold you have entered is visible. Thus, you will be able to organise your files much better, and to find and edit certain parts of your files much easier and faster. Especially for long source code files, this is very useful.\n\nThere are also a lot of other features, please check out the help on that by typing\n\n:help kent\n\nafter installation.\n\nNote: These extensions are tested for Vim version 6.1 onwards. No guarantees for lower versions!\n\nThere are the following parts:\n\nKent Folding Extensions:\nExtensions to improve the look and feel of folds.\nEspecially the possibility to enter folds, inspired by the old origami editor, is very useful.\n\nImprovements to the Look and Feel of Vim and GVim:\nThe purpose is to make it easier to use Vim, especially for users without a lot of Vim experience.\n\nKent Programming Extensions:\nExtensions useful for programming tasks.\nFor example commenting out parts of the code depending on the language.\n\nKent occam Extensions:\nExtensions related to the occam language.\nContains syntax and indent files for occam, as well as an easy way to compile, debug and run occam programs."}, {:name=>"plsql.vim-syntax", :summary=>"PL/SQL syntax file", :description=>"Extension of Austin Ziegler's PL/SQL syntax file, created primarily to incorporate some of the new Oracle9i keywords."}, {:name=>"Registryedit-win32", :summary=>"Edit the win32 registry through vim.", :description=>"This plugin allows you to edit the Win32 registry through Vim.\n\nIt was originally conceived after someone on the Vim Mailing list wanted to know how to extend Vim with Perl. Being the bright spark that I am I helpfully pointed out that it wasn't a case of learning how to extend Vim, but knowing how to use Perl to do something that Vim could not. This rules out many uses of Perl - you wouldn't process a CGI request or a log file within Vim. To balance the things you wouldn't do I came up with some suggestions as to things you might want to do. One of those was to make use of Vim's autocmds so you could access the Win32 registry. The original poster then said they'd like to see it done - out of curiousity than out of a challenge, but ever one to open my mouth wide I decided to put my money where my mouth was and this script was born.\n\nQuite simply this plugin extends Vim via Perl to enable Vim access to the data in the Win32 registry. You access it using the ever popular URL notation of protocol://file\n\n  registry://HKEY_CLASSES_ROOT/.vim\n\nFrom there on autocmds catch the request and hand it onto the functions RegistryRead() and RegistryWrite(). Inside both of these its all Perl work using the Win32::TieRegistry module by Tye McQueen to read and write (yes, write) to the registry.\n\nIt is not a full implementation of Win32::TieRegistry. It just extracts the data, places it in Vim and then updates the registry when you save. It is intended for demonstration purposes (and my own learning) so it is not a stateful reflection of the registry. For example to add a line you just add it and hit save. To delete an entry, you don't just delete the line, you need to mark it with XX. This was intentional to prevent anyone from saving a blank file and then wondering why its all broken. I may change this in a future release if anyone *really* wants me to.\n\nHowever its mainly for learning purposes and since this is getting long already, please see the readme file for details."}, {:name=>"syslog-syntax-file", :summary=>"Adds syntax color to log files created by sysklogd.", :description=>"Adds syntax color to log files created by sysklogd.  "}, {:name=>"MySQL-script-runner", :summary=>"MySQL scripts that allows you to run SQL scripts in mysql console by pressing F9", :description=>"MySQL scripts that allows you to run SQL scripts in mysql console by pressing F9.\n\nYou can add this plugin to handle *.SQL file type."}, {:name=>"elinks.vim", :summary=>"Syntax file for elinks.conf", :description=>"Syntax highlighting of elinks' configuration file. Covers elink version 0.4pre15 or later.\nThe elinks project homepage: http://elinks.or.cz"}, {:name=>"eukleides.vim", :summary=>"Syntax file for eukleides language", :description=>"This is a syntax file for the eukleides language.  Eukleides is a language for drawing Euclidean geometrical diagrams.  It is available at http://perso.wanadoo.fr/obrecht/index.html"}, {:name=>"jcl.vim", :summary=>"IBM Mainframe JCL language syntax", :description=>"Mainframe JCL language.\nEnphasize Conditional parts of jcl\nImplements common used keywords and commands.\n\n"}, {:name=>"midnight2.vim", :summary=>"Dark blue, low contrast colorscheme.", :description=>"Midnight is a colorscheme with a dark blue background and light blue foreground.  It is designed to keep contrast at a minimum.  It is the same as midnight.vim (vimscript #253).  I will attempt to keep both up to date with the same version of the colorscheme."}, {:name=>"smlisp.vim", :summary=>"syntax file for Small Lisp", :description=>"smlisp.vim provides syntax highlighting and paranthesis/bracket matching for the Small Lisp languague. The main web site is http://www.cs.sfu.ca/~cameron/smlisp/\n(which provides the original MSDOS binaries).\n\nFor the Linux distribution check the primary location\nhttp://www.uv.es/~tung/smlisp/."}, {:name=>"lustre", :summary=>"compiles and runs a lustre program", :description=>"this script compiles and runs a lustre program \nthere are 2 maps that hace been;\n<m-c>    compile \n<m-r>     run\nto run it u must first compile it succesfully...run does not make compilation\n\nfor each case the action is for the current node and for that the file must be of the format \nnode nodename"}, {:name=>"lustre-syntax", :summary=>"syntax file for lustre language", :description=>"it's very basic but helps!!!"}, {:name=>"VimFootnotes", :summary=>"Insert various types of footnotes with Vim.", :description=>"Inspired by Emmanuel Touzery tip:\n\" http://vim.sourceforge.net/tip_view.php?tip_id=332 \n\" and discussion below (thanks to Luc for pluginization hints) \n\" I added functions and turned it into vim script.\n\n\n\" Commands:\n\" <Leader>f (in insert mode) - inserts footnotemark, opens at bottom window where\n\"     footnotemark is also inserted and you are ready to type in your\n\"     footnotetext.\n\" <Leader>r (in insert mode) - closes footnote window and returns to the text in\n\"     proper place. \n\"\n\" You can change them by placing in your vimrc:\n\"  imap your_map <Plug>AddVimFootnote\n\"  imap your_map <Plug>ReturnFromFootnote\n\"\n\"\n\"    Footnotes are placed at the end of the file but above signature delimiter\n\"    (is one exists). \n\"\n\" Settings:\n\" g:vimfootnotetype - possible values:\n\" \tarabic (default) - [1] [2] [3] ...\n\" \talpha  - [a] [b] ... [z] [aa] [bb] ... [zz] [a] ...\n\"   Alpha  - as above but uppercase [A] ...\n\"   star   - [*] [**] [***] ...\t\n\"\n\" Additional commands:\n\" FootnoteNumber:\n\" \tYou can change current footnote number (one obligatory argument)\n\"   :FootnoteNumber 5\t\n\" FootnoteNumberRestore:\n\"\tYou can restore old footnote number  \n\"\t:FootnoteNumberRestore\t\n\" FootnoteUndo: \n\"\tDecrease footnote counter by 1\n\"\t:FootnoteUndo\t \n\" FootnoteMeta:\n\" \tChange type of the footnotes and restart counter (1, a, A, *)\n\" \t:FootnoteMeta\n\" \t\tIf your previous footnote type was alpha, Alpha or star new type will\n\" \t\tbe arabic.\n\" \t\tIf your previous footnote type was arabic new type will be alpha.\n\" \t:FootnoteMeta name_of_the_type\n\" \t\tChange footnote type to name_of_the_type. If name_of_the_type is the\n\" \t\tsame as\tyour current footnote type nothing would be changed.\n\" FootnoteRestore:\n\" \tRestore previous footnote type and counter. Unfortunately there is no easy\n\" \tway to sort footnotes at the end of file without handmade :!sort on marked\n\" \tlines (it doesn't work for 'star' type).\n\" \t:FootnoteRestore\t\n\"\n\" For easier work with this commands I would suggest place this lines in your\n\" vimrc (they offer very nice competion of Vim commands):\t\n\"\tset laststatus=2\n\"\tset wildmode=longest,list\n\"\tset wildmenu\n\"\n\" And/or map :FootnoteComs for something you like.\n\"\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n"}, {:name=>"biogoo.vim", :summary=>"Dark text (lots of blue) on light gray (GUI only)", :description=>"This is a bunch of colors that I thought were visually appealing and looked good together.  The background is light shades of gray, and the text is all dark colors.\n\nTo be honest, I don't do a lot of testing with syntax files that I don't use often.  Therefore, languages that I don't use may not look too great.  If this happens, please e-mail me and I'll fix the problem ASAP :-)\n\nNote that this color scheme only works in GUI mode (i.e., gvim and not \"terminal vim\").\n\nFor a screenshot, click the \"Vim wiki\" link above."}, {:name=>"Get-Win32-Short-Name", :summary=>"Works out the 8.3 short-name of an existing file", :description=>"Since writing this, I've discovered heaps about short names.  There are many caveats, but the biggest 3 are:\n1) After the first 4 similar names, windows uses a hash algorithm to work out the 3rd-6th letters of the name.\n2) Samba uses a different hash algorithm to work out the short name\n3) There is a Win32 API function call to set the short name of a file.\n\nThis script contains a function that works out only simple win32 8.3 short versions of a filename.  It will\nwork unless there are more than 4 files with the same name.\n\nI have since written a patch for Vim6.1 which will allow windows users acces to the short-filename via the api call... expect it soon.. (via fnamemodify and probably using the modifier :8 )\n\nNOTE: This is part of Vim 6.1 - \n     echo fnamemodify( 'c:\\vim\\plugins\\shortname.vim', ':8') \n\nEg\necho GetWin32ShortName('c:\\vim\\plugins\\shortname.vim')\n\nshould produce:  c:\\vim\\plugins\\shortn~1.vim\nor something like that.\n\n"}, {:name=>"Get-UNC-Path-Win32", :summary=>"Get/Yank a UNC pathname using 'net share'", :description=>"The function GetUNCPathOf  tries to find a UNC pathname for a given file by searching the 'net share' list.\nIf it fails, it returns the filename it was passed.\n\nThe map <localleader>yf  yanks the filename into \"*  - the clipboard, for use in emails or browsers.\n\nUseful for placing filenames into intranet emails.\n\n//.ichael G."}, {:name=>"pythonhelper", :summary=>"Displays Python class, method or function the cursor is in on the status line", :description=>"Vim script to help moving around in larger Python source files. It displays current class, method or function the cursor is placed in in the status line for every python file. It's more clever than Yegappan Lakshmanan's taglist.vim because it takes into account indetation and comments to determine what tag the cursor is placed in and from version 0.80 doesn't need exuberant ctags utility.\n\nNote: The script displays current tag on the status line only in NORMAL mode. This is because CursorHold event in VIM is fired up only in this mode. However if you'd like to know what tag you are in even in INSERT or VISUAL mode, contact me (email specified in the script) and I'll send you a patch that enables firing up CursorHold event in those modes as well."}, {:name=>"javaGetSet.vim", :summary=>"This will createGet/set methods automatically for a Java class.", :description=>"This will create Java Get/set methods for a bean.  \nThe motivation was a fellow who told me Rational Rose was superior to vim because it could automatically create get/set methods for a bean given properties. So I cranked this out.\n\nThis requires Java Syntax be on and works with 6.1\nThe process is to first create your properties (for example: int id; String userName;) and  let this make the methods. It requires some manual work, but not much.  You need to put the datatype in buffer 'a' and the property in buffer 'b'  For example, say you have this:\n\npublic String foo, bar, baz;\n\nYank word \"String\" into buffer 'a' and if you want to make get/set for foo,\nyank word \"foo\" into buffer 'b'.  Then go to where you want the get/set\nmethods and type <ctl>gs and the methods with Javadoc are created. \nTo do \"bar\" next, just replace buffer 'b' with \"bar\".  So, with \"String\" in buffer 'a' and 'foo' in buffer 'b' Doing this: <ctl>gs  will give you this:\n\n\n   /**\n    * Get foo.\n    *\n    * @return foo as a String \n    */\n   public String  getFoo()\n   {\n      return(foo);\n   }\n\n   /**\n    * Set foo.\n    *\n    * @param The foo as a String \n    */\n   public void setFoo(String  foo)\n   {\n      this.foo = foo;\n      return;\n   }\n\n\nPretty cool, huh?"}, {:name=>"copycppdectoimp.vim", :summary=>"Expanded version of VIM-TIP#335 - Copy C++ function declaration into implementat", :description=>"Ment for cpp class member functions, also works for normal c functions; modify for others...\nThis is not perfect, but works pretty good. -- Works out of the box, however you may want to customize it some. Customization is as easy as defining some global vars...\n\n\" OPTIOINAL: Place something like the below in your .vimrc or where ever you like to keep your global option vars and change as desired.\n\" Note, these are the defaults.\n\"*****************************************************************\n\" GHPH Options: {{{\n\"*****************************************************************\n\" See copycppdectoimp.vim for more documtation.\n\" Virtual: 1 for commented, else removed.\nlet g:ghph_ShowVirtual                    = 0\n\" Static:  1 for commented, else removed.\nlet g:ghph_ShowStatic                     = 0\n\" Default Params: 3 for /*5*/, 2 for /* = 5*/, else removed.\nlet g:ghph_ShowDefaultParams     = 3\n\" Command: 1 to define :GHPH (default if nothing defined), 0 to NOT define.\nlet g:ghph_useGHPH                       = 1\n\" Command: 1 to define :GH and :PH, 0 to NOT define.\n\"let g:ghph_useGHandPH               = 1\n\" }}}\n\n\n:GHPH when in a header file (.h) and on a member function decloration.\nThen :GHPH when in a source file (.cpp or the like) where you want the properly expanded implimentation of the member function.\n(There is also :GH and :PH or :GHPH g :GHPH p as alternitive methods of using this, see below.)\n\nPlease see the comments in the file for more info.\n\nExample:\nclass CTest\n{\n    void Test_Member_Function_G(\n        int        _iSomeNumber,                //!< doxy comment\n        char    * _cpSomeString,            //!< Same\n        float    /*_fNotused*/,        //!< not used param. Heh aka error stress test.\n        int        _iFlags = 0            /*!< I think */\n        );    // yea whatever.\n}\n// nested classes/structs and inlined functions supported.\n// If you have something you want to work but doesnt email me an I'll see if I can get it to.\n\nPlace cursor on line with 'Test_Member_Function_G' and :GHPH\nPlace cursor in .cpp file where you want function and :GHPH gives you:\nvoid CTest::Test_Member_Function_G(int _iSomeNumber, char * _cpSomeString, float /*_fNotused*/, int _iFlags/*0*/)\n{\n}\nWith your cursor on the opening brace ready for a o\n\nHow static, virtual and default params are comented in the function are configurable (can totally remove them if you like), See the file for more info.\n\nNote that you call :GHPH twice (I was playing with this idea--one less thing to remember) The function decides what to do based on the file extension (only .h at the moment but easy to change/add more). If you like it is as easy as unreming the command definitions to get :GH and :PH.\n\nYou can overide :GHPH's attempt to be clever and force getting the definition or putting the implimentation via :GHPH g and :GHPH p respectivly.\n\nAlthough still a work in progress it both functions and behaves well.\n\n\nTo TRY this all you need to is place this in your ftplugin/cpp directory and then :GHPH on a member function and :GHPH in the source file. Don't like it? remove the file from ftplugin/cpp\n\n\nThanks to Leif Wickland for VIM-Tip#335 from which this file derived.\nSee: http://vim.sourceforge.net/tip_view.php?tip_id=335\n\nWhat YOU would like to see in this script wanted, drop me an email.\nHappy VIMing!"}, {:name=>"cppgetset.vim", :summary=>"Convert a data type definition into get/set data members.", :description=>"Ment for c++ class data members; modify for others...\nDoes not work with static data members. (see comment in script, easy enough to rem out the check if you like)\n\nThe Although inserting both get and set member functions is currently hard coded the format (brace format and some buityfication of the var name) is handled by optional global option vars. NOTE you do not have to define anything unless you want different ouput from the default.\n\nNOTE this sniplet is in the .vim file\n\"Place something like the below in your .vimrc or where ever you like to keep\n\"    your global option vars and change as desired.\n\"\"\n\"\"*****************************************************************\n\"\" GETSET Options: {{{\n\"\"*****************************************************************\n\"\" You are welcomed to email me if there is another format you would like for\n\"\"    this, please include example code!\n\"\" See cppgetset.vim for more documtation.\n\"\" Member Function Name Prefix:\n\"\"        0 for (default)\n\"\"            \"Get_\"\n\"\"            \"Set_\"\n\"\"        else\n\"\"            \"get\"\n\"\"            \"set\"\n\"let g:getset_StyleOfGetSetMethod                 = 1\n\"\" Brace Style:\n\"\"        0 for (default)\n\"\"            func()\n\"\"            {\n\"\"            }\n\"\"        else\n\"\"            func() {\n\"\"            }\n\"let g:getset_StyleOfBraces                       = 1\n\"\" HowTo Trim Var Prefix:\n\"\"        1 for (default)\n\"\"            if Var prefix is m_ remove the m so the prefix is _\n\"\"            else prepend _\n\"\"        2 for\n\"\"            Prepend _\n\"\"        else\n\"\"            do not modify Var\n\"\"    I.e.\n\"\"        0 = m_lFlags    ->    m_lFlags\n\"\"            mlFlags     ->    mlFlags\n\"\"        1 = m_lFlags    ->    _lFlags\n\"\"            mlFlags     ->    _mlFlags\n\"\"        2 = m_lFlags    ->    __lFlags\n\"\"            mlFlags     ->    _mlFlags\n\"let g:getset_Trim_VarPrefix                      = 2\n\"\" Howto Trim Member Function Name Var Prefix:\n\"\"        1 for (default)\n\"\"            Remove m_\n\"\"        2 for\n\"\"            Remove m\n\"\"        else\n\"\"            do not modify Var\n\"let g:getset_Trim_MemberFunctionNameVarPrefix    = 2\n\"\" }}}\n\"\"\n\n\n\n\n\nExample:\nclass CTester\n{\n    char    m_caBuffer[_MAX_PATH];\n    int        m_iLenBuffer; // 2\n    long    m_lFlags;\n    // Static member declaration.\n    // [Feral:275/02@15:02] this SHOULD abort out;\n    static long m_bytecount;\n}\nPlace cursor on line with m_caBuffer and :GETSET\nPlace cursor in .cpp file where you want the get/set member function implimentations and :GETSET gives you:\n\n\n// {{{\n/*!\n * \\brief    Get m_caBuffer.\n *\n * \\return    m_caBuffer as a char.\n */ // }}}\nchar CTester::Get_caBuffer()\n{\n    return(m_caBuffer);\n}\n\n// {{{\n/*!\n * \\brief    Set m_caBuffer.\n *\n * \\param    _caBuffer    The new value for m_caBuffer (as a char).\n */ // }}}\nvoid CTester::Set_caBuffer(char _caBuffer)\n{\n    m_caBuffer = _caBuffer;\n    return;\n}\n\n\nNote in this example in particular you'll probably need to edit the actual code to get/set but this is a nice fast starting spot...\nNote the comment method used is suitable for Doxygen (I think!) easy enough to change though, email me and I'll add support for others... provide examples though!\n\nNote that you call :GETSET twice (I was playing with this idea--one less thing to remember) The function decides what to do based on the file extension. If :GETSET's attempt at being clever is incorect, or you want to place inline member functions you can easily overide what :GETSET does with the optional params g (get), p (put), i (inline), thus to place inline memberfunctions you :GETSET i\n\nInspired by javaGetSet.vim by Tom Bast See: http://vim.sourceforge.net/script.php?script_id=436\nRegister pasting origial idea from one of them scripts at vim.sf.net :)\n\nAlso be sure to look at Luc Hermitte's cpp_InsertAccessors.vim (See: http://hermitte.free.fr/vim) it is basicaly superior (but a bit larger)\n\nHappy VIMing!"}, {:name=>"titlecase.vim", :summary=>"Convert range or visual to titlecase.", :description=>"Sample:\nGiven:\nChange a range or visual to title case, i.e.\n\":TitleCase<CR>\" results in:\nChange A Range Or Visual To Title Case, I.E.\n\nThis simple changes (via :s) \\<\\l (start of word, lowercase a-z) to uppercase. Probably not perfect Titlecase but works good enough for a quickie!\n\nRemaps (with no elegance) <F5> to FeralTitleCase_Visual, change as desired.\n\nVisual method works for single line visuals only, multi line it tries to be clever and makes a mess.. use with caution, single (part of) line works fine though. (needs to have a check that say I don't do multi line visuals!; or only char wise visuals or something).\nRange Command (defaults to current line) is:TitleCase\nIts small, crude and dirty. But it works :)\n\nHappy VIMing!"}, {:name=>"stata.vim", :summary=>"vim syntax file for Stata programs", :description=>"stata.vim is a syntax file for Stata do and ado programs.\n\nThis syntax file will help identify:\n\n* some common Stata programming commands\n* Stata functions\n* local and global macro expansions\n* regular (\"\") and compound (`\"\"') double quotes\n* numeric and string formats \n* Stata comments\n* errors in parens, brackets, ...\n"}, {:name=>"localvimrc", :summary=>"load subdirectory specific vimrc files", :description=>"Sometimes, when you work on different projects, you have the problem, that they use different indentation, tab expansion and so on. You need vimrc for each project that overrides your prefered settings from ~/.vimrc\n\nThis plugin searches for local vimrc files in the filesystem tree of the currently opened file. By default it searches for all \".lvimrc\" files from the file's directory up to the root directory and loads them in reverse order. The filename and amount of loaded files is customizable through global variables.\n\nVariables:\n\ng:localvimrc_name\n  Filename of local vimrc files. Defaults to \".lvimrc\".\n\ng:localvimrc_count\n  On the way from root, the last localvimrc_count files are sourced. Defaults to -1 (all)\n\ng:localvimrc_sandbox\n  Source the found local vimrc files in a sandbox for security reasons. Defaults to 1.\n\ng:localvimrc_ask\n  Ask before sourcing any local vimrc file. Defaults to 1.\n"}, {:name=>"lilac.vim", :summary=>"A mixture of navajo-night.vim and xian.vim (GUI only)", :description=>"A mixture of navajo-night.vim and xian.vim (my previous post, too *pastel*).\nNo support for cterm (GUI only).\n\nTested on:\n * LCD (advisable Contrast & Brightness @ ~25%)\n * CRT (advisable Contrast & Brightness @ ~75%)\n\nAims at:\n * minimized colors allocation (12 colors only )\n * reduced eye impact and save energy (no #FF, #F0 is the max authorized)\n * better looking folding and diff mode than xian.vim (tastes may vary)\n * while keeping most good looking colors from navajo-night (mostly the bg is different)\n\nPlease feedback to christian_michon@yahoo.fr for color tweaking and suggestions for\nenhancements.\n\nThanks to the authors of navajo-night.vim and Shantonu for his background color ;)\n\nChristian\nZZ"}, {:name=>"spacehi.vim", :summary=>"Togglable syntax highlighting of tabs and trailing spaces.", :description=>"This plugin will highlight tabs and trailing spaces on a line, with the ability to toggle the highlighting on and off. Using highlighting to illuminate these characters is preferrable to using listchars and \"set list\" because it allows you to copy from the vim window without getting listchars shrapnel in your buffer.\n\nThe highlighting is done on a per buffer basis, and can be toggled on and off easily (the default binds to F3 if it&#039s unbound).\n"}, {:name=>"deldiff.vim", :summary=>"Delete blocks out of unified diffs", :description=>"This script provides \"did\" and \"dad\" which work like \n\"dib\" or \"dip\" but for unified diffs.\n\"did\" deletes \"@@  ..\" surrounded blocks from a diff file.\n\"dad\" deletes the complete diff for one file.\nSee the script for more detailed behaviour.\nThey have proved to be invaluable for me as I often have to deal with unfied diffs."}, {:name=>"Syntax-for-the-BETA-programming-language", :summary=>"Syntax file for BETA", :description=>"Syntax file for the BETA programming language. You can find a free compiler at www.mjolner.com."}, {:name=>"JavaDecompiler.vim", :summary=>"Automatically decompiles java class files and displays java code.", :description=>"When you edit a .class file using vim, this plugin will decompile the class file for you and display it in the current buffer.\n\nAdmittedly, the buffer management is not very robust, but it's a very handy plugin nonetheless.  How much cooler is it to view decompiled code using your favorite editor than to download a new UI to view Java code in?!"}, {:name=>"exim.vim", :summary=>"syntax highlighting for exim.conf", :description=>"Syntax highlighting for Exim configuration file exim.conf."}, {:name=>"java_checkstyle.vim", :summary=>"Integrates Checkstyle with Vim", :description=>"The java_checkstyle.vim filetype plugin script integrates Checkstyle\nhttp://checkstyle.sourceforge.net/ with Vim.  \"Checkstyle is a\ndevelopment tool to help programmers write Java code that adheres to a\ncoding standard\" (from the Checkstyle home page).  This plugin allows a\nuser to run Checkstyle on the current Java file, putting the results in an\nerrorfile and jumping to the first Checkstyle error.\n"}, {:name=>"gmt.vim", :summary=>"GMT (Generic Mapping Tools)", :description=>"gmt.vim provides basic support for Generic Mapping Tools (GMT) shell scripts. As those scripts have no standard name y propose '.gmt' as a way to identify them. Indeed it is the only way to detect them.\t\t "}, {:name=>"xhtml.vim", :summary=>"keyboard shortcuts and GUI menu for xhtml tags", :description=>"This script creates shortcuts for most xhtml tags, and in gvim it adds a menu for the various tags.  Shortcuts are triggered by the semicolon.  For example ;li will create open and close \"list item\" tags and leave the cursor between them.  Similarly ;im creates an image tag and leaves the cursor in the first field.\n\nCtrl-J is bound to a kind of \"jump\" and will generally place the cursor at the next place you would want to type (the next field or the place just before the next tag starts).\n\nThere are bindings for the 3 modes; command mode, insert mode, and visual mode; as well as some special characters like ;cp (copyright symbol) and ;< (less than symbol)."}, {:name=>"EasyAccents", :summary=>"Easy accents while you type: a' a` c, etc.", :description=>"EasyAccents makes entering accented characters easy in insert mode.  Of course there are many European keyboards that have accented characters on keys, but US-style keyboards don't.  During insert mode,  a' becomes an accented a, etc.  It works with utf8 encoding.\n\nEasyAccents may be toggled on and off with:\n  :EZA\n\nYou can get just the two characters o', for example, by simply escaping the ':  o&#039 -> o'\n\nHistory/Features:\n\nv5: included g:EasyAccents_VowelFirst option\n    fixed insert vs append bug\n\nv4: EasyAccents handles a' a` A' o: etc : during insert mode, these pairs of\ncharacters become the associated accented characters.  Use <Leader>ea (\\ea) to\ntoggle EasyAccents on and off.  Especially helpful for US style keyboards.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#EASYACCENTS)\n"}, {:name=>"draw.vim", :summary=>"Draw rectangles and lines using blockwise Visual selection.", :description=>"This plugin allows you to draw rectangles and lines using blockwise Visual mode, which makes it ideal for drawing tables and such. Simply move the cursor to the start position, hit CTRL-V to enter blockwise Visual mode and move the cursor to define the rectangle or line. Finally, type <leader>d to draw the rectangle or line. If you don't know what <leader> is, \\d should do the trick. This script supports UTF-8 as well as PC-8 boxdrawing characters, and checks the value of 'encoding' to determine which it should use. If you use a single byte character set other than ECS/PC-8 which includes boxdrawing characters, please notify me so I can add support for it.\n\nNote: I strongly recommend \":set virtualedit+=block\" when using this script, so you can define rectangles beyond the end of the line."}, {:name=>"HTML.zip", :summary=>"HTML/XHTML editing macros and menus", :description=>"This is a set of HTML/XHTML mappings and menus for Vim 7 or later. The mappings will be local to the buffer so they won't interfere if you edit other files in the same Vim session.\n\nThe macros are automatically insert a tag and position the cursor at the logical insert point.  For example, in insert the mapping \";ah\" inserts <A HREF=\"\"></A> and leaves the cursor between the double quotes.  If you were to visually highlight some text then type \";ah\" it would wrap the tag around the text.  For example:\n        some text\nBecomes:\n        <A HREF=\"\">some text</A>\nWith the cursor positioned between the double quotes in insert mode. Or if you used \";aH\" instead:\n        <A HREF=\"some text\"></A>\nWith the cursor positioned between the > and the < in insert mode.\n\nThere are many other features, such as a configurable template inserted with the \";html\" normal mode macro, browser remote control mappings, etc.\n\nSee http://christianrobinson.name/vim/HTML/faq.shtml for frequently asked questions.\n\nSee http://christianrobinson.name/vim/HTML/HTML.html to preview the help file."}, {:name=>"sql.vim--Fishburn", :summary=>"ftplugin for SQL (Common for Oracle, Microsoft SQL Server, Sybase, ...)", :description=>"This file should only contain values that are common to all SQL languages Oracle, Microsoft SQL Server, Sybase ASA/ASE, MySQL, and so on.\n\nAttention Vim7 users\n-----------------------------\nVersion 1.0 has been included with Vim7.0.  It adds additional functions to allow you to choose which SQL dialect to load by default, or per buffer.  See :h sql.txt for more details.\nVersion 0.04 is included with Vim 6.3.\n\nPatterns have been defined for the matchit plugin, to use the % command to match statements.  Supported patterns are:\n        begin\n        end\n                                   \n        if\n        elseif | elsif\n        else [if]\n        end if\n                                   \n        [while condition] loop\n            leave\n            break\n            continue\n            exit\n        end loop\n                                   \n        for\n            leave\n            break\n            continue\n            exit\n        end loop\n                                   \n        case\n        when \n        when\n        end case\n                                   \n        merge\n        when not matched\n        when matched\n                                   \n        EXCEPTION\n        WHEN column_not_found THEN\n        WHEN OTHERS THEN\n\nDefine how to find the macro definition of a variable using the various\n[d, [D, [_CTRL_D and so on features ( see :h [d )\n\nMatch these values ignoring case:\nie  DECLARE varname INTEGER\n\nAdded additional buffer mappings which work in both normal and visual mode:\n        ]] - next BEGIN\n        [[ - previous BEGIN\n        ][ - next END\n        [] - previous END\n\nThe following mappings also work in normal and visual mode.\nA global variable has been defined to control the behaviour of these maps.  You can override this variable in your vimrc file if it is not complete, or as new objects are added to other databases.\n    let g:ftplugin_sql_objects = 'function,procedure,event,' .\n                \\ '\\(existing\\\\|global\\s\\+temporary\\s\\+\\)\\?table,trigger' .\n                \\ ',schema,service,publication,database,datatype,domain' .\n                \\ ',index,subscription,synchronization,view,variable'\n\n        ]} - Next CREATE statement (of the above types)\n        [{ - Previous CREATE statement (of the above types)\n\nThese mappings also work in both normal and visual mode.\n        ]\" - Next comment\n        [\" - End of previous comment \n\n"}, {:name=>"php_abb", :summary=>"abbreviations for php functions", :description=>"php_abb is a ftplugin for php, mostly providing insert mode abbreviations\nfor php builtin functions and control structures.  These abbreviations\nexpand to function stubs and should help you remember the syntax in\naddition to speeding typing.  A map-like function that does a number of\npossibly obtuse things is also included.\n\nThe insert mode abbreviations come in two falvors: those using the raw\nphp function name (these can be disabled) and those prefixed with g:phpLeader.  \nSee the help file for details.\n\nThe phpActOnVariable function performs a number of activities on the php\nvariable under your cursor at the time the function is executed.  You should\ncreate a map to this function.  As an example of how you would use this, say you\nhave mapped it to <leader>m and you have your cursor on any letter in the word\ntest in the following code:\n\n     $test = \"FooBaR\";\n\nIf you then type <leader>m and strtl<cr> a new line will be opened underneath\nand the following code will be inserted:\n\n     $test = strtolower($test);\n\nYou can see a list of all the mappings for this function by executing the\nfunction and entering '?' when prompted."}, {:name=>"xgen.vim", :summary=>"XML-Element generator for HTML, DTD, SVG, XSLFO, XSLT and XML-Schema", :description=>"\" Overview\n\" --------\n\"\n\" xgen.vim generates a menu for GENeration Xml-Element templates\n\" for different W3C-Recommondations.\n\"\n\" In addition to generation you can browse through the\n\" recommendation structure and have some simple but useful commands.\n\"\n\" You can find the following recommondations in the xGen-menu\n\" if they are enabled. Each one can be enable and disabled in\n\" this menu. If all an enable, the performance might be influenced.\n\" \n\" dtd:  Document Type Definitions for XML 1.0\n\"\n\" fo:   Extensible Stylesheet Language (XSL) Version 1.0\n\"       Recommendation 15 October 2001\n\"\n\" html: Extensible HTML version 1.0 Strict DTD\n\"\n\" svg:  SVG 1.0 2001 September 04\n\"\n\" xsd : XML Schema \n\"       Recommendation, 2 May 2001 \n\"\n\" xsl : XSL Transformations (XSLT) Version 1.0\n\"       Recommendation 16 November 1999\n\"\n\"\n\"\n\"\n\" XML-menu structure\n\" --------------\n\"\n\" TEMPLATES  : to generate some of my favourite templates\n\" MIN        : to generate the element with all required attributes\n\" MAX        : to generate the element with all attributes\n\" ------------\n\" ROOTS      : shows all root-elements and generates them, including\n\"              the <?xml ... and the xmlns\n\" BROWSE     : shows all possible child element for all elements,\n\"              so you can analyse the structure\n\" ------------\n\" FILL       : after creation, the elements are empty with a \n\"              closing />. Use FILL to splitt the element\n\" >>         : the creation in done in the next line. Often\n\"              it is useful to shift the new element to the right\n\" <<         : to correct a shift to the left\n\" AUTOINDENT : normaly generation is most efficient with autoindent\n\"\n\"\n\" DTD-menu structure\n\" ------------------\n\"\n\" For DTD, only MIN, AUTOINDENT, >> and << are suported.\n\"\n\" The MIN-Structure inside the dtd.MIN, can be used in a\n\" comparable way. The items sould be \"self explaining\". Some\n\" specials are:\n\" \n\" ATTRIBUTE-FIXED    : CDATA FIXED\n\" ATTRIBUTE-IMPLIED  : CDATA IMPLIED\n\" ATTRIBUTE-REQUIRED : CDATA REQUIRED\n\" ATTRIBUTE-VALUE    : CDATA VALUE\n\" ATTRIBUTE-VALUE-*  : replaces \" CDATA \" in the for about cases\n\"\n\" DOCTYPE-EXTERNAL   : external SYSTEM DOCTYPE\n\" DOCTYPE-MIXED      : mixed SYSTEM DOCTYPE\n\" DOCTYPE-PUBLIC     : replaces \" SYSTEM \" to PUBLIC in the two\n\"                      above cases\n\""}, {:name=>"noweb.vim", :summary=>"folding noweb documents.", :description=>"Folds noweb code chunks."}, {:name=>"PCP-header", :summary=>"Templating/Header updating automation", :description=>"This plugin provides templating and automatic header updating capabilities to Vim. Header writing enables Vim to automatically write and update headers to arbitrary filetypes.  It works by a templating method, where the user provides standardized templates and when editing a new file Vim will check if a template exists for the 'filetype' and use it.  The user will then be asked to fill in some information before starting to edit the file and Vim will then use this information to generate a new file from the template. Blah, blah, ...simply download, install, run :helptags and read the provided documentation with\n             :help header-qstart\n"}, {:name=>"vim-templates", :summary=>"Handling of templates and Pre/Post editing commands", :description=>"This package can read/generate templates throught functions defined in ftplugins for that filetype.\n\nAlso here is functions which throught autocommands performs actions from that ftplugin.\n\nDocumentation and some examples are in package archive."}, {:name=>"rrd.vim", :summary=>"Edit RRD data with Vim.", :description=>"The RRD.vim package is a vim module that acts as a frontend to manipulating the data from a round-robin database created by Tobi Oetiker's excellent  RRDTool program. It uses rrdtool to export the data into XML which it syntax highlights, and to re-import it again once you have made your changes. For a full description see the README_rrdplugin.txt file."}, {:name=>"TTCoach", :summary=>"Utility to train touch typing skills", :description=>"Detailed help in ttcoach.txt.\nInstall :help add-local-help\n\nThis plugin is very similar to to other touch type training programs and provide simple statistics (chars per minute, time, faults, faults per key and finger)"}, {:name=>"nw.vim", :summary=>"Simple syntax highlighting for NOWEB files.", :description=>"\"nw.vim\" provides a simple syntax highlighting for NOWEB source files.\n\nNOWEB is a collection of tools for \"Literate Programming\". Unlike WEB or CWEB it is not bound to a specific programming language like PASCAL or C.\n\nFor more informations about NOWEB, the sources or binary distributions\nhave a look at\n\nhttp://www.eecs.harvard.edu/~nr/noweb\n\nFor informations about \"Literate Programming\" in general\n\nhttp://www.literateprogramming.com\n\ncould be a place to start.\n"}, {:name=>"rainbow.zip", :summary=>"color scheme package", :description=>"This is color scheme package including 7 files."}, {:name=>"VB-Line-Number", :summary=>"Translate Line #'s reported by vb command line to source code line", :description=>"When the VB command-line compiler reports errors, the line #s are as if you were editing in the VB editor.\n\nThis script translate Line #'s reported by vb command line to the actual source code line.\n\nSimply type  <VBline#>gvb  or  :VGO <VBLine#>  \nand you go to the corresponding line in the VB code.\n"}, {:name=>"vimspell", :summary=>"ispell or aspell based spell checker with fly-spelling", :description=>"***** note to VIM 7 users ! *****\nVersion 7 of vim integrates a native spellchecker which outperforms  vimspell script.\nAs such I will not maintain anymore vimspell script, and you are advised to delete all\nrelated files from your plugin/ and doc/ directory, and use the native spellchecker instead.\n******************************\n\nThis script is based on Claudio Fleiner's spell checker and uses ispell (or aspell) \nto highlight spelling errors, and provides mappings (including a popup menu opened \nby right clicking on a mispelled word) to correct them, with suggestions. \n\nIt is possible to set up the script to do automatic spellchecking (à la\nword --- the current visible window is checked, and errors are highlighted on the fly).\nFor that, just redefine the spell_auto_type variable (let spell_auto_type=\"tex,doc,mail\") in such a maner \nthat all the filetypes for which you want on the fly spell check are listed (\"none\", and \"all\" token are treated).\n     \nMuch more documentation on all options can be found at the beginning of the script, or \nafter having install it, by typing the command \":help vimspell\".\n\nFeedback (suggestions, bug report, questions,...) is welcome .... \n\nYou can subscribe to a mailing list to receive annoucement for new versions by sending a mail\nhere at vimspell.announce-request@ml.free.fr  with subscribe in the subject."}, {:name=>"perl_h2xs", :summary=>"Automate creating perl modules via h2xs", :description=>"The Perl_h2xs.vim plugin is a plugin that allows you to automate the process of perl module creation. Writing Perl modules with the recommended structure can be time consuming so this ftplugin automates the process by involking h2xs when you edit a non-existant .pm file. I.e.\n\n  vim Test::Bob.pm\n\nWill invoke h2xs -XAn Test::Bob, and if the module skeleton is created, will swap the edited file to Test/Bob/Bob.pm.\n\nThrough the use of variables, you can also set the plugin to create a MANIFEST.SKIP to exclude the CVS directories (and update the MANIFEST to include this new file) and to use CVS to import (or add) the newly created tree to a respository.\n\nIt works under windows and unix and you can even create .pm trees in another directory by specifying a directory name and module name in one. I.e.\n\n vim /usr/local/src/Test/Bob.pm\n\nwould create the module:\n\n /usr/local/src/Test/Bob/Bob.pm\n\nSee the readme file and help docs for detalis.\n\nEnjoy, this is me being lazy :)"}, {:name=>"emodeline", :summary=>"Set the file type from emacs -*- modelines -*-", :description=>"If a file contains\n\n# -*- sh -*-\n[...]\n\n&filetype will be automatically set to \"sh\". This is the Emacs way of saying # vim:ft=sh :)"}, {:name=>"VEC", :summary=>"Vim Extension Classes", :description=>"The VEC package is inteneded as a way to extend the functionality of the Vim Language in order to enable people to write more complex Vim scripts in shorter times.\n\nThe package currently contains the following functions:\n\n1. Array functions\n\nArray:Contains\nArray:Destroy\nArray:Exists\nArray:Get\nArray:GetElementCount\nArray:New\nArray:Pop\nArray:Push\n\n2. String functions\n\nString:Dup\nString:Occurances\n\nIt also contains some experimental, not documented code."}, {:name=>"fnaqevan", :summary=>"color scheme for overnight hacking", :description=>"yet another color scheme with dark background.\n\nLinux screenshot: http://rms.republika.pl/vim/fnaqevan.jpg\nWindows screenshot: http://rms.republika.pl/vim/fnaqevan1.jpg"}, {:name=>"HTML-Photo-Board", :summary=>"Generate a HTML Thumbnail Photoboard using ImageMagic", :description=>"Generates a table-based photoboard given either a directory of images, \nor a configuration file.  It makes use of imagemagic to resize the images \nfor both the 'expanded' and 'thumbnail' images.\n\nAt the moment, the table generated is simply a 'click to view image' type.\nThe script supports alt text, some headings, and changing of colours.\n\nDetailed description of how to use &c  is in the file itself.\nAny comments "}, {:name=>"cream-vimabbrev", :summary=>"Convert Vim script command and option names between full and abbreviated forms", :description=>"\n*** WARNING! ***\nThis script is very much a work in progress and has several known bugs and likely many unknown ones. You will find little automatic success with it. It is being provided here for information only. Be hereby warned that using these functions will tear valid Vim script limb from limb leaving a trail of crying and gnashing of teeth behind.\n\nThat said, we would very much appreciate your feedback on correcting said anamolies. Feel free to forward suggestions or fixes to:\n  digitect (at) mindspring \u0095 com\n\n\nDescription:\n\nThis script is currently one half of a set of functions to convert Vim command and option names between short/abbreviated and long/full name forms. (Ex. \"fu\" => \"function\", \"e\" => \"edit\") These are sometimes indicated like \"fu[nction]\" or  \"e[dit]\".\n\nThe script currently only converts from short to long. Based on my own preferences, I am less motivated to do the other side. ;) But I conceed it would be useful to have a polished routine to help going back and forth between the two for those with preferences for either readability or bandwidth conservation.\n\nThe script contains plenty of working debris at the bottom which shouldn't impact the code above. I have tried to be as complete as possible by using Vim's own syntax and option lists to compile the substitutions from. However you may notice omissions.\n\nDependancies:\n\nmultvals.vim (http://www.vim.org/script.php?script_id=171)\n  by Hari Krishna Dara, for the arrays of items to be substituted.\n\nToDo:\n\n* Avoid mapping syntaxes.\n* Avoid heinous \"normal af|g^\" => \"normal af|global^\" error\n* Avoid heinous \"normal j+r\" => \"normal j+read\" error\n* Add whitespace separators around evaluation operators and concatenation symbols.\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software.\n\n"}, {:name=>"mup.vim", :summary=>"MUP syntax file for musical score publication and auto-MIDI generation", :description=>"This is a first draft of syntax coloring/highlighting for the Mup file format.\nMup file format is a musical publication format by Arkkra Enterprise http://www.arkkra.com\nThis syntax file is not created/maintained by Arkkra Enterprise"}, {:name=>"BlockComment.vim", :summary=>"Simple commenting and uncommenting of blocks of code", :description=>"The goal behind BlockComment was to be able to comment and uncomment blocks of code easily and to nicely format the comment block.  \nMy initial inspiration was EnhancedCommentify (vimscript #23) and ToggleCommentify (vimscript #4) but I have since rewritten BlockComment from the ground up to simplify the code and provide for greater ease of use and maintainability.\n"}, {:name=>"SearchComplete", :summary=>"Tab completion of words inside of a search ('/')", :description=>"Call me lazy but I wanted to be able to tab-complete words while typing in a search and I have always been up to a challange.  After learning a lot more about vim and key mapping then I ever knew before, this is the result, working tab completion inside a search."}, {:name=>"LaTeX-Suite-aka-Vim-LaTeX", :summary=>"A rich set of tools for editing LaTeX", :description=>"Vim-LaTeX (aka LaTeX-suite) is a mature project which aims at bringing\ntogether the rich set of LaTeX tools the vim community has produced over\nthe years into one comprehensive package. It provides a set of tools\nwhich enable you to do all your LaTeX-ing without needing to quit Vim.\n\nVim-LaTeX has its own web-page at:\n\nhttp://vim-latex.sf.net/\n\nPlease visit there to get the latest version, documentation, screen shots etc.\n\nA brief (not complete) list of the features currently supported by\nVim-LaTeX are as follows:\n\n* Editing:  Latex-Suite ships with a very comprehensive set of insert\n  mode and visual mode mappings and menu items to typeset most of the\n  LaTeX elements. These range from 3 letter insert mode mappings which\n  insert a skeleton of common typesetting elements to visual mode\n  mappings which enclose the selected region in braces, parentheses,\n  etc. The mappings can also be accessed via the menus.\n\n* Compiling: You can compile the tex file from within vim. The list of\n  errors is shown in a quickfix window so you can directly go to the\n  location of an error. The compiler plugin can be dynamically\n  reconfigured to show you more or less warnings.\n\n* Viewing: By pressing a key from within vim, the .dvi viewer is started\n  up. You can also do forward and inverse searching on your .dvi file\n  from within vim.\n\n* Folding: Latex-suite ships with the plugin SyntaxFolds.vim which is\n  a plugin for creating \"fake\" syntax folds on the fly. The fold method\n  is actually manual but the folding is based on LaTeX syntax. This\n  offers a speed increase over regular syntax folding. When you open up\n  a LaTeX file, all the portions will be automatically folded up.\n\n* Packages: This module provides ways of customizing the menus based on\n  which packages are being used in the current LaTeX file. When\n  latex-suite first starts up, it scans the latex-master-file for\n  \\usepackage{name} lines and if the corresponding package is found in\n  the latex-suite/packages/ directory, then creates a sub-menu based on\n  the specification found in that file. See the list of currently\n  supported packages.\n\n* LaTeX help file: Latex-suite ships with the standard texinfo file\n  translated into vim help format so that you can get help for common\n  latex commands from within vim. You can view the html version of this\n  file here.\n\n* Dictionary: Latex-suite ships with a dictionary with over 600 LaTeX\n  commands, which speeds up typing using the CTRL-X_d command of vim.\n\n* Customized Templates: Latex-suite ships with some commonly used latex\n  templates. It is trivial to add your own templates. The templates can\n  contain dynamic data such as time of creation etc. See list of current\n  templates.\n\n* Customized Macros: Latex-suite makes it easy to add custom macros,\n  again with the possibility of dynamic content and automatic cursor\n  placement.\n\n\nSee\n\nhttp://vim-latex.sf.net/index.php?subject=weare\n\nfor the list of maintainers / how to contact us.Vim-LaTeX is currently maintained\nby\n\nSrinath Avadhanula\nMikolaj Machowski\nBenji Fisher\n\n"}, {:name=>"Transparent", :summary=>"Nice colorscheme for both, console and gui versions of vim", :description=>"Yet another colorscheme for vim. It uses dark dark blue background in gui and \"transparent\" in console (looks nice when vim is started from transparent aterm).\n\nScreenshots:\n\nGVim - http://people.altlinux.ru/~raorn/gvim-transparent.png (25K)\nVim (in transparent aterm) - http://people.altlinux.ru/~raorn/vim-transparent.png (245K)"}, {:name=>"python.vim--Herzog", :summary=>"python compiler script", :description=>"a very basic python compiler script. The last line of errorformat \n              \\%-G%.%#\nis meant to suppress all  further error messages after the traceback has been dealt with so that it will be possible to use :clast to go to the last error location which in most cases in Python is the one that has caused the error to happen. \nPlease note that if python is not in the path you have to edit the line \nsetlocal makeprg=python\nso that it contains the path of the python interpreter (e.g. c:\\python22\\python).\nAlso, if you want always to make the current file you may wish to add  a\n\\ %\nto the same line, so that:\nsetlocal makeprg=python\nshould then look like:\nsetlocal makeprg=python\\ %\n(Thanks to Guy Oliver for this tip).\n\nIf you want to syntaxcheck the current python file without executing it, you could use the following function (from python_box.vim):\n\nfunction! CheckPythonSyntax()\n  let curfile = bufname(\"%\")\n  exec \":make \" . \"-c \" . \"\\\"import py_compile; py_compile.compile(r'\" . bufname(\"%\") . \"')\\\"\"\nendfunction\n"}, {:name=>"aj.vim", :summary=>"Syntax highlighting for AsepctJ source files", :description=>"This is my first attempt to create a syntax file :).\nI am working with AspectJ lateley and decided to create a syntax file for the language.\nFor now, highliting takes care of all AspectJ keywords.\n\nAll AspectJ code should be inside a file with extension .aj\n\nTo learn more about AspectJ: http://aspectj.org"}, {:name=>"MultipleSearch", :summary=>"Highlight multiple searches at the same time, each with a different color.", :description=>"MultipleSearch allows you to have the results of multiple searches displayed\non the screen at the same time.  Each search highlights its results in a\ndifferent color, and all searches are displayed at once.  After the maximum\nnumber of colors is used, the script starts over with the first color.\n \nThe command syntax is: \n:Search <pattern1> \nwhich will highlight all occurrences of <pattern1> in the current buffer.  A\nsubsequent :Search <pattern2> will highlight all occurrences of <pattern2>\nin the current buffer, retaining the highlighting of <pattern1> as well.\n<pattern1> and <pattern2> are any search pattern like you would use in a\nnormal /<pattern> search.\n\nThe :Search command honors Vim's 'ignorecase' and 'smartcase' settings for\nits own search.  You can use the \\c and \\C flags in the search pattern to\nforce case matching no matter the setting of 'ignorecase' and 'smartcase'.\n\nThe :SearchBuffers command works just like :Search, but the search occurs in all currently listed buffers (i.e., appear in the output of :ls).  The match in all buffers will have the same color.  This is different than  :bufdo Search <pattern> because in that case, each buffer will highlight the match in a different color.  Thanks to Jeff Mei for the suggestion!\n\nTo clear the highlighting, issue the command\n:SearchReset (for the current buffer) or :SearchBuffersReset (for all buffers).\n \nYou can specify the maximum number of different colors to use by setting the\ng:MultipleSearchMaxColors variable in your .vimrc.  The default setting is\nfour, but the script should handle as much as your terminal / GUI can\ndisplay.  The g:MultipleSearchColorSequence variable lets you list the\ncolors you want displayed, and in what order.  To make the text more\nreadable, you can set the g:MultipleSearchTextColorSequence variable to a\nlist of colors for the text, each position corresponding to the color in the\nsame position in g:MultipleSearchColorSequence.\n\nIf you change one of the preference variables, you can issue the command\n:SearchReinit\nto update the script with your new selections."}, {:name=>"toothpik.vim", :summary=>"black on grey color scheme - gvim only - easy on the eyes", :description=>"i can look at black on grey all with without eye-strain -- these are not fancy, but they work"}, {:name=>"cscomment.vim", :summary=>"Automates creation of /// comments for C# methods", :description=>"This script will generate the /// comment blocks for csharp for methods and constructors.  Simply place the cursor anywhere on the first line of the function prototype and hit <c-t>.  It also works on properties, constructors and classes.\n\nAdds summary, remarks, params (for all the params in the function), value (if its a property), and returns (if the function returns something.)\n\nWhile in comment mode you can tab and shift-tab through the tags, and return and backspace work as they should (enter inserts /// on the new line and backspace erases /// in one bs)\n\nYou can get back into comment mode by hitting <c-t> on an existing doc comment.\n\nQuestions, comments, concerns, bugs, ideas, etc, drop me an email.\n"}, {:name=>"cuecat.vim", :summary=>"Driver for CueCat barcode scanner", :description=>"This is a driver for the CueCat barcode scanner that lets you scan barcodes straight into Vim's insert mode."}, {:name=>"tagexplorer.vim", :summary=>"Tag explorer for various programming language files", :description=>"Overview\n\nThe \"Tag Explorer\" plugin provides the following features:\n\n1. Opens a vertically/horizontally split Vim window with a list of files in\n   a directory. You can list all the tags (functions, classes, structures,\n   variables, etc) defined in a file. You can jump to the location where a\n   tag is defined. You can edit a selected file. You can browse through the\n   directories.\n2. Groups the tags by their type and displays them in a foldable tree.\n3. When a tag name is selected from the explorer window, positions the cursor\n   at the definition of the tag in the source file\n4. Can display the prototype of a tag from the tag explorer window.\n5. Displays the scope of a tag.\n6. The displayed tags can be sorted either by name or by line number.\n7. Supports the following programming language files: Assembly, ASP, Awk, C,\n   C++, Cobol, Eiffel, Fortran, Java, Lisp, Make, Pascal, Perl, PHP, Python,\n   Rexx, Ruby, Scheme, Shell, Slang, Sql, TCL, Verilog, Vim and Yacc.\n8. Runs in all the platforms where the exuberant ctags utility and Vim are\n   supported (this includes MS-Windows and Unix based systems).\n9. Runs in both console/terminal and GUI versions of Vim.\n\nThis plugin relies on the exuberant ctags utility to generate the tag\nlisting. You can download the exuberant ctags utility from\nhttp://ctags.sourceforge.net. The exuberant ctags utility must be installed\nin your system to use this plugin. Exuberant ctags version 5.3 and above is\nrecommended.  There is no need for you to create a tags file to use this\nplugin.\n\nInstallation\n\n1. Copy the tagexplorer.vim script to the $HOME/.vim/plugin directory.\n   Refer to ':help add-plugin', ':help add-global-plugin' and ':help\n   runtimepath' for more details about Vim plugins.\n2. Set the TE_Ctags_Path variable to point to the exuberant ctags utility\n   path.\n3. If you are running a terminal/console version of Vim and the terminal\n   doesn't support changing the window width then set the TE_Adjust_Winwidth\n   variable to 0.\n4. Restart Vim.\n5. You can use the \":TagExplorer\" command to open/close the tag explorer\n   window. \n\nUsage\n\nYou can open the tag explorer window using the \":TagExplorer\" command.\nInvoking this command will toggle (open or close) the tag explorer window.\nYou can map a key to invoke this command:\n\n              nnoremap <silent> <F8> :TagExplorer<CR>\n\nAdd the above mapping to your ~/.vimrc file.\n\nYou can close the tag explorer window from the tag explorer window by\npressing 'q' or using the Vim \":q\" or using one of the Vim window CTRL-W\ncommands.\n\nWhen the tag explorer window is opened, the names of all the directories\nand files in the current directory will be displayed.\n\nWhen a directory name is selected by pressing the <Enter> key or by double\nclicking with the mouse, the contents of the selected directory will be\ndisplayed. You can go to the parent directory by selecting the \"..\" entry.\n\nWhen a file name is selected by pressing the <Enter> key or by double\nclicking with the mouse, the selected file will be opened in a window.\n\nYou can display all the tags (variable, function, class, etc) defined in a\nfile using the 'o' command.  The tag names will grouped by their type\n(variable, function, class, etc) and displayed as a foldable tree using the\nVim folding support. You can collapse the tree using the 'c' command. You\ncan open the tree using the 'o' command.  You can also use the mouse to\nopen/close the folds. You can use the '+' and '-' keys to open and close the\nfolds for a tag type.\n\nYou can select a tag either by pressing the <Enter> key or by double\nclicking the tag name using the mouse.\n\nFor tags with scope information (like class members, structures inside\nstructures, etc), the scope information will be displayed in square brackets\n\"[]\" after the tagname.\n\nBy default, the tag list will be sorted by the order in which the tags\nappear in the file. You can sort the tags either by name or by order by\npressing the \"s\" key in the tag explorer window.\n\nYou can display the prototype of a tag by pressing <Spacebar> key when\nthe cursor is placed over a tag name.\n\nYou can update the tags listed for a file by pressing the 'u' key in the tag\nexplorer window.\n\nYou can open a different directory by using the 'g' command. You will be\nprompted to enter the name of the directory. You can recall the previously\nentered directory names by pressing the Up and Down arrow keys. The last\ndisplayed directory name will be the first available name in the history.\n\nTo get help on the keys, press the \"?\" key in the tag explorer window.\n\nThis script relies on the Vim \"filetype\" detection mechanism to determine\nthe type of the current file. To turn on filetype detection use\n\n              :filetype on\n\nThis script will not work in 'compatible' mode.  Make sure the 'compatible'\noption is not set.\n\nConfiguration\n\nBy changing the following variables you can configure the behavior of this\nplugin. Set the following variables in your .vimrc file using the 'let'\ncommand.\n\nThe plugin uses the TE_Ctags_Path variable to locate the ctags utility.  By\ndefault, this is set to ctags. Set this variable to point to the location of\nthe ctags utility in your system:\n\n              let TE_Ctags_Path = 'd:\\tools\\ctags.exe'\n\nBy default, the tag names will be listed in the order in which they are\ndefined in the file. You can alphabetically sort the tag names by pressing\nthe \"s\" key in the tag explorer window. You can also change the default\norder by setting the variable TE_Sort_Type to \"name\" or \"order\":\n\n              let TE_Sort_Type = \"name\"\n\nBy default, all the file names in a directory will be displayed in the\nexplorer window. If you want to display only selective filenames, you can\nset the 'TE_Include_File_Pattern' variable. If this variable is set to empty\nstring, all the files in the directory will be displayed. You have to set\nthis variable to a Vim regular expression pattern value. For example, to\ndisplay only .c and .h files, set this variable to\n\n              let TE_Include_File_Pattern = '.*\\.c$\\|.*\\.h$'\n\nYou can set the 'TE_Exclude_File_Pattern' variable to skip file names\nmatching a Vim regular expression pattern. For example, to skip the .o, .obj\n.bak, core and tags files, set this variable to\n\n              let TE_Exclude_File_Pattern = '.*\\.o$\\|.*\\.obj$\\|.*\\.bak$' .\n                                            '\\|.*\\.swp$\\|core\\|tags'\n\nBy default, all the sub-directory names in a directory will be displayed in\nthe explorer window. If you want to display only selective directories, you\ncan set the 'TE_Include_Dir_Pattern' variable. If this variable is set to\nempty string, all the sub-directories in the directory will be displayed.\nYou have to set this variable to a Vim regular expression pattern value.\nFor example, to include only those directories containing vim or unix in the\nname, use\n\n              let TE_Include_Dir_Pattern = '.*vim.*\\|.*unix.*'\n\nYou can set the 'TE_Exclude_Dir_Pattern' variable to skip directories\nmatching a Vim regular expression pattern. By default, this variable is set\nto empty. For example, to exclude all the directories starting with obj or\ncontaining test, use\n\n              let TE_Exclude_Dir_Pattern = 'obj.*\\|.*test.*'\n\nBe default, the tag names will be listed in a vertically split window.  If\nyou prefer a horizontally split window, then set the 'TE_Use_Horiz_Window'\nvariable to 1. If you are running MS-Windows version of Vim in a MS-DOS\ncommand window, then you should use a horizontally split window instead of a\nvertically split window.  Also, if you are using an older version of xterm\nin a Unix system that doesn't support changing the xterm window width, you\nshould use a horizontally split window.\n\n              let TE_Use_Horiz_Window = 1\n\nBy default, the vertically split tag explorer window will appear on the left\nhand side. If you prefer to open the window on the right hand side, you can\nset the TE_Use_Right_Window variable to one:\n\n              let TE_Use_Right_Window = 1\n\nYou can also open the tag explorer window on startup using the following\ncommand line:\n\n              $ vim +TagExplorer\n\nThe default width of the vertically split tag explorer window will be 30.\nThis can be changed by modifying the TE_WinWidth variable:\n\n              let TE_WinWidth = 20\n\nNote that the value of the 'winwidth' option setting determines the minimum\nwidth of the current window. If you set the 'TE_WinWidth' variable to a\nvalue less than that of the 'winwidth' option setting, then Vim will use the\nvalue of the 'winwidth' option.\n\nBy default, when the width of the window is less than 100 and a new tag\nexplorer window is opened vertically, then the window width will be\nincreased by the value set in the TE_WinWidth variable to accomodate the new\nwindow.  The value of this variable is used only if you are using a\nvertically split tag explorer window.  If your terminal doesn't support\nchanging the window width from Vim (older version of xterm running in a Unix\nsystem) or if you see any weird problems in the screen due to the change in\nthe window width or if you prefer not to adjust the window width then set\nthe 'TE_Adjust_Winwidth' variable to 0.  CAUTION: If you are using the\nMS-Windows version of Vim in a MS-DOS command window then you must set this\nvariable to 0, otherwise the system may hang due to a Vim limitation\n(explained in :help win32-problems)\n\n              let TE_Adjust_Winwidth = 0\n"}, {:name=>"ddldbl.vim", :summary=>"Delete Duplicate Lines and Delete Blank Lines.", :description=>"This is just a normal ol plugin; NOT ftplugin (there really should be a plugin option in the type field when adding a new script... *hint* *hint* :) )\n\nThis is a quick/simple implimtation to delete duplicate lines (:DDL) and delete blank lines (:DBL)\n\nBoth commands can take a range and DEFAULT TO THE ENTIRE FILE.\nBoth of these commands delete lines so be carefull!\n\n:DBL (delete blank lines) is little more than a command front end to a :g command.\n:DDL (delete duplicate lines) opens folds,  starts at th top of the range and goes down. For each duplicate line found it is :delete\nEnd result is you can select a portion of a file and quickily and easily delete blank lines and or delete duplicate lines."}, {:name=>"markjump.vim", :summary=>"Code transversal functions, move to prev/next marker, insert/strip markers.", :description=>"This is a normal PLUGIN not ftplugin.\n\nMarker chars are configurable.\nYou can define global or buffer variables to specify the marker chars for both left and right chars. Buffer vars if present are used before global chars \ng:L_Marker\nb:L_Marker\ng:R_Marker\nb:R_Marker\n\nThe default marker chars are the same as Luc Hermitte's bracketing.base.vim which is the same as Stephen Riehm's braketing macros. Which is to say «»\n\nIf you do not have digraphs enabled these chars are still easy to insert via \n<c-k><< which gives you  '«' and <c-k>>> which is '»' (far easier to use the included commands however)\n\n:MN        Search forward for the next occurance of marker chars\n:MP        Search backwards for the next occurance of marker chars\n:MI          Insert marker chars, usefull for <c-o>:MI text to have markers around it<cr>\n:MIV       Wrap the visual selection (single line) with marker chars\n:MA        Append marker chars (like a)\n:MAV     Same as :MIV\n:MS        Strip marker chars, positioning is a touch picky; place cursor in the markers and all is well.\n\nInsert mode mappings:\n<plug>MjMark         Defaults to `¡mark!`        Insert marker chars, cursor AFTER the marker chars.\n<plug>MjJump        Defaults to `¡jump!`        Jump to the next marker (as :MN)\n\nVISUAL mode mappings:\n<plug>MjMark         Defaults to `¡mark!`        Wrap marker chars around the selection. (as MIV)\n\nNOTE if you already have insert and or visual mappings for ¡mark!/¡jump! these will NOT be made.\n\nKey mappings:\n<plug>MjPrev           Defaults to <M-Insert> in normal, insert and visual.       Jumps to previous markers, as :MP\n<plug>MjNext             Defaults to <M-Del> in normal, insert and visual.        Jumps to next marker, as :MN\n<plug>MjInsMarker        Defaults to <M-m> in insert.       Shortcut for `<c-o>:MI ` Just hit <m-m>type your words<cr>\n\nIf there is gui and has menu adds the following plugin menu items:\nPlugin.markjump.Prev  Marker\nPlugin.markjump.Next Marker\nPlugin.markjump.Insert Marker\nPlugin.markjump.Append Marker\nPlugin.markjump.Strip Markers\n\nStrip markers mens to remove the marker chars from either side; cursor generally needs to be within the marker chars.\n\nThis script would not be what it is with out Luc Hermitte's input!"}, {:name=>"SAPDB_Pascal.vim", :summary=>"syntax highlighting for pascal source files from SAPDB", :description=>"Its used to highlight syntax for pascal source files from \"http://www.sapdb.org&quot;. Special SAPDB types and procedure calls are highlighted."}, {:name=>"Posting", :summary=>"Mappings primarily intended to ease preparing of USENET/eMail articles", :description=>"\"Posting\" provides a few mappings I once messed around with in order to ease preparing USENET/email articles with GVim."}, {:name=>"cream-keytest", :summary=>"Test and interpret keyboard characters returned by your hardware/software.", :description=>"\nTest and interpret individual keyboard characters. Useful to see exactly what code your hardware and software combination returns for a given keystroke. Where our interpretation table isn't complete, the actual decimal values for the key pressed are returned.\n\nNotes:\n\n* The interpretation table is currently unfinished. There are literally between 400 and 700 possible keystroke combinations on the average keyboard. Please look at the complete Ctrl/Shift/Alt combination interpretations of the Ins, Del, Home, End, PgUp, PgDn keys for an example of a full test.\n\n* This has only been tested with &encoding=latin1.\n\n* If you take the time to develop the script further, please forward your explorations or improvements them back to us! (Besides, that's what the GPL is all about. ;)\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software.\n\n"}, {:name=>"ManPageView", :summary=>"Viewer for manpages, gnu info,  perldoc, and php (unix/linux/cygwin)", :description=>"(Unix/Linux)\n\nThe <manpageview.vim> script allows vim to be used as a manpage viewer while one is inside vim.  Coupled with the tip \"Using vim as a man-page viewer under Unix\", available by clicking on vimtip#167, <manpageview.vim> gives a complete manpage viewing solution using vim!\n\nThe Man command will accept four formats for looking up a man page:\n\n    :Man topic\n    :Man topic booknumber\n    :Man booknumber topic\n    :Man topic(booknumber)\n\nIn addition, while in normal mode and with the cursor on some topic (system function) that you wish to look up, press the \"K\" key to invoke the manpage viewer.\n\nThe tip vimtip#167 addresses setting up man so that it invokes vim from the command line.\n\nManPageView supports display of info, perldoc (both system and embedded), php, and python help:.\n\n    INFO\n        :Man info.i\n\n    PERL  (requires the perldoc program)\n        :Man printf.pl\n        :Man cos.pl\n        :Man sprintf.pl\n\n    PHP  (requires the links program)\n        :Man printf.php\n\n   PYTHON: (requires pydoc)\n       :Man pprint.py\n\nManPageView \"knows\" what display tool to invoke by examining the suffix.  For perl, for example, g:manpageview_pgm_pl is (by default) initialized to perldoc.  Similar support is available for custom initialization, overriding the K map, providing a standard prefix or suffix, and specialized syntax highlighting.\n\n\nThank you for rating this script!\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#MANPAGEVIEW)\n\n\n\n"}, {:name=>"java_getset.vim", :summary=>"Automatically add getter/setters for Java properties (including array-based)", :description=>"This filetype plugin enables a user to automatically add getter/setter\nmethods for Java properties.  The script will insert a getter, setter,\nor both depending on the command/mapping invoked.  Users can select\nproperties one at a time, or in bulk (via a visual block or specifying a\nrange).  In either case, the selected block may include comments as they\nwill be ignored during the parsing.  For example, you could select all\nof these properties with a single visual block.\n\npublic class Test \n{ \n   // Start your selection here\n   private static int count;\n\n   /** The name */\n   private String name;\n\n   /** The array of addresses */\n   private String[] address;\n   // End your selection here\n\n   public static void main(String[] args)\n   {\n   }\n}\n\nThe script will also add the 'static' modifier to the method if the\nproperty was declared as 'static'.  Array-based properties will get\nadditional methods added to support indexing.  In addition, if a\nproperty is declared 'final', it will not generate a setter for it.\nIf a previous getter OR setter exists for a property, the script will\nnot add any methods (under the assumption that you've manually added\nyour own).\n\nThe getters/setters that are inserted can be configured by the user.\nFirst, the insertion point can be selected.  It can be one of the\nfollowing: before the current line / block, after the current line /\nblock, or at the end of the class (default).  Finally, the text that is\ninserted can be configured by defining your own templates.  This allows\nthe user to format for his/her coding style.  For example, the default\nvalue for s:javagetset_getterTemplate is:\n\n    /**\n     * Get %varname%.\n     * \n     * @return %varname% as %type%.\n     */\n    %modifiers% %type% %funcname%()\n    {   \n        return %varname%;\n    }\n\nWhere the items surrounded by % are parameters that are substituted when\nthe script is invoked on a particular property.  For more information on\nconfiguration, please see the section below on the INTERFACE.\n\nINTERFACE (commands, mappings, and variables) \nThe following section documents the commands, mappings, and variables\nused to customize the behavior of this script.\n\nCommands:\n  :InsertGetterSetter\n      Inserts a getter/setter for the property on the current line, or\n      the range of properties specified via a visual block or x,y range\n      notation.  The user is prompted to determine what type of method\n      to insert.\n  \n  :InsertGetterOnly\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block or x,y range\n      notation.  The user is not prompted.\n  \n  :InsertSetterOnly\n      Inserts a setter for the property on the current line, or the\n      range of properties specified via a visual block or x,y range\n      notation.  The user is not prompted.\n  \n  :InsertBothGetterSetter\n      Inserts a getter and setter for the property on the current line,\n      or the range of properties specified via a visual block or x,y\n      range notation.  The user is not prompted.\n\nMappings:\n  The following mappings are pre-defined.  You can disable the mappings\n  by setting a variable (see the Variables section below).  The default\n  key mappings use the <LocalLeader> which is the backslash key by\n  default '&#039.  This can also be configured via a variable (see below).\n  \n  <LocalLeader>p   (or <Plug>JavagetsetInsertGetterSetter)\n      Inserts a getter/setter for the property on the current line, or\n      the range of properties specified via a visual block.  User is\n      prompted for choice.\n  \n  <LocalLeader>g   (or <Plug>JavagetsetInsertGetterOnly)\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block.  User is not\n      prompted.\n  \n  <LocalLeader>s   (or <Plug>JavagetsetInsertSetterOnly)\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block.  User is not\n      prompted.\n  \n  <LocalLeader>b   (or <Plug>JavagetsetInsertBothGetterSetter) \n      Inserts both a getter and setter for the property on the current\n      line, or the range of properties specified via a visual block.\n      User is not prompted.\n  \n  If you want to define your own mapping, you can map whatever you want\n  to <Plug>JavagetsetInsertGetterSetter (or any of the other <Plug>s\n  defined above).  For example,\n\n      map <buffer> <C-p> <Plug>JavagetsetInsertGetterSetter\n\n  When you define your own mapping, the default mapping does not get\n  set, only the mapping you specify.\n\nVariables:\n  The following variables allow you to customize the behavior of this\n  script so that you do not need to make changes directly to the script.\n  These variables can be set in your vimrc.\n  \n  no_plugin_maps \n    Setting this variable will disable all key mappings defined by any\n    of your plugins (if the plugin writer adhered to the standard\n    convention documented in the scripting section of the VIM manual)\n    including this one.\n  \n  no_java_maps\n    Setting this variable will disable all key mappings defined by any\n    java specific plugin including this one.\n  \n  maplocalleader\n    By default, the key mappings defined by this script use\n    <LocalLeader> which is the backslash character by default.  You can\n    change this by setting this variable to a different key.  For\n    example, if you want to use the comma-key, you can add this line to\n    your vimrc:\n        \n        let maplocalleader = ','\n  \n  b:javagetset_insertPosition\n    This variable determines the location where the getter and/or setter\n    will be inserted.  Currently, three positions have been defined:\n        \n        0 - insert at the end of the class (default)\n        1 - insert before the current line / block\n        2 - insert after the current line / block\n\n  b:javagetset_getterTemplate\n  b:javagetset_setterTemplate\n  b:javagetset_getterArrayTemplate\n  b:javagetset_setterArrayTemplate\n    These variables determine the text that will be inserted for a\n    getter, setter, array-based getter, and array-based setter\n    respectively.  The templates may contain the following placeholders\n    which will be substituted by their appropriate values at insertion\n    time:\n         \n        %type%          Java type of the property\n        %varname%       The name of the property\n        %funcname%      The method name (\"getXzy\" or \"setXzy\")\n        %modifiers%     \"public\" followed by \"static\" if the property is static\n    \n    For example, if you wanted to set the default getter template so\n    that it would produce the following block of code for a property\n    defined as \"public static String name\":\n        \n        /**\n         * Get name.\n         * @return name as String\n         */\n        public static String getName() { return name; }\n    \n    This block of code can be produced by adding the following variable\n    definition to your vimrc file.\n        \n        let b:javagetset_getterTemplate =\n          \\ \"\\n\" .\n          \\ \"/**\\n\" .\n          \\ \" * Get %varname%.\\n\" .\n          \\ \" * @return %varname% as %type%.\\n\" .\n          \\ \" */\\n\" .\n          \\ \"%modifiers% %type% %funcname%() { return %varname%; }\"\n\n    The defaults for these variables are defined in the script.  For\n    both the getterTemplate and setterTemplate, there is a corresponding\n    array-baded template that is invoked if a property is array-based.\n    This allows you to set indexed-based getters/setters if you desire.\n    This is the default behavior.\n"}, {:name=>"debug.vim", :summary=>"Simple utility to assist in debugging vim scripts", :description=>"utility to help in debugging vim scripts\n  put this in the plugin directory\n  will add a new menu VIM->Debug->....\n    menu options \n      DebugOn - turns debug on - will display debug text in VIM scripts\n      DebugOff - turns debug off - will not display debug text in VIM scripts\n      Debug Status - displays debug status in status line\n      Insert Debug Text - insert debug text in vim scripts\n\nusage:\n  eg in following vim script\n\n1 fun! <SID>JavaImpGenerate()  \n2    let impfile = tempname()\n3    let currBuff = bufnr(\"%\")\n    \n  for debugging, insert debug text in above script as follows\n1 fun! <SID>JavaImpGenerate()  \n2    call Debug(\"entering JavaImpGenerate\")\n3    let impfile = tempname()\n4    call Debug(\"impfile = \" . impfile ) \n5    let currBuff = bufnr(\"%\")\n6    call Debug(\"currBuff = \" . currBuff ) \n\nThe debugging stubs in lines 2, 4, 6 will run only if Debug status is on."}, {:name=>"SQLUtilities", :summary=>"SQL utilities - Formatting, generate - columns lists, procedures for databases", :description=>"Various SQL Utilities.\n\nVersion 2.0 requires Vim 7.\n\n1. A SQL formatter, to make SQL statements (select, insert, update, delete...) more readable.   \n2. Based on create table statements, will generate select lists for a table, as long as the definition exists in some open buffer.\n3. Creates a generic procedure that will perform an insert, update, delete and select based on the definition of a table (if already open in some buffer).  The format is ANSI.\n4.  Returns the column datatype definition for a specified column name (or supplied) based on the definition of a table (if already open in some buffer).\n\nFunctions:\n[range]SQLUFormatter(..list..)\n                                                                            \n     Formats SQL statements into a easily readable form.\n     Breaks keywords onto new lines.\n     Forces column lists to be split over as many lines as\n     necessary to fit the current textwidth of the buffer,\n     so that lines do not wrap.\n     If parentheses are unbalanced (ie a subselect) it will\n     indent everything within the unbalanced paranthesis.\n     Works for SELECT, INSERT, UPDATE, DELETE statements.\n\n     Global variables to customization some aspects of the formatting:\n     sqlutil_align_where - aligns the =, >=, <=, ...\n     sqlutil_align_comma - places the column lists in select statement on new lines\n     sqlutil_align_first_word - see examples\n\n     You can change the case of the keywords while formatting.\n\n                                                                            \nExamples (these would look much better when using a fixed font):\n                                                                            \n  Original:\n  SELECT m.MSG_ID, m.PRIORITY_ID, CUST.CUST_NBR, CUST.CUST_NM, \n  CUST.CUST_LEGAL_NM, CUST.STORE_ADDR_1, CUST.STORE_ADDR_2, \n  CUST.CROSS_STREET, XMLELEMENT( 'Alerts', XMLELEMENT( 'Alert_alert_id', \n  alert_id ), XMLELEMENT( 'Alert_agent_id', agent_id ), XMLELEMENT( \n  'Alert_alert_type_id', alert_type_desc), XMLELEMENT( \n  'Alert_alert_date', alert_date), XMLELEMENT( \n  'Alert_url_reference', url_reference), XMLELEMENT( \n  'Alert_read_status', read_status )) CUST.STORE_CITY, \n  CUST.STORE_ST, CUST.POST_CODE, CUST.STORE_MGR_NM, FROM MESSAGES m JOIN \n  PRIORITY_CD P WHERE m.to_person_id = ?  AND p.NAME = 'PRI_EMERGENCY' AND \n  p.JOB = 'Plumber' AND m.status_id < ( SELECT s.STATUS_ID FROM \n  MSG_STATUS_CD s WHERE s.NAME = 'MSG_READ') ORDER BY m.msg_id desc\n  \n                                                                            \n  Formatted:\n  SELECT m.MSG_ID, m.PRIORITY_ID, CUST.CUST_NBR, CUST.CUST_NM,\n         CUST.CUST_LEGAL_NM, CUST.STORE_ADDR_1, CUST.STORE_ADDR_2,\n         CUST.CROSS_STREET,\n         XMLELEMENT(\n             'Alerts', XMLELEMENT( 'Alert_alert_id', alert_id ),\n             XMLELEMENT( 'Alert_agent_id', agent_id ),\n             XMLELEMENT( 'Alert_alert_type_id', alert_type_desc),\n             XMLELEMENT( 'Alert_alert_date', alert_date),\n             XMLELEMENT(\n                 'Alert_url_reference', url_reference\n              ), XMLELEMENT( 'Alert_read_status', read_status )\n         ) CUST.STORE_CITY, CUST.STORE_ST, CUST.POST_CODE, \n         CUST.STORE_MGR_NM\n    FROM MESSAGES m\n    JOIN PRIORITY_CD P\n   WHERE m.to_person_id = ?\n     AND p.NAME = 'PRI_EMERGENCY'\n     AND p.JOB = 'Plumber'\n     AND m.status_id < (\n          SELECT s.STATUS_ID\n            FROM MSG_STATUS_CD s\n           WHERE s.NAME = 'MSG_READ'\n         )\n   ORDER BY m.msg_id desc\n  \n  \n                                                                            \n  Original:\n  UPDATE \"SERVICE_REQUEST\" SET \"BUILDING_ID\" = ?, \"UNIT_ID\" = ?, \n  \"REASON_ID\" = ?, \"PERSON_ID\" = ?, \"PRIORITY_ID\" = ?, \"STATUS_ID\" = ?, \n  \"CREATED\" = ?, \"REQUESTED\" = ?, \"ARRIVED\" = ?  WHERE \"REQUEST_ID\" = ?\n                                                                            \n                                                                            \n  Formatted:\n  UPDATE \"SERVICE_REQUEST\"\n     SET \"BUILDING_ID\" = ?,\n         \"UNIT_ID\" = ?,\n         \"REASON_ID\" = ?,\n         \"PERSON_ID\" = ?,\n         \"PRIORITY_ID\" = ?,\n         \"STATUS_ID\" = ?,\n         \"CREATED\" = ?,\n         \"REQUESTED\" = ?,\n         \"ARRIVED\" = ?,\n   WHERE \"REQUEST_ID\"  = ?\n                                                                            \n                                                                            \n                                                                            \n  Original:\n  INSERT INTO \"MESSAGES\" ( \"MSG_ID\", \"TO_PERSON_ID\", \n  \"FROM_PERSON_ID\", \"REQUEST_ID\", \"CREATED\", \"PRIORITY_ID\", \n  \"MSG_TYPE_ID\", \"STATUS_ID\", \"READ_WHEN\", \"TIMEOUT\", \n  \"MSG_TXT\", \"RESEND_COUNT\" ) VALUES ( ?, ?, ?, \n  ?, ?, ?, ?, ?, ?, ?, ?, ? )\n                                                                            \n                                                                            \n  Formatted:\n  INSERT INTO \"MESSAGES\" ( \"MSG_ID\", \"TO_PERSON_ID\",\n         \"FROM_PERSON_ID\", \"REQUEST_ID\", \"CREATED\",\n         \"PRIORITY_ID\", \"MSG_TYPE_ID\", \"STATUS_ID\",\n         \"READ_WHEN\", \"TIMEOUT\", \"MSG_TXT\", \"RESEND_COUNT\" )\n  VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )\n                                                                            \n                                                                            \nFunctions:\nSQLUCreateColumnList( optional parameter )\n                                                                            \n     Assumes either the current file, or any other open buffer, \n     has a CREATE TABLE statement in a format similar to this:\n     CREATE TABLE customer (\n     \tid\tINT DEFAULT AUTOINCREMENT,\n     \tlast_modified TIMESTAMP NULL,\n     \tfirst_name     \tVARCHAR(30) NOT NULL,\n     \tlast_name\tVARCHAR(60) NOT NULL,\n     \tbalance\t        NUMERIC(10,2),\n     \tPRIMARY KEY( id )\n     );\n     If you place the cursor on the word customer, then the \n     unnamed buffer (also displayed by an echo statement) will \n     contain:\n     id, last_modified, first_name, last_name, balance\n                                                                            \n     Optionally, it will replace the word with the above and place\n     the word in the unnamed buffer.  Calling the function with\n     a parameter enables this feature.\n                                                                            \n     This also uses the g:sqlutil_cmd_terminator to determine when\n     the create table statement ends if none of the following terms\n     are found before the final );\n            primary,reference,unique,check,foreign\n     sqlutil_cmd defaults to \";\"\n                                                                            \n                                                                            \nFunctions:\nSQLUGetColumnDef( optional parameter )\nSQLUGetColumnDataType( expand(\"<cword>\"), 1 )\n                                                                            \n     Assumes either the current file, or any other open buffer, \n     has a CREATE TABLE statement in a format similar to this:\n     CREATE TABLE customer (\n     \tid\tINT DEFAULT AUTOINCREMENT,\n     \tlast_modified TIMESTAMP NULL,\n     \tfirst_name     \tVARCHAR(30) NOT NULL,\n     \tlast_name\tVARCHAR(60) NOT NULL,\n     \tbalance\t        NUMERIC(10,2),\n     \tPRIMARY KEY( id )\n     );\n     If you place the cursor on the word first_name, then the \n     column definition will be placed in the unnamed buffer (and also\n     displayed by an echo statement).\n     VARCHAR(30) NOT NULL        \n                                                                            \n     If the command is called as SQLUGetColumnDef( expand(\"<cword>\"), 1 )\n     or using the default mapping \\scdt, just the datatype (instead\n     of the column definition) will be returned.  A separate command \n     SQLUGetColumnDataType has been created for this.\n     VARCHAR(30) \n                                                                            \n                                                                            \nFunctions:\nSQLUCreateProcedure()\n                                                                            \n     Assumes either the current file, or any other open buffer, \n     has a CREATE TABLE statement in a format similar to this:\n     CREATE TABLE customer (\n     \tid\t        INT DEFAULT AUTOINCREMENT,\n     \tlast_modified   TIMESTAMP NULL,\n     \tfirst_name     \tVARCHAR(30) NOT NULL,\n     \tlast_name\tVARCHAR(60) NOT NULL,\n     \tbalance\t        NUMERIC(10,2),\n     \tPRIMARY KEY( id )\n     );\n     By calling SQLUCreateProcedure while on the name of a table\n     the unnamed buffer will contain the create procedure statement\n     for insert, update, delete and select statements.\n     Once pasted into the buffer, unneeded functionality can be \n     removed.\n                                                                            \n                                                                            \n                                                                            \nCommands:\n[range]SQLUFormatter ..list..    \n                     : Reformats the SQL statements over the specified \n                       range.  Statement will lined up given the \n                       existing indent of the first word.\nSQLUCreateColumnList:  Creates a comma separated list of column names\n                       for the table name under the cursor, assuming\n                       the table definition exists in any open \n                       buffer.  The column list is placed in the unnamed\n                       buffer.\n                       This also uses the g:sqlutil_cmd_terminator.\n                       By default a table alias will be added to each of the columns, this is \n                       configurable, see documentation (new 1.3.7).\n                       This routine can optionally take 2 parameters\n                       SQLUCreateColumnList T1 \n                           Creates a column list for T1\n                       SQLUCreateColumnList T1 1\n                           Creates a column list for T1 but only for\n                           the primary keys for that table.\nSQLUGetColumnDef     : Displays the column definition of the column name\n                       under the cursor.  It assumes the CREATE TABLE\n                       statement is in an open buffer.\nSQLUGetColumnDataType\n                     : Displays the column datatype of the column name\n                       under the cursor.  It assumes the CREATE TABLE\n                       statement is in an open buffer.\nSQLUCreateProcedure  : Creates a stored procedure to perform standard\n                       operations against the table that the cursor\n                       is currently under.\n                       \n                                                                            \n\nSuggested Mappings:\n    vmap <silent>sf        <Plug>SQLU_Formatter<CR>\n    nmap <silent>scl       <Plug>SQLU_CreateColumnList<CR>\n    nmap <silent>scd       <Plug>SQLU_GetColumnDef<CR>\n    nmap <silent>scdt      <Plug>SQLU_GetColumnDataType<CR>\n    nmap <silent>scp       <Plug>SQLU_CreateProcedure<CR>\n                                                                            \n    mnemonic explanation\n    s - sql\n      f   - format\n      cl  - column list\n      cd  - column definition\n      cdt - column datatype\n      cp  - create procedure\n                                                                            \n    To prevent the default mappings from being created, place the \n    following in your _vimrc:\n        let g:sqlutil_load_default_maps = 0\n                                                                            \nCustomization:\n    By default this script assumes a command is terminated by a ;\n    If you are using Microsoft SQL Server a command terminator \n    would be \"go\", or perhaps \"\\ngo\".\n    To permenantly override the terminator in your _vimrc file you can add\n          let g:sqlutil_cmd_terminator = \"\\ngo\"\n                                                                            \n                                                                            \n    When building a column list from a script file (ie CREATE TABLE \n    statements), you can customize the script to detect when the \n    column list finishes by creating the following in your _vimrc:\n          let g:sqlutil_col_list_terminators = \n                       \\ 'primary,reference,unique,check,foreign'\n                                                                            \n    This can be necessary in the following example:\n          CREATE TABLE customer (\n             id         INT DEFAULT AUTOINCREMENT,\n             first_name VARCHAR(30) NOT NULL,\n             last_name  VARCHAR(60) NOT NULL,\n             PRIMARY KEY( id )\n          ); \n\nDependencies:\n       Align.vim - Version 15\n                        - Author: Charles E. Campbell, Jr.\n                        - http://www.vim.org/script.php?script_id=294\n\nSuggested (Complementary) Plugins:\n     dbext.vim - Author: Peter Bagyinszki and David Fishburn\n                - http://www.vim.org/script.php?script_id=356\n"}, {:name=>"Cpp-code-template-generator", :summary=>"Generate C++ code templates based on the header file", :description=>"Opens a template file and replaces various tags with values that are parsed from the header file.  The information parsed includes data members and their types, constructors including overloaded constructors and their parameters, methods declarations and their return types and parameter lists, as well as the class name.  This is then put into the source template in the proper format.  Data members are added to the constructors to relieve typing to initialize all your class variables.  The destructor is also added.  There is a little documentation in the ftpplugin/cpp/tmpl_gen.vim file.  It describes what tags that are currently supported so you can customize the template file that is included.  Feedback is needed, and very welcome.  Feel free to email me with any bug reports, feature requests, or if you need help getting it set up.\n\nNOTE!   This is currently broken.  I will fix it after the semester ends, but for the time being you can edit tmpl_gen.vim and change 'require \"tmpl_gen.rb\"' to 'require \"\#{ENV['HOME']}/.vim/ftplugin/cpp/tmpl_gen.rb\".\n\nI would fix this now, but I am in the middle of making some major modifications, and I have finals coming up."}, {:name=>"ri-browser", :summary=>"Ruby Information at your fingertips", :description=>"Interface for browsing ri/ruby documentation.\n\nDefines the following commands:\n\n  :Ri <arg>\n      Lookup the given argument.\n\n  :RiExpand <arg>\n      Lookup the given argument but prefix the class/module name\n      when in Ri class buffer[1].\n\nand the following mappings:\n\n  <M-i>  Clean prompting for lookup word.\n  <M-I>  Prefix class/module if any before prompting. (ex: Array#)\n\nLookups can also be done using the word under the cursor (WUC)\n\n  <M-]>\n      Gready expansion of WUC. This will work for both the\n      'Array.new', 'Hash#each' and 'Kernel::block_given?' way of\n      specifying a method.\n\n  <M-[>\n      Not so gready expansion of WUC but will also prefix the\n      class/module when in a Ri class/module buffer[1]. This makes\n      it possible to lookup 'Array#each' by invoking it with\n      the cursor places on 'each' in the 'Array' class buffer. \n\n[1] A Ri class/module buffer is a buffer showing all the methods belonging\n    to a class or modul. Example: typing ':Ri Hash' followed by enter in\n    normal mode with the ri plugin loaded will open the 'Hash' class buffer.\n\nComes with syntax coloring of the Ri buffer.\n\nInspired by ri stuff at http://www.rubygarden.org/ruby?VimExtensions\nCredits to vimscript #90 for much of the lovely code."}, {:name=>"sql.vim--Fishburn-indent", :summary=>"SQL indent file for Sybase SQL Anywhere and Oracle", :description=>"This indent file was created for Sybase SQL Anywhere using the Watcom SQL syntax.\nIt has also been tested against Oracle packages.\n\nThis will not work for Sybase ASE and Microsoft SQL Server which use Transact-SQL syntax.\n\nIn preparation for Vim 7, this file has been renamed to sqlanywhere.vim, but will continue to work with Vim 6.  Simply rename it to sql.vim to keep the default behaviour.\n\nSupports a wide variety of syntax including standard the standards: IF, LOOP, CASE.\nBut it will also support less used syntax like the EXCEPTION statement.\n\n\n"}, {:name=>"poser.vim", :summary=>"A syntax file for Poser 3-D library and scene files and WaveFront OBJects", :description=>"This is a syntax file for use with CuriousLabs' Poser Library and Scene files, cr2, pp2, pz2, pz3, hr2, lt2, cm2, fc2 and hd2. Version 1.05 also supports Wavefront OBJect files due to added support for customGeom."}, {:name=>"waimea.vim", :summary=>"Highlighting for Waimea config files", :description=>"Highlight config files for the Waimea window manager (http://www.waimea.org).  You can see a screenshot at (http://students.cs.byu.edu/~mtb6/waimea_config.png).  It is not finished.  I have the the menu files and style files highlighted.  They aren't that great yet, but since there is a complete lack of highlighting files for Waimea config, I thought I would release this really early.  Enjoy!  And please feel free to send me feedback.\n\nNOTE!\nI was contacted by the author of waimea, and he informed me that style and menu files will be changing in the near future, so I have not put any more effort into this syntax file.  If there is a demand to make it complete for waimea 0.4.0 then let me know and I will certainly do so."}, {:name=>"sql.vim--Fishburn-syntax", :summary=>"Syntax file for Sybase SQL Anywhere", :description=>"Syntax file for Sybase SQL Anywhere (Adaptive Server Anywhere)\n\nAttention Vim7 users\n----------------------------\nThis file has been renamed to sqlanywhere.vim and version 9.0.2 is included with Vim 7.0.\nA new file syntax\\sql.vim has been created which manages the appropriate loading of any sql syntax file.  See :h sql.txt for more details.\n\nSupports\n------------\n- keywords\n- internal functions\n- internal stored procedures, \n- TSQL compatability stored procedures\n- external stored procedures/functions, \n- web services (HTML and XML support)\n- all database options\n- operators\n- datatypes\n- statements \n- comments\n\n\n"}, {:name=>"SpellChecker", :summary=>"Spell check text including LaTeX documents", :description=>"SpellChecker.vim is a plugin that uses Vim's syntax highlighting facility to help spot spelling errors. The lexicon consists of approximately 53,700 English words, including about 2,700 proper names and 50 acronyms. Three dialects are supported: American (US), British (UK), and Canadian (CA). Misspellings are highlighted as errors, and spellings corresponding to a dialect different from the selected one are highlighted as todo items.\n\nScreenshot:   http://www.unb.ca/chem/ajit/macros/spell.png\n\nCommands, key mappings and menus are provided for turning spell checking on and off, for moving through the errors with or without dialogs, changing dialects, adding and removing words to the global user and local project dictionaries, for accepting words for the current document only, for modifying all occurrences of a word, and for querying SpellChecker settings. \n\nSpellChecker was inspired by Charles Campbell's engspchk.  SpellChecker uses several ideas but very little unmodified code from engspchk. Both work with vim's syntax facility. Both highlight misspelled words as errors. Both can be used for source code in selected programming languages where only the comments will be spell-checked. The following description may help you to decide whether to use SpellChecker or engspchk.\n\nA unique feature of SpellChecker is project-specific dictionaries. These are dictionaries that are additional to all others, including the global user's dictionary. A project-specific dictionary is used only when checking documents that reside in the same directory as that dictionary. For example, such dictionaries can be useful if a document introduces acronyms or abbreviations specific to that document.\n\nOther features unique to SpellChecker include an interactive mode to step through the errors, user dictionaries that store words with an upper-case letter in a case-sensitive fashion, and a command to save all remaining errors in one step.\n\nAnother unique feature of SpellChecker is that it highlights spellings corresponding to a dialect different from the one selected. This helps to ensure that the selected dialect has been used consistently throughout a document.  \n\nSpellChecker loads faster than engspchk because a different and smaller lexicon is used by SpellChecker. The presence of fewer rare words in the lexicon means that spelling errors are less likely to be mistaken for arcane words. For example, if you type \"ort he\" instead of \"or the\", SpellChecker will flag an error whereas engspchk won't because \"ort\" is a rarely-used word (meaning morsel) that is in the engspchk  lexicon. On the other hand, this means that esoteric words may be marked as errors by SpellChecker even though they are perfectly correct. \n\nAt this time, SpellChecker does not incorporate a scheme to offer alternative spellings. It may later.\n"}, {:name=>"foldlist", :summary=>"Create a fold list to enable hierarchical file navigation.", :description=>"Overview\n--------\nThis is inspired by the taglist plugin.  The \"Fold List\" plugin \nprovides the following features:\n                                                                  \n1. Opens a vertically split Vim window with a list of folds in \n   the current file.\n2. Moving through the fold list with the j, k, l, h, moves to the\n   associated fold in the file.\n3. <CR> jumps between file and fold list.\n\nUsage\n-----\nYou can open the foldinst window from a source window by using the \":Flist\"\ncommand.\n              nnoremap <silent> <F9> :Flist<CR>\n                                                                            \nAdd the above mapping to your ~/.vimrc file.\n                                                                            \nYou can close the taglist window from the taglist window by pressing 'q' or\nusing the Vim \":q\" command. \n"}, {:name=>"OO-code-completion", :summary=>"Gives list of methods for the identifier under the cursor for OO languages.", :description=>"NOTE:as of  june 17, 2003, this script is no more developped due to lack of time/lack of certain features i miss in ctags. i'll take patches to improve it however, and i have a much more ambitious version (with limited lex/yacc parsing in ruby via racc) on my hard-drive, any contribution is appreciated.\ni don't consider it dead, but in hibernation (especially for the ctags features).\n\nREQUIRES RUBY.\nThis plugin will provide functions to get \"code completion\" in vim.\nit will list all methods for the identifier under the cursor if you call :PossibleFunctions.\nwhen you start typing a method, it will tell you which methods of the relevant class start by what you typed if you call :PossibleCompletions.\nit works by using gd and ctags to get the class of the relevant object, and ctags to get the list of functions for this object.\nNOTE: this includes inheritance! functions of the class and the parent classes are listed.\nnormally also only public member functions are listed.\nThis plugin requires tags to be generated with certain parameters (it\n needs information about inheritance and access of members).\n You can use the GenerateTags command to generate tags for the current directory.\n\nFor now this plugin only supports Java and C++. It should only support OO languages, though I guess it could be used for C structs maybe."}, {:name=>"transvim.vim", :summary=>"translate a phrase by looking up in a dictionary", :description=>"This script looks up a word/phrase in a dictionary.\nUser can press key-shortcuts to translate word under cursor, visually selected \ntext or to be asked for a word.\n\nSearch-results are viewed in the same window in which searching\nwas started. To close a view, press 'q' - TransVim will then\nswitch back to the buffer comming from.\n\nThere are several possibilities to start a translation:\n  1) move cursor over word to be translated and press <Leader>tr\n  2) visually select word to be translated and press <Leader>tr\n  3) press <Leader>ta to be prompted for a word\nMemory aid: tr = (T)(R)anslate, ta = (T)ranslate (A)sk for word\n\nBy default <Leader> is \\, so press \\tr, \\ta to start  translation.\n\nIn order to prevent tremendous huge search-results, the search-string must be at\nleast 3 characters long (min. length is configurable)."}, {:name=>"Macromedia-Director-Lingo-Syntax", :summary=>"Macromedia Director Lingo Syntax Highlighting", :description=>"This syntax script is for the programming language Lingo used in Macromedia's Director. The syntax highlighting colors have been changed to match those used by Director's script editor."}, {:name=>"oz.vim", :summary=>"Syntax file for the Mozart/Oz language.", :description=>"Syntax file for the Mozart/Oz language (http://www.mozart-oz.org)."}, {:name=>"python_box.vim", :summary=>"menu and easy navigation for python files", :description=>"Parts of this script (as indicated in the code) were taken from python.vim,\ncopyright 2001 Mikael Berthe <mikael.berthe@efrei.fr>.\n\nThe script brings together shortcuts and a menu to syntax check \nthe current file (using the compilerscript for python, python.vim),\nsome functionality for quickly finding one's way through classes \nand functions of a python file (without using exuberant ctags),\nsome of the nice functionality from Mikael Berthe's python.vim\nas well as menu access to some of Benji Fisher's python_match.vim.\n\n---------------------------------------------------------------------------\nSome hints on how to use\n---------------------------------------------------------------------------\nThe buffer TOC offers a outline of all Python classes and functions of the\ncurrent buffer in a seperate vim window. The cursor position in the TOC window\nindicates where you are in the original Window containing the Python code. \nPress <F5> again (or q) to quit that window without changing the cursor \nposition in the original window (containing the Python code).\nThat I find practical when editing a Python file and getting confused \nabout where I am.\nIf you want to change your position in the Python file:\nSet the cursor in the TOC window to the class/function you want to jump to \nthen press <RETURN> to go there.\nIf the TOC windows is split pressing <SPACE> will navigate to the\nclass/function but the TOC window will remain open and will keep the focus.\nDoubleclicking the left mousebutton will have the same effect.\nHowever if the window is not split left doublclicking or pressing <SPACE>\nwill have the same effect as pressing <RETURN>.\nOnce the TOC-window looses its focus it is closed immediately so to be out of\nthe way.\n"}, {:name=>"greputil.vim", :summary=>"simplifies usage of 'grep'", :description=>"This script simplifies usage of the :grep-command and the navigation\nthrough search results and search history.\n\nTo start search for the word under the cursor or for the visually\nselected text press <Leader>gr. If there is no word under the cursor,\nyou will be prompted for a search-string. To be prompted for a\nsearch-string anyway pressing <Leader>ga will do it.\n\nFiles will be searched in the actual directory. The file pattern\ncan be defined by a global variable, its default is\n\"*.c *.h *.cpp *.hpp\" (yes, this script is primarily for\nprogrammers :-) )\n\nTo show search-results open quickfix-window with :copen.\nTo navigate through the occurrences press <F6> or <F7>.\nTo bring back results of older or newer search-sessions press\n<S-F6> or <S-F7>."}, {:name=>"mercury.vim", :summary=>"A vim syntax file for the Mercury language.", :description=>"A rather colorful vim syntax file for the Mercury language."}, {:name=>"ZoomWin", :summary=>"Zoom in/out  of windows (toggle between one window and multi-window)", :description=>"Note: version 23 or later of ZoomWin requires vim 7.2 or later\n\nUsage:\n\n    Press <c-w>o : the current window zooms into a full screen\n    Press <c-w>o again: the previous set of windows is restored\n\nFeatures:\n\nThe idea is to make it easy to zoom into and out of a window.  ZoomWin supports normal windows, and it now also supports scratch-windows, no-name windows, and modified-buffer windows.\n\n * ZoomWin is a 7.2 plugin (as of v23)\n\n * Files are made hidden during zoom-in and restored upon zoom-out\n\n * All windows' file contents will be restored during zoomouts. \n\n * ZoomWin will clean up any temporary files it generates upon exit.\n \n * Session files are guaranteed to be unique to each vim session, so multiple vims can use zoom-in/out without interfering with one another\n\nA later version may be available at http://mysite.verizon.net/astronaut/vim/index.html#ZOOMWIN .\n\nWhen zooming in, ZoomWin's window is full sized, with no loss of screen space to status lines for other windows, unlike vimscript#1280 (ToggleOnly), for those vims compiled with the +mksession feature.  For those vims without that feature, v21 ZoomWin now supports partial-zoom-in (leaves a status line behind for each window).\n\nHistory:\n\nRon Aaron came up with the original ZoomWin and gave permission to have it posted.\n"}, {:name=>"mailsig", :summary=>"Script for automatic insertion of selected mail signature", :description=>"This plugin provides a :Sign command which provides a list of signatures in your ~/.sigs file, and then inserts the one you select at the bottom of your mail message, automatically word-wrapping the first line of the signature."}, {:name=>"Varrays", :summary=>"Arrays lib based on curly  braces names", :description=>"Yet another arrays lib, this one uses curly  braces names to manage differents elements ...\n"}, {:name=>"casejump.vim", :summary=>"Jump to cases in C switch statement", :description=>"This script allows users to jump to the next or previous case (or\ndefault) in a C switch statement by typing ]s or [s, respectively.\n"}, {:name=>"Printer-Dialog", :summary=>"set print options via dialog", :description=>"This script's intention is to simplify printing of text. It provides\na dialog to make many many printer settings before starting to print.\nE.g. select:\n  - printer device\n  - font and its size\n  - format of paper\n  - colorscheme\n  - line-numbering\n  - ....\n\nPressing <Leader>pd opens the Printer Dialog in which you can make your\nsettings and start/cancel printing.\n\nYou can print either the whole contents of a buffer or a part of it.\nIf you want to select a whole buffer for printing, press <Leader>pd.\nIf you want to print only a part of a buffer, visually select this part and\npress <Leader>pd.\n"}, {:name=>"Indent-Finder", :summary=>"Always set the correct indentation for the file you are editing.", :description=>"For each new open buffer, scans the buffer, find the indentation being used in the file and configure vim to this indentation. \n\nThis solves the problem of files with different indentations.\n\nHomepage of the project:\nhttp://www.freehackers.org/Indent_Finder\n"}, {:name=>"mrswin.vim", :summary=>"Like mswin, but can be toggled off and on", :description=>"Sourcing <mrswin.vim> toggles between <mswin.vim> and normal Vim.  You'll find <mswin.vim> distributed with Vim as\n\n   ..\\vim\\vim63\\mswin.vim\n\n(the leading path may vary).  This file needs to be executed instead of the default <mswin.vim>; every time it is sourced, it toggles between <mswin.vim> and Normal vim mappings and settings.  \n\nIt is important that you substitute using <mrswin.vim> for <mswin.vim>; <mrswin.vim> saves the settings and mappings extant prior to doing the <mswin.vim> settings and mappings.  Consequently, if you have <mswin.vim> sourced first, then its settings and mappings are what will be restored (ie., you won't be able to toggle because both sets of settings and mappings will be the same).\n"}, {:name=>"python_fold", :summary=>"Folding expression for python", :description=>"This script uses the expr fold-method to create folds for python source code.\n\nFolds are created for:\n - Class definitions\n - def function definitions\n - Blocks between {{{, }}} markers (but not yet {{{n, etc.)\n\nThe fold level for each fold is equal to the indentation divided by the value of the 'shiftwidth' option, so make sure that 'shiftwidth' is set to the right value for your code.\n\nClass and function folds show a count of the number of lines in the fold and the documentation string when closed (contributed by Max Ischenko).\n\nCaveats:\n- The docstring is not shown when it is enclosed in single quotes (like '''comment'''); use double quotes instead (like \"\"\"comment\"\"\")\n- Newest version relies on a blank line following class or function definition if the next bit of code is not a new class or function definition.  If this doesn't suit your programming style, use the _nonblank version 2.2 (nb).  That version is buggier, however.  Do not install both files.\n\nBugs:\n- It occasionally inserts a bogus fold at complicated structures like conditionals that are followed by a blank line.  A work-around is to remove the blank line or to replace it with a line containing a comment (a single '#' will do)"}, {:name=>"sr.vim", :summary=>"SR (Synchronizing Resources) syntax highlighting script", :description=>"This is a syntax highlighting script for synchronizing resources.\nThis language is mainly intended for educational use and I doubt anyone will find it useful for writing anything meant for widespread use.\nYou can find the homepage here http://www.cs.arizona.edu/sr/\nand an excellent reference here http://www.mcs.drexel.edu/~shartley/OSusingSR/\n\nYou could probably extend this script alot by specifying regions and clusters and stuff, but as I will probably never use the language again I didn't bother learning how to."}, {:name=>"TVO--The-Vim-Outliner", :summary=>"Turn vim into a full-featured text outliner", :description=>"TVO (The Vim Outliner) is my solution for text outlining in Vim.\n\nIt works a lot like Word's outline support, but is much more vim-compatible.\nIt has syntax highlighting, embedded text blocks, shortcut mappings using both  LocalLeader and arrow keys, and works reasonably well with Vim Easy.\nThere is a toolbar that will be familiar to you if you've used Word's outliner.\n\nYou can extract just text, or just headings if you wish; there's also some converters (to HTML, Perl POD, and to RTF) included.\n\nPlease email me with bug reports, improvements, comments or more documentation (badly needed!).\n\nEarlier versions are available at http://bike-nomad.com/vim/vimoutliner.html"}, {:name=>"csv-color", :summary=>"syntax highlight for CSV files", :description=>"Simple commands to highlight CSV files. At this moment it only supports tab delimited files."}, {:name=>"CVS-conflict-highlight", :summary=>"This script highlights conflicts marked by CVS", :description=>"I've created VIM syntax file for files where CVS\nfound a conflict.\n\nSuch files may be detected as containing such patterns:\n\n^<<<<<<< .*\n^=======$\n^>>>>>>> .*\n\nThis syntax file highlights areas where CVS marked a\nconflict, resolve conflict until no highlighting is left :)\n"}, {:name=>"PHPDoc-Script-PDocS", :summary=>"PHPDoc Support in VIM while writing PHP-Source", :description=>"PHPDoc Script (PDocS) supports you in writing PHPDoc like comments while creating PHP-Source code. You don't need to copy/paste the \nDoc block over and over so you can create them while writing the source\ncode. This will result in better commets...;-)\nThe Script currently supports only one Styleguide.\n\nI hope it helps...\n\nI have created the script on Vim 6.1, but i think it should be running well\non Vim 6.0 too. I hope so..."}, {:name=>"mru.vim", :summary=>"Plugin to manage Most Recently Used (MRU) files", :description=>"Overview\n\nThe Most Recently Used (MRU) plugin provides an easy access to a list of\nrecently opened/edited files in Vim. This plugin automatically stores the\nfile names as you open/edit them in Vim.\n\nThis plugin will work on all the platforms where Vim is supported. This\nplugin will work in both console and GUI Vim. This version of the MRU\nplugin needs Vim 7.0 and above. If you are using an earlier version of\nVim, then you should use an older version of the MRU plugin.\n\nThe recently used filenames are stored in a file specified by the Vim\nMRU_File variable.\n\nUsage\n\nTo list and edit files from the MRU list, you can use the \":MRU\" command.\nThe \":MRU\" command displays the MRU file list in a temporary Vim window.  If\nthe MRU window is already opened, then the MRU list displayed in the window\nis refreshed.\n\nIf you are using GUI Vim, then the names of the recently edited files are\nadded to the \"File->Recent Files\" menu. You can select the name of a file\nfrom this sub-menu to edit the file.\n\nYou can use the normal Vim commands to move around in the MRU window. You\ncannot make changes in the MRU window.\n\nYou can select a file name to edit by pressing the <Enter> key or by double\nclicking the left mouse button on a file name.  The selected file will be\nopened. If the file is already opened in a window, the cursor will be moved\nto that window. Otherwise, the file is opened in the previous window. If the\nprevious window has a modified buffer or is the preview window or is used by\nsome other plugin, then the file is opened in a new window.\n\nYou can press the 'o' key to open the file name under the cursor in the\nMRU window in a new window.\n\nTo open a file from the MRU window in read-only mode (view), press the 'v'\nkey.\n\nTo open a file from the MRU window in a new tab, press the 't' key.  If the\nfile is already opened in a window in the current or in another tab, then\nthe cursor is moved to that tab. Otherwise, a new tab is opened.\n\nYou can open multiple files from the MRU window by specifying a count before\npressing '<Enter>' or 'v' or 'o' or 't'. You can also visually select\nmultiple filenames and invoke the commands to open the files. Each selected\nfile will be opened in a separate window or tab.\n\nYou can press the 'u' key in the MRU window to update the file list. This is\nuseful if you keep the MRU window open always.\n\nYou can close the MRU window by pressing the 'q' key or using one of the Vim\nwindow commands.\n\nTo display only files matching a pattern from the MRU list in the MRU\nwindow, you can specify a pattern to the \":MRU\" command. For example, to\ndisplay only file names containing \"vim\" in them, you can use the following\ncommand \":MRU vim\".  When you specify a partial file name and only one\nmatching filename is found, then the \":MRU\" command will edit that file.\n\nThe \":MRU\" command supports command-line completion of file names from\nthe MRU list. You can enter a partial file name and then press <Tab>\nor <Ctrl-D> to complete or list all the matching file names. Note that\nafter typing the \":MRU\" command, you have to enter a space before completing\nthe file names with <Tab>.\n\nWhen a file supplied to the \":MRU\" command is not present in the MRU list,\nbut it is a readable file, then the file will be opened (even though it is\nnot present in the MRU list). This is useful if you want to open a file\npresent in the same directory as a file in the MRU list. You can use the\ncommand-line completion of the \":MRU\" command to complete the full path of a\nfile and then modify the path to open another file present in the same path.\n\nWhenever the MRU list changes, the MRU file is updated with the latest MRU\nlist. When you have multiple instances of Vim running at the same time, the\nlatest MRU list will show up in all the instances of Vim.\n\nConfiguration\n\nBy changing the following variables you can configure the behavior of this\nplugin. Set the following variables in your .vimrc file using the 'let'\ncommand.\n\nThe list of recently edited file names is stored in the file specified by the\nMRU_File variable.  The default setting for this variable is\n$HOME/.vim_mru_files for Unix-like systems and $USERPROFILE/_vim_mru_files\nfor MS-Windows systems. You can change this variable to point to a file by\nadding the following line to the .vimrc file:\n\n      let MRU_File = 'd:\\myhome\\_vim_mru_files'\n\nBy default, the plugin will remember the names of the last 100 used files.\nAs you edit more files, old file names will be removed from the MRU list.\nYou can set the 'MRU_Max_Entries' variable to remember more file names. For\nexample, to remember 1000 most recently used file names, you can use\n\n      let MRU_Max_Entries = 1000\n\nBy default, all the edited file names will be added to the MRU list. If you\nwant to exclude file names matching a list of patterns, you can set the\nMRU_Exclude_Files variable to a list of Vim regular expressions. By default,\nthis variable is set to an empty string. For example, to not include files\nin the temporary (/tmp, /var/tmp and d:\\temp) directories, you can set the\nMRU_Exclude_Files variable to\n\n      let MRU_Exclude_Files = '^/tmp/.*\\|^/var/tmp/.*'  \" For Unix\n      let MRU_Exclude_Files = '^c:\\\\temp\\\\.*'           \" For MS-Windows\n\nThe specified pattern should be a Vim regular expression pattern.\n\nIf you want to add only file names matching a set of patterns to the MRU\nlist, then you can set the MRU_Include_Files variable. This variable should\nbe set to a Vim regular expression pattern. For example, to add only .c and\n.h files to the MRU list, you can set this variable as below:\n\n      let MRU_Include_Files = '\\.c$\\|\\.h$'\n\nBy default, MRU_Include_Files is set to an empty string and all the edited\nfilenames are added to the MRU list.\n\nThe default height of the MRU window is 8. You can set the MRU_Window_Height\nvariable to change the window height.\n\n      let MRU_Window_Height = 15\n\nBy default, when the :MRU command is invoked, the MRU list will be displayed\nin a new window. Instead, if you want the MRU plugin to reuse the current\nwindow, then you can set the 'MRU_Use_Current_Window' variable to one.\n\n      let MRU_Use_Current_Window = 1\n\nThe MRU plugin will reuse the current window. When a file name is selected,\nthe file is also opened in the current window.\n\nWhen you select a file from the MRU window, the MRU window will be\nautomatically closed and the selected file will be opened in the previous\nwindow. You can set the 'MRU_Auto_Close' variable to zero to keep the MRU\nwindow open.\n\n      let MRU_Auto_Close = 0\n\nIf you don't use the \"File->Recent Files\" menu and want to disable it,\nthen you can set the 'MRU_Add_Menu' variable to zero. By default, the\nmenu is enabled.\n\n      let MRU_Add_Menu = 0\n\nIf too many file names are present in the MRU list, then updating the MRU\nmenu to list all the file names makes Vim slow. To avoid this, the\nMRU_Max_Menu_Entries variable controls the number of file names to show in\nthe MRU menu. By default, this is set to 10. You can change this to show\nmore entries in the menu.\n\n      let MRU_Max_Menu_Entries = 20\n\nIf many file names are present in the MRU list, then the MRU menu is split\ninto sub-menus. Each sub-menu contains MRU_Max_Submenu_Entries file names.\nThe default setting for this is 10. You can change this to increase the\nnumber of file names displayed in a single sub-menu:\n\n      let MRU_Max_Submenu_Entries = 15\n"}, {:name=>"tar.vim", :summary=>"A vim plugin for browsing tarfiles", :description=>"Once this script is installed, attempting to edit a tarfile will present the\nuser with a list of files contained in the tar archive.  By moving the cursor\nover a filename and pressing ENTER, the contents of a file can be viewed in\nread-only mode, in a new window.  Unfortunately, write support for tarfile\ncomponents is not currently possible.\n\nRequires GNU tar, or a tar implementation that supports the \"P\" (don't strip\nout leading /'s from filenames), and \"O\" (extract files to standard output)\noptions.  Additionally, gzip is required for handling *.tar.Z, *.tar.gz,\nand *.tgz compressed tarfiles, and bzip2 is required for handling *.tar.bz2\ncompressed tarfiles.  A unix-like operating system is probably also required.\n"}, {:name=>"VimITunes.vim", :summary=>"Control iTunes from within Vim", :description=>"Allows controlling iTunes on Macintosh from within Vim.\n\nAdds a menu \"iTunes\" that contains various commands to control iTunes.\n\nAdditionally, if the global variable \"VimITunesMapPrefix\" is set when this plugin is loaded, then several useful maps are created.  For example, if in your \".vimrc\" you have\n\n   let g:VimITunesMapPrefix = \",x\"\n\nthen after this plugin is loaded, you can use the following maps:\n\n       ,xq    Quit iTunes\n       ,xs    Toggle Shuffle Mode\n       ,xp    Toggle Pause Mode\n       ,xl    Next Song\n       ,xh    Previous Song\n       ,xk    Volume Up\n       ,xj    Volume Down\n       ,xm    Mute\n       ,x?    Display Song Title\n       ,xd    Disable the current song\n       ,xe    Enable the current song\n"}, {:name=>"Visual-Studio-.NET-compiler-file", :summary=>"Compiler file for visual studio .NET devenv", :description=>"I use big Visual Studio .NET projects at work.  With .NET microsoft no longer supports exported project make files so nmake is dead for my purpoeses and I have to call devenv ( like so set makeprg=devenv\\ project.vcproj\\ -build\\ debug). \n\nThe errorformat of devenv is a bit different from the old vc6 build tool, so here's a script with the error format in.\n\nThis could actually get more elaborate, a buildproject script that took a project name as a parameter and build the apropiate  set makeprg= command and executes it could be done, but I'm in a hurry."}, {:name=>"cscope-menu", :summary=>"Creates Menu for Cscope commands", :description=>"This script adds commonly used cscope commands as a menu.\nIt works on the word that is under the cursor.\n"}, {:name=>"pdbvim", :summary=>"Interface to pdb for debugging python scripts", :description=>"based on the interface to gdb in vimscript#84"}, {:name=>"cppcomplete", :summary=>"C/C++ and Java code completion", :description=>"This plugin helps you complete things like:\nvariableName.abc\nvariableName->abc\ntypeName::abc\nfrom the members of the struct/class/union that starts with abc.\nIf you just type abc will the script complete it with the names that \nstarts with abc and ignore any current scope.\n\nThe default key mapping to complete the code are:\nAlt+l in insert mode will try to find the possible completions and display\nthem in a popup menu. Also normal completions to the names in\ncppcomplete.tags.\nAlt+j in insert mode will show the popup menu with the last results.\nSelecting one of the  items will paste the text.\nF8/F9 will work in a similar way as Ctrl+N, Ctrl+P in unextended vim so the\nscript can be used without the popup menu.\nF5 in insert mode will lookup the class and display it in a preview window\nThe key mapping are only tested under Windows and linux and they will not\nwork on all platforms. Changing the mappings is easy.\n\nThe plugin is depending on that exuberant ctags has generated a tags file\ncalled cppcomplete.tags with the same options as in the following example:\nctags -n -f cppcomplete.tags --fields=+ai --C++-types=+p *\nThe script has a command called GenerateTags that executes the above ctags\ncommand. The tag file cppcomplete.tags is local to the script so you can\nuse other tag files without affecting cppcomplete. \nJava users do not need the --C++-types flag.\n\nFor C/C++ can the script generate the cppcomplete.tags from the included\nfiles for you. This is based on vims checkpath function. The path must be\nset correct, see the vim documentation.\n\nThis script do not requires grep anymore but it is supported. If the option\nis set to build an internal list with derived classes and the first\ncompletion takes a very long time may grep speed things up. \nFor Windows does the DJGPP  port of grep works. \nYou only need grep.exe from the grep'version'b.zip file.\nA good place for grep.exe could be the compilers bin directory.\nThe zip file is in the v2gnu directory, it can be downloaded from here:\nhttp://www.delorie.com/djgpp/getting.html\n\nIt is possible to define a set of lines from cppcomplete.tags with regular\nexpressions. I call the set for a block. The functions for this:\nBuildBlockFromRegexp the command to build the block, see below.\nNextInBlock jump to the line described in the block, can be called by Shift+F8 \nPrevInBlock same as the above but in the other direction, use Shift+F9\nEchoBlock shows the block itself\nBuildMenuFromBlock builds a menu in GUI mode from the block\nThe jumps are done with an internal function so the tag stack will not be\naffected.\n\nSome simple examples there > is the prompt:\n>class:l\nGives a block with all members that has a scope of a class beginning with l\n>^a.*\\ts\\t\nall structures beginning with an a\n>^\\(a\\|b\\|c)\nEverything that starts with a,b or c\nThe full vim history mechanism can be used.\n\nThe script has a number of variables that can be set from the menu in the \nGUI or wildmenu versions. They are at the top of the script file with descriptions if\nyou want to change them more permanent.\n\nFor Java do you probably want to generate a cppcomplete.tags file from the\nsources of the Java SDK. The use is like with C/C++ but you will get a\nbetter result if you change some of the configuration variables.\nThe default access is treated as if it was public. \n\nIf you are new to vim and have not heard about ctags, regexp, grep are they\nall described in the online documentation. Just type :help followed by the word you\nwant more information about. They are excellent tools that can be used for\nmany things.\n\n\nBUGS/Features\nThis plugin does not really understand any C/C++ code, it is not a real parser.\nIt works surprisingly well but can of course give a surprising result. :)\nThe current scope is unknown.\nMultidimensional arrays should not have a space between ][, e.g.\nxyz[1][2].abc should be OK but not xyz[1] [2].abc\nThe script does not accept functions, e.g. xyc()->abc will not be completed or rather\nit will be completed but from all names beginning with abc.\n(GTK) If the mouse leaves and then reenters the popup menu is the text cursor affected.\n(GTK) The popup is displayed at the mouse position and not the text cursor position.\nFor internal use is register c used.\nRequires exuberant ctags.\nThe only tested platforms for the popup menu are GTK (linux) and Windows.\n+ probably a lot of other issues\n\nAnyway, I have done some testing with MFC, DX9 framework (not COM), Java SDK, STL with\ngood results.\n"}, {:name=>"mh", :summary=>"display MSDN help.", :description=>"display MSDN help in GVIM."}, {:name=>"blockquote.vim", :summary=>"insert block quotes like emacs blockquote.el", :description=>"Example:\n,----[ title ]-\n| some text\n`----\n\nWithout title:\n,----\n| some text\n`----\n\nUsage:\n  Blockquote a range (default: current line)\n  :<range>Bq [title]\n  Blockquote a file\n  :Bqf {filename}\n  Blockquote a file, starting at line {start}\n  :Bqf {filename} {start}\n  Blockquote a file, starting at line {start} and ending at {end}\n  :Bqf {filename} {start} {end}\n  Remove a blockquote, starting at <range> (default: current line)\n  :<range>UBq\n"}, {:name=>"Mixed-sourceassembly-syntax-objdump", :summary=>"Syntax for Mixed C source and assembly dump.", :description=>"This is a syntax file for mixed C source and assembly dump, disassembled by gnu \"objdump\" utility. It does not recognize processor instructions so, it can be used on any platform. Here are the commands to generate the mixed disassembly. Make sure the source file is in the same directory as the object file.\ngcc -g -c xxx.c                       /*output is xxx.o*/\nobjdump -S xxx.o > xxx.dis  /* creates disassembly mixed with source */\n"}, {:name=>"elvis-c-highlighting", :summary=>"Highlights C syntax like the elvis vi clone", :description=>"UPDATE:  Forgot to set the String and Number options to NONE.  Have updated the script to do so.  \n\nI don't like a lot of colors.  I like how elvis highlights.  However, vim has a lot more to offer.  So this script highlights just like elvis does.  It uses white to highlight types statements and such...  It uses nothing for Normal.  If you're using Eterm, please uncomment the line to set Normal to grey since Eterm tends to have a brighter than usual Normal text.   Xterm, however, uses a lighter white so the vim \"white\" is good for highlighting.\n\nThis scheme is easy on the eyes and a bit more professional.  If you don't like a lot of colors, this one will suit you fine.\n"}, {:name=>"colorer-color-scheme", :summary=>"colorer color scheme", :description=>"My favorite dark color scheme. Very colorful :) \n\nHere&#039s a screenshot: http://interdon.net/~shaman/vim/vim-colorer.png\n\nI hope you like it! "}, {:name=>"ntservices", :summary=>"Control NT services from Vim.", :description=>"PLEASE READ THE INSTALL SECTION COMPLETELY.\n\n- This plugin generates a list of NT services that are installed on the\n  local NT/W2K/XP machine with the current started status. You can\n  start/stop the service by pressing S or pause/continue the service by\n  pressing P on the corresponding entry.\n- You can open the servicelist window through WinManager (as described in\n  the installation section below) or by assigning a hot key. You can use\n  the same hot key to open/close the window. Alternatively, you can also\n  use the :NTServices command to open/close the services window.\n- You can choose which fields that you want to see by using the\n  NtsFields command. You can select the sort fields by pressing s\n  consecutively and r for reversing the sort direction.\n- If you have permissions, you can view the service list in a remote m/c\n  by using the NtsSetHost command. With no arguments, it prints the\n  current remote host name. To switch back to the local m/c, use \".\" for\n  the host name.\n- For the sake of speed, the list of services is cached. To see the latest\n  set of services and their states at any time, refresh the window by\n  pressing 'R'.\n- It requires multvals and genutils plugins to be always installed, but\n  others are required only depending on your usage/setting (for a better\n  experience and formatting).\n\nSearch_key_words: NT services ntservices ntservice service multvals genutils align Hari Krishna Dara"}, {:name=>"PHP-dictionary", :summary=>"A PHP-dictionary as a building stone for scripts", :description=>"PHP dictionary\n\nThis is not a script, but a building stone for a script.\nAlthough of minor significance, it may be useful to someone.\n\nLearn about the use of dictionaries in general and you will - as a PHP programer - be able to use this."}, {:name=>"tiger.vim", :summary=>"Tiger Vim Indent File", :description=>"Tiger is a language introduced by andrew Appel in his book(s) \"Modern Compiler Implementation in {ML,C,Java}.\" \nFor further information, go to : \"www.cs.princeton.edu/~appel/modern\"\n\nThis file gives you a \"correct\" indentation when working on Tiger files.\nIt is to be used with the associated syntax file.\n\nLook at this screenshot to see which coding style is actually \"supported\" :\n\"http://www.xbsd.org/~flz/pics/shot-tiger.jpg&quot;"}, {:name=>"tiger.vim-syntax", :summary=>"Tiger Vim Syntax File", :description=>"Tiger is a language introduced by andrew Appel in his book(s) \"Modern Compiler Implementation in {ML,C,Java}.\" \nFor further information, go to : \"www.cs.princeton.edu/~appel/modern\"\n\nThis file gives you a \"correct\" syntax hightlighting when working on Tiger files.\nIt is to be used with the associated indentation file.\n\nLook at this screenshot to see which coding style is actually \"supported\" :\n\"http://www.xbsd.org/~flz/pics/shot-tiger.jpg&quot;"}, {:name=>"tab-syntax", :summary=>"syntax for guitar tabulatures", :description=>"a syntax for guitar tabulatures in format found in OLGA archives and usenet postings and generated by PowerTabEditor.\nWARNING: sometimes it hangs vim trying to match end of tabulature line.\n\n\n"}, {:name=>"cream-email-munge", :summary=>"Munge an email address", :description=>"\nPosted email addresses are regularly harvested and processed by automated web search tools. These addresses often end up added or sold to bulk email lists so that the unsuspecting address owner receives large quantities of unsolicited email, also known as Spam. \n\nTo avoid having one's email address harvested in this way, it can be \"munged\", or made unrecognizable to the automated system while still clearly appearing as an email address to any human reader. Examples:\n\n  unmunged:  \n       username@domain.com\n\n  munged, separator type:\n       <username>·<domain>·<com>\n       |username|at|domain|dot|com|\n\n  munged, substitution type:\n       useNrnaOme@SdomPainA.coMm (remove \"NOSPAM\" to email)\n       useSrnPamAe@MdoFmaRinE.cEom (remove \"SPAMFREE\" to email)\n\n  munged, completion type:\n       usernam____n.com (insert \"e@domai\" to email)\n\nThis script provides a visual mode mapping Shift+F12 which will munge any selected email address randomly per one of the examples above. The main function \"Cream_email_munge()\" will also return a munged address if passed a valid email, like:\n\n  let mymunge = Cream_email_munge(\"username@domain.com\")\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software.\n\n"}, {:name=>"FavEx", :summary=>"Favorite file and directory explorer", :description=>"favex.vim is a plugin to update a list (favlist) of favorite files and directories, and use the list to provide easy access to the favorites. \n\nA skeletal favlist is provided. As you edit your favorites, you can add files and their directories to favlist with the :FF and :FD commands or their \\ff and \\fd key map equivalents. Once there are some entries in favlist, you can access your favorites by entering a favex window with either :FE or :FS and then pressing <Enter>, o, or O -- keys entirely analogous to those used in file-explorer. The key mappings, the favex window height, and the favex directory explore command can be customized by setting global variables in your vimrc.\n\nfavex.vim requires Vim 6.0 (or later) run with at least \"set nocompatible\" in the vimrc, and with the standard file-explorer plugin (or a suitable replacement) loaded."}, {:name=>"apdl.vim", :summary=>"Syntax highlighting for ANSYS APDL files", :description=>"Syntax highlighting for ANSYS APDL files.\nNothing fancy, just comment, numbers and function names.."}, {:name=>"velocity.vim", :summary=>"Syntax file for velocity templates", :description=>"velocity.vim adds syntax highlighting for velocity templates, a template engine for Java from the Jakarta Project (http://jakarta.apache.org/velocity)."}, {:name=>"russian-menu-translation", :summary=>"russian menu translation (koi8-r encoding)", :description=>"Russian menu translation for GVIM. \nIncludes some dialog and toolbar captions translation.\n\nAlthough it's koi8-r you may convert it to other russian encoding,\nchange scriptencoding in file and that's it."}, {:name=>"nuweb.vim", :summary=>"Syntax highlight for NUWEB (Literate Programming)", :description=>"NUWEB aims to provide simple features for Literate Programming with LaTeX and any other language. So implement highlight consist in TeX highlight and other simple general features. My way was to treat Scraps like Verbatim highlight more some nice features, like bold @_ grouping.\n\nIt works rasonable well with the NUWEB Docs."}, {:name=>"flyaccent.vim", :summary=>"Flying accents support", :description=>"Flying accent support for vim. When enabled (using :M command) you may type\na' (an 'a' letter and an apostrophe) to have an 'á' character on screen. It's a bit like dead characters, but you type the accent after the letter, which is much more intuitive in my opinion.\n \nDisabled by default, may be turned on/off using the :M command. Currently only Hungarian characters are present, but it's easy to add new ones.\n"}, {:name=>"ebnf.vim", :summary=>"Extended BNF (ISO/IEC 14977) Syntax", :description=>"Syntax file for EBNF as specified by ISO/IEC 14977 : 1996(E)\n\nEBNF is slightly different from most homegrown BNF.  Terminals are always quoted, non-terminals are not (and may contain spaces). Kleene closure is achieved by enclosing with braces, 0-or-1 matches with brackets, 1-or-more matches by appending \"-\" to the end of the braces (i.e. {one non-terminal, second non-terminal}- ). Atoms are separated by \",\" or \"|\". A production rule ends with \";\" or \".\". Comments are (* comment *)\n\nFor more information on EBNF see http://www.cl.cam.ac.uk/~mgk25/iso-ebnf.html"}, {:name=>"IDLATL-Helper", :summary=>"Create/modify (win32) idl files and ATL projects", :description=>"NB: This is designed for Microsoft idl files.  Suggestions for extending it are welcome.\n\n* Create idl files - adds guids (using guidgen)\n   - Add interfaces,enums (with guids)\n   - Coclass wizard to create cpp files for ATL  (some support for comet)\n* Easy Method and property creation\n   change  \n        long MyFunc( string arg1, bool *arg2)\n  to\n        HRESULT MyFunc( [in] BSTR arg1, [in,out] VARIANT_BOOL *arg2, long *ret);\n* Convert IDL functions to their c++ equivalents.\n    - Change helpstring() to comments\n\n* Modify guids quickly!\n* add a unique id()  to methods and properties.\n\n"}, {:name=>"as.vim", :summary=>"FlashMX ActionScript Syntax File", :description=>"Flash MX ActionScript Syntax file"}, {:name=>"Mines", :summary=>"Play Mines with vim", :description=>"Mines is a Vim plugin, but you can also source it in.  Mines includes cecutil.vim and Rndm.vim (for screen restoration and for pseudo-random number generation).  The latest developments in Mines.vim will always be available at\n\n    http://mysite.verizon.net/astronaut/vim/index.html#MINES\n\n    Games:\n        \\mfe : play an easy mines game\n        \\mfm : play a  medium-difficulty mines game\n        \\mfh : play a  high-difficulty mines game\n        \\mfr : restore a game\n\nNote that using the \\mf_ maps above will save the files showing in all windows and save your session.  Although I've used the backslash in the maps as shown here, actually they use <Leader> so you may customize your maps using mapleader as you wish.\n\nMines.vim is a use-at-your-own-risk game.  However, an effort has been made to preserve your files.  The game does a \"windo w\" and uses mksession to both save your working files that are showing in your windows and to preserve your window layout for subsequent restoration.\n\nOn many terminals, all you need to do is to click with the left mouse (to see what's there, or maybe to go BOOM!) or to click with the rightmouse to flag what you think is a mine.\n\n    More Maps:\n\n     -Play-\n        x   move the cursor around the field;\n            pressing x is just like pressing a\n            <leftmouse> -- find out what's\n            hidden!\n\n        f   just like the <rightmouse>, flag\n            what's under the cursor as a mine\n\n     -Control-\n        s   suspend the game, restore the display\n            and session  (\\mfr will subsequently\n            restore the game)\n\n        q   quit the game, restore the display\n\n     -New Games-\n        E   starts up a new easy game \n            (only while an old game is showing)\n\n        M   starts up a new medium game\n            (only while an old game is showing)\n\n        H   starts up a new hard game\n            (only while an old game is showing)\n\nThe objective of the game is to flag all mines and to reveal all safe squares.  As soon as you click a <leftmouse> or x, the square under the cursor is revealed with either a count of the number of bombs around it or as a BOOM.\n\nIf you win Minnie will do a cartwheel for you!\n\nSigh -- there appears to be a problem with Sun Solarus dtterms -- Mines highlights several characters with the same foreground and background colors, and this action appears to turn the cursor off on dtterms.  I'm afraid I don't know how to work around this; does anyone know how to turn the cursor back on???\n\nThank you for rating Mines.vim -- good luck!\n"}, {:name=>"coffee.vim", :summary=>"a brownish colorscheme", :description=>"This is a GUI-only colorscheme. It could also be called: \"cafe au lait\" or \"cafe late\", but I figured that just \"coffee\" is shorter ;-)\n\nAnyway, I hope you like it.\n\nNote: it has Unix-style LF, so you may need to convert it to use it under Windows."}, {:name=>"adp.vim", :summary=>"ADP (OpenACS/AOLserver HTML templating format) syntax highlighting", :description=>"Syntax highlighting for ADP (OpenACS/AOLserver templating format) files."}, {:name=>"mruex", :summary=>"Explore your most recently used (MRU) files", :description=>"mruex.vim maintains a list (in a file called mrulist) of your most recently used files. mruex.vim presents an explorer-like interface to mrulist so that you can easily open your MRU files. Duplicates and files that are no longer readable are pruned from mrulist whenever an entry is added to mrulist. If you have several instances of Vim running simultaneously, each update to the mrulist becomes available immediately in all the Vim instances. \n\nUsage:\nA mrulist window is opened by the command :RSplit or <Leader>r where <Leader> is \\ by default. Five commands are available in the mrulist window:\nKey         Action:\nh              Toggle help\nEnter       Open file\no              Open file in new window\nd              Delete entry (not file)\nq              Close mrulist window\n\nCustomization is done via five Vim variables. mruex_key (default '<Leader>r')\tis the key to open the mrulist window, mruex_win_height (default 6) is the height of the mrulist window, mruex_max_entries (default 20) is the maximum number of MRU file names to keep in mrulist excluding duplicates, mruex_type (default 'w') controls the meaning of most recently used. 'w' indicates: Add file to mrulist whenever it is \twritten (saved) to disk. 'e' indicates: add file to mrulist whenever it is entered, and mruex_filter (default '') is a Vim regular expression defining files to be excluded from the mrulist. mruex_relative =1 or 0 determines  whether or not the file paths in the mrulist are relative to $HOME. \nThe default is mruex_relative=1 for unix systems and 0 for others.\nExamples:\n\tlet mruex_filter='d:\\\\temp\\&#039\nin your vimrc excludes files in the d:\\temp\\ directory from the mrulist.\n\tlet mruex_key='<f3>'\nin your vimrc sets F3 as the key that opens the mrulist window."}, {:name=>"HiCurLine", :summary=>"Highlights the current line", :description=>"This script has a number of maps that intercept various motions and cause the current line to be highlighted.  It is a variant of <HiMtchBrkt.vim> (vimtip#177).\n\n    \\hcli : initiate HiCurLine operation\n    \\hcls : stop HiCurLine operation\n\n(see vimtip#411 to have HiCurLine automatically begin highlighting)\n\nHiCurLine.vim uses the HL_HiCurLine highlighting group (by default) to specify the highlighting of the current line.  One may change the highlighting group HiCurLine uses with the g:HL_HiCurLine variable.  By default,\n\n\tlet g:HL_HiCurLine= \"HL_HiCurLine\"\n\nand <HiCurLine.vim> will specify that group internally.  Otherwise, one may change the group used to whatever one wishes:\n\n\tlet g:HL_HiCurLine= \"Search\"\n\tlet g:HL_HiCurLine= \"Function\"\n\netc.  The default highlighting is: (background is a setting, see :he 'bg')\n\n\tbackground == dark : blue text on cyan background\n\tbackground == light: cyan text on blue background\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#HICURLINE)\n"}, {:name=>"perl-support.vim", :summary=>"Perl IDE -- Write and run Perl-scripts using menus and hotkeys.", :description=>"- insert various types of comments\n- insert complete but empty statements (e.g. 'if {} else {}' )\n- insert often used code snippets (e.g. declarations, the opening of files, .. )\n- insert the names of file tests, character classes, special Perl-variables and POSIX-signals\n- read, write, maintain your own code snippets in a separate   directory\n- run scripts or run syntax check from within the editor\n- show compilation erros in a quickfix window; navigate with hotkeys \n- read perldoc for functions and modules \n- run perltidy / run the profiler SmallProf\n- test / explain regular expressions (needs Vim with Perl interface)\n\nHere are some screen shots :   http://lug.fh-swf.de/vim/vim-perl/screenshots-en.html\n\nThe help file online :   http://lug.fh-swf.de/vim/vim-doc/perlsupport.html\n\nThe key mappings of this plugin (PDF) :  http://lug.fh-swf.de/vim/vim-perl/perl-hot-keys.pdf\n\nThe installation explained: http://www.thegeekstuff.com article\n\"Make Vim as Your Perl-IDE Using perl-support Plugin\"\n(http://www.thegeekstuff.com/2009/01/make-vim-as-your-perl-ide-using-perl-supportvim-plugin)\n\nDocumentation \n--------------------------------------------------------\nThis plugin comes with a help file (perlsupport.txt). Read it with   \n \n  :h perlsupport \n\n** PLEASE READ THE DOCUMENTATION **\n\nEditing actions differ for different modes!  \nThere are  a lot of  features which can be configured or customized to match your needs.\n\n\nMAILING LIST\n--------------------------------------------------------\nYou can subscribe to the vim-plugins-list mailing list to post your questions or\nsuggestions for improvement or to report bugs.  The list will also be used to\nannounce new releases ( c.vim / bash-support / perl-support / doxygen-support ).\nVisit the following page for subscribing to the mailing list:\n     \n  http://lug.fh-swf.de/cgi-bin/mailman/listinfo/vim-plugins-list\n\nThe vim-plugins-list list is very low on traffic.\n\n___________________\nThank you for rating perl-support ! "}, {:name=>"BOG", :summary=>"Blue Orange Green color scheme", :description=>"screenshot at http://www.quantumz.net/screen/gvim272003.png . Suggestions are welcome :)\n\nGui only\n\n"}, {:name=>"spreadsheet.vim", :summary=>"SpreadSheet Functionality", :description=>"This script lets you use vim as a spreadsheet, adding arithmetic calculations to your text files.\n\nUseful for bills, expenses, ratings and other numeric text templates.\n\nIt provides three main functions:\n   Get(\"cell\")\n   Set(\"cell\", \"value\")\n   Calculate(\"operation\")\n\nDetailed instructions and examples are included in the script file.\n\nIt uses 'bc'  Linux OS comand for the Calculate function."}, {:name=>"BufClose.vim", :summary=>"Unload a buffer without closing the window it's in", :description=>":BufClose without an argument will close the buffer in the current window, leaving you with a blank buffer.\n\n:BufClose with an argument looks for a buffer by that name or number in a window and closes it, leaving that window with a blank buffer."}, {:name=>"MPD-syntax-highlighting", :summary=>"Syntax highlighting for MPD language", :description=>"MPD language is a similar to SR. It`s used for parallel programming."}, {:name=>"help.vim", :summary=>"help subsystem (create buffer with context-dependent help page)", :description=>"This plugin can help you call man or perldoc -f or many other help system in dependent from context.\n\nChanges:\n      * 1.18-1 now support perdoc in win32 OS...\n      * 1.18     several bugfixes, added call apropos if man page not found.\n      * 1.17     support fvwm, muttrc filetype, many fixes...\n      * 1.17g   new, extended implementation of help.vim (http://www.vim.org/scripts/script.php?script_id=561)\n      * 1.17b   forked by help.vim,v 1.16 2002/01/05 19:58:38 from Slava Gorbanev, added support tcl/tk and many fixes\n\nUsage:\n          use <F1> by default or other key (if you remap it) to call Help(expand(\"<cword>\"))\n          this function creating in half window buffer with contex-dependent\n          manual (or other) page about word under corsor.\n \n    By default in help-buffer set key-mapping:\n    q           for exit (and ``Esc'' in GUI mode)\n    o           for command :only\n    D           for go to DESCRIPTION section\n    S           for go to SYN section\n    (and other --- see source code by detail)\n\nYou can mapping go to any other section:\nfor example for go to NAME section by N key call next command:\nmap N :call GoToSection('NAME')\n\nNow support: sh, vim, perl, tcl/tk, C/C++, fvwm, muttrc and many other.\n\n TODO nicier documentation (oh, my terrible english)...\n TODO support many other language"}, {:name=>"rd.vim", :summary=>"Syntax highlighting for RD files.", :description=>"RD is multipurpose documentation format created for documentating Ruby \nand output of Ruby world.\n\nabout RD: http://www.ruby-lang.org/~rubikitch/RDP-en.cgi?cmd=view;name=RD"}, {:name=>"rcsvers.vim", :summary=>"Use RCS to keep a backup version whenever you save a file", :description=>"A Vim plugin for automatically saving backup versions in RCS whenever a file is saved.  You can compare to any revision as well.\nkeywords: VCS, version control system, incremental saving, automatic versioning, automatic journalling or journaling, or autosave backups with versions.\n\nThe maintainer is Juan Frias (juandfrias at gmail.com)\n\nWhat's RCS? It's the Revision Control System, a set of programs used for keeping many versions of a file. See http://www.gnu.org/software/rcs/rcs.html\n\nThe RCS programs are freely available at http://www.cs.purdue.edu/homes/trinkle/RCS/\n\nBe careful if you really use RCS as your production file control, it will add versions like crazy.  See the g:rvMode option to have more control over when a save is added to the revision file.\n\nrcs-menu.vim by Jeff Lanzarotta is handy to have along with this (vimscript #41).\n\nInspired by savevers.vim by Ed Ralston (vimscript #89).\n\n Mapped Keys: \n               <Leader>rlog    To access the saved revisions log.  This works as\n                                      a toggle to quit the revision windows too.\n\n               <enter>         This will compare the current file to the\n                                    revision under the cursor (works only in\n                                    the revision log window)\n\n               <Leader>older   does a diff with the previous version\n\n               <Leader>newer   does a diff with the next version\n\n You probably want to map these in your _vimrc to something easier to type, \n like a function key.  Do it like this:\n\"re-map rcsvers.vim keys\nmap <F8> \\rlog\nmap <F5> \\older\nmap <F6> \\newer\n\n You may need to set the following shell(environment) variables, you'll get a warning if so:\n user name:\n\t\tLOGNAME=myusername\n timezone:  \n\t\tTZ=EST5EDT \n\nLook here if you have problems with Daylight Saving Time (DST) with RCS after 2007 on Microsoft Windows:  http://support.microsoft.com/kb/932590"}, {:name=>"ASPRecolor.vim", :summary=>"In ASPVBS buffers, give JS, ASP, and HTML sections different guibg colors", :description=>"I edit ASP code a lot.  There's usually three different langauges in the same file: HTML, Vbscript, and Javascript.  The ASPVBS filetype plugin handles this well, including the syntaxes from all three types, but it gets hard for me to distinguish them on the screen.  I wanted to assign different background colors to the different regions - but they're all highlight links, so if I change, say, Comment, then all of HTMLComment, AspVBSComment, and javascriptComment will all change too.\n\nThis plugin changes that.  After an ASPVBS buffer is loaded, it recolors every ASP and javascript syntax item with a new background color - by retrieving the underlying linked highlight definition and redefining the specific highlight item.  ASP becomes dramatically easier to read. See the included file compare.asp.html (also here: http://member.newsguy.com/~rpresser/compare.asp.html).\n\nRequires the MultVals plugin <http://www.vim.org/scripts/script.php?script_id=171&gt; for array handling.\n\nThis technique could be applicable to other kinds of files that have multiple languages in them, like HTML/CSS, or C++ with embedded SQL, or maybe even someday XML.\n"}, {:name=>"HTML--insert", :summary=>"Script for easy insert HTML tag A href and IMG with filled attributes.", :description=>"Script add command :IMG and :HREF for easy inserting xhtml elements IMG and ANCHOR.\n\nWithout parameter call file browser dialog for select file.\n\nIf Vim is not support browse() function (non GUI Vim), you must insert path manualy.\n\n:IMG command call identify (from ImageMagic) for detect geometry of image. "}, {:name=>"ctrlax.vim", :summary=>"Enhancement over <C-A> and <C-X> (plugin)", :description=>"The plugin implements an enhanced version of vim's incrementing features with\n<C-A> and <C-X> using functions to find and replace strings according to any\ninline scheme.\n\nBy default vim behaviour is emulated, plus it cycles through names of months\nand week days (trying full name, then abbreviated).\n\nThe language for months and week days is English, but it is fairly straight\nforward to localise this. An example of localisation is provided in the\ndocumentation.\n\nExtra functions meant to assist in writing new functions are included, too."}, {:name=>"desc.vim", :summary=>"Highlinting for ROCKLinux .desc files describing software packages", :description=>"ROCKLinux uses .desc files for description of packages. It contains tags stating what the packages are, who is the author/maintainer of the package. It also describes download locations of the source needed to build the package and the moment when the package should be built."}, {:name=>"ntprocesses", :summary=>"Kill NT processes from Vim", :description=>"PLEASE READ THE INSTALL SECTION COMPLETELY.\n\n- This plugin generates a list of NT processes that are running on the\n  local NT/W2K/XP machine. You can kill any by processing K on the\n  corresponding entry.\n- You can open the processlist window through WinManager (as described in\n  the installation section below) or by assigning a hot key. You can use\n  the same hot key to open/close the window. Alternatively, you can also\n  use the :NTProcesses command to open/close the processes window.\n- You can choose which fields that you want to see by using the\n  NtpFields command. You can select the sort fields by pressing s\n  consecutively and r for reversing the sort direction.\n- If you have permissions, you can view the process list in a remote m/c\n  by using the NtpSetHost command. With no arguments, it prints the\n  current remote host name. To switch back to the local m/c, use \".\" for\n  the host name.\n- For the sake of speed, the list of processes is cached. To see the\n  latest set of processes and their states at any time, refresh the window\n  by pressing 'R'.\n- It requires multvals and genutils plugins to be always installed, but\n  others are required only depending on your usage/setting (for a better\n  experience and formatting).\n\n\nSearch_key_words: ntprocesses ntprocess NT processes process kill multvals genutils align Hari Krishna Dara "}, {:name=>"caramel.vim", :summary=>"Low eye strain color scheme, based off of the GIMP&#039s caramel pallette for GVIM", :description=>"Just a simple, low eye strain color scheme that is based off of the GIMP&#039s caramel color pallette.\n\nSyntax hilighting is fully fleshed out, as well as most window features.  Todo list is in header comments in file.\n\nScreenshot with C, COBOL and Perl highlighting is available at: http://entropy.muc.muohio.edu/~afterthefall/screen.jpg"}, {:name=>"GTK-", :summary=>"GTK+-2.2 syntax highlight", :description=>"GTK+-2.2 syntax file. This contains xlib.vim, glib.vim, \npango.vim, gdk.vim and gtk.vim. All deprecated methods are\nnot highlighted. \n"}, {:name=>"autolisp-help", :summary=>"Vim style help file of Auto/Visual Lisp functions", :description=>"This is a Vim style help file of Auto/Visual Lisp functions. \nPlace it in vimfiles/doc/ and use :helptags {dir} to generate\na new tags file. I also have this mapping in my vimrc file.\nmap <leader>hh :he <C-R><C-W><CR>\nPlace your cursor on a function and type '\\hh' or what ever you have 'leader' set to. \nOr can simply type :he <AutoLISP function> to open the help file to a function.\n\nSee Vim help\n :he helptags\n :he leader\n"}, {:name=>"wintersday.vim", :summary=>"Dark color scheme", :description=>"Another dark, color scheme."}, {:name=>"darkdot", :summary=>"yet another dark colorscheme", :description=>"This is a dark colorscheme that uses the colors found on http://slashdot.org. By this I mean that white, black and cyan are the most common colors, not that the programs will look like Slashdot postings.\n\nIt is a colorscheme both for the GUI and the console version of vim.\n\nThe latest version and a screenshot can be found at http://www.c7obs.net/~david/stuff/"}, {:name=>"TEXT--fill-char", :summary=>"script for on-the-fly indenting of columns according to previous or next line", :description=>"Script for on-the-fly indenting of columns according\nto the previous or next line (it allows for instance to easily align\n'=' sign in a sequence of C initializations, and much more).\n\nEXAMPLE:\n\nline 1: background-color: _#eeeeee\nline 2: color:|\n\nChar | is cursor, char _ is space. \n\nAfter call :FillUpSpace (you can map to TAB) is \nsituation this:\n\nline 1: background-color:_#eeeeee\nline 2: color:___________|\n\nCursor is under #. It's all.\n\nYou can use :FillUpPrevious for fill any char (by char \nprevious cursor) \n\nEXAMPLE:\n\nline1: Chapter1 ...................... 7\nline2: Chapter2 .|\n\nAfter use :FillUpPrevious is situation this:\n\nline1: Chapter1 ...................... 7\nline2: Chapter2 ......................|\n"}, {:name=>"gnu-c", :summary=>"A filetype plugin to encourage the GNU C style.", :description=>"The GNU Coding Standards encourage the use of a C style not supported by default.  This script provides convenience support when editing C sources according to the C style guidelines encouraged in the Standards by overruling the default C ftplugin, which uses a style closer to the Linux kernel style.\n\nThe GNU Coding standards are available at:\n\n\thttp://www.gnu.org/prep/standards.html\n\nSee |C-Indenting| and |format-comments| for an idea of what the script does.\n"}, {:name=>"psp.vim", :summary=>"Syntax file for Python Server Pages", :description=>"Syntax for PSP used in Webware (http://webware.sf.net).  "}, {:name=>"dawn", :summary=>"Soft colors on a light grey background (GUI only)", :description=>"Dawn is for the GUI only. It is a more muted and lower contrast version of the default and morning color schemes. \n\nA companion color scheme with a dark blue-black background is dusk (vimscript #758)."}, {:name=>"allfold", :summary=>"View selected lines by folding away the rest", :description=>"The allfold scripts implement a feature set which allows VIM users to view ALL interesting lines in a buffer and FOLD the rest away.  Lines are selected to be interesting in one of the two following ways: \n\n1. They match a regular expression pattern.\n2. They are in a block of lines delimited inclusively by a line that matches\n   a beginning RE pattern and a line that matches an ending RE pattern.\n\nSets of lines matching different selection criteria can be combined using logical \"and\" and \"or\" operations. The selections may be inverted so that lines not matching the selection criteria are actually selected.\n\nBeyond these basics other features do such things as manipulating lists of selection commands and using the raw selection \"bit-map\" directly to enhance the capabilities and ease of use of the scripts.\n"}, {:name=>"fgl.vim", :summary=>"Indent script for IBM INFORMIX 4GL/4Js programs", :description=>"The script indents IBM INFORMIX 4GL/4Js programs.\n\nAuto-indent happens when you go to the next line or next word after typing\n1. A whole keyword (e.g. ELSE, WHEN, ON, ...)\n2. A keyword phrase (e.g \"BEFORE FIELD\", \"AFTER FIELD\").\n"}, {:name=>"autonumbering-in-vim", :summary=>"Utility script to autonumber lines while editing", :description=>"\"Description: This script auto-numbers a list.\n\"\n\"General recommended settings for editing \"*.txt\" files\n\"set nocp et ts=4 sw=4 tw=80 ai\n\"\n\"HOW TO INSTALL (requires vim 7.0):\n\" - Drop the plugin under $HOME/.vim/plugin or\n\" - :source autonum.vim\n\"\n\"HOW TO USE:\n\" 1. Edit a file and type \\as to activate autonumbering\n\" 2. Insert a number in the below-explained manner (1. )\n\" 3. Hit enter (A number is automatically inserted for you)\n\" 4. Hit ctrl-t, line is indented and numbered\n\" 5. If there are several levels of numbers, ctrl-d and ctrl-t could\n\"    be used to insert the next number in sequence at the indent level\n\"    your cursor is in.\n\" 6. Hit ctrl-g to remove the inserted number\n\" 7. Hit ctrl-l to forcefully autonumber\n\"\n\"Number format expected: \"\\<\\(\\d\\+\\|\\a\\)\\>\\W \"\n\" In words: <word-boundary><(numerals or alphabets)><non-word-char><space>\n\" eg: \"1. \",     \"32) \",         \"a] \",     \"D> \"\n\"\n\" keymappings: ENTER, ctrl-d, ctrl-t, ctlr-l & ctrl-g all in insert mode\n\"  \\as   : To start AutoNumbering\n\"  \\as   : To stop AutoNumbering (yeah, it toggles :)\n\"  ENTER : start with next number (add 1 to previous)\n\"  ctrl-d: indent one level back and try to autonumber\n\"  ctrl-t: indent one level forward and try to autonumber\n\"  ctrl-l: autonumber.\n\"  ctrl-g: remove numbering on the line\n"}, {:name=>"cg.vim", :summary=>"Syntax for Cg and FX hardware-shading language files", :description=>"Syntax and keyword highlighting for the Cg shader-programming language, used in game programming and plugins for 3dsMax, Maya, etc.\n\nThis file is appropriate for .cg and .fx files.\n\nDetails, see http://www.cgshaders.org/ or http://developer.nvidia.com/\n\nCan also be used for Microsoft HLSL files.\n\nKevin Bjorke\nmailto:kbjorke@nvidia.com"}, {:name=>"matlab.vim", :summary=>"Syntax highlighting for Matlab files", :description=>"Syntax highlighting for Matlab files with\nlist of MATLAB standard functions,\nControl System Toolbox"}, {:name=>"comment.vim", :summary=>"Comment and uncomment selected blocks of code.", :description=>"This script contains two simple functions to comment and uncomment visually selected blocks of C and C++ code using \"#ifdef 0...#endif\".   If'd out sections are commented with the author's name and a timestamp.\n\nThe default mappings are .c to comment and .C to uncomment.\n\ne.x.\n#if 0 /* author Tue Mar 25 19:08:09 EST 2003 */\n...\n#endif /* author Tue Mar 25 19:08:09 EST 2003 */\n"}, {:name=>"pyljpost.vim", :summary=>"vim + python livejournal poster", :description=>"A couple of vim macro along with the simple Livejournal poster written in python. Macros include syntax\nfile for livejournal posts, templatabiliy, multiple journals and a couple of other minor features. Together this makes a simple vim-oriented livejournal client for those who doesn't like to leave their favourite editor."}, {:name=>"todolist.vim", :summary=>"Creates list of TODO, FIXME, BUG comments", :description=>"This is my first vim script and there are plenty of bugs.  If you can help out, please do.\n\nThis script is a plugin to be used with the winmanager plugin (see vimscript #95).  The script searches all your buffers for TODO, FIXME, NOTE, BUG, XXX comments found in your code and presents them in a list.  You can sort the list by type, file, line number, date, or by the text of the todo.  You can also customize the columns in the todo list.\n\nCommands:\n=========\n\n<cr> : open todo under cursor\np : [p]review todo under cursor\nC-w z : close preview window\nx : zoom todo list window\ns : cycle [s]ort field\nc : toggle preview on [C]ursorHold\ny : toggle s[y]ntax\nr : [r]everse sort\n? : toggle help\n"}, {:name=>"northsky", :summary=>"The dark soft colorsheme", :description=>"Colorsheme for programmer's inflamed eyes :)\nScreenshots:\nhttp://sites.google.com/site/khorser/_/rsrc/1260798469256/opensource/vim/northsky.png\nhttp://sites.google.com/site/khorser/_/rsrc/1260798491251/opensource/vim/northskydiff.png\n"}, {:name=>"fgl.c", :summary=>"Creating tags for INFORMIX 4GL/4Js programs under UNIX environment", :description=>"The zip file contains three files - fgl.c, parsers.h, and source.mak.\n\nWhen 'fgl.c' file in fgl.zip is compiled with exuberant ctags source files, which you can download, ctags(executable) will generate tags for functions, cursor ids, prepared statements id, and global/module level variables. I compiled exuberant ctags source in AIX and Linux without any problem. Only trouble I faced was that source codes in ctags-5.4 tar file had DOS line breaks and had to translate them to UNIX line breaks using dos2unix utility.\n\nIf you use taglist.vim, add the following lines in taglist.vim script. \nScroll down the script to a section where tag types are defined for different languages:\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n\" fgl language\nlet s:tlist_def_fgl_settings = 'fgl;f:function;c:cursor;s:prepared;v:variable'\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n"}, {:name=>"JavaBrowser", :summary=>"Shows java file class, package in a tree as in IDEs. Java source browser.", :description=>"This script is modelled on TagList vim script. Thanks to Yegappan Lakshmanan for taglist.vim\nHowever, this script is SPECIFICALLY tailored for Java language. So, it shows structure of the Java file\nstarting with classes defined within it and NOT in a general tag structure. I found it useful and hope you all\nfind it useful too. It also has a nice syntax to show the class members in UML format.\n\nThe \"Java Browser\" plugin provides the following features:\n1. Opens details of Java file types (class, package etc) in a Tree structure in a separate vim window\ne.g: + package\n            java.util\n       + class\n       +   vector\n       +      field\n                  ....\n       +      method\n                  ....\n2. The tree has syntax highlighting as follows:\n    A. public members in green, protected in orange, private in red\n    B. static members are underlined and abstracts are shown in italics as per UML specs in addition to above highlighting.\ne.g:- If you have method that public static and abstract, it will shown in green color, in italic and underlined. You can think of all possible combinations.\n3. When you double click (configurable for a single click) or hit enter key in the browser window when on a member, it will take you to the definition of that member in the Java file window.\n4. It can show an arrow (=>) or an icon (ONLY for signs enabled VIM) showing the current position of the cursor in the java file.\n5. The browser window is updated automatically when you open any other Java file (or switch between buffers) in the Java file window. You can manually update browser window by typing 'u' in the browser window (when u change a class for example and you need that to be reflected).\n6. When you put the cursor (not the mouse pointer) on a member, it shows the prototype of the member declaration in the command window (like baloon popup in IDEs!)\n7. It understands the inner classes and are shown like HashMap.Iterator etc.\n8. It understands the overridden methods.\n9. Browser window opening can be configured for a vertically/horizontally split Vim window.\n10. Groups the tags by their type and displays them in a foldable tree.\n11. Automatically highlights the current tag name.\n12. The browser window contents can be sorted either by name or by line number.\n13. Runs in all the platforms where the exuberant ctags utility and Vim are\n     supported (this includes MS-Windows and Unix based systems).\n\n TODO:\n 1. To cache ctags output for a file to speed up displaying the taglist\n     window.\n \nThis plugin relies on the exuberant ctags utility to generate the tag\n listing. You can download the exuberant ctags utility from\n http://ctags.sourceforge.net. The exuberant ctags utility must be installed\n in your system to use this plugin. You should use exuberant ctags version\n 5.3 and above.  There is no need for you to create a tags file to use this\n plugin.\n\n This script relies on the Vim \"filetype\" detection mechanism to determine\n the type of the current file. To turn on filetype detection use\n\n               :filetype on\n\n This plugin will not work in 'compatible' mode.  Make sure the 'compatible'\n option is not set. This plugin will not work if you run Vim in the\n restricted mode (using the -Z command-line argument). This plugin also\n assumes that the system() Vim function is supported."}, {:name=>"seashell", :summary=>"moderate contrast scheme, light or dark", :description=>"This is very reminiscent of a seashell. It's something of a cross\nbetween zellner and peachpuff, if such a thing is possible. :-)\n\nSee also vimscript #590\n\nScreenshot: http://home.ptd.net/~gwilliam/vim/seashell.png"}, {:name=>"BlackSea", :summary=>"seashell-night, if you prefer", :description=>"This is an inverse/opposite of the \"seashell\" color scheme\n(vimscript #589).\n\nDark background, high contrast. The cterm version is very\nsimilar to \"evening\".\n\nScreenshot: http://home.ptd.net/~gwilliam/vim/BlackSea.png"}, {:name=>"PapayaWhip", :summary=>"low-contrast light scheme", :description=>"This has a nice light background (PapayaWhip) that's easy on\nthe eyes yet very usable. Not nearly as \"puffy\" as peachpuff.\nCompare it to ChocolateLiquor (vimscript #592).\n\nScreenshot: http://home.ptd.net/~gwilliam/vim/PapayaWhip.png"}, {:name=>"ChocolateLiquor", :summary=>"low-contrast dark scheme", :description=>"This started as an inverse/opposite of PapayaWhip (vimscript #591),\nbut took on a life of its own. If you want a dark background that's very\nusable but without too much contrast, try this one.\n\nScreenshot: http://home.ptd.net/~gwilliam/vim/ChocolateLiquor.png"}, {:name=>"guifontpp.vim", :summary=>"Vim plugin for quickly changing GUI font size", :description=>"This plugin defines key mappings to quickly make the GUI font larger or\nsmaller. The default mappings are \"+\" to make the font larger by 1 point\nand \"-\" to make the font smaller by 1 point. The original font size can\nbe restored with \"=\" key at any time. The mappings are user-configurable\n(see the installation section below).\n\nThis plugin should work on Unix and Win32 but it will work only with\ncertain patterns of 'guifont' option, namely:\n\n - on Unix, 'guifont' should be set to the X Logical Font Description\n   (XLFD) name, for example:\n\n      set guifont=-*-lucidatypewriter-bold-*-*-*-15-*-*-*-*-*-*-*\n\n - on Win32, 'guifont' should include 'hXX' font option, for example:\n\n      set guifont=Lucida_Console:h8:cANSI\n\nPlease let me know if this is not good enough for you."}, {:name=>"TaQua", :summary=>"baby colors for use with aqua themes", :description=>"I'm using an aqua theme on GTK and Mozilla, and made this color scheme to fit the light/baby/soft colors of the aqua stuff.\nCheck a screenshot in http://eustaquiorangel.com/images/taqua.png"}, {:name=>"HelpClose", :summary=>"Close all help windows", :description=>"This plugin defines a new little command :HelpAllClose.  When execute this command, all help windows are closed.  You doesn't need to move to help window, when want to close it, any more."}, {:name=>"colorpalette.vim", :summary=>"vim script for color palette etc.", :description=>"A very simple range of colors to color words or line temporarily... \n\nhttp://www.intratel.es/cubica/dominios/joyasur/gtemp/cp.jpg\n\n\"USAGE:\n\n\"To see the Palette of colors:\n        \"normal mode: ;p\n        \"command: Palette\n\"To select a color:\n        \"normal mode: <RightMouse> or <Up> <Down> arrows \n\"To color a word or a line:\n        \"normal mode for background: <Space>\n        \"normal mode for foreground: <M-Space>\n        \"visual mode for background: <RightMouse>\n        \"visual mode for foreground: <M-RightMouse>\n\"Color HEX and RGB information:\n        \"normal mode: i\n        \"popup menu: info color\n\n\"Note: To see in Status-Line the color that has been selected --don´t forget to change the default number of \"User\"."}, {:name=>"python-tools", :summary=>"Python production tools", :description=>"Features :\n- HappyDoc opens the current module UML class schema : [CTRL]-h\n- getPythonDoc finds the current class+method name : [CTRL]-j\n- collapsePythonBlock folds a python block : [CTRL]-k\n- putEmptyFunc writes a new commented func : [CTRL]-n\n\nGoodies :\n- Explorer under [F9]\n- Terminal overflow highlighting (80columns)\n"}, {:name=>"execmap", :summary=>"Lets you relax while executing long normal or visual mode maps", :description=>"Description:\n  The aim of this plugin is to allow users to define lengthy normal mode\n  mappings (and thus increase the name-space) and still be able to type the\n  mappings comfortably, thus reducing the chance of making mistakes or\n  getting timed out. When you make mistakes in typing (resulting in an\n  invalid map) or pause for long enough, the control goes to the plugin\n  instead of getting aborted, which then prompts you to continue typing or\n  correct the map, without needing to start all over.\n                                                                             \n  The plugin provided a generic functions called ExecMap() and ExecMap2()\n  which need to be defined as the handler for the set of maps starting with\n  a common prefix. It by default defines this as the handler for the prefix\n  \"\\\" and \"_\" (without the quotes) so that for all the mappings that start\n  with these prefixes, the plugin provides a backup on errors and time out\n  cases. But you can define additional mappings for additional prefixes such\n  as \",\" etc.\n                                                                             \n      nnoremap , :call ExecMap(',')<CR>\n                                                                             \n  As you enter key strokes to complete a command, the plugin looks up the\n  partial command in the complete list of normal or visual mode mapping (as\n  the per the case) and rejects the key strokes if it doesn't match with\n  any. When the command matches an existing map with no conflicts, it gets\n  immediately executed. When the command matches a map, but there is a\n  longer map that could be matched, the plugin indicates this by displaying\n  a \"*\" at which point you can press <Enter> to execute the map, or continue\n  to type to match the longer command. Here is an example to describe it\n  better, say you have two maps as below:\n                                                                             \n      nnoremap \\ma :echo \"ma\"<CR>\n      nnoremap \\maxi :echo \"maxi\"<CR>\n                                                                             \n  Typing \"\\ma\" would match one of the mappings completely, but it would also\n  match \"\\maxi\" partially, so the plugin allows you to continue to type\n  until you press <CR>. However, whenever there is an exact match for the\n  current command with an existing map, the plugin indicates it by appending\n  a \"*\" to the prompt (pressing <CR> at that moment would execute a valid\n  command). I have found it working well for both normal and visual mode\n  mappings.\n                                                                             \n  You can use <BS> to clear the previous character and press <Esc> or <C-C>\n  to cancel it anytime. You can also press <Enter> to execute the command\n  that is typed in, but it has to match a valid map.\n                                                                             \n  Note that this functionality was originally part of genutils plugin, but\n  it is more appropriate for it to be a separate plugin rather than a\n  library function so it is no longer part of genutils.\n                                                                             \nFunction Prototypes:\n    \" Add a handler for all the maps that share the given prefix in\n    \"\t  normal mode.\n    void ExecMap(String prefix)\n                                                                             \n    \" Add a handler for all the maps that share the given prefix in\n    \"\t  the given mode. Only normal and visual modes are supported.\n    void ExecMap2(String prefix, String mode)\n                                                                             \n    \" Prompt user for a map with the given prefix in the given mode and\n    \"\t  return the map. The return value could be executed using :normal\n    \"\t  command. If the user cancels the operation, it returns an empty\n    \"\t  string. Only normal and visual modes are supported.\n    String ExecMapPrompt(String prefix, String mode)\nLimitations:\n  - You can only execute maps that are complete to be executable using\n    :normal exmode command (see help on :normal). One example map that will\n    not work is:\n                                                                             \n      nnoremap _ab :call input('ab command')<CR>\n                                                                             \n    If you execute the above command using \":normal _ab\", it will not run as\n    expected. Similarly, maps that are supposed to leave you on the : prompt\n    don't work as well.\n\n\n\nSearch_key_words: execmap execmap.vim normal visual mode map maps genutils relax comfort Hari Krishna Dara"}, {:name=>"cmake.vim", :summary=>"CMake indent file", :description=>"A CMake (www.cmake.org) indentation mode, which indents IF()/ELSE()/ENDIF(), FOREACH()/ENDFOREACH(), and MACRO()/ENDMACRO(), and it also supports multiline arguments to commands, quoted and non-quoted arguments."}, {:name=>"cmake.vim-syntax", :summary=>"CMake syntax highlighting", :description=>"A CMake (www.cmake.org) syntax highlighting mode, which understands most of commands, reports depricated commands, highlights common arguments, strings, environment variables, registry entries, variable references."}, {:name=>"vimwc.sh", :summary=>"a script for running wc nicely", :description=>"I use this script mapped to <F12>. It outputs the current wordcount to the \\\\&#039status bar\\\\&#039 thus aleviating the ever annoying \\\\&#039Press enter\\\\&#039 prompt after using :!"}, {:name=>"vimbadword.sh", :summary=>"outputs the first misspelled word on the status line", :description=>"This script merely outputs the first misspelled word in the current file on the status line.\n\nIt needs aspell but should work with any speller that can output a (unsorted) list of badwords."}, {:name=>"oceanblack.vim", :summary=>"dark scheme (soft blue/green on black), easy on the eyes", :description=>"variation on Tom Regner's oceandeep colorfile.\n\nsee sample at http://www.vertonghen.org/chris/stuff/oceanblack-sample.png\n\npublic repo for this script:\n\nhttp://github.com/chrisv/vim-chrisv "}, {:name=>"php.vim-html-enhanced", :summary=>"combination of the php indent file and the html indent file", :description=>"This is a combination of the PHP indent file by Miles Lott with the HTML indent file by Johannes Zellner. Usefull for editing php-files with html parts in it which is a typical job for webdesigners"}, {:name=>"cream-numberlines", :summary=>"Number lines of a selection", :description=>"\nFeatures:\n\no Dialog prompt for optional start number. (Default is actual line number.)\n\no Column of numbers is right justified.\n\n\nUsage:\n\no Must be called from visual mode (with a selection).\n\no Required argument indicates mode, only \"v\" (visual) allowed.\n\no Example mapping:\n\n    vmap <silent> <F12> :<C-u>call Cream_number_lines(\"v\")\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software.\n\n\n"}, {:name=>"asmMIPS", :summary=>"MIPS specific assembly syntax (MAL)", :description=>"Highlights MIPS assembly keywords, registers, labels, constants etc.."}, {:name=>"valgrind.vim", :summary=>"Navigate in the output of the memory checker valgrind", :description=>"Valgrind (http://developer.kde.org/~sewardj/) is an open-source memory debugger for x86-GNU/Linux. This script allows you to start valgrind from vim and easily jump to error it reports.\n\nThe script output is not very beautiful yet, but I find it already useful.\n\nSee the comments in the beginning of the script for some documentation."}, {:name=>"toc.vim", :summary=>"Syntax file for TOC files", :description=>"Syntax file for TOC files as described in CDRDAO(1)."}, {:name=>"Qt.vim", :summary=>"tiny tool for the uic used in Qt from Trolltech", :description=>"only for unix/linux\n\nAnyone who uses Trolltech's fabulous Toolkit Qt is able to generate cpp/h files using the xml Files generated by the Qt-Desginer. \nBy using an additional inheriting instance your can make your layout code ( the ui/cpp/h files in the basedir) independant from your implementation code ( the classImpl.ccp and classImpl.h in your pwd).\nThats what this little script does.\nAdditionally it makes a pro-file for qmake.\nThe plugin appears in your menubar as Plugin/QT\n\n- create a new dir\n- start your editor : gvim myfile.ui\n- Plugin/QT/UIC subImpl -> creates a base directory with .cpp/.h/.ui file -> a subdeclaration with the .cpp/.h files -> main.ccp and a pro-file. If your want it will run qmake, make and executes the resulting program.\n\n- Plugin/QT/UIC Impl creates only the .cpp und .h from your .ui file\n\n- Manpageview for qt classes: type for example :Man QString and see how it works. You can also type K when your coursor is over a qt class name.\n\nSuggestions are welcome."}, {:name=>"ctags.vim--Johnson", :summary=>"Display function name in the title bar and/or the status line", :description=>"This is a new version of Alexey Marinichev&#039s ctags.vim script, vimscript #12. I have modified it with the author&#039s permission, but cannot upload it as a new version of the original script because Vim Online now allows only the original author to do that.\n\nThe original script used exuberant ctags to build a list of tags for the current file and displayed the name of the function the cursor was in (actually the name of the tag at or above the cursor&#039s line) in the title bar.\n\nThis version has been modified to display the function/tag name in the status line instead of or in addtion to the title bar.  If multiple windows are open, the correct function/tag name is displayed in each status line. The script has also been modified to be a plugin instead of having to be sourced. Finally, since exuberant ctags now supports Python and Vim languages as well as C, .py and .vim were added to the list of suffixes that automatically start the script.\n\nNew in Version 2.1\n------------------\n\n1.  Keith Reynolds contributed some changes that have made a dramatic improvement in the startup time when opening large files containing many tags.  The improvement is greatest when using a vim compiled with Perl support.  His changes also result in this version using less memory than version 2.0.\n\n2.  Keith also added automatic enabling of the status line (i.e., setting 'statusline' to 2) when entering a buffer in which the script is active.\n\n3.  The default g:ctags_args value has been changed to use C and vim type values more appropriate for this plugin.  If you prefer the previous defaults, the values are still noted in the script and can be used instead by setting them yourself in your ~/.vimrc.\n\n4.  The default g:ctags_path value has been changed to be better for most users.  This can also be reverted to the previous default value by looking in the script for the previous setting and putting this in your ~/.vimrc.\n\n5.  The ctags database is now regenerated every time a buffer is saved.  This keeps the database up to date as a file is changed.  If this is a performance problem for you, just add\n\n        let g:ctags_regenerate = 0\n\nto your ~/.vimrc.\n\n6.  The behavior of the cursor when moving vertically through text has been improved.  It no longer \"forgets\" the column to which it was last set as often.  It may forget now only when the tag name changes.\n\n7.  Configuration varaibles may now be set at any time, not just at vim startup time.\n"}, {:name=>"dante.vim", :summary=>"dark color scheme", :description=>"A good dark color scheme\n"}, {:name=>"cpp.vim", :summary=>"Syntaxhighlightning for Qt sources", :description=>"All Qt-classes are highlighted like built-in types.\nAlso Qt-keywords and Qt-macros are highlighted.\n"}, {:name=>"gisdk", :summary=>"GISDK syntax files for Vim 6.0", :description=>"GISDK is a script language for GIS (Geographical Information Systems) software produced by Caliper. This script intends to profit from the programming editing capabilities of Vim to provide features for developing programs in GISDK, like syntax highlighting, auto completion and tagging. More information can be found in gisdk.readme.\n\nFor the more curious, some screenshots are available at:\nhttp://carvalho.webhop.net/gisdk_vim1.png\nhttp://carvalho.webhop.net/gisdk_vim2.png\nhttp://carvalho.webhop.net/gisdk_vim3..png\n\nHave fun! :)"}, {:name=>"CRefVim", :summary=>"a C-reference manual especially designed for Vim", :description=>"The intention of this project is to provide a C-reference manual that can\nbe viewed with Vim and accessed from within Vim. \nThe C-reference is a reference, it is NOT a tutorial or a guide on how\nto write C-programs. It is a quick reference to the functions and syntax \nof the standard C language.\n\nThere are several ways to specify a word CRefVim should search for in order\nto view help:\n\n  <Leader>cr normal mode:  get help for word under cursor\n                           Memory aid cr: (c)-(r)eference\n  <Leader>cr visual mode:  get help for visually selected text\n                           Memory aid cr: (c)-(r)eference\n  <Leader>cw:              prompt for word CRefVim should search for\n                           Memory aid cw: (c)-reference (w)hat\n  <Leader>cc:              jump to table of contents of the C-reference manual\n                           Memory aid cc: (c)-reference (c)ontents\n\nNote: by default <Leader> is \\, e.g. press \\cr to invoke C-reference\n\nNote: The best way to search for an operator (++, --, %, ...) is to visually\nselect it and press <Leader>cr.\n\nTo get help do :help crefvimdoc\nTo show the C-reference manual do :help crefvim"}, {:name=>"ruler.vim", :summary=>"Inserts a character ruler above the current line", :description=>"In this world of GUI screen design a character-based ruler may not seem altogether useful.  However, when you need to create or verify flat files with fixed-width columns it's certainly helpful.  Yes, yes.  The vim ruler at the bottom will tell you where the cursor is, but that's not always what you need to know."}, {:name=>"Asciitable.vim", :summary=>"Create an ASCII table in a split window", :description=>"I don't even remember why I originally needed this, but it will open up a split and create an ASCII table in decimal, hex, or octal.  Mappings are made to:\n<leader>a, <leader>a8, <leader>a10, <leader>ax, and <leader>a16.\n\nNOTE:  this is only tested on Win2K, and it was not exhaustively tested for different fonts/character sets.  I'd be curious to know how other platforms react to it.\n\nThe code to split the window is based on that found in calendar.vim by Yasuhiro Matsumoto."}, {:name=>"Adaryn.vim", :summary=>"A Deep, Sharp color scheme", :description=>"Adaryn - A color scheme named after my daughter, Adaryn. (A-da-rin)\nI like deep, sharp colors and this scheme is inspired by Bohdan Vlasyuk\\\\&#039s darkblue.\n\nThe cterm background is Black since the DarkBlue was just too light.\nAlso the cterm colors are very close to a dark  Borland C++ color setup."}, {:name=>"BreakPts", :summary=>"Set/View Vim breakpoints and browse functions visually", :description=>"YOU NEED Vim7.0 FOR THE NEW VERSION TO WORK.\n\nNew version no longer depends on multvals.vim\n\nThe plugin provides a few features for debugging Vim scripts that are similar\nto what IDEs normally have, such as browing source, managing breatpoints etc.\nSetting breakpoints visually in functions is very important as you need to\nspecify the exact line number for the line you are interested in (which often\nis difficult to find out if you use |line-continuation| characters to format\ncode). This also avoids typing in the |:breakadd| command while guessing what\nthe scriptids for your script are. It also defines a few convenience commands\nthat take the place of Vim built-in commands and add Vim command-line\ncompletion feature.\n\nThe plugin also provided utilties to create various conditional breakpoints\nprogrammatically to help debug complex and iterative logic. You can set a\ncondition, a skip count and an expire count for your breakpoint to be valid on\nany particular line.\n\nYou can also simply use the plugin to browse Vim sripts and functions. It\nprovides a browser history type of features to drill into the code, by\nnavigating the function calls and return back to the previous function at any\ntime.\n\nHere is a list of features:\n    - Set/unset breakpoints in functions and scripts visually.\n    - Save/clear/restore list of breakpoints across sessions.\n    - Browse functions and script by navigating through the list of functions\n      (and function references) and scripts.\n    - Reload scripts when they change externally (during development)\n    - Global functions to set/unset breakpoints programmatically with optional\n      conditions.\n    - Misc. alternative commands for the built-ins that typically work better\n      (better completion and defaults).\n    - Remote debugging ability to debug scripts in one Vim session using\n      another Vim as the debugger.\n\n\n\nSearch_keywords: breakpoint breakpts breakadd breaklist breakdel break vim WinManager visual list Hari Krishna Dara\n"}, {:name=>"brookstream", :summary=>"A dark blue/green colorscheme", :description=>"A colorscheme based on David Lazar's dakdot scheme.\n\nFor the GUI version.\n\nScreenshot: http://www.brookstream.org/vim_screenshot.html"}, {:name=>"Russian-menu-for-gvimwin32", :summary=>"Russian menu for GVIM/Windows cp1251", :description=>"Russian menu translation especially for Windows users of GVIM 6.x. Errors not translated yet, sorry..."}, {:name=>"Conflict2Diff", :summary=>"Turns a CVS conflict file into a threeway diff", :description=>"This plugin splits a CVS conflict file into three diff windows.  The 2 conflicting versions of the file are put on the left and right.  The central window contains the file, with each conflicting area replaced by \"=======\".  Buffer specific mappings are set up to make the merging simple:\n\n<Ctrl-Down> Move to the next conflict\n<Ctrl-Up> Move to the previous conflict\n<Ctrl-Left> Use the text from the lefthand file for this conflicting area\n<Ctrl-Right> Use the text from the righthand file for this conflicting area\n<Ctrl-q> Finish by closing the left and righthand windows, turning off diff and removing the mappings\n"}, {:name=>"tagsubmenu", :summary=>"Add a submenu for tags commands", :description=>"Adds a small submenu to the Tools menu of gvim. The menu options allow you to jump to tags and run the different tagselect commands without having to remember all the different key sequences. The keyboard shortcuts are shown on the menu, so this plugin is also useful while you are learning the vim tag commands."}, {:name=>"m4pic.vim", :summary=>"syntax file for (g)pic with m4 macros", :description=>"Syntax highlighting for (g)pic files.\nSpecial support for m4 macros.\n"}, {:name=>"nightwish.vim", :summary=>"dark colorscheme", :description=>"Yet another dark colorscheme.\nTried to have a decent mix of all available colors\nto maximize readability.\nShould be pretty moderate on eyes.\nSee http://home.arcor.de/muhler/vim.htm\nfor a screenshot.\n"}, {:name=>"Color-Sampler-Pack", :summary=>"*NEW* [Jan 2010 Update] Top 100 Themes, GUI Menu", :description=>"This package is simply to help people who want to try out a lot of color schemes.  It is the top 100 rated color schemes on vim.sf.net as of Jan 20th, 2010 that are are not \"evil\" (binding keys, changing fonts, etc) --  zipped up in a single package.  Every single theme was updated to its newest revision, and converted to unix formatted line endings. \n\nCheck out a demo of these themes at: http://www.vi-improved.org/color_sampler_pack/\n\nThe menu has been simplified based on feedback to simply three categories.  Dark / Light / Other. \n\nThis package was put together simply to save others time in downloading the color schemes.  If you are a scheme author and for some reason do not want your scheme included, please simply drop me a note.  iam -at- robertmelton.com\n\nNow, the pack comes with an organized GUI menu, but no tool for console users.  I recommend you pick up http://www.vim.org/scripts/script.php?script_id=1488 which is a colorscheme scroller / chooser and browser.  \n\nMany of these schemes are Gvim only, and do not support consoles well... but there is a plugin to allow Gvim only themes to work in 88/256 color terminals -> http://www.vim.org/scripts/script.php?script_id=2390.\n\nLove it or Hate it -- Rate it.  :)"}, {:name=>"ShowPairs", :summary=>"Highlights the matching pair surrounding the current cursor location.", :description=>"ShowPairs highlights the matching pair surrounding the current cursor location.  The main goal of this script is to highlight matching braces and parenthesis making it easier to edit nested expressions.\nHowever, ShowPairs uses the 'matchpairs' global option to determine what it should highlight, so it should be generic enough for other needs."}, {:name=>"MarkShift", :summary=>"Highlights indents when \"expandtab\" option is on.", :description=>"Usefull for editing indented source files which have been\nedited with the expand tab setting. When activated the\nfirst space out of every N spaces is highlighted. N is\nworked out automaticlly from the shiftwidth setting of the\nbuffer."}, {:name=>"SeeTab", :summary=>"Provides vertical tabbing-bars for leading tabs (or whitespace for et)", :description=>"Usage:  :SeeTab    -- toggles SeeTab on and off\n\nIf expandtabs is off, then leading tabs show up with one bar per tab.\n\nIf expandtabs is on, then one leading whitespace at intervals\nspecified by your tabstop is marked by a highlighted space.\n\nTo change the default colors of foreground as magenta and background as black,\njust use something like the following setting in your <.vimrc>:\n\n    let g:SeeTabCtermFG=\"black\"\n    let g:SeeTabCtermBG=\"red\"\n    let g:SeeTabGuiFG=\"black\"\n    let g:SeeTabGuiBG=\"orange\"\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#SEETAB)\n"}, {:name=>"putty", :summary=>"A color scheme that resembles one of Putty", :description=>"This package offers a eye-catching color scheme that resembles the default color scheme of Putty telnet terminal."}, {:name=>"resolv.conf-syntax", :summary=>"resolver syntax", :description=>"Resolver syntax highlighting\nLatest version: http://ld.yi.org/vim/resolv.vim"}, {:name=>"cf.vim", :summary=>"Syntax highlighting for the Confluence logic design language.", :description=>"Syntax highlighting for Confluence.\nConfluence is a logic design language created by Launchbird Designs Systems, Inc.\n\nSee http://www.launchbird.com for more info."}, {:name=>"make-element", :summary=>"generic imap to make an xml element of any word you type", :description=>"In insert mode, typing anyword,,, gets translated to an xml element named 'anyword'\n\nExample 1:\n      anyword,,,<cr><tab>xsl:if,,, ==>\n      <anyword>\n            <xsl:if>\n            </xsl:if>\n      </anyword>\nwith the cursor after the element open tag. \n\nIf anyword is not on a line by itself, no newline is added.\n\nExample 2:\nThis is a bold,,, statement ==> This is a <bold>statement</bold>\n\nUse it all the time myself, in docbook and with some custom dtd's.\n\nSee vimtip #465"}, {:name=>"Reindent", :summary=>"Reindent a complete file based on indent information taken out of indent file.", :description=>"If you like well formatted files use this plugin to chage the indention of a complete file.\n\nAnnotations:\nThe indention information is taken out of the VIM Indent-files. This\nscript processes them in a little different way than vim itself, therefore\nit is possible that the indent-functions have to be rewritten before they \nwork.\nThis script tries to rewrite the indent functions automatically (during \nthis a file \"reindent.tmp\" will be created in your current working \ndirectory).\nThere may be indent functions out there that don't work with this script  because they are too complex to be rewriten automatically with my \ncode.\n                                                                                \nPreconditions:\n- A indent function has to exist for your current file (indentexpr is set)\n- Your current working directory has to be writable if Indent-function has to be rewritten.\n\nUsage:\n1. Copy this file to your plugin directory\n2. start vim with i.E. a HTML-File\n3. Hit <Lead>R (If you don't know what <Leader> is read :help leader \n    or press \\R to reindent).\n    If using menus you will find a new menu item \"Reindent\" in menu \n    \"Syntax\".\n4. Customize the Keystroke with an Entry in your .vimrc i.E.:\n    map ff <Plug>reindent \" call reindent by pressing ff"}, {:name=>"otf.vim", :summary=>"On-The-Fly coloring of patterns, Inspired by MultipleSearch.vim", :description=>"Inspired by MultipleSearch.vim vimscript #479\n\nThis plugin will allow you to highlight a specific search pattern with a specific (pre made) highlight group, and allows you to easily redefine the search pattern and empty a specific pattern. There are 8 possible simultaneous highlight patterns currently available and the script should be easy to modify to add more, etc. The highlight groups are via syntax highlighting and as such your VIM needs +syntax feature.\n\n\nThere are 2 commands, 1 to clear all highlighting, 1 to manipulate individule color groups.\n:OTFReset -- to clear all highlighting done by this script. (think :noh) This can probably be shortened to :OTFR on the command line.\n\n:OTF -- takes a count (line number position) to specify the color group to use (1-8). blank string clears highlighting for the specified color group, while the bang (:OTF!) denotes that the specifed string should be treated as a keyword (think register), see below:\n\nUse Like So:\n    Highlight Current Word Under The Cursor:\n    :1OTF <c-r><c-w>\n    :1OTF! w\n    Highlight Current Search Pattern:\n    :1OTF <c-r>/\n    :1OTF! /\n    Use A Pattern From A Register:\n    :1OTF <c-r>\"\n    :1OTF! \"\n    Just Type The Pattern In Manually:\n    :1OTF \\cotf\\d\n    Turn Off Coloring For The First Highlight Group:\n    :1OTF\n    :1OTF!\n    Turn Off Coloring For The Second Highlight Group: (etc.)\n    :2OTF\n    :2OTF!\n    Turn Off Coloring For All Groups:\n    :OTFReset\n    Which can probably be shortened to:\n    :OTFR\n\nYou can override the default highlight group color definitions by simply defining your own highlight groups for feralotf# (where # is a number from 1 to 8) for example place this in your .vimrc (or color file, etc.):\n\" {{{ OVERRIDE On the fly highlight groups.\nhi feralotf1\t\tguifg=#4682B4 guibg=Linen\nhi feralotf2\t\tguifg=Linen\nhi feralotf3\t\tguifg=Linen guibg=azure4\nhi feralotf4\t\tguifg=Linen guibg=PaleGreen4\n\" }}}\n"}, {:name=>"sparc.vim", :summary=>"Syntax file for the Sparc V8 assembly language.", :description=>"Syntax file for the Sparc V8 assembly language.\n"}, {:name=>"getdp", :summary=>"Syntax file for GetDP Numerical Environment", :description=>"GetDP is a Numerical Environment for partial diferential equations, mainly through the Finite Element method. This simple script helps vim users in daily work providing color and syntax support."}, {:name=>"COMMENT.vim--Crawford", :summary=>"Comment out blocks of C/C++ code using #if 0 #endif block", :description=>"Hi All,\n  Here is a script I use quite often when coding\nand I want to temporarily comment out a chunk\nof C/C++ source code.\n\nUsage:\nSelect the block of code you want to comment out\n(in visual mode) and invoke :call PComment().\n\nThis inputs\n#if 0\n<code block>\n#endif\n\nYou can also invoke it without the visual selection\nand it comments the current line.\n\nIt will also remove an #if 0 block as follows:\n\n#if 0\n<code block>\n#endif\n\nusing the above example, place the cursor anywhere\non the #if 0 line and invoke the function, voila \ncode block is restored and the #if 0 and #endif are gone.\n\nHeres a more advance example, suppose you have the\nfollowing:\n\n#if 0\n<code block>\n#else\n<code block>\n#endif\n\nif you invoke the command on the #if 0 the #else\nit will automatically be converted to #if 0 and the code \nblock above will be restored, like so:\n\n<code block>\n#if 0\n<code block>\n#endif\n\nAlso works with nested #if 0 #endif blocks:\n\nSuppose you have a large chunk of code that already\nhas some #if 0 blocks.  No problem, select all you want\nincluding the nested comment blocks and invoke the function,\nwhen you want to remove the comment the proper #endif\nis matched and removed.\n\nExample:\n\n<code block1>\n#if 0\n<code block2>\n#endif\n<code block3>\n<code block4>\n\nSelect all up to code block3 and invoke the function,\nwe get:\n\n#if 0\n<code block1>\n#if 0\n<code block2>\n#endif\n<code block3>\n#endif\n<code block4>\n\nMove to the first #if 0 and invoke the function, voila\nyou should be back to square one again.\n\nHope you all like it.\nHave fun."}, {:name=>"WC.vim", :summary=>"Count number of bytes on current line or in visual block of lines.", :description=>"This script will count the number of bytes on the current line or a selected block of lines."}, {:name=>"gmsh.vim", :summary=>"Syntax file for GMSH meshing facilities", :description=>"Gmsh (http://www.geuz.org/gmsh) is an automatic 3D finite element mesh generator (primarily Delaunay) with build-in CAD and post-processing facilities.This simple script helps vim users in daily work providing color and syntax support."}, {:name=>"SYN2HTML", :summary=>"Syntax to HTML converter (Python)", :description=>"Yet Another Version of the 2html.vim script found in the $VIMRUNTIME/syntax directory.\n\nThis version is written in python, making it far easier to do things like change the format of HTML created by the script (i.e. putting it in <div> tags instead of <html> tags).\n\nTo use this script, your vim must be compiled with +python."}, {:name=>"tcsoft.vim", :summary=>"nice light color scheme", :description=>"My  approved coding-colorscheme :D"}, {:name=>"GetLatestVimScripts", :summary=>"Keep your plugins up-to-date! (semi-automatic retrieval)", :description=>"GetLatestVimScripts is a plugin that automates retrieval of the latest versions of the scripts that you yourself use!\n\n   * automatic up-to-date plugins\n   * automatic installation for cooperating plugins\n   * automatic constructions of GetLatestVimScripts.dat for cooperating plugins\n\n\n-----\nUsage:\n-----\n\n    :GetLatestVimScripts\n-or-\n    :GLVS\n\nDownloaded files are placed in the .vim/GetLatest directory (vimfiles\\GetLatest).  Those scripts that have an :AutoInstall: in their GetLatestVimScripts comment will be (you guessed it!) automatically installed.\n\nGetLatestVimScripts depends on a file called GetLatest/GetLatestVimScripts.dat.  This file tells GetLatestVimScripts what plugins you're interested in and want to keep up-to-date.  Each line in the file has the form:\n\n    ScriptID SrcID ScriptName\n\nwhere\n\n    ScriptID  : you'll see it on the top of your browser in its \"Location:\" box whenever you click on the script at http://vim.sf.net/ .\n    SrcID     : start it off with a \"1\"; :GetLatestVimScripts will download the file and keep this entry updated automatically\n    ScriptName: the name or title of the script (may have spaces, etc)\n\nIn the distribution is <GetLatestVimScripts.dist>; its an example of a <GetLatestVimScripts.dat> file.  In fact, you\ncan rename it to <GetLatestVimScripts.dat> and use it if you wish; it contains lines telling GetLatestVimScripts\nto automate retrieval of <Align.vim>, <Mines.vim>, etc.  Please feel free to edit the file as you wish.\n\nGetLatestVimScripts examines the plugins you currently have for lines that look like: (Align.vim's is shown)\n\n    \" GetLatestVimScripts: 294 1 :AutoInstall: Align.vim\n\nPlugins that have such lines enable GetLatestVimScripts to automatically build the GetLatestVimScripts.dat file\nfor you.  The :AutoInstall: in the comment tells GetLatestVimScripts that the plugin is safe to automatically install, too.\n\n------------\nHow It Works\n------------\n\nVim.sf.net has a separate SrcID for every script that is uploaded.  With Netscape, Mozilla, and Internet-Explorer, when you move the cursor on top of the script you'd like to download, you'll see a line resembling ...src_id=###.  As new scripts and newly uploaded scripts are placed on vim.sf.net, the src_id is incremented.  Hence the newer ones will have greater SrcIDs, so GetLatestVimScripts compares the SrcID in your <GetLatestVimScripts.dat> file with what vim.sf.net has; if there's a newer one, GetLatestVimScripts will \"wget\" it.\n\nThe GetLatestVimScripts script will modify the GetLatestVimScripts.dat file whenever it downloads a new source file to reflect the latest SrcID, too.\n\n\n----------------------------------------\nSemi-Automatic Script Dependency Support\n----------------------------------------\n\nGetLatestVimScripts will examine your plugins for comment lines of the form\n\n    \" GetLatestVimScripts: ScriptID SrcID ScriptName\n\nSuch lines will be appropriately appended to the GetLatest/GetLatestVimScripts.dat file (if not already present) whenever :GetLatestVimScripts is invoked.  Thus if your newly downloaded script has such lines in it, thereby indicating that it depends upon the presence of specific scripts, GetLatestVimScripts will keep such dependent scripts up to date, too.\n\n\n--------\nRequired\n--------\n\n    wget\n\nie. you'll need to have wget somewhere on your path for GetLatestVimScripts to work.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#GETSCRIPT)\n"}, {:name=>"WML-Wireless-Markup-Language-syntax", :summary=>"The title says it all", :description=>"I found no syntax script for wml so I made a simple one.\n\nIt was made for WML 1.1. Other WML versions weren't taken into account, but I believe this file is very easy to change."}, {:name=>"Color-Scheme-Test", :summary=>"Use this syntax file to display colors in color scheme files", :description=>"Use this syntax file to test color schemes: edit your color scheme file, and to see what each color assignment does, set the color scheme to your color scheme then type the command ':setf cst'. As you continue to make changes, save your changes, and switch to another color scheme and back to your own to see changes. Each of the hilite group names will be colored in the color style your file defines. e.g. if your color scheme defines:\n\nhi operator\t\tguifg=DarkGreen\t\tgui=bold\n\nthen the word 'operator' will appear in bold dark green.\n\nPlace cst.vim in your syntax directory and go forth and create color :-)\n\nTom Kimpton.\n\n"}, {:name=>"greyblue.vim", :summary=>"soft grey and blue color scheme", :description=>"soft grey and blue color scheme"}, {:name=>"colorize", :summary=>"Create colorized HTML from source code", :description=>"A script-wrapper around modified 2html.vim.\n\nFeatures:\n\n- result caching\n- without surrounding html tags (html, body etc.)\n- striping leading/trailing whitespace\n- specify language (instead of auto-detection by file extension)"}, {:name=>"DOS-Commands", :summary=>"Get help for dos commands within VIM", :description=>"This will add all a online help for DOS commands (created from windows XP) to vim help system so you can find help for any dos commands by doing :help command\n\nExample\n:help FOR \n\nNote: all the dos commands are defined as uppercase, so use all uppercase when using help command."}, {:name=>"fte.vim", :summary=>"VIM6.0+ Global plugin to expand and load templates (separate cmds). «expression»", :description=>"This is similar in concept to Gergely Kontra's mu-template (VIMSCRIPT#222), I referenced Luc Hermitte's version mostly, fyi. Save that the loading and expanding are two SEPERATE functions. This is deliberate so that you can load how you like (or even expand how you like) Note also that it is a 3 stage process (load, modify, expand) to expand a template from start to finish. This is also deliberate please see the comments at start of the script file and the included vim style help file.\n\nNote: Bits and pieces and ideas and sniplets from templatefile.vim 1.5 and mu-template.vim 0.11, many thanks to the authors of those two scripts.\n\nThe major reasons to use this template method vs others (or in addition to others) is that you can load the template where and when and how you want, and you have FULL editing ability when editing the template. You can also use this as a sort of API assistant*(seebelow)\n\n\nIn short you can load a template with:\n:FLT ~/codefrags/memset.cpp\n\nmake your changes and then (with your cursor in the template)\n:FTE\n\nThis can be used as a sort of API assistant (when the template files have copious comments), or as a more traditional template expander.\n\nTemplate files can have comments (lines starting with FTE:), checkboxes and raido button banks. (see inclueded help file for more details).\n\nYou retain FULL VIM editing abilites (save your file and come back, compleation, etc.) while editing your templates (step#2).\n\nCurrently you can toggle a checkbox or radiobutton via <leader>f4 and expand the template via <leader>f3. Unfortunatly there is next to no grace in these mappings nor proper  cmds (yet) for toggle prompt line (<leader>f4). Also todo is <plug> stuffs.\n\nThis is a work in progress that I've run out of time with currently. It works (and works well, if a touch quirky in places) and no known bugs, though with unpatched 6.1 I had a (very) weird undo bug but that has disapeared with 6.1.200. Far as I know it was a internal VIM critter, now fixed. Gimmie feedback to encourage support/updates for this ;) .. It currently works well enough for my uses.\n\nAlso included in zip is a codefragments menu (codefragments_menu.vim) I hacked out of Geoff Reedy's colormenu.vim. It is a method to load templates (and can be used completely separate from FTE if you so choose.).\n\n\nZip file made with winzip if it is of any relivance.\n\n*I define an api assistant as a dialog box that helps you fill in params for a complex (or annoying) functions (win32 messagebox for instance). With FTE it is text based but you have fake/functional checkboxes and radio buttons.\n"}, {:name=>"chordpro.vim", :summary=>"Syntax file for ChordPro files", :description=>"chordpro.vim is a syntax file for files in the ChordPro format, a format for writing song lyrics with guitar chords.\n\nThe format was originally defined by Martin Leclerc and Mario Dorion for use with their chord utility, a program for creating nice looking lyrics/chords in PostScript. The format has become the most popular method for exchanging chords on the Internet.\n\nChordPro files typically has the extensions .chopro or .pro."}, {:name=>"vectorscript.vim", :summary=>"Syntax file for VectorScript", :description=>"This is a syntax file for the VectorScript/MiniCad/Minipascal language.  I developed it specifically for VectorWorks 10.  The syntax file does seem to work for minicad 6.0 I have not tried it in anything below that but I'm sure it will work."}, {:name=>"uniq.vim", :summary=>"Emulations of the 'uniq' utility in Vim script", :description=>"\nThis script provides several examples of the Unix \"uniq\" utility emulated entirely with Vim script, found during some brief research through the Vim list archives. Like the original uniq, each requires the selected lines \"uniq-ed\" to already be sorted so that duplicates are adjacent.\n\nNote that there are generally two approches here. The first uses the getline() function to examine adjacent lines and is used by the first two examples. A second approach is illustrated by the last three examples which use a single global or substitution command to accomplish the same purpose.\n\nWe share this compilation in hopes that it might be helpful. The actual origins of each section are documented below. Use at your own risk!\n\n"}, {:name=>"stol.vim", :summary=>"syntax for STOL (Satellite Test and Operations Language)", :description=>"Syntax for STOL (Satellite Test and Operations Language).\n\nThis currently contains only the base STOL language; i.e., there is no highlighting of EPOCH or other STOL extensions.\n"}, {:name=>"ldap_schema.vim", :summary=>"syntax higlighting for LDAP schema definition", :description=>"It can be a bit outdate ut still usefull.\nhttp://www.bithill.net/software.xhtml.var"}, {:name=>"ldif.vim", :summary=>"syntax higlighting for LDIF (LDAP serialization)", :description=>"Supports only the basic schemas.\nhttp://www.bithill.net/software.xhtml.var"}, {:name=>"proc.vim", :summary=>"Oracle Pro*C/C++ syntax file", :description=>"7-May-2004 Note:  I have recently learned that this syntax is redundant.  You can get the same functionality with esqlc.vim in the standard distribution.\n\nThis is a start towards a customization of the C++ syntax, for code that uses the Oracle Pro*C/C++ precompiler code.  Essentially it loads up the C++ syntax file, and then does additional highlighting of text that begins with EXEC SQL.\n\n"}, {:name=>"esperanto", :summary=>"Keyboard for Esperanto / Klavaro por Esperanto", :description=>"Simpla klavaro por la internacia lingvo Esperanto\n\n* Klavaro, post komuto al Unikodo, por Esperanto lau: cx gx hx jx sx auh/euh\n* Krome, ordono por traduki el ^c ^g ^h ^j ^s ~u per: :TradukuIA5"}, {:name=>"epperl.vim", :summary=>"Syntax highlighting for EP-PERL files", :description=>"Allows syntax highlighting for EP-PERL scripts.\nSupports the <EP-PERL>, <EP-IF> and <EP-COMMENT> tags.\nsupport for the other tags might be enabled in later versions."}, {:name=>"headers.vim", :summary=>"Syntax highlighting for SMTP/HTTP headers", :description=>"Does some basic syntax highlighting for SMTP and HTTP header information.\n\nCurrently identifies and colours:\n  - header names\n  - dates\n  - times\n  - hostnames\n  - IP addresses\n  - content-type headers\n  - email addresses\n\nIt's kinda kludgy; corrections and suggestions welcome."}, {:name=>"sip.vim", :summary=>"sip syntax file", :description=>"This is the syntax file for sip -- a program that can convert C++ to python. See http://riverbankcomputing.co.uk/ for more information on what sip is and what you can do with it."}, {:name=>"gpg.vim", :summary=>"it seems that this inspired another much better script: gnupg.vim", :description=>"As I know little about vim scripts, this was just a thought which proved convenient for me. But I just noticed there's a new plugin called 'gnupg.vim' after this which is much better. Please download that instead. I tried to delete this from the server.\n\nThis little plugin helps to edit \"gpg\" encrypted files. I use this because it's more convenient when you do not have GUI encrypt tools.\n\nHow to use:\njust name the file with .gpg suffix, e.g. \"something.gpg\" and \nvi -u ~/.vim/gpg.vim something.gpg"}, {:name=>"gnupg", :summary=>"Plugin for transparent editing of gpg encrypted files.", :description=>"This script implements transparent editing of gpg encrypted files. The filename must have a \".gpg\", \".pgp\" or \".asc\" suffix. When opening such a file the content is decrypted, when opening a new file the script will ask for the recipients of the encrypted file. The file content will be encrypted to all recipients before it is written. The script turns off viminfo and swapfile to increase security.\n\nCommands:\n\n  :GPGEditRecipients\n    Opens a scratch buffer to change the list of recipients. Recipients that\n    are unknown (not in your public key) are highlighted and have\n    a prepended \"!\". Closing the buffer makes the changes permanent.\n\n  :GPGViewRecipients\n    Prints the list of recipients.\n\n  :GPGEditOptions\n    Opens a scratch buffer to change the options for encryption (symmetric,\n    asymmetric, signing). Closing the buffer makes the changes permanent.\n    WARNING: There is no check of the entered options, so you need to know\n    what you are doing.\n\n  :GPGViewOptions\n    Prints the list of options.\n\nVariables:\n\n  g:GPGExecutable\n    If set used as gpg executable, otherwise the system chooses what is run\n    when \"gpg\" is called. Defaults to \"gpg\".\n\n  g:GPGUseAgent\n    If set to 0 a possible available gpg-agent won't be used. Defaults to 1.\n\n  g:GPGPreferSymmetric\n    If set to 1 symmetric encryption is preferred for new files. Defaults to 0.\n\n  g:GPGPreferArmor\n    If set to 1 armored data is preferred for new files. Defaults to 0.\n\n  g:GPGPreferSign\n    If set to 1 signed data is preferred for new files. Defaults to 0.\n\n  g:GPGDefaultRecipients\n    If set, these recipients are used as defaults when no other recipient is\n    defined. This variable is a Vim list. Default is unset.\n\nKnown Issues:\n\n  In some cases gvim can't decryt files\n\n  This is caused by the fact that a running gvim has no TTY and thus gpg is\n  not able to ask for the passphrase by itself. This is a problem for Windows\n  and Linux versions of gvim and could not be solved unless a \"terminal\n  emulation\" is implemented for gvim. To circumvent this you have to use any\n  combination of gpg-agent and a graphical pinentry program:\n\n    - gpg-agent only:\n        you need to provide the passphrase for the needed key to gpg-agent\n        in a terminal before you open files with gvim which require this key.\n\n    - pinentry only:\n        you will get a popup window every time you open a file that needs to\n        be decrypted.\n\n    - gpgagent and pinentry:\n        you will get a popup window the first time you open a file that\n        needs to be decrypted.\n"}, {:name=>"xml_cbks", :summary=>"Extends xmledit package to provide schema-specific attribute callbacks easily", :description=>"This script extends the functionality of the excellent xmledit plugin.\nxmledit gives you a single global callback for inserting attributes,\nXmlAttribCallback.  The suggestion is that this method will dispatch based\non which tag is received.  The script provides a hook that will set the\nvariable b:xml_doctype when loaded (via the function XmlFindDocType).  Then\nit provides a generic XmlAttribCallback which does the following:\n  1.  Looks for a file called $VIMXMLEDITCALLBACKS/{b:xml_doctype}.vim\n  2.  If that file exists and hasn&#039t already been loaded, it is sourced\nThis file is expected to provide a function called\nXmlAttribCallback_{b:xml_doctype}.  This function is called if it exists,\npassing the xml_tag as the argument.\n\nThe intent is so that you can have a different callback for each doctype (schema) which will automatically be available when you edit an XML file of a\nspecified type.  The plugin also provides a way to provide any doctype\nspecific functionality automatically (you can put anything in the sourced\nscript).   It is almost like a secondary ftplugin for xml.\n\nNote:  This is my first vim script (I&#039ve been using vim for less than 3 weeks) so any suggestions for improvement are very welcome."}, {:name=>"VimDebug", :summary=>"integrated debugger for perl, ruby, python (updated 01/2008)", :description=>"VimDebug is designed to integrate your favorite debugger with Vim.  Currently supported debuggers are Perl, Ruby, and Python.  There is untested support for gdb as well in this release.  There are plans to support more languages.  This is a much more mature version than previous releases, but it is still beta.  \n\nThis release includes a solid debug console.\n\nPlease email me about any problems you may have.\n\n\nRequirements\n\nunix/linux\nperl\nIPC::Run perl module (http://search.cpan.org/~rsod/IPC-Run-0.80/lib/IPC/Run.pm)\nvim with +signs compiled in.\n\n\nUsage\n\n\nSet/reset these in your .vimrc if you want:\n\n<F12>      starts the debugger\n<Leader>s/ starts the debugger with command line arguments that you type in\n<F10>      restart debugger.  break points are always saved (for all dbgrs)\n<F11>      exit the debugger\n\n<F2>       show console\n<F6>       next\n<F7>       step\n<F8>       continue\n\n<Leader>b  set break point on the current line\n<Leader>c  clear break point on the current line\n\n<Leader>v  print the value of variable under the cursor\n<Leader>v/ print the value of an expression that you type in\n\n<Leader>/  type in a command for the debugger to execute, and echo the result.\n           (note that its not hard to make everything crash horribly with this\n           command if you do something like change the debugger prompt.)\n\n\nlet g:DBGRconsoleHeight   = 7\nlet g:DBGRlineNumbers      = 1"}, {:name=>"scratch.vim", :summary=>"Plugin to create and use a scratch Vim buffer", :description=>"Overview\n\nYou can use the scratch plugin to create a temporary scratch buffer to store\nand edit text that will be discarded when you quit/exit vim. The contents\nof the scratch buffer are not saved/stored in a file.\n\nInstallation\n\n1. Copy the scratch.vim plugin to the $HOME/.vim/plugin directory. Refer to\n   the following Vim help topics for more information about Vim plugins:\n\n      :help add-plugin\n      :help add-global-plugin\n      :help runtimepath\n\n2. Restart Vim.\n\nUsage\n\nYou can use the following command to open/edit the scratch buffer:\n\n      :Scratch\n\nTo open the scratch buffer in a new split window, use the following command:\n\n      :Sscratch\n\nWhen you close the scratch buffer window, the buffer will retain the\ncontents. You can again edit the scratch buffer by openeing it using one of\nthe above commands. There is no need to save the scatch buffer.\n\nWhen you quit/exit Vim, the contents of the scratch buffer will be lost.\nYou will not be prompted to save the contents of the modified scratch\nbuffer.\n\nYou can have only one scratch buffer open in a single Vim instance. If the\ncurrent buffer has unsaved modifications, then the scratch buffer will be\nopened in a new window\n"}, {:name=>"FeralToggleCommentify.vim", :summary=>"My fork of ToggleCommentify.vim; comment lines in a program", :description=>"This script offers simple, basic, line oriented commenting of files.\nOriginally vimscript #4 (ToggleCommentify.vim v1.2 ) by Vincent Nijs\nWas mutilated into what you see here, for better or worse :)\n\nFollowing list of file types are currently (v1.55) supported:\n    ox, cpp, php, java, bnk, cs, ftf, torquescript, fte, html, xml, c, css,\n    pov, vim, lisp, scheme, dosini, tex, caos, m4, config, automake, python,\n    perl, make, [^w]sh$, tcl, jproperties, vb, aspvbs, plsql, lua,\n\n\nThree commands:\n:CC        \" To Comment a line/range\n:UC        \" To Uncomment a line/range\n:TC        \" To Toggle comments on each line/range.\n\nAll take optional arg to override default comment style\ni.e. \":CC --\"\n\nMaps <m-c> to :TC if no command by that name already exists. Remap <Plug>FtcTc\n    at will.\nMaps <C-c> to a duplicate and comment, line/range; so you can easily make a\n    duplicate of the current line/range and comment it; then edit it the\n    original. Remap <Plug>FtcDLAC at will.\n\n**********\nNew with v1.55:\nYou can customize the behavior by specifying optional option vars. Each option\nvar can be specified as buffer or global, with that precedence.\n\nOption: g:FTCOperateOnFirstColumnOnly\n    If this is 0 (false) then the comment char does not have to be at col1 to\n    be removed, in addition comment chars are placed just before the first word\n    of the line.\nValid Values: 0 or 1\nDefault: 1\n\nOption: g:FTCOperateOnlyOnNonComments\n    If 1 (true) a line will not be commented if it already starts with comment\n    chars. With this 0 (false) you can (easily) comment entire functions\n    without fear of messing up commenting (i.e. '<,'>CC ... '<,'>UC ...  I.e.\n    comment then uncomment. If this is true the above MAY not work (depending\n    on how the existing comments are.)\nValid Values: 0 or 1\nDefault: 0\n\nOption: g:FTCOperateOnBlankLines\n    If 1 (true) blank lines will be processed, else they are skipped.\nValid Values: 0 or 1\nDefault: 1\n\nOption: g:FTCBangEffectsWhat\n    Will toggle an option if command is banged: (i.e. :CC!)\n        1. OperateOnFirstColumnOnly\n        2. OperateOnlyOnNonComments\n        3. OperateOnBlankLines\nValid Values: 1, 2 or 3\nDefault: 1\n\n\nI.e. in .vimrc:\nlet g:FTCOperateOnFirstColumnOnly = 0\nlet g:FTCOperateOnlyOnNonComments = 1"}, {:name=>"hexman.vim", :summary=>"Simpler Hex viewing and editing", :description=>"Hexmanger provides keymapping to view quickly your file\nin hexmode (convertion is done over the program xxd).\n                                                              \nAdditional features:\n- shows in statusline the current offset (hex and dec.)\n- move to next/previous hex character with <TAB> and <S-TAB>\n  If you don't like this mapping - please set in your vimrc:\n  let hex_movetab = 0\n- staying on a hex character it marks the related ascii column\n- Goto hex offset\t\n- Delete hex character under cursor\t\n- Insert ascii character before cursor\t\n\nAvailable functions:\n                                                                    \n<leader> hm\tHexManager: Call/Leave Hexmode (using xxd)\n<leader> hd  \tHexDelete: delete hex character under cursor\n<leader> hi  \tHexInsert: Insert Ascii character before cursor\n<leader> hg  \tHexGoto: Goto hex offset. \n<leader> hn  \tHexNext: Goto next hex offset. \n<leader> hp  \tHexPrev: Goto previous hex offset. \n<leader> hs  \tHexStatus: Show / Hide hexoffset infos in statusline\n                         and related ascii column\n                                                                    \nIf you want, you can change the mapping in your vimrc:\nExample (call with function key F6 the Hexmode:\nmap <F6>  <Plug>HexManager                                          \n\n                     \n"}, {:name=>"Dotnet-Dictionaries", :summary=>"Whole .NET Framework for auto-completion and use in scripts  (C#  Vb .Net)", :description=>"In the dictionary-files you find the whole .NET-Framework 4.0 for auto-completion or use in scripts. There are all namespaces, all classes and all functions - at least I hope so.\n\nThe entries are organized according to the main dlls. \nE.g. mscorlib.dll becomes mscorlib.dict.\n\nI hope someone invents a good possibilty to use theses entries. \n\nRegards,\n\n--Klaus Horsten"}, {:name=>"random.vim", :summary=>"A \"color scheme\" to pseudo-randomly load a color scheme.", :description=>"This \"color scheme\" will pseudo-randomly  load a color scheme among all available color schemes. The main logic is based on vimtip #358.\n"}, {:name=>"matrix.vim", :summary=>"MATRIX like colorscheme", :description=>"I have no comment, just you know."}, {:name=>"VisIncr", :summary=>"Produce increasing/decreasing columns of numbers, dates, or daynames", :description=>"The visincr plugin facilitates making a column of increasing or decreasing\nnumbers, dates, or daynames.\n\nFirst, select a column using visual-block (ctrl-v) and move the cursor.\n\nSecond, choose what sort of incremented list you want:\n\n    :I [#]  Will use the first line's number as a starting point to build\n            a column of increasing numbers (or decreasing numbers if the\n        increment is negative).\n        Default increment: 1\n        Justification    : left (will pad on the right)\n\n    :II [# [zfill]]  Will use the first line's number as a starting point\n        to build a column of increasing numbers (or decreasing numbers\n        if the increment is negative).\n        Default increment: 1\n        Justification    : right (will pad on the left)\n        Zfill            : left padding will be done with the given\n                           character, typically a zero.\n\n    :IYMD [#]    year/month/day\n    :IMDY [#]    month/day/year\n    :IDMY [#]    day/month/year\n        Will use the starting line's date to construct an increasing\n        or decreasing list of dates, depending on the sign of the\n        number.\n        Default increment: 1 (in days)\n\n    :ID [#] Will produce an increasing/decreasing list of daynames.  Three-letter\n            daynames will be used if the first day on the first line is a three\n        letter dayname; otherwise, full names will be used.\n\n    :IO [#]\n    :IIO [#] [zfill]\n        Like :I and :II, except visincr creates octal numbers.\n\n    :IR [#]\n    :IIR [#] [zfill]\n        Like :I and :II, except visincr uses Roman numerals.  Negative and\n        zero counts are not supported for Roman numerals.\n\n    :IX [#]\n    :IIX [#] [zfill]\n        Like :I and :II, except visincr creates hexadecimal numbers.\n\n    -------------------\n    EXTRA NOTES\n    -------------------\n    For :I :II :IO :IIO :IR :IIR :\n        If the visual block is ragged on the right-hand side (as can\n        easily happen when the \"$\" is used to select the\n        right-hand-side), the block will have spaces appended to\n        straighten it out.  If the string length of the count exceeds\n        the visual-block, then additional spaces will be inserted as\n        needed.  Leading tabs are handled by using virtual column\n        calculations.\n\n    For :IR and :IIR :\n        Since Roman numerals vary considerably in their lengths for\n        nearby numbers, an additional two spaces will be included.\n\n    For :IYMD, :IMDY, and IDMY:\n        You'll need the <calutil.vim> plugin, available as\n        \"Calendar Utilities\" under the following url:\n\n        http://mysite.verizon.net/astronaut/vim/index.html#CALUTIL\n\nHelp is included, too -- check out  :he visincr-examples to see\neven more examples of each command in action.\n\nExamples:\n\n        :I\n                    Use ctrl-V to\n        Original    Select, :I\n           8            8\n           8            9\n           8            10\n           8            11\n           8            12\n\n        :I -1\n                    Use ctrl-V to\n        Original    Select, :I -1\n           8            8\n           8            7\n           8            6\n           8            5\n           8            4\n\n\n        :II\n                    Use ctrl-V to\n        Original    Select, :II\n           8             8\n           8             9\n           8            10\n           8            11\n           8            12\n\n        :II -1\n                    Use ctrl-V to\n        Original    Select, :II -1\n           8            8\n           8            7\n           8            6\n           8            5\n           8            4\n\n\n        :IMDY\n                  Use ctrl-V to\n        Original  Select, :IMDY\n        06/10/03     6/10/03\n        06/10/03     6/11/03\n        06/10/03     6/12/03\n        06/10/03     6/13/03\n        06/10/03     6/14/03\n\n\n        :IYMD\n                  Use ctrl-V to\n        Original  Select, :IYMD\n        03/06/10    03/06/10\n        03/06/10    03/06/11\n        03/06/10    03/06/12\n        03/06/10    03/06/13\n        03/06/10    03/06/14\n\n\n\n\n        :IDMY\n                  Use ctrl-V to\n        Original  Select, :IDMY\n        10/06/03    10/06/03\n        10/06/03    11/06/03\n        10/06/03    12/06/03\n        10/06/03    13/06/03\n        10/06/03    14/06/03\n\n\n        :ID\n                  Use ctrl-V to\n        Original  Select, :ID\n          Sun       Sun\n          Sun       Mon\n          Sun       Tue\n          Sun       Wed\n          Sun       Thu\n\n\n        :ID\n                  Use ctrl-V to\n        Original  Select, :ID\n         Sunday     Sunday\n         Sunday     Monday\n         Sunday     Tuesday\n         Sunday     Wednesday\n         Sunday     Thursday\n\n        :IA\n                  Use ctrl-V to\n        Original  Select, :IA\n           a          a\n           a          b\n           a          c\n           a          d\n           a          e\n\n        :IO\n                  Use ctrl-V to\n        Original  Select, :IO\n            5         5 \n            5         6 \n            5         7 \n            5         10\n            5         11\n\n        :IR\n                  Use ctrl-V to\n        Original  Select, :IR\n           II         II\n           II         III\n           II         IV\n           II         V \n           II         VI\n\n                  Use ctrl-V to\n        Original  Select, :IX\n            8         8\n            8         9\n            8         a\n            8         b\n            8         c\n\n\n-------------\nSEE ALSO\n-------------\nvis     : vimscript#1195 : apply any ex command (ex. :s/../../) to a visual block\nvissort : vimtip#588     : how to sort a visual block (or sort based on one)\nvisincr : http://mysite.verizon.net/astronaut/vim/index.html#VISINCR (for the latest, albeit experimental, release)"}, {:name=>"autumn.vim", :summary=>"Light bg, gentle colours, gui + terminal", :description=>"Light background, gentle colours. Looks best on gvim, but\nI've also tried to make it look reasonable on 16- and\n8-colour terminals because I have to use those also. I\nhaven't been able to test on many different terminals\nhowever.\n"}, {:name=>"listmaps.vim", :summary=>"Find out where maps are defined", :description=>":verbose set <option> will tell you where an option was set.\nUnfortunately it's not so easy to find out where a map was\ndefined.\n\nThis script will open a new window with a list of\nall sourced scripts. If maps are defined in the script then\nthey will list below the script name. Initially this will\nappear folded.\n\nYou can then inspect the maps in a script or search for a\nmap to find out where it was defined. \n\nTo use\n\n   :Listmaps\n\nIt pulls out just about anything that looks like it might be\na map for completeness. There will be a few a lines that the\nscript mistakes for a map, but which aren't. And it may be a\nlittle slow.\n"}, {:name=>"Maxlen.vim", :summary=>"Find the long lines and mark them.", :description=>"When you want to know the longest line in the buffered text file, Please try this script.\nIt makes the cursor jumped on the longest line and also marks the top five long lines with the message like \"Marked a=lin.54(col.78), b=36(77), c=56(77), d=20(76), e=55(76)\".\nThis is my first vim scripting and I've enjoyed it a lot.\n"}, {:name=>"MakeDoxygenComment", :summary=>"Generate Doxygen Comment Skeleton", :description=>"Generates a doxygen comment skeleton for a C, C++,  or Java function, including @brief, @param (for each named argument), and @return.  The tag text as well as a comment block header and footer are configurable.  (Consequently, you can have \\brief, etc. if you wish, with little effort.)\n\nIt's definitely a little rough around the edges, but I hope you find it useful.\n\nTo use:  In vim with the cursor on the line of the function header that contains the parameters (if any), execute the command :Dox.  This will generate the skeleton and leave the cursor after the @brief tag.\n\nLimitations:\nAssumes that the function has a blank line above it and that all of the parameters are on the same line.  \nNot able to update a comment block after it's been written.\nWrites the @return tag for a void function.\n\nExample:\nGiven:\nint foo(char mychar, int yourint, double myarray[])\n{ //...\n}\n\nIssuing the :Dox command with the cursor on the function declaration would generate\n\n/**\n * @brief\n * \n * @param mychar\n * @param myint\n * @param myarray\n *\n * @returns\n **/"}, {:name=>"VS-like-Class-Completion", :summary=>"This script can complete member of cpp or java like Visual Studio.", :description=>"class Test\n{\npublic:\n  int getValue() { return 0 };\n};\nint main( void )\n{\n  Test *test;\n  test->_\n}\n--------------\ntype <c-space> over the cursor for completing members.\nand, next member will be completed with typing <c-n> or <c-p>.\n"}, {:name=>"GenerateMatlabFunctionComment", :summary=>"Generates documentation structure for a matlab function.", :description=>"Generates a comment skeleton for a matlab function. \n\nFor example:\nfunction xs = get_slantx(x, y, angle)\nWhen the script (VERSION 0.3) is run on this line the output is like:\nfunction xs = get_slantx(x, y, angle)\n% get_slantx  \n% \n% Input:\n% ^^^^^^\n% . x\n% . y\n% . angle\n%\n% Output:\n% ^^^^^^^\n% . xs\n%% AUTHOR  Author Name\n\nThis format is compatible with Matdoc. See version comments below to know more about Matdoc.\n\nFor previous versions the output looks similar to:\n% get_slantx   \n% function xs = get_slantx(x, y, angle)\n% PARAM xs [OUT] \n% PARAM x [IN] \n% PARAM y [IN] \n% PARAM angle [IN] \n% AUTHOR  Author Name\n\nThis script is derived from MakeDoxygenComment by Leif Wickland.\n\nAfter the installation you can run the script simply by hitting <ALT+c> when the cursor is on function line.\n\n"}, {:name=>"pgn.vim", :summary=>"Provides syntax highlighting for .pgn (chess) files", :description=>"PGN, or Portable Game Notation, is the standard format for recording chess games.  All chess software that I've used can read .pgn files, most can write .pgn files.  I like to edit the files in Vim, but I couldn't find a syntax file for .pgn.  So I wrote this one.  It's quite simple, and the first syntax file I've ever written for Vim, so it may not be complete.  But it does make it easier to read / edit the games."}, {:name=>"genindent.vim", :summary=>"Generic function for indentexpr", :description=>"This is a function meant to deal with a simple case of indentation:\nThe assumption is that you have blocks whose begining and end can be identified by a pattern. In this case, you just set b:indent_block_start and b:indent_block_end to these patterns, and the function returns the indent of a line based on the assumption that all lines within a block should be indented by one shiftwidth. It is also possible to ignore lines matching a certain pattern (e.g., comments) using a third variable b:indent_ignore. For an example, see the fluxbox indent file (vimscript #679)."}, {:name=>"fluxbox.vim", :summary=>"syntax and indent files for fluxbox wm menu file", :description=>"This includes two files, one is a syntax file for the menu file of the fluxbox (and also blackbox) window manager, and the other is an indent file for the same menu file. The indent file depends on the GenericIndent function in the genindent.vim plugin (vimscript #678)."}, {:name=>"ferallastchange.vim", :summary=>"FORK of lastchange.vim; Automatic update of timestamp line in file.", :description=>"Update the last modification time of the file if an appropriate string is found in the first 20 lines of the file.\n\nThis is a fork of lastchange.vim and is based On Srinath Avadhanula's <email in file> work in lastchange.vim (v1.0 dated Sat Mar 30 04:00 PM 2002 PST; VIMSCRIPT #259)\n\n\nChanges: From lastchange.vim v1.0\n\nThis is now an almost proper vim60 plugin.\n\nTime stamp can be defined by setting g:flastchangetimeformat to the desired string for strftime().\n\nExample: (from my .vimrc)\n\" [Feral:166/03@13:11] How I like ferallastchange.vim setup\nlet g:flastchangeleader = '\\\\date\\t\\t'\n\" Condense `Pacific Daylight Time` into `PDT` and tack that onto the end of our\n\"\ttime stamp format string\nlet g:flastchangetimeformat = '%a, %d %b %Y %H:%M '.substitute(strftime('%Z'), '\\<\\(\\w\\)\\(\\w*\\)\\>\\(\\W\\|$\\)', '\\1', 'g')\n\nNOTE how format %Z is special cased and replaced with a shortened string. I.e. `Pacific Daylight Time` becomes `PDT`. This is also done in the default time format string.\n\nSlightly more robust checking to see if we should operate; to speed up writing when we have nothing to do or can't do anything, etc.;\n\n\nSimplified and fixed, (then removed altogether) RemoveLastHistoryItem(); (could muck up search pattern)\n\nRemed out :MOD and :NOMOD commands; I have never used them; Just unrem if wanted...\n\n:sub method remed; Currently uses a setline, hopefully more efficient.\n\nLimitation:\nThe search to find the timestamp messes with the jumplist; I do not want it to; will fix when I know how!\nUpdating the timestamp is part of undo, thus you have to undo twice after a :w (Once to undo the timestamp and again to undo whatever it is you wanted to undo.)\n\nNOTE: v1.1 (initial; no longer available) had a FATAL boo boo in my attempt to\nget the timestamp updating out of undo. It changes undolevels to -1 (and then\nsets it back to what it was), this has the undesired effect of flushing your\nundo information for the file when ever you write. NOT at all what I had\nintended. If you use v1.1 now, please update to v1.2 ASAP. My sincere apologies\nfor any work lost as the result of this bungle."}, {:name=>"blockhl2.vim", :summary=>"Improved highlighting different levels of {} in C and C++ based on blockhl.vim", :description=>"This took vimscript#104 blockhi.vim and modified it for highlight the curly brackets using primary colors ie green red blue cyan yellow pink and also allowed for coloring the leading spaces (ie begin of line to first non spaces) instead of the whole code block between curly brackets. \n\nI didn't like how blockhi.vim highlight the code part with background as grey.\nI wanted only the leading spaces hilighted.\nAlso added filetype and load checking just to be realy safe.\nAdded cpp cluster group for cpp files.\n\nIt has two main functions:\nHilightBrackets() truns on hilighting and hilight.\nNoHilightBracktes() turns off hilighting clears syntax\nhas two toggle function with cab to run\ntoghib toggles the block hilighting on or off\ntoghibs toggles the leading space hilighting on or off but does not toggle block hilighting it self.\nColors cycle over if bracket level is more then Curly region were defined.\n\nIf you what more levels (it only has 6 right now) you can change by adding more bracket and lsp matches and more cCurly regions.\nJust remember to have last bracket# set as hi bracket# guifg=NONE\nand lsp# set  hi lsp# guibg=NONE were # is the one past highest color level.\nThis make sure you don't have all leading spaces in file hilighted all the time.\n\nI have a way to highlight only the block your in, using a modified vimscript#626 ShowPairs.vim\nBut it not quite there yet.\nI will mostly merge it in with this script since it uses some of this scripts members.\nComing soon.\n\n"}, {:name=>"cschemerotate.vim", :summary=>"Fast colorscheme switching", :description=>"Lame but fast (just ,b) switching of (now 3) different colorschemes. Useful when frequently switching between system console and transparent aterm window."}, {:name=>"ftplugin-for-Calendar", :summary=>"This is a ftplugin for Calenar.", :description=>"You can do following on diary.\nPutting current time with typeing <localleader>z.\nIf you want to customize behavior of editing diary,\n Please modify this file."}, {:name=>"Comment-Tools", :summary=>"Insert or align comments (+ruby required!)", :description=>"The Comment Tools are a set of scripts that allow you to manipulate comments (insert or align them).\n\nThey require Vim 6.x with Ruby support compiled in."}, {:name=>"incbufswitch.vim", :summary=>"Switch buffers using an incremental search", :description=>"Switch to a different buffer in the current window by incrementally typing the name.\n\nUsage:\n\n(1) Define a normal key mapping to :IncBufSwitch or leave the default of <C-S>\n(2) In normal mode, start typing the name of the buffer you want to switch to.\n(3) Press <BS> if make an error\n(4) Press <TAB> to find the next matching buffer\n(5) Press either <CR> or <ESC> when you are done\n\nFor example, if you have the following files in memory:\n\nfoo.c, bar.c, baz.c, structs.h\n\nand you are currently editing foo.c.\n\nExample 1: You press <C-S> and type s<CR>.  You are now editing structs.h.\nExample 2: You press <C-S> and type b.  Buffer switches to bar.c.  If you press <TAB> baz.c enters the window.\n\nThe project I work on has a LOT of files.  It is not uncommon to have 20-30 files in memory at any given time.  I find that this allows me to switch amongst them much faster.\n\nLet me know of any ideas or problems."}, {:name=>"feralalign.vim", :summary=>"Simple script to save you from \"ciw<tab><tab><tab>\" to align text.", :description=>"Simple script that allows you to easily tab a section of spaces to a desired\ncolumn; I.e. if you want all your comments to line up on virt col 41 try\n\":FeralAlign 41\" when your cursor is in a position to \"ciw\"; I.e. saves you\nfrom \"ciw<tab><tab><tab>\"etc. But that is about all this does (=\n\nWorks with single lines or ranges. Ranges must be specified by a single column,\nblock-wise visual selection; (i.e. \"<ctrl-v>j\"). So to align 5 lines, place\nyour cursor in a good spot (where a \"ciw\" won\u0092t keel something important; i.e.\nspaces before the comment chars) and \"<ctrl-v>4j:FeralAlign 41\"; easy as that.\n\nLimitation: Aligns to the nearest tabstop.\n\nThis script is possibly of academic value as a way to get a range command to\npreserve the cursor\u0092s column."}, {:name=>"VimTweak", :summary=>"The tweaking dll for GVim.exe.", :description=>"This should work on Win2k (or WinXP maybe)\n\nAlpha Window:\n  200/255 alpha\n  :call libcallnr(\"vimtweak.dll\", \"SetAlpha\", 200)\n  reset alpha\n  :call libcallnr(\"vimtweak.dll\", \"SetAlpha\", 255)\n\nMaximized Window:\n  Enable\n  :call libcallnr(\"vimtweak.dll\", \"EnableMaximize\", 1)\n  Disable\n  :call libcallnr(\"vimtweak.dll\", \"EnableMaximize\", 0)\n\nTopMost Window:\n  Enable\n  :call libcallnr(\"vimtweak.dll\", \"EnableTopMost\", 1)\n  Disable\n  :call libcallnr(\"vimtweak.dll\", \"EnableTopMost\", 0)\n"}, {:name=>"calibre.vim", :summary=>"Syntax Highlight for MGC SVRF (Calibre) Standard Verification Rules Format", :description=>"This is a syntax highlight file for Mentor Graphics Physical Extraction and Verification tool suite, Calibre.  It highlights Calibre's rules language SVRF - Standard Verification Rules Format.  Mentor Graphics Corporation is an Electronic Design Automation (EDA) company.\n\nI am no longer allowed to freely distribute this file as the SVRF language belongs to Mentor Graphics.  Please contact your Mentor Sales representative for further assistance."}, {:name=>"cleanphp", :summary=>"Highlights most php syntax with neat colour scheme", :description=>"Feel free to enhance this colour scheme."}, {:name=>"actionscript.vim", :summary=>"Actionscript syntax", :description=>"A syntax file for editing Flash actionscript with Vim.\n\nAdd this command to your vimrc file:\nau BufNewFile,BufRead *.as\tsetf actionscript\n\nand delete or otherwise override the default mapping of .as files to Atlas"}, {:name=>"POD-Folder", :summary=>"Creates folds in POD files based on =head[123] sections", :description=>"I wrote this script because I've been working on a project with a lot of POD documentation, and have discovered that it's easier for me to keep track of things if I fold the document accoring to the various =head sections\n\nThis script uses manual folding, because it was quicker to figure out than syntax folding."}, {:name=>"VimSpeak", :summary=>"Speak selected text with MS Agent", :description=>"This calls MS AGENT and speaks (range) selected text.\nUsage:\n  [range]VimSpeak\n"}, {:name=>"ample.vim", :summary=>"Syntax Highlighting for MGC's AMPLE progamming language", :description=>"This is a syntax highlight file for the AMPLE (Another Mentor Programming Language) programming language.  AMPLE is part of Mentor Graphics' Falcon Framework, a user interface framework.  Mentor Graphics Corporation is an EDA (Electronic Design Automation) company.  "}, {:name=>"quancept.vim", :summary=>"Syntax file for SPSS Quancept scripts", :description=>"Syntax file for SPSS Quancept scripts.\n\nBased on http://spss.com/spssmr/support/mrinterview/doc/v1.2/Scriptwriter.pdf\n\n\n\n"}, {:name=>"po.vim--Jelenak", :summary=>"ftplugin for easier editing of GNU gettext PO files", :description=>"This file is a Vim ftplugin for editing PO files (GNU gettext -- the GNU\ni18n and l10n system). It automates over a dozen frequent tasks that\noccur while editing files of this type.\n\n                                                                                    Key mappings\nAction (Insert mode)                                                GUI Vim     Vim\n===============================================================\nMove to an untransl. string forward                       <S-F1>      \\m\nMove to an untransl. string backward                   <S-F2>       \\p\nCopy the msgid string to msgstr                            <S-F3>      \\c\nDelete the msgstr string                                           <S-F4>      \\d\nMove to the next fuzzy translation                         <S-F5>       \\f\nMove to the previous fuzzy translation                 <S-F6>       \\b\nLabel the translation fuzzy                                       <S-F7>      \\z\nRemove the fuzzy label                                            <S-F8>      \\r\nShow msgfmt statistics for the file(*)                      <S-F11>     \\s\nBrowse through msgfmt errors for the file(*)         <S-F12>     \\e\nPut the translator info in the header                             \\t             \\t\nPut the lang. team info in the header                           \\l             \\l\n---------------------------------------------------------------\n(*) Only available on UNIX computers.\n\n\n                                                                                  Key mappings\nAction (Normal mode)                                           GUI Vim     Vim\n===============================================================\nMove to an untransl. string forward                      <S-F1>      \\m\nMove to an untransl. string backward                  <S-F2>      \\p\nMove to the next fuzzy translation                        <S-F5>      \\f\nMove to the previous fuzzy translation                <S-F6>      \\b\nLabel the translation fuzzy                                     <S-F7>      \\z\nRemove the fuzzy label                                          <S-F8>      \\r\nSplit-open the file under cursor                                  gf           gf\nShow msgfmt statistics for the file(*)                    <S-F11>     \\s\nBrowse through msgfmt errors for the file(*)       <S-F12>     \\e\nPut the translator info in the header                            \\t            \\t\nPut the lang. team info in the header                          \\l            \\l\n---------------------------------------------------------------\n(*) Only available on UNIX computers.\n\nRemarks:\n- \"S\" in the above key mappings stands for the <Shift> key and \"\\\" in\n  fact means \"<LocalLeader>\" (:help <LocalLeader>), which is \"\\\" by\n  Vim's default.\n- Information about the translator and language team is supplied by two\n  global variables: 'g:po_translator' and 'g:po_lang_team'. They should\n  be defined in the \".vimrc\" (UNIX) or \"_vimrc\" (Windows) file. If they\n  are not defined, the default values (descriptive strings) are put\n  instead.\n- Vim's \"gf\" Normal mode command is remapped (local to the PO buffer, of\n  course). It will only function on lines starting with \"#: \". Search\n  for the file is performed in the directories specified by the 'path'\n  option. The user can supply its own addition to this option via the\n  'g:po_path' global variable. Its default value for PO files can be\n  found by typing \":set path?\" from within a PO buffer. For the correct\n  format please see \":help 'path'\". Warning messages are printed if no\n  or more than one file is found.\n- Vim's Quickfix mode (see \":help quickfix\") is used for browsing\n  through msgfmt-reported errors for the file. No MO file is created\n  when running the msgfmt program since its output is directed to\n  \"/dev/null\". The user can supply command-line arguments to the msgfmt\n  program via the global variable 'g:po_msgfmt_args'. All arguments are\n  allowed except the \"-o\" for output file. The default value is\n  \"-vv -c\".\n\nBut there's even more!\n\nEvery time the PO file is saved, a PO-formatted time stamp is\nautomatically added to the file header."}, {:name=>"timecolor.vim", :summary=>"let the time to rotate your colorschemes", :description=>"vim script to associate a scheme of colors to the hours of the day --\nused colorschemes: midnight, nightwish, coffee, morning, desert, shine, evening, night"}, {:name=>"timecolor.vim-B", :summary=>"let the time to rotate your colorschemes", :description=>"vim script to associate a scheme of colors to the hours of the day  ---.\nused colorscheme: midnight, nightwish, coffee, morning, desert, shine, evening, night"}, {:name=>"Visual-Cpp", :summary=>"A color scheme resembling the MS Visual C++ IDE", :description=>"A simple color scheme resembling the MS Visual C++ IDE, with maybe a little more highlighting (ie. constants)."}, {:name=>"NEdit", :summary=>"A color scheme mimicking the way NEdit highlights C++ code", :description=>"This color scheme takes the colors from NEdit (http://www.nedit.org/) C++ defaults. Note that NEdit recognizes a bit more syntax, so this \"Vim version\" is somewhat inferior to the original."}, {:name=>"OIL.vim", :summary=>"A syntax file for the OSEK Implementation Language (OIL).", :description=>"This is the first version of a syntax file for OSEK Implementation Language (OIL) and OSEK Run Time Interface (ORTI). \nSee \"http://www.osek-vdx.org&quot; for more information about OIL and ORTI."}, {:name=>"cg.vim--Lebaredian", :summary=>"Syntax highlighting for Cg language", :description=>"Syntax highlighting script for the Cg hardware shading language.\n\nSee http://www.nvidia.com/cg and http://www.cgshaders.org for more information."}, {:name=>"parrot.vim", :summary=>"Syntax file for Parrot Assembly code", :description=>"Simple syntax-matching for Parrot v 0.10  Assembly code."}, {:name=>"xmmsctrl.vim", :summary=>"Interaction with XMMS via 'smart' buffer", :description=>"Install the file into plugins/ folder as usual.\nDon't forget to install xmmsctrl utility (search xmms.org or freshmeat).\nAlso read comments in file to customize xmms songchange plugin for maximum\neffect.\n\n"}, {:name=>"isi2bib", :summary=>"Convert a bibliographic database from ISI to BibTeX format", :description=>"Function:\nConvert a bibliographic database from ISI (Institute of Scientific Information, Web of Science) export format to BibTeX format.\n\nNoninteractive Usage:\nFrom the command line, cd to the directory of the ISI database, and issue the command\n\tvim -u NONE -c \":ru isi2bib.vim\" fname\nwhere fname is the name of the ISI database file. The BibTeX database will be saved in base(fname).bib where base(fname) is the ISI file name without an extension.\n\nDescription:\nBibTeX keys are constructed as follows: (last name of first author).(last two digits of year).(disambiguation mark) where the disambiguation mark is a lower case letter that is used only when needed. For example, a key could be Smith03 if it is unique but will be Smith03f if it is the 7th key starting with Smith03.\n\nOnly records of type(PT) article are converted. Other record types are ignored. Only the author(AU), title(TI), pages(BP,EP), year(PY), volume(VL) and journal(JI) fields are converted.\n\nRecent ISI records (1996 and later) use both lower- and upper-case. The case is respected and protected by braces when necessary. Older (pre-1996) ISI records use only upper case. A crude conversion to mixed case is made.\n\nSome manual cleanup of the title fields will be required; for example, to use math mode for symbols, etc."}, {:name=>"sketch.vim", :summary=>"Draw with mouse: boxes, arrows, lines, fills. Transparent/opaque drag and drop.", :description=>"Sketch.vim -- Line drawing/painting using the mouse.\nBased on an idea by Morris.\n\n** sketch.vim has bugs when used with vim7 **\n** I will address this at some point, be patient! **\n** Contact address for bugs is adscriven+sketch at gmail com **\n--Antony 2007-07-15\n\nFreehand\n--------\nLines, arrows, boxes.\nAutomatic arrow head selection.\nAutomatic corners and intersections.\nEraser.\nPaint brush with three different tips.\n\nVisual selection\n----------------\nDrag and drop (transparent & opaque).\nOpaque box.\nTransparent box.\nBox with rounded corners.\nJoin/overlay lines.\nFill with selected brush.\nQuick erase.\n\nExtra maps\n----------\nFlood fill with arbitrary character: <leader>f\n\nIf you tell me you like it or provide bug reports, fixes\nthen I will tidy it up and improve the code quality and\nwrite a proper vim help file. Or maybe someone else \nwould like to maintain it ..."}, {:name=>"gdl.vim", :summary=>"GDL/VCG syntax highlighting file", :description=>"gdl.vim is a syntax highlighting package for the graph description language GDL (fka VCG).\n\nWhenever you open a .gdl or .vcg file, the package automatically analyzes the text and marks keywords, attribute specifications, comments, etc. using customizable colors. Whenever you start writing a new GDL document, it automatically analyzes the new text for the proper spelling/syntax, highlighting correct items.\n\nBenefit to you: your GDL file is easier to read and you can understand GDL source code faster.\n\ngdl.vim is intended to go beyond simple syntax and spell-checking. It should also check attribute-value pairs for type correctness. In some cases, it will even check if a specified number is within the valid range.\n\nThe package was tested under Vim 5.6/Linux, gVim 6.1/WinNT4.0, gVim 6.2/Win2000, and gVim6.3/Win2000.\n\nFor further information, screenshots, etc., visit http://www.aiSee.com/gdledit\n\nYour feedback is appreciated."}, {:name=>"msp.vim", :summary=>"TI MSP430 Assembly Syntax", :description=>"Provides assembly language syntax highlighting for theTI MSP430 family of processors"}, {:name=>"brainfuck-syntax", :summary=>"brainfuck syntax support", :description=>"Support for the brainfuck programming language."}, {:name=>"sfl.vim", :summary=>"VIM Syntax file for SFL hardware description language.", :description=>"SFL, Structured Function description Language, is a one of the Hardware Description Language. SFL is Register Transfer Level HDL, the programming style is like C or Pascal.\nPlease see here: http://www.onlab.ntt.co.jp/mn/parthenon/pack.html\n\nSFL can be converted to Verilog HDL by sfl2vl. \nPlease see here: http://shimizu-lab.dt.u-tokai.ac.jp/pgm/sfl2vl/index.html\n\nThis syntax was designed for dark background."}, {:name=>"browser-like-scrolling-for-readonly-file", :summary=>"convenient, browser-like scrolling for viewing readonly files", :description=>"If, when viewing readonly files in vim, you wish that up/down arrows behaved like in web browser (each down arrow scrolls the view 1 line down, except near end of file; each arrow-up scrolls the view 1 line up, except near beginning of file) \n-- then this plugin does it.\n\nTo check the difference, just source the script (':so ro_positioning.vim' if not installed) and try the help (:he) and\ntry arrows down. You'll notice that up/down arrows behave more conveniently. \n\nThis plugin remaps arrow-up and arrow-down in readonly files to behave more conveniently. No remappings are done for non-readonly files.\n\nIf you want to enable this mode for arbitrary writable file, do:\n     :set ro\n     :e\n"}, {:name=>"nuvola.vim", :summary=>"Color scheme for the Gnome2 \"nuvola\" theme", :description=>"This is mainly a GUI colorscheme fitting into the Gnome2 SVG theme \"nuvola\".\nhttp://librsvg.sourceforge.net/theme.php\nThis theme was created by David Vignoni\nhttp://projects.dims.org/~dave/svg.html\nThe windows have a blue frame and a light background."}, {:name=>"SideBar.vim", :summary=>"Auto-shrinking container of vertically aligned material", :description=>"There are many fine plugins that use persistent windows to display useful\ninformation (e.g. TagList plugin) or to provide bookmark-like portal to\nother files and buffers (e.g. Project or Buffer explorers etc.). There is\none major drawback to using them: you have to sacrifice precious screen real\nestate. One way to compensate is to put those auxillary windows in\n'side-pocket', and to open and close it when needed. So here comes SideBar.\n\nAs a stand-alone plugin it's pretty useless. It's really a framework that\nallows easy creation of SideBar-contained plugins. As an example I've\nincluded my very simplistic rewrite of excellent Project plugin by Aric\nBlumer. Note that it doesn't even try to manage its window. Just 'register'\nit in SideBar with following command (to learn more of ProjectJr, read its\ncomments):\n:SideBarAddCmd ProjectJr ~/main.prj\n\nNow you have mini-project in your side-pocket. Use :SideBarEnter or\n:SideBarEnterToggle to quickly enter/leave it. If you close its window\n(without destroying its buffer), or make it 'only', next invocation of one\nof those commands will bring SideBar back. Of course, it's best to map these\ncommands to some handy keys, e.g. <Tab>.\n\nYou can have as many projects/other buffers managed by SideBar as you wish.\nRegister these buffers with :SideBarAddCmd <any ex command> and switch\nbetween them with :SideBarCycle\n\nTo hack deep inside SideBar, another command is provided:\n:SideBarExec <any ex command> will execute <any ex command> in SideBar\ncontext without buffer registration. Note that you can use 's:' prefix to\ncall plugin-local functions and modify its variables, so proceed with\ncaution. To call functions local to your script, use <SID> prefix as\nusual.\n"}, {:name=>"MSIL-Assembly", :summary=>"Syntax file for the .NET Microsoft Intermediate Language Assembly", :description=>"Syntax file for the .NET Microsoft Intermediate Language Assembly. Quite complete -- I hope so, at least."}, {:name=>"cygwin.vim", :summary=>"Compiler plugin for cygwin-tools used from the win32 native version of Vim", :description=>"This file is useful with gcc and other programs run from make, when these tools come from Cygwin and the version of Vim used is the win32 native version.\nIn other environments, Vim default settings are perfect.\n\nReason: the filenames (for whom gcc reports errors) are expressed in the UNIX form, and Vim is unable to open them from the quickfix window. Hence the filtering used to replace '/' (root) by {cygpath -m /}.\nSince the version 20040616, this plugin is also able to follow symbolic links -- defined from cygwin.\n\nAt this time, it has only be tested with gcc, but I guess it should be useful with other compilers built for cygwin.\n\n\nImprovments are certainly posible. Any feedback is welcomed!"}, {:name=>"mupad.vim", :summary=>"Syntax file for MuPAD", :description=>"This is a syntax file for MuPAD programs. \n\nhttp://www.mupad.de/contrib.shtml"}, {:name=>"trash.vim", :summary=>"script for trashing dd d, D, <Del> erasing actions--- version: 0.1", :description=>"Trashed at: 01/08/03 - 08:20:34 from file: C:\\Vim\\vimfiles\\plugin\\trash.vim {{{\n\" Location of the stored files: ~/vim/trash \n\" Command: Trashon   - start trashing -- default on\n\" Command: Trashoff  - stop trashing -- recommended for encrypted files\n\" Command: Trashview - view the trash file -- as a readonly file\n<<<<< end deleted text }}}\n"}, {:name=>"wiki.vim", :summary=>"Syntax file for Wikis", :description=>"Little syntax file to use a wiki-editor with VIM (if your browser - like W3M - allow this action).\nNOTE: Madd Sauer has write a very good an improved WIKI-file for VIM. Please visit for the future\nhttp://www.vim.org/scripts/script.php?script_id=1166 :-)"}, {:name=>"tagMenu", :summary=>"Popup menu showing tags", :description=>"Sometimes when the size of tag file is large, and you are searching for a   particular tag, it is cumbersome to ^N through the list of tags. This plugin is aimed to solve this. A hidden menu containing the list of tags is  created. This can be accessed using CTRL-K, or any other mapping that you  want"}, {:name=>"local_vimrc.vim", :summary=>"Load local vimrs's from $HOME to the current directory", :description=>"This plugin recursivelly sources the _vimrc_local.vim files present from $HOME to the directory of the current buffer every time we change buffer.\n\nExample: current dir is ~/a/b/c. Files are sourced in this order:\n~/_vimrc_local.vim, then ~/a/_vimrc_local.vim, ~/a/b/_vimrc_local.vim, and finally ~/a/b/c/_vimrc_local.vim\n\nNo messages issued if some of _vimrc_local.vim does not exist."}, {:name=>"Hanoi-Tower", :summary=>"Let your vim moves the hanoi tower to get tired.", :description=>"The Hanoi Tower is the famous case study for illustrating the recursive algorithm.\nAnd this is the simplest implementation written in vim macro."}, {:name=>"sudo.vim", :summary=>"Allows one to edit a file with prevledges from an unprivledged session.", :description=>"\"   sudo.vim:  A vim plugin by Rich Paul (vim@rich-paul.net)\n\"\n\"   This script eases use of vim with sudo by adding the ability to\n\"   edit one file with root privleges without running the whole\n\"   session that way.\n\"\n\"   Usage:  put it in the plugin directory, and\n\"       (command line): vim sudo:/etc/passwd\n\"       (within vim):   :e sudo:/etc/passwd\n\"\n\"   sudo will ask for your password if need be.\n\"\n"}, {:name=>"co.vim", :summary=>"\"Aspect Oriented\" script: Comment out a hunk of text in many languages", :description=>"This script creates a mapping, ;co, which will comment out a hunk\nof about 20 differant file types.\n\nIt's primitive, but I like it.\n\n"}, {:name=>"xmidas.vim", :summary=>"Color syntax highlighting within VIM for the X-Midas language.", :description=>"Color syntax highlighting within VIM for the X-Midas language."}, {:name=>"folddigest.vim", :summary=>"Show fold digest tree view.", :description=>"Required: Vim 6.2\n\nUsage:\n        :call FoldDigest()\n\n    Transform all folds in the current buffer into digest tree form, and\n    show it in another buffer.  The buffer is called FOLDDIGEST.  It shows\n    not only all fold start positions, but also a tree depended on original\n    folds hierarchy.\n\n    In a FOLDDIGEST, you can move around the cursor, and when type <CR> jump\n    to fold at under it.  If you enter FOLDDIGEST window from other windows,\n    when depended buffer is availabeled, it will be synchronized\n    automatically.  If you want to force synchronize, type \"r\" in a\n    FOLDDIGEST buffer.\n\nOptions:\n\n    'folddigest_options'\n                string (default \"\")\n        Set string flag which you need.  If you want to use more than two,\n        join by comma.\n\n          flexnumwidth  Narrow line number width as possible.\n          nofoldclose   don't close folds after \":call FoldDigest()\".\n          vertical      Use :vsplit for FOLDDIGEST. (default :split)\n\n    'folddigest_size'\n                number (default 0)\n        FOLDDIGEST window size.  When 'folddigest_options' has \"vertical\"\n        flag, this value is interpretted as window height, and doesn't then\n        as window width.  If zero was specified height/width become half of\n        current window.\n\n    ex:\n        :let folddigest_options = \"vertical,flexnumwidth\"\n        :let folddigest_size = 30"}, {:name=>"quicksession.vim", :summary=>"Easily switch between a multitude of session files", :description=>"QuickSession is a plugin which allows you to switch quickly\nbetween your vim session files. When you organized your whole work by creating a number of vim session files (by :mks)\nthis plugin can save you some time. This pluign allows you\nto change the sessions inside one vim instance. Before using this plugin you must create a meta session file which contains  \nreferences to all your session files. Once you have created this you can edit this file later on by the plugin itself. Refer to the usage description section inside the plugin.\nYou start the plugin by pressing \\qq or by entering the command :QuickSession."}, {:name=>"sql.vim--Gritsch", :summary=>"Oracle 9i Syntax highlighting (SQL, SQL+)", :description=>"This is a drop-in for the original sql.vim file delivered with vim 6.2. It should do highlighting of all documented Oracle 9iR2  SQL commands/keywords and SQL+ commands. \nPL/SQL blocks within a SQL file will be marked as one uniform block without further highlighting. \nI tried to stick to the Oracle Documentation concerning keywords and commands as far as possible, so not everything you would expect to be a keyword is one (e.g. DUAL).\n"}, {:name=>"pam.vim", :summary=>"Syntax highlighting for PAM (Pluggable Authentication Modules)", :description=>"pam.vim provides syntax highlighting for Linux-PAM (Pluggable Authentication Modules) configuration files."}, {:name=>"kickstart.vim", :summary=>"Syntax highlighting for RedHat kickstart files", :description=>"kickstart.vim provides syntax highlighting for RedHat Linux kickstart configuration files."}, {:name=>"mdl.vim", :summary=>"Syntax hilighting for the PRESPEC language", :description=>"Prespec is a declarative language for program specialization. This file contains syntax hilighting\nrules for it."}, {:name=>"gor.vim", :summary=>"Green-Orangish Colorscheme", :description=>"As u all know what to do."}, {:name=>"yaml.vim", :summary=>"Syntax coloring and functions for YAML", :description=>"A wonderful syntax coloring script for http://yaml.org by Igor Vergeichik <iverg@mail.ru>\n"}, {:name=>"sbutils", :summary=>"Some utilities I find useful", :description=>"This is a collection of utilities that i will be updating regularly. I'm putting it online just in case somebody wants exactly what's there, if you're just browsing, you should probably skip this version.\n\nStarting with 2 utils:\n\n1. Count the no. of occurences of a -PERL- regex in a range ( :<range>Count <regex>)\n2. Insert a timestamp, formatted according to a time-format string at the current cursor position in the command mode ( <Leader>t) where <Leader> is usually '&#039\n3. Comment a block of C-code by selecting a range and hitting <Leader>C - it replaces /* and */ inside with {{{ and }}} to cope with nested comments.\n\n"}, {:name=>"movewin.vim", :summary=>"Move GUI window using the keyboard", :description=>"Move GUI window using the keyboard, for those who don't like to use the mouse.\n\nAfter loading the script, call :MoveWin.  Use hjkl and shift+hjkl keys to move the window, press any other key when done."}, {:name=>"SwapHeader", :summary=>"This script allows to switch between source and header files.", :description=>"This script allows to switch between source and header files."}, {:name=>"svn.vim--McCoy", :summary=>"A simple svn utility for vim.", :description=>"A simple utility for using SVN within vim.  Mostly just aliases for combining writing your file, commiting and updating your repository within vim.  I use gvim, so the default editor ``Commit'' or ``Svn commit'' doesn't work.  For this reason, with a little bit of trickery I made my system open up the log addition inline.  This means with two simple commands, you've written your current file, commited your repository, and updated your changes...without leaving your vim window :)\n\nYou can also do this with key mappings, so makes it even easier.\n\nIts still somewhat primative, though its coming along.\nCheck back frequently for updates.\nSuggestions and Patches are always welcome!\n\nHappy Vimming!"}, {:name=>"dhcpd.vim", :summary=>"syntax highligting for dhcpd.conf", :description=>"dhcpd.vim provides syntax highlighting for ISC DHCP server configuration files dhcpd.conf."}, {:name=>"curcmdmode", :summary=>"*obsolete* Script library to extend the notion of Vim's mode() function", :description=>"This plugin has no value in Vim7 since it has a new built-in function called getcmdtype().\n\nThis plugin provides a small library of functions and mappings and a framework to extend Vim's command-line mode in a way that is not possible by using Vim's built-in features alone.\n\nThis was originally part of the chcmdmode.vim plugin, but I have extracted the generic part out and created this new plugin which can be shared by multiple scripts. For description and usage please see the script header.\n"}, {:name=>"cmdalias.vim", :summary=>"Create aliases for Vim commands.", :description=>"Sometimes we want to to change the behavior of a built-in command so end up creating a custom command, and we wish to reuse the built-in command name for it. E.g., :Runtime to replace :runtime, :Find to replace :find. I myself wanted to replace :qa with :QA (see http://vim.wikia.com/wiki/Tabclose_instead_of_quit-all), but it is hard to remember to type :QA instead of :qa everytime, that is why I created this plugin.\n\nThis plugin is just a wrapper on top of command-line abbreviations (:cabbr), to work around the big disadvantages of :cabbr. With plain :cabbr, the expansion happens anywhere the abbreviation appears while typing command-line. E.g., if you create abbreviation from runtime->Runtime, then the following will not work as you expect:\n\n:cnoreabbr runtime Runtime\n:%s/runtime/runduration/g\n\nWhat would actually execute is:\n\n:%s/Runtime/runduration/g\n\nWhich is not the same. The other problem is cabbr's trigger not only at the command-line, but also at search prompt, at the input prompt and any other prompts (see :help getcmdtype()). To avoid those unexpected expansions, cmdalias utilizes a light-weight wrapper function that expands the abbreviation only when it is typed as the first word of the ex command (\":\" prompt). So, instead of the below:\n\n:cnoreabbr runtime Runtime\n\nYou would use this:\n\n:call CmdAlias('runtime', 'Runtime')\n\nor simply,\n\n:Alias runtime Runtime\n\nThese aliases pretty much work like the bash aliases. If you don't want the expansion to temporarily happen even at the beginning of a command, you have two options:\n- After entering the command and before typing the next command press <C-V> (e.g., <C-V><Space>)\n- Start the command-line with a space and then enter the command.\n\nThe CmdAlias() function takes a 3rd optional argument called \"flags\" for which you can pass options such as \"<buffer>\" to make the alias local to the current buffer.\n\nHere is the description from file header for more details:\nUsage:\n    :call CmdAlias('<lhs>', '<rhs>', [flags])\n    or\n    :Alias <lhs> <rhs> [flags]\n                                                                             \n    :UnAlias <lhs> ...\n    :Aliases [<lhs> ...]\n                                                                             \nEx:\n    :Alias runtime Runtime\n    :Alias find Find\n    :Aliases\n    :UnAlias find\n                                                                             \nDescription:\n  - Vim doesn't allow us to create user-defined commands unless they start\n    with an uppercase letter. I find this annoying and constrained when it\n    comes to overriding built-in commands with my own. To override built-in\n    commands, we often have to create a new command that has the same name\n    as the built-in but starting with an uppercase letter (e.g., \"Cd\"\n    instead of \"cd\"), and remember to use that everytime (besides the\n    fact that typing uppercase letters take more effort). An alternative is\n    to use the :cabbr to create an abbreviation for the built-in command\n    (:cmap is not good) to the user-defined command (e.g., \"cabbr cd Cd\").\n    But this would generally cause more inconvenience because the\n    abbreviation gets expanded no matter where in the command-line you use\n    it. This is where the plugin comes to your rescue by arranging the cabbr\n    to expand only if typed as the first word in the command-line, in a\n    sense working like the aliases in csh or bash.\n  - The plugin provides a function to define command-line abbreviations such\n    a way that they are expanded only if they are typed as the first word of\n    a command (at \":\" prompt). The same rules that apply to creating a\n    :cabbr apply to the second argument of CmdAlias() function too. You can\n    pass in optional flags (such as <buffer>) to the :cabbr command through\n    the third argument.\n  - The :cabbr's created this way, work like the bash aliases, except that\n    in this case, the alias is substituted in-place followed by the rules\n    mentioned in the |abbreviations|, and no arguments can be defined.\nDrawbacks:\n  - If the <rhs> is not of the same size as <lhs>, the in-place expansion\n    feels odd.\n  - Since the expansion is in-place, Vim command-line history saves the\n    <rhs>, not the <lhs>. This means, you can't retrieve a command from\n    history by partially typing the <lhs> (you have to instead type the\n    <rhs> for this purpose).\n\n\n\nSearch_key_words: cmdalias Hari Krishna Dara cmap alias cmdalias.vim"}, {:name=>"Intellisense-for-Vim", :summary=>"Java, XML, HTML, C++, JSP, SQL, C#", :description=>"This is intellisense for Java, XML, HTML, C++, JSP, SQL, C#. This new version is incompatible with the previous version(s).\nIMPORTANT: Uninstall any previous versions if you have and then install the new version. \n\nTHIS IS FOR WINDOWS ONLY! \n\nUsage Tips\n----------------\n1. Pressing '.' (in java) or pressing '<'  in XML/Html brings the list window\n2. Pressing <C-Space> brings context sensitive lists (for both java and HTML/XML).\nIn HTML/XML this brings the list of attributes for the tags, or auto-completes the attributes)\nTry C-Space at different points.\n\nWhile tool tip is shown, you can use mouse to move to next function or use <C-Left> or <C-Right>\n\n<C-S-Space> in java, brings the tooltip for the current function.\n\nSQL\n------\nThe SQL plugin provides completion for both static and dynamic data.  A tutorial is provided in intellisense.txt.  See :h intellisense-sql.\n\nDynamic lists (drawn directly from your database):\n    Table List \n        - All tables for all schema owners\n    Procedure List\n        - All stored procedures for all schema owners\n    View List\n        - All stored procedures for all schema owners\n    Column List\n        - For the selected table, the columns that are part of the table    \n    Table / Procedure Description\n        - For the selected table/procedure, describe it    \n\n\nStatic lists (drawn directly from your Vim SQL syntax file):\n    Statements\n        - Select, Insert, Update, Delete, Create, Alter, ...\n    Functions\n        - Min, Max, Trim, Round, Date, ...\n    Keywords\n        - Index, Database, Having, Group, With\n    Types\n        - Integer, Char, Varchar, Date, DateTime, Timestamp, ...\n    Operators\n        - Like, Where, And, Or, In, Exists, ...\n    Database Options\n        - Isolation_level, On_error, Qualify_owners, Fire_triggers\n\n"}, {:name=>"HelpExtractor", :summary=>"plugin writer aid; allows plugin and help to be distributed as one file", :description=>"(this plugin has largely been superceded by script#1502 for vim7.0)\n\nThe HelpExtractor is a bit of vim code that allows one to merge the plugin with the help.  In addition, helptags is run automatically for the user.\n\nTypical use under Unix/Linux/Cygwin, done from the .vim (vimfiles) directory:\n\n    cat plugin/yourplugin.vim HelpExtractor.vim doc/yourplugin.txt > yourplugin.vim\n\nHelpExtractor will modify the accompanying plugin the first time the user runs Vim (it will delete the extraction code) and will generate the associated help file.  The distributed file will then have the following format:\n\n    [Plugin]\n    [HelpExtractor]\n    [HelpFile]\n\nWhen vim is next executed, the HelpExtractor modifies the plugin to be:\n\n    [Plugin]\n\nand creates a file in the user's .vim/doc directory containing the [Helpfile].  Since the HelpExtractor also runs helptags automatically, the associated help is immediately available without any actions being required of the user.  Notice that the [HelpExtractor] itself disappears.\n\n"}, {:name=>"pic.vim", :summary=>"Add support for 18fxx2 Microchip microcontrollers", :description=>"Add support for 18fxx2 Microchip microcontrollers."}, {:name=>"aiseered.vim", :summary=>"A color scheme with a dark red background.", :description=>"(For those who are interested: \"aiSee\" is a trade mark which is expected to be pronounced \"I see\".)\n\nI find this scheme quite pleasant -- even though any red, including dark red, is always said to be a bad choice for a background.\n\nAnyway, I'm not selling a pig in a poke here: http://www.aisee.com/aiseered.png\n\nI've written the scheme especially for working with files in GDL/VCG format (hence the naming), and it goes well together with vimscript #706. It also works quite fine for C/C++ and I've heard of people using it for editing Ruby. However, I wouldn't recommend using it for editing HTML if you do care for your eyes.\n\naiseered was tested with gVim 6.2 under Windows 2000 and with gVim 6.3 under Ubuntu Linux.\n\nYour feedback is appreciated."}, {:name=>"winhelp", :summary=>"A script for easy lookup in Windows .chm and .hlp help files.", :description=>"This script lets you setup a collection of help files in Windows .hlp and\n.chm format and search for the word under the cursor in them. The current\nfiles and state is stored in the scricpt file for further sessions. Use the\nnew winhelp dropdown menu to add or remove files.\nCheck out tip #506\nhttp://www.vim.org/tips/tip.php?tip_id=506\nand tip #232\nhttp://www.vim.org/tips/tip.php?tip_id=232\n\nThe default keymappings for normal mode are: \nCtrl+Shift+F1 - pops up a menu with the help files and search the selected\nfile for the word under the cursor.\nCtrl+F1 - search the current help file for the word. Use the winhelp menu\nfor setting the current help file.\n\nBUGS/Features\n-If the path to a.chm file has any spaces does not keyhh or hh works\nproperly. I think this is a known issue with Windows HTML help. Bob solved\nit by linking directories and I think that is the only way.\n-If you do an ALT+TAB to get away from a .chm file may you see an temporary\n extra copy in the taskbar. Note that the icons for .chm is the ones\n normally used for .hlp files.\n -It will probably take some time before you get used to how keyhh works. \n In my experience does it work very well but sometimes do you have to look twice to see it. :)   \n-The popup menu can be incorrect after removing a file from  the collection. After a restart is it OK. \n "}, {:name=>"opengl.vim", :summary=>"OpenGL C syntax highlighting", :description=>"OpenGL C syntax highlighting.\n"}, {:name=>"ttcn-syntax", :summary=>"TTCN-3 syntax highlighting file", :description=>"I couldn't find any syntax file for TTCN-3, so I made my own. The file is based on ETSI document no. ES 201 873-1 (V2.2.1 2003-02).\n\nFor information about TTCN-3, see http://www.etsi.org.\n\nFolds: If the variable \"g:ttcn_fold\" is defined (e.g. by \":let g:ttcn_fold = 1\" in your .vimrc file), folds will automatically be defined for each {...} block.\n"}, {:name=>"ttcn-indent", :summary=>"TTCN-3 indent file", :description=>"This is a simple indent file for TTCN-3."}, {:name=>"VDLGBX.DLL", :summary=>"Comfortable user-definable dialog-boxes for use in GVIM and some other goodies", :description=>"Allows to compose and use arbitrary dialog boxes within your scripts.\nFeatures:\n* simple textfield\n* password-field\n* checkboxes\n* listboxes\n* comboboxes\n\nHTML-authoring-support:\nCreate an <IMG SRC=\"xxx\" WIDTH=\"nnn\" HEIGHT=\"nnn\"/>-Tag out from simple the filename\nTranslate foreign chars to HTML-entities (eg. ä -> &aauml;)\n\nColor-choosing\nAllows to choose a color (using the standard windows-dialog) and returns the RGB-values in whatever format you want (so far an arbitrary printf-formatstring can do it...)"}, {:name=>"python_encoding.vim", :summary=>"Recognize python source file encoding directive(PEP 0263)", :description=>"A newly added feature of python 2.3 is PEP 0263(http://www.python.org/peps/pep-0263.html). Now you can add a magic comment that defines the encoding of the source file. This script recognizes this directive and changes Vim's encoding accordingly.\n"}, {:name=>"showpairs-mutated", :summary=>"Higlights the matching brace or surrounding ones.", :description=>"This is a modified version of the script showpairs\n(vimscript #626), written originally by\nAnthony Kruize. When the cursor is on a brace, the matching one is\nhiglighted. Otherwise, the current surrounding braces (up to the depth of three) are emphasised.\n"}, {:name=>"dusk", :summary=>"Soft colors on a dark background (GUI only)", :description=>"Soft, low contrast colors on a dark blue-black background. GUI-only. Dusk is a companion to the light background color scheme dawn (vimscript #577)."}, {:name=>"LogCVSCommit", :summary=>"Script to log CVS commits", :description=>"I use this bit of vimscript to edit CVS commit messages.\nThe message, including the affected files, is timestamped and\nwritten to a log file.  The log entry format looks like:\n________________________________________________________________________________\nThu Sep  4 09:30:44 PDT 2003\n----------------------------\nISSUE00007620 -- resolved\nModified Files:\n Tag: TEST_11_I6\n\tgrounddb/create/update_gcsapp_schema.sql \n\tgrounddb/create/gcsapp/table/ans.sql\n"}, {:name=>"peaksea", :summary=>"Refined color, contains both gui and cterm256 for dark and light background", :description=>"The peak sea color (peaksea.vim) is the new version of the well-known colorscheme ps_color.\n\nNow the color contains light-background scheme for gui and 256 color term, with dark-background scheme supporting gui and 256 and 16 color term.\n\nYou can fire any issues at http://code.google.com/p/peaksea/issues/list\n"}, {:name=>"lpc.vim", :summary=>"Syntax highlight for LPC", :description=>"LPC stands for a simple, memory-efficient language: Lars Pensj| C.\n\nThis script is already coming with Vim 6.2, but the official version may not be quite up to date.\n\n"}, {:name=>"hlcontext.vim", :summary=>"based on VIMTIP#548: Using H and L keys as context sensitive pagedown/pageup", :description=>"This is based on VIMTIP #548: Using H and L keys as context sensitive pagedown/pageup by Usman Latif (original tip) and johann-guenter.simon's scrolloff fix/tip\n\nAll I have done is stuff the above in a script and add <plug> and (possible) a little clean up. Original tip is included in script file.\n\nIn short this makes H and L context sensitive; If H is invoked when cursor is not at the top of the window it will be placed at the top of the window, if it is at the top of the window <pageup> and keep cursor at top of window. Same idea for L (save go down)\n\nIf you like you can remap <plug>HLContextPlug_H and <plug>HLContextPlug_L to different keys\n\nComments and whatnot welcome of course."}, {:name=>"dont-click", :summary=>"this is result stupid bug in upload script", :description=>"I try 100x upload script, but I get error every. I tried anything, until I found bug. If version is set to 0, upload failed."}, {:name=>"gvim-with-tabs", :summary=>"patch to add tabs to gvim", :description=>"I'am not author this patch. I don't know his author, but I use it over year and it's great. Patch is on http://www.ascs.muni.cz/~smrt/vim/ and it's for GTK gvim 6.1.\n\nTHIS PATCH IS PROBABLE LOST FOR EVERY TIME"}, {:name=>"VHDL-indent", :summary=>"indent file for VHDL", :description=>"This is indent file for VHDL\nThe new versions are made by Janez Strangelj(jkranjski_at_email_dot_si)"}, {:name=>"ttcn-dict", :summary=>"TTCN-3 dictionary (keyword completion) file", :description=>"This package provides keyword completion for TTCN-3.\n\nIn insert mode you hit ctrl-x ctrl-k to get suggestions of keywords that could complete the currently typed word.\n\nNote: ctrl-x ctrl-k is the Vim built-in method for dictionary completion; check out vimtip #91 and vimtip #102 for cool stuff and adjustments you can make!\n"}, {:name=>"mis.vim", :summary=>"Syntax file for Minimal Instruction Set (MIS)", :description=>"This script provides syntax highlighting for the (rather obscure) MIS programming language.\n\nIt assumes the following conventions:\n\n* names of pointers to address locations end in \"_@\".. Ex. mypointer_@\n* names of pointers to pointers end in \"_@@\".. Ex. mypointer_@@\n\nIf these conventions are followed, the syntax will be highlighted accordingly. "}, {:name=>"table.vim", :summary=>"smarter table editing/navigation", :description=>"In vimtip#547 I described some functions that enable easier navigation\nand editing of tables. I have considerably enhanced the functionality\nand placed all the relevant code in a script file.\n\nThe idea of the script is to automatically extract fields from a table\nrow and use that information to create maps that aid in editing and\nnavigation of the table. The user first marks a table row as table\nheading. The line does not literally have to be the table heading, but\nit should be representative of the typical row of the table in\nquestion.\n\nAfter this step the script maps tab and shift-tab keys to move between\nfields. These mappings work in both insert and normal modes. The tab\nmapping is especially useful in insert mode as it inserts the correct\namount of padding to reach the start of the next field. \n\nThe script also has an alignment feature that aligns the fields of the\nrow with that of the heading. Editing a pre-existing table frequently\nleads to misaligned rows and this feature alleviates the need to\nmanually add/remove padding.\n\nFor more details about the script check the documentation in the script package. I also intend to post a tip documenting the use of the script. The tip will most likely be numbered vimtip #554"}, {:name=>"Source-Control", :summary=>"Common interface to source-control", :description=>"This is designed to be a generic source-control solution.  It handles multiple different\nrepository types at once.\n\nCurrently, there are integrations for Visual Source Safe and StarTeam (only tested under win32).\n\nIt is designed to be easily extensible, with different source-control modules being loaded on demand.\n\nThere is some documentation, including how to create source-control modules.\n"}, {:name=>"ocamlhelp.vim", :summary=>"Text-help reader for Objective Caml with hypertext (kinda) and syntax h/l", :description=>"Objective Caml txt-format reference manual reader, with syntax coloring of\nexamples. :edit ocaml-<current version>-refman.txt, press <Enter> on\nhighlighted section numbers to jump.\n"}, {:name=>"umber-green", :summary=>"Umber and green monochrome monitor nostalgia.", :description=>"I just grabbed the colorscheme_template and tried to satisfy my nostalgia for old green and  umber-toned monochrome monitors with a nice contrast in both low-light and (less so) bright environments.  Just a few colours, highlighting only the most important stuff. Works nicely so far for editing .c files on with my CRT using a gvim. I'll have to work on it yet (i.e. making it work in a console), so if you have comments, wishes or recommendations..."}, {:name=>"vgrep", :summary=>"another grep in wide look", :description=>"vgrep.vim is working for some people have complex project with deep directory \n\nThe vgrep.vim plugin script is work another grep unlike unix grep which use different output for look, if you didn't have such grep download at http://www.interlog.com/~tcharron/grep.html and patch with grep20f.dif \n\nwide format via unix format  \n ============ Wide Output Format =================\n File: C:\\vim\\vim62\\plugin\\vgrep.vim             \n     1: File: vgrep.vim                          \n    17: let loaded_vgrep = 1                     \n File: C:\\vim\\vim62\\plugin\\testtttt1\\testtttt2\\testtttt3\\whereis.vim           \n     1: File: whereis.vim                        \n =================================================\n save you eye see real code \n ============ Unix Output ========================\n plugin\\vgrep.vim:1: file...\n plugin\\vgrep.vim:17: let...\n plugin\\testtttt1\\testtttt2\\testtttt2\\whereis.vim:1: file ...\n =================================================\n\n"}, {:name=>"lebrief.vim", :summary=>"guide brief 3.1 user familiar with vim", :description=>"A basic script help brief style user familiar in vim not all command are maped. it also great for BIOS develop guys switch their editor in vim. yap I'm a BIOS porting guy. "}, {:name=>"vimcdoc", :summary=>"Vim online documentation Chinese version", :description=>"This is an effort to translate the wonderful Vim online help into \nChinese. The targetted Vim version is 6.4. We've already translated\n*all* the documents including the user manual as well as the reference\nmanaul.\n\nSee our web page:\n\nhttp://vimcdoc.sf.net (English)\nhttp://vcd.gro.clinux.org (Chinese GB)\n\nfor more detail."}, {:name=>"whereis.vim", :summary=>"simple whereis (Win32 Only)", :description=>"Whereis is a simple mechanism looking filename in deep directory."}, {:name=>"highlight_cursor.vim", :summary=>"highlights your cursor as a reverse character block", :description=>"Highlights the cursor so it appears as a reverse block (oldskool!)\n\nEspecially useful if for some reason your cursor disappears or is missing, invisible, hidden, or intermittent.\n\nUse Ctrl-C or Ctrl-H to toggle on/off."}, {:name=>"ntp.vim", :summary=>"Syntax highlighting for ntp.conf", :description=>"Provides syntax highlighting for NTP (Network Time Protocol) daemon configuration file ntp.conf."}, {:name=>"php_console.vim", :summary=>"Use php console application for debug messages (for windows)", :description=>"This is for windows.\n\nFor unix see http://vim.sourceforge.net/scripts/script.php?script_id=326.\n(But you can adapt this also for unix. Just the path-reference to the php.exe is different.)\n\nGo into your php-file and :call ParsePhpFile().\n\nWrite a mapping to automat this. E.g. \nmap <F5> :call ParsePhpFile()<cr>\nimap <F5> <esc>:call ParsePhpFile()<cr>\n\nNow you can debug your php-file without leaving vim. \n\nYou can jump to the error lines by clicking on the compiler output in the window that opens below.\n\nAfter finishing removing the errors you can open your php-file in the browser.\n\nAdvantages:\n* You do not rely on apache. This means:\n* You can open the php-files everywhere in the filesystem (also outside of htdocs).\n* There is no difference between the console and the browser output. (When there is no error output you see the normal html output.)\n* Roundtrip error checking is possible without leaving vim.\n"}, {:name=>"sessions.vim", :summary=>"named shortcuts to groups of files", :description=>"This plugin introduces following additions to regular session management (see\nhelp on viminfo, mkview, mksession):\n- short commands for session saving, loading, clearing and merging:\n  :SS <name> --- save session <name>\n  :SL <name> --- load session <name>\n  :SN <name> --- clear buffer list and set new current session name.\n  :SS without parameter saves current session loaded with :SL or created\n      with SN.\n  :SM <name> --- merge session <name> into current one.\n\n- All sessions are stored and loaded out of specific directory named\n  'sessions' in &runtimepath. \n  Note: it is nessessary to create this directory manually before using\n  plugin. E.g. 'mkdir -p ~/.vim/sessions' will do on Unix-like systems.\n\n- Session name argument does not need to have path prefix or extension. It's\n  also may be completed from already saved session names.\n\n- Major difference to built-in session mechanism is that saved session by\n  default does not contain any mapping, window layout, line number or\n  unlisted buffer information whatsoever. There's just file list and current\n  working directory/file. This is done intentionally, with robustness and\n  loading speed in mind (see help on viminfo to learn how to store file\n  marks across sessions). To enable old-stype session files, set variable\n  g:Sessions_Old_style = 1 in your .vimrc.\n"}, {:name=>"pyfold", :summary=>"Python Syntax Folding for class/def statements only", :description=>"This script acts as a syntax-file addon to the standard python.vim syntax file.  When expression folding is used, all classes and functions will be folded automatically.\n\nEach fold ends upon one of two conditions:\n\n1) A line is detected with an indent less than or equal to the previous fold beginning line (that is not in a multi-line string).\n\n2) A line with the same indent as a class or def statement is detected that contains the string \"#\\s*end\\s\\+\\<\\(class\\|def\\)\\>\".   (i.e. \"    #end class MyClass\").\n\nNote that script vimscript #515 provides a similar functionality, but includes marker folding and limited block statement folding.  This script was written to provide class and function folding only, allow \"#end \\(class\\|def\\)\" lines to end a fold and still be included in the fold, and to increase the speed creating folds in large files."}, {:name=>"oasis.vim", :summary=>"OASIS-CC Syntax", :description=>"This file provides syntax definitions for OASIS-CC.\n\nNote that this syntax file only fully defines the statements commonly used in configuring the OASIS-CC database (i.e. if blocks and insert/delete/update commands).  The full range of CSTOL commands have not been taken into consideration by this script."}, {:name=>"gdm.vim", :summary=>"Syntax highlighting for gdm.conf", :description=>"Provides syntax highlighting for GNOME Display Manager (gdm) configuration file gdm.conf."}, {:name=>"fluka.vim", :summary=>"Syntax highlight for FLUKA", :description=>"Provides syntax highlithing for the FLUKA simulation input file."}, {:name=>"vartabs.vim", :summary=>"Make your TAB-Key stop at arbitrary positions", :description=>"The usual <TAB> stops at any 'shiftwidth' position.\nSometimes (eg. when programming in RPG or /370-ASM) it is useful to have arbitrary positions (eg. for /370-ASM they are 10,16,71).\n\nThis script will give you this feature depending on the filetype."}, {:name=>"delek.vim", :summary=>"Colors good for dark and light background", :description=>"This colors work well for me using a light or a dark background."}, {:name=>"qt2vimsyntax", :summary=>"syntax definition for Trolltech Qt library (C++)", :description=>"A perl script that creates syntax definition for Trolltech' Qt library (http://www.trolltech.com) by scanning all qt includes and gaining class names. Assumes $QTDIR environment is set; if not, /usr/lib/qt is scanned. "}, {:name=>"tokens.vim", :summary=>"Use tokens (input()) to extend abbreviations", :description=>"This is fairly rough at the moment but what it does is allow tokens within abbreviations that you will be prompted to replace. These are based on the following digraphs:\n\n<C-K>Cu    -  if you use this token you will be prompted at every occurence\n                    \n<C-K>MW  -  you will only be prompted once and every subsequent use\n                        of this token will be the input you entered.\n\n<C-K>TH    -  Place this where you'd like the cursor to end up.\n                        This is a bit buggy at the moment so any comments  \n                         are welcomed.\n\n<C-K><< and >>  -  If you want to provide a message as to what you're\n                                  replacing use these. The only stipulation is that the \n                                  message be exactly 15 chars including << and >>\n\n<C-K>',    -   Because this plugin uses liblist.vim, commas need to be \n                     entered using this digraph.\n\n                ***   Requires:  liblist.vim   ***\nhttp://www.vim.org/scripts/script.php?script_id=166\n\nThe mapping used is <leader>et\n\nReading the script probably explains things better than I'm doing here but here's a few egs. (These are all insert mode by the way)\nEg1\n     type   dic\n     hit <leader>et\n     you'll see the prompt  <<   class name  >>\n     type in foo and hit <CR>\n     the string   <div class=\"foo\">|</div>   will be inserted with the cursor at the pipe.\n(this uses the 'Cu','<<>>' and 'TH' digraphs)\nEg2\n     type hd\n     hit <leader>et\n     you'll see the prompt  <<header level?>>\n     type in 2 and hit <CR>\n     the string <h2>|</h2> will be inserted again with the cursor at the pipe\n(this uses the 'MW','<<>>' and 'TH' digraphs)    \n\nKnown issues:\n    For some reason you can't place the 'TH' digraph at the end of the string. It  executes once OK but then stops.\n\n\nAs I'm not a programmer this could more than likely do with a complete overhaul. If anybody would like to help out or make suggestions, email markwoodwardATbigpond.com. I'd appreciate some input as I think the ideas pretty impressive but my executions not ;-)\n     "}, {:name=>"set_utf8.vim", :summary=>"Switching to Unicode in an orderly manner", :description=>"This script endeavours to set the various options required to allow (g)vim to process Unicode files properly, without, for instance, messing up keyboard input."}, {:name=>"python.vim--Vasiliev", :summary=>"Enhanced version of the python syntax highlighting script", :description=>"Enhanced version of the original (from vim6.1) python.vim for Python programming language.\n\nThe changes since the original python.vim are:\n\n- changed strings highlighting;\n- enhanced special symbols highlighting inside strings;\n- enhanced numbers highlighting;\n- added optional highlighting for %-formatting inside strings;\n- added highlighting for some error conditions (wrong symbols in source file,\n  mixing spaces and tabs, wrong number values,\n  wrong %-formatting inside strings);\n- added highlighting for magic comments: source code encoding\n  and #! (executable) strings;\n- added highlighting for new exceptions and builtins introduced in python 2.3, 2.4 and 2.5;\n- added highlighting for doctests;\n- added highlighting for new @decorator syntax introduced in Python 2.4a2;\n- added highlighting for trailing-space errors (triggered by new\n  option: python_highlight_space_errors);\n- added highlighting for variable name errors;\n- added highlighting for hex number errors;"}, {:name=>"Relaxed-Green", :summary=>"Relaxed green color scheme for vim and gvim.", :description=>"Simple color scheme.  Easy on the eyes for long coding sessions."}, {:name=>"simpleandfriendly.vim", :summary=>"A simple color scheme - with some eye-friendly colors.", :description=>"This colors evolved over a long time. I tried to use very eye-friendly colors and put some optical emphasis on comments.\n\nScreenshot: http://www.oxpal.com/downloads/vim/simpleandfriendly_split.png\n\nI looked for more subtle colors than those of the VI-distrib. I took a default-scheme and changed around, 'til I liked it. I don't know if the commands are enough for hardcore programmers that work with complex syntax, so feel free to enhance it. "}, {:name=>"ttcn-ftplugin", :summary=>"TTCN-3 ftplugin file", :description=>"This is a simple ftplugin for TTCN-3. You should put settings that are specific to TTCN in this file."}, {:name=>"promela.vim", :summary=>"Promela syntax highlighting", :description=>"This is syntax highlighting for the Promela language used with SPIN\n(http://spinroot.com/spin/whatispin.html)."}, {:name=>"xterm16.vim", :summary=>"An adjustable contrast color scheme for GUI and 8, 16 or 256 color terminals.", :description=>"An adjustable contrast fully customisable color scheme for GUI & 8, 16 or 256 color terminals, designed to minimise eyestrain. The main features are:\n\n\t- Four color maps:\n\t    'allblue'   : A colormap with most foreground colors blueish (to\n\t\t          minimize contrast etc.)\n\t    'soft'      : A colormap with foreground colors of similar\n\t\t          intensities to reduce eyestrain.\n\t    'softlight' : A colormap with a bright background (for web\n\t\t          hosting etc.)\n\t    'standard'  : A colormap for use on terminals with only 8/16\n\t\t\t   colors.\n\t  The first three colormaps will work only on 256 color capable\n\t  terminals or the GUI. The last one will work anywhere.\n\n\t- Adjustable brightness / contrast. Lets you easily adjust the\n\t  brightness and contrast settings. Extremely useful (for instance)\n\t  when there is a glare on your monitor, or for long late dim light\n\t  dim light late at night :)\n\n\t- Terminal and GUI support. If you use xterm, rxvt or mrxvt (compiled\n\t  with 256 colors), then the colors on your terminal will be almost\n\t  identical to your GUI colors. On any other terminal emulator, a few\n\t  scripts (included) and parts of this help are designed to help you\n\t  get the colors you want.\n\n\t- LCD / CRT Monitor support. The color response of LCD and CRT\n\t  monitors is pretty different. This color scheme has an option to\n\t  adjust colors on CRT monitors to give a similar appearance.\n\n\t- Customizable colors. If you find any color unreadable or ugly, you\n\t  can change it easily. When adjusting the brightness, your custom\n\t  colors will be suitably adjusted too!\n\n\t- Customizable highlighting groups. If you don't like the highlighting\n\t  of any particular group, you can change it to suit your needs. This\n\t  is useful for instance if you want the cursor to be brighter than\n\t  everything else / etc.\n\nThe first screenshot below is also the complete documentation and description.\n\nScreenshots:\n\nhttp://www.math.cmu.edu/~gautam/per/opensource/xterm16/xterm16-doc.html [Complete documentation and description]\nhttp://www.math.cmu.edu/~gautam/per/opensource/xterm16/xterm16-src.html [HTMLised source]\nhttp://www.math.cmu.edu/~gautam/per/opensource/xterm16/c-source.html [HTMLised C code]\nhttp://www.math.cmu.edu/~gautam/per/opensource/xterm16/timestamp-doc.html [Another VIM help file]\nhttp://www.math.cmu.edu/~gautam/per/opensource/xterm16/email.html [HTMLised email]\nhttp://www.math.cmu.edu/~gautam/per/opensource/xterm16/mrxvt.png [Transparent background in mrxvt]\n\n(On javascript enabled 'good' browsers, you should be able to adjust the Brightness, colormap and monitor type in each of the HTMLised screenshots above.)\n"}, {:name=>"bmichaelsen", :summary=>"Colorscheme matching PrettyBlueish and Purplehaze", :description=>"This colorscheme matches the PrettyBlueish\nGtk-theme and the Purplehaze Fluxbox-theme\nIt is based on the Zellner colorscheme maintained by Ron Aaron <ronaharon at yahoo.com>\nKudos to him, I just did some minor modifications.\nMaybe someone will find this useful.\nScreenshots with GTK-Vim and vim in xterm:\nhttp://michaelsen.kicks-ass.net/bjoern/vimscreen2.png\nhttp://michaelsen.kicks-ass.net/bjoern/vimscreen1.png (big)"}, {:name=>"preview.vim", :summary=>"Preview current file in selected browser.", :description=>"This has been tested on windows only. It  can probably be made to work on linux but is untested on that platform..(one day ;-)) \n(If anyone modifies this script to work on both platforms, please feel free to upload the modified script)\n\nPressing <S-F12> will prompt you for the browser you would like to preview the current file in. Browsers can be added by modifying the appropriately commented lines in the script.  (make sure to modify the current paths for browsers on your system).\n\nThere is also the option to include only files of a specific type. These are .php, .php3, .jsp, .asp, .html, .htm, and .vim at the moment but others can easily be added.\n\nIf the file is in your server directory (http:\\\\localhost\\) or a sub directory of it, it will be previewed through the server - NOT as a local file. \n\negs http:\\\\localhost\\test.php\n        http:\\\\localhost\\examples\\chapter04\\index.php\n\nOtherwise it will be previewed simply as a local file\neg    c:\\mysite\\index.html\n"}, {:name=>"Walk.vim", :summary=>"apply a vim command to the files of a directory tree and more (python required)", :description=>"This plugin intends to provide facilities to manage sets of files. For\nexample :\n. to create files from visited directory trees and files\n. to apply Vim commands on opened files\nIn fact, it autorizes files and dirs manipulation in many ways\n\nAs this plugin can manage many parameters, i decided to put these parameters\nin an ini file. Doing so allows you to deal with many mass treatments.\nIn this ini file, you can specify\n. a set of root dirs which trees will be visited. For Each root dir, you can\n  define other parameters you estimate useful\n. Parameters that contain strings to be written in the outfile :\n  . at begining and end of the file (can be connect string for command\n    files)\n  . entering and going out the root dirs\n  . entering and going out the visited dirs\n  . before and after the files found\n  These parameters can contain vim commands (between {{...}}) so you can do\n  whatever you want with the file names\n. You also have parameters that define\n  . a wildcard to filter the files\n  . a vim command to apply to the files found\n    This command may be written in the iniFile but may also be passed as a\n    parameter of the Walk command. If one command is written in the ini file\n    and another is passed to the Walk command, the inifile one is\n    overwritten by the parameter\n    If you want a result to be written in the outfile, this result may be\n    written in a register (cf help)\n  . the name of the outfile\nYou've got a complete example of ini file (example.ini) that can be used to\nsee how this plugin reacts. You just have to modify <SourceDir> and\n<OutFile> parameter.\nOther iniFile examples have been put in the package :\n. One is to generate a tag file with the names of the files found (exTagGen)\n. Another is to generate a file to prepare a syntax file to color the names\n  of the files found (to be used after exTagGen) (exColTagGen)\n  This is not very useful for source files but may be interesting to manage\n  simple text files with cross references\n. The last is to generate a directory tree (good for CDs' TOC) (exTreeGen)\n\nFeatures\nWGoIniDir     : Change the current dir to the inifiles dir. This is to ease\n                manipulation of inifiles\nWSetIniFile   : Initialise the inifile global variable\nWAddIniFile   : Add the filename passed to the inifile global variable\nWEditIniFile  : edits the inifile which name in passed. If this file is\n                empty, it is initialized with the content of \"skeleton.ini\"\n\nWalk          : launch the action, taking the inifiles wich names are\n                written in the inifile global variable. Walk accepts an optional\n                parameter that contains a vim command to be applied on the\n                files found. A powerful way of using this is to define\n                user-commands (:help user-commands)\n\nThere is other ways to launch the walk operation : you can call the walk\nfunction that way :\n:call Walk(cmd,inifile)\nAll the arguments must be provided (with no completion).\n:call Walk(\"\",iniFile)\nYou can write more than one ini files in the \"i\" register and type\n:call Walk(\"\",\"\") or\n:call Walk(cmd,\"\")\n\nNote : if you use the windows way of calling directories (with \\), you must\nbe careful : you have to write\n:call Walk(cmd,'D:\\my\\directory\\myIniFile.ini')\nor\n:call Walk(cmd,\"D:\\\\my\\\\directory\\\\myIniFile.ini\")\n\nNote2: This plugin may be difficult to understand at first glance. Don't hesitate to ask me if you need some more explanation...\n\n\nAdvertising :\nHave you heard of this other funny script ?\n\nIf you find this script  too serious, try this other one : \nhttp://www.vim.org/scripts/script.php?script_id=800\nWith this script you'll be able to MixCase like the best HaRÐco®É mI×CaSE mAs+êR and make your coding very new style ;-)"}, {:name=>"FindMakefile", :summary=>"Change directory to one containing a Makefile", :description=>"Change directory to the directory containing the current file and then repeatedly \"cd ..\" until ./Makefile exists.\nYou run it by enterning :call FindMakefile()\nI've mapped <F4> to a function that calls FindMakefile () and then does \"mak %<.o\"\nI needed this because using tags to jump to a source file sometimes left me with the wrong current working directory for this to work."}, {:name=>"MixCase.vim", :summary=>"Mix Case of typed text in the hÅ©ke®$ way (python required)", :description=>"==============================================================================\n1. Intoduction\n\nThis plugin does nothing very useful\nit modifies words :\n- in the hackers way (m¡x(ã$e)\n- in the Cambridge way : it ceganhs the odrer of the lreetts which doesn't\n              afceft the raitaeidbly vrey mcuh (when the wdors are not too lnog)\n\nIt now uses an ini file to customize the mi×ç4$3 table the way you want.\nEventually, you can have many ini files to swap between many types of\nmI×ca5iÑG\n\nNo mapping is provided as you know better than me where you want to map your\ncommands. Another reason is that mapping is often used for useful commands which\nis not the case here.\n\nThis plugin provides the following commands and functions : ~\nTo Mix ranges of text :\n :MCCambridge\n :MCHackerz\n\nTo Mix word under cursor and, eventually substitute all occurence :\n :MCHackerzMixWordUnderCurs\n :MCHackerzMixNSubstWordUnderCurs\n :MCHackerzMixSearchPattern\n :MCCambridgeMixWordUnderCurs\n :MCCambridgeMixNSubstWordUnderCurs\n :MCCambridgeMixSearchPattern\n\nThese commands are long to type to easily know what they do but you can map them :\nfor exemple, you can add\nmap <F2>   :MCHackerzMixWordUnderCurs<CR>\nin your .vimrc\n\n\nTo use in \\= expressions :\n function MixCase(...)\n function MixCambridge(...)\n\nTo manage ini file at runtime\n :MCSetIniFile\n :MCGoIniDir\n\nPlease, feel free to send me any comment. If you miss something (linked to\nm;×¢4Z3, of course), I'd add it with pleasure.\nIf you are to vote -1, i'd be pleased to know what was wrong and what you were waiting for ;-)\n\n==============================================================================\n2. Content of the archive\n\n    MixCase.vim            : The plugin (-> /plugin)\n    MixCase.py              : The python part of the plugin\n    MixCase.ini              : The default ini file\n    mixcase.txt                : The help file\n    MixCaseInv.ini          : an alternate ini file\n    MixCaseUTF-8.ini    : an UTF-8 encoded ini file\n"}, {:name=>"javaDoc.vim", :summary=>"Look up javadoc Help file from Vim [Unix Only]", :description=>"Hi All,\nThis script looks up javaDoc HTML help files for J2SE and J2EE api classes.\nFirst of all I am not sure if there is already a utility to do this or not, so here is my version.\n\nAbout the script.\nFirst the script runs only on Unix boxes, Windows users are more that welcome to port it .\nMake sure that the following unix commands are present in directories mentioned in your $PATH variable.\ndirname,grep,xlswin,awk\nIt also uses a shell script provided along with this package.\nIt is heavily commented and can be easily modified.\n\nWhat it does and what it doesn't\nIt opens javaDoc HTML file in an external browser from VIM.\nIt can open the HTML in either Netscape (Netscape 4.x, 6,7.x, Mozilla , Firebird ) or\na text browser such as lynx or links. Personally I prefer to open help in netscape when I am using gvim and in a text browser when I am using vim.\nCurrently It only supports looking up classes and not methods , or members.\n\nHow it works.\nIt opens javaDoc HTML file in an external browser from VIM.\nIt can open the HTML in either Netscape (Netscape 4.x, 6,7.x, Mozilla , Firebird ) or\na text browser such as lynx or links.\nPersonally I prefer to open help in netscape when I am using gvim\nand in a text browser when I am using vim.\nCurrently It only supports looking up classes and not methods , or members.\n\nHow it works.\nYou have two ways to lookup help\n1)\nTo use the mapping <Leader>jh, the cursor has to be placed on the class name\nwhose help file is to be looked up. i.e.\nif your source is \"Connection conn = null;\"\nThe cursor will have to be on the word Connection.\nThe script can't do a reverse mapping of variable name to class name and look-up help. i.e.\nyou can't use the variable conn to look up help for connection.\n\n2)Use the :Javadoc command and supply the Class name as an argument.\ni.e. :Javadoc Connection\n"}, {:name=>"gramadoir.vim", :summary=>"Interface to an Irish language grammar checker", :description=>"An Gramadoir is a command line\ngrammar checking engine for \nminority languages.  It is fully\nimplemented for Irish (Gaelic) at the\nmoment with some other languages\nin the works.  See\nhttp://borel.slu.edu/gramadoir/\nfor more information.  \n\nThis plugin provides a split screen\ninterface to the grammar checker,\nwith the text you are editing on top\nand a buffer containing the errors\noutput by An Gramadoir below.\n\nPressing <Leader>g once runs\nthe grammar checker and opens\nthe error buffer.  Each successive\nuse of <Leader>g moves the buffers to\nthe next error, in parallel.  Syntax \nhighlighting shows the erroneous text \nin red.  \n\nPressing <Leader>a stops the grammar\nchecker and returns to normal editing."}, {:name=>"XQuery-syntax", :summary=>"XQuery syntax", :description=>"see http://jmvanel.free.fr/vim/"}, {:name=>"expand.vim", :summary=>"method to simply an quickly post expand a cmd.  \"index ff<c-cr>\" for example.", :description=>"method to simply an quickly post expand a cmd.  \"index ff<c-cr>\" for example.\n(<c-cr> being mapped to this cmd.)\n\nNOTE this is a QUICKY!\nFor what it is worth, hopefully useful to someone :)\n\nThe reason for this over a basic mapping, or DrC.Stubs is the ability to\nspecify the variable(s) to work on.\n\nI.e.\n  iInd < m_array.size() for<c-cr>\n\n  for    (    iInd = 0; iInd < m_array.size(); iInd++)\n  {\n      <cursor>\n  }\n\nor\n  m_array ff<c-cr>\n\n  for(int i=0;i<m_array.length; i++){\n      <cursor>\n  }//end for loop over array m_array[i]\n\nNOTE that the command function shold leave the cursor in a position that a\nnormal mode `o` will place the cursor at the desired location. Kind of a HACK\nbut good enough for now."}, {:name=>"zrf.vim", :summary=>"Syntax file for Zillions of Games' ZRF", :description=>"This is a syntax file for proper highlighting of Zillions Rule Files (ZRF) which are used to describe games in Zillions of Games. Zillions of Games is a universal gaming environment that allows the definition of new games by the user. For more details simply visit http://www.zillionsofgames.com."}, {:name=>"truegrid.vim", :summary=>"A syntax highlighting file for TrueGrid input files.", :description=>"truegrid.vim provides syntax highlighting for TrueGrid input files.  It does not have all of the commands available in TrueGrid, as there are so many.  If you add a lot of commands, or make any other substantive changes, email them to me, and I will roll them in."}, {:name=>"dks-il2-tex.vim", :summary=>"Mapping deadkeys (accents)", :description=>"Central European chars in latin2 (cp1250, pl2) and TeX encoding\n\nThe most of Central European accented characters are defined,\nalso in TeX encoding. Changing encoding between these codes. I used to work\nwith:\n\n- 'digraphs', but not all CTRL-K {char1} {char2} work the way that I want;\n  it does not work in command-line mode and in search also.\n- 'keymap' (see 'loadkeymap') but it does not works to me anyway, and in\n  $vim/keymap/accents.vim there are no all CZ, HU and SK chars from\n  mentioned encodings (I think there are just East European characters).\n  \nThis 'keymap' shows more MSWord \"compatibility\" for Central Europe (I\nthink), for those who works half-time with Word it is very useful :-) \n\nUsage: Use [=+:;.,^] + <char> to write an accented character: <char> with\nacute, ve, etc.\n\n- <leader>at - convert the file from accents to TeX and map TeX deadkeys\n- <leader>ta - convert the file from TeX to accents and map accent dedakeys\n- <leader>da - map accent dedakeys\n- <leader>dt - map TeX deadkeys\n- <leader>du - unmap deadkeys\n\n<leader> is usually a '\\&#039"}, {:name=>"vimcommander", :summary=>"totalcommander-like two-panel tree file explorer for vim", :description=>"This is an adaptation of opsplorer (vimscript #362), intended to be more like the Total Comander (http://www.ghisler.com) file explorer.\n\nThis opens two panels of file explorers on the top half of the vim screen.\nTargets for moving and copying defaults to the other panel, like totalcmd. TAB switches between panels.\nVimcommander keys are mostly totalcommander's:\nF3 - view\nF4 - edit\nF5 - copy\nF6 - move\nF7 - create dir\nF8 - del\nOthers: C-U, C-Left/C-Right, C-R, BS, DEL, C-H, etc.\nSelection of files/dirs also works: INS, +, -. Then copy/move/del selected files.\n\nSuggested binding is\nnoremap <silent> <F11> :cal VimCommanderToggle()<CR>\n\nTested on Linux. I have reports that it doesn't work on Windows.\n\nIf you want to contribute, note that vimcommander is hosted at github: http://github.com/lpenz/vimcommander/."}, {:name=>"Smart-Diffsplit", :summary=>"Diffsplit that restores window settings", :description=>":VDiff[!] <filename>       : Open a vertial difference between the current file that restores buffer settings\n:HDiff[!] <filename>       : Open a horizontal difference between the current file that restores buffer settings\n                                                                                                                \nIn both cases the ! causes the specified buffer not to be unloaded when a\nwindow is closed, or another window is opened.  In this case, the settings\nwill be restored using the original settings of the first buffer.\n"}, {:name=>"robinhood.vim", :summary=>"A greenish color scheme", :description=>"Easy to the eyes, with some contrast but still pleasant. It's greenish, a bit dark and good for programming. Based on the Robin Hood color theme from Emacs."}, {:name=>"darkblue2.vim", :summary=>"A nice mixture of blue, green and cyan in a color scheme for programmers.", :description=>"A nice mixture of blue, green and cyan in a somewhat dark color scheme for programmers, easy to the eyes. Based on the Dark Blue 2 color theme from Emacs.\n"}, {:name=>"billw.vim", :summary=>"Black color scheme with some contrast", :description=>"A dark color scheme with high (but pleasant) contrast with a black background. This is better suited for lcd displays. Based on the Billw color theme from Emacs.\n"}, {:name=>"mail.vim", :summary=>"Syntax file for emails. Update of the default vim script to include URLs etc", :description=>"Updates the default VIM email syntax script to also do the following:\n\n1. Highlight URLs and email addresses in the message / quoted message\n2. Highlight signatures in the quoted message\n3. Highlight headers in the quoted message\n\nLook at http://www.math.uchicago.edu/~gautam/vim/xterm16/email.html for a screenshot. This file is now part of the standard vim distribution, and will be shipped with future releases (6.3 and later)."}, {:name=>"white.vim", :summary=>"I like white background. May be you do too.", :description=>"I like white background. May be you do too.\nSo be it. \nTake a look at screenshots - http://mah.bip.ru/vim_color.php\n\n----\nIt is uploaded as .txt  - didn't mean it."}, {:name=>"HHCS_D", :summary=>"Seven dark colorschemes for happy hacking.", :description=>"    Black background and lightgray text.\n    Outer has some unique feature. (LineNr&Fold, NonText, etc...)\n    No bold. No italic. For very small font. (I'm using 7.5pts font in NotePC)\n    Six colorschemes are using only 15 cterm colors, hhdred is using 16 cterm colors. But now, they are almost gui only.\n    Seven variations with a feeling of unification. So it is easy to change hhd<theme> by session, filetype, account, mood or \"Today's Lucky Color\".\n\n    Try hhdgray first.\n\ncterms\n    dos: Terrible. No underline. lightred=>red, lightgreen=>green, and so on.\n    xterm: Terrible. lightred=>red, lightgreen=>green, and so on.\n    gnometerm: May be compatible. Please send report(simply OK or NG) to me.\n\nOptions\n    format:                                                           \n           hhcs_<gui|cterm|both>_<theme|all>_<target>=\"value\"         \n    target:                                                           \n       linenr                                                         \n           \"light\"      : underline, fg=black,        bg=light<theme> \n           \"dark\"       : underline, fg=black,        bg=dark<theme>  \n           \"normal\"     : none,      fg=light<theme>, bg=black        \n       nontext                                                        \n           \"underlined\" : underline, fg=dark<theme>,  bg=black        \n           \"normal\"     : none,      fg=dark<theme>,  bg=black        \n    example:                                                             \n       This is original settings.                                 \n           :let hhcs_both_all_linenr  =\"light\"                    \n           :let hhcs_both_all_nontext =\"underlined\"               \n       This is prototype settings.                                \n           :let hhcs_both_all_linenr  =\"dark\"                     \n           :let hhcs_both_all_nontext =\"underlined\"               \n       If you don't want to eccentric feature, try this.          \n           :let hhcs_both_all_linenr  =\"normal\"                   \n           :let hhcs_both_all_nontext =\"normal\"                   \n       Normal, except hhdgray(gui), hhdgreen(cterm).              \n           :let hhcs_both_all_linenr        =\"normal\"             \n           :let hhcs_both_all_nontext       =\"normal\"             \n           :let hhcs_gui_hhdgray_linenr     =\"light\"              \n           :let hhcs_gui_hhdgray_nontext    =\"underlined\"         \n           :let hhcs_cterm_hhdgreen_linenr  =\"dark\"               \n           :let hhcs_cterm_hhdgreen_nontext =\"underlined\"         \n       For poor cterm                                             \n           :let hhcs_cterm_all_linenr     =\"normal\"               "}, {:name=>"enumratingptn", :summary=>"Enumerate vimonline's rating pattern.", :description=>"For vim script creators."}, {:name=>"HHCS", :summary=>"Six low contrast dark colorschemes for happy hacking.", :description=>"    Low contrast dark colorschemes.\n    No bold. No italic. For very small font. (I'm using 7.5pts font in NotePC)\n    Fullcolor gui only.\n    Six variations with a feeling of unification. So it is easy to change hh<theme> by session, filetype, account, mood or \"Today's Lucky Color\".\n\n    Try hhspring first.\n"}, {:name=>"ephtml", :summary=>"extended perl html syntax highlighting", :description=>"Provides support for highlighting Perl inside html:\n\n    <ephtml> ... perl ... </ephtml>\n    <ep-comment> ...comment... </ep-comment>\n"}, {:name=>"rgbasm.vim", :summary=>"Syntax file for the GameBoy assembler RGBASM", :description=>"Syntax file for the Rednex-GameBoy Assembler (rgbasm) Assembly language."}, {:name=>"Mouse-Toggle", :summary=>"Toggles mouse on/off.", :description=>"Toggles mouse between default setting (set it as mouse_default), and unset.  Simple concept, but pretty effective.  I use it to swap between internal Vim mouse handling for window resizing etc. and X window mouse handling for clipboard operations from/to xterm.  The basic script can, of course, be modified to toggle any setting (e.g. autoindent/no autoindent), or even rotate between a group of settings (e.g. various cinoptions).  Depending on your <Leader> setting, use it as follows: <Leader>m to toggle (default: backslash-m)."}, {:name=>"BlockWork", :summary=>"Adjust list numbering (increment) and other work with (visual) block selections", :description=>"Function to Work with Selected Blocks --\nIncludes vmap assignments for incrementing, decrementing, and re-sequencing integers in a selected block.\n\nPurpose:\nSimplifies editing numbered lists or other sequences of numbers.  \nIncludes function to apply most any command to a selected 'visual block' of text.\n\nJustification:\nVim includes CTRL-A and CTRL-X to add and subtract from integers under the cursor, however neither of these works on selections.\nThere are search and replace techniques to handle multiple changes on a range of lines (e.g. s/-\\?\\d\\+/\\=submatch(0)+1/g').\nHowever, this won't work on a 'visual block' selection.\n\nExample:\nThe first item was deleted from the following list,\nand you want to decrement all the numbers by 1.\n     2) show 35\n     3) show 19\n     4) show 85\n     ...\n   134) show 12\nUsing this plugin, you would position the cursor on the 2, \nselect the column of numbers, and decrement -- i.e. type:\n   <C-V>132jb<C-X> \n(where <C-V> and <C-X> are CTRL-V and CTRL-X respectively)\n\nRe-sequencing (To Automatically Correct A Sequence):\nThere is also a feature to re-sequence a selection of numbers (automatically eliminating all missing numbers).  Note that I've mapped the re-sequence function to <M-S-A> and <M-S-X>  (that's Alt plus Shift and A or X).  (The functional interface within the script allows easy adaptation for other scripters.)\n\nIssues and challenges with the techniques employed are discussed in the file.\n\n---\n2005-09-02: When I created this, I had imagined that I would update it a some point, but \nit has served me well since I had created it.  I mostly use this script to re-sequence numbers.\n\nNote that there are now at least four scripts that perform this functionality.\nvimscript #670 - visincr.vim - Charles E Campbell (along with vimtip #150, handles dates!!!)\nvimscript #145 - increment.vim - Stanislav Sitar\nvimscript #156 - increment.vim - Srinath Avadhanula\nvimscript #842 - increment.vim - William Natter (sequences on a substitution character)\nvimscript #189 - renumber.vim - Neil Bird (only re-sequences, but handles hex)\nvimscript #821 - blockwork.vim - John Aldridge\nvimscript #1046 - monday.vim - Stefan Karlsson (increments month and weekday names)\n\nSpeak up if there are others."}, {:name=>"avrasm.vim", :summary=>"Atmel AVR assembler syntax file", :description=>"Syntax file for Atmel AVR microcontrollers assembler. Please send your suggestions, comments, bug reports etc. to finn@sendmail.cz"}, {:name=>"yum.vim", :summary=>"Syntax highlighting for yum.conf", :description=>"Provides syntax highlighting for yum.conf (Yellowdog Updater Modified) used by Fedora, ASP Linux, and others."}, {:name=>"asmM68k.vim", :summary=>"ASM syntax file for Motorola 68k processors", :description=>"Highlighting for M68K assembly keywords, does not highlight opcodes without a size postfix in order to reduce bugs.\nI\\\\&#039m sure there are better syntax files for the M68k, I just didn\\\\&#039t have any installed."}, {:name=>"find_in_files", :summary=>"To find a string in the files in current directory", :description=>"All of us when working in list of files come across the problem of searching for string in the files and then if the string is found, we manually open that file and go to a specific line. \n\nAll this can be done with a stroke of key using this script.\n\nThis script is used to find a string in files in current directory. This script copies the finding in a buffer and opens it in the same window. \n\nTo go to a particular line/file in which the string is found. Click F2 on the top of the line in the buffer.\n\nProcedure:\n1. execute :CALL \"<string>\" in gvim\n\tThis will execute windows findstr command and will open the file in the same buffer\n2. Go to a line/file in the new buffer that you want to open.\n3. Press F2\n\nResult:\nIt will open up a file in a same window and will go to that line.\n\nHow to Execute:\n1. :CALL \"<string>\"\n\tWill search for String in all the files in current dorectory\n2. Press <F3>, this will search all files in directory for string on which the cursor exists\n3. Press <F4>, this will seach current file for string on which the cursor exists."}, {:name=>"mp.vim", :summary=>"Identation file for MetaPost", :description=>"This is identation file for MetaPost language. I'm not write same file for MetaFont only because I not use this powerfull program, but it is very similar to MetaPost language and if somebody ask me to write it I may be do this.\n\nSo this is citation from mp.vim where I wrote about indent in MetaPost\n\n\" Identation Rules: {{{1 \n\" First of all, MetaPost language don't expect any identation rules.\n\" This screept need for you only if you (not MetaPost) need to do\n\" exactly code. If you don't need to use indentation, see\n\" :help filetype-indent-off\n\"\n\" Note: Every rules of identation in MetaPost or TeX languages (and in some\n\" other of course) is very subjective. I can release only my vision of this\n\" promlem.\n\"\n\" ..........................................................................\n\" Example of correct (by me) identation {{{2\n\" shiftwidth=4\n\" ==========================================================================\n\" for i=0 upto 99:\n\"     z[i] = (0,1u) rotated (i*360/100);\n\" endfor\n\" draw z0 -- z10 -- z20\n\"         withpen ...     % <- 2sw because breaked line\n\"         withcolor ...;  % <- same as previous\n\" draw z0 for i=1 upto 99:\n\"             -- z[i]             % <- 1sw from left end of 'for' satement\n\"         endfor withpen ...      % <- 0sw from left end of 'for' satement\n\"                 withcolor ...;  % <- 2sw because breaked line\n\" draw if One:     % <- This is internal if (like 'for' above)\n\"          one\n\"      elsif Other:\n\"          other\n\"      fi withpen ...;\n\" if one:          % <- This is external if\n\"     draw one;\n\" elseif other:\n\"     draw other;\n\" fi\n\" draw z0; draw z1;\n\" }}}\n\" }}}\n"}, {:name=>"Intellisense", :summary=>"JSP Plugin : Intellisense capability to JSP scripts", :description=>"This is the JSP plugin of Intellisense. \nYou need Intellisense core package for this to work, which you can download from http://insenvim.sourceforge.net or http://sourceforge.net/projects/insenvim.\nYou also need Java and HTML plugin for this to work.\nA new HTML plugin is available, and you should install it. It fixes one big problem."}, {:name=>"VimNotes", :summary=>"A script to help keep an organized collection of notes with linking.", :description=>"This is a simple script that helps keep a collection of notes organized and allows vim help style linking. \n\nVimNotes will:\n1.  Automatically create an Index of links and display it in a Menu in Gvim.\n2.  Tag file is automatically regenerated every time a VimNote is saved.\n3.  \n\nVimNotes Configuration:  \n\nVimNotes has a few configuration options at the top of the VimNotes.vim file.\nYou should review these and make any desired changes.\n\nDefault Notes Directory:         \nby default all notes are kept in a single directory.\n\n  let g:VN_DefaultDir = \"~/Notes\"\n\nFolds:\nVimNotes can be configured to fold note subsections (1) or not (0)\n\n  let g:VN_FoldEnable = \"1\"\n\n\nNote Header Configuration:\nThe default (\"d\") header will include filename, created date and last\nmodified date and by whom.  Or you can use a minimalist (\"m\") header.\n\n  let g:VN_Header = \"d\"\n\nNote Section Divider:\nSetting this to \"1\" will place a divider line of ---- between note sections.\nSetting it to \"0\", will disable a visible seperater.\n  let g:VN_SectionSep = \"1\"\n\nDefault Web Browser:\nVimNotes can open links in a browser of your choosing.\nExamples: \n  let g:VN_DefaultBrowser = \"konqueror\"\n  let g:VN_DefaultBrowser = \"links -g\"\n  let g:VN_DefaultBrowser = \"konsole -e lynx\"\n  let g:VN_DefaultBrowser = \"xterm -e lynx\"\n  let g:VN_DefaultBrowser = \"mozilla\"\n\nKeymappings:\nIf you would like to change any of the keymappings for this script,\nadd the following lines:\n               map <-key-to-use> <PLUG><-function-to-map>\n               map! <-key-to-use> <PLUG><-function-to-map>\nDefault Config:\n               VN_NewFile                    <F2>\n               VN_NewSection              <F3>\n               VN_Search                     <F4>\n               VN_OpenHTTPLink         <F5>\n      Note: VN_NewFile is always available, however VN_NewSection, \n               VN_Search, and VN_OpenHTTPLink are only available if the\n               current buffer is a VimNote.\n\n Example:\n               map  <F1> <Plug>VN_Search\n               map! <F1> <Plug>VN_Search\n\nCustomizing Syntax Colors:\n  You can link the group to an existing syntax group with this command:\n       highlight link <vimnotes-group>  <group>\n  You can find the available group names in your current syntax file:\n       /usr/local/share/vim/vim62/colors/\nDefault Config:\n               highlight link VN_Bullet          Comment\n               highlight link VN_Checkbox        Function\n               highlight link VN_CheckboxDone    Comment\n               highlight link VN_HyperTextJump   Function\n               highlight link VN_HyperTextEntry  Identifier\n               highlight link VN_Divider         Comment\n               highlight link VN_Header          Comment\n               highlight link VN_HeaderTopic     Function\n               highlight link VN_HTTP            String\n               highlight link VN_NumberedList    Comment\n               highlight link VN_Topic           Comment\n\n"}, {:name=>"gq", :summary=>"Multipurpose e-mail message beautifier", :description=>"gq.vim provides shortcut \"q\", a variant on Vim's built-in beautifier\n\"gq\" with enhanced e-mail support. Use it just as you'd use \"gq\" when\nin Visual mode. - Features:\n\n - It's capable of dealing with lists being part of quotations.\n   (Vim's 'comments' engine \"gq\" depends on can't do this.)\n - Quote marks may appear in conjunction with enclosed initials\n   denoting the author's name.\n - It can perform basic tasks on malformed quoting-markup. (remove\n   enclosed whitespace, reposition initials, convert badly wrapped\n   lines)\n - It's configurable. (Have a look at gq.vim to see how this can be\n   accomplished..)\n\nA quote sample to illustrate how it works..\n\n  > AB> > 1. qtqt qtqtq. qtqtqt qtqtqt qtqtq tqtqt tqqtt qtqt qtqt.\n  > >AB > 2. qtqt qtqtq. qtqtqt qtqtqt qtqtq tqtqt tqqtt qtqt qtqt.\n  >CD > - qtqt qtqtq qtqtqt qtqtqt qtqtq, tqtqt tqqtt qtqt qtqt.\n  > CD> * qtqt qtqtq qtqtqt qtqtqt qtqtq, tqtqt tqqtt qtqt qtqt.\n  > qtqt qtqtq qtqtqt. qtqtqt qtqtq tqtqt, tqqtt qtqt qtqt qtqt qt\n  qtqt qtqtqt.\n\n\n\"Vipgq\" (:setl fo=tcrqn ai com=n:>,fb:-,fb:* tw=36):\n\n  > AB> > 1. qtqt qtqtq. qtqtqt\n  > qtqtqt qtqtq tqtqt tqqtt qtqt\n  > qtqt.\n  > >AB > 2. qtqt qtqtq. qtqtqt\n  > >qtqtqt qtqtq tqtqt tqqtt qtqt\n  > >qtqt.\n  >CD > - qtqt qtqtq qtqtqt qtqtqt\n  >qtqtq, tqtqt tqqtt qtqt qtqt.\n  >CD> * qtqt qtqtq qtqtqt qtqtqt\n  >qtqtq, tqtqt tqqtt qtqt qtqt.\n  >qtqt qtqtq qtqtqt. qtqtqt qtqtq\n  >tqtqt, tqqtt qtqt qtqt qtqt qt\n  qtqt qtqtqt.\n\n\n\"Vipgq\" (:setl fo=tcrqn ai com=n:>,fb:-,fb:*,n:A,n:B,n:C,n:D tw=36):\n\n  > AB> > 1. qtqt qtqtq. qtqtqt\n  > AB> > qtqtqt qtqtq tqtqt tqqtt\n  > AB> > qtqt qtqt.\n  > >AB > 2. qtqt qtqtq. qtqtqt\n  > >AB > qtqtqt qtqtq tqtqt tqqtt\n  > >AB > qtqt qtqt.\n  >CD > - qtqt qtqtq qtqtqt qtqtqt\n  >CD > qtqtq, tqtqt tqqtt qtqt\n  >CD > qtqt.\n  > CD> * qtqt qtqtq qtqtqt qtqtqt\n  > CD> qtqtq, tqtqt tqqtt qtqt\n  > CD> qtqt.\n  > qtqt qtqtq qtqtqt. qtqtqt qtqtq\n  > tqtqt, tqqtt qtqt qtqt qtqt qt\n  qtqt qtqtqt.\n\n\n\"Vipq\" (:setl fo=tcqn ai com=n:>,fb:-,fb:* tw=36):\n\n  AB>>> 1. qtqt qtqtq. qtqtqt qtqtqt\n  AB>>>    qtqtq tqtqt tqqtt qtqt\n  AB>>>    qtqt.\n  AB>>> 2. qtqt qtqtq. qtqtqt qtqtqt\n  AB>>>    qtqtq tqtqt tqqtt qtqt\n  AB>>>    qtqt.\n  CD>> - qtqt qtqtq qtqtqt qtqtqt\n  CD>>   qtqtq, tqtqt tqqtt qtqt\n  CD>>   qtqt.\n  CD>> * qtqt qtqtq qtqtqt qtqtqt\n  CD>>   qtqtq, tqtqt tqqtt qtqt\n  CD>>   qtqt.\n  > qtqt qtqtq qtqtqt. qtqtqt qtqtq\n  > tqtqt, tqqtt qtqt qtqt qtqt qt\n  > qtqt qtqtqt.\n"}, {:name=>"TT2-syntax", :summary=>" Syntax Highlight for Template-Toolkit 2.x", :description=>"* THIS SCRIPT WILL BE NO LONGER MAINTAINED *\nMaintainer was handed over. Please visit below to find updated version.\nhttp://github.com/petdance/vim-perl\n\nSyntax Highlight for Template-Toolkit 2.x\n( http://search.cpan.org/~abw/Template-Toolkit/ )\n Contain Perl code in PERL/RAWPERL directive. (runtime sytax/perl.vim)\n No fold.\n HTML syntax for including TT2 syntax. ( tt2html.vim / unfinished )\n Can define START_TAG/END_TAG for your style.\n"}, {:name=>"xmaslights.vim", :summary=>"Make your text appear as animated Christmas lights", :description=>"xmaslights.vim is a Python script for Vim that make your text appear as animated Christmas lights.  It changes the color of the different syntax highliting components randomly on a timer/loop.  It was tested with the win32 gvim binary and may need modification to work on other platforms."}, {:name=>"smartmake", :summary=>"A somehow smarter version of the make command", :description=>"This plugin provides a smart version of the :make command: Before running the compiler, it scans the current and all parent directories to figure out which compiler to use. It provides a command called \"SmartMake\". When neither \"no_plugin_maps\" nor \"no_smartmake_maps\" are set F7 will be bound to that command. Currently supported compile flavours: make, ant and nant."}, {:name=>"httpclog", :summary=>"Syntax highlighting for a combined http log file", :description=>"This syntax file highlights apache logs, specifically the \"combined\" format ones.  The \"combined\" format includes the user agent and the referrer in the logfile.  This version is very basic."}, {:name=>"RTF-1.6-Spec-in-Vim-Help-Format", :summary=>"Specification of RTF in easy and fast Vim help format.", :description=>"Specification of most widely understand format of word processor file format."}, {:name=>"systemc_syntax.tar.gz", :summary=>"Syntax file for SystemC files", :description=>"This download contains vim syntax files for SystemC.\nIf you are wondering what SystemC is:\n1. Visit www.systemc.org\n2. You probably don't need this package"}, {:name=>"selected-resizer", :summary=>"resizes a window to the selected block of text", :description=>"This script allows you to highlight some text and then hit Control-r to automatically change the size of the window to the area of the selected text."}, {:name=>"PureBasic-Syntax-file", :summary=>"Syntax highlighting for PureBasic", :description=>"All keywords and predefined functions are highlighted as well as type suffixes, constants and numbers. The folding of procedures still needs some tweaking.\n"}, {:name=>"macro.vim", :summary=>"Syntax coloring for (VAX) Macro assembly", :description=>"Provides syntax coloring for (VAX) Macro and/or Macro32 source code."}, {:name=>"python.vim--Stebbing", :summary=>"'python' colour scheme", :description=>"Only supports gvim, because there is not much you can do with only 2 shades of green in cterm. \n\nA colour scheme for people editing python, its very 'green' and 'pythonic', its also very 'untidy' and 'unfinished'. The next version should be alot cleaner.\n\nps: I modified an existing colour scheme I already had installed, I cannot remember which, so If you recognise your own work, umm.. get over it :) "}, {:name=>"text.py", :summary=>"This is utility to easy access to vim buffer. For pythonic macrowriters", :description=>"This is text.py module for easy association of vim buffer to python language. Module provides Text-calss, which has access vim buffer contents, and has many of string, sequense and file-object methods. You may use slice, may use assignment to slice of buffer, and you can use step argument in this assignment in python 2.3 notation. You can use all of string methods like .upper(), .lower(), .center() etc. You can use many of sequence methods like .append(), .extend(), .reverse() etc. You can use a lot of binary operators like +=, *=; membership test \"in\" etc. Moreover, Text-instance provide some facilities to work with regular expressions including situations when text in buffer is in multibyte encoding. Searching takes place in unicode, but module provides some new match object: \"NoUniMatchObj\". This object has all of original match objects attributes but when you expect to get a string, you get a string not unicode. And when you expect to get address (byte-offset) you get address in encoded string too.\n\nSimple example:\n~~~~~~~~~~~~~~~\nimport text\nt = text.Text()\nfor i in t.re.finditer(my_regexp):    # search my_regexp in buffer\n    try:\n        t.replace_i(i.start(),            # interactive replace fragment of\n                    i.end(),              #   buffer from i.start() to i.end()\n                                          #   where i is an instance of\n                                          #   NoUniMatchObj\n                    [\"replasement one\",   # There are a lot of substitutions,\n                     my_function(i), ...])#   user can choose one of them.\n    except t.exceptions.CancelDialog:\n        pass                            # handler of Cancel button\nt.center(80)                            # centering contents of buffer\nt.apply_to_lines(my_other_function)     # apply my_other_function line by line \n\nAnother powerful example you can see in vimscript#841\n\nThis utility very useful if you need to do python-substitution using confirmation dialogs, for example if you need to choose a lot of various replacements. This is useful too if you work with utf-8 encoding etc.\n\nRussian mirror: http://python.anabar.ru/emin.htm#textpy\n"}, {:name=>"yo-speller", :summary=>"NOTE: this only for russian users! Spell YO letter in the buffer.", :description=>"Russian home-page of this project is http://python.anabar.ru/yo.htm\nThere you can find analogous macros for XEmacs writen by me in ELisp.\n\nThis programs check russhian text to find words with E letter and chage to the YO letter if needed. For example: \"avtogidropod'emnik\" -> \"avtogidropodyomnik\". Words were letter yo must be, changed silently. And if this word may be with yo and may be without (vse-vsyo, chem-chyom) there are prompt a dialog.\n\nScript correctly work with case: \"Word\" change to \"Another\", \"word\" to \"another\" and \"WORD\" to \"ANOTHER\", \"wORd\" dont change, because it is no word :)\n\nExperiment show this if not very hard, because most of word chanded automatically. The database contain 60000 words (in all cases)"}, {:name=>"increment.vim--Natter", :summary=>"Subsitute a pattern with incremented values", :description=>"This is a handy plugin that makes easy replacing your favorite pattern (\"@\" by default) with a sequence of incremented values using the \"Inc\" command.\n\nExamples:\n\nIf you have a file that only contains the following lines:\n\n   This is line @\n   This is line @\n   This is line @\n   This is line @\n\nBy typing \":1,4Inc\", you obtain:\n\n   This is line 0\n   This is line 1\n   This is line 2\n   This is line 3\n\nBetter yet...  With \":Inc i11 s4 pblah\",\n\n   This is a list: [blah, blah, blah, blah, blah, blah, blah]\n\nbecomes\n\n   This is a list: [4, 15, 26, 37, 48, 59, 70]\n\nYou can also repeat the same value several times.  Consider:\n\n   case\n      addr@: begin value@ = offset@+incr@; end\n      addr@: begin value@ = offset@+incr@; end\n      addr@: begin value@ = offset@+incr@; end\n   end\n\nAfter \":%Inc r4\", you obtain:\n\n   case\n      addr0: begin value0 = offset0+incr0; end\n      addr1: begin value1 = offset1+incr1; end\n      addr2: begin value2 = offset2+incr2; end\n   end\n\nI have just added support for bases and right alignment.  You just have to specify the width of your alignment:\n\n   `define MEM_ADD0 @\n   `define MEM_ADD1 @\n   `define MEM_ADD2 @\n   `define MEM_ADD3 @\n\nbecomes, after running \":%Inc w3 i128 f0\":\n\n   `define MEM_ADD0 000\n   `define MEM_ADD1 128\n   `define MEM_ADD2 256\n   `define MEM_ADD3 384\n\nor, after running \":%Inc w3 i128 f0 h\":\n\n   `define MEM_ADD0 000\n   `define MEM_ADD1 080\n   `define MEM_ADD2 100\n   `define MEM_ADD3 180\n\nMany thanks to Stanislas Sitar (vimscript #145), Ely Schoenfeld (vimscript #1199), Charles E Campbell's (vimtip #150, vimscript #670) and Neil Bird (vimscript #189).\n\nNote: I need to merge with Ely's version, and to update the documentation.  Sorry if this causes any inconvenience in the meantime.\n\nHappy Vimming!"}, {:name=>"nasl.vim", :summary=>"syntax highlighting for Nessus nasl scripts", :description=>"Performs syntax highlighting for Nessus Attack Scripting\nLanguage (NASL) scripts.\n\nThis is still in rapid development, and by no means finished.  But, it's already useful, so I thought I would share it."}, {:name=>"ptl.vim", :summary=>"Syntax File for the Python Template Language", :description=>"Syntax File for the Python Template Language:\n\nhttp://www.mems-exchange.org/software/quixote/doc/PTL.html\n\nA language used by the Web application framework, Quixote (http://www.mems-exchange.org/software/quixote/), which is mostly Python with embedded HTML.\n\nUses python.vim and html.vim."}, {:name=>"pyab", :summary=>"Abbreviates standard python modules", :description=>"This project died in 2003 and has been rewritten as 'pydiction' (See: http://www.vim.org/scripts/script.php?script_id=850)"}, {:name=>"mars.vim", :summary=>"Dark red color scheme", :description=>"I was getting tired of black and blue colorschemes , thought I'd try to spice things up a bit :-).  Still I kept the colors dark or muted where I thought it made sense.  Check out a screen shot at http://www.geocities.com/aldy0169/vim/\n\nenjoy."}, {:name=>"howto-ftplugin", :summary=>"ftplugin for browsing HOWTO files", :description=>"ftplugin for browsing HOWTO files\n<LocalLeader><CR> switches between TOC and HOWTO body (from <1> to <2> below)\n<LocalLeader><Space> goes to the next topic in the HOWTO (from <2> to <3>)\n\nExample:\n<<BEGIN>>\nTable of Contents\n1. How can I help? <1>\n    1.1. Assisting with the Net-HOWTO\n...\n-----------------------------------------------------------------------------\nChapter 1. How can I help? <2>\n...\n-----------------------------------------------------------------------------\n1.1. Assisting with the Net-HOWTO <3>\n<<END>>\n"}, {:name=>"SrchRplcHiGrp.vim", :summary=>"Search and/or replace based on a syntax highlight group", :description=>"\tSR = Search and/or Replace\t\t\t\n\nThis plugin defines some commands to allow you to:\n1.  Search for characters with a particular syntax highlight group\n2.  Search and replace characters with a particular syntax highlight group\n\nCommands:\n\tSRDispHiGrp\t\t\t\t\n\t\tDisplays the syntax id and name the of the syntax group \n\t\twhich has been chosen.\n\n\tSRChooseHiGrp[!]       \t\t\t\n                Before you can run the search and replace command (:SRHiGrp),\n                you must choose which syntax group id you want to operate on.  \n                The top level syntax id of the current cursor position is\n                chosen (ie. the top-level one versus the final one).\n\n                The optional bang lets SRChooseHiGrp use the translated\n                syntax ID. This is final one versus the top-level one. \n\n                Assuming we were using a SQL file and placed the cursor on the\n                FROM word, then using the SyntaxAttr plugin\n                (http://vim.sourceforge.net/script.php?script_id=383)\n                it displays both the top-level and translated \n                (or final) highlight group as follows: \n                  group: sqlKeyword->Statement guifg=#ffff00(#ffff00) \n \n\n\t\tExamples: \n\t\t  :SRChooseHiGrp \n                      Will operate on only sqlKeyword syntax groups\n\n\t\t  :SRChooseHiGrp! \n                      Will operate on all Statement syntax groups.  Based on\n                      |group-name|, the Statement group will highlight the\n                      same color for the following highlight groups:\n                            Conditional\t\n                            Repeat\t\t\n                            Label\t\t\n                            Operator\t\n                            Keyword\t\n                            Exception\t\n                      Therefore SRChooseHiGrp! will operate over all of the\n                      above syntax groups.\n\n\tSRHiGrp[!] \t       \t\t\t      \t\n                This command will perform a search and replace over a visual\n                range.  It works in all visual modes, characterwise (v),\n                linewise (V) and blockwise (<C-V>).\n\n\t\tIt optionally takes takes 2 parameters.\n\n                Parameter 1 controls what characters are matched.  The default\n                for this value is \\(\\w\\+\\>\\).  This expression is appended to\n                the \\%# which starts the match from the current cursor\n                position.  This expression must specify a submatch \\(...\\).\n\n\t\tParameter 2 controls what to do with the matched string.  The\n\t\tdefault for this value is \\U\\1.  This expression will cause\n\t\tthe matched string to be UPPER cased.  The \\1 refers to the \n                submatch from the first parameter.\n\n\t\tIf the parameters are not supplied, the user will be prompted\n\t\tto enter the expression(s).\n\n                The optional bang (!) works the same as SRHiGrp, but will\n                operate on all syntax groups that are NOT the chosen one\n                (SRChooseHiGrp).\n\n\t\tSyntax: \n\t\t[range]SRHiGrp[!] 'from-pattern','to-string'\n\n \n\tSRSearch    \t       \t\t\t      \t\n                This command will perform a forward search starting at the current\n                cursor position for a specified highlight group name.  The range defaults\n                to the entire file.  It supports all visual modes, characterwise (v),\n                linewise (V) and blockwise (<C-V>).\n\n==============================================================================\n3. Examples\t\t\t\t\t*srchrplchigrp-examples*\n\n   SRHiGrp\n   -------\n\n\tFirst place your cursor on an item that is syntax colored the way\n\tyou want:\n\t\t:SRChooseHiGrp\n \n\tNext, visually select a block of text\n\t(all visual modes are supported)\n\t\t:SRHiGrp\n\t\tor\n\t\t:SRHiGrp '\\(\\w\\+\\>\\)'\n\t\tor\n\t\t:SRHiGrp '\\(\\w\\+\\>\\)', '\\U\\1'\n\n\tIf you had the following in a SQL file:\n\t\tif exists( select 1\n\t\t            from sys.sysprocedure sp\n\t\t             key join sys.sysuserperm sup\n\t\t           where sp.proc_name = 'sp_http_course_detail'\n\t\t             and sup.user_name = user_name()             ) then\n\t\t    drop procedure sp_http_course_detail;\n\t\tend if;\n\n\tWhere the keywords (if, exists, select, from ...) are all \n\thighlighted yellow (based on my colorscheme).  After I visually\n\tselect the area and run the command taking default prompts:\n\t\t:'<,'>SRHiGrp \n\n\tThe result is:\n\t\tIF EXISTS( SELECT 1\n\t\t            FROM sys.sysprocedure sp\n\t\t             KEY JOIN sys.sysuserperm sup\n\t\t           WHERE sp.proc_name = 'sp_http_course_detail'\n\t\t             AND sup.user_name = user_name()             ) THEN\n\t\t    DROP PROCEDURE sp_http_course_detail;\n\t\tEND IF;\n\n\tWhere the keywords (if, exists, select, from ...) are all \n\thighlighted yellow (based on my colorscheme).  After I visually\n\tselect the area and run the command taking default prompts: \n\t\t:'<,'>SRHiGrp!\n\n\tThe result is:\n\t\tif exists( select 1\n\t\t            from SYS.SYSPROCEDURE SP\n\t\t             key join SYS.SYSUSERPERM SUP\n\t\t           where SP.PROC_NAME = 'SP_HTTP_COURSE_DETAIL'\n\t\t             and SUP.USER_NAME = USER_NAME()             ) then\n\t\t    drop procedure SP_HTTP_COURSE_DETAIL;\n\t\tend if; \n\n\n   SRSearch\n   --------------\n\tSRSearch simply does a forward search for the specified highlight\n        group.  A few examples: \n\t\t:SRSearch sqlKeyword\n\t\t:1,5SRSearch sqlKeyword\n\t\t:'<,'>SRSearch sqlKeyword\n\n\tOptionally, you can first choose the hightlight group by placing your\n        cursor on the highlight you want and: \n\t\t:SRChooseHiGrp\n\t\t:SRSearch\n\n\tUsing Vim's tab completion you can also: \n\t\t:SRSearch s<Tab>\n\n\tEach time you press tab, it will cycle through the currently defined\n        syntax highlight groups beginning with the letter 's'.\n\n        The results of the search is displayed in the command line and is\n        highlighted in the color of the syntax group.  This will remind you\n        which group was searched for. \n            SRSearch - Match found - Group ID: 171  Name: sqlKeyword\n            SRSearch - Match NOT found - Group ID: 171  Name: sqlKeyword\n\n"}, {:name=>"latex-mik.vim", :summary=>"LaTeX support (MikTeX) for GVIM on Win32-systems", :description=>"This script adds a menu for LaTeX-related functions for .tex, .bib-files\n\nTo process multiple file LaTeX-projects, enter the project name (e.g.\n``myproject'') at the prompt, if ``myproject.tex'' is the main file.\n\nMenu options address:\n\n  (pdf)latex\n  bibtex\n  makeindex\n  yap (dvi-viewer)\n  dvips\n  gsview32\n  tth\n\nLatex-mik supports entering commands and environments."}, {:name=>"Pydiction", :summary=>"Tab-complete your Python code", :description=>"Pydiction allows you to Tab-complete Python code in Vim, including: standard, custom and third-party modules and packages. Plus keywords, built-ins, and string literals.\n\nIt consists of three main files:\n    \n        python_pydiction.vim -- The Vim plugin that creates the Tab-completion functionality for Python files.\n        complete-dict -- A Vim dictionary file that contains Python keywords and module structure. This is what the plugin looks at to know which things are completable.\n        pydiction.py -- (Optional) Python script used to generate the dictionary. You can optionally run this script to add more modules to complete.\n\n\nUsage\n=====\nType part of a Python keyword, module name, attribute or method in \"insert mode\" in Vim, then hit the Tab key and it will auto-complete.\n\nFor example, typing:\n\n        raw<Tab>\n\nwill bring up a menu of possibilities, such as:\n\n        raw_input(\n        raw_unicode_escape_decode(\n        raw_unicode_escape_encode(\n\nTyping:\n\n        os.p<Tab>\n\npops up:\n\n        os.pardir\n        os.path\n        os.pathconf(\n        os.pathconf_names\n        os.pathsep\n        os.pipe(\n        ...\n\nTyping:\n\n        co<Tab>\n\npops up:\n\n        continue\n        coerce(\n        compile(\n        ...\n\nTyping:\n\n        \"foo bar\".st<Tab>\n\npops up:\n\n        startswith(\n        strip(\n\nand so on.\n\nAs of Pydiction 1.2, there's support for completing modules that were imported via \"from module import submodule\". For example, you could do:\n\n        from xml.parsers import expat\n        expat.P<Tab>\n\nwhich expands to:\n\n        expat.ParserCreate(\n\nYou can also now Shift-Tab to Tab backwards through the popup menu.\n\nIf you feel you're getting different results in your completion menu, it's probably because you don't have Vim set to ignore case. You can remedy this with \":set noic\"\n        \n\nPydiction versus other forms of completion\n=================================\nPydiction can complete Python's keywords, built-in functions, and string literals, as well as standard, custom and third-party package and module names and their attributes and methods. It can also complete fully-qualified names such as \"module.submodule.method\", as well as non-fully qualified names such as simply \"method\".\n\nPydiction uses the Tab key to do completion, rather than inefficient Ctrl key combinations and the like.\n\nUnlike omni-completion, Pydiction works with more than just imported modules. For example you can complete Python built-in functions and keywords, such as \"print\", \"raw_input\", and so on.\n\nPydiction doesn't require Python support to be compiled into your version of Vim, nor do you need to have Python installed on the machine you use it from (unless you want to use pydiction.py)\n\nUsing a special dictionary file to complete from, Pydiction doesn't pollute any other menus that you you may be using for other types of completion, such as omni-completion or ins-completion.\n\nSince Pydiction uses a dictionary of possible completion items, it can complete 3rd-party modules much more accurately, and quickly, than other ways. And you have full control over what can and cannot complete. If it's unable to complete anything, you can either use pydiction.py--to automatically add a new module's contents to the dictionary-- or you can manually add them using a text editor. The dictionary is just a plain text file, which also makes it portable across all platforms.  For example, if you're a Django user, you can add all the django related modules to the dictionary by using pydiction.py.  The latest default complete-dict already contains most of the standard library, all Python 2.x keywords, Pygame, OpenGL, wxPython, Twisted, PyQT4, ZSI, LDAP, Numarray, PyGTK, MySQLdb, PyGreSQL, pyPgSQL, PythonCard, pyvorbis, Bcrypt, OpenID, GnuPGInterface, OpenSSl, Pygments and more.\n\nAlso because Pydiction uses a dictionary file, you don't have to import a module before you can complete it, nor do you even have to have the module installed on your machine. This makes completion faster than omni-completion since it doesn't need to do any type deducing.\n\nPydiction only attempts to complete while editing Python files.\n\nYou can still use omni-completion, and other forms of completion, with Pydiction. In fact, they can all make a great team.\n\nPydiction knows when you're completing a callable method or not and, if you are, it will automatically insert an opening parentheses.\n\nThe Tab key will work as normal for everything else. Pydiction will only try to use the Tab key to complete Python code if you're editing a Python file and you first type part of some Python module or keyword.\n\n\n\nScreenshots\n==========\nhttp://rkulla.com/images/screenshots/pydiction1.jpg\nhttp://rkulla.com/images/screenshots/pydiction2.jpg\n\n\npython_pydiction.vim (filetype plugin)\n============================\nPydiction will make it so the Tab key on your keyboard is able to complete python code.\n\nVersion 1.0 and greater of Pydiction uses a new file called python_pydiction.vim, which is an ftplugin that only activates when you're editing a python file (e.g., you're editing a file with a \".py\" extension or you've manually typed \":set filetype=python\").  Past versions of Pydiction didn't use a plugin and instead just required you to change the value of \"isk\" in your vimrc, which was not desirable. Version 1.0 and greater do not require you to manually change the value of isk. It now safely changes isk for you temporarily by only setting it while you're doing Tab-completion of Python code, and it automatically changes it back to its original value whenever Tab-completion isn't being activated.  Again, only Tab-completion causes Pydiction to activate; not even other forms of completion, such as <Ctrl-x> or <Ctrl-n> completion will activate Pydiction, so you're still free to use those other types of completion whenever you want to.\n\nPydiction works by using Vim's ins-completion functionality by temporarily remapping the Tab key to do the same thing as I_CTRL-X_CTRL_K (dictionary only completion). This means that whenever you're editing a Python file, and you start typing the name of a python keyword or module, you can press the Tab key to complete it. For example, if you type \"os.pa\" and then press Tab, Pydiction will pop up a completion menu in Vim that will look something like:\n\n        os.pardir\n        os.path\n        os.pathconf(\n        os.pathconf_names\n        os.path.\n        os.path.__all__\n        os.path.__builtins__\n        os.path.__doc__\n        ...\n\nPressing Tab again while the menu is open will scroll down the menu so you can choose whatever item you want to go with, using the popup-menu keys:\n\n        CTRL-Y        Accept the currently selected match and stop completion.\n        <Space>      Accept the currently selected match and insert a space.\n        CTRL-E       Close the menu and not accept any match.\n        ....\n\nhitting Enter will accept the currently selected match, stop completion, and insert a newline, which is usually not what you want. Use CTRL-Y or <Space>, instead. See \":help popupmenu-keys\" for more options.\n\nAs of Pydiction 1.2, you can press Shift-Tab to Tab backwards as well.\n\nPydiction temporarily sets completeopt to \"menu,menuone\", so that you can complete items that have one or more matches. It will set it back to whatever the original value you have completeopt set to when Tab-completion isn't being activated.\n\nBy default, Pydiction ignores case while doing Tab-completion. If you want it to do case-sensitive searches, then set noignorecase (:set noic).\n\n\npydiction.py\n=========\nNote: You can skip this section if you don't plan to add more modules to complete-dict yourself.  Check if complete-dict already has the modules you intend to use.\n\nThis is the Python script used to create the \"complete-dict\" Vim dictionary file. It works by analyzing a module's structure and modelling that structure as a static file. Bundled with Pydiction is a default complete-dict; created using Python on Linux, so there won't be any real win32 specific support in it. You're free to run pydiction.py to add or upgrade modules as you see fit. The dictionary will still work if you're using windows, but it won't complete win32 related modules unless you tell it to.      \n\nUsage: In a command prompt, run: \n\n        $ python pydiction.py <module> ... [-v]\n\n(You need to have python 2.x installed.)\n\nSay you wanted to add a module called \"mymodule\" to complete-dict, do the following:\n\n        $ python pydiction.py mymodule\n\nYou can input more than one module name on the command-line, just separate them by spaces:\n\n        $ python pydiction.py mymodule1 mymodule2 mymodule3\n\nThe -v option will just write the results to stdout (standard output) instead of the complete-dict file.\n\nIf the backfup file \"complete-dict.last\" doesn't exist in the current directory, pydiction.py will create it for you. You should always keep a backup of your last working dictionary in case anything goes wrong, as it can get tedious having to recreate the file from scratch.\n\nIf complete-dict.last already exists, pydiction.py will ask you if you want to overwrite your old backup with the new backup.\n\nIf you try to add a module that already exists in complete-dict, pydiction.py will tell you it already exists, so don't worry about adding duplicates. In fact, you can't add duplicates, every time you run pydiction.py it looks for, and removes, any duplicates in the file.\n\nWhen pydiction.py adds new modules to complete-dict, it does so in two phases. First, it adds the fully-qualified name of the module. For example:\n\n        module.attribute\n        module.method(\n\nthen it adds the non-fully qualified name:\n\n        attribute\n        method(\n\nthis allows you to complete your python code in the way that you imported it. E.g.:\n\n        import module\n\nor:\n\n        from module import method\n\nSay you want to complete \"pygame.display.set_mode\". If you imported Pygame using \"import pygame\", then you can Tab-complete using:\n\n        pygame.di<Tab>\n\nto expand to \"pygame.display.\". Then type:\n\n        se<Tab> \n\nto expand to \"pygame.display.set_mode(\"\n\nNow say you imported using \"from pygame import display\". To expand to \"display.set_mode(\" just type:\n\n        display.se<Tab>\n\nAnd if you imported using \"from pygame.display import set_mode\" just type:\n\n        se<Tab>\n\nKeep in mind that if you don't use fully-qualified module names then you might get a lot of possible menu options popping up, so you may want to use more than just two letters before you hit Tab, to try to narrow down the list.\n\nAs of Pydictoin 1.1, there is also support for string literal method completion. For example:\n\n        \"\".jo<Tab>\" \n\nwill expand to:\n\n        \"\".join(\n\nmake sure you type at least two letters of the method name if this doesn't seem to work.\n\nThis only works for quoted strings, ie: \n\n        'foo bar'.st<Tab>\n    \nto get \n\n        'foo bar'.startswith(\n\nto be able to do:\n\n        s = 'foo bar'\n        s.st<Tab>\n\nyou can use Vim 7's omni-completion:\n\n        s.st<Ctrl-x><Ctrl-o>\n\nwhich will also give you a preview window describing the methods as well as the argument list the methods take, e,g:\n\n        startswith(prefix[, start[, end]])\n        strip([chars])\n\nTo Tab-complete your own personal modules, you put your functions in a separate file to be reused, as you normally would. For example, say you put the following function in a file called \"myFoo.py\":\n\n        def myBar():\n            print \"hi\"\n\nyou would then need to add myFoo to complete-dict by doing:\n\n        ./pydiction.py myFoo\n\nnow you can complete myFoo.myBar() by doing:  \n\n        myFoo.my<Tab>\n\nAs of Pydiction 1.2, there's support for completing modules that were imported via \"from module import submodule\". For example, you could do:\n\n        from xml.parsers import expat\n        expat.P<Tab>\n\nwhich expands to:\n\n        expat.ParserCreate( \n\nKeep in mind that you don't have to restart Vim after you update complete-dict.\n\n\ncomplete-dict\n===========\nThis is the Vim dictionary file that python_pydiction.vim reads from and pydiction.py writes to. Without this file, Pydiction wouldn't know which Python keywords and modules it can Tab-complete.\n\ncomplete-dict is only an optional file in the sense that you can create your own complete-dict if you don't want to use the default one that is bundled with Pydiction.  The default complete-dict gives you a major head start, as far as what you can Tab-complete, because I did my best to put all of the Python keywords, standard library and even some popular third party modules in it for you. \n\nThe default complete-dict currently contains:\n\n        Python keywords:\n\n                and, del, for, is, raise, assert, elif, from, lambda, return, break, else, global, not, try, class, except, if, or, while, continue, exec, import, pass, yield, def, finally, in, print    \n\n        Most of the standard library and built-ins:  \n        \n                __builtin__, __future__, os, sys, time, re, sets, string, math, Tkinter, hashlib, urllib, pydoc, etc... \n\n        It also contains some popular third-party libraries: \n\n                Pygame, wxPython, Twisted, ZSI, LDAP, OpenGL, PyGTK, PyQT4, MySQLdb, PyGreSQL, pyPgSQL, SQLite, PythonCard, Numarray, pyvorbis, Bcrypt, OpenID, GnuPGInterface, OpenSSL and Pygments.\n\nMake sure you download the latest version of Pydiction to get the most up-to-date version of complete-dict. New modules are usually added to it every release.\n\nIf you open complete-dict in your text editor you'll see sections in it for each module, such as:\n \n        --- import os ---\n        os.EX_CANTCREAT\n        os.EX_CONFIG\n        os.EX_DATAERR\n        ...\n\n        --- from os import * ---\n        EX_CANTCREAT\n        EX_CONFIG\n        EX_DATAERR\n        ...\n\nIf certain attributes seem to be missing, it's probably because pydiction.py removed them because they were duplicates. This mainly happens with the non-fully qualified module sections. So first try searching the entire file for whatever string you assume is missing before you try adding it. For example, if you don't see:\n\n        __doc__\n\nunder:\n\n        --- import sys ---\n\nit's probably because a previous module, such as \"os\", already has it.\n    \nIf you try to recreate complete-dict from scratch, you'll need to manually add the Python keywords back to it, as those aren't generated with pydiction.py.\n\nIf you don't want certain things to Tab-complete, such as Python keywords or certain modules, simply delete them by hand from complete-dict.\n\nPydiction doesn't ignore \"private\" attributes or methods. I.e., those starting (but not ending) with one or two underscores, e.g., \"_foo\" or \"__foo\".  I have manually deleted things starting with a single underscore from the included complete-dict just to keep it a little more sane--since there were so many.  In sticking with the Python tradition of not forcing things to be private, I have left it up to the user to decide how they want to treat their own things.  If you want to delete them from your custom complete-dict's, you can use a regex to try to delete them, such as doing:\n\n        :g/\\._[a-zA-Z]/d\n        :g/^_[a-zA-Z]/d\n        :g/^\\%(_\\=[^_]\\)*\\zs__\\%(.\\{-}__\\)\\@!/d\n        etc...\n\n\nOptions\n======\nYou can optionally set the height of the completion menu by setting \"g:pydiction_menu_height\" in your vimrc. For example:\n    \n        let g:pydiction_menu_height = 20\n\nThe default menu height is 15.\n\n\nTips\n====\nSay you create a custom object, called \"S\" by doing something like:\n    \n        S = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nyou can complete dynamic object methods, such as \"S.send()\", by using Vim 7's omni-completion ftplugin (a.k.a \"pythoncomplete.vim\") by doing:\n\n        S.s<Ctrl-x><Ctrl-o>\n\nYou may get unexpected results if you use autocomplpop.vim, supertab.vim or other completion or python plugins. Try disabling them individually to find out the culprit and please don't hesitate to e-mail me any workarounds or suggestions. Thanks.\n\n\nFurther reading\n============\n:help ftplugin\n:help 'complete\n:help compl-dictionary\n:help popupmenu-completion\n:help popupmenu-keys\n:help iskeyword\n\n"}, {:name=>"Posting-B", :summary=>"Mappings primarily intended to ease preparing of USENET/eMail articles", :description=>"\"Posting\" provides a few mappings I once messed around with in order to ease preparing USENET/email articles with GVim. (Due to a malfunction at vim.org I had to register again. Earlier versions can be found at http://www.vim.org/scripts/script.php?script_id=487.)"}, {:name=>"Gothic", :summary=>"Dark background and eye-resting colors", :description=>"Ideal color scheme for TFT users and long-hour users with dark background and eye-resting colors.\n\nSnapshot available at http://www.junglebit.net/vim/vimgothic.png"}, {:name=>"File-local-variables", :summary=>"Set/let per-file-variables à la Emacs", :description=>"This plugin tries to mimic Emacs's file local variables feature. File local \nvariables are kept in a section in the last g:localVariablesRange \n(default=30) lines of a file (this variable also defines the maximum number \nof file local variables). E.g., in this example >\n\n    Local Variables:\n    foo:1\n    bar:\"bla\"\n    End:\n\nthe variable b:foo will be set to \"1\" (which, in vim, equals 1), b:bar \nto \"bla\" after opening the file.\n\nThe beginning of the section is marked with g:localVariablesBegText \n(default=\"Local Variables:\"), the end with g:localVariablesEndText \n(default=\"End:\"). These markers can be surrounded by arbitrary prefix and \nsuffix markers. These (optional) prefixes and suffixes must be consistent for \nthe whole section. The prefix and suffix are defined by the end-marker. \nExample: >\n\n    ### Local Variables: ###\n    ### foo:1 ###\n    ### bar:\"bla\" ###\n    ### End: ###\n<\n                                                    *g:localVariablesDownCaseHyphenedNames*\n                                                    *localvariables-hyphens*\nIf a variable name contains a hyphen (\"-\"), the variable name will be \ntranslated into a buffer local variable in camel case, i.e. \"comment-start\" \nbecomes \"b:commentStart\". A hyphendized variable's scope is always \"b\". If \ng:localVariablesDownCaseHyphenedNames (default=1) is true, then the variable \nname will be downcased first for compatibility reasons -- as (emacs) lisp is \ncase insensitive. I.e., \"COMMENT-START\" becomes \"b:commentStart\", too.\n\n\n                                                    *localvariables-values*\nA small note on value handling: For security reasons, all normal values \n(i.e., anything but |localvariables-special|) are put in quotes unless \nthe value already matches \"^\\\\([\\\"']\\\\)[^\\\"]*\\\\1$\".\n\n\n                                                    *localvariables-transpose*\nIn order to be \"compatible\" with, e.g, Emacs's file local variables, it might be \nnecessary to translate some variable names.\n\nYou can use also variables with the prefix \"g:localVariableX\" for \ntranslating variable names without scope definitions. Example: >\n\n    let g:localVariableXtabWidth = \"&tabstop\"\n    ---\n    ### Local Variables: ###\n    ### tab-width:4 ###\n    ### End: ###\n\nThis would set the buffer-local option |tabstop| to 4. (Which could of course \nbe achieved with a vim line, too.)\n\nAs an alternative, you can also define a function with the prefix \n\"LocalVariableX\" which will be called with the value as single argument.  \nThis provides a controlled way for executing commands when loading/editing \na file. By defining a function \"LocalVariableXmode\", this can be used to \nreuse Emacs's mode annotations for files that don't match the usual file \npatterns. Example: >\n\n    fun! LocalVariableXfoo(arg)\n        if a:arg == \"0\"\n            GoFoo\n        elseif a:arg == \"1\"\n            GoBar\n        endif\n    endfun\n    ---\n    ### Local Variables: ###\n    ### foo:0 ###\n    ### End: ###\n\nThis example would execute GoFoo or GoBar depending on the value of the file \nlocal variable foo.\n\n\n                                                    *localvariables-definition*\nA variable definition has the form (as regexp): >\n\n\t((scope char:)?(variable|special name)|hyphened name):value\n\nIf no scope character is given, the variable is buffer local (\"b\"-scope).\n\nIf the scope character is \"&\", |setlocal| will be used to set the variable.\n\n                                                      *localvariables-special*\nIf the scope is \":\", the variable name is interpreted as a special name:\n\n                                                      *localvariables-execute*\n- execute: The value of s:localVariablesAllowExec can't be changed by this \n  script. (The first 4 letters of \"execute\" are essential.)\n\n                                                      *localvariables-events*\n                                                      *LocalVariablesRegisterHook*\n- On{event}: The value is registered for execution when the denoted \n  autocommand event occurs. You have to register LocalVariables for use with \n  this event by using the command >\n\n  \t:LocalVariablesRegisterHook EVENT\n<\n  Use this feature, e.g., for recompiling some files after saving.\n\n                                                      *s:localVariablesAllowExec*\nThe value of s:localVariablesAllowExec (default=1) defines if the execution \nof special variables is allowed. Values: >\n\n\t0 ... disable\n\t1 ... query user, default = no\n\t2 ... query user, default = yes\n\t3 ... allow\n\nNOTE: You most likely have to edit the plugin to change this variable.\n\nNOTE: A change from 0 to [1-3] takes effect only after reloading the plugin!\n\nNOTE: |input()| appears to make problems when opening a file - vim (6.2) \nappears to hang. When a gui is running, use |inputdialog()| for querying \nthe user. I don't know if |input()| works on a terminal.\n\n                                                      *localvariables-security-risks*\nCAVEAT: Be aware that \"special values\" are evaluated with |execute|.  \nThis potentially pushes vim ahead in the era of computer viruses/worms. \nTake care.\n\nExample:\nExecute >\n\n\tLocalVariablesRegisterHook! BufWritePre\n\t\nand put something like this at the end of a file: >\n\n\t### Local Variables: ###\n\t### b:variable1:1 ###\n\t### g:variable2:\"2\" ###\n\t### variable3:\"three\" ###\n\t### tab-width:4 ###\n\t### ::exec:echo \"Got it!\" ###\n\t### ::OnBufWritePre:call inputdialog(\"You shouldn't have written this text\") ###\n\t### End: ###\n"}, {:name=>"less.vim", :summary=>"Less is More - A minimal color scheme", :description=>"Less is More: A minimal color scheme.\n\nSet on a Black background w/ LightGray as normal text. Similar to a typical unix console.  Designed to work equally well on 8 or 16 colors, terminal or gui. \n\nBased on Jeff Solomon's highlights @ http://www-vlsi.stanford.edu/~jsolomon/vim/\nCheck out his syntax files. Nice improvements for C, Perl, Tcl, and others."}, {:name=>"FX-HLSL", :summary=>"Syntax Rules for Microsoft HLSL and FX files", :description=>"These rules provide syntax hilighting and a set of useful \"iabbrev\" macros for use when writing HLSL (High Level Shading Language) code for DirectX 9 and above. File types includ e.hlsl and .fx -- the abbreviations are provided to reate template declarations for various tweakable data types in FX, including floats, float vectors, matrices, textures and samplers, render passes, etc. They are found defined at the end of the file.\n\nFinally, the shiftwidth is set to 4 to match common shading-language editing tools such as the defaults for Visual Studio.NET and NVIDIA FX Composer."}, {:name=>"NSIS-2.0--Syntax", :summary=>"Syntax highlighting for NSIS 2.0 and above", :description=>"Syntax highlighting for NSIS 2.0 and above, which added many new instructions and attributes since the 1.x tree, not supported by the previous scripts."}, {:name=>"table_format.vim", :summary=>"Formatting utility to arrange text into neat columns", :description=>"The plugin script table_format.vim is a text formatting tool.  It\narranges words or groups of words on consecutive lines into a neatly\nformatted table.\n\nThere are two keyboard shortcuts defined: \\t and \\T.  Each work\nslightly differently.\n\n- \\t (lowercase 't') is referred to as a mode 0 table command.  This\n  means that words separated by a single space are arranged into\n  columns padded with one or more spaces.\n\n- \\T (uppercase 'T') is referred to as a mode 1 table command.  Here\n  fields consist of groups of words separated by one space.  The field\n  boundaries are sequences of two or more spaces.  After formatting\n  into a table, the padding between fields (groups of words) is three\n  of more spaces.\n\n- The \\t and \\T (specifically <Leader>t and <Leader>T) mappings exist\n  for normal and visual mode.  In normal mode the range to be made\n  into a table is from the current line (cursor position) until the\n  next paragraph break (ie blank line).\n\n- For visual mode table formatting works for both linewise visual and\n  blockwise visual modes.  First highlight the text in visual mode\n  with 'V' then movement (linewise visual) or '<c-v>' or '<c-q> then\n  movement (blockwise visual) and then type <Leader>t or <Leader>T (ie\n  \\t or \\T)\n\n- The \\t and \\T mappings utilize the vim mapleader variable.  For\n  example, if mapleader=',', then the mappings in table_format.vim are\n  ,t and ,T\n\n- The one-space/one-padding for mode 0 and two-space/three-padding for\n  mode 1 are defaults and can be overridden.\n\n- The internal table formatting functions can be called directly:\n\n    :[range]call Table(space_split, space_padding, max_field_length,\n        col_start, col_end)\n\n  All of the parameters are optional.\n\n    space_split\n        - The number of consecutive spaces that indicate a column\n          boundary\n        - default: 1\n\n    space_padding\n        - The minimum number of spaces that are placed in between\n          fields after formatting to make a column boundary.\n        - default: 1\n\n    max_field_length\n        - The maximum length of a field (word or group of words).  A\n          value of 0 (the default) means that a field can be any\n          length\n        - default: 0\n\n    col_start\n        - The beginning column position for formatting.  A value of 0\n          (the default) means to start at the beginning of the line.\n        - default: 0\n\n    col_end\n        - The end column position for formatting.  A value of 0 (the\n          default) means to format through the end of the line.\n        - default: 0\n\n    There is an alternate version of the above function where the\n    range can be passed in directly:\n\n    :call TableRange(firstline, lastline, space_split, space_padding,\n        max_field_length, col_start, col_end)\n"}, {:name=>"LocateOpen", :summary=>"Open files without having to supply a path", :description=>"This script uses slocate (or a similar application) to allow the user to open a file without having to enter a path. If multiple files are found the user is given the choice of which file to open.\n\nUsage:\n\n:LocateEdit somefile.txt\n:LocateSplit somefile.txt\n:LocateSource somefile.vim\n:LocateRead somefile.txt\n\nOptions:\n\nTo enable case insensitive mode:\n:let g:locateopen_ignorecase = 1\n\nTo disable smart case mode:\n:let g:locateopen_smartcase = 0\n\nTo enable always prompt mode:\n:let g:locateopen_alwaysprompt = 1\n\nRequirements:\n\nYou need 'slocate' or a similar application. This probably means that you need to be on Linux, or possibly another Unix-like OS. Most Linux distributions seem to ship with slocate by default, so this probably isn't a problem. This script will almost certainly not work on Windows, sorry.\n\nAn up-to-date locate database helps, too. If you find that this script gives out of date information (eg doesn't list some files or still shows old files), you may want to consider putting updatedb on a cron...\n\nFinally, I've not tested on Vim below 6.2.\n\nPossible Todo List:\n\n* Help document\n* Less inefficient 'array' handling"}, {:name=>"Destructive-Paste", :summary=>"Pastes the register, replacing text", :description=>"[register]<Leader>Dp  - destructively pastes the register after the cursor, includes destructive paste of vertical blocks.\n\n[register]<Leader>DP - destructively pastes before the cursor."}, {:name=>"inform.vim", :summary=>"Indenting for Inform", :description=>"Just your basic indent script. Works fairly well in most circumstances, though the odd issue still exists with multi-line conditions, and object definitions may not come out as you like them to.\n\nIncludes a rudimentary ftplugin script."}, {:name=>"VikiDeplate", :summary=>"A personal wiki for Vim", :description=>"VIKI Forum (questions, feature requests): http://sourceforge.net/projects/deplate/forums/forum/700962\nBug tracker: http://sourceforge.net/tracker/?group_id=108085&atid=649488\n\nQUICKSTART\nThis plugin adds wiki-like hypertext capabilities to Vim. You can use viki as a \"minor\" mode (i.e., as an add-on to any other mode) or as a full-fledged wiki mode. There is also an add-on plugin for \"wikifying\" latex documents by turning some latex commands into wiki names. If viki is properly configured, activating a reference to an image, a webpage etc. will view that resource in an external viewer.\n\nFrom http://sourceforge.net/projects/deplate/ you can download a ruby based tool to convert viki markup to html, latex, or docbook. On its homepage (http://deplate.sf.net) you can read a more detailled specification of the markup.\n\n\nMINOR WIKI MODE:\nUse the hypertext facility with any filetype. Just type :VikiMinorMode and all wiki names and URLs will be highlighted.\n\n\nFULL WIKI MODE:\nIn full mode, viki becomes a personal wiki (http://c2.com/cgi/wiki?PersonalWiki) -- some sort of lo-fi database of notes and all sorts of information. Set 'filetype' to viki. The full wiki mode is like the minor mode but with folding support, syntax highlighting (for headings, lists, tables, textstyles etc.), and additional key bindings (i.e., you can press <c-tab> or <s-c-tab> to move the cursor to the next/previous viki name). You can bind viki mode to some file extension by adding a line like the following to some configuration file (see :help ftdetect or so):\n\n    au BufRead,BufNewFile *.viki set ft=viki\n\n\nWIKIS:\nIn case you missed out on wikis, a wiki is a simple way of creating hypertexts. In its very basic form creating a hyperlink is as easy as writing a word in CamelCase or by enclosing a word in brackets--as in [[destination]] or [-destination-]. URLs are automatically recognized as hyperlinks. You usually begin with creating a directory where your wiki files should go to and by creating a wiki index--a master file that contains references to sub-pages. After a while you end up with many small, tightly interlinked files/notes. There is also some basic support for basic markup like emphasized text, headings and the like. In the case of Viki/deplate, this markup would compare to, e.g., LaTeX markup as follows:\n\n    LaTeX: \\section{Title}\n    Viki:  * Title\n\n    LaTeX: \\emph{text}\n    Viki:  __text__\n\n\nRELATED PLUGIN:\n    vikitasks (vimscript #2894) :: Search viki files for tasks and display them in a list \n\n\nAlso available via git\nhttp://github.com/tomtom/viki_vim"}, {:name=>"cscope-quickfix", :summary=>"enables to use cscope with quickfix.", :description=>"Overview\n-------------\nThis script enables to use cscope with quickfix.\n\nPreparation\n-----------------\nYou must prepare cscope and cscope database (cscope.out file).\ncscope is a tag tool like ctags, but unlike ctags, it is a cross referencing tool.\nIf you don't know about cscope see:\n:help cscope\nhttp://cscope.sourceforge.net/\nhttp://iamphet.nm.ru/cscope/ (Win32)\n\nFeature 1\n--------------\nThis script adds a command \":Cscope\", which is very similar to \":cscope find\" command. But, this \":Cscope\" command can be used with quickfix, and isn't needed cscope connection. So, you don't have to install vim with --enable-cscope.\n\nFeature 2\n--------------\nThis script adds keymap macro as follows:\n<C-\\> s: Find this C symbol\n<C-\\> g: Find this definition\n<C-\\> d: Find functions called by this function\n<C-\\> c: Find functions calling this function\n<C-\\> t: Find this text string\n<C-\\> e: Find this egrep pattern\n<C-\\> f: Find this file\n<C-\\> i: Find files #including this file\n\"this\" means <cword> or <cfile> on the cursor.\n\nFeature 3\n--------------\nThis script adds Tools and Popup menu as follows:\n\"Symbols\": Find this C symbol\n\"Defines\": Find this definition\n\"Calls\": Find functions called by this function\n\"Globals\": Find functions calling this function\n\"Texts\": Find this text string\n\"Egrep\": Find this egrep pattern\n\"File\": Find this file\n\"Includes\": Find files #including this file\n\"Update cscope.out\"\n\nFunction\n--------------\nRunCscope({type}, {pattern} [,{file}])\n\nCommand\n---------------\nCscope {type} {pattern} [{file}]\n\nVariables\n--------------\n0: disable, 1: enable\ng:Cscope_OpenQuickfixWindow (default: 1)\ng:Cscope_JumpError (default: 1)\ng:Cscope_Keymap (default: 1)\ng:Cscope_PopupMenu (default: 0)\ng:Cscope_ToolMenu (default: 1)"}, {:name=>"BlackBeauty", :summary=>"A beautiful (if you like dark background) color scheme with dark background", :description=>"This is the color scheme i generally use. Being dark background, its easy to eyes. Just put this in $HOME/.vim/colors directory in UNIX. I never use windows, hence i dont know where to put this in windows. But it should be at the appropriate location where you put all the color schemes."}, {:name=>"visual_studio.vim", :summary=>"Vim and Microsoft Visual Studio .NET integration", :description=>"\nNEW IN VERSION 1.2\n\n* Switch between multiple instance of Visual Studio\n* Build projects and access project file heirarchy directly from Vim\n* Support for Visual Studio 2003, 2005 and 2008\n\nThanks to Henrik Öhman for contributions to this version.\n\nSee the visual_studio.vim help page for more information:\n  http://www.plan10.com/vim/visual-studio/doc/1.2\n"}, {:name=>"unmswin.vim", :summary=>"Undo the action of mswin.vim", :description=>"This undoes the actions of the mswin.vim described under :help :behave. It restores the changed options (except guioptions) to their default (which was not necessarily what they were set to before invoking mswin, but that can't be helped) and undoes the mappings (except Ctrl-Q and Alt-Space, which are not deemed harmful)."}, {:name=>"Israelli-hebrew-shifted", :summary=>"An alternative Hebrew keyboard map, for ISO-8859-8 usage.", :description=>"A Hebrew alphabet keyboard map, according to the standart Israelli keyboard layout, on a US-ASCII keyboard, to ISO-8859-8 hebrew chars.Instade of using punctuation keys for ending(finial) letters, we use shifted keys, rendering three obvious advatages.\nAlso, the usage of 'reversed-insert' mode is configurable."}, {:name=>"phoneticvisual-hebrew-keyboard-mapphone", :summary=>"phonetic/visual alternative hebrew keyboard map, ISO-8859-8 chars", :description=>"A phonetic/visual Hebrew alphabet keyboard map, for entering to ISO-8859-8 hebrew chars.\nDifferent than the 'internal' map.\n\nThe usage of 'reversed-insert' mode is configurable."}, {:name=>"Redundant-phoneticvisual-Hebrew-keyboar", :summary=>"Phonetic/visual keyboard map for hebrew ISO-8859-8 chars", :description=>"Phonetic/visual hebrew keyboard map, redundancy in that for example all 'o' 'u' and 'v' are mapped to hebrew 'vaf', and so on."}, {:name=>"changesqlcase.vim", :summary=>"Upper case sql keywords from a visual mode selection.", :description=>"Description:\nThis plugin is a function that wraps around a big substitution expression.\nThe goal is to be able up upper case sql keywords from a visual selection.\nIt is quite similar to this script:\n\nhttp://www.vim.org/scripts/script.php?script_id=305\n\nwhich uses insert mode abbreviations to capitalize as you type.  My script\nwill be useful if you need to clean up existing scripts or if you are\nprogramming in another language and want to format sql inside of a string\nvariable.  \n\nThe sql keyword list is taken from the postgresql 7.4 docs:\n\nhttp://www.postgresql.org/docs/current/static/sql-keywords-appendix.html#KEYWORDS-TABLE\n\nPlease send a patch to include keywords specific to the database you are\nworking with.\n\nInstallation:\n\nPlace this script in your ~/.vim/plugin/ directory or source from your vimrc\nfile. To use the script create a visual map:\n\nvmap <leader>uc  :call ChangeSqlCase()<cr>\n\nCustomization:\n1. Add the confirmation flag to the substitution if you are mostly doing\nsingle lines.  If you turn on confirmation on a multi-line visual selection\nyou will need to cancel out of the confirmation for each line.\n2. delete any keywords that cause you grief.\n3. add any keywords that are missing for your database\n\nTodo:\n1. This script could be modified to accept a database variable that altered\nthe keyword list.\n2. lowercase as well as uppercase\n\nBugs:\n\nAs noted in the vim manual |10.3|:\n\n   When using Visual mode to select part of a line, or using CTRL-V to\n  select a block of text, the colon commands will still apply to whole\n  lines.  This might change in a future version of Vim.\n\nSo if you select just the string in side of the quotes in the following\nexample:\n\ntest=\"select * from example\" { dont update me }\n\nthe word 'update' after the end quote will also change case.  \n"}, {:name=>"changeColorScheme.vim", :summary=>"change color schemes", :description=>" Got ideas from following tips and scripts \n vimtip #341, vimtip #358, vimscript #668, vimscript #109 \n\n Usage:\n When this script is loaded, it will populate an array with each of color \n scheme's file path.  You can then load different color schemes using \n NextColorScheme(), PreviousColorScheme() or RandomColorScheme(). \n\n Or if you don't like current color scheme you can call\n RemoveCurrentColorScheme() to remove the file.\n\n There are 4 main functions \n   1. You can either call them directly\n      :call NextColorScheme()\n      :call PreviousColorScheme() \n      :call RandomColorScheme()\n      :call RemoveCurrentColorScheme()\n\n   2. You can map and save them in your [._]gvimrc.\n      map <F4>   :call NextColorScheme()<CR>\n      map <S-F4> :call PreviousColorScheme()<CR>\n      map <C-F4> :call RandomColorScheme()<CR>\n      map <F3>   :call RemoveCurrentColorScheme()<CR>\n\n   3. You can also start each vim session with random color scheme by \n      adding following line in your [._]gvimrc\n      call RandomColorScheme()\n\n Tip: \n You can change your rulerformat in your [._]vimrc to display the name of \n current color scheme on status line.\n\n First, add this line to display status information \n     set ruler \n\n And add %{g:colors_name} in rulerformat to display name of current color \n  scheme. For example,\n     set rulerformat=%55(:%{g:colors_name}:\\ %5l,%-6(%c%V%)\\ %P%) \n\n However, you will see an error message if you didn't load color scheme at\n startup. So you might want to add %{GetColorSyntaxName()} instead.\n     set rulerformat=%55(:%{GetColorSyntaxName()}:\\ %5l,%-6(%c%V%)\\ %P%) \n\n GetColorSyntaxName() function is included in this script. It returns\n the value of g:colors_name if it exists, otherwise an empty string. If you\n are using a console version, then you might have to copy\n GetColorSyntaxName() into .vimrc, because I think the plugin files get\n loaded after evaluating .vimrc.\n"}, {:name=>"allout.vim", :summary=>"Tools for handling Allout (outline) files", :description=>"Allout files are a handy synoptic (or tree-like) representation of a document.  Such files were originally introduced as a GNU Emacs mode.  Vim offers tools and help for browsing or editing these Allout files.\n\nOnce installed, syntax colouring of Allout files should work in standard Vim.  Allout specific commands and mappings require a Python-enabled Vim.\n"}, {:name=>"Syntax-context-abbreviations", :summary=>"Abbreviations that only happen outside comments", :description=>"Abbreviations in language files can sometimes be annoying if they are not intended for inside comments (capitalisation is a good example). Support for <buffer> is included.\n\nThis script allows you to create abbreviations that do not happen inside comments.\nSynabbrev[!] [<buffer>] {lhs} {RHS}\n\neg \nSynabbrev to To\n\n\n\n\n"}, {:name=>"srec.vim", :summary=>"SREC syntax", :description=>"Colorizes SREC (Motorola S-Record) files."}, {:name=>"emacsmode", :summary=>"Parse Emacs -*- Mode lines and set equivalent Vim options", :description=>"This is a script to read the Emacs -*- Mode -*- lines that can be found at the\ntop of many source code files.  I don't use Emacs, but a lot of source files have the lines.\n\nI tested this out by using it on the Mozilla code base, so the cases that are\nhandled are what appear there.  If there are other options that you find in\nother Emacs mode lines, send me an email so that I can get them added.\n"}, {:name=>"bufman.vim", :summary=>"Quickly switch between buffers without knowing their numbers.", :description=>"Easily switch between buffers without knowing their numbers. \n\nThe SHIFT+F1...SHIFT+F12 keys are mapped to switch to the Nth listed buffer (not buffer #N). Quite handy.\n\nThere are also other mappings to switch to the next and previous buffer and to close the current buffer.\n\nNo windows that consume precious screen-space will be created."}, {:name=>"automation.vim", :summary=>"Light Grey Color Scheme", :description=>"This color scheme was created to give the look of a modern IDE.  It has a very light grey background , grey gutter and blue comments with grey background.  "}, {:name=>"GVColors", :summary=>"Uses gvim to display X-windows colors (keywords: colorlist rgb.txt)", :description=>"<gvcolors.vim> displays a list of colors available under X-windows in their own\ncolor.  It is based on vimtip#634 contributed by mohsin at\nhttp://www.cs.albany.edu/~mosh.\n\nThe script intercepts several motions and sets up syntax highlighting to\ndisplay the named colors.\n\nExample:\n\n  gvim gvcolors.vim\n  :GVColors\n\nMotions:\n\t   j      move display down one line\n\t   k      move display up   one line\n\t ctrl-d   move display down &scroll lines (see :he 'scroll')\n\t ctrl-u   move display up   &scroll lines (see :he 'scroll')\n\t ctrl-f   move display down one page\n\t ctrl-b   move display up   one page\n\t pageup   same as ctrl-b\n\t pagedown same as ctrl-f\n\nSpecial care to show just a single page of colors is taken because\nVim is limited to displaying approximately 224 colors with syntax\nhighlighting.\n\nHistory/Features:\n\nv3: Supports use of the mouse and slider bars.\n\nv2: Looks up colors in /usr/X11R6/lib/X11/rgb.txt,\nwhich may be overridden by let g:rgbtxtfile=\"path\";\nnow shows red:green:blue assignments as well as\nthe colored text! \n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#GVCOLORS)\n"}, {:name=>"Posting-C", :summary=>"Mappings primarily intended to ease preparing of USENET/eMail articles", :description=>"\"Posting\" provides a few mappings I once messed around with in order to ease preparing USENET/email articles with GVim. (Due to a malfunction at vim.org I had to register again. Version 1.3 can be found at http://www.vim.org/scripts/script.php?script_id=851.) \n"}, {:name=>"RegExpRef", :summary=>"short reference of regular expression metacharacters", :description=>"This text-file is an overview of the most used regular expression metacharacters of Vim and GNU's grep tool."}, {:name=>"passwd", :summary=>"syntax of the /etc/passwd file", :description=>"This is highlighting syntax for the /etc/passwd file."}, {:name=>"buttercream.vim", :summary=>"Smooth and colorful yellowish theme", :description=>"A script which sports a pale yellow background and while it has lots of colors it is still very smooth and usable for long sessions. Screenshot available: http://hakan.prinsig.se/files/images/gvim-buttercream.png"}, {:name=>"fluxkeys.vim", :summary=>"syntaxhighlighting for key-files of fluxbox", :description=>"this syntax-file enables some basic syntaxhighlighting for keyfiles used by the fluxbox-windowmanager (http://www.fluxbox.org)"}, {:name=>"ods.vim", :summary=>"syntax highlighting for ODS Toolbox rule language", :description=>" basic syntax highlighting for ODS Toolbox rule language"}, {:name=>"AutoAlign", :summary=>"Automatically align as you type (autoalign): bib c c++ html maple matlab tex vim", :description=>"[AutoAlign V12 AND LATER REQUIRES VIMBALL V18 OR LATER TO UNPACK]\n                               [AutoAlign also requires vimscript#294]\n\n Note:  this plugin is not a right-margin justification tool; see vimscript#177 for that\n\nAutoAlign is currently composed of one regular plugin and six ftplugins.  As you type statements such as (for vim)\n\n\tlet xyz= 1\n\tlet x= 2\n\nthe ftplugin/vim/AutoAlign script will call upon the Align command to line up those equal signs, resulting in aligned equal signs (which can't be usefully shown here due to browsers' use of proportional fonts).\n\nSimilarly the c ftplugin will do so for\n\n\tx= 3;\n\txy[0]= 4;\n\tabc->def= 5;\n\n\tone= 2;\n\n(it only applies to what you're currently typing, it doesn't take any previously existing lines into account).  For c++,\n= signs, <<, and >> operators get aligned.  For maple, :=.  \n\nFormer Version Notes:\n   5: AutoAlign maps and functions changed to allow use of \".\" to repeat entry of =... expressions.  Uses g:mapleader instead of a built-in backslash to access AlignMaps.  First release of AutoAlign using vim's user-help. \n   4: Now supports: bib c cpp tex vim. AutoAlign now breaks the undo sequence at every align operation, so one undo undoes the entire AutoAlign.  Bugfix: (with virtual edit) has been fixed (when backspacing over ==).  Bugfix: unwanted beeping due to virtual edit being off fixed\n   3: Now supported: bib c tex vim.  :AA toggles AutoAlign on and off. AutoAlign now auto-aligns only blocks of alignable text.  cecutil.vim included (SaveMark, SaveWinPosn, etc)\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#AUTOALIGN)\n"}, {:name=>"FormatBlock", :summary=>"Format (i.e., gqq) a block of lines above/below the current line", :description=>"\" Format (i.e., gqq) a block of lines above/below the current line from the\n\" line matching <beg_pattern> to the line matching <end_pattern>; intervening\n\" lines of the block should match <in_pattern>, if given.\n\"\n\n\" EXAMPLE SETUP\n\" Format block (do a 'gq' format) on a C-style statement (i.e., from cursor's\n\" line to line ending with ';'):\n\"\n\"\tmap gqs :call FormatBlock('', ';$', '')<CR>\n\nPrimarily used as a \"helper\" function to FormatComment ( vimscript #886 )"}, {:name=>"FormatComment.vim", :summary=>"Format-block (do a 'gq' format) on the comment the cursor is in", :description=>"\" Format-block (do a 'gq' format) on the comment the cursor is in; the type of\n\" comment is determined by context (i.e., /*...*/, //..., #..., etc.).\n\"\n\" EXAMPLE SETUP\n\"\tmap gqc :call FormatComment()<CR>\n\nDEPENDENCIES:\n   FormatBlock.vim ( vimscript #885 )\n\nMy *actual* setup is:\n\n\" gqc - Format comment; comment-type is determined by context (i.e., /*...*/,\n\"       //..., #..., etc.).\n\"\n\" NOTE: This will probably not work properly in C source for vim versions prior\n\"       to 6 because some of the search-patterns used are more advanced than\n\"       were available prior to version 6.\nexe SILENT . 'map <unique> gqc :call FormatComment()<CR>'\n\nWhere SILENT is set to '' or 'silent! ', depending upon vim's version (does it have silent?)\n\nThere is some stuff in there to handle our organization's \"standard function header\" comments specially; that 'if' block should be easily located and removed, or modified to your tastes.  If left as-is, you probably wouldn't trigger it anyway (so I left it in there as an example/template).\n\nAlso, we use the convention that single-line 'C' comments should use the //-style, while multi-line comments should use the /*...*/-style; so that's built into the function.  i.e., If a long //-style comment gets formatted onto multiple lines, it will be converted to /*...*/-style; while a /*...*/-style comment that fits onto a single line will be converted to //-style.  If this is not to your liking, it should be easily remedied; there are function calls made to to the conversions, simply comment the call(s) out (or remove them).\n\nThis function allows quick entry/editing of comments without worrying about the line-break formatting.  Once finished, simply hit 'gqc' and the comment is reformatted."}, {:name=>"docbkhelper", :summary=>"some menus and mappings to ease editing DocBook XML", :description=>"As a plugin, docbkhelper adds a Plugin.Docbook.New Book menu item that creates a new DocBook buffer, with a basic skeleton. An ftplugin later adds other menu items and key mappings to add chapters, paras, sections, emphases, itemized lists... When invoked in visual modes, most of these mappings turn the selected text into a chapter, para, section...\n\nYou must install xmledit, http://www.vim.org/scripts/script.php?script_id=301 for docbkhelper mappings rely on xmledit's key mappings."}, {:name=>"armasm", :summary=>"Syntax highlighting for ARM assembler", :description=>"Syntax highlighting for ARM assembly language. It includes V2, V3, V4, V5, T, E, M, XS, and VFP extensions, but no V6 or T2 syntax. It is based on Aleksandar Veselinovic's PIC16F84 Assembler syntax file (pic.vim in the standard installation)."}, {:name=>"EvalSelection.vim", :summary=>"evaluate selected code (vim, bash, ruby, python, perl, (mz)scheme, tcl, R, SPSS)", :description=>"Evaluate source code selected in a visual region. The result can be displayed \nin an interaction log, appended to the text, replace the text, or saved in the \n@e register. This is useful for performing small text manipulation tasks or \ncalculations that aren't worth the trouble of creating a new file or switching \nto a different program, but which are too big for being handled in the command \nline.\n\nThe key bindings follow this scheme:\n\n    <Leader>e{LANGUAGE}{MODE} :: work on the visual region\n    <Leader>E{LANGUAGE}{MODE} :: work on the contents of the e-register\n    <Leader>x{MODE}           :: work on the visual region (derives LANGUAGE \n                                 from the buffer's 'filetype')\n\nLANGUAGE being one of:\n\n    v :: vim (comments at the end of line after vim code could cause problems)\n    r :: ruby (requires compiled-in ruby support)\n    s :: sh (using system())\n    e :: calculator, evaluate formula (using either ruby, python, perl, tcl, \n         or vim)\n\nI haven't actually tested the following three bindings because I use \nneither of them. Anyway, as I happen to use a Vim with +tcl, +python and \n+perl support compiled in, I added them to the standard bindings:\n\n    y :: python (requires compiled-in python support)\n    p :: perl (requires compiled-in perl support)\n    t :: tcl (requires compiled-in tcl support)\n    z :: mzscheme (requires compiled-in mzscheme support)\n\nIf ruby-support is compiled in, the following languages are available too \n(but see |EvalSelection-Interaction| below):\n    \n    c :: scheme\n        set g:evalSelectionSchemeInterpreter to \"Gauche\" or \"Chicken\"\n    l :: lisp\n        set g:evalSelectionLispInterpreter to \"CLisp\"\n    o :: ocaml\n        set g:evalSelectionOCamlInterpreter to \"OCaml\" or \"OCamlClean\"\n    R :: R\n        set g:evalSelectionRInterpreter \"R\", \"RClean\", or \"RDCOM\"\n    S :: SPSS\n        limited support (no return values), the (one-way) communication with \n        SPSS is done via OLE automation\n\nMODE being one of:\n\n    x :: just evaluate and put the result in the e-register\n    e :: the same as x\n    p :: echo/print the result on the command line\n    a :: append the result to visual region\n    r :: replace visual region with the result\n    l :: insert the result in a temporary interaction log\n\n\nCommands:\n\n    EvalSelectionCmdLine LANG :: Simulate a command line for LANG; due to the \n    primitive handling of input/output, no input commands (like read, get kind \n    of stuff) can be used; all output is redirected to the log. Exit with ^D + \n    Enter, i.e. enter the ^D character.\n\n    EvalSelectionSetup{LANG}  :: Set up interaction with external interpreter \n    (but see below)\n\n    EvalSelectionQuit INTERPRETER :: Quit interaction with an \n    external interpreter\n"}, {:name=>"edo_sea", :summary=>"A blueish color scheme with a dark background", :description=>"A low-contrast, blueish, color scheme with a dark background. Tweaked to maximize usability with syntax highlighting."}, {:name=>"pylint.vim", :summary=>"compiler plugin for python style checking tool", :description=>"Compiler plugin for PyLint ( http://www.logilab.org/projects/pylint/ ), a style checking tool for Python. "}, {:name=>"winpos.vim", :summary=>"save / restore window positions", :description=>"Save / restore GVIM window positions quickly through function keys.\n\nShift + F1/F2/F3/F4 to save window position, F1/F2/F3/F4 to restore.\nEdit script to set default positions."}, {:name=>"gtags.vim", :summary=>"Integrates GNU GLOBAL source code tag system with VIM.", :description=>" The gtags.vim plugin script integrates the GNU GLOBAL source code tag system\n with Vim. About the details, see http://www.gnu.org/software/global/.\n"}, {:name=>"Viewing-Procmail-Log", :summary=>"Seeing only the interesting parts of procmail log", :description=>"Here is a syntax file for viewing Procmail log.  The syntax works at least w/ vim 6.2.\n\nI have commented [out] my preferred colors; otherwise did my best to have reasonable colors wrt dark background.\n\nRefer to http://www103.pair.com/parv/comp/unix/cf/vim/procmail.vim for any updates.  Before you replace the syntax file from here, mind that the one exeternally available is not as generous regarding other syntax.  For one, the external one starts w/ \"syn clear\" unconditionally."}, {:name=>"Toggle", :summary=>"allows you to toggle bool (true/false) and other words with a shortcut", :description=>"In this version, the script can toggle:\n    true     <->     false\n    on       <->     off\n    yes      <->     no\n    define  <->     undef\n    +        <->     -\n    >        <->     <\n    &&    <->     ||\n    &     <->      |\n    positive and negative numbers\n\nMove the cursor on the word/char/number to be toggled and press\n      <C-T>  in insert mode \nor\n      +     in normal / visual mode.\n\nThis shortcut can be modified in the script file - of course...\n\nIf the cursor is positioned on a number, the script looks for a corresponding + or - sign for that number. \nIf it's found, it will be replaced by the other one. If none is found, a - sign is inserted before the number."}, {:name=>"perl_synwrite.vim", :summary=>"checks Perl syntax before allowing file write", :description=>"This plugin causes write attempts to fail if the contents of the buffer produce an error when run through \"perl -c\"\n\nThe plugin uses can use autocommands for the BufWriteCmd and FileWriteCmd events, but by default only provides a :Write command to check-then-write."}, {:name=>"ViewOutput", :summary=>"scroll back and search [long] output of vim command", :description=>"If you want to scroll backward (and forward) and search within long output of the vim command (such as :au, :let), execute command with prefix VO. \n\nVO (viewoutput) will place output of vim command in new buffer where you can search and view it using vim commands. Example:\n\n      :VO au\n      :VO let"}, {:name=>"CharTab", :summary=>"ascii table with some nice features", :description=>"This script provides a character table. Yes, yet another one :-). \n\nBut it has some nice features:                                      \n  - it takes advantage of syntax-highlighting\n  - it allows to toggle base of codes without leaving buffer\n  - it opens in currently active window, so no rearrangement of windows occur\n  - special codes are viewed with their real names (NUL, ETX,...)\n  - quitting is very simple and fast - just one keystroke\n"}, {:name=>"nesC", :summary=>"nesC syntax highlighting", :description=>"nesC keyword highlighting (based on the C++ syntax script)"}, {:name=>"Tower-of-Hanoi", :summary=>"Tower of Hanoi game for Vim", :description=>"Continuing the tradition of creating games for Vim, here is a Tower of Hanoi implementation. Best played in GUI version of Vim.\n\n- Comes with two modes, a demo mode and a play mode. \n- You can start the game by using the command :Hanoi optionally passing the number of disks as an argument. \n- If no argument is passed, you are prompted to enter a value. \n- The maximum number of disks is determined based on the size of your vim window.\n- You will be prompted to choose between demo or play mode.\n- In demo mode, the script plays for you, just sit and relax.\n- In play mode, you can use h, j, k, l keys to move the disks from pole to pole. The disk with dashes represents the current disk that you can move.\n- Keys h and k select the current pole, and thus the top most disk on the pole.\n- Keys k and j move the disk up and down.\n- In play mode, you can pause the game by pressing <Space>, and come back by using :Hanoi command again.\n- You can stop the game at any time by pressing <C-C> or <C-Break>\n\nGood exerciese to practice hjkl key movements, if you are new to Vi realm :)\n\n\n\nSearch_key_words: tower hanoi game games hari krishna dara"}, {:name=>"sharp-Plugin-Added", :summary=>"Intellisense for C#", :description=>"Here is the new intellisense plugin for C#. This enables the context sensitive completion and online help.\nDue to size restrictions, I could not post the package here. To download the visit http://sourceforge.net/projects/insenvim and download the insenvim1.2 package.\nThis is only for Windows."}, {:name=>"ratfor.vim", :summary=>"Vim syntax file for RATFOR", :description=>"RATFOR is a dialect of FORTRAN made by\nthe creators of C. RATFOR is a preprocessor that provides C like control flow to FORTRAN.\n  \nSo ratfor.vim implements this idea.\n "}, {:name=>"fvl.vim", :summary=>"Send Lisp code to an interpreter running in a Vim window", :description=>"Fred's Vim Lisp\n\nThis plugin allows you to run a Lisp interpreter in a Vim window and send Lisp expressions to it. You can send selected lines, a [count] number of lines, or a range of lines.\n\nfvl.vim defines a handful of commands:\n    LispOpen     opens the lisp window and starts the lisp interpreter\n    LispClose    close the lisp window and terminate lisp. This happens automatically when the lisp buffer is closed.\n    LispRefresh  try and read from lisp when your in a pinch.\n    LispDo       like perldo. Evaluate a lisp expression. You MUST escape quotes.\n    LispCount    evaluate [count] lines.\n    LispRange    evaluate a range of lines.\n\nIn practice, all you need to remember is LispDo and possibly LispRange.\nI've added the following mapping to my .vimrc file:\n\nmap <C-L> :LispRange\n\nThat map allows you to hit <C-L> to send a single line to the lisp interpreter, or select a few lines and send them all together.\n\n\nNOTE: There is already another script that does similar things to fvl.vim, vimscript #221 (VIlisp.vim). What's the difference? Mostly, fvl.vim requires only one file (the plugin file) to work and is a bit easier to setup (imho).\n"}, {:name=>"yiheb-il.vim", :summary=>"Yiddish/Hebrew keyboard map, Israeli layout + finials on shift, Unicode", :description=>"Yiddish/Hebrew keyboard map, finial letters on shifted keys, releasing punctu keys + 'oilwq', maps yiddish + nikud. Unicode."}, {:name=>"sql.vim--Kalosi", :summary=>"Oracle 9i update of the sql.vim syntax file", :description=>"Update of the sql.vim syntax file. It supports all the Oracle 9i keywords and builtin functions.\nFuture plans are to support the builtin packages"}, {:name=>"Editable-User-Interface-EUI-eui_vim", :summary=>"The use of a text editor as the user interface to applications.", :description=>"____________________________________________________________\nOverview\n\nThe plugin eui_vim concerns the use of a text editor as the user\ninterface to applications:  the \"Editable User Interface\".\n\nIt presents an alternative to incorporating applications into the\ntext editor as a tightly bound, monolithic product and to\nresisting any integration of the text-editor with other\napplications for non-text-editing functions.  \n\nThe conceptualization of the ''Editable User Interface'' helps\ndefine and delimit the role of the text editor in facilitating the\nuse of diverse applications.  In such a role, the text editor is\ndelimited to being an interface only, i.e., in regard to support\nof non-text-editing tasks, it is delimited to \n\n  * rendering user input,\n  * transferring user commands and data to the external application,\n  * responding to (text-editing) commands from the external application and\n  * rendering the external application's output to the user.  \n\n(In the above, rendering refers to display of text.)\n\nAs a specific example of the abstraction \"Editable User Interface\", \nthe code presented here, eui_vim.vim and eui_vim.pl illustrate how \none can use the Vim editor as an user interface to other applications.\n\n____________________________________________________________\nValue\n\nMost of the value of this plugin lies in the ideas expounded \nin eui_vim.txt or in http://www.sonic.net/~suresh/eui/ \n(and, perhaps, by way of the comments in the .vim and .pl code).\n\n____________________________________________________________\nTable of Contents of eui_vim.txt\n\nIntroduction\n  Graphical, Keyboard and Pseudo-keyboard User Interfaces\n  Editable User Interface\n    The Text Editor\n    The PC as a Product\nUsers' Guide\n  Preliminaries\n    System Requirements\n    Download\n    Installation\n  Tutorial\n    :EUIProcess foo\n    :EUIProcess list\n    :EUIProcess demo_plot\n    How the transfers are done\n      Format of the fifo-file\n    :EUIProcess quit\n    Automatic clean-up\nExample Applications\n  VimPuppy\n  Vimms\nAuthor\nClaims\nCopyright\nDisclaimer\n\n"}, {:name=>"html_umlaute", :summary=>"replaces german Umlaute with their HTML Encoding on saving", :description=>"Useful for all people who edit german websites with Vim.\nOn loading a HTML file, this script replaces all the html-encoded german Umlaute (&*uml;) with their normal Ascii-Chars (ä,ö,ü, and ß) so they're more easily readable.\n\nWhen you save the file, all Ascii-Chars are replaced by the HTML Encoding. Could be extended to handle other chars as well (except for < > and \" which could only be replaced context-sensitive...) but I decided to use it only for these german letters..."}, {:name=>"nvi.vim", :summary=>"Simulate nvi's behaviour for u, . and <C-R>", :description=>"Make vim's undo work like nvi's. Hmm, that's less detail than the summary.\nSee the file for some waffle.\n"}, {:name=>"unicodeswitch.vim", :summary=>" Vim file plugin for editing files with unicode codes.", :description=>"Vim file plugin for editing files with unicode codes.\n\nIt changes all of the codes to the accented characters for viewing, and turns all accented characters into the code when writing.\n\ne.g. it changes \\u00E9 to é when viewing, and puts \\u00E9 when writing (java-style encoding). Set g:ucs_encode_java (in your .vimrc file)\n\nBy default, it works for all the accented characters in the Unicode Latin-1 supplement, but you can quickly change it for your needs.\n\nYou can also set it to work with html encoding (&#nnn;). Set g:ucs_encode_html (in your .vimrc file)\n\nYou can also set it to convert accented characters to octal encoding ( \\340 ). Set g:ucs_encode_octal in your\n.vimrc file\n\n\nIf you want to turn the switching on and off for reading and/or writing, you can easily do so by commenting out the autocmd lines.  e.g. if you comment out the BufWrite autocmds, then you can read in \\u00aa style and write out the utf encoding.  Or, you could swap the BufRead and BufWrite commands, and do the opposite transformation.\n\nfor help with the accented characters, see :help digraph\n\ncopied/mangled from vimscript #284, which does it for TeX codes\n"}, {:name=>"pydoc.vim", :summary=>"Python documentation view- and search-tool (uses pydoc)", :description=>"This plugin integrates the python documentation view- and search-tool \"pydoc\" into (g)vim. The plugin allows yout to view the documentation of a python-module or class by typing \n\n:Pydoc foo.bar.baz (e.g. :Pydoc re.compile)\n\nor search a word (uses pydoc -k) in the documentation by typing\n\n:PydocSearch foobar\n\nVim will split a new buffer, which shows the python-documentation found by pydoc. (The buffer is called \"__doc__\" (pythonic, isn't it ;-) ). The name might cause problems, if you have a file with the same name, but usually this should not happen).\n\npydoc.vim also allows you view the documentation of the \"word\" (see :help word) under the cursor by pressing <leader>pw or the \"WORD\" (see :help WORD) under the cursor by pressing <leader>pW. This is very useful if you want to jump to the docs of a module or class found by \"PydocSearch\" or if you want to see the docs of a module/class in your source code.\n\nTo have a browser like feeling you can use \"u\" and \"CTRL-r\" to go back and forward,  just like editing normal text in a normal buffer.\n\nIf you have suggestions for pydoc.vim, feel free to contact me (fs111 at web dot de) and if you like it, please rate it :-)\n\nP.S.: There is also another script, which integrates pydoc into vim, you can find it here: http://www.vim.org/scripts/script.php?script_id=1112"}, {:name=>"nedit2", :summary=>"Color scheme based on nedit", :description=>"A simple color scheme based on nedit (Vladimir Vrzic)"}, {:name=>"adam.vim", :summary=>"Adam's Good Color Scheme : A well colored, dark background color scheme.", :description=>"Not being totally satisfied with other color schemes out there, I created my own scheme.\n\nIt has a dark blue-grey background and uses a diverse set of attractive and constracting colors for foreground text.\n\nI use it largely for Java and XSL development although I'm also quite content with how C++ and ASP code looks in it too.\n\nThe only draw back to this color scheme is that while on a CRT monitor the colors appear quite clear and constrasting, the contrast dies out a bit on my laptop's screen. (For use on laptop screens, I would recommend making the background black.)"}, {:name=>"po.vim--Bailey", :summary=>"Gettext PO syntax highlighting", :description=>"This version of po.vim enhances the default PO syntax highlighting within vim to add the following new features and improvements:\n\n* Gettext context entries are highlighted\n* Allows spell checking in msgstr\n\nPlease test and report bugs or ask for new feature by emailing dwayne@translate.org.za\n\nNOTE: The long list of original features have been upstreamed and are available in a default vim installation."}, {:name=>"sieve.vim", :summary=>"sieve mail filter syntax file", :description=>"The sieve syntax file is based on 'Sieve: A Mail Filtering Language' (RFC3028) by The Internet Society 2001 (http://www.faqs.org/rfcs/rfc3028.html).\n\nSieve is a proposed internet-standard language for effectively filtering mail. It can delete mail, redirect messages other mail boces or automatically save mail into a specific folder.\n\nA good overview of the language and its capabilities can be found at http://www.cyrusoft.com/sieve/.\n\nFor an installation follow the instructions in ':help syntax'."}, {:name=>"AsNeeded", :summary=>"Loads plugins as-needed (functions/maps/commands)  (autoload)", :description=>"  [AsNeeded V14 AND LATER REQUIRES VIMBALL V18 OR LATER FOR UNPACKING]\n\nThe AsNeeded plugin loads plugins from the .vim/AsNeeded directory only as they're needed.  One major advantage over vim 7.0's autoload method is: plugins don't need to be changed!   Just put the plugin in the AsNeeded directory (usually under .vim/ or vimfiles\\).  It'll work even better if you type :MkAsNeeded while in vim after having updated your AsNeeded directory, too.\n\nSo, how does it work?  Well, whenever a plugin attempts to execute a function that hasn't been loaded yet, AsNeeded will find the script in the AsNeeded directory, load the script, and execute the function.\n\nAnd, whenever you want to execute a command that's not been loaded yet, and you've run :MkAsNeeded, then the plugin will be transparently loaded and the command executed!  If you didn't do :MkAsNeeded, or you wish to use a map, then instead you can use\n\n\t:AN map\n\t:AN command [arguments]\n\nand AsNeeded will locate the map or command, load the script, and make the map or command available for your subsequent use.  Alternatively, you can use\n\n\t:ANX map\n\t:ANX command [arguments]\n\nand AsNeeded will do what :AN would do plus attempt to execute the map or command.\n\nFor even faster loading of your desired function, map, or command, you can (as of v6) use\n\n\t:MkAsNeeded\n\nThis command will create a <ANtags> file in your AsNeeded subdirectory which basically lists your maps, functions, and commands and couples them with their associated source file.  When you then use :AN, :AsNeeded, or :ANX, AsNeeded will use that file to quickly load the associated source file.\n\nAnd, now for a user testimonal!\n\n    Zdenek Sekera (by permission)\n\n    I use FuncUndefined sometimes but most of the\n    time I use the AsNeeded mechanism of Dr.Chips,\n    which is very clever, very complete and completely\n    unintrusive, there is almost nothing to do once\n    the mechanics is setup.  It even finds functions\n    (mappings as well!!) inside a file of a different\n    name, etc...  Very pleasant.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#ASNEEDED)\n"}, {:name=>"Nibble", :summary=>"Nibble or Snake game for Vim.", :description=>"- Based on my memories from the first PC game that I played called Nibble (or Nibbles?) written for DOS I think in Basic.\n- Recreated the first 5 levels that I remember, very easy to add new levels\n  (see s:InitLevel() function).\n- Use :Nibble command to start the game.\n- Use 'h', 'j', 'k' and 'l' keys to control the direction of the snake and\n  drive it on to the aim (call it a sleeping mouse :).\n- Use 'q' to quit, <C-C> or <C-Break> to stop and <Space> to pause.\n- You have 3 lives to expend. The current number of lives, level and the score\n  is displayed.\n- If the snake touches the border, the blocks or itself you loose a life.\n- Game ends when all the lives are consumed or you complete all the levels.\n\nGood exerciese to practice hjkl key movements, even for experienced Vi users,\nas you need to sometimes react very quickly.\n\n\n\nSearch_key_words: nibble nibbles snake game games hari krishna dara"}, {:name=>"fdcc.vim", :summary=>"Locale or FDCC (Formal Definitions of Cultural Conventions, see ISO TR 14652)", :description=>"Glibc uses locale (or fdcc) files to define cultural conventions.  The files are usualy named \nxx_ZZ where xx is the ISO language code and ZZ is the ISO country code.\n\nThe highlighter has the following features:\n* highlights only valid keys with various LC_ sections\n* Shows bad <UNNNN> unicode as an error"}, {:name=>"CSS-2.1-Specification", :summary=>"CSS 2.1 Specification in Vim help format", :description=>"Specification of CSS 2.1 for fast looking through with Vim :help and :helpgrep commands."}, {:name=>"sqlldr.vim", :summary=>"Oracle SQL*Loader syntax", :description=>"Based on keyword list in O'Reilly scarab beetle book (Oracle SQL*Loader ISBN 1-56592-948-9). Derived from sql.vim."}, {:name=>"tex_autoclose.vim", :summary=>"TeX / LaTeX ftplugin to automatically close environments", :description=>"Provides mappings to automatically close environments.\n\nPressing \"\\c\" in normal mode (or <C-\\>c in insert mode) will cause the last open environment to be closed. (If a fold is started on the \\begin{env} line, then it will be automatically closed on the \\close{env} line.)\n\nAlso pressing \"<C-\\>}\" in insert mode when the cursor is at the end of a \"\\begin{environment}\" will automatically generate a \"\\close{environment}\". It will leave the cursor at the end of the \"\\begin{environment}\" (in insert mode), so that the user can enter arguments [if any].\n\nSmall and functional. Suggestions welcome."}, {:name=>"bufmenu2", :summary=>"More balanced buffers menu hierarchy", :description=>"If you are used to opening zillions buffers like I am,\nif furthermore, the files you edit have same first letter,\nyou might have faced a poor buffer menu with just\none submenu title displaying this first letter\nand all your file names in this same submenu pane.\nYou're puzzled about that ?\nI was. I searched for a script doing a nicer job. None :(\nI wrote it myself. Not very quickly wrote, not very quick\nat execution on my 350 Mhz ppc, BUT you should try\nit to see if more balanced hierarchy fits your need.\nHey this is free ;)\nScreenshots of the difference on a silly example\nare available there : http://lauranger.free.fr/bufmenu_two.html"}, {:name=>"svncommand.vim", :summary=>"Subversion (svn) integration plugin", :description=>"This is no longer maintained. See vcscommand vimscript #90 for a suitable replacement.\n\n\n\nThis is almost a straight port of cvscommand.vim to support subversion. There's some stuff hacked out, some stuff hacked in, and a lot of s/CVS/SVN/g going on.\n\nCurrent support is for single file type ops, just like cvscommand.vim. The commandset available is basically: status, info, update, revert, diff, annotate, commit, add, log, vimdiff, review. It can also parse a svn commit buffer and execute a diff based on that (you'll have to setup a mapping for SVNCommitDiff to do this).\n\nThere is no support for properties, operating on whole directories, or anything super advanced.\n\nAs of 1.67.3 there is limited svk (http://svk.elixus.org) support via the SVNCommandAutoSVK. Useful stuff like diff and log work okay, the rest is YMMV for now."}, {:name=>"timestamp.vim", :summary=>"Plugin to automatically timestamp files", :description=>"When a file is written, and the filename matches |timestamp_automask|, this plugin will search the first and last |timestamp_modelines| lines of your file. If it finds the regexp |timestamp_regexp| then it will replace it with a timestamp. The timestamp is computed by first doing a |token_substitution| on |timestamp_rep| and passing the result to |strftime()|.\n\nThe plugin tries to stay out of your way, and make the change as transparent as possible. Your search (and all other) history is unaltered, however you might find an extra mark in your jumplist.\n\nAll the default variables and actions can be changed by buffer / global vim variables. See |timestamp_examples for two simple examples.\n\nBy default, this plugin will timestamp ANY file that matches the regexp |timestamp_regexp| in the first and last 'modelines' (default 5) lines of your file. The default value of |timestamp_regexp| will EITHER match 'TIMESTAMP' or a time (in the format of strftime(\"%c\")) FOLLOWED by a 'Last changed:' or 'Last modified:'. For instance, if you create a new file and want to stamp it with a creation date and a last modified date, make the first few lines: >\n\n    Created:            TIMESTAMP\n    Last Modified:      TIMESTAMP\n\nWhen you first write the file, these lines will change to: >\n\n    Created:            Thu 26 Feb 2004 03:15:54 PM CST\n    Last Modified:      Thu 26 Feb 2004 03:15:55 PM CST\n\nOn subsequent writes of the file, the first line will remain unchanged and the second will be stamped with the time of writing.\n\nNOTE: If you find that on subsequent writes of the file, the second line is also unchanged, it is probably because the time returned by strftime is NOT is the format above. [Look closely and see if there is a leading 0 or timezone missing]. If you are using version 1.11 and higher and still have this problem, please report it to me. As a temporary fix, you can put the line >\n\n    let timestamp_regexp = '\\v\\C%(<Last %([cC]hanged?|[Mm]odified):\\s+)@<=.*$'\n\nin your .vimrc. This however has the disadvantage of eating all the text after the colon in any timestamp line.\n\nRead the complete htmlised documentation at http://math.stanford.edu/~gautam/opensource/xterm16/timestamp-doc.html"}, {:name=>"html_portuquese", :summary=>"Change the Brazilian Portuguese html charsets (ccedil) to char (ç).", :description=>"Useful for all people who edit Brazilian Portuguese websites in HTML or PHP with Vim.\nOn loading a HTML or PHP file, this script replaces all the html-encoded (ccedil, atilde, etc) with their normal Ascii-Chars (ç,ã, etc) so they're more easily readable.\n\nWhen you save the file, all Ascii-Chars are replaced by the HTML Encoding."}, {:name=>"AutoFold.vim", :summary=>"A script to automate folding based on markers and syntax.", :description=>"This script is an attempt at merging syntax and marker based folding.  \n\nFolding based on markers is available for all filetypes.  Currently both the {{{ / }}} and the {{{# / }}}# (where # designates the fold level) marking types are supported.\n\nSyntax folding is currently only available for C, Perl, Python, Shell, and Vim filetypes.\n\nIncludes function to check and update the foldmarker and line break formats just before saving the file.\n\nAs of version 1.3, includes functions to insert (zf) and remove (zd) fold markers that behave similarly to those in the marker fold method."}, {:name=>"russian-phonetic_utf-8.vim", :summary=>"\"Phonetic\" Cyrillic keymap", :description=>"A \"phonetic\" keymap for Cyrillic, for use under UTF-8 encoding.\n\nThis is the keymap I use when I type Russian in gvim; it may or may not suit you. For instance, it uses several \"dead keys\" which might take some getting used to. Or you might want to use it as a starting point, then alter it to suit your tastes.\n\nSee also, among others\n    :help 'keymap'\n    :help keymap-file-format\n    vimtip #246\n    vimscript #789\n\nand for a Bulgarian keymap (no ery, no eh-oborotnoye) using a slightly different but similar approach, see vimscript#1109\n\nVersion history:\n\n2004-10-17    1.1     Enhancement: combining acute accent added\n                                  (for explicit stress, e.g. bólshaya \"bigger\" vs. bolsháya \"big\")\n2004-03-01    1.01    Bugfix: Normal mode version of mapping\n2004-02-29    1.0     Initial release\n"}, {:name=>"colorsel.vim", :summary=>"A RGB/HSV color selector", :description=>"A simple interactive RGB/HSV color selector modelled after Gimp2 RGB/HSV color selector. Needs gvim and :set nocp (and probably a high-color display).\n\nUsage: :so colorsel.vim and\n\n:ColorSel [color]\n\nstarts the color selector.  The optional color argument can be in rrggbb or rgb form or a CSS named color.\n\nj, k (or arrows) change active channel.\n\nh, l (or arrows), b, w (or pgdown, pgup), 0, $ (or home, end) change channel values (by 1, by `word' and to 0/maximum).\n\ny yanks the current color as #rrggbb to the unnamed register, \"xy to register x.\n\n\"xp/\"xP gets the color from register x.\n\nx swaps the current and alternate color.\n\nq immediately quits.\n\nThe swatch and slider sizes are configurable, palettes and alternate colors can be switched off, see the source."}, {:name=>"XpMenu", :summary=>"Make vim use WinXP style menu.", :description=>"This script and dll simulate WinXP style menu.\nThis module works on Win2K only.(don't support others)\nYou can build it with Microsoft Platform SDK.\nEnjoy!\n\n--\nscreenshot:\nhttp://hp.vector.co.jp/authors/VA020411/Vim/xpmenu/screenshot.jpg\nThis use japanese font.\n"}, {:name=>"timelog.vim", :summary=>"Vim {,ft}plugin for keeping track of one's time.", :description=>"\" What:   timelog.vim:  Vim {,ft}plugin for keeping track of one's time.\n\" Usage:  source the file, or stick it in your ftplugin directory and\n\"         have ft=timelog on your modeline.\n\"         Keys:  n new job\n\"                t go\n\"                q stop \n\"                s[1-9] sort by that column\n\nWhat is it?\n===========\n\nA simple time tracking utility.\n\nWhy?\n====\n\nI tried karm and gtt and didn't like them.  I find it useful - someone\nelse might too.\n\nInstallation\n============\n\nDrop it in ~/vim/ftplugin/.  When you open a file with the modline telling\nvim that the filetype is \"timelog\":\n\n\" vim:ft=timelog:\n\nit'll be sourced.  I personally have an alias to check out (RCS) my\ntimelog file, open it with vim and check it back in when I'm finished.\n\nUsage\n=====\n\n\nKeys:\n   n new job\n   t start timing highlighted job (or job with the cursor on it)\n   q stop timing\n   s[1-9] sort by that column\n\n\nHere's an example of what mine could look like:\n\n\" vim:ft=timelog:\n\" usage:\n\"   t go\n\"   q stop\n\"   n new job\n\"   s[1-9] sort by that column\n\" dates in yy-mm-dd time in hh:mm:ss\nstart     last      time      what?\n--------  --------  --------  -------\n03-11-03  03-11-03  00:10:23  O  ----    Write doc for timelog.vim \n02-11-19  03-10-19  05:19:02  C  0712    something\n02-11-19  02-11-19  00:14:41  C  0977    something else\n03-11-03  03-11-03  00:00:00  N  ----    blah\n\nThe first 3 columns are what timelog.vim give you - when the job was\ncreated, when it was last modified and time spent on it.  The rest can be\nwhatever you like.  For me here I have a tag for whether the job is New,\nOpen or Completed (N, O, C), a reference nuber for the job if I have one\nand a description.\n\nThere can be several timlog blocks seperated by white space and can have\ntext between.  Each timelog block can be sorted seperately.\n\nBugs?\n=====\n\nWell, the seconds aren't quite seconds and not all motions highlight the\nline the cursor ends up on."}, {:name=>"virata.vim", :summary=>"Virata AConfig Configuration Script", :description=>"Virata AConfig Configuration Script Syntax\nis used in AConfig scripts to build ISOS firmware.\nThis syntax can be detected by a combination of the following:\n 1) The file extension \".hw\", \".sw\", \".pkg\" and \".module\",\n 2) The file name pattern \"mk.*\\.cfg\",\n 3) The string \"Virata\" or \"Conexant\" in the first 5 lines,\n 4) The subdirectory \"/atmos/\" in the scripts' full path.\nNote that due to mergers Virata has become part of Conexant."}, {:name=>"VimIRC.vim", :summary=>"An IRC client script", :description=>"This is an IRC client which runs on Vim.  It has some of the features\nIRC users might expect, such as multiple servers connectivity, DCC\nSEND/CHAT features etc..  Read the plugin file for more feature info and\nusage instructions.\n\nFor those who are unfamiliar with IRC in general, I recommend visiting\nthis site first: http://www.irchelp.org/\n\nIf you have any questions, problems, or suggestions etc., /query or\ne-mail the maintainer.  Do not direct them to the channel #vim please.\n\nScreenshots:\n  http://www.dd.iij4u.or.jp/~madokam/img/vimirc04.png\n  http://www.dd.iij4u.or.jp/~madokam/img/vimirc05.png (invoking web browser)\n\nHere is a minimum set of knowledge required to start/exit the script:\n\nTo start it, type\n\n:VimIRC<CR>\n\nThen you'll be prompted for some user info (nick, full name etc.).\n\nUpon successfull connection, try some normal commands you're familiar\nwith (\"j\", \"k\", \"<C-W>-\"things and so on).  Typing \"i\" or \"I\" will let\nyou in to the IRC-command mode, where you can enter commands such as\n\"/join #vim\" and messages.\n\nTo quit, just press \"Q\".\n\nAnother method of quitting: get out of the loop with \"<C-C>\", then type\n\n:VimIRCQuit<CR>\n\nIf you change your mind and want to get online again, press \"<Space>\" on\nany of the VimIRC windows.\n\nHave fun!"}, {:name=>"TogFullscreen.vim", :summary=>"Toggle fullscreen mode in Windows", :description=>"A simple script that allows you to quickly toggle the Gvim window between regular & fullscreen modes. Matches the functionality of the F11 key in IExplorer.\n\nKeys:\nF11 - toggle fullscreen"}, {:name=>"database-client", :summary=>"Database client - connect directly to database without external utility", :description=>"Perl DBI:: module is database independent interface for Perl\n\ndatabase-client.vim uses this Perl module and allows you make multiple connections to database, send SQL commands and receive data from database\n\nRequirements: Vim '+perl' feature, installed Perl (5.8.x version or above), DBI perl module\n"}, {:name=>"ftpsync", :summary=>"Synchronize files with a remote server", :description=>"The FtpUpdate script provides you the ability to synchronize your files with a server. The main idea when I created this script was to use GVim and CVS to edit the files on my local PC rather than on the remote server which might be sometimes really slow. \n\nWith S-F7, you can define the server and the remote path used. The settings can be set for the buffer only or globally if you have many files to synchronize from/to the same directory. You can set both, and then buffer settings will preempt global settings. \n\nKey mapping:\n\n  - <S-F5> and <S-F6>: allow you to update your file respectively from and to the server. Asks for the synchronization parameters if needed.\n  - <S-F7>: set the synchronization parameters.\n  - <S-F8>: display the synchronization parameters of the current buffer.\n\nPublic functions:\n\n  - FtpGetParam(): display the synchronization parameters of the current buffer.\n  - FtpSetParam(...): set the synchronization parameters\n  - FtpSetServer(...): set the server parameter\n  - FtpSetPath(...): set the path parameter\n  - FtpUpdate(): put the buffer to the remote server\n  - FtpRefresh(): get the file from the remote server\n\nNote that you can set both global parameters and buffer parameters for a specific buffer which needs different parameters. The buffer settings are taken into account before the global ones.\n\nFurther more, through the FtpSetPath or FtpSetServer functions, you can set only a specific path or server for a buffer, the second parameter (path or server) being taken from the global variable.\n\nExample:\n\nWith <S-F7> you set global parameters srv1 and path /home/user1. Then for a specific buffer you type :call FtpSetPath() and set /home/dummy2 as buffer path (or type :call FtpSetPath(\"/home/user2\",\"b\")).\nThen using <S-F5> or <S-F6> on this buffer will use ftp://srv1/home/user2 and ftp://srv1/home/user1 for the other ones.\n\nThe protocol used is FTP. Writing and reading are performed through netrw.vim plugin, i.e. as typing \n\n    :write <proto>://<server>/<path>/<file>\n    or \n    :read <proto>://<server>/<path>/<file>\n\nNote that <proto> is set in g:FtpSync_Proto (scp by default).\n"}, {:name=>"svg.vim", :summary=>"SVG syntax file", :description=>"File for Scalable Vector Graphics syntax highlighting\n\nThis script highlights SVG 1.0 and 1.1 syntax as described at http://www.w3.org/TR/SVG/\nSVG is an XML application, so svg.vim needs XML syntax file to work properly.\n"}, {:name=>"Karma-Decompiler", :summary=>"Makes statistics based on Karma", :description=>"Karma DeKompiler\nNewsPaper Edition\n\nDedications To:\n\n1. Bogdan AGAPIE and I know everything. I know some VIM. He knows the rest.\n\n2. Kevin LEGAN, my former boss, because vIM is the second nature for hIM.\n\n\nThe purpose of the program:\nTo find how many votes of each kind generated the total score.\nExample:\nIf the total score is 1, from 8 votes, the only combination that generates this total score is:\n- 1 votes of  4 points\n- 2 vote  of  1 points\n- 5 votes of -1 points\nAfter the program generates these numbers, it will display a visual statistic and it will make some recommendations based on that statistic ( the recommendations will be in the next release ).\n\nConstructive criticism is welcomed, but I can also handle some encouragement :-)\n\n\nFrequently unAsked Questions:\n\nQ1) Why \"Decompiler\"?\nA1) Because is not always possible to find the original combination that generated the total score.\nExample:\nTotal score = 2155\nVotes = 659 \nThere are at least 3 valid combinations:\n\n- 516 votes of  4 points\n- 117 votes of  1 points\n- 26  votes of -1 points\n \n- 518 votes of  4 points\n- 112 votes of  1 points\n- 29  votes of -1 points\n\n- 520 votes of  4 points\n- 107 votes of  1 points\n- 32  votes of -1 points\n\nHowever, in all of them, the number of \"4-points\" votes is much bigger than the number of \"1-points\" votes, which means this script is appreciated as \"Life changing\".\n\n\nQ2) Why \"DeKompiler\"?\nA2) Because it's \"Karma\" and not \"Carma\".\n\n\nQ3) Why \"NewsPaper Edition\"?\nA3) Sometimes, newspapers give the reader verifiable data, failing to mention that is not the only possible data. The program will generate only one valid combination, even if there are more than one. A \"Respectable NewsPaper Edition\" is not possible, at least with the current Karma rating.\n\n\nQ4) Why the first version is 0?\nA4) Because, the first revision has exactly 0 code.\n\n\nQ5) What's the idea behind the program?\nA5) The program generates all the possible combination, in a common sense range, and it displays the first one found. If no combination is found, it means that there is an error on the site or (most probable) the user did not enter valid results.\n\n\nQ6) Why do I have to change the values for \"score\" and \"votes\" INSIDE the script?\nA6) Because the author learned vim 2 days before and he did not find how to read variables from the keyboard. Nevertheless,...it will be fixed in the new versions."}, {:name=>"autosession.vim", :summary=>"Vim plugin for autosaving & autoloading session", :description=>"Vim plugin for autosaving & autoloading session.\n\n  - Automatically works if no file is openned from command line and session isn't mannualy changed (i.e. session is unattended).\n  - remembers a different session for each working directory.\n  - easy: just run Vim with no parameters, and last session will be restored.\n  - for desktops: just click on the Vim icon and you'll get your last session.\n"}, {:name=>"newheader.vim", :summary=>"Create function header comment according to a template", :description=>"Just Another headerformatting script for C/C++. This one does not create headers conform some documenting standard but allows you to specify a template. The template may contain some keywords which are expanded. Start by pressing F7 while the cursor is on or a little above the function in question. If the script finds existing comments just above the function it will neatly format it into the template if the right keyword is found. Example (looking horrible in proportional fonts):\n\n\" Example _c_header template file:\n\" ==============================\n\n\" /****************************************************************************\n\"  *\n\"  * NAME:        name                                    (date)\n\"  *\n\"  * DESCRIPTION: text\n\"  *\n\"  * ARGUMENTS:   args\n\"  *\n\"  * RETURNS:     -\n\"  *\n\"  * PRE:         -\n\"  *\n\"  * POST:        -\n\"  ***************************************************************************/\n\" \n\n\" Suppose you have this function:\n\" ===============================\n\n\" /* \n\"  * This is just a comment that is long enough to show the features of\n\"  * newheader.vim. It will do some indenting for you and list your function\n\"  * arguments\n\"  */\n\" \n\" static void show_header( int width, int length,\n\"                          byte font, Language *language_selection,\n\"                      byte color )\n\" {\n\"      ....\n\" }\n\n\n\" Result\n\" ======\n\n\" Place the cursor one or more lines before the function and press F7. It\n\" gives you:\n\"\n\" /****************************************************************************\n\"  *\n\"  * NAME:        show_header                                    (2000 okt 27)\n\"  *\n\"  * DESCRIPTION: This is just a comment that is long enough to show the\n\"  *              features of newheader.vim. It will do some indenting for you\n\"  *              and list your function arguments\n\"  *\n\"  * ARGUMENTS:   width:\n\"  *              length:\n\"  *              font:\n\"  *              *language_selection:\n\"  *              color:\n\"  *\n\"  * RETURNS:     -\n\"  *\n\"  * PRE:         -\n\"  *\n\"  * POST:        -\n\"  ****************************************************************************/\n\" \n\" static void show_header( int width, int length,\n\"                          byte font, Language *language_selection,\n\"                      byte color )\n\" {\n\"      ....\n\" }\n\ndisclaimer:\nI'm using it a few years now, and it is a big timesaver. However, every new project requires me to do another generalisation on the script. If you think it may be usefull for you but produces odd results, drop me line."}, {:name=>"sccs.vim", :summary=>"Compare delta's from SCCS files, visually selectable", :description=>"A scipt that interfaces with SCCS to view differences between revisions. It is not as complete as sccs-menu.vim vimscript #43, but it adds the benefit of visually selection of delta's, no need to remember relevant version numbers.\n\nSummary of it's use:\n,s Compares the current file with the last stored revision\n,S Compares current file with visually selectable revision\n,R Compares two visually selectable revisions"}, {:name=>"screen.vim", :summary=>"screen-like keybindings for buffers and windows", :description=>"This plugin provides screen-like keybindings for common window or buffer movements.  By screen-like, I mean that they are like the keybindings of the GNU screen(1) utility for multiplexing terminals.  <C-a><Space>, for example, will go to the next buffer.  <C-a>a will flip between the current and last-edited buffer.  <C-a>c will create a new buffer.  Other mappings are documented in the script itself."}, {:name=>"edifact.vim", :summary=>"Syntax script for generic EDIFACT messages (extensible)", :description=>"This syntax script will colorize UN/EDIFACT messages.\nAll formatting errors are reported with the \"Error\" highlighting.\n\nHooks are provided for extensibility (including EDIFACT messages in another syntax) and to define a more specific syntax (coloring known tags, checking segment definitions with mandatory/conditionnal data...).\n\n\nFor more information about EDIFACT:\n- http://www.unece.org/trade/untdid/\n- http://www.gefeg.com/jswg/index.htm"}, {:name=>"pqmagic.vim", :summary=>"Syntax Highlighting for \"PowerQuest PartitionMagic 7 Pro Scripting Files\"", :description=>"Syntax Highlighting for \"PowerQuest PartitionMagic 7 Pro Scripting Files\""}, {:name=>"ProjectBrowse", :summary=>"Browse a list of files below a root directory", :description=>"Generate a list of files below a set of root directories for rapidly finding and editing medium sized source trees. Intended for moderate sized programming projects with several thousand header and source files, but will be useful to anyone editing large numbers of files in a structured directory layout. ( e.g.: websites, config files, etc )\n\nThe file list can be set to appear either in a new buffer or in the local buffer. Place the cursor on the line of the file of interest and hit return. Although searching may be done in any way, the suggested usage is the / ( slash search ) command. The buffer is set locally to be case insensitive and not use highlighting. Press / and then type the first few characters of the file of interest followed by return ( twice ).\n\nI created this script in response to the browser that ships with the popular Visual Assist program by Whole Tomato Software for MS Visual .NET. I prefer to use vim for all my editing and ctags is great, but when you have another developer telling you to \"Go to file SomeWierdFileDeepInTheDirectoryStructure.cpp\" it can be pretty slow and painful sometimes. This browser solves that problem directly.\n\nThis script has been under nearly daily usage by myself and several others. Now it has been highly optimized to cache the search results to a file. Special thanks to Steven An.\n\nPlease feel free to email me with bugs or feature requests, or just if you like it. I am required to use gvim and .NET extensively, so i am interested in additional features or tips that you want to see.\n"}, {:name=>"n3.vim", :summary=>"RDF Notation 3 Syntax File", :description=>"This is a syntax file to highlight Notation 3 documents for describing RDF (meta-)data.\n\nIt handles basic highlighting, but has not currently any complex error detecting features (e.g. for non-closed statements etc), nor any fold regions defined.\n\nAbout Notation 3 (excerpt from: http://www.w3.org/DesignIssues/Notation3.html):\n\n\"This is a langauge which is a compact and readable alternative to RDF's XML syntax, but also is extended to allow greater expressiveness.\"\n\nThat said, download this and see if it helps you in semantic endeavours.\n\nComments, suggestions and assistance are all welcome!\n"}, {:name=>"groovy.vim", :summary=>"syntax file for the groovy programming language", :description=>"Syntax file for the Groovy programming language. It relies on the java.vim syntax file.\nI was inspired by java.vim and ruby.vim syntax definition, so I thank the authors of those scripts.\n"}, {:name=>"StyleChecker--perl", :summary=>"Tool for finding and highlighting repeated words in file", :description=>"\"      Repetition of words is sign of bad style in most languages. This script\n\"      will help to track repetition of words in LaTeX, HTML and mail files.\n\"\n\"      LaTeX: don't take into account \\keywords\n\"      HTML: don't highlight content of tags\n\"      Mail: don't look in quoted messages, headers and signatures \n\"\n\"      There is also support for any other filetype. StyleChecker will\n\"      highlight there only repeated words in comments.\n\"\n\"      This script requires Perl interface. Theoretically it could be done in\n\"      pure VimL but multiple iterations through long lists of words make it\n\"      practically impossible - vote for arrays in VimL!\n\"\n\" Installation:\n\"      Put this file into your .vim/macros directory and source it from local\n\"      ftplugins. Of course you can place this file in .vim/plugin directory\n\"      but this file will be sourced every time you open Vim.\n\"\n\" Usage:\n\"      Default shorcut for style checking is ,, . You can change it by placing\n\"      in .vimrc: \n\"            map <YourShortcut> <Plug>StyleChecker\n\"\n\"      After execution of map script will highlight repeated words.\n\"      Next execution of map restore original highlighting of file.\n\"      In console Vim offending words will be highlighted with 8 colors, in GUI\n\"      with 16. \n\"      Thanks to Perl's pragma locale, language specific letters will be\n\"      treated properly. \n\"\n\" Settings:\n\"      Behavior of StyleChecker you can control through variables. They are\n\"      Vim variables, there is no need to play with Perl.\n\" More about setting variables in file."}, {:name=>"2tex.vim", :summary=>"Transform a file into TEX file, using the current syntax highlighting", :description=>"This script is based on the script 2html.vim. It transforms a file into a TEX file using current highlighting, using the \"color\" latex package.\nSorry, the code is really bad, and this project is not maintained anymore."}, {:name=>"Scons-compiler-plugin", :summary=>"Compiler plugin for scons.", :description=>"Replace autoconf/automake with scons, and here is the compiler plugin to allow you to keep building and debugging from within vim."}, {:name=>"qf.vim", :summary=>"Allow :grep to work with multiple programs", :description=>"This script is based fully on vimtip #688. It provides commands for manipulating vim's :grep command via grepprg and grepformat without loosing current settings. That is, all this package does is manipulate the settings of vim's grepprg and grepformat variables. Hopefully the package makes it possible to use multiple different progams in conjuctions with vim's built in grep command.  There is very little magic in the script...but it is convenient.\n\nThe basic command is :QF which allows any registered quick-fix command to be executed. \nE.g.  QF <id> <args> <-- finds the program corresponding to \"id\" in the\ntable and executes it with the specified arguments \"args\"\ne.g. :QF grep foobar *.cpp <-- will grep all cpp files for foobar\n\nAny number of grep like commands can be registered, and ad-hoc commands can be run also. Look at the bottom for the file for the complete list of commands. An look at the top of the file to work out how to register specific commands. Command registrations allows for less typing, nothing more.\n\nQFlid <pattern> <-- will search for pattern in the id-utils database\ne.g QFlid static   <-- will find all lines with the word \"static\" using GNU\nid-utils\n\nQFgrep <pattern> <files> <-- works just like the grep command\ne.g. :QFgrep static *.cpp <-- will find all lines matching \"static\" in the .cpp files of the current directory\n\n\nQFrgrep <pattern> <dir> <-- recursive grep\ne.g. :QFrgrep static src  <-- will recursively grep the src directory for all\nfiles containing static\n\n\nQFlocate <pattern> <-- will search for files in the slocate database\nE.g. :QFlocate pattern <-- will locate all files matching pattern via the\nslocate functionality available on linux and elsewhere\n\nQFfind <args> <-- works just like find\nE.g. QFfind . -name '*.cpp' <-- will find all cpp files under the current\ndirectory\n\nQFload Allows a saved Quick-fix window which was previously saved to be \nrestored\nE.g. :QFload /tmp/foo <-- will load contents of /tmp/foo into quick-fix buffer assuming /tmp/foo contains the contents of a previously save quick-fix buffer\n\n"}, {:name=>"af.vim", :summary=>"A nice dark color scheme with milk colors", :description=>"A nice dark color scheme with milk colors based on desert."}, {:name=>"aspnet.vim--Abshire", :summary=>"Provides ASP.NET syntax highlighting.", :description=>"Provides ASP.NET syntax highlighting.  This is a modified version of the aspnet.vim file provided my Mark Feeney, to better handle a few things, such as the following:\n\n<img src=\"<%# DataBind.Eval(Container.DataItem, \"ImageFilePath\") %>\"/>"}, {:name=>"psql.vim", :summary=>"PostgreSQL hightlighting.", :description=>"This sets up highlighting for *.psql files, which contain PostgreSQL SQL.\nYou may also need to make an entry for *.psql in your filetype.vim ."}, {:name=>"multiselect", :summary=>"Create multiple selections and operate", :description=>"This plugin extends the Vim's visual mode functionality by allowing you to\nselect non-contiguous regions and execute commands on them. It makes it really\neasy to select multiple regions using mouse, as you can use Ctrl+Mouse\ncombination just like in MS Word. There are a number of operations to very\neasily manipulate selections such as modifying the regions\n(add/delete/inverte/clear), hiding, refreshing, saving and restoring etc. You\ncan execute both normal and :ex mode commands in one shot on all the regions.\nThe selections are also local to the buffer, so you can have separate selectins\nfor each buffer.\n\nUsage:\n\nOnce installed, the features are available in all the buffers. To create\nselection regions you can use mouse or keyboard.\n    - To use mouse, hold Ctrl key and make a visual selection using the\n      LeftMouse button just like you normally do. Once the mouse button is\n      released, the selection gets automatically added as a new selection\n      region. If you are selecting only one line, you can release the mouse\n      button without having to drag.\n    - To use keyboard, make a visual selection using |visual-mode| commands or\n      mouse and press <Enter> to create a new region out of it. The <Enter> (or\n      <CR>) key is mapped only if it is not already mapped in visual mode. The\n      cursor is placed in the direction of the selection such that it is easier\n      to continue moving the cursor for making further selections.\n    - To clear part or the whole of a region from selection, repeat the\n      same exact procedure over that region. You can however mix mouse and\n      keyboard usage. The procedure is equivalent to running the |:MSInvert|\n      command as describe in |multiselect-commands|.\n    - Once you repeat the procedure to create all the regions that you need to\n      act on, use one of the |:MSExecCmd| or |:MSExecNormalCmd| (or one of their\n      equivalent maps) to execute commands on them. Ex:\n        - Delete all the lines in the current selections >\n            MSExecCmd d\n        - Convert all the characters in the current selections to upper case. >\n            MSExecNormalCmd gU\n    - Use |:MSClear| (or its map) to clear the selection.\n\n\nWith the support of multiselect in other plugins, it becomes very useful. E.g., you can execute perfoce commands such as submitting files (using vimscript#240) on a group of selected files, using the multiselect support in selectbuf plugin (vimscript #107). It is possible to extend netrw plugin to support operations on multiple files too.\n\n\n\n\nSearch_key_words: multiselect multiple selection select selections mouse hari_vim Hari Krishna Dara"}, {:name=>"xml2latex", :summary=>"Convert XML files to LaTeX tabbing environment", :description=>"This script converts your XML files into a LaTeX tabbing environment, creating tab stops according to the max number of tabs on the file, changes the tab chars into \\> chat marking chars and put \\\\ on the end of all the lines of the XML file.\nI use it inside a \\begin{tt} \\end{tt} block here to get all my < and > chars converted correctly.\nIt's well known that the \\begin{verbatim} \\end{verbatim} does the trick, but I wrote this script because I need to apply some font changes (bold,tiny) on the XML code."}, {:name=>"ToggleComment", :summary=>"Simple, flexibel, language-independent mappings to de-/commentify", :description=>"This utility draws heavily from vimtip #271 and additional note 2002-07-06.\nYet it's different in one or more aspects from other tips and scripts I'm\naware off.\n\nFeatures:\n\n- de-/commtify lines in normal mode (with count) and visual mode\n- use the same keys for commenting and decommenting\n- language independent, you define different mappings for various languages\n  and/or one comment-command for different filetypes\n- simple and flexibel, to change the comment characters from '#' to '# ' e.g.,\n  just change a mapping in your .vimrc, not the script\n- comment-style: comments are indented like the uncommented line\n- no hlsearch problem, last search pattern and .-command are preserved\n- inserted comment characters are protected from further expansion\n- might be adapted to other comment styles (first column comments, ...)\n\nExample:\n\nCommented text looks like this:\n\n    #if uncommented:\n        /* comment the line */\n    <!-- else: -->\n        // uncomment the\n        // lines\n        no comment\n\nYou would put or remove this comments (cursor on the first line), by typing:\n    ,# ,* ,< 2,/\n"}, {:name=>"php-doc", :summary=>"Basic phpdoc support for vim.", :description=>"This is based on a phpdoc.vim by Karl Heinz Marbaise <khmarbaise@gmx.de>.\n\nGo to http://www.phpcult.com/vim/ to see what it does, and for detailed instructions on how to use it. "}, {:name=>"YAPosting", :summary=>"Yet Another Posting script", :description=>"[OUTDATED: not been tested for vim 7... Updates are welcome !]\n\nThis script was designed in order to have a simple but reliable, comprehensive and reusable set of mappings, functions and syntax in order to improve the Mailing and Posting edition. It does 'clean' the quotes in the mail (removes empty quoted lines, condense quote signs and remove signature), it changes Microsoft Outlook Express quote header to a standard quote header and put the quote where it belongs, it can remove quoted or not quoted paragraphs and it can reformat your text into \na justified text inside margins.\n\nThere still are some minor Bugs which I'll get rid of one day, and some feature I shall add to it... But obviously, time is not extensible, and I don't know when I'll have enough to really make this script perfect... Anyway, I'm using this script every day when I edit E-Mails, and I really enjoy using it. :)\n\nI'd also like to thanks Luc Hermitte who made a good critic of my script.\n\nUSAGE :\nthe default keybindings are :\n    tc : clean the mail (removes empty quoted lines, removes signature...)\n    tm : move a MS/OE signature to the top of the quotation, and change the quotation tag.\n    tt : takeout a paragraph (or a quoted paragraph)\n         you will be prompt to enter a reason to put inside the square brackets (like [snip])\n    tr : reformat the current paragraph in order to have it belonging your formating rules\n          (you can change them by editing the script, or changing global variables :\n            g:par_marginleft\n            g:par_marginright\n            g:par_textwidth\n            g:par_alinea\n           )\n    th : toggle highlighting of 72 and 80 columns limits \n          (texts after 72 column will appear yellow, and after 80 will appear red)."}, {:name=>"blugrine", :summary=>"based on bluegreen colorscheme by Joao Estevao", :description=>"blue, green and white are the main colors over a black background\n"}, {:name=>"latex_pt", :summary=>"replaces LaTeX portuguese codes by the real characters and vice-versa", :description=>"Replaces LaTeX portuguese codes by the real characters when the user opens a LaTeX source document. When the user saves the document, the special characters are written back in LaTeX code form. Some characters like 'î' and 'ò' don't exist in portuguese but they are handled as well.\n"}, {:name=>"replace", :summary=>"quick replacing of expressions", :description=>"Vim plugin that asks the user for a string to replace, as well as the string he wants to replace with. By default, the script is called by the <F4> shortcut.\n"}, {:name=>"DumpStr.vim", :summary=>"dump vimscript string to clearly see multi-byte chars, bytes, and codes of both", :description=>"When debugging vimscript, you sometimes need to clearly see what's inside the string value: which unprintable characters it contains ? Does it contain any multibyte chars ? In which positions ?\n\nFor buffer characters, you can use 'ga' to see them clearly. To see characters of strings (variables, registers etc),  you can use DumpStr.vim.\n\nUsage: \n  - :source DumpStr.vim \n  - :call TestDumpStr()        \" test/demo\n  - :call DumpStr(string_variable)\n  - :call DumpStr(@Register)\n\nWhen string has multi-byte characters, DumpStr prints in following format:\n\nString length:   M bytes, N chars\n                   (string has multibyte characters) ( encoding=ENC )\nChar dump:       decimalCode(char) ...\nBytes:          \"...\"\nByte dump:       decimalCode(byte) ....\n\nWhen string has no multi-byte characters, DumpStr dumps in this format:\n\nString length:   M bytes (no multibyte characters) ( encoding=ENC )\nBytes:          \"...\"\nByte dump:       decimalCode(byte) ....\n\n"}, {:name=>"RemoteSaveAll.vim", :summary=>":RWALL[!] - save modified files in all running vim instances, also :WALL[!]", :description=>"(1)  This script (plugin) defines command :RWALL which saves all modified files in all running vim instances. Command takes no arguments. Bang can be used (:RWALL!) in which case the command which is sent to all running vims is :wall!. Without bang, the command which is sent to all running vims is :wall.\n\nLocal vim is also saved.\n\n\"All running vim instances\" include only servername-enabled vims. Vim instances with servername disabled will not be saved. :RWALL/:WALL uses vim clientserver feature to execute \":wall[!]\" command in other running vims.\n\nSynonym :WALL is set equivalent to :RWALL\n\n(2) To do this from shell (to signal all running vims to save their modified file)\nyou can use either one of the following shell scripts:\n\n(2a) Shell script RWALL.sh -- requires that RemoteSaveAll.vim be installed\n\n#!/bin/sh\n# Description: save  modified files in all running vims\n# this script requires that plugin RemoteSaveAll.vim be installed\n# in the plugin directory\nvim -c 'RWALL' -c 'q!'\n\n(2b) Shell script savevims.sh -- does not require RemoteSaveAll.vim plugin\n\n#!/bin/sh\n# Description: save  modified files in all running vims\nfor srv in `vim --serverlist`; do\n    vim --servername \"$srv\" --remote_send '<C-\\><C-N>:wall<CR>'\ndone\n\n(3) To check that your running vims are 'servername-enabled' and can be remotely saved, do:\n          vim --serverlist \nat shell prompt, or\n          :echo serverlist()\nin vim. If nothing is printed, then no running vims are detected.\n"}, {:name=>"FTP-Completion", :summary=>"complete files in command line for ftp.", :description=>"Vim can edit file on ftp server like following.\n:e ftp://ftp.vim.org/pub/vim/patches/6.2.001\n\nThis script help the user typing of path.\nIf you type ...\n:e ftp://ftp.vim.org/pub/vim/patches/\nand type <c-g><tab>\n:e ftp://ftp.vim.org/pub/vim/patches/6.2.001\nand type <c-g><c-n>\n:e ftp://ftp.vim.org/pub/vim/patches/6.2.002\nand type <c-g><c-p>\n:e ftp://ftp.vim.org/pub/vim/patches/6.2.001\n"}, {:name=>"nexus.vim", :summary=>"Syntax highlighting for Nexus file format", :description=>"This is a syntax highlighting for Nexus, a file format used by many programs in evolutionary biology, like GDA, Paup*, Mesquite, ModelTest, MrBayes and MacClade. A formal description can be found at\n\nMaddison, D.R., D.L. Swofford, and W.P. Maddison. 1997. NEXUS: An extensible file format for systematic information. Systematic Biology 46: 590-621\n\nwhile some examples and a short description can be found at\n\nhttp://workshop.molecularevolution.org/resources/fileformats/\n\nThe syntax also takes in consideration some reserved words (private block) used for MrBayes. For the most curious, a screenshot can be seen at\n\nhttp://carvalho.webhop.net/nexus_vim.png"}, {:name=>"uptime.vim", :summary=>"Display Vim uptimes", :description=>"This script displays vim uptimes.\n\nUsage:\n\n:Uptime\n:Uptime regular (gvim has been up for 2 days, 1 hour, 17 minutes and 2 seconds)\n:Uptime short (2d 01:17:02)\n:Uptime seconds (264)\n\nSee :help uptime.txt for details.\n\nRequirements:\n\nThis plugin has not been tested on Vim versions below 6.2\n"}, {:name=>"asmx86", :summary=>"A Simple x86-ASM syntax for VIM", :description=>"This is a simple X86 assembly language syntax for VIM.  It's fairly indiscriminant about the assembler syntax you choose to use.  It recognises the mnemonics for \"classic\" intel opcodes, and the GNU (gas) \"mode\" characters appended to these opcodes.  This syntax script contains all known opcodes for the i486 instruction set, and register set.  \n\nHistory:\nThis syntax was hacked using the asm-m68k syntax as a starting point.  (I built this using my intel 486 System Programmer Manual as a reference.)  Because I do a great deal of hacking on assembly language, for several architectures, I felt that a proper (Or at least somewhat better than all-cyan... ;-) syntax highlighting for each one was in order.  Because (at this time), I hack a lot on x86 ASM, I've whipped this up, to help me work on it.  This would not have been possible without several good scripts (C, C++, and m68kASM) to use as starting points, and to rip code from.\n\nDetails:\n\nIt is aware of the \"arcane\" instructions for dealing with protected memory activities.  It is also aware of the \"CR\", \"DR\", and \"TR\" register sets.  The syntax does not, at this time, check for validity of operands to your opcodes (To do so would make it unable to be assembler independant.)  It does not know about the conditional jump mnemonics however.  (It merely considers any j.{1,5} string to be a valid jump.)  \n\nThe FPU instruction set is only partially recognised at this time.  \n\nThe colour scheme is a bit over-done, perhaps, but I find it useful when debugging some complex projects.  (I've divided the opcodes into several classes... I/O, mov's, arithmetic, branching, other.)  \n\nI don't really change it much.  I whipped it up, because I needed some good colour highlighting on my editing of x86 code.  As such, I don't expect to maintain it.  If anyone does wish to take over the maintanance of it, or improve it in any way, I'd be much appreciative.\n\nKnown Bugs:\n\nIt gets a bit quirky sometimes on complex nesting of comment types.  The syntax is CPP aware, and tries to \"grey-out\" #if 0, etc.  If nesting several classes of comment, or placing your code shortly after a few variations of comment, you'll possibly have commented lines get syntax highlighted, or your uncommented lines get highlighted as comments.  I've not really figured out why.  A simple \"^L\" to force a redraw seems to solve the problem in any case, so it may just be a bug in the parser unit of my particular version of VIM (Which may be a bit old by now.)\n\nAny Assembly language isn't easy to hack.  Having a Syntax for it will not make you master it over night.  Having a syntax for a language you're familiar with will make your life much easier though.  \n\nAlso, expect a few other ASM syntaxes, as I may get to them (Perhaps PPC, Alpha, SH, MiPS, perhaps even a classic PDP11... ;-) \n\nSorry about being *REALLY* verbose."}, {:name=>"php.vim-for-php5", :summary=>"Syntax file for php5", :description=>"This is a syntax file for the popular scripting language: php, version 5"}, {:name=>"autoit.vim", :summary=>"colorize AutoIt scripting language, from Hiddensoft", :description=>"syntax file for script languages AutoIt and AutoIt-GUI.\nThey are Open Source and freely available at \"http://www.hiddensoft.com&quot;"}, {:name=>"pic18fxxx", :summary=>"pic assembly syntax for 18fxxx", :description=>"as the assembly/pic syntax file was made for 16fxx family, I made changes to this file for 18fxxx assembly."}, {:name=>"IncrediBuild.vim", :summary=>"Allows building using IncrediBuild, using Vim's quickfix system", :description=>"This plugin allows building using IncrediBuild, using Vim's quickfix system.\n\nSee http://www.xoreax.com/main.htm for more details on IncrediBuild."}, {:name=>"folds.vim", :summary=>"Folds the continuous same lines more than 4 to 2 lines and 1 folded line", :description=>"Checking long long log files are boring jobs especially those files contain\nthe continuous same lines. \nBut why don\\\\&#039t you fold the continuous same lines with this \\\\\\\"folds.vim\\\\\\\".\nIt folds the continuous same lines more than 4 to 2 lines and one folded line.\nFolds.vim contains\n{range}Fold0: Fold the continuous same lines. No column arguments. \n{range}Fold1 c1 c2:\n            Fold the continuous same lines of columns b/n c1 and c2.\n{range}Fold2 c1 c2:\n            Fold the continuous same lines ignoring columns b/n c1 and c2.\nNote that column number c1 and c2 starts with 0, but not 1."}, {:name=>"chela_light", :summary=>"A light color scheme", :description=>"This is a light color scheme. I haven't included support for terminals yet, so only try it if you have the GUI running.\n\nMy goal was to make a color scheme that (1) doesn't scare you when you do a \":vert diffsplit\" :-), and (2) is more or less consistent with the standard Windows XP look.\n\nI'm pretty satisfied with the look, but if you're used to sit in front of the computer for 48 hours straight, you should either get yourself a life (recommended) or use a dark color scheme such as \"ps_color\" (vimscript #760) by P. Shizhu.\n\nOn Windows XP I prefer the Lucida Console font (\"set guifont=Lucida_Console:h10:cANSI\"), so this color scheme probably looks best with that font. On Linux it looks pretty OK with Bitstream Vera Sans Mono."}, {:name=>"rest.vim", :summary=>"A reStructuredText syntax mode", :description=>"A reStructuredText Syntax highlighting mode for vim"}, {:name=>"indentpython.vim", :summary=>"An alternative indentation script for python", :description=>"This indentation script for python tries to match more closely what is suggested in PEP 8 (http://www.python.org/peps/pep-0008.html).  In particular, it handles continuation lines implied by open (parentheses), [brackets] and {braces} correctly and it indents multiline if/for/while statements differently.\n\nComments are welcome!\n"}, {:name=>"Siebel-VB-Script-SVB", :summary=>"Syntax File for files with extensions .sbl", :description=>"Siebel VBScript Syntax File. Since SVB is based on VBScript, this file takes the basic work by Johannes Zellner <johannes@zellner.org> on VB syntax files and adds support for Siebel specific stuff"}, {:name=>"Tibet", :summary=>"A Colorscheme Inspired in Tibetan coloring", :description=>"Just a new colorscheme based in desert that is inspired in tibetan coloring.\nFor those who like Dark Red backgrounds...."}, {:name=>"Maxscript", :summary=>"Simple syntax highlighting for Maxscript", :description=>"Syntax highlighting for Maxscript language. Maxscript is a part of 3DSMax rendering software."}, {:name=>"svn-diff.vim", :summary=>"Show diff  when commiting changes on a subversion repository", :description=>"This script will show you the output of 'svn diff' when commiting changes against a subversion repository. \n\nIt open a new windows showing the diff, to help you summarizing the changes you are commiting.\n\n\n"}, {:name=>"idf.vim", :summary=>"Syntax highlighting for EnergyPlus IDF files.", :description=>"Idf.vim provides basic syntax support for EnergyPlus IDF files."}, {:name=>"ssa.vim", :summary=>"syntax highlighting for SubStationAlpha", :description=>"Simple highlighting for SubStationAlpha scripts, highlights dialogs and TextSub codes."}, {:name=>"GtkFileChooser", :summary=>"Patch that adds GtkFileChooser support to gvim (GTK 2.4+)", :description=>"This patch makes GTK/GNOME VIM use new GtkFileChooser for opening and saving files. It requires at least version 2.4 of GTK+ .\n\nComments are welcome :)"}, {:name=>"Simple-templates", :summary=>"Simple template insertion", :description=>"These are three very simple mappings that save me a lot of time...\n\nJust create a directory with templates (i.e. a latex article, a copyright notice, a function header,...).  Edit TEMPLATE_HOME in the script, and you'll be able to use the following commands:\n\n:TT c  --> print template TEMPLATE_HOME/c on top of file (template top)\n:TH f  --> print template TEMPLATE_HOME/f on current line (template here)\n:LST   --> lists contents of templates directory\n\nHope you find it useful!\n\n"}, {:name=>"onsgmls.vim", :summary=>"A compiler plugin for the onsgmls (or nsgmls) SGML/XML validator", :description=>"Lets you validate XML and SGML documents with onsgmls (from the OpenSP suite) or nsgmls (from James Clark's SP suite).  According to Vim's documentation, \"The idea is to save the error messages from the compiler in a file and use Vim to jump to the errors one by one.  You can examine each problem and fix it, without having to remember all the error messages.\" \n  "}, {:name=>"mappinggroup.vim", :summary=>"Map function keys to act like a multilevel menu", :description=>"This plugin allows you to map function keys to perform different tasks: running a normal command, calling a function, or call a function that will load a new set of mappings.  The plugin supports multilevel key mapping function keys such that after loading a new set of key mappings, it's possible to go back to the previous configuration of function key mappings.\n\nIt is useful to help loading different key map configurations, and also good for key mapping not so frequently used functions.\n"}, {:name=>"metacosm.vim", :summary=>"Evening & Torte + Special Sauce == Good", :description=>"You can get this script in the sampler pack at http://vim.sourceforge.net/scripts/script.php?script_id=625 as the other 99 top rated themes. \n\nA major goal of this colorscheme is to have all the elements of the editor properly themed, including listchars, fold columns, folds, comments, line numbers and everything else you can think off -- if you find something that seems to stick out from the rest, please email me.  I make this a point because I dislike themes that are nice, dark and soothing except for showing painfully bright line numbers and/or listchars. \n\nScreenshot at: http://vi-improved.org/metacosm.png"}, {:name=>"ASPJScript", :summary=>"ASP JScript Support", :description=>"These three files will enable support for ASP in JScript mode.\n\nScreenshot at: http://vi-improved.com/aspjscript.png (large)"}, {:name=>"DoxygenToolkit.vim", :summary=>"Simplify Doxygen documentation in C, C++, Python.", :description=>"Currently five purposes have been defined :\n\nGenerates a doxygen license comment.  The tag text is configurable.\n\nGenerates a doxygen author skeleton.  The tag text is configurable.\n\nGenerates a doxygen comment skeleton for a C, C++ or Python function or class,\nincluding @brief, @param (for each named argument), and @return.  The tag\ntext as well as a comment block header and footer are configurable.\n(Consequently, you can have \\brief, etc. if you wish, with little effort.)\n\nIgnore code fragment placed in a block defined by #ifdef ... #endif (C/C++).  The\nblock name must be given to the function.  All of the corresponding blocks\nin all the file will be treated and placed in a new block DOX_SKIP_BLOCK (or\nany other name that you have configured).  Then you have to update\nPREDEFINED value in your doxygen configuration file with correct block name.\nYou also have to set ENABLE_PREPROCESSING to YES.\n\nGenerate a doxygen group (begining and ending). The tag text is\nconfigurable.\n\nUse:\n- Type of comments (C/C++: /// or /** ... */, Python: ## and # ) :\n  In vim, default C++ comments are : /** ... */. But if you prefer to use ///\n  Doxygen comments just add 'let g:DoxygenToolkit_commentType = \"C++\"'\n  (without quotes) in your .vimrc file\n\n- License :\n  In vim, place the cursor on the line that will follow doxygen license\n  comment.  Then, execute the command :DoxLic.  This will generate license\n  comment and leave the cursor on the line just after.\n\n- Author :\n  In vim, place the cursor on the line that will follow doxygen author\n  comment.  Then, execute the command :DoxAuthor.  This will generate the\n  skeleton and leave the cursor just after @author tag if no variable\n  define it, or just after the skeleton.\n\n- Function / class comment :\n  In vim, place the cursor on the line of the function header (or returned\n  value of the function) or the class.  Then execute the command :Dox.  This\n  will generate the skeleton and leave the cursor after the @brief tag.\n\n- Ignore code fragment (C/C++ only) :\n  In vim, if you want to ignore all code fragment placed in a block such as :\n    #ifdef DEBUG\n    ...\n    #endif\n  You only have to execute the command :DoxUndoc(DEBUG) !\n  \n- Group :\n  In vim, execute the command :DoxBlock to insert a doxygen block on the\n  following line.\n\nLimitations:\n- Assumes that the function name (and the following opening parenthesis) is\n  at least on the third line after current cursor position.\n- Not able to update a comment block after it's been written.\n- Blocks delimiters (header and footer) are only included for function\n  comment.\n- Assumes that cindent is used.\n- Comments in function parameters (such as void foo(int bar /* ... */, baz))\n  are not yet supported.\n\n\nExample:\nGiven:\nint\n  foo(char mychar,\n      int myint,\n      double* myarray,\n      int mask = DEFAULT)\n{ //...\n}\n\nIssuing the :Dox command with the cursor on the function declaration would\ngenerate\n\n/**\n * @brief\n *\n * @param mychar\n * @param myint\n * @param myarray\n * @param mask\n *\n * @return\n */\n\n\nTo customize the output of the script, see the g:DoxygenToolkit_*\nvariables in the script's source.  These variables can be set in your\n.vimrc.\n\nFor example, my .vimrc contains:\nlet g:DoxygenToolkit_briefTag_pre=\"@Synopsis  \"\nlet g:DoxygenToolkit_paramTag_pre=\"@Param \"\nlet g:DoxygenToolkit_returnTag=\"@Returns   \"\nlet g:DoxygenToolkit_blockHeader=\"--------------------------------------------------------------------------\"\nlet g:DoxygenToolkit_blockFooter=\"----------------------------------------------------------------------------\"\nlet g:DoxygenToolkit_authorName=\"Mathias Lorente\"\nlet g:DoxygenToolkit_licenseTag=\"My own license\"   <-- !!! Does not end with \"\\<enter>\""}, {:name=>"VHT", :summary=>"Vim HTML Templates", :description=>"VHT is Vim implementation of Macromedia Dreamweaver(tm) templates and libraries. Templates make possible to share the same document template across whole project, libraries allow for sharing the same snippet of code in many documents. This plugin makes possible to commit and update code from repositories and take care about file paths in links and image tags, always changing them to be relative to currently edited file.\n\nVHT doesn't provide immediate way to propagate changes across whole site. There is too many ways to maintain project in Vim. From session files, through project plugins from vim-online to simple file with list of files and opening it with \"vim `cat fileslist`\".\n\nAll commands work nice with :argdo, :windo, :bufdo set of commands.\nBut you have previously set b:vhtemplate for each file.\n"}, {:name=>"pdftotext", :summary=>"Allow vim to read in a PDF file as plain text", :description=>"This plugin will invoke the pdftotext utility to filter a PDF file that is being edited in vim and convert it to plain text in the current buffer. Requires that pdftotext is installed. It is included in the xpdf package (available from http://www.foolabs.com/xpdf/)."}, {:name=>"rpl", :summary=>"Syntax description file for RPL/2", :description=>"Syntax file required to colorize RPL/2 scientific language."}, {:name=>"rpl-ftplugin", :summary=>"RPL/2 ftplugin file", :description=>"This file has to be used with the RPL/2 syntax file."}, {:name=>"rpl-indent", :summary=>"RPL/2 indent file", :description=>"RPL/2 indent file has to be used with RPL/2 syntax file."}, {:name=>"aspvbs.vim", :summary=>"ASP/VBScript syntax highlighting", :description=>"This is the asbvbs.vim script found in the VIM distrobution. The latest version rests here. This syntax highlighting provides syntax for ASP/VBScript files."}, {:name=>"FiletypeRegisters", :summary=>"Localize register contents based on filetype", :description=>"Plugin to keep certain registers (specified by the global variable\ng:localRegisters) specific to individual filetypes.  For example, if editing\na Java file in one window and a Vim script in another, one may want to\nsearch for a variable name in the Java window that has no bearing in the Vim\nwindow; however, ordinary functionality would clobber the Vim window search\nregister value, requiring the use of search history if the original\nexpression was complicated.\n\nThis relies on my getVar.vim (vimscript #353).\n\nMappings (default):\n\n<Leader>im -- used to import one register from another filetype\n\nCommands:\n\nCopyregister -- used to import one register from another filetype (the\nmapping just executes this command)\n\nCustomizations:\n\nBy default, no registers are localized (so no behavior changes should be\nnoticed).  To localize registers, place an assignment to g:localRegisters\ninside your _vimrc:\n\nlet g:localRegisters=\"abcm/\"\n\nThe above allows registers a, b, c, m and the search register to be\nlocalized based on filetype (all Vim scripts get one copy, all Java files\nanother etc.).\n\nTo change the default mapping for importing register contents from another\nfiletype, create a normal mode mapping to <Plug>CopyRegister in your _vimrc.\n\nTODO:\n\n- Keith Roberts:  Allow certain filetypes to retain global settings through\n  the use of an option (set through an ftplugin, for example) -- these would\n  inherit the settings of the last window, in all likelihood, rather than\n  setting their own.\n\n- Maybe allow certain filetypes to ALWAYS keep in synch with others?\n"}, {:name=>"nant-compiler-script", :summary=>"NAnt support for the make command", :description=>"This tiny compiler script teaches vim's :make command to utilize nant (http://nant.sf.net). Trival. Error strings are not that perfect yet. But works for me."}, {:name=>"tbf-vimfiles", :summary=>"Collection of syntax files for C, C#, Java, NSIS and Doxygen", :description=>"A random collection of vim files I use. Containing syntax files for C, C# and Java featuring syntax based folding support. Also contains highlighting for doxygen comments in C and C#. And contains a simple syntax highligher for NSIS.\n\nUsage for folding in C, C++, C# and Java: First of all { code blocks; }  are recognized. Should cover most language constructs, like classes, functions, branches, loops. Additonally explicitly defined regions are supported. In C# you use pairs for \"#region/#endregion\" pragmas for that purpose. In C (and C++) explicit regions are marked by \"/* region */\" and \"/* endregion */\". The region markers for Java are \"// region\" and \"//endregion\".\n\n"}, {:name=>"Window-Sizes", :summary=>"Allows multiple windows to have specific vertical sizes", :description=>"History:\n\n1.0:  Initial version\n\n1.1:  Added mapping <leader>tog to toggle the behavior of observing fixed\nwindow heights.  If disabled, vertically split windows can be used without a\nproblem.  Added two functions, WindowSizesEnabled and WindowSizesMaxEnabled,\nwhich return whether fixed sizes are observed and whether window maxing is\nenabled, respectively.\n\nPlugin to keep the vertical sizes of windows within specifications.  For\nexample, if you're using the Decho.vim plugin, you could force the DBG\nwindow to always be 10 lines high and for all other windows to automatically\nmaximize upon entry.  Or, you could specify explicit sizes for two windows\nand let all the remaining space be shared equally among the other windows.\n\nThis is a bit different from using equalalways and winheight=999 because it\nwill always honor the vertical height settings of individual windows, using\nthe maximizing or equalization only on those windows that don't have\nanything set explicitly.\n\nCaveat (and it's a big one):  No support for vertical splits.  If you have a\nvertical split, the behavior is undefined (well, it's not undefined, but\nit's ugly).\n\nUsage (default mappings):\n\n<leader>max:  Toggle whether windows without an explicit fixed size will\nautomatically maximize upon entry or whether all un-fixed-size windows will\nsimply share the vertical space left over once the fixed windows have taken\ntheir share of the space.\n\n<leader>fix:  If the current window has a preferred fixed vertical size,\nremove it, allowing this window to expand and contract according to the\ng:WindowSizes_windowMax setting.\n\n<leader>tog:  Toggle the fixed-window-size behavior; the <leader>max\nbehavior is controlled separately.  If fixed-window-sizes are not being\nobserved, then all windows are maximized blindly upon entering (without\nregard to their preferred height) if maximizing is enabled.\n\n<s-up>:  Increases the current windows's size by the value of the\nWindowSizes_increment variables (see below); using this mapping results in\nfixing the window height.\n\n<s-down>:  Decreases the current windows's size by the value of the\nWindowSizes_increment variables (see below); using this mapping results in\nfixing the window height.\n\nVariables (configuration):\ng:WindowSizes_windowMax:  If 1, then windows are maximized (the <leader>max\nmapping merely toggles this value between 1 and 0).\n\nb:preferredWindowSize:  If defined, the fixed vertical size of the current\nwindow -- the window will be this size vertically (tweaked by the\n<leader>fix, <s-up> and <s-down> mappings).  If not defined, a prompt is\ndisplayed for the user to specify a fixed vertical height for the current\nwindow where the current height is used as the default value (hit <ESC> to\nget out of it).\n\ng:WindowSizes_increment:  If defined, this is the increment by which to\nincrease or decrease the current window's size if using the <s-up> or\n<s-down> mappings.  If not defined, 5 is used.\n\nb:WindowSizes_increment:  If defined in a given window, this is the\nincrement by which to increase or decrease the current window's size when\nusing the <s-up> or <s-down> mappings.  If not defined, the global version\n(g:WindowSizes_increment) is used (if even THAT's not defined, 5 is used).\n\nFunctions (for use in the statusline, for example):\n\nWindowSizesEnabled:  Returns 1 if the preferred heights of windows is\ncurrently being observed (toggle with the <leader>tog mapping).\n\nWindowSizesMaxEnabled:  Returns 1 if the current window is going to get as\nmuch vertical real estate as possible (taking into consideration the\nWindowSizesEnabled setting and the presence of other windows).\n\nTips:\n\n- Always have at least one window without a specified size so it can take\n  over the remaining vertical space.\n\n- Always make sure that the total size of the fixed windows is less than the\n  actual number of lines visible on-screen!  (The behavior otherwise is\n  undefined -- that is, not tested by me.)\n\n- To restore a window to not having a preferred size, unlet\n  b:preferredWindowSize (just use the <leader>fix mapping).\n\nTODO:\n\n- Observe the 'laststatus' value.\n\n- Figure out how to change all the global variables to script or some such\n  so they don't pollute the global variable pool.\n"}, {:name=>"menu_pt_br.vimfix", :summary=>"Fix of menu translation", :description=>"there was a line break at the Toggle \\ Insert \\ Mode translation that was causing a startup message error. Just joined the line."}, {:name=>"TransferChinese.vim", :summary=>"Transfer Chinese to Chinese", :description=>"\nTo mimic what gu and gU do for ascii,\nI defined two new maps, gS and gT, to transfer between\nthe simplified Chinese and the traditional Chinese.\n\nFeatures:\n\n(a) \"quick and dirty\" way to transfer Chinese to Chinese\n(b) 20% of efforts for solving 80% of problems\n(c) 2172 Chinese pairs are used for one-to-one map\n(d) cursor position is kept after gS or gT\n(e) [range] for visual mode is supported"}, {:name=>"gtk-vim-syntax", :summary=>"Syntax highlighting for GLib, Gtk+, Xlib, Gimp, Gnome, and more.", :description=>"A collection of C extension syntax files for xlib, glib, gobject, gdk, gdk-pixbuf, gtk+, atk, pango, cairo, gimp, libgnome, libgnomecanvas, libgnomeui, libglade, gtkglext, vte, linc, gconf, and ORBit.\n\nThe xlib one was originally created by Hwanjin Choe (vimscript #570), the others were generated from gtk-doc declaration lists and support enabling/disabling of highlighting of deprecated declarations."}, {:name=>"2htmlj", :summary=>"Slightly modified 2html.vim script for use with javadoc", :description=>"I have modified the great 2html.vim script contained in the distribution for use with javadoc documents. My changes may be of use to others as well.\n\nSpecific purpose: when creating Java API Documents with the -linksource option, the documents include copies of source code but (glaring omission) the html source pages are not syntax-highlighted.\n\nMy changes to the 2html.vim script allow the resulting html documents to be exchanged with those in the src-html folder thus creating syntax-highlighted html pages in the API documentation.\n\nThe key addition is the \"id\" attribute at the beginning of each code line so that every line of code can be reached like this: Hello.html#line.15.\n\nWhat was: <span class=\"lnr\"> 11</span>\nis now: <span id=\"line.11\" class=\"lnr\"> 11</span>\n\nI also added the options of short_name and short_title so that Hello.java becomes Hello.html not Hello.java.html and that the html document title is the name of the source file.\n\nPlease see my comments in the script.\n\nNote: I tried hard not to break anything in the existing script. I would appreciate any feedback. Thanks."}, {:name=>"glsl.vim", :summary=>"Syntax file for the OpenGL Shading Language GLSL GLSlang", :description=>"Syntax file for the OpenGL Shading Language.  The following is highlighted (as defined in the\nOrange Book):\n\n  - All gl_ variables\n  - All built-in functions\n  - All keywords\n\nThe syntax file was modified from c.vim, so you can expect that your GLSL shaders\nwill be highlighted similar to C files.\n\nAll reserverd keywords (that GLSL currently does not use) are highlighted as errors.\n\nKeywords: glsl glslang opengl shading language"}, {:name=>"SearchInBuffers.vim", :summary=>"Perform the current search in all the open buffers", :description=>"This plugin allow you to search the current search pattern in all the buffers currently opened into VIM.\n\nJust do a search in whatsoever way into the current buffer and then run :SIB to process the same search in all the other open buffers.\n\nUse the quickfix commands (:cn, :cp, ...) to navigate through the patterns found, :cclose to close the found's list, that's all.\n\nDo ':help quickfix.txt' for more details.\n"}, {:name=>"Docbook-XSL-compiler-file", :summary=>"DocBook XSL compiler file", :description=>"Most people compile docbook documents with tools like jade or openjade. Other tools, like xsltproc, are possible.\n\nBasically, this script is a bound of commands in order to compile docbook documents correctly using xsltproc. It just set a few vim parameters like makeprg, errorformat and stringcomments."}, {:name=>"Phrases", :summary=>"Find and highlight words/phrases used repeatedly", :description=>"To start highlighting visually select the region in question and press <Enter>, to stop it\npress <Enter> once again.\n"}, {:name=>"Olive", :summary=>"Dark olive background and green-orange colors colorscheme", :description=>"Changed name from greenorange to olive ^_%\n\nThis colorscheme has dark olive green background, and some bright green-yellow color.\nOnly tested on java, c, vim, and LaTeX files. Not tested for long coding session :P\n\nGUI only. Some screenshots at http://cherry.f2g.net/olive.html\n\nThanks.\n"}, {:name=>"Lynx-Offline-Documentation-Browser", :summary=>"Lets you browse offline html docs in a buffer", :description=>"Inspired by the Info browser script, I present this script for bowsing html documentaion offline in a vim buffer via lynx. \n\n:Lynx index.html will create your buffer, then browsing is a matter of using the usual \"tag\" keys Ctrl-] and Ctrl-T. A link is indicated by lynx as a number in square brackets. Place the cursor over this (on the '[') and use Ctrl-] to follow the link.\n\nIt probably could be tidied up and also follow http: links as well as file: links but this is all I need to browse the wxPython docs offline which was what I wrote it for. Improvements welcome.\n\nThis has been tested on a Slackware 9.1 box with Vim 6.2. YMMV.\n"}, {:name=>"srec.vim--fei", :summary=>"ftplugin for Motolora s-record, correct checksum", :description=>"the ftplugin can detect whether the current record's format is\ncorrect,\nif the data count is wrong, it will produce a message:\n========================\n    The data count of this record(3) is wrong!\n========================\nin which the 3 is the line number of the record.\nif the checksum is absense, the message will be:\n========================\nThis record looks have no checksum, press <C-K> to generate checksum for it\n========================\nIf the checksum is present, but wrong, it will complain about:\n========================\nThe Check sum is wrong!, should be: 0x27, Press <C-K> to correct it\n========================\n the 0x27 is the right CheckSum for it.\n\nAnytime You can press <C-K> to correct the checksum of current record. regardless of whether the checksum is already contained in the recorder. but if the data count is incorrect, nothing will be done.\n\nWith this plugin, one can easily modify existing s-record file, and then re-generate the checksum.\n:%norm ^K\n"}, {:name=>"srec.vim--fei-syntax", :summary=>"syntax file for s-record", :description=>"There's a filetype srec for S-record in filetype.vim. But no corresponding ftplugin and syntax, now, here it is.\nThe color schema is based on $VIMRUNTIME/syntax/hex.vim"}, {:name=>"lingo.vim", :summary=>"Lingo syntax highlighting", :description=>"This is the syntax highlighting script for Macromedia Directors Lingo scripting language.\n\nI updated the file to the current version (MX2004). There might be some things missing. Feel free to add a new version here or contact me, if you want/did enhancements. \n\nThis is an enhanced version of the lingo syntax file by Robert Robbins. I uploaded it as new script, because I stripped off the color definitions and entered new types.\n\nI now also created an color scheme, so you get the original Director syntax colors (vimscript #1012). This way you can convert them to HTML and put them on your website. Read the description at the color scheme for details.\n\nScreenshot:\nhttp://www.oxpal.com/downloads/vim/lingodirector_nonumber.png"}, {:name=>"buflist", :summary=>"Buffer browser", :description=>"The buffer browser plugin provides you an easy way to switch from a buffer to another. The layout has been inspired on the taglist script.\n\nPress the <F4> key to toggle the buffer list on and off. Help can be displayed by pressing the 'h' key. \n\nGeneral keymaps:\n\n- <S-F3>/<S-F4> to decrease/increase window height by 1\n- <C-S-F3>/<C-S-F4> to decrease/increase window height by 5\n\nUsage when not in buffer list:\n\n- <F4> to open/access buffer list panel\n- \\\\0 to \\\\9 to mark window with number\n- \\\\p to mark window as preview window\n\nUsage when in buffer list:\n\n- h to toggle help\n- q to close buffer list (same as CTRL-W q)\n- p to preview file in preview window\n- d to delete currently selected buffer\n- u to update buffer list\n- x to toggle path display\n- s to toggle sorting by buffer number/name/extension\n- n/N to edit file in new window below/above <F4> \n- <CR> to edit file in last window visited before <F4>\n- \\\\0 to \\\\9 to edit file in window marked 0 to 9\n- <F4> to go back to <F4> window\n- <S-F3> to decrease buffer list width by 1\n- <S-F4> to increase buffer list width by 1\n- <C-S-F3> to decrease buffer list width by 5\n- <C-S-F4> to increase buffer list width by 5\n\nRemark: the \\ is in fact defined as <Leader>, it might thus change regarding your environment settings.\n\nChange log:\n\nFrom 1.6 to 1.7:\n\n- g:BufList_Hide set to 1 or 0 whether the buflist panel shall be respectively hidden or not once buffer is selected (<CR> key).\n- Copy buffer no longer erased when buffer is selected or when panel is updated.\n\nFrom 1.5 to 1.6:\n\n- buffer path display bug fix\n- nonumber set for buffer list (thanks to Ian)\n- <C-S-F3>/<C-S-F4> for increasing/decreasing window size\n"}, {:name=>"lingodirector.vim", :summary=>"original Director Lingo script colors", :description=>"These are the original script colors as Macromedia Director uses them. This color scheme will probably only make sense with the Lingo syntax file (vimscript #1010). This way you can not only see the colors your are used to, you can also convert them to HTML to put colored Lingo code snippets on your webpage.\nYou can even choose whether or not to put the line numbers in.\n\nScreenshots:\nhttp://www.oxpal.com/downloads/vim/lingodirector_nonumber.png\nhttp://www.oxpal.com/downloads/vim/lingodirector_number.png\n\nTo create an HTML output: \n* Open a lingo file. \n* Select this color scheme. \n* Type \":set number!\" to toggle the line numbers on and off\n* Then either choose the menu option \"Sytnax>Convert to HTML\", or type \":runtime! syntax/2html.vim\"\n* You are then in the output file, wich you can save, or copy"}, {:name=>"PLI-Tools", :summary=>"Syntax, Indent and Goodies for IBM's Mainframe-PLI", :description=>"Syntax-highlighting and indenting for IBM's PLI on mainframes (MVS; LE/390; z/OS etc.) when using the PLIOPT-Compiler.\nDoes recognize embedded SQL and CICS.\nSupports matchit-plugin\nSmart uppercasing (only source, no strings and/or comments)\n"}, {:name=>"clipbrd", :summary=>"Clipboard and other register content editor.", :description=>"Requires Vim 6.3\n\nSee vimtip#805 for an easy way to use the plugin as an external editor for most applications on windows.\n\nThis is a very simple utility that allows you to quickly view and edit contents (only those that are not read-only) of various registers that Vim supports. Most useful to quickly view and modify system clipboard using a shortcut (see Installation section). I often use this technique to even strip off the RTF to simple-text while copying from one application to other (that suppot RTF format, such as IE to Outlook).\n\n- Execute the default map (\\cb or <Leader>cb) or :ClipBrd command to view\n  the default register (\"*\", the clipboard register). You can also specify\n  the register name as an argument to the :ClipBrd command.\n- The register name is remembered (until you change it again by explicitly\n  specifying it) so that you don't have to specify it everytime you run\n  :ClipBrd command.\n- The \"[Clip Board]\" buffer is like a regular Vim file buffer, as you can\n  write (:w, :w!, :wq, :wq!), reload (:e, :e!) and quit (:q, :q!) the\n  buffer using the built-in Vim commands. Writing without the bang will\n  make the plugin prompt you for confirmation and where available, you can\n  click \"Cancel\" to prevent the buffer from quitting.\n- To refresh contents from the register, use :e or :e! command, or just\n  close and reopen the buffer. To quit without saving, just use the :q!\n  command.\n- Even other buffer commands and settings work as expected, e.g., you can\n  :hide the buffer if you can't decide to save or quit, and the contents\n  should remain the same when you come back, unless a different register\n  is explicitly specified while opening the clipboard. Setting 'bufhidden'\n  to \"hide\" or 'hidden' also should do the same.\n\n\nSearch_key_words: clipboard register genutils edit hari krishna dara"}, {:name=>"check-mutt-attachments.vim", :summary=>"Script not to forget to attach files mentioned in an email", :description=>"When using Vim to write an email from say Mutt, one can mention things like \"I am attaching the email I was telling you about\" and then forget to attach it.\n\nThis script prompts the user when exiting Vim pointing out that an attachment is mentioned in the message, and that may require something attached to the message.\n\nThis implements a suggestion made at: http://groups.google.fr/groups?hl=fr&lr=&ie=UTF-8&selm=caq406%24rq4%241%40FreeBSD.csie.NCTU.edu.tw"}, {:name=>"corewars.vim", :summary=>"syntax definitions for corewars cw-assembler", :description=>"This file provides syntax definitions of the corewars cw-assembly language."}, {:name=>"redcode.vim", :summary=>"redcode assembler syntax", :description=>"This file provides syntax definitions for the redcode assembly language."}, {:name=>"potwiki.vim", :summary=>"Maintain a Wiki of plain text files", :description=>"If you like to keep notes in plain text files you might like this script.\npotwiki provides functions and mappings for conveniently maintaining \na Wiki of text files with vim.\n\nThe Wiki is a collection of text files in a single directory. These files\ncan contain hyper links to each other in the form of WikiWords.\n\nA WikiWord is a word which starts with an upper case letter and contains\nat least one lower case letter and another upper case letter in this\norder -- it's in 'camel case', e.g.\n\n  ThisIsAWikiWord\n\nSuch a WikiWord links to a file of exactly the same name in your\nWiki directory.\n\nWhen opening a Wiki file potwiki scans your Wiki directory to find\nwhich WikiWords are valid links. WikiWords without a corresponding\nfile are highlighted as errors (otherwise it doesn't matter).\n\nAfter installing the plugin see :help potwiki for further documentation.\n\n   The default mappings are defined as follow (By default, <Leader> stands\n   for '\\&#039. See |Leader| for more info) :\n\n   <Leader>ww   - open the Wiki HomePage\n   <Leader>wi   - open the Wiki index\n   <Leader>wf   - follow a WikiWord (can be used in any buffer!)\n   <Leader>we   - edit a Wiki file\n\n   The following mappings are present when editing a Wiki file:\n\n   <Leader><Leader> - close the file\n   <CR>             - follow the WikiWord under the cursor\n   <Tab>            - move to the next WikiWord\n   <BS>             - move to the previous WikiWord\n   <Leader>wr       - reload WikiWords\n"}, {:name=>"updt.vim", :summary=>"Vim syntax file for ClearCase update log.", :description=>"A simple syntax file for coloring a Clear Case update log\nfile."}, {:name=>"revolutions.vim", :summary=>"Matrix Revolutions colorscheme (GUI only)", :description=>"\nDark background, greenish theme.\nEasy on the eyes, yet still readable.\nFor **long** coding hours :)\n\nInspired from the original matrix.vim theme,\nbut with different palettes and rules.\n"}, {:name=>"feralstub.vim", :summary=>"Flexible stubs. (inspired by Dr.Chip's C-Stubs)", :description=>"The idea of this plugin (collection) is to allow you to easily setup and manage ex commands that happen when you (in insert mode) type a keyword (of your choice) and pretty a special char(easily configurable). For instance:\nfts`\nfts is the keyword (Feral Time Stamp)\n'`' is the special char that is used to invoke the main script.\n\nThis will result in:\n[Feral:176/04@06:50]\nI.e. results in replacing fts with the string '[Feral:176/04@06:50]'\n\nYou can add your own keywords via script functions and each keyword is dependant on a given file type.\n\nSo to define a global 'if' keyword you would do something like:\ncall FeralStub_AddNewExecute('', '\\<i\\%[f]\\>', \"norm! ciwif\\<CR>endif\\<ESC>kA \\<ESC>\")\n\nAn to define a 'if' keyword only for say .vim files:\ncall FeralStub_AddNewExecute('vim', '\\<i\\%[f]\\>', \"norm! ciwif\\<CR>endif\\<ESC>kA \\<ESC>\")\n\nOr to define an 'if' keyword for the current file type:\ncall FeralStub_AddNewExecute(&ft, '\\<i\\%[f]\\>', \"norm! ciwif\\<CR>endif\\<ESC>kA \\<ESC>\")\n\nSee the documentation in feralstub.vim for more specifics.\n\nIn brief:\ncall FeralStub_AddNewExecute(<filetype>, <match_pattern>, <ex_command_to_execute_when_keyword_matches_match_pattern>)\nOr\ncall FeralStub_AddNewFunction(<filetype>, <match_pattern>, <Global_Function_To_call_when_keyword_mattches_match_pattern>)\n\n\nThe end result is an easy way to add a new entry into this stub system, and to easily allow such entries to be added from various locations such as plugin, ftplugin or a script that is sourced on a per project basis (via autocommands for instance).\n\nThe match_pattern is fed directly to match() so what you can match is very flexable\nThe ex_command_to_execute_when_keyword_matches_match_pattern is fed directly to :execute\nThe Global_Function_To_call_when_keyword_mattches_match_pattern is fed directly to :call\n\n\nThe only downside I can foresee with this is:\n1. exit and restart vim to get a new pattern into the system.\n2. the 'ex' pattern is a pain but generally just i_CTRL-R_CTRL-R a recorded macro and the hard part is done.\n3. This makes extensive use of curly-braces-names and lots of vars.\n\n\n\n\nYou can easily change the default '`. special char to something else via two lines in your .vimrc (or the like)\nExamples: (in .vimrc)\nTo Specify A Different Typable Char:\nimap\t<unique>\t~\t<Plug>FeralStub_DO\nlet g:FeralStub_CharToInsertOnFailure = '~'\n\nTo Specify A Non Typable Char:\nimap\t<unique>\t<F12>\t<Plug>FeralStub_DO\nlet g:FeralStub_CharToInsertOnFailure = ''"}, {:name=>"Phoenity-discontinued", :summary=>"This script has been discontinued", :description=>"-"}, {:name=>"aftersyntax.vim", :summary=>"Allows a single language (filetype) to have multiple .vim/after/syntax/ files", :description=>"Currently one may have a single syntax file per filetype in the .vim/after/syntax directory.  Such files are loaded after the main syntax handling file, and are used to provide additional customized syntax highlighting.  But, what if you want two or more such files for some filetype?  <aftersyntax.vim> solves just that problem...\n\nFor example, consider the C language and Andreechtchev Eugeni's opengl.vim extension for recognizing OpenGL functions and constants (vimscript#752) plus my blockhl.vim (vimscript#104) for highlighting leading tabs based on {} depth:\n\n\tExample:\n\t1. cd .vim/after/syntax\n\t2. mkdir c\n\t3. mv (wherever)/aftersyntax.vim c.vim\n\t4. mv opengl.vim  c\n\t5. mv blockhl.vim c\n\nEvery time a C file is opened, both opengl.vim and blockhl.vim are sourced to provide their extra highlighting.\n"}, {:name=>"IndentHL", :summary=>"Vim Syntax Highlighting for indent whitespace", :description=>"Tabs and spaces are colored in slightly different colors from lightest to\ndarkest for dark background or from darkest to lightest for light background\nexample (x is darkest color and z lightest):\n\n    function foo()\n    x if b\n    x y echo &#039something&#039\n    x y while c\n    x y z echo &#039something else&#039\n    x y endwhile\n    x endif\n    endfunction\n    \nActually it forms vertical stripes\n\nYou can switch it off and on by \n   :call OnOffIndentHi()\n"}, {:name=>"xmlwf.vim", :summary=>"A compiler plugin for the xmlwf xml well-formedness checker", :description=>"xmlwf is a command-line utility for checking whether an xml document is well-formed.  This plugin will enable you to use xmlwf through Vim, to check the well-formedness of the xml file you are editing.  Vim will take you right to the errors, if there are any."}, {:name=>"Visual-Mark", :summary=>"Visual mark, similar to UltraEdit's bookmark", :description=>"This script uses Vim's \"sign\" capability to provide visual marks, similar to UltraEdit's bookmark. \n\n1.  For gvim, use \"Ctrl + F2\" to toggle a visual mark. \n     For both vim and gvim, use \"mm\" to toggle a visual mark.\n2.  Use \"F2\" to navigate through the visual marks forward in the file.\n3.  Use \"Shift + F2\" to navigate backwards.\n\nIf you do not like the highlighting scheme, you could change \"SignColor\" in the script.  Feedbacks are welcome. :-)\n\n"}, {:name=>"errsign", :summary=>"Puts \">>\" signs at lines with errors", :description=>"This is a very simple script. It may be very bugous.\nJust type \\es and it puts \">>\" signs at all error lines."}, {:name=>"log.vim", :summary=>"coloring errors and warnings of make/gcc output", :description=>"This script easily colors errors and warnings in the output of a make / gcc call.\nIt's syntax matches mixed German/English, which depends on the linux/make/gcc installation.\n"}, {:name=>"msvc2003", :summary=>"Support Miscrosoft Visual C++ 2003 ToolKit", :description=>"Next version editing..."}, {:name=>"scalefont", :summary=>"Switch between your favourite font/gui settings", :description=>"Sometimes you want to change the font size without changing the window \ngeometry. This plugin tries to set the 'guifont', 'columns', and 'lines' to \nappropriate values in order to achieve this goal. You can define modes to \nquickly switch between your favourite gui configuration: fonts, window \nposition and size, guioption settings etc.\n"}, {:name=>"uc.vim", :summary=>"syntax for Intel Network Processor Microcode", :description=>"syntax color file for Intel Network Processor Microcode"}, {:name=>"commenter", :summary=>"A handy comment/uncomment plugin", :description=>"Usage：\n   In normal mode，press <Leader>c to comment/uncomment current line.\n   If current line is blank line and no non-blank line before it, insert file header comment. The file header comment use template files. These templates should be placed to  ~/.vim/plugin/templates/ directory. template file name is same as cvim plugin.\n   If current line is function declaration line, and if g:DoxygenFuncDesc is set to 1, insert Doxygen style function comment. Else use function comment template file.\n   In visual mode, press <Leader>c to comment/uncomment blocks. This only applies to c source or header files.\n\nMainly targeted:  c,h,cpp file modification\nAlso applicable：   java,sh,vim,awk,sed,perl,python file modification"}, {:name=>"OOP.vim", :summary=>"Object Oriented Programming", :description=>"This is my first try to make O.O.P. style in vim, i'm only a beginner in Vim, but i'm sure it will be usable for you all.\n\nSimple and easy. This is the first version so expect bugs!!\n\nThis is only an utility, and I will not assume any responsibility using it.\n"}, {:name=>"cream-iso639.vim", :summary=>"Find ISO 639 language abbreviations and names", :description=>"Find the matching ISO 639 (http://www.loc.gov/standards/iso639-2/langcodes.html) language abbreviation or name when passed the other.\n\nUsage\n\n  Cream_iso639(word, ...)\n\no Test {word} for match of ISO639-compliant language name, 3- or 2-letter abbreviation:\n  * Returns name if {word} matches either abbreviation.\n  * Returns 3-letter if {word} matches name.\n  * Returns 0 if no match is made.\no Use {optional} argument to force a given return:\n  * Returns 3-letter if {optional} is \"3\" and {word} matches.\n  * Returns 2-letter if {optional} is \"2\" and {word} matches. (If no 2-letter exists, the 3-letter is returned.)\n  * Returns name if {optional} is \"name\" and {word} matches.\n  * Returns 0 if no match is made.\no Matching is case-insensitive. But return values are capitalized according to the standard. (Name is title case, abbreviations are lower case.)\no In a number of cases, ISO639-2 allows multiple descriptive names for a language. \n  * When passed the matching abbreviation, the function will return the preferred description (listed first in the ISO list). \n  * Conversely, any of the listed descriptions can be matched, not just the preferred.\n\nExamples\n\n  Condition where 2- and 3-letter abbreviations exist a language:\n\n  :echo Cream_iso639(\"abk\")                      returns \"Abkhazian\"\n  :echo Cream_iso639(\"ab\")                        returns \"Abkhazian\"\n  :echo Cream_iso639(\"Abkhazian\")           returns \"abk\"\n\n  :echo Cream_iso639(\"Abkhazian\", \"3\")    returns \"abk\"\n  :echo Cream_iso639(\"abk\", \"3\")                returns \"abk\"\n  :echo Cream_iso639(\"ab\", \"3\")                  returns \"abk\"\n  :echo Cream_iso639(\"Abkhazian\", \"2\")    returns \"ab\"\n  :echo Cream_iso639(\"abk\", \"2\")                returns \"ab\"\n  :echo Cream_iso639(\"ab\", \"2\")                  returns \"ab\"\n  :echo Cream_iso639(\"Abkhazian\", \"name\")  returns \"Abkhazian\"\n  :echo Cream_iso639(\"abk\", \"name\")        returns \"Abkhazian\"\n  :echo Cream_iso639(\"ab\", \"name\")          returns \"Abkhazian\"\n\n  Condition where a 2-letter abbreviation doesn't exist for language:\n\n  :echo Cream_iso639(\"Achinese\")             returns \"ace\"\n  :echo Cream_iso639(\"ace\")                       returns \"Achinese\"\n  :echo Cream_iso639(\"Achinese\", \"2\")      returns \"ace\"\n  :echo Cream_iso639(\"ace\", \"2\")               returns \"ace\"\n\n  Name or abbreviation unmatched:\n\n  :echo Cream_iso639(\"not-a-name\")         returns 0\n  :echo Cream_iso639(\"not\")                       returns 0\n\n"}, {:name=>"cream-iso3166-1", :summary=>"Find ISO 3166-1 country codes and names", :description=>"\nFind the matching ISO3166-1 (http://en.wikipedia.org/wiki/ISO_3166-1) country code or name when passed the other.\n\n\nUsage\n\n  Cream_iso3166_1(word, ...)\n\no Test {word} for match of iso3166_1-compliant country name, 3- or 2-letter abbreviation, or 3-digit numerical code:\n  * Returns name if {word} matches either abbreviation.\n  * Returns 2-letter if {word} matches name or number.\n  * Returns 0 if no match is made.\no Use {optional} argument to force a given return:\n  * Returns 3-letter if {optional} is \"3\" and {word} matches.\n  * Returns 2-letter if {optional} is \"2\" and {word} matches.\n  * Returns name if {optional} is \"name\" and {word} matches.\n  * Returns number if {optional} is \"number\" and {word} matches.\n  * Returns 0 if no match is made.\no Matching is case-insensitive. But return values are capitalized according to the standard. (Name is title case, abbreviations are UPPER CASE.)\n\n\nExamples\n\n  :echo Cream_iso3166_1(\"AND\")               returns \"Andorra\"\n  :echo Cream_iso3166_1(\"AD\")                  returns \"Andorra\"\n  :echo Cream_iso3166_1(\"Andorra\")          returns \"AD\"\n  :echo Cream_iso3166_1(\"020\")                 returns \"AD\"\n\n  Return format forced:\n\n  :echo Cream_iso3166_1(\"AND\", \"3\")        returns \"AND\"\n  :echo Cream_iso3166_1(\"AD\", \"3\")           returns \"AND\"\n  :echo Cream_iso3166_1(\"Andorra\", \"3\")   returns \"AND\"\n  :echo Cream_iso3166_1(\"020\", \"3\")          returns \"AND\"\n\n  :echo Cream_iso3166_1(\"020\", \"2\")          returns \"AD\"\n  :echo Cream_iso3166_1(\"020\", \"name\")   returns \"Andorra\"\n  :echo Cream_iso3166_1(\"AD\", \"number\") returns \"020\"\n\n  Name or abbreviation unmatched:\n\n  :echo Cream_iso3166_1(\"not-a-name\")     returns 0\n  :echo Cream_iso3166_1(\"not\")                   returns 0\n\n"}, {:name=>"HTMLxC.vim", :summary=>"Edit hex color codes in HTML files easily using rgb decimal; Perl req&#039d.", :description=>"I&#039ve found that the default installed programs on my platform include several that specify colors as decimal r,g,b but none offer to show the color as the hexadecimal triplet used in HTML. It got to be very annoying to have to use a color browser or other graphics tool, then manually convert a color I liked to hex, before being able to even try out a color in a Web page I was building.\n\nThis small plugin utility just identifies the hex color spec under the cursor and pop-up dialogs (on GUI Vim) or prompts on the Vim commandline (on console Vim) for a decimal r g b -style spec (space-separated) and then inserts it as hex in replacement of the existing hex string."}, {:name=>"vimgrep.vim", :summary=>"Editing utilities using grep/find without external grep/find programs", :description=>"grep/find utility wholly contained in Vim.  Commands implemented specifically to aid the editing task, not just find pattern matches.  Vimgrep() provides grep utility without an external grep type program.  It includes :help documentation grep-ing, selective or mass editing of files with matches, and display of output to command line or a named buffer.  Vimfind() provides find utility without an external find type program and offers same selective/mass editing as Vimgrep(). See doc directory in package for various documentation file formats and select one for more information."}, {:name=>"array.vim", :summary=>"Implements multi-dimensional arrays in vim.", :description=>"array.vim implements multi-dimensional arrays in vim.  It has creation, deletion, manipulation, utility, and infomation commands/functions.  Usage is as simple as\n\nlet myVar=b:array:1:2:3:\n\nIncludes an example usage file.  Use ARRAYSYN and ARRAYUSE for information or see included documentation."}, {:name=>"vimtabs.vim", :summary=>"plugin for mozilla-like tabs", :description=>"When pressing <F2> and arrow keys, you get to switch quickly between buffers.\nThis plugin is usable in both console and gui mode.\n"}, {:name=>"CodeReviewer.vim", :summary=>"Utility for code reviews (using quickfix)", :description=>"If you do code reviews on a regular basis, this script could be of help to you. This tip is about - \n1. Helping the reviewer review code \n2. Helping the author in collating reviews from various peers \n3. Helping the author in fixing the review comments\n\nTypical review session: \n1. A reviewer open the code to review, positions the cursor on the line he/she wants to comment on and types \"\\ic\" - this puts the file name, the line number, the reviewer's initials and the defect type in the review file\n2. The comment is typed next to the line number and can span multiple lines\n3. Send the comments to the author of the code \n4. The author collates the inputs from various reviewers into one file (by simply concatenating them) and sorts it. Now the comments are arranged per file, in the order of line numbers (in a file called say, all_comments.txt) \n5. Using the :cfile all_comments.txt (or :CheckReview) the author can now navigate through all the comments.\n\nThis script is based on vimtip #761. Thanks to all for feedback! Specifically to Salman for providing an implementation for automating the step between saving position in the file being reviewed and inserting a comment in the review file."}, {:name=>"cube.vim", :summary=>"Cube engine script syntax file", :description=>"This is a syntax file for Cube Engine cfg files. It applies to autoexec.cfg, package.cfg and any other file which uses Cube script.\n\nMore info about Cube Engine here: http://cube.sourceforge.net/\n\nThis is my first syntax file. Maybe it isn't the best, but it works very well.\n\nFeatures:\n - Support for keyboard keys names only after \"bind\" command. (MOUSE1, MOUSE2,... is also supported)\n - Support for entities names only after \"newent\" and \"clearents\" commands.\n - Support for all cube commands of version 2004_05_22, except \"keymap\" (which you should not use, according to docs).\n - Recognizes special aliases \"level_trigger_xx\" and \"nextmap_xx\".\n\nI don't know if it will work on Vim 5."}, {:name=>"uc.vim-indent", :summary=>"indent file for Intel Network Processor Microcode", :description=>"indent for Microcode"}, {:name=>"uc.vim-ftplugin", :summary=>"filetype plugin for Intel Microcode", :description=>"filetype plugin for Microcode"}, {:name=>"sf.vim", :summary=>"vim.sf.net colorscheme (GUI only)", :description=>"Since I found these colors very nice and appropriate, here's\na colorscheme trying to match the webpage colors.\nComments/feedback welcome as usual.\n\n\n"}, {:name=>"monday", :summary=>"Lets you use ctrl-a and ctrl-x on names of months and weekdays", :description=>"Monday.vim extends the normal-mode commands <ctrl-a> and <ctrl-x> so that they can be applied to the names of months and weekdays. For example, if you are standing on the word \"July\" and presses <ctrl-a>, the word is replaced by \"August\".\n\nThe script tries to preserve the case of the letters, and can handle the following three variants:\n\n(1) All lower-case (\"july\" becomes \"august\").\n(2) All upper-case (\"JULY\" becomes \"AUGUST\").\n(3) First letter upper-case, the rest lower-case (\"July\" becomes \"August\").\n\nTodo:\n\nOnly English is supported; although it's easy to add any word pairs you want, the script cannot yet handle words that have two or more possible successors/predecessors.  For example, the 4th month is called \"April\" in both English and Swedish, but its successor is called \"May\" and \"Maj\", respectively. So, if you add the Swedish months and then try to increment the word \"April\", the script won't be able to figure out which word (\"May\" or \"Maj\")  it should be replaced with.\n"}, {:name=>"ST20-compiler-plugin", :summary=>"Vim compiler plugin for ST20 C compiler", :description=>"ST20 C compiler plugin. \nRead the heading of the file for more information."}, {:name=>"R.vim", :summary=>"Send R code from a VIM buffer to R", :description=>"Send R code from a VIM buffer to R on Unix type systems using funnel.pl from vimscript #221. Contains\n\nREADME.R_with_vim\nftplugin/r.vim\nftplugin/rnoweb.vim\nftplugin/funnel.pl\nsyntax/rhelp.vim\nsyntax/rnoweb.vim\nMakefile.rnoweb\n\nFernando Henrique Ferraz Pereira da Rosa is now a coauthor of this plugin (starting from version 0.03). He helped me fixing a bug and started the syntax file for mixed highlighting of Latex and R syntax (syntax/rnoweb.vim).\n\nI set up a small project page for this plugin, featuring a screenshot:\n\nhttp://www.uft.uni-bremen.de/chemie/ranke/?page=vim_R_linux\n\nYou can browse the subversion repository where these files are at home: http://kriemhild.uft.uni-bremen.de/viewcvs/?root=vim\n\nAlternatives for Mac Os X include vimscript #1741 and vimscript #2104.\n\nUnder Windows, I am now using a quite simple solution, consisting of the installation of the rcom package for R which requires statconnDCOM from http://rcom.univie.ac.at and ActiveState Perl in the PATH (watch out if you use R tools, because GNU perl does not have the DCOM interface, so ActiveState perl needs to be first in the path).\nMy ftplugin/r.vim under Windows:\n\nperl << EOF\nsub rsourceclipboard\n{\n    use Win32::OLE;\n    my $R = Win32::OLE->GetActiveObject('RCOMServerLib.StatConnector')\n          || Win32::OLE->new('RCOMServerLib.StatConnector');\n    $R->Evaluate(\"source('clipboard', echo=TRUE)\");\n    $R->Close;\n}\nEOF\n\nvnoremap <buffer> r \"*y:perl rsourceclipboard<CR>\n\nThis means that the visual selection is pasted to the clipboard and the clipboard content is sourced by R when the key \"r\" is pressed in visual mode.\n\n\n\n"}, {:name=>"octave.vim", :summary=>"Send Octave code from a VIM buffer to Octave", :description=>"Send Octave code from a VIM buffer to Octave using funnel.pl from vimscript #221. Contains\n\nREADME.octave_with_vim\nftplugin/octave.vim\nftplugin/funnel.pl\n\nftplugin/funnel.pl is from Larry Clapp (vimscript #221). It is used for creating \na pipe that Octave is listening to.\n\nYou can help improving these files via my subversion repository at http://kriemhild.uft.uni-bremen.de/svn/vim"}, {:name=>"delete.py", :summary=>"Makes the delete key remove 'softtabspace' characters, similar to backspace", :description=>"I usually edit Python code that has a lot of whitespace indenting.\nThe backspace key works nicely, and I'm able to delete indents,\nbut I'm unable to do so with the <Del> key.\nI've searched the web, searched the scripts and tips, asked on the vim mailing list,\nasked on IRC and read a lot of documentation.\nIn the end, I found it easier to write a Python script that gave me the desired behaviour.\nSo, here it is. It works for me."}, {:name=>"groff-keymap", :summary=>" groff latin1/cp1252/utf-8 keymap conversion file", :description=>"This is a demonstration of the kind of abuse vim can handle and the\nmischief you can accomplish without delving into VimL \nprogramming. You don't need emacs to brew coffee....\n\nThis keymap works with groff and the default Western fonts\nsupplied with the PostScript output device. It should work with ATT ditroff\nas well because I used the old ATT syntax, but you may be in for a disappointing\nsurprise in such case: accented characters will be mostly faked.\n\nThis file covers codepage win-1252, because that's what I use in my\nworkstation. If you use some sort of Unix, your default codepage\nwill be ISO-8859-1, also known as Latin-1.  There are several\nobvious differences, all additions in the decimal codepoints 128-159\nare control codes in Latin-1.\n\nIf you need a different keymap, say for latin2 or cyrillic, you are\nwelcome to use these example files as a starting point. As well,\nI'll appreciate if you contribute them back to this package in order to\nhave a centralized distribution (you are welcome to take over\nownership, I don't look much at this package anymore!). I strongly\nrecommend that in such case, you use groff 1.19.1 or a later version\nbecause it can handle proper unicode decomposition.\n\nWhile testing these keymap files I discovered an intersting\nside-effect due to the way vim manages keymap files. Namely, that\nthe _active_ key mappings are those you can actually access with the\nkeyboard while in insert mode. If you can switch your keyboard\nmappings on-the-fly, as recent versions of Windows, can, you can\ntype several different Western Europe languages by switching\nkeyboard mappings at the OS level.\n\nFor example, in my keyboard with an Standard Spanish layout, there\nis no way to access directly an etsset «ß» using this keymap,\ntherefore the keymapping doesn't work. That is, I can type\n<ctr-k>ss but it won't expand to the troff request \\(ss --- \\[ss] in\nnative groff parlance --- but rather the 8-byte code «ß» as defined\nin the encoding; if I switch the keyboard driver to some German keybaord\ndriver (e.g., Swiss German) it will work though.\n"}, {:name=>"The-Mail-Suite-tms", :summary=>"Send, Receive and Organize mail from within VIM", :description=>"____________________________________________________________\nThe Mail Suite (TMS):  Send, Receive and Organize Mail\n                       via an Editable User Interface (EUI)\n                       using VIM As the Editor\n                       (on WINDOWS and on Unix)\n                       (relies on perl)\n____________________________________________________________\nMotivation    \n\nPeople who know VIM (especially those who have discovered\nexplorer.vim) are aware of the speed, the customized form\nand, once learned, the ease of issuing commands and\nprocessing the results of the commands while in VIM.  This\nplugin, The Mail Suite (tms), exploits that power of VIM in\nthe domain of electronic mail: for the tasks of sending,\nreceiving and organizing mail.\n\n____________________________________________________________\nThe Command Set (Overview) \n\nSince The Mail Suite builds on VIM's command set, there are\nonly a handful of new commands (or tasks):\n\n   - Get emails (from a POP3 server) and save in raw (.eml) format\n   - Send a buffer (even one without a file) or files as an email (via a SMTP server)\n   - Index (create a ''table of contents'' for) a folder of emails\n   - Open an email from the index (and then open the next or the previous email)\n   - Reply, Forward or Acknowledge an email\n   - Delete, Move or Copy emails\n\n____________________________________________________________\nContrast of Interfaces for Mail Clients \n\nHere's a contrast that makes an aspect of the power of VIM\nas a user interface clear:  other email clients need lots\nmore commands than the mail-specific commands listed above\nsince they need to provide a user interface;  and their\ninterface is restrictive (compared to that of VIM) in regard\nto the means for navigating and manipulating the stuff on\nthe screen and in not allowing keystroke customization.\n\n"}, {:name=>"browser.vim", :summary=>"web browser plugin", :description=>"This plugin provides vim with web browsing and html formatting capabilities. \nIt includes support for history, bookmarks, text highlighting and more. The \nmain motivation is browsing documentation available in html, so don't expect \nto see any flash animation :)\n\nThe plugin is implemented using vim's ability to embed perl, so you will \nneed to have a perl enabled version of vim to use it. In addition, several \nperl modules are required. The full details are in the INSTALL file.\n\nDocumentation is available in pod form in 'browser.pod', and as a usual vim \nhelp file.\n\nI wrote and tested it with vim version 6.3 and perl 5.8.4 on linux. I expect \nit to work on any variant of unix. An effort was made to make it work on other \nplatforms as well, but this remains mostly untested.\n\nPlease send me any feedback.\n\nEnjoy!\n"}, {:name=>"InteractHL.vim", :summary=>"Interactively generate colorscheme or syncolor.vim", :description=>"Commands:\n  Syncolor\n    creates syncolor.vim file\n  ColorScheme bg name\n    creates <name>.vim file with colorscheme header setting background='<bg>' [dark|light] and\n    colors_name='<name>'\n  IactHl\n    creates Hilite.vim file\n\nFiles are created in g:HiliteFilesDir, default '~'\n\nUtility to interactively create highlight commands file (syncolor.vim|<name>.vim|Hilite.vim) which can be copied to appropriate  runtimepath directory as for automatic execution at Vim startup.  Previous settings are saved in a file named 'yymmddhhmmssHilite.vim'.\nUse: ?? for online key mapping reference.\n\nThe utility opens 3 windows, the top window displays the major highlight groups with their names highlighted according to the current settings.  The middle window lists the highlight commands currently in effect to produce the output shown in the top window.  The bottom window lists the RGB names available for the current Vim release.\n\nPlace the cursor on the line you wish to modify in the middle window.  Place the cursor on the RGB value you want in the bottom window.  Use the mapped key sequences to set the line.  The key sequences are:\n\nfg   Set foreground to RGB value\nbg  Set background to RGB value\nno  Set attributes to 'NONE'\nbo  Add 'bold' to attributes\nit    Add 'italic' to attributes\nre   Add 'reverse' to attributes\nst   Add 'standout' to attributes\nun  Add 'underline' to attributes"}, {:name=>"curBuf.vim", :summary=>"source/execute current file from toolbar or function key", :description=>"Defines commands and key mappings for vim/gvim, and gvim toolbar icons and menu entries for sourcing or executing the current buffer's file.  Completely configurable from your vimrc."}, {:name=>"vsutil.vim", :summary=>"function primitives for Vim scripts.", :description=>"Primitive functions for Vim Scripts.  Used by various of my Vim Scripts.  See doc/vsutil.[html|rtf|ans|txt|doc] for detailed information."}, {:name=>"DavesVimPack", :summary=>"Not Very Popular: Bad Reviews", :description=>"BYE-BYE!  WE GONE!\n"}, {:name=>"Menu-Autohide", :summary=>"A plugin to hide the menubar when the window shrinks.", :description=>"This plugin hides the GUI menu bar when the window is reduced to just a few lines and shows it again when the window is made larger.\n\nThis behavior can significantly save on screen space when you're in the habit of temporarily collecting random information in a new vim which then gets stuffed into a corner of the screen.\n\n"}, {:name=>"pygtk_color", :summary=>"PyGtk2 color selection dialog", :description=>"This will add a menu item in gvim called 'Color' that will allow you to insert a web style hex color value (like '#ffffff'), or python RGB tuple (like (255,255,255) ) after the current line (if you know how to insert at current position, send me an email: david.konsumer at gmail. )\n\nScreenshot: http://konsumer.memebot.com/vim_color_select.png\n\nIncluded is a python script called 'color_select' that requires pygtk.\n\nIn windows, you could write one using VB, or install python and pygtk to use it.\n\nMaybe eventually I'll write a wxwindows dialog for everybody.\n\nThe reason I did this, instead of using http://www.vim.org/scripts/script.php?script_id=927 was that I wanted to be able to grab color values from the screen, and I like the gtk2 color dialog alot.\n\nI tested this on Debian unstable with gvim 6.3, python  2.3.4 and pygtk 2."}, {:name=>"Vive.vim", :summary=>"Single or multi line Vim script code executed with a keystroke", :description=>"Enter Vim script code, multi or single line, and have it executed with a single key stroke.  Results are captured and entered into the buffer for examination. For proto-typing, learning, scratchpad, testing, and other uses.  See http://dsilvia.home.mchsi.com for doc"}, {:name=>"actionscript.vim--Leider", :summary=>"ActionScript 3.0 syntax file", :description=>"Updated Igor Dvorsky's ActionScript 1.0 color syntax file vimscript #413 to include ActionScript 2.0 and ActionScript 3.0 keywords."}, {:name=>"greputils", :summary=>"Interface with grep, find and id-utils (not just another grep wrapper)", :description=>"Derived from my original idutils.vim, this script is a lot more powerful and useful than ever. The commands that make use of Vim built-in grep are especially useful and unique (thanks to Tim Chase for the idea).\n\n  - There are many plugins that wrap the Vim built-in :grep command and try\n    to simplify the usage. However this plugin aims at providing two\n    specific features:\n        - Escape the arguments such that the arguments can be passed to the\n          external grep/lid/find literally. This avoids unwanted\n          interpretations by the shell, thus allowing you to concentrate on\n          the regular expression patterns rather than how to escape them.\n          This has been tested well on both windows and UNIX with\n          sh/bash/cmd as command shells.\n        - Allow you to preview the results before letting Vim handle them as\n          part of quickfix. This, besides allowing you to further filter the\n          results, also prevents Vim from adding buffers for files that are\n          uninteresting and thus help reduce the number of buffers. It also\n          supports basic quickfix commands that can be used to open a buffer \n          without needing to convert it to a quickfix window. You can\n          consider it as a lightweight quickfix window. The preview window\n          is also great if you just want to take a peak at the results, not\n          really navigate them (such as to get an estimate of where all a\n          reference is found).\n    - Also provides commands to run the Vim built-in :g/re/p on multiple\n      buffers using :argdo, :bufdo and :windo commands and redirect the\n      output to the grep-results preview window. You can then convert the\n      results to a quickfix window, or use the preview window to navigate.\n    - As a bonus, the plugin also works around Vim problem with creating a\n      number of unnamed buffers as you close and open quickfix window\n      several times. This helps keep buffer list uncluttered.\n                                                                              \n  - The command merely wraps the built-in :grep, :grepadd, :cfile and\n    :cgetfile commands to create the quickfix list. The rest of the quickfix\n    commands work just like they do on the quickfix results created by using\n    only the built-in functionality. This also means that the plugin assume\n    that you have the options such as 'grepprg', 'shellpipe' are properly\n    set. Read the help on quickfix for the full list of commands and options\n    that you have.\n                                                                              \n      :h quickfix \n                                                                              \n  - Other than the preview functionality which enables filtering, the plugin\n    also provides an easy way to specify a number of filter commands that\n    you can chain on the output of the grep/lid/find, each prefixed with\n    \"+f\". The arguments to the filter command are themselves escaped, the\n    same way as the grep command arguments as described above.\n  - Supports GNU \"grep\" and MS Windows \"findstr\" for running \"find-in-file\"\n    kind of searches, id-utils \"lid\" for running index searches, and GNU\n    \"find\" to search for file names. If you need to add support for a new\n    grep command or a grep-like tool, it is just a matter of modifying a few\n    internal variables and possibly adding a new set of commands.\n  - On windows, setting multiple ID files for IDPATH doesn't work, so the\n    plugin provides a workaround by running \"lid\" separately on each ID file\n    if there are multiple ID files separated by \";\" in the IDPATH.\n  - Make sure that the 'grepprg' and 'shellpipe' options are properly set\n    and that the built-in :grep itself works. For GNU id-utils, make sure\n    IDPATH environmental variable is set or path to the ID file is specified\n    with the \"-f\" argument in the g:greputilsLidcmd setting. You can also\n    specify the \"-f ID\" arguments to the :IDGrep command.\n  - Uses EscapeCommand() function from genutils.vim plugin that supports\n    Cygwin \"bash\", MS Windows \"cmd\" and Unix \"sh\" for shell escaping. Other\n    environments are untested.\n  - Defines the following commands:\n                                                                              \n      Grep, GrepAdd, IDGrep, IDGrepAdd, Find, FindAdd\n      Grepp, GreppAdd, IDGrepp, IDGreppAdd, Findp, FindpAdd\n                                                                              \n    The second set of commands are used to open the results in a preview\n    window instead of directly in the quickfix window. And those that have a\n    suffix of \"Add\" add the new list of results to the existing list,\n    instead of replacing them (just like in :grepadd). This can be very\n    useful in combination with the preview commands.\n                                                                              \n    You can open the preview window at anytime using GrepPreview command.\n    Once you are in the preview window, you can filter the results using the\n    regular Vim commands, and when you would like to browse the results\n    using Vim quickfix commands, just use Cfile and Cgetfile commands, which\n    are functionally equivalent to the built-in cfile and cgetfile commands\n    respectively, except that they don't take a filename as argument use the\n    current preview window contents to create the error-list. There are\n    also, GOpen, GClose and GWindow commands defined on the lines of copen,\n    cclose and cwindow respectively.\n                                                                              \n    Use the GrepPreviewSetup command to convert an arbitrary buffer\n    containing :grep output as a preview window. This is useful to take\n    advantage of the quickfix like functionality that the plugin provides on\n    grep results generated by your own commands.\n                                                                              \n    If cmdalias.vim is installed, it also creates aliases for the Grep,\n    GrepAdd, Cfile and Cgetfile commands to the corresponding built-in\n    commands, i.e., grep, grepadd, cfile and cgetfile respectively.\n                                                                              \n    The preview window supports the following commands:\n      preview command     quickfix command ~\n      GG [count]          cc [count]\n      [count]GNext        [count]cnext\n      [count]GPrev        [count]cNext, cprevious\n      <CR>                <CR>\n      <2-LeftMouse>       <2-LeftMouse>\n                                                                              \n    The commands supports [count] argument just like the corresponding\n    quickfix command.\n                                                                              \n  General Syntax:\n      <grep command> [<grep/lid/find options> ...] <regex/keyword>\n                     [<filename patterns>/<more options>]\n                     [+f <filter arguments> ...]\n                                                                              \n    Note that typically you have to pass in at least one filename pattern to\n    grep/findstr where as you don't pass in any for lid.\n  - Also defines the following commands:\n                                                                              \n      ArgGrep, ArgGrepAdd, BufGrep, BufGrepAdd, WinGrep, WinGrepAdd\n                                                                              \n    You can use the above commands to run Vim's built-in g/re/p command to\n    find matches across buffers loaded in the current session, without\n    needing any external tools. Each of the above commands (and their \"Add\"\n    variants), run g/re/p command on a bunch of buffers loaded using one of\n    :argdo, :bufdo and :windo commands respectively. These commands are\n    designed to always open the results in the preview window. If you like,\n    you can convert it to a quickfix result, by using :Cfile or :Cgetfile\n    command.\n                                                                              \n  General Syntax:\n      [range]<Arg|Buf|Win>Grep[Add] [<pattern>]\n                                                                              \n    If you don't specify a pattern, the current value in search register\n    (@/) will be used, which essentially means that the last search pattern\n    will be used. See also g:greputilsVimGrepSepChar setting under\n    installation section.\n                                                                              \n    The range, if not specified, defaults to all the lines in all the\n    applicable buffers. If you explicitly specify a range, please note that\n    a range such as \"%\" or \"1,$\" is translated to the absolute line numbers\n    with reference to the current buffer by Vim itself, so it is not the\n    same as not specifying at all. This means, if there are 100 lines in the\n    current buffer, specifying \"%\" or \"1,$\" is equivalent to specifying\n    \"1,100\" as the range. The range is more useful with the \"GrepBufs\"\n    command mentioned below.\n  - Also defines \"GrepBufs\" command that can be used to grep for a Vim\n    regular expression pattern in the specified set of buffers (or the\n    current buffer). If no pattern is specified it will default to the\n    current search pattern. Buffers can be specified by name (see :h\n    bufname()) or by their number using the #<bufno> notation. You can also\n    complete the buffer names by using the completion character (<Tab>).\n                                                                              \n  General Syntax:\n      [range]GrepBufs[Add] [pattern] [buffer ...]\n                                                                              \n    This by syntax is very close to the Unix grep command. The main\n    difference being that it uses Vim regex and it searches the buffers\n    already loaded instead of those on the file system.\n                                                                              \n    The range has same semantics as for any of the \"arg\", \"buf\" or \"win\" grep\n    commands, but it is more useful here while limiting the grep for one\n    buffer alone.\n                                                                              \nExamples:\n  The following examples assume that you are using GNU grep for both the\n  'grepprg' and as the g:greputilsFiltercmd.\n                                                                              \n  - Run GNU grep from the directory of the current file recursively while\n    limiting the search only for Java files.\n      Grep -r --include=*.java \\<main\\> %:h\n  - Run lid while filtering the lines that are not from Java source.\n      IDGrep main +f \\.java\n  - Run lid while filtering the lines that contain src.\n      IDGrep main +f -v src\n  - Find Java files starting with A and ending with z under src.\n      Find src -iname A*z.java\n                                                                              \n  - To search for the current word in all the files and filter the results\n    not containing \\.java in the grepped output. This will potentially\n    return all the occurences in the java files only. \n      IDGrep <cword> +f \\.java \n                                                                              \n  - If any argument contains spaces, then you need to protect them by\n    prefixing them with a backslash.  The following will filter those lines\n    that don't contain \"public static\".\n      IDGrep <cword> +f public\\ static\n                                                                              \n  - Run \":bufdo g/public static/p\" and show output in preview window:\n      BufGrep public\\ static\n\n\n\n\n\nSearch_key_words: idutils greputils greputil id-utils gnu id grep gid mkid lid windo argdo bufdo Hari Krishna Dara"}, {:name=>"HC12-syntax-highlighting", :summary=>"Syntax file for 68HC11/12 Assembly", :description=>"Contains the syntax defiinitions for writing assembly code for the Motorola 68HC11/12 family of microcontrollers."}, {:name=>"asp.vim", :summary=>"Macros and menus for ASP documents", :description=>"Almost each ASP keyword may be accessed by its short cut (and by the menu if using a GUI) in each of 3 modes.\nIf you don't like to use \"<F5>\" as a trigger you can change it to, for examle \"?\".\nOpen asp.vim in Vim editor and substitute :%s/<F5>/?/g\n"}, {:name=>"click.vim", :summary=>"Syntax file for the click language", :description=>"This is the syntax file for the click language of the Click Modular Router Project.\n(http://www.pdos.lcs.mit.edu/click/)\n\nThe syntax file has the following benefits:\n- Keyword highlighting\n- Decimal and hexadecimal number highlighting\n- Highlighting of\n  - Ethernet MAC addresses\n  - IPv4 addresses\n  - IPv6 addresses (to be improved)\n"}, {:name=>"cecutil", :summary=>"Some utilities used by several of my scripts (window positioning, mark handling)", :description=>" [CECUTIL V15 OR LATER REQUIRES VIMBALL V18 OR LATER FOR UNPACKING]\n\nThese routines are used by several of my utilities.  I'm loading them onto vim.sf.net to make it easier for GetLatestVimScripts to automate updates with them.\n\nMarks:\n     call SaveMark(markname)       let savemark= SaveMark(markname)\n     call RestoreMark(markname)    call RestoreMark(savemark)\n     call DestroyMark(markname)\n     commands: SM RM DM\n\nWindow Position:\n     call SaveWinPosn()        let winposn= SaveWinPosn()\n     call RestoreWinPosn()     call RestoreWinPosn(winposn)\n    \\swp : save current window/buffer's position\n    \\rwp : restore current window/buffer's previous position\n     commands: SWP RWP\n\nUser Maps:\n    call SaveUserMaps(mapmode,maplead,mapchx,suffix)\n\n    This function sets up a script-variable (ie. a variable that can generally be accessed only from within cecutil's own functions; see |s:|) called s:restoremap.  The selected user's maps are appended to this variable; the RestoreUserMaps() (|cecutil-restoreusermaps|) function uses the contents of this variable to restore user maps.\n\n    Some examples follow:\n\n        call SaveUserMaps(\"n\",\"\",\"webWEBjklh$0%;,nN\",\"HiMtchBrkt\")\n            normal mode maps for w, e, b, W, E, B, j, k, l, etc\n            (if any) are all saved in the variable\n            s:restoremaps_HiMtchBrkt >\n\n        call SaveUserMaps(\"n\",\"\",\"<up>\",\"DrawIt\")\n            the normal mode map (if any) for the <up> key is saved in\n            the variable s:restoremaps_DrawIt >\n\n        call SaveUserMaps(\"n\",\"\",\":F(\",\"HiMtchBrkt\")\n            the normal mode map for F( (if any) is saved in the\n            variable s:restoremaps_HiMtchBrkt\n\n    call RestoreUserMaps(suffix)\n\n        The usermaps saved by SaveUserMaps() with the given suffix will be restored (ie. s:restoremaps_{suffix}).  Example:\n\n        call RestoreUserMaps(\"HiMtchBrkt\")\n            will restore all user maps redefined for the HiMtchBrkt plugin\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#CECUTIL)\n"}, {:name=>"mingw.vim", :summary=>"Vim compiler file for MinGW.", :description=>"This is Vim compiler file for MinGW gcc distribution (http://www.mingw.org/). It use output from make (yes, you will need to write Makefile), and do proper redirection to Vim's temporary file.  "}, {:name=>"abap.vim--Piedallu-van-Wyk", :summary=>"Syntax highlighting for SAP ABAP / 4", :description=>"An alternate version of SAP ABAP syntax highlighting with:\n\n1. correct ABAP special table/symbol matching\n2. enhanced comprehensive keyword recognition.\n\nPlease mail comments and suggestions to:  marius@e.co.za"}, {:name=>"vimsh", :summary=>"simple Vim script shell command line interpreters", :description=>"vimsh and vimsh.bat are simple Vim script shell command line interpreters\nfor  UNIX and MSDOS respectively.  You type Vim script code into a .vimsh\nfile  then, using the appropriate interpreter, execute the file from  the\ncommand line.   The interpreter takes this code and encapsulates it  into\na  Vim  script function and calls the function, capturing any output  and\necho-ing it to the shell command line.\n\nExamples and doc files included in package"}, {:name=>"dsPIC30f", :summary=>"dsPIC30f syntax file", :description=>"As many new instructions were added for the PIC30f microcontrollers, this the new syntax file for PIC assembly language."}, {:name=>"BufOnly.vim", :summary=>"Delete all the buffers except the current/named buffer", :description=>":BufOnly without an argument will unload all buffers but the current one.\n\n:BufOnly with an argument will close all buffers but the supplied buffer name/number."}, {:name=>"ConfirmQuit.vim", :summary=>"Provides a confirm dialog when you try to quit vim", :description=>"A friend of mine was complaining that he closed vim unintentionally too often and wanted some sort of \"Are you sure?\" type of confirmation.  Thus, I wrote this plugin which will cause you to be prompted to confirm your desire to quit when you execute :q, :x, or :qw.\n\nNOTE:  This plugin requires graphical vim."}, {:name=>"fasm-compiler", :summary=>"a compiler script for Fasm", :description=>"A compiler script for Flat Assembler with a workable errorformat."}, {:name=>"python_calltips", :summary=>"Display Python code calltips and allows you to auto-complete your Python code", :description=>"This script simualate code calltips in a new bottow window of Vim.\nIn fact, it display python help doc strings of word under the cursor\nby scanning the imported modules in the current file.\nthis file Reference :    http://vim.sourceforge.net/scripts/script.php?script_id=73 \n\nNote: Because Python language is dynamic and the type of object is certain \n         when running, the calltips is only displayed for the part of all object.   \n\nIt require Python and Vim compiled with \"+python\" \nand MAKE SURE \"set iskeyword+=.\"\n    \nIt work well in my box in Win2000/XP + Vim6.3 + python2.3. \nIt can also work in GNU/Linux.\nNote: as I know, Vim6.2 come into conflict with Python2.3, becase Vim6.2\n         is compiled with Python2.1. you can update vim version to 6.3.\n        Maybe yours not.\n\nMore detail is in the header of script file. \n\nI write a tip(vimtip #778) about the script for all Pythoner. I wish you enjoy it."}, {:name=>"netrw.vim", :summary=>"Network oriented reading, writing, and browsing (keywords: netrw ftp scp)", :description=>"                STARTING WITH v66, NETRW REQUIRES VIM 7.0\n\nNetrw supports reading and writing files across networks.  One may use urls for filenames or one may use netrw's Nread and Nwrite commands. Netrw as provided here supports remote and local directory browsing, and supports  editing files across the network using a variety of methods.  Please report any bugs to NdrOchip@ScampbellPfamily.AbizM - NOSPAM.\n\n    Example:  vim ftp://user@machine/path\n\n(the following table should be columnar if fixed-width fonts are used in your browser)\n\n    REMOTE EDITING\n        :e dav://machine[:port]/path                      uses cadaver\n        :e fetch://[user@]machine/path                  uses fetch\n        :e ftp://[user@]machine[[:#]port]/path          uses ftp   autodetects <.netrc>\n        :e http://[user@]machine/path                    uses http  uses wget\n        :e rcp://[user@]machine/path                     uses rcp\n        :e rsync://[user@]machine[:port]/path         uses rsync\n        :e scp://[user@]machine[[:#]port]/path        uses scp\n        :e sftp://[user@]machine/path                    uses sftp\n\n    REMOTE READING\n        :Nread ?                                                     give help\n        :Nread \"machine:path\"                                 uses rcp\n        :Nread \"machine path\"                                 uses ftp   with <.netrc>\n        :Nread \"machine id password path\"              uses ftp\n        :Nread \"dav://machine[:port]/path\"                uses cadaver\n        :Nread \"fetch://[user@]machine/path\"            uses fetch\n        :Nread \"ftp://[user@]machine[[:#]port]/path\"    uses ftp   autodetects <.netrc>\n        :Nread \"http://[user@]machine/path\"              uses http  uses wget\n        :Nread \"rcp://[user@]machine/path\"               uses rcp\n        :Nread \"rsync://[user@]machine[:port]/path\"   uses rsync\n        :Nread \"scp://[user@]machine[[:#]port]/path\"  uses scp\n        :Nread \"sftp://[user@]machine/path\"             uses sftp\n\n    REMOTE WRITING\n        :Nwrite ?                                                      give help\n        :Nwrite \"machine:path\"                                  uses rcp\n        :Nwrite \"machine path\"                                  uses ftp   with <.netrc>\n        :Nwrite \"machine id password path\"               uses ftp\n        :Nwrite \"dav://machine[:port]/path\"                  uses cadaver\n        :Nwrite \"ftp://[user@]machine[[:#]port]/path\"     uses ftp   autodetects <.netrc>\n        :Nwrite \"rcp://[user@]machine/path\"                uses rcp\n        :Nwrite \"rsync://[user@]machine[:port]/path\"    uses rsync\n        :Nwrite \"scp://[user@]machine[[:#]port]/path\"   uses scp\n        :Nwrite \"sftp://[user@]machine/path\"               uses sftp\n        http: not supported!\n\n    REMOTE DIRECTORY BROWSING\n        :e [protocol]://[user]@hostname/path/\n        :Nread [protocol]://[user]@hostname/path/\n\n    LOCAL DIRECTORY BROWSING\n        :e /some/path/to/a/directory\n\nNetrw supports browsing both local and remote directories.  For remote directory browsing, one must include a trailing slash (/) on the path!  The interface resembles the file explorer that comes with vim v6.3 and earlier.  Variables which control netrw's optional behavior are named differently, however.\n\nFor remote directory browsing, the [protocol]://[user]@hostname/path/ is user-directory relative.  If you want to specify a full path, use another slash before the path: [protocol]://[user]@hostname//path/.\n\nNetrw supports many file-explorer maps, such as o v d D etc.  Look at the help for netrw-o, for example.  One may also use :Explore and relatives to explore directories with the current file.\n\nThe netrw.vba.gz vimball supports the \"x\" key to execute a file handler for various filetypes.  The file-handling is done in various ways:\n\n    * Under Windows, rundll32 is used with the FileProtocolHandler\n    * If unix and kfmclient exists and is executable, it is used\n    * If unix and gnome-open exists and is executable, it is used\n    * Otherwise, the NetrwFileHandler.vim file handling script is used\n\nWith this feature, one may press the \"x\" key when the cursor is atop a filename and invoke an extension-based file handler to do things like display image files, invoke ghostscript on PostScript files, run OpenOffice or Word, etc.\n\nRECENT NETRWs REQUIRE VIM V7.2\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#NETRW)\n"}, {:name=>"cscope_win", :summary=>"Display cscope output in a separate window similar to emacs", :description=>"This plugin is a c source code browser which uses the standard cscope utility. It is similar to the csqf option provided in vim. But it has an additional advantage of maintaining the tag stacks which is not available while using csqf.\nThis script doesn't create a cscope connection. The user needs to create a cscope connection before using this script.\nIt is very much similar to the cscope window of emacs/xemacs."}, {:name=>"lindo.vim", :summary=>"Syntax highlighting for LINDO (Linear, INteractive, and Discrete Optimizer)", :description=>"A syntax highlighting file for LINDO (Linear, INteractive, and Discrete Optimizer).\n\nPlease e-mail comments and suggestions with subject \"vim\".\n\n"}, {:name=>"VUT", :summary=>"Vim Universal Templates", :description=>"VUT - Vim Universal Templates are direct continuation\nof VHT Script #988. Difference is you can define comment\nstrings and use editable or library tags in every type of\nfile (html, xhtml, css, javascript, cpp, tex, vim, etc.).\n\nWhen migrating from VHT - \nHAVE TO CHANGE\n- change name of core file from *.htmlmain into *.vutmain\n- default comment strings are /*, */, script package\n  is providing configuration for popular types of files:\n\txhtml, html, tex, vim\n\nNOT HAVE TO CHANGE\n- extensions of files are still the same (vhl, vht)\n\nOld commands are saved for backwards compatibility but added new set of\ncommands beginning with VUT or VUL. Note - VH commands may be dropped in\nfuture.\n\nAdditional changes:\n- VULupdate/VUTupdate can take name of library as an argument. Example:\n\t:VULupdate panel.vhl\n\tThis will update contents of LibraryItem panel.vhl regardless of cursor\n\tposition. Superuseful in connection with :argdo family. Argument had be\n\ta full path with .vhl extension.\n- added: use ~/Library/ for global library items for VULshow.  \n- fixed: VUTcommit.\n"}, {:name=>"replvim.sh", :summary=>"Allow a read eval print loop and vim to play nicely together", :description=>"UNIX command-line only\n\n Usage : replvim.sh [options] replname code_type file\n\nRuns a screen/vim session on the given file so that one window\nholds a repl and another window holds vim. \nHit:\n<leader>e    to eval the current expression \n<leader>r     to evaluate the given marked range\n<leader>f     to evaluate the whole file\nctrl-a <TAB>  to switch windows to the repl \nctrl-a \\      to exit everything \nSet the leader in vim with \n:let mapleader = \",\" \nreplacing \",\" with the key you like the most\n\nArguments (wrap these in an alias or sh script):\n replname   The repl being used (ocaml, bigloo, chicken have been tested)\n code_type  Can be 'lisp' for lisp-like or 'ocaml' \n file               The file for vim to edit\n\nOptions:\n --lines n   Use n lines of screen space for the repl\n --nopipe   Use files instead of pipes. This can be used when vim 6.3\n                    gives FSYNC errors when writing to pipes on some OSes.\n --echo      Echo the commands being sent to the repl and allow access\n                   to them in the readline history\n\nRequires (on your PATH):\n  socat (http://www.dest-unreach.org/socat/)\n  screen (http://www.gnu.org/software/screen/)\nif you don't have these your life will be much richer for obtaining them\n\n(at saul (dot alien-science org)) welcomes your fixes and extensions\n\n"}, {:name=>"xmms.vim", :summary=>"Control xmms from within VIM", :description=>"This script maps xmms control functions to the following functionkeys:\n\nF6        Decrease volume by 5%\nF7        Increase volume by 5%\nF8        Show title of currently playing song\nF9        Open XMMS\nS-F9    Close XMMS\nF10      Start playing\nS-F10  Stop playing\nF11      Pause playing\nS-F11  Toggle shuffle\nF12      Play next\nS-F12  Play previous"}, {:name=>"HiColors", :summary=>"Colorscheme display and editor", :description=>"You'll get to see your colornames' colors and edit your colorscheme with the hicolors ftplugin/syntax/help files.  Leftclick on any colorname and you'll bring up the help page on that colorname (if any).\n\nTo see an example, click on\n\n\thttp://mysite.verizon.net/astronaut/vim/colors/hicolors.html\n\nto see hicolors displaying the astronaut colorscheme (vimscript#122) color selections for the various highlighting groups.\n\nThis script is auto-installable via GetLatestVimScripts, too (vimscript#642).\n\nUse it with vimscript#625 (colorscheme sampler) to see what highlighting groups are supported and what the colors will be.\n\nBring up the colorscheme editor on each color by right-clicking on the color's name.  Use the mouse's left button to click and drag on the colorbars to select and change colors.  It works with both the gui and those console vims which support the mouse!  You can then write the colorscheme (you'll be prompted for a filename), cancel the change, or indicate that the change is done for that colorname.\n\n----------------------------------------------------------------------------------------\nUSAGE\n\n    :help hicolors\n    <leftmouse>    on a colorname to bring up help on that colorname\n    <rightmouse>   on a colorname to bring up the colorscheme editor for that color\n      <leftmouse>  click&drag on any colorbar to change the color for that colorname\n      <leftmouse>  to select WriteColorscheme, Cancel, or Done\n\n----------------------------------------------------------------------------------------\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#HICOLORS)\n"}, {:name=>"MS-Word-from-VIM", :summary=>"Interact with MS Word from VIM", :description=>"To interact with Microsoft Word from VIM\nCurrently supports use of Word's Thesaurus and Speller\n\nCopyright (C) 2004 Suresh Govindachar  <initial><last name><at><yahoo>\n\nSystem Requirements:\n  \n   Windows (with MS Word)\n   VIM with embedded perl support\n   The perl module Win32::OLE (good way to get this is to have external perl)\n\nExports: \n \n   The following four commands are exported to the end-user:\n   \n      :WordThesaurus    [<cword>]\n      :WordSpell        [<cword>]\n      :WordAnagram      [<cword>]\n      :<range>WordCheckSpelling \n   \n   In regard to the first three commands:\n   \n    - Each command can be issued with no arguments or with one argument.\n      When no argument is provided, the <cword> (see :help cword) is \n      used as the argument.\n    - After execution, the \"result\" is appended below the current line.\n    - The \"result\" for the Thesaurus command is all \n      the synonyms and the antonyms.\n    - The \"result\" for the Spell command is all \n      the spelling suggestions.\n    - The \"result\" for the Anagram command is all \n      the anagrams of the given letters.\n   \n   Try the following:\n   \n      :WordThesaurus beautiful\n      :WordAnagram   abt\n      :WordSpell     helo\n      :WordSpell     b?t*\n   \n   In regard to the fourth command (:<range>WordCheckSpelling):\n      \n    - The default range is the whole buffer -- in order for\n      quickfix commands to work, there has to be a file \n      associated with the buffer.\n   \n    - Results are:\n   \n      - highlighting as Error each misspelled word in the range\n        (the filetype is set to nothing so that the only colored\n        stuff are the misspelled words)\n   \n      - ability to use the quickfix commands (:cfirst, :cn, etc) to \n        visit each misspelled word and to look at suggestions on spelling it.\n   \n      - Sub commands (of the :<range>WordCheckSpelling command):\n   \n           :WordShowMisspelled\n                Highlights misspelled words (there won't be any other highlighting)                 \n           :WordHideMisspelled\n                Restores highlighting based on filetype \n           The next five commands extend the corresponding quickfix \n                commands (:cfirst, :clast, :cc, :cn, :cp) by\n                loading the search register with the appropriate \n                misspelled word\n                    :Wordfirst\n                    :Wordlast\n                    :Wordc\n                    :Wordn\n                    :Wordp\n   \n      - Optional (controlled by g:no_plugin_maps or g:no_word_maps) \n        normal-mode maps:\n           <Leader>ws :WordShowMisspelled<CR>\n           <Leader>wh :WordHideMisspelled<CR>\n           <Leader>wc :Wordc<CR>\n           <Leader>wn :Wordn<CR>\n           <Leader>wp :Wordp<CR>\n\nTested on:\n\n   Windows 98 with Word 97 (and Vim 6.3, ActiveState's perl 5.8).\n   Anagram and WildCard NOT supported by Microsoft in later versions of MSWord -- see\n   http://support.microsoft.com/default.aspx?scid=kb;en-us;224722 !!!\n\nKnown issue:\n  \n   Sometimes Windows and/or Word is sluggish and things\n   time-out with a \"no service available\" or some such \n   error message -- when this happens, just reissue the command.\n\nAcknowledgment:                                                              \n\n   Although I conceived and developed this plugin, I\n   learnt how to interact with Microsoft Word for \n   accessing its Thesaurus and Spelling from: \n\n    - Chad DeMeyer   (microsoft.public.word.word97vba)\n    - Steven Manross (perl-win32-users@listserv.ActiveState.com)\n    - Greg Chapman   (perl-win32-users@listserv.ActiveState.com)\n    - http://www.perlmonks.com/index.pl?node_id=119006\n\nDisclaimer:                                                                 \n\n   The material provided here is provided as-is without any warranty --\n   without even the implied warranty of merchantability or fitness for a\n   particular purpose.  The author assumes no responsibility for errors or\n   omissions or for any sort of damages resulting from the use of or\n   reliance on the provided material.\n"}, {:name=>"multiwin.vim", :summary=>"MultiWin: use VIM like a Rolodex", :description=>"This script manipulates noequalalways, splitbelow, winheight, winminheight, and laststatus to make each buffer (either loaded by command line or via :new) occupy its own window.  All inactive windows are minimized to only statuslines.  This gives the appearance of a Rolodex.  Simply click on a status line and that window is maximized.\n\nNote: once vim is loaded, you must use :new (or :split) to \"add\" a window to the list.  Using :e will change the buffer in the current window.\n\nThis has same effect of using -o on the vim command line when you run vim with multiple filenames on the command line, or \"Edit with single vim\" context menu in Windows Explorer when multiple files are selected.\n\nThis script will not run if vim is set to compatible or is in diff mode.\n\nYou can disable the automatic-ness of this script by setting g:singlewin in your vimrc\n\nThis script is compatible with vim 6.3 and 7.0. \n\nI'd would like to give credit where credit is due:\nAntoine J. Mechelynck - the initial idea of playing with winheight and the other options\nCharles E. Campbell, Jr. - enlightening me on the use of sball\nBram - for deflecting my attempts at sliding a patch in and making me think of alternate ways to trick vim into maximizing the current window.and for showing me eventhandler()\nBreadman - for showing me wincmd _\n"}, {:name=>"multiAPIsyntax", :summary=>"Syntax for Qt, KDE, wxWidgets, GTK1, GTK2 libraries", :description=>"This is a new version of former script vimscript #787.\nThis script scans Qt 3.x, KDE 3.x, wxWidgets, GTK 1.2.x and GTK 2.x headers, then creates vim syntax file (cType definitons for all classes/structs) for highlighting and plain list of classes for vim word-completion (for use with vimscript #213). multiAPIsyntax supports command line options like --qt, --kde, --wx, --gtk1, --gtk2, so you may choose which libraries to scan."}, {:name=>"earth.vim", :summary=>"Green base for colorscheme", :description=>"This is a colorscheme that's easy on the eyes. It has an earthy feel to it, as I have used a lot of green and brown shades."}, {:name=>"Black-Angus", :summary=>"This is a mainly green on black color scheme (Gui & term)", :description=>"This is a mainly green on black color scheme.  I have tried to keep the vim / gvim colors as \nconsistant as possible.  This works well with the std_c syntax highlighting.\nEnjoy."}, {:name=>"tpp.vim", :summary=>"Syntax highlighting for tpp presentation files", :description=>"TPP (http://synflood.at/tpp/) is a presentation tool for the Linux/Unix commandline."}, {:name=>"cfengine.vim", :summary=>"Alternate Cfengine Syntax Highlighting", :description=>"An improved version of cfengine syntax highlighting.  I started this syntax highlight before I realize that one already exists.  This scripts doesn't highlight everything, but it highlights sections, classes and identifiers.  It highlights boolean operators in the classes, and highlights the variable operators.  It also handles embedded PHP.  If you use other languages to generate cfengine you can add them into the syntax highlight easily."}, {:name=>"sas.vim", :summary=>"SAS indent file", :description=>"SAS indent file."}, {:name=>"InsertTry.vim", :summary=>"put java's try catch around marked lines", :description=>"mark some lines and type ¬t\nthe marked lines will be enclosed in a try block with an additional catch and finally block\n\nWhre is the ¬ key? Feel free to change this.\n\ncustomize:\n:let b:java_InsertTry_Style=\"Java\" | \"C\" | \"JavaShort\"                         default = \"Java\"\n:let b:java_InsertTry_Goto=\"catch\" | \".\"                                                   default = \"catch\"\n\n"}, {:name=>"VimRegEx.vim", :summary=>"Regular Expression Developer for Vim", :description=>"Start with one of the commands\n\n:Vimrex\n  or\n:VimRegEx\n\nThe first opens within the current (g)vim session, the second starts a new (g)vim\n\n'z?' or the menu 'Usage' button opens a usage buffer.\n\nVimRegEx.vim is a plugin that aids in development/construction/analysis of Vim regular expressions.  It is not a search utility, although it certainly does that.  It is a development/learning environment that allows writing Vim regular expressions, element-by-element analysis of these expressions, and execution of the expressions against source text with the results illustrated both verbally in text and graphically in different highlighting for different types of regular expression atoms.\n\nIt allows you to see, in verbal/graphical analytical terms, just what is being searched for and what will result with a given Vim regular expression.\n\nThere are comparable tools on the net for other environments (notably .NET, Perl, and Python), but nothing exists for Vim ... until now!\n\nThe plugin is written specifically for Vim, so you can build your regular expressions as you would in Vim.  In other tools, you'd have to make allowances for backslash escaping specific elements (like '(', ')', '+', '?', etc.) to use what you had developed in those tools.  You'd also have to make substitutions, like '\\<' for '\\b' for word boundary ('\\b' has its own meaning in Vim), and '\\(...\\)\\@=' for '(?=...)'.  This renders these other tools all but useless for Vim.\n\nVimRegEx has its own built in documentation, a rich set of variables for tuning its performance/appearance to your liking in your vimrc, an easy menu driven interface for gvim as well as easy to use keyboard mappings for the same commands in vim.  There's also file generation capability to save your windows in text or html.\n\nIf you've been struggling with a regular expression and can't seem to get it to do what you want, maybe what you think you're doing isn't what Vim sees.  See what Vim sees in VimRegEx.  In the VimRegEx enviroment, what you see is what you get!"}, {:name=>"blitzbasic.vim", :summary=>"syntax file for blitzbasic source code", :description=>"Just a syntax file. Who will use vim to edit blitzbasic programs is another question :)"}, {:name=>"archive_viewer.vim", :summary=>"Allows viewing + editing of archive files (including nested archives)", :description=>"\"   Initially based on tar.vim by Michael C. Toren\n\"   Other than the initial autocommands and some function\n\"   layouts, very little is the same.\n\"\n\" Platform:\n\"   Linux:\n\"     All testing done on linux so it should work fine in linux\n\"     environments that satisfy the dependencies below.\n\"   Windows (Cygwin):\n\"     Works in conjunction with cygwin_utils.vim plugin.\n\"     Make sure to read the Description comments in cygwin_utils.vim for\n\"     configuration instructions and other notes.\n\"\n\" Dependencies:\n\"   - unzip: must support -c (extract to stdout)\n\"   - zip: to edit files in a jar, war, ear, rar, sar, zip\n\"   - tar: must support -O (extract to stdout), -j (for bz2),\n\"     -z (for tgz, gz, Z)\n\"   - table_format.vim (tested with version 1.0) or\n\"     Align.vim (tested with version 26 ) for formatting\n\"     archive file layout\n\"   - Viewing of .class files from archives depends on the following\n\"     mapping (in vimrc or elsewhere) being loaded\n\"     (and of course having jad installed):\n\"       \"view java class files with jad\n\"       augr class\n\"         au!\n\"         au bufreadpost,filereadpost *.class %!jad -noctor -ff -i -p -t2 -b %\n\"         au bufreadpost,filereadpost *.class silent set readonly\n\"         au bufreadpost,filereadpost *.class silent set ft=java\n\"         au bufreadpost,filereadpost *.class silent normal gg=G\n\"         au bufreadpost,filereadpost *.class silent set nomodified\n\"       augr END\n\"\n\" Usage:\n\"   To start the viewer\n\"     vim a_tar_file.tar\n\"\n\"   To view a file or nested archive, simple hit enter on the line for\n\"   that file.\n\"\n\"   - To add a file to an archive hit \"a\", and follow the prompts.\n\"   - To edit a file in an archive hit \"e\" while viewing the file, edit\n\"     it and save it with \":w\".\n\"   - To delete a file hit \"r\" on the line for that file.  To delete more\n\"     than one file, simple use visual mode (V) to select the files to\n\"     delete.\n\"   - To extract a file hit \"x\" on the line for that file.  To extract more\n\"     than one file, simple use visual mode (V) to select the files to\n\"     extract.\n\"   - To extract the entire archive use \"X\".\n\"\n\"   For jar files there is also a global function \"ViewJarUrl(url,wincmd)\",\n\"   that takes a java standard jar url, and vim window commands to open\n\"   a file.\n\"   The format of the url is\n\"     jar:{url}!{file}\n\"   Ex.\n\"     jar:file:///home/myusr/myjar.jar!/adir/afile.txt\n\"\n\"   Currently, only \"file:\" urls are supported (not \"http:\", \"ftp:\", etc).\n\"\n\"   Ex. Usage of ViewJarUrl() to open a file in a new maximized window.\n\"     call ViewJarUrl(\"jar:file:///home/myusr/myjar.jar!/adir/afile.txt\",\n\"       \\ \"new | winc _\")\n\"\n\" Configuration:\n\"\n\"   g:ArchiveViewerPrompt\n\"     Defaults to 1.  Determines if prompts are used to capture\n\"     the directory name for extraction and adding files.  When\n\"     set to 1 prompts (using the input() function of vim) are used.\n\"     When set to 0, a : command is initiated for you that you can\n\"     complete to execute the action.\n\"\n\"     When hitting 'x' or 'X' to extract files the following : command\n\"     is initiated...\n\"       :ExtactTo \n\"     Simply supply the directory to extract to after that and hit\n\"     enter to execute.\n\"\n\"     When hitting 'a' to add files the following : command is initiated...\n\"       :AddFilesFrom \n\"     Supply the directory to start in (the directory that all added files\n\"     should be relative to) and hit enter.  You will then be prompted for\n\"     the files to add.\n\"\n\"     This was added because vim's input() function does not have\n\"     path completion, but : commands do.\n\"\n\"     Ex. let g:ArchiveViewerPrompt = 0\n"}, {:name=>"cream-statusline-prototype", :summary=>"Display current function prototype in statusline", :description=>"\nToggles the display of the current function prototype on the statusline with key <F8>. This is a basic illustration of how to write code to accomplish this...feel free to embellish!\n\n\nUSAGE\n\nBy default, the <F8> key will toggle the display of the current prototype in the statusline. The prototype is recalculated each time it is toggled ON.\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software.\n\n"}, {:name=>"TabLaTeX", :summary=>"A small and simple script for writing LaTeX documents", :description=>"TabLaTeX is a small and very simple Vim 6.x plugin that eases editing LaTeX documents. The script is focused on fast editing and not in completeness, so only the most used features of LaTeX are supported. You might find interesting that most commands are inspired in the tab-completion feature of the bash shell.\n\nHomepage: http://www.cavecanen.org/latex/tablatex/"}, {:name=>"buffer-perlpython.pl", :summary=>"run 'perl -cw' or 'pychecker' over the buffer, display results in a new window", :description=>"Bindings to check or run perl/python and display the results in a new window.\n\nWhen scripting:\n\nF1: perl -cw or pychecker over the current buffer, results in a new window\nF2: close the current window\nF3: perl/python (actually run the script) the buffer, output in a new window"}, {:name=>"txt2tags-menu", :summary=>"gVim menu for txt2tags", :description=>"gVIM script to support txt2tags (http://txt2tags.sourceforge.net/)\n\nScreenshot: http://img.photobucket.com/albums/v106/teivan/Computador/t2tmenu.png"}, {:name=>"hamster.vim", :summary=>"Hamster (Classic | Playground) syntax file", :description=>"\nHamster (Classic | Playground) \n\nHamster is a local server for news and mail. It's a windows-32-bit-program. It allows the use of multiple news- and mailserver and combines them to one mail- and newsserver for the news/mail-client. It load faster than a normal newsreader because many threads can run simultaneous. It contains scorefile for news and mail, a build-in script language, the GUI allows translation to other languages, it can be used in a network and that's not all features...\nhttp://www.tglsoft.de/misc/hamster_en.htm\nhttp://www.elbiah.de/hamster/index.htm\n\nThis is a syntax file for the builtin scripting language.\n"}, {:name=>"hamster.vim-indent", :summary=>"Hamster (Classic | Playground) indent file", :description=>"Hamster (Classic | Playground)\n\nHamster is a local server for news and mail. It's a windows-32-bit-program. It allows the use of multiple news- and mailserver and combines them to one mail- and newsserver for the news/mail-client. It load faster than a normal newsreader because many threads can run simultaneous. It contains scorefile for news and mail, a build-in script language, the GUI allows translation to other languages, it can be used in a network and that's not all features...\nhttp://www.tglsoft.de/misc/hamster_en.htm\nhttp://www.elbiah.de/hamster/index.htm\n\nThis is an indent file for the builtin scripting language. "}, {:name=>"clearsilver", :summary=>"syntax files for *.cs and *.hdf", :description=>"These are syntax files for managing clearsilver templates (see http://clearsilver.net).  cs.vim will add formatting to <?cs ... ?> embedded in html syntax (it depends on runtime! syntax/html.vim).  hdf.vim is syntax highlighting for Hierarchical Data Format (HDF) files.\n\ncs.vim conflicts with the C# .cs extention.  So if you are also using vim to edit C# files you will have to... figure it out."}, {:name=>"hamster.vim-ftplugin", :summary=>"Hamster (Classic | Playground) filetype plugin", :description=>"Hamster (Classic | Playground)\n\nHamster is a local server for news and mail. It's a windows-32-bit-program. It allows the use of multiple news- and mailserver and combines them to one mail- and newsserver for the news/mail-client. It load faster than a normal newsreader because many threads can run simultaneous. It contains scorefile for news and mail, a build-in script language, the GUI allows translation to other languages, it can be used in a network and that's not all features...\nhttp://www.tglsoft.de/misc/hamster_en.htm\nhttp://www.elbiah.de/hamster/index.htm\n\nThe filetype plugin defines various behaviours and variables.\nAdds matchit.vim support.\nCreates standard motion mappings (i.e. [[,]],[],][,...).\nCase sensitivity.\nComment support."}, {:name=>"VB.NET-Syntax", :summary=>"Syntax highlightening for VB.NET (Visual Basic .NET)", :description=>"It's modified from the syntax/vb.vim. All VB.NET (Visual Basic .NET) keywords have been added.\n"}, {:name=>"VB.NET-Indent", :summary=>"Indent for VB.NET (Visual Basic .NET)", :description=>"(silently) Modified from indent/vb.vim\n\nThere may still be some bugs, I haven't tested all syntax...\n\nTODO:\n\n- Add support for multi-line \"If\" without \"Then\""}, {:name=>"ACScope", :summary=>"Another CScope frontend", :description=>"A CScope frontend provides having multiple query results around. It uses windows, so the results won't get away.\nFor usage see the comments in the script file.\n\nIt uses two windows, one for listing the queries done and\nanother for listing the result of the selected query.\nIt can be used parallel with the normal cscope frontend of\nvim because they use different settings and key bindings.\n"}, {:name=>"ptu", :summary=>"This Script is for the editing Test Script of Rational Test Real Time", :description=>"This Script is for the editing Test Script of Rational Test Real Time. The basic keywords are taken care of and the colorscheme is also applicable to the Native code written in \"#\" which is not in the default editor.\nThe script is minimal and I have plans to make it better. Suggestions invited.\n"}, {:name=>"java_src_link.vim", :summary=>"effective searching of src files for children, impls, tests, return values, args", :description=>"\"   Filetype plugin for java that allows you to jump to\n\"   another java src file by searching your configured\n\"   src path for the class name under the cursor.\n\"\n\"   For a given class name, supports finding children of it, implementations\n\"   of it, methods that return it, methods that take it as an argument, test\n\"   cases for it, or all references of it.\n\"\n\" Platform:\n\"   This plugin uses the system find and grep commands extensively,\n\"   so if you are having issues, it's probably due to incompatibility\n\"   with one of those.  You can take a look at s:find_cmd, s:content_grep,\n\"   and s:*_regex variables to see if they can be modified to suit your\n\"   system.\n\"\n\"   If you find that you do have to modify any of these, feel free to\n\"   send me your changes, and I will see if they are compatable or make\n\"   alternate configurations available for users to choose from.\n\"\n\"   All my testing was done with\n\"     GNU find version 4.1.20\n\"     GNU grep version 2.5.1\n\"\n\"   Linux:\n\"     All testing has been done on linux so various flavors of linux\n\"     should be supported (as well as other *nix systems).\n\"\n\"   Windows:\n\"     Works in conjunction with cygwin_utils.vim plugin.\n\"     Make sure to read the Description comments in cygwin_utils.vim for\n\"     configuration instructions and other notes.\n\"\n\"     Note: I've found that the 'find' command runs considerably\n\"     slower on Windows enviroments.  So if you have serveral\n\"     paths in you g:JavaSrcPaths variable, then searching may\n\"     be a bit slow.\n\"\n\" Usage:\n\"   When editing a java file the following commands are created\n\"    :FindSrc\n\"    :FindImpl\n\"    :FindChildren\n\"    :ContextualFindSrc\n\"    :FindTest\n\"    :FindArgument\n\"    :FindReturned\n\"    :FindReferenced\n\"\n\"   FindSrc: will search for the src file for the class name under the\n\"   cursor and execute the configured g:JavaSrcCmd on it (unless\n\"   g:JavaSrcUseGrep is set to 1), which could do any number of\n\"   things such as edit, argadd, split, etc.\n\"\n\"   FindImpl: behaves just like FindSrc, except instead of searching for\n\"   the class name under the cursor, it searches for classes that\n\"   implement that class.\n\"\n\"   FindChildren: behaves just like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for classes that\n\"   extend that class.\n\"\n\"   ContextualFindSrc: is a convenience command that decides which of the\n\"   above commands to execute (FindSrc, FindImpl, or FindChildren) based\n\"   on your position in the file.\n\"   - If you are on the class declaration line (public class Foo), then\n\"     it will execute FindChildren.\n\"   - If you are on the interface declaration line (public interface Foo),\n\"     then it will execute FindImpl.\n\"   - Any where else in the file, FindSrc will be executed.\n\"\n\"   FindTest: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for the test\n\"   case src file for the class.\n\"     This command assumes that test case src files follow the junit\n\"     naming conventions of \"<classname>Test.java\" where the <classname>\n\"     is the name of the class under the cursor.\n\"\n\"   FindArgument: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for all src files\n\"   that have a method that takes as an argument, that class.\n\"\n\"   FindReturned: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for all src files\n\"   that have a method that returns that class.\n\"\n\"   FindReferenced: behaves like FindSrc, except instead of searching\n\"   for the class name under the cursor, it searches for all src files\n\"   that reference that class.\n\"\n\"   Note: All of the above commands (with the exception of ContextualFindSrc)\n\"   can also be invoked with an argument.\n\"     Ex.\n\"       FindSrc org.bar.Foo\n\"   This will invoke the command so it searches for the class name provided\n\"   rather than the one under the cursor.  You may use fully qualified\n\"   (org.bar.Foo) or un-qualified (Foo) class names.\n\"\n\"   Note: All of these find commands will attempt to filter out\n\"   results that reference a different class that has the same\n\"   class name as the one to search for.  It does this by attempting\n\"   to locate the package name of the class to search for.\n\"\n\"     For example: If you have two classes with the name Foo\n\"     one in com.bar.Foo and the other in com.bar.baz.Foo, and you\n\"     start a search for the class Foo, then this plugin will attempt\n\"     to determine which Foo you are searching for.\n\"\n\"     If you are editing one of the Foo classes, and you initiated the\n\"     search with the cursor on the class declaration (public class Foo),\n\"     then the package (package com.bar;)  declaration of the file will\n\"     be used to narrow the results to the correct Foo class.\n\"\n\"     If you are in another file (say Bar.java) and you start a search\n\"     for Foo, then the plugin will look to see if you used the fully\n\"     qualified class name (com.bar.Foo) or if you imported the class\n\"     (import com.bar.Foo;).  If you did either then the package name\n\"     will be grabbed from there.  If you have done neither, then the\n\"     plugin will return results for all Foo occurances regardless\n\"     of package name.\n\"\n\"     So the moral of the story is, that if you want accurate results\n\"     you should get in the habit of importing each class seperately\n\"     and avoiding the * imports (import com.bar.*;).  This is a good\n\"     habit anyways, that makes your code easier to read, navigate, and\n\"     understand by others.\n\"\n\" Configuration:\n\"   The following describes the global variables you can set in\n\"   your vimrc to change the behavior of this plugin.\n\"\n\"     g:JavaSrcPaths\n\"       No default.  Use this variable to set a comma seperated list\n\"       of the paths you wish to have searched. Each path should be\n\"       the parent directory of where your package structure begins.\n\"       So for /a/path/src/java/org/acme/, assumming packages begin\n\"       as org, you would use /a/path/src/java as the path to search.\n\"\n\"       Ex.  let g:JavaSrcPaths=\n\"              \\ \"/a/path/src/java,\" .\n\"              \\ \"/another/path/src/java\"\n\"\n\"     g:JavaSrcTestPaths\n\"       No default. Same as g:JavaSrcPaths but used by FindTest to\n\"       locate unit testing src files.\n\"\n\"     g:JavaSrcShowResults\n\"       Defaults to 0.  When set to 1, the Find commands will open\n\"       a small preview window when multiple results have been found.\n\"       In that window you can hit <enter> on the file you wish\n\"       to open or use 'A' to load all results into the arg list.\n\"\n\"       Ex. let g:JavaSrcShowResults=1\n\"\n\"     g:JavaSrcUseGrep\n\"       Defaults to 1.  When set to 1, the Find commands will use vim's\n\"       :grep command to grep the results so that results can be\n\"       navigated through using the quickfix command :cnext :cprev\n\"       :copen, etc.\n\"       Note: When g:JavaSrcShowResults is set, then grep is not used\n\"             regardless of whether g:JavaSrcUseGrep is set or not.\n\"\n\"       Ex. let g:JavaSrcUseGrep=1\n\"\n\"       Use\n\"         :help quickfix.txt\n\"       to get more info on how grep and the quickfix paradigm works.\n\"\n\"     Note: When both g:JavaSrcShowResults and g:JavaSrcUseGrep are set\n\"           to 0, then the g:JavaSrcCmd is executed on all files found\n\"           with no preview or quickfix window.\n\"\n\"     g:JavaSrcCwindow\n\"       Defaults to 1.  Used to determine whether or not to execute\n\"       :cwindow to open the grep results after searching.  If set\n\"       to 1, the window will be opened after every Find command.\n\"       If set to 0, the window will remain closed and you can open\n\"       it manually.\n\"       Note:  Only used when g:JavaSrcUseGrep is set to 1 and\n\"              g:JavaSrcShowResults is set to 0.\n\"\n\"       Ex. let g:JavaSrcCwindow=1\n\"\n\"     g:JavaSrcCmd\n\"       Defaults to \"split <file>\".  Use this variable to set the\n\"       command you wish to be invoked when using :Find* commands.\n\"       The \"<file>\" will be replace with the file to open.\n\"       Note: When g:JavaSrcShowResults is set to 0 and\n\"             g:JavaSrcUseGrep is set to 1, this variable is not\n\"             used.  Instead the quickfix commands are used.\n\"\n\"       Ex. let g:JavaSrcCmd=\"topleft split <file>\"\n\"       Ex. let g:JavaSrcCmd=\"argedit <file>\"\n\"       Ex. let g:JavaSrcCmd=\"call g:MyOpenFile(<file>)\"\n\"\n\" Command Mapping:\n\"   You may find it easier to map a command to something more convenient.\n\"   For example, here is my mapping that allows me to simply hit\n\"   <enter> on a class name to have it search for results based on the\n\"   context (as described above).\n\"\n\"     autocmd FileType java map <silent> <buffer> <cr> :ContextualFindSrc<cr>\n\"\n\" Limitations:\n\"   - FindChildren and FindImpl are limited to examining class names\n\"     that follow \"extends\" | \"implements\" on the same line.  So src files\n\"     that put each class on it's own line or wrap long extends / implements\n\"     statements may not be found.\n\"     This is a limitation of grep, which is used to find the files.\n\"     This could be solved by further examining the contents of src files\n\"     but would have a big impact on performance.\n\"   - FindReturned only searches for methods with \"public\" | \"private\" |\n\"     \"protected\" so as not to grab too many files.  Also the scope identifier\n\"     must appear on the same line as the class name.\n\"     As with the limitation on FindChildren and FileImpl, this is due to\n\"     grep examining the files one line at a time, which prevents examining\n\"     other lines to determine any sort of context.\n\"\n\" Todo:\n\"   - Extend beyond class based searching and add method and field based\n\"     searches (fields should be easy, methods could be hard to get reliable\n\"     results).\n"}, {:name=>"AutumnLeaf", :summary=>"Practical, beautiful seasonal colors.", :description=>"The colors of a Finnish autumn morning captured and packed in a nice color scheme which is light orange/blue/green and doesn't strain the eye.\n\nThis scheme was created to serve more as a tool for users who work with code such as C/C++ or Perl. Also handy with XHTML/HTML/CSS and why not plain text too.\n\nRich syntax highlightings, cterm supported.\n\nScreenshot here: http://safelyinrussia.com/tmp/miikka/autumnleaf.png"}, {:name=>"WhatsMissing.vim", :summary=>"Shows what is missing between 2 buffers", :description=>"This plugin contains functions/commands that will cycle through one \nbuffer (the source) and compare the its contents against the contents of\nanother buffer (the target).\n\nNOTE:  This is not a poor man's 'diff', since the source and target must be \n              similar in appearance.  See example below for a better understanding.\n                                                                              \nDepending on the options specified and command chosen, it will open a split\nwindow (the result) and display either the entries that are:\n   - missing from the target buffer\n   or\n   - contained in both buffers\n   \nThe plugin has created a menu, Plugin->WhatMissing.  There are two entries: \n    WhatsMissing\n    WhatsNotMissing\n\nThese menu items are also available in visual mode.  These menu items simply call the commands: \n    :WhatsMissing\n    :WhatsNotMissing\n\nThe behavior of whatsmissing.vim are governed by several options. Options can be specified using the WMSetOption command.  As mentioned above, the <Tab> button can be used for both option name and option value completion.\n                                                                            \nYou can check the value of a specific option by: \n    :WMGetOption option_name\n \nHere are the various options: \n   mode  \n       - Values: \"word\" or \"line\".  \n       - WhatsMissing will move through the source buffer one |word| at a\n         time, and checks this value against the target buffer.  It will \n         also automatically escape the following characters: \n               '\\\\/.*$^~[]'\n         If the \"line\" mode is chosen the comparison between the source \n         and target buffer is performed a line at a time. \n                                                                            \n   ignore_case \n       - Values: \"0\" or \"1\".  \n       - The \"default\" for WhatsMissing is to use the |'ignorecase'| option\n         of the target buffer.  Otherwise the user is allowed to override\n         it. \n                                                                            \n   ignore_whitespace\n       - Values: \"0\" or \"1\".  \n       - If in \"line\" mode, you can choose to ignore leading and trailing\n         whitespace for the comparison. \n\n\nExample\n------------\nConsider the case where you are maintaining a Vim syntax file.  It has entries like this:\n*************\nsyn keyword sqlFunction\tcount sum avg min max debug_eng isnull\nsyn keyword sqlFunction\tgreater lesser argn string ymd todate\nsyn keyword sqlFunction sp_addalias\nsyn keyword sqlFunction sp_addauditrecord\nsyn keyword sqlKeyword\treplicate rereceive resend reset\nsyn keyword sqlKeyword\tresolve resource respect\nsyn keyword sqlKeyword\trestrict result retain\nsyn keyword sqlStatement allocate alter backup begin call case\nsyn keyword sqlStatement checkpoint clear close commit configure connect\nsyn keyword sqlStatement create deallocate declare delete describe\nsyn keyword sqlType\tchar long varchar text\nsyn keyword sqlType\tbigint decimal double float int integer numeric \n*************\n\nIn order to create the syntax file in the first place you had to find the above words from somewhere.  In this case, I simply used grep against the source code to find various API method names, keywords, functions and so on.\n\nSo in the end after running grep repeatedly and massaging the output, I end up with a file like this:\n**************\nabs\nabsolute\naction\nactiv\nexpanded\nexperience_estimate\nexplanation\nexplicit\nexpress\nexprtype\nremainder\nremote\nremove\nrename\nreorganize\nreplicate \nrereceive \nresend \nreset\nvalue\nvalues\nvarbinary\nvarchar\nvarexists\n**************\n\nAt this point you want to update your Vim syntax file to include all the new method names, keywords, functions and so on that are missing from the existing syntax file.\n\nYou cannot run Diff against this, since the lines are completely different, you need to compare the words.\n\nAfter running :WhatsMissing, you end up with a split buffer showing:\n***************\n(19 of 24) items missing from: syntax.vim\n----------\nabs\nabsolute\naction\nactiv\nexpanded\nexperience_estimate\nexplanation\nexplicit\nexpress\nexprtype\nremainder\nremote\nremove\nrename\nreorganize\nvalue\nvalues\nvarbinary\nvarexists\n----------\nWMOptions:\nmode=word ignore_case=  ignore_whitespace=0\n***************"}, {:name=>"bulgarian.vim", :summary=>"Bulgarian phonetic keymap for vim", :description=>"A phonetic bulgarian cyrillic keymap (UTF-8)\n\nThis phonetic map is quite similar to the way the Gtk cyrillic input module works: for your convenience, some symbols can be entered in different ways; for instance, to enter the \"shcha\" you can type \"sj\" (as in the gtk module) or \"sht\"."}, {:name=>"edifile.vim", :summary=>"Simple syntax highlighting for EDI files", :description=>"Currently simply highlights GS/GE, ST/SE segments in the Comment color, also highlights all other segment names in the Keyword color. It then also highlights the field seperators and segment terminator characters."}, {:name=>"rcs.vim", :summary=>"Automatically handle RCS files", :description=>"This is a set of autocommands, commands, and a menu to help you handle RCS controlled files.\n\nIf you try to modify a readonly file that has a RCS/<file>,v counterpart you will be asked if you want to check the file out for modification, and when you unload the buffer you'll be prompted if you want to check the file back in, and allowed to enter a log message.\n\nMost of the commands have corresponding menu items, which should be fairly self-explanatory.\n\nDetails are in the auto-generated help file, see \":help rcs.txt\"."}, {:name=>"pydoc.vim--Repass", :summary=>"Pulls external python documentation into a Vim window.", :description=>"This utility will invoke the external pydoc script (pydoc.py comes with the standard Python installation) and use it to retrieve relevant documentation. This information is displayed in a new Vim window just like the internal Vim help. Remaps the 'K' command to provide for easy access. For example, let's say you're editing a program that uses the 'os' module. Simply position the cursor over 'os' and hit K and a new window will appear (in Vim) with the full module documentation. As a cool side effect, the pydoc buffers are now candidates for text completion, so this script provides a quick and easy way of loading a module's identifiers into your completion list.\n\nAndre Kelpe has kindly emailed me to let me know he has a script vimscript #910 that does much the same thing. Unfortunately, it doesn't show up when you do a search for Python so I was unaware of it :-(. Apologies to Andre, but we are in discussion about possibly merging the two as they both have some cool features.\n\nEDIT\n10.25.2004 (mention the other pydoc script)"}, {:name=>"TWiki-Syntax", :summary=>"Syntaxfile for TWiki-Syntax", :description=>"Syntaxfile for TWiki syntax (http://www.twiki.org)\nOne can configure Mozilla to use an external editor for editing HTML-edit-fields. So when one uses vim, he gets his code highlighted.\n\nFor configuring mozilla, go to http://mozex.mozdev.org\n\nStill isn't ready, so email feedback to me or, better, join the project on http://www.sourceforge.net/projects/vim-twiki\n"}, {:name=>"pmd.vim", :summary=>"Integrates PMD using Vim quickfix mode", :description=>"PMD (see http://pmd.sourceforge.net) is a utility that scans Java source code to find potential problems, unused variables, unnecessary imports, etc.  This plugin integrates PMD with Vim using Vim's quickfix features (see :help quickfix).\n\nTo invoke PMD from Vim, either issue the command :Pmd or enter <Leader>pmd from command mode.  The latter keystroke command may be customized.  See the pmd.vim file for details.\n\nThe :Pmd command may take one argument, which the file or directory to run PMD against.  If left out, PMD will run against the filename of the current buffer, which is also the behavior of the <Leader>pmd keystroke command."}, {:name=>"BodySnatcher", :summary=>"Generate CSS from HTML doc BODY attribs - updates Web docs quickly. Perl req'd.", :description=>"if ! has('perl')\n    move along, nothing to see here ;-)\nendif\n\nThis plugin does a search of lines of a .html document and parses the statement of the <body> attributes. In modern times we prefer to use CSS to control presentational aspects of Web pages like text color, background, and link color.  When designing a site from scratch we'd plan that ahead of time. When updating a handful of pages that were not originally authored with CSS in mind, a script like this saves time by pulling out the expected HTML attributes and converting them to CSS declarations.\n\nUpdate 13:07(TZ=EDT) - 28.Oct.2004 -\n   My thanks to the dozen or so people who have downloaded version 1.3, and please update to\nto version 1.4. Important bugs are fixed in this new release.\n\nFor more info and an md5 sum to check against, see this tool's home page at\nhttp://intrepid.perlmonk.org/VIMtools/BSn/index.html"}, {:name=>"MapleSyrup", :summary=>"indenting, autoalign, and matchit support for Maple V", :description=>"This package contains support for writing Maple V code:\n\n * indent/maple.vim: indenting support for Maple V\n * ftplugin/AutoAlign.vim: auto-align support for :=\n   (needs Align.vim from vimscript#294; to learn more about AutoAlign, see vimscript#884)\n * ftplugin/maple.vim: and matchit support (matchit.vim is available via vimscript#39).\n * plugin/cecutil.vim: \n * It contains tags for GetLatestVimScripts support which promote maintaining up-to-date copies (see vimscript#642).\n\nThe indenting support works with\n\n\tif for while else elif od end fi\n\nand indents the code appropriately as you type.  Indents are taken using the current setting of the vim's shiftwidth option (see :he shiftwidth).\n\nAutoAlignment keeps your := lined up in blocks, thereby promoting legibility.\n\nThe Matchit expression supports  (see vimscript#39)\n\n   if     elif    else  fi\n   for    od\n   while  od\n   proc   RETURN  end\n\nI usually prefer to have (at least) two windows open; the top one with vim editing Maple V code (file.mv) and the bottom one running Maple V itself.  I then work with Maple (using Windows) by changing the file as needed in Vim, putting the cursor at the end of the following statement, then pressing <cr>.\n\n\tread `c:\\\\some\\\\path\\\\to\\\\Maple\\\\file.mv`;\n\nThat causes the worksheet to be updated according to the <file.mv> instructions.  Of course, I can always maximize Maple when I need to so as to see more at one time.\n\nWhy \"maplesyrup\"?  I just couldn't resist the name!  :)\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#MAPLESYRUP)\n"}, {:name=>"ooosetup.vim", :summary=>"OpenOffice.org 1.x/StarOffice 5.2,6,7 setup response file syntax", :description=>"This script provides syntax highlighting for the OpenOffice 1.x and StarOffice 5.2, 6.x, 7.x setup responses file as documented by http://installation.openoffice.org/01RESPONSE_SO52_final_rev2.pdf\n\nA test suite for the highlighting is provided (TestSuite.OOo) to help discover bugs. Do not use it with the setup program.\n\nRelease notes for 1.0 :\n- syntax is quite strict about spaces (stricter than the setup program). The TestSuite.OOo will show you what is recognized.\n- the Module_Specify may not correctly highlight module sets definitions. Patches are welcome."}, {:name=>"reverse.vim", :summary=>"reverse (1st line becomes last ...) the lines in a file", :description=>"This file has a vim script to reverse the lines in the file.\n(line 1 swapped with last line say 5, line 2 swapped with line4 ...)\n\nI build it because I had such a requirement and could not \nthink of anything quicker on Windows. \n\nUnix people have lot better tricks-). \n\n\nHow to use :\nMethod 1: press <F2> if you wanna reverse all the lines\nMethod 2: select lines in visual mode and press <F2> \n                if you wanna swap only the highlighted lines\nMethod 3: To reverse line1 to line2 use :line1,line2 Reverse \n"}, {:name=>"mod_tcsoft.vim", :summary=>"modified version of tcsoft.vim-color-scheme", :description=>"mod_tcsoft.vim is based on the tcsoft-color scheme (http://www.vim.org/scripts/script.php?script_id=641),\nmade by Ingo Fabbri <vim@tcsoft.net>\n\nI changed the cursor and the background-colors. Hope you like it.\n\nScreenshot: http://www.uni-hildesheim.de/~akel0055/screens/mod_tcsoft2.png\n\n Author: André Kelpe <fs111 at web dot de>\n Last change Sa Okt 30 13:34:52 CEST 2004\n"}, {:name=>"PHP-correct-Indenting", :summary=>"A new indent script for php with many improvements never seen before", :description=>"(The version 1.23 of this script is already included in VIM 7)\n\nFeatures:\n- Indent \"perfectly\" PHP code.\n- Comment or non-PHP code doesn't break the algorithm.\n- Non-PHP code, multiline /**/ comments and \"Here Document\" content remain unchanged.\n- HTML <Script.*> tags are indented as PHP and like if their content was part of the surrounding PHP code.\n- Fast optimized indenting, the script knows when it's indenting large blocks and skips some unnecessary tests...\n- Support folding (folds don't break the indenting)\n- Auto-formatting for comments (using the Vim option formatoptions=qroc).\n- Indent correctly complex \"non bracketted blocks\" (like in language C):\n\n    Example: (start of line spaces are replaced by ____)\n<?php\nif (!isset($History_lst_sel)) \n____if (!isset($History_lst_sel)) \n________if (!isset($History_lst_sel)) {\n____________$History_lst_sel=0;\n________} else\n____________$foo=\"truc\";\n____else\n_______$bla= \"foo\";\n$command_hist = TRUE;\n?>\n\n- Direct indenting, the text is indented as you type it.\n- switch/case are indented correctly.\n- Script source code well commented.\n- Bug free as far as I know :)\n\nA more complete example of its capabilities:\n\n<?php\nif ($foo=\"thing\") // as you see an opened bracket isn't needed to indent correctly :)\n____if (foo(\"something\"))\n____{\n________somethingelse(\"blabla\");\n?>\n\n\n<html>\n<head>\n<title>SOME HTML CODE</title>\n<?\n________echo \"Something here\";\n?>\n________<script type=\"text/javascript\">\n________// Note the indentation of the script as if part of PHP\n\n________var truc=0;\n________if (truc) {\n____________nothing();\n________}\n\n________</script>\n\n</head>\n<body>\n\n<b>some closing and oppenning bracket here } } {\nnothing to indent here :)\n</b>\n\n</body>\n</html>\n\n\n<?\n________Somethingelse(true);\n____}\n\nif (foo)\n____/* a useless comment here\n____with useless code:\n____if (broken code) {\n___________________blabla();\n____*/\n____if (testHereDocument()) {\n\n\n________echo <<<HEREDOC\nHere is an Here Document style\necho, very useful.\nThe following code isn't indented\nif (test)\nwhile (foo) {\nnothing();\n}\nHEREDOC;\n\n____}\n\nbye();\n?>\n\nThat's all folks!\n\nThis script can also be found there: (with colorful examples)\nhttp://www.2072productions.com/?to=phpindent.txt\n\nThere is also a newsletter where you can subscribe at:\nhttp://www.2072productions.com/?to=php-indent-for-vim-newsletter.php\n(only about new releases of this script)\n\nEnjoy :)\n"}, {:name=>"anttestreport", :summary=>"coloring plain text reports created by ant for JUnit tests.", :description=>"My plugin tries to color  Test reports created by ant  the following way :\nIt colors all good things in green and bad things in red or some kind of. Also It shadows meaningless things. \nAnd yet I tried to fold long stack traces. So take a look. Comments are welcome."}, {:name=>"lingo.vim--Cataldo", :summary=>"Syntax highlighting for LINGO (Linear, INteractive and General Optimizer)", :description=>"A syntax highlighting file for LINGO (Linear, INteractive and General Optimizer).\n\nLINGO is a language and tool for modelling and solving optimization problems (http://www.lindo.com/cgi/frameset.cgi?leftlingo.html;lingof.html). \n\nThis syntax is NOT related to Macromedia Director Lingo scripting language. If you came here by mistake, please browse vimscript #503, vimscript #1010 or vimscript #1012.\n\nPlease e-mail comments and suggestions with subject \"vim\"."}, {:name=>"lpl.vim", :summary=>"Syntax file for LPL (Linear/Logical Programming Language)", :description=>"A syntax highlighting file for LPL (Linear/Logical Programming Language)\n\n\"LPL contains a powerful modelling language and a complete modelling environment and it is possible to specify complex mathematical models in a concise way.\" \nhttp://www.virtual-optima.com/en/products.html"}, {:name=>"UpdateModDate.vim", :summary=>"Updates a date stamp within a file whenever it is saved.", :description=>"This script uses an autocmd hook to run a function whenever a file is saved.\nThe function then looks if it finds a special token (by default %DATE_TAG%) within the file, and if it's found, a datestamp on the same line is updated to the current date.\n\nThis script will run on all systems that provide date(1), so it should work on unix systems, as well as on cygwin.\n\nIf no special token is found, nothing is done at all.\nIf there are multiple tokens within the file, only the first one from the beginning of the buffer will be updated.\n\nThe date format and the special token are fully configureable."}, {:name=>"vimUnit", :summary=>"vimUnit is a unit testing tool inspiered by tools like junit.", :description=>"  PURPOSE:\n\t\tTo provide vim scripts with a simple unit testing framework and tools.\n\t\tThe framework and tools should resemble JUnit's interface definitions\n\t\tto ease usage of both frameworks (and others based on JUnit). \n\t\tObviously vim scripts are not java so I will only try to implement the\n\t\tstuff useful to vim scripts. As a first milestone I think the \n\t\tjunit.Assert and junit.TestResult classes to get a vim-script\n\t\tunit-testing environment going.\n\t\t\n  WHY:\n \t\tWell, I have been working on some vim-scripts and read a lot of them\n \t\tthe last two weeks and I really, really miss my unit-test (and\n \t\tmock-object, but that is fare fetched I think..:O) tools to get my own\n \t\tstuff of the ground (and making modifications to your's).\n \t\t\n  THOUGHTS:\n\t\tWriting unit-test code against a UI environment is often very difficult \n\t\tor demanding to creative solutions to be productive. We would like to \n\t\thave a mock-object framework to go with the unit-testing framework.\n\t\t\n  INSTALLATION:\n  \t\tPlace this file in your plugin directory (~/.vim/ftplugin/)\n  \t\tWhen you start vim again and open a vim file for editing you should\n  \t\tget a message that vimUnit has installed its documentation.\n  \t\tTo get you started you could try :h vimUnit or :h VUAutoRun\n  \t\t\n  TIPS:\n  \t\tDocumentation (when written..:o) is found at the bottom of this file. \n  \t\tThanks to code from vimspell.vim it should be self-installing the first\n  \t\ttime this module is loaded\n\n  \t\tIf your new to test-first principles and thinking you should start\n  \t\twith the article: \n  \t\t\thttp://junit.sourceforge.net/doc/testinfected/testing.htm\n  \t\tAnd then surf the web on these locations:\n  \t\t\thttp://www.junit.org/\n  \t\t\thttp://xprogramming.com/\n  \t\t\thttp://www.extremeprogramming.org/\n \n  NOTE:\n\t\t8 Nov 2004 (v 0.1) This is my initial upload. The module is fare \n\t\tfrom finished. But as I could do with some input from other vim users\n\t\tSo I have chosen to let people know I'm working on it. \n\n\t\tTo be conform with vim-script naming conventions functions are\n\t\tprepended with VU (VimUnit). So stuff you would normaly would call \n\t\tVUAssert are called VUAssert, TestRunner* are called VURunner and so on.\n\t\tGlobal variables starts with vimUnit*\n\t\t\n\n  Best Regards\n  Staale Flock,  (staale -- lexholm .. no)"}, {:name=>"lxTrace", :summary=>"lxTrace provides vim-script developers with a simple traceing utility.", :description=>"  FILE:                      vim_lxtrace.vim\n  AUTHOR:               Staale Flock, Staale -- lexholm .. no\n  VERSION:               0.1\n  LASTMODIFIED:    10 Nov 2004\n\n  PURPOSE:\n\t\tTo provide vim scripts with a simple tracing utility.\n\t\t\n  WHY:\n \t\tI have been working on some vim-scripts and read a lot of them\n \t\tthe last two weeks and I thought I needed a Tracing utility to\n \t\tease analysis of how some scripts works.\n \t\t\n  REQUIREMENT:\n \t\tNone (tested with vim/gvim 6.3 on a debian system), this script \n \t\tshould work as a standalone plugin.\n \t\tBut I'm primarly using it with the winmanager plugin\n\t\t(http://www.vim.org/scripts/script.php?script_id=95 ) and as such most\n \t\tof my testing is done with this plugin integrated in the winmanager\n \t\tworkspace.\n \t\t\n  INSTALLATION:\n  \t\tPlace this file in your plugin directory (~/.vim/plugin/)\n\n  \t\tWhen you start vim again and open a vim file for editing you should\n  \t\tget a message that lxTrace has installed it's documentation.\n  \t\tTo get you started you could try :h lxTrace\n\n  \t\tIf you have installed winmanager you should add LxTrace to the\n  \t\tg:winManagerWindowLayout in your vimrc file. My line looks like\n  \t\tthis:\n\t\t\tlet g:winManagerWindowLayout = 'FileExplorer,TagList|BufExplorer,LxTrace'\n  \t\t\n  TIPS:\n  \t\tDocumentation (when written..:o) is found at the bottom of this file. \n  \t\tThanks to code from vimspell.vim it should be self-installing the first\n  \t\ttime this module is loaded. When installed you could try \n  \t\t\t:help lxTrace\n \n  NOTE:\n\t\t10 Nov 2004 (v 0.1) This is my initial upload. The module probably \n\t\tmisses functionality and has undetected bugs. So feel free to\n\t\tsuggest improvements.\n\t\t\n\n  Best Regards\n  Staale Flock, (staale -- lexholm .. no)\n  Norway\n"}, {:name=>"vim2ansi", :summary=>"Convert highlighted text into ansi control sequence", :description=>"This is a script to convert current window into ansi color control sequence according to the vim syntax highlighting\nUsage of the script is similar to 2html.vim."}, {:name=>"synmark.vim", :summary=>"Highlight text at a fixed location", :description=>"This plugin provides commands for highlighting text at a fixed position. This \nworks by dropping \"marks\" for the start and end of a region to be \nhighlighted. It is mainly of use for other plugins, which display some \nexternally provided text, and need to highlight some externally prescribed \nportions of it.\n"}, {:name=>"vim_faq.vim", :summary=>"script to install the Vim FAQ as a Vim help file", :description=>"This is the script with which Yegappan Lakshmanan generated the Vim FAQ in Vim Help format. \n\nIf you're just interested in the Vim FAQ in Vim Help format you might as well get it here: http://www.geocities.com/yegappan/vim_faq_help.txt . But if you'd like to help (Yegappan and) me improve this script (or just have a look at this script out of curiosity) you might want to download this script.\n\nThere's no documentation. The script should have enough comments to explain itself."}, {:name=>"jhlight.vim", :summary=>"A colorscheme with a light grey background", :description=>"A screenshot is available at http://planetxml.de/vim-colorscheme.php"}, {:name=>"javascript.vim", :summary=>"JavaScript with ASP.NET support", :description=>"JavaScript with ASP.NET support (.js.aspx)\n\nIt colors only directives, not C# or VB.NET code."}, {:name=>"css.vim", :summary=>"CSS with ASP.NET Support", :description=>"CSS with ASP.NET Support (.css.aspx)\n\nIt colors only directives, not C# or VB.NET code."}, {:name=>"scratch.vim--Who", :summary=>"a plugin to create a scratch buffer", :description=>"    this script creates a scratch buffer like what emacs does for you, you can write anything there, but its content will not be saved, so DONT put any important things in scrath buffer! Several commands and keymaps will help you.\n\n\nUsage:\n    you can press <F4>s to open the scratch buffer window, and close it by press <F4>s again. the contents of the scratch buffer will not be lost until you quit Vim.\n\n    <F4><S-s> will paste from register \" to the scratch buffer. A blank line is added between pasting.\n\n    You can have only one scratch buffer open in a single Vim instance.\n\n    scratch.vim itself contains detailed description in both English and Chinese.\n\n\n    this scratch.vim is part of Bruce Who's vim package which is not fully finished.\n\n========================================\n\n中文简介(chinese)\n此脚本用于创建一个scratch缓冲区，你可以在这里打草稿，写一些临时的内容而不必创建一个文件，呵呵。但是退出vim后这个缓冲区的内容会消失，所以不要在这里写重要的东西！还定义了一些命令和快捷键。\n\nscratch.vim本身有更详细的说明。"}, {:name=>"Japanese-Keymapping", :summary=>"Provides keymapping for Japanese Hiragana and Katakana letters", :description=>"This packages contains keymappings for 2 Japanese alphabets, Hiragana and Katakana. This one allows on to enter the phonetic equivalent of the characters and it will translated into the correct unicode character for that letter."}, {:name=>"vcbc.vim", :summary=>"Colorscheme based on Visual C++ 6.0 and Beyond Compare (for diffs).", :description=>"A colorscheme based on the colors in Visual C++ 6.0 for syntax highlighting with some modifications, and a colors for diffs based on the colors for Beyond Compare."}, {:name=>"scilab.tar.gz", :summary=>"Syntax file for Scilab.", :description=>"Script provides syntax hilighting for Scilab, a scientific software package for numerical computations similar to Matlab  (http://www.scilab.org).  Screenshot: http://vamo.euweb.cz/vim/scilab/scilab.png\nThere is a script for indenting (vimscript#1138)."}, {:name=>"scilab.tar.gz-indent", :summary=>"Indent file for Scilab.", :description=>"Script provides indenting for Scilab, a scientific software package for numerical computations similar to Matlab (http://www.scilab.org). Screenshot: http://vamo.euweb.cz/vim/scilab/scilab.png\nThere is a script for syntax hilighting (vimscript#1137)."}, {:name=>"tree", :summary=>"A treeview framework", :description=>"tree is an abstract framework for tree views. I've written a FileTree plugin based on it, which behaves like  Patrick Schiel's opsplore script. It takes callback functions to comunicate with the model  upon which it works. I plan to write JExplorer based on it.\nSee tree.txt for more detales.\n\n"}, {:name=>"FileTree", :summary=>"A file tree similar to opsplorer", :description=>"A file tree exporer based on the tree.vim script.\nSince version 1.0 it has CD command and directory stack similar to shell's one.\nYou can use RFileTree command to split it on the right side of the window or similar LFileTree,BFileTree,TFileTree commands. FileTree command uses default values for placing window.\n\nI will gladly accept any \\(comments\\|bug reports\\|request for feature\\)\\+"}, {:name=>"Cisco-ACL-syntax-highlighting-rules", :summary=>"provides highlighting for files with Cisco ACLs", :description=>"This syntax highlighting script can be used for files which contain Cisco ACL rules. This is particulary usefull for Cisco ACL framework administration. (e.g. keeping ACLs in cvs, editing them and loading to Cisco boxes automatically)\n\nThis script can be used with aclcheck (http://techie.devnull.cz/aclcheck)"}, {:name=>"header.vim", :summary=>"Adds a header -author, path, timestamp- when a new file is created.", :description=>"When a new file is created the plugin inserts automatically a customizable header on the top -filetype, author, timestamp-. When the file it's no new -so it's already created- the plugin checks the 'last modified' field in line number five -if this exists- and then it updates its value. It's my first vim plugin and it's very plain -I beg pardon to vim's gurus for my daring!- I didn't find anything alike, so I had to write my own script. Any correction or modification will be welcome. \n"}, {:name=>"inkpot", :summary=>"Inkpot, a dark scheme for GUI and 88/256 colour terms", :description=>"A darkish scheme which works in the GUI and in some 88 colour terminals (urxvt, for example) and 256 colour terminals (xterm with TERM=xterm-256 seems to work). This won't work in regular 8/16 colour terms, and depending upon your setup you may need to sacrifice a few goats to get the 88/256 things to work.\n\nKeeping things up to date on vim.org is a nuisance. For the latest version, visit:\n\n    http://github.com/ciaranm/inkpot"}, {:name=>"jhdark", :summary=>"A dark colorscheme for gui and console", :description=>"See http://planetxml.de/vim-colorscheme.php for a screenshot."}, {:name=>"C-fold", :summary=>"Automates folding and unfolding C & C++ comments and code blocks.", :description=>"Automatically folds all blocks (i.e. { } ) in C and C++ and defines a function that performs a command e.g. zo on all folds beginning with text that matches a given pattern.\n\nThis allows for the following mappings defined by the plugin:\n\n      z[ - Opens all doxygen-style comments\n      z] - Closes all doxygen-style comments\n      z{ - Opens all code blocks (i.e. {  })\n      z} - Closes all code blocks"}, {:name=>"ccimpl.vim", :summary=>"Generates a skeleton implementation of classes defined in a C++ header file.", :description=>"This script defines a function Implement(), that when called from a C++ header file generates a skeleton implementation of the classes defined in the header, in a new vertical window.\n\nThis is great for defining and documenting the interface to a class and then using this function to generate a skeleton implementation to be filled in.\n\nTODO: Handle functions outside of classes and thus C compatibility.\n            Implement static member initialization."}, {:name=>"bufkill.vim", :summary=>"Unload/delete/wipe a buffer, keep its window(s), display last accessed buffer(s)", :description=>"Basic Usage:\nWhen you want to unload/delete/wipe a buffer, use:\n  :bun/:bd/:bw to close the window as well (vim command), or\n  :BUN/:BD/:BW to leave the window(s) intact (this script).\nMappings are also defined.\n\nDetailed Description: \nThis is a script to \na) unload, delete or wipe a buffer without closing the window (or windows) \n    it was displayed in\nb) in its place, display the buffer most recently used in each window \n    it was displayed in.  This selection is taken from the full list of \n    buffers ever displayed in each respective window (since vim was started)\nc) allow one level of undo in case you kill a buffer then change your mind\nd) allow various customisations via option variables\n\nThe inspiration for this script came from\na) my own frustration with vim's lack of this functionality\nb) the description of the emacs kill-buffer command in vimtip #622\n   (this script basically duplicates this command I believe,\n   not sure about the undo functionality)\nc) comments and many mails from Keith Roberts when the issue was \n   raised in the vim@vim.org mailing list."}, {:name=>"perl-test-manage.vim", :summary=>"Keep Track of the Number of Tests in a Perl Test File", :description=>"This script helps keeping track of the number of tests in a Perl test\nfile (t/*.t) by counting '# TEST' comments.\n\nIn order to keep track of the number of tests you need to have a statement\nlike:\n\n    use Test::More tests => 20\n\nat the beginning of the test file. Then you need to make sure, every test\nhas a corresponding '# TEST' comment. If you run several tests in a loop,\nyou can append asterisks plus number to the comment. So for example the \ncomment:\n\n    # TEST*3*5\n\nwill add 15 tests to the test number.\n\n"}, {:name=>"GetFDCText.vim", :summary=>"Returns a string, to be displayed for a closed fold", :description=>"Tries to find a meaningful text that should be displayed in the folded column.\nIf something is meaningful is decided by a regular expression provided by the user.\nIt does *not* decide when and how a fold is made, nor what is to be folded away.\n\n"}, {:name=>"cygwin_utils.vim", :summary=>"utility functions for invoking *nix cmds in Windows/Cygwin (for use  in scripts)", :description=>"\"   This script has been created as a means to hopefully make using\n\"   cygwin easier, so that scripts that utilize *nix commands can be\n\"   ported to windows.\n\"\n\"   Right now this script provides only a few funtions, but it may grow\n\"   over time.\n\"\n\"   I'm making sure that each function will be safe to use under *nix\n\"   (specifically linux, since that's what I use) by confirming that vim\n\"   is running under windows before executing any windows/cygwin\n\"   specific commands.\n\"\n\" Platform:\n\"   Windows:\n\"     Requires cygwin (http://cygwin.com).\n\"   *nux:\n\"     Should be safe to use any function defined within on *nix systems\n\"     since each function checks the platform before running system\n\"     specific commands.\n\"\n\"     However, if you don't want *nix users to have a dependency on this\n\"     plugin, you may define proxy functions that first check if a function\n\"     is defined before using it.\n\"\n\"     Ex. Defining a proxy function for translating paths based on OS.\n\"       function! s:DeterminePath (path)\n\"         if exists(\"*CygwinPath\")\n\"           return CygwinPath(a:path)\n\"         endif\n\"         return a:path\n\"       endfunction\n\"\n\" Configuration:\n\"   Note: Configuration is only necessary on Windows machines.\n\"\n\"   g:CygwinHome\n\"     Set this to the location of your cygwin installation dir.\n\"     Ex.\n\"       let g:CygwinHome = 'c:/cygwin'\n\"     Note: Be careful using '\\&#039 in double quoted strings since\n\"     that represents the start of an escape character in vim.\n\"\n\"   On windows you will need to add your cygwin/bin directory to\n\"   your WINDOWS path.\n\"     PATH=%CYGWIN_HOME%\\bin;%PATH%\n\"   So that unix commands can be executed from your dos console.\n\"\n\"   Also, I had issues using Windows' default temp directory.\n\"   Vim continually had issues accessing temp files (that I have\n\"   no control over).  It seems it was due to the spaces in the\n\"   directory path, so I changed my system %TMP% and %TEMP%\n\"   variables to point to c:\\cygwin\\tmp instead, and that solved\n\"   my issues.  You may have to do the same.\n\"\n\" Limitations:\n\"   All file and directory paths used in cygwin commands need to\n\"   be absolute.  When the vim shell is set to a cygwin shell, the\n\"   shell defaults to executing in the user's home directory.\n\"   Because of this, relative paths cannot be used.\n"}, {:name=>"globalreplace.vim", :summary=>"Prompted global search and replace", :description=>"Instead of typing %s/foo/bar/gc every time you want to search and replace in a file simply call this function and get prompted for the text to find and what to replace it with.\n\nI looked for something like this, but didn't find it, hope it's useful (my first, and admittedly unimpressive script)\n\np.s.\n\nYou might want to tack \"I\" onto the regexp to make it case sensitive, so it'll look like this:\nexecute \"%s/\".l:find.\"/\".l:replace.\"/gcI\"\n"}, {:name=>"remote-PHP-debugger", :summary=>"remote debugger interface to DBGp protocol.", :description=>"This python script provide debugger interface to DBGp protocol.\n( but, only tested on Xdebug2.0 - http://www.xdebug.org/ )\n\nscreen shot:  http://segv74.homeip.net:7000/debugger.gif \n\nRequirements)\n- DBGp protocol enabled debugging module. such as xdebug.\n  ( I don't know there are free DBGp debugger except xdebug )\n-  vim 6.3 ( only tested on vim 6.3 ) with !!!!!!!!!!!!\n- python 2.3+ interface , +sign feature  !!!!!!!!!!!!\n  ( < python 2.2 don't have socket timeout. sorry for my lasiness. )\n- this vim script. ( debugger.vim / debugger.py )\n\nUsage)\n1. setup xdebug 2.0 correctly. or other DBGp enabled server.\n   ( with proper remote debug option )\n\n2. press <F5> and browse php file within 5 seconds. :-)\n    If you did setup correctly, server will make connection to vim.\n    [ you can change port by editing last line of debugger.vim ]\n\n    all the windows currently opened will be closed and debugger interface will be shown.\n\n3. in debuggin mode\n<F1> : resizing windows\n<F2> : step into\n<F3> : step over\n<F4> : step out\n\n<F6> : stop debugging\n\n<F11> : shows all variables\n<F12> : shows variable on current cursor \n\n,e : evalute expression and display result. cursor is automatically move to watch window. type line and just press enter.\n\ncommand line command)\n:Bp    : toggle breakpoint on current line\n:Up    : goto upper level of stack\n:Dn    : goto lower level of stack\n\n4. press <F6> to stop debugging.\n    then, debugger windows will be closed and windows will be restored.\n    ( holy :mksession feature )\n\n5. notes\n-  you will see python's exception message. almost of them occurred when connection is closed. xdebug dosen't send message for last file/line information.\njust press <F6> to restore sesson. sometimes are xdebug's bug.\n- to use with a lot of people with same time, it may needs DBGp proxy. you may download MIT licensed(?) version of it from activestate's komodo's evalution copy. and, you have to change this script a little.\n- it doesn't all features of DBGp. very essential part of it.\n\n*** there will be no future release plan of this script.***\ncurrently I'm working on PHP interface on vim, and I will use my php version of this debugger. maybe someday you can see it. so, I really appriciate if someone upgrade this script.\n\nVERY IMPORTANT TIP)\nIf you turn off syntax highlighting, It will increase speed very much !!!!!!\n:syn off (but, not pretty)\n"}, {:name=>"xbl.vim", :summary=>"Syntax highlighting for Extensible Binding Language (XBL)", :description=>"Syntax highlighting for Extensible Binding Language (XBL). The main purpose of the script is to syntax highlight javascript code contained in CDATA blocks.\n\nThe script is a hack; my understanding of VIM scripting is almost nil. I look forward to improvements made by anyone.\n\nTo have vim detect the file type from files with the .xbl extension,\njust add the following two lines to the \"filetype.vim\" file in the\ndirectory that contains the \"syntax\" directory:\n\n\" XBL\nau BufNewFile,BufRead *.xbl   setf xbl\n\nTo have xbl syntax coloration appear in the syntax drop-down menu, just\nadd the line:\n \nan 50.120.240 &Syntax.WXYZ.XBL :cal SetSyn(\"xbl\")<CR>\n\nto the \"synmenu.vim\" file (the value 240 in 50.120.240 might differ\naccording to what is already in your own file).\n\n-- Thanks to Xavier Grosjean <xavcap AT c-est-simple DOT com> for\ninformation on file type detection and menu updating.\n\nUse \":set syntax=xbl\" to turn it on for non-xbl files after the file is opened.\n"}, {:name=>"JavaKit", :summary=>"A collection of tools for developing java apps", :description=>"A collection of tools for developping java applications.  The installation guide is in the readme.txt file.  If you have problems and questions please send them to yiuwingyip@126.com."}, {:name=>"ledger.vim", :summary=>"Syntax highlighting for ledger (accounting system) files", :description=>"Highlights the syntax for Ledger (http://ledger.sourceforge.net/) command line accounting package."}, {:name=>"ledger.vim-indent", :summary=>"indenting for Ledger accounting files", :description=>"Sets the indenting for a ledger file used with the ledger (http://ledger.sourceforge.net/) accounting system"}, {:name=>"txt2tags", :summary=>"Syntax highlighting for txt2tags documents", :description=>"A syntax highlighting scheme for txt2tags. Both txt2tags and this syntax file were created by Aurelio Marinho Jargas.\ntxt2tags' official site: http://txt2tags.sf.net/"}, {:name=>"unhtml", :summary=>"Converts HTML tags to a simpler syntax", :description=>"This script converts HTML tags into txt2tags marks. It was created by Aurelio Marinho Jargas, creator of txt2tags. For more info on txt2tags, visit http://txt2tags.sf.net/ .\n\nINSTRUCTIONS\n1. Open the HTML file on Vim and execute :so /path/to/unhtml.vim\n2. A new <yourfile>.html.t2t will be saved.\n3. Check the new .t2t file and correct by hand what has left."}, {:name=>"pagemaker6", :summary=>"Syntax for Adobe Pagemaker 6 files", :description=>"A syntax highlighting scheme for Adobe Pagemaker 6. This file was created by Aurelio Marinho Jargas."}, {:name=>"tSkeleton", :summary=>"File Templates and Code Skeletons/Snippets", :description=>"tSkeleton provides file templates and code skeletons (snippets). These \ntemplates may contain special tags that are replaced with some computed \nvalue (e.g., variables, user input ...), vimscript code, or place \nholders/jump positions (when used in conjunction with imap.vim or \n|TSkeletonMapGoToNextTag()|.\n\n\nFile templates:\n\nIn order to add support for a new filetype, save a skeleton file to \n~/.vim/skeletons/file.suffix and add something like this to your .vimrc \nfile:\n\n    autocmd BufNewFile *.suffix       TSkeletonSetup template.suffix\n    autocmd BufNewFile /here/*.suffix TSkeletonSetup othertemplate.suffix\n\nAlternatively, you can store templates as:\n\n    ~/vimfiles/skeletons/templates/GROUP/FILETYPE PATTERN\n\n\nCode skeletons:\n\nSmaller skeleton bits are stored in SKELETONS/bits/FILETYPE/ or \nSKELETONS/bits/general/. I.e., code skeletons can be filetype specific \nor generally available.\n\nThe filenames of the bits may be grouped in submenus as in:\n\n    ../tex/&Define.%5Cnew&command\n    ../tex/&Define.%5Cnew&environment\n\nThis will create skeletons for \\newcommand and \\newenvironment but will \ngroup the skeletons under the TSkel.Define. menu with the respective \naccelerators.\n\n\nDefault key maps:\n\n    <Leader>## ... Expand name under cursor\n    <Leader>#t ... Insert code skeleton via command line\n    <c-\\><c-\\> ... In insert mode, expand the bit before the cursor (on \n                   a German keyboard this happens to be <c-#><c-#>)\n\n\nGeneral remarks:\n\nA list of special tags:\n\n    <+FILE NAME ROOT+> :: the file name root\n    <+FILE NAME+>      :: the file name\n    <+FILE SUFFIX+>    :: the file suffix\n    <+FILE DIRNAME+>   :: the file's directory\n    <+NOTE+>           :: a note\n    <+DATE+>           :: the current date (the format is controlled via \n                          g:tskelDateFormat)\n    <+AUTHOR+>         :: the author's name (g:tskelUserName)\n    <+EMAIL+>          :: the author's e-mail (g:tskelUserEmail)\n    <+WEBSITE+>        :: the author's homepage (g:tskelUserWWW)\n    <+LICENSE+>        :: the name of the license this file is released \n                          under (g:tskelLicense)\n\ntSkeleton also supports the following pseudo-tags:\n    <+CURSOR+>         :: where to place the cursor after insertion\n    <+&NAME+>          :: a vim option\n    <+g:NAME+>         :: a global variable\n    <+b:NAME+>         :: a buffer local variable\n    <+?QUERY?+>        :: query the user\n    <+?VAR|QUERY?+>    :: query the user and propose some choices from \n                          the variable ${VAR}\n    <+bit:BIT>, <+bit:BIT|\"DEFAULT\">, <+bit:BIT|COMMANDS> :: insert a \n                          bit; if the bit isn't defined for the current \n                          filetype, use DEFAULT; if DEFAULT matches \".*\" \n                          insert it as a string; otherwise interpret it \n                          as a command sequence to be fed to normal\n    <+tskel:TSKELETON> ... :: same as the above\n    <+include(TSKELETON)+> :: Another synonym for the above.\n    <+call:FUNCTION(ARGS)+> :: Insert the result value of some function\n    <+execute(EX COMMAND)+> :: Run a vim command.\n\nFlow control:\n    <+if(CONDITION)+>\n    <+elseif(CONDITION)+>\n    <+else+>\n    <+endif+>\n\nLoops:\n    <+for(VAR in LIST)+>\n    <+endfor+>, <+endfor(VAR)+>\n\nVariables:\n    <+let(VAR=VALUE)+>\n\nInteraction:\n    <+input(VAR, QUERY, [DEFAULT], [COMPLETION])+>\n\nOther:\n    <+nl+>\n    <+joinline+>\n    <+nop+>\n\nA wiki like table could then be constructed using a skeleton like this:\n\n    <+input('s:my_rows?!', 'Rows: ')+>\n    <+input('s:my_cols?!', 'Cols: ')+>\n    <+for(i in range(s:my_rows))+>\n    |<+for(j in range(s:my_cols))+> <+CURSOR+> |<+endfor(j)+><+nop+>\n    <+endfor(i)+>\n\nUnknown tags are kept in the expanded skeleton. These tags can be used \nas cursor jump marks. This syntax was originally used by imap (vimscript \n#244 or vimscript #475). If you don't want to install imap, you can also  \nuse |TSkeletonMapGoToNextTag()|.\n\nYou can use vimscript #3326 to enhance your templates with dynamic placeholders.\n\n\nDemo:\nhttp://vimsomnia.blogspot.com/2010/11/tskeleton-and-stakeholders-vim-plugins.html\n\n\nAlso available via git\nhttp://github.com/tomtom/tskeleton_vim\n"}, {:name=>"foldcol.vim", :summary=>"fold/unfold by visual-blocks (columns)", :description=>"foldcol.vim is a plugin which implements two maps:\n\nctrl-v move \\fc  : select a visual block, then \\fc will fold the region away\n\n\\fc : when not in visual-block mode (ie. in normal mode), a \\fc will undo the visual-block folds produced by foldcol.vim.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#FOLDCOL)\n"}, {:name=>"jexplorer", :summary=>"package/class browser for Java.", :description=>"This plugin allows browse Java package system.\n\nrequirments:\n  1. exuberant ctags ( or at least tags file )\n  2. grep,sed,uniq - utility ( sorry widnows folk)\n  3. maltvals.vim && tree.vim   plugins for vim\n  \nJExplorer command  opens window with explorer in it.\n<SPACE> - pressed on a class or a member will show a prototype of the thing\nO  - pressed on a class or a member will try to open file with the tag and take you to the tag (currently it works only for tag files generated with relative paths).\ni  - pressed on a packge or  a class will generate import statment.\ni  - pressed on a function will import (write an empty function) this function.\n     (for last to cases visual selection allowed)\n\nBUGS and LIMITATION:\n    1. currently works only for unix-like systems\n    2.  Rather slow: on a 15Mb tag file (jdk src) it take 8s to open defalul package\n           for ather packages it is a bit faster (no more then 2s)\n    3. opens java files only in case tag file was generated with relative paths.\n \nWITHOUT YOUR FEEDBACK IT WON'T BE IMPROVED,\nso let me know if yuo have some thoughts about it.\n\n    \n"}, {:name=>"html_danish", :summary=>"Change danish special characters (æøå) to their html-version and vice versa", :description=>"Useful for people developing Danish (or perhaps Norwegian) websites in HTML or PHP.\n\nUpon loading a HTML or PHP-file, this script replaces all instances of the HTML entities of the Danish characters (aelig, oslash, aring) with the normal characters (æ,ø,å) for easy reading.\n\nUpon saving the normal Danish characters are replaced with the HTML encoded.\n\nInspired by the html_umlaute: vimscript #907  and the html_portuguese: vimscript #924"}, {:name=>"EditJava", :summary=>"lookup source file for classname under cursor", :description=>"Place cursor over a java classname and enter the scripts map key sequence (I  map it to \",g\"). The base java file name is <cword> . \".java\" \n\nFirst if the cursor is over a package classname like 'java.util.Map', then if the cursor is over 'Map', the java/util/Map.java file is opened else if the cursor is over, say, 'util', then the java/util directory is opened. \n\nOtherwise, the script looks for a file with the filename in local directory and  if it exists, opens it.\n\nIf not, it looks for an explicit import file with the filename, if it can be found  in the java source path, then it opens it. If not found, use 'locate' command to look for filename plus import package directories prepended. If found then open it.\n\nIf not, it looks for a file in \"$JAVA_HOME/src/java/lang\" and if found opens it. \n\nIf not it then looks for a match using any of the implicit import statements, those ending in * and in the java source path. If found open it. Otherwise use 'locate' command to search for filename plus import package path prepended and if found open it.\n\nLastly, if not found by any of the above methods it then attempts to find a file using the package path. The current file might be in a parallel junit directory or in some parallel directory structure. If this is found in the java source path then it is opened otherwise it uses \"locate' command to search for the file and if found opens it.\n\nEditJava plus the bufexplorer.vim script, \nthe \"edit cwd\" Tip #2:\nmap ,d :e <C-R>=expand(\"%:p:h\")<CR><CR>  \nand the mapping allowing one to toggle between files\nmap gg :e#^M \nwith the buffer edit commands (where N is an integer)\n:bp\n:bpN\n:bn\n:bpN                         \nprovide one with a collection of tools to view and navigate Java sources.\n"}, {:name=>"tolerable.vim", :summary=>"A black-on-white scheme inspired by BBEdit", :description=>"This  black-on-white colorscheme uses simple, easily identifiable colors, but shouldn't be too gaudy. The scheme was inspired by BBEdit and other Mac OS text editors that have adopted similar color schemes. Unlike BBEdit, comments are low-contrast, and split boundaries are not too stark."}, {:name=>"Wiked", :summary=>"Syntax file for file.wiki", :description=>"its a plugin for Vim to build a console-wiki with html-export.\ni took a wiked and extended it, with thinks i want.\n"}, {:name=>"substitute.vim", :summary=>"Fast mappings for performing substitutions", :description=>" Visual and normal mode mappings for easy access to substitutions with the\n s/// command.\n\n This script will make it easy to replace the word under the cursor, or the\n visually selected text across the whole file. If more than one line is\n selected the substitution will only occur on the selected lines.\n\nDefault key mappings:\n\n   ;;  Perform substitution across the whole file.\n\n   ;'  The same, but prompt for each substitution.\n\n Pressing <C-R><C-R> will insert the text being replaced into the command line\n window.\n\n When the search and replace has completed the cursor can be returned to where\n the search started by jumping to mark ' (pressing '' or `').\n\nNote:\n\n - The contents of a register (default \"9) is overwritten\n\n"}, {:name=>"sharp-Indent", :summary=>"Indent for C# (keywords: C-sharp, C sharp, CSharp)", :description=>"Indent C# files, based on the built-in function cindent()\n\nFeatures:\n\n- Indent single-line attribute\n"}, {:name=>"GoboLinux-ColorScheme", :summary=>"First Version", :description=>"ColorScheme[1] based in the GoboLinux's official site[2]\n\n[1] http://img.photobucket.com/albums/v106/teivan/Computador/gobo_vim.png\n[2] http://gobolinux.org"}, {:name=>"Abc-Menu", :summary=>"Adds alphabetic menus of commands", :description=>"Abc-Menu installs some more menu-Items for easier access and \nremembering.\n\nvim is a very powerfull editor with tons of functions and even \nmore documentation. I always found new functions and i was looking\nfor a way to search them quickly. index.txt was my friend so far :)\n\nSometime I have my little daughter laying in my arm and I have only \none hand for writing. In this case, some functions of vim are very hard\nto reach.\n\nThis file helps me in both cases.\nI made an alphabetical menu for some of the functions for the normal mode.\nThe reason for strict alphabetical order  is to make using the menu\nlike typing the commands and help to remember to type the command next time \nor to be able to use another vim on another maching without this special menu.\n\nThere are some special sub-menus\n i = shift\n k = control\n l = alt\nI think ijkl are keys that everyone knows. You won't find them in the Abc-Menu.\n\nExample for using the menu:\nIf you want to reach all commands in Normal mode with Uppercase characters\ntype following keys:\n  alt      invoke menu  (or alt-n together)\n    n      normal-Mode commands\n     i    shift-commands \n\nLook at the bottom of the screen. Every command has a little tip. I took most\ntips from index.txt.\n\ntested with gvim 6.2, windows XP\nKnoppix 3.7: the tips are missing,  Hotkey only in left textarea possible\n \nScreenshots:\nhttp://jochen-behrens.de/vim/vim-menu-g.png\nhttp://jochen-behrens.de/vim/vim-menu-n.png"}, {:name=>"DetectIndent", :summary=>"Automatically detect indent (expandtab, shiftwidth, tabstop) settings", :description=>"This script provides a command which will attempt to guess the correct indent settings for an open file, for use when there is no modeline available. Note that this is a pure vim implementation, and doesn't require any external applications or interpreters.\n\nUsage:\n\n:DetectIndent\n\nMay also be used in an autocommand, for example:\n\n:autocmd BufReadPost * :DetectIndent\n\nOptions:\n\nTo prefer 'expandtab' to 'noexpandtab' when no detection is possible: \n:let g:detectindent_preferred_expandtab = 1\n\nTo specify a preferred indent level when no detection is possible:\n:let g:detectindent_preferred_indent = 4\n\nNotes:\n\nDetection is by no means perfect. It won't work if files use especially perverse combinations of spaces and tabs, or weird tab widths. Bug reports and patches encouraged...\n\nKeeping things up to date on vim.org is a nuisance. For the latest version, visit:\n\n    http://github.com/ciaranm/detectindent"}, {:name=>"templates.vim", :summary=>"Load filetype templates for new files", :description=>"templates.vim lets you use filetype-dependent templates for new files, using a simple but effective mechanism.\n\nIt is, in various ways, a more sophisticated approach to the same problem that vimscript #1160 addresses, but doesn't try to do quite as much.\n\nUsage is simple: when you start with a fresh buffer, setting a filetype on it will load the corresponding template. To test it, open Vim and issue\n\n    :set ft=html\n\nOne new command has been added for convenience: it is called :New and takes exactly one argument. It will open a new empty window and set the filetype for it to the argument given.\n\nTemplates are kept in \u0093.vim/templates\u0094. The template filename must be equal to the filetype. So when you set the filetype of an empty buffer to \u0093html\u0094, \u0093.vim/templates/html\u0094 will be loaded. It's that simple.\n\nIn the templates, you can use a cursorline to specify a position for the cursor after loading the template. Such a cursorline works much like a modeline: the word \u0093cursor:\u0094 must appear, followed by one or two numbers and opionally the word \u0093del\u0094, all separated by whitespace. The first number specifies the line the cursor will be placed in. The second, if present, specifies a column. The optional word \u0093del\u0094 directs the script to remove the cursorline at load time. Take a look at the templates supplied in the package, it should be fairly self-explanatory."}, {:name=>"tComment", :summary=>"An extensible & universal comment plugin that also handles embedded filetypes", :description=>":TComment works like a toggle, i.e., it will comment out text that \ncontains uncommented lines, and it will uncomment already \ncommented text (i.e. text that contains no uncommented lines).\n\nIf the file-type is properly defined, :TComment will figure out which \ncomment string to use based on the values of &commentstring or &comments. \nFor some filetypes, the comment definition is explicitly defined. You can \n|tcomment#DefineType()| to add your own definitions.\n\nTComment knows how to deal with embedded code of a different filetype \nthan the main filetype, e.g., ruby/python/perl regions in vim scripts, HTML or \nJavaScript in php code etc.\n\nAs operator (the prefix can be customized via g:tcommentMapLeaderOp1 \nand g:tcommentMapLeaderOp2):\n\n    gc{motion}   :: Toggle comments (for small comments within one line \n                    the &filetype_inline style will be used, if \n                    defined)\n    gcc          :: Toggle comment for the current line\n    gC{motion}   :: Comment region\n    gCc          :: Comment the current line\n\nPrimary key maps:\n\n    <c-_><c-_>   :: :TComment\n    <c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>\n    <c-_>b       :: :TCommentBlock\n    <c-_>a       :: :TCommentAs <QUERY COMMENT TYPE>\n    <c-_>n       :: :TCommentAs &filetype <QUERY COUNT>\n    <c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>\n    <c-_>i       :: :TCommentInline\n    <c-_>r       :: :TCommentRight\n    <c-_>p       :: Comment the current inner paragraph\n\nThere is also a secondary set of key maps with <Leader>_ as leader (more \npreferable on terminals).\n\nThe full documentation is available here:\nhttp://github.com/tomtom/tcomment_vim/blob/master/doc/tcomment.txt\n\nDemo:\nhttp://vimsomnia.blogspot.com/2010/11/tcomment-vim-plugin.html\n\nAlso available via git\nhttp://github.com/tomtom/tcomment_vim"}, {:name=>"Rhythmbox-Control-Plugin", :summary=>"This plugin can control Rhythmbox in VIM", :description=>"This plugin makes you be able to control Rhythmbox in VIM.\n\nYou can change default Key-Map in rhythmbox.vim.\n\ndefault key\n\nF7 = current song\nShift + F7 = play/stop\nF8 = Previous Song\nF9 = Next Song"}, {:name=>"sharp-Syntax", :summary=>"Syntax for C# 2.0 (keywords: C-sharp, C sharp, CSharp)", :description=>"Syntax for C# 2.0.\n\n\nTODO:\n\n- Folding\n- Xml tag in /** */"}, {:name=>"oceanlight", :summary=>"Pale blue and green winter colors", :description=>"A light pale blue and green colorscheme originally based on oceandeep by Tom Regner (vimscript #368), intended to be easy on the eyes and not kill you with contrast. GUI only."}, {:name=>"OAL-Syntax", :summary=>"Syntax and indenting for the BridgePoint OAL", :description=>"Provides filetype, syntax, and indenting for OAL (Object Action Language) files. OAL is used with the BridgePoint UML modeling tool available from Mentor Graphics.\n\nFiles named *.oal will be automatically recognized.\n\nNOTE: At the present, the BridgePoint editor can't be fully replaced by Vim, so be sure to load changes back into the BridgePoint editor before updating any names in the model!"}, {:name=>"PVCS-access", :summary=>"Difference and browsing abilities for a PVCS archive.", :description=>"Allows PVCS users to view differences by previous version, specified version, or between two versions in vdiff or gvim diff formats.\n\nAllows user to browse all archive versions of the current file.\n\nTested with version 6.0.10. Refer to your PVCS documentation for support.\n"}, {:name=>"context_complete.vim", :summary=>"Context sensitive word completion", :description=>"The focus of this script is to provide context-sensitive word completion - taking advantage of the popular ctags utility and Vim's built-in perl features. \n\nSuppose you have an instance of an object (o), and you've typed:\n\no.set_\n\nWhile you are still in insert mode, press CTRL-J, and this script will then look up the first member of that object that starts with \"set_\" and complete it for you, like this:\n\no.set_range(integer max, integer min)\n\nIf this isn't the completion that you want, then press CTRL-J again for the next member that starts with \"set_\":\n\no.set_name(string name)\n\nand again for the next one:\n\no.set_value\n\nIf you've gone too far then you can go back with CTRL-K. After each completion you are left in insert mode - so you can just continue typing when you've found the one you want.\n\nThe object can also be replaced with a struct, class, 'this', or 'super'.\n\nCompletions can also be made after the open parentheses to complete the list of parameters:\n\no.set_range(<c-j>\n\nOr after the function:\n\no.get_name().compar<c-j>\n\nPressing CTRL-S will skip through the function parameters, visually selecting each in turn - useful for filling in the parameters after completing a function."}, {:name=>"fileaccess", :summary=>"access time based simple file explorer for vim", :description=>"At first, this script looks like mruex.vim script. Please choose favarite one among them.\n\nWhen we work, we access many files, and in general they are in different directories. Thus we have to type related( or absolute ) path or move to the directory which includes the file which we want to access. \n\nThis script help you to omit to type such a tiresome work. This script keeps file name and its absolute directory information which you accessed, and you can briefly access the file which you read or wrote previously."}, {:name=>"avr.vim", :summary=>"syntax higlighting for Atmel AVR assembler", :description=>"This is syntax higlighting script for\nAtmel AVR assembler."}, {:name=>"tesei.vim", :summary=>"syntax higlighting for Tesei (KP1878BM1 1878ВМ1) assembler", :description=>"This is syntax higlighting script for\nTesei (KP1878BM1 1878ВМ1)\nmicrocontrollers (produced by Angstrem)  assembler."}, {:name=>"MultipleSearch2.vim", :summary=>"Improve Multiple search", :description=>"Improved version allow you to navigate your searches, to initialise search with a void search and continue with lat vim search.\n\nMultipleSearch allows you to have the results of multiple searches displayed \non the screen at the same time.  Each search highlights its results in a \ndifferent color, and all searches are displayed at once.  After the maximum \nnumber of colors is used, the script starts over with the first color. \n\nThe command syntax is: \n:Search <pattern1> \nwhich will highlight all occurrences of <pattern1> in the current buffer.  A \nsubsequent :Search <pattern2> will highlight all occurrences of <pattern2> \nin the current buffer, retaining the highlighting of <pattern1> as well. \n<pattern1> and <pattern2> are any search pattern like you would use in a \nnormal /<pattern> search. \n\nThe :Search command honors Vim&#039s &#039ignorecase&#039 and &#039smartcase&#039 settings for \nits own search.  You can use the \\\\c and \\\\C flags in the search pattern to \nforce case matching no matter the setting of &#039ignorecase&#039 and &#039smartcase&#039. \n\nThe :SearchBuffers command works just like :Search, but the search occurs in all currently listed buffers (i.e., appear in the output of :ls).  The match in all buffers will have the same color.  This is different than  :bufdo Search <pattern> because in that case, each buffer will highlight the match in a different color.  Thanks to Jeff Mei for the suggestion! \n\nTo clear the highlighting, issue the command \n:SearchReset (for the current buffer) or :SearchBuffersReset (for all buffers). \n\nYou can specify the maximum number of different colors to use by setting the \ng:MultipleSearchMaxColors variable in your .vimrc.  The default setting is \nfour, but the script should handle as much as your terminal / GUI can \ndisplay.  The g:MultipleSearchColorSequence variable lets you list the \ncolors you want displayed, and in what order.  To make the text more \nreadable, you can set the g:MultipleSearchTextColorSequence variable to a \nlist of colors for the text, each position corresponding to the color in the \nsame position in g:MultipleSearchColorSequence. \n\nIf you change one of the preference variables, you can issue the command \n:SearchReinit \nto update the script with your new selections. \n  \ninstall details \nCopy the MultipleSearch.vim file into your local plugins directory, restart (g)vim, and you are ready to go. \n  \n\n "}, {:name=>"uniface.vim", :summary=>"Uniface Proc language syntax file", :description=>"This is a syntax file for the Uniface 7 Proc language.\nUniface is a 4GL of compuware. "}, {:name=>"turbo.vim", :summary=>"Color scheme based on Turbo Pascal and Turbo C++", :description=>"I missed the colors of Borland's Turbo Pascal and Turbo C++ for DOS, so I tried to duplicate them as well as I could remember them."}, {:name=>"rotate.vim", :summary=>"This file enables Vim to rotate text (counter) clockwise, put it upside down,etc", :description=>"This script enables Vim to do things like rotate text (counter) clockwise (l/r), put it upside down (u),\nexchange lines and columns (x), reorder it from right to left (h) or from bottom to top (v).\nThe command :<range>Rot [arg] allows a range in which this will be done.\nIf no range is specified the current line is taken. The optional argument (in parenthesis) specifies which\noperation is performed. If none is given, lines and columns are exchanged.\nThe command :Rotv [arg] operates on the last visual area and is good for use in Visual mode.\nThe corresponding commands :<range>Srot [arg] and :Srotv [arg] open the result in a new window.\nAny comments are welcome.\n\n"}, {:name=>"cream-replacemulti", :summary=>"Replace text across multiple files", :description=>"\nThis script replaces text across multiple files. It is a pure Vim implementation and does not depend on external utilties that do similar things (like sed, grep, cat, or Find). As such, it is cross-platform and has been tested on both Windows95/XP and Linux.\n\nReplace Multi is intended to be used in the GUI version of Vim, gVim. It presents a rather hackish dialog to take user input for the Find, Replace, and Path components and present options for Case Sensitivity and the use of Vim's Regular Expressions. (Some day in the future it might be adapted to work from the command line without a dialog.)\n\nIn testing, Replace Multi performed a replacment operation on 1000 small files in 25 seconds. (2.80Ghz Pentium 4 Windows XP machine with 1Gb of RAM.) Obviously Vim and system settings could vary this greatly, but as a benchmark this is about 40 files/second.\n\n\nThis is one of many custom utilities and functions for gVim from the Cream project (http://cream.sourceforge.net), a configuration of Vim for those of us familiar with Apple and Windows software.\n\n"}, {:name=>"cleanswap", :summary=>"capture useful text from, and delete, all the vim swap files in ~/.vim/swap", :description=>"This is a super-simple bash script for cleaning up my ~/.vim/swap directory.  I have vim put all its swap files there (set directory=~/.vim/swap) so I can find them in one place.\n\nWhen I run this script, it recovers using each swap file and compares the results against the current version of the file.  If there is no difference, the swap file is automatically deleted. If there are differences, vimdiff is launched so I can recover any changes saved only in the swap file.  When the script is don running, all my swap files are gone.\n\nWarning: This script has only been tested on Linux, and that only a couple times. It may accidentally delete any file on your system.  If you have any other vim sessions running, I assume bad things will happen if you also run this script.  Use at your own risk!"}, {:name=>"matrix.vim--Yang", :summary=>"Matrix screensaver for VIM", :description=>"Matrix screensaver for VIM, inspired by Chris Allegretta's cmatrix."}, {:name=>"hcc.vim", :summary=>"Syntax for Handel-C", :description=>"Syntax file for the Handel-C language. Extends the standard C syntax file with the special types and statements found in Handel-C. "}, {:name=>"wc.vim--jcline", :summary=>"Manuscript word counter - Strunk & White style", :description=>"Provides word count for manuscripts (essay or story documents), compliant with standard author rules (such as Strunk & White style lexicon for English grammar).\n\nStandard word count utilities (like unix 'wc') do not provide an accurate count because they count breaks between words.  In fiction writing, some sentences--like this one--have more words than breaks between words..\n\nTo use, install and type :WC\n\nLine ranges are supported.\n\nTo count the lines of a particular section of a document, insert a new line with 8 dashes, and the count will stop at that line.\n--------\nLike that.\n\nThe word count also ignores the common author mark for section breaks using asterisk as shown below.\n \n* * * \n\nThis script is based on the sed 'wc' example provided in the GNU info pages; the algorithm replaces each whitespace seperated word by a single character and then counts the length of the string.\n\n"}, {:name=>"AutoUpload", :summary=>"Put file to remote location with one click", :description=>"Usage:\n1. Create autoupload.info (or .autoupload.info) file. Files like those are called 'maps'.\n\n2. Each line in map is an entry in format:\n\tfilename : {ftp|dav|scp|etc...}://address\n\t\tor\n\tfilename | {ftp|dav|scp|etc...}://address\n\n   >> Address must end with file name! <<\n   Example entry:\n   localfile.txt | scp://me@mymachine.com/tmp/remfile.txt\n\n3. Or as an alternative:\n    - to first or last lines of buffer to upload add pattern:\n               [text]{white}autoupload:remotepath1[;remotepath2[...]]\n Example line:\n autoupload:scp://me@mymachine.com/tmp/remfile.txt ;ftp://a@b.com/c.txt\n\n4. Then while editing some file pressing <Leader>up ('u' key and 'p' key) will cause script to:\n   - read autoupload.info (.autoupload.info) from dir in which active buffer is stored (or from absolute path if customized that way), or scan first and last lines of active buffer,\n   - store buffer into remote location(s) extracted.\n\nIf no entry for actual buffer is found in autoupload.info, then .autoupload.info is examined.\n\nCustomization:\n\ng:autoUploadMaps (default: \"autoupload.info:.autoupload.info\")\n\nFile names/paths to maps.\n\nCan contain multiple file names separated  by : or |  Files will be examined in order given in this variable.  Paths can be:\n- absolute,\n- realtive - they will be appended to path in which actual buffer is stored!\n\ng:autoUploadScanLines (default: 3)\n\nScript  can  scan last  and  first lines of a buffer for pattern:\n[text]{white}autoupload:remotepath1[;remotepath2[...]]\nFields are separated by ';'  or  '|'.  ';' is used because ':' is always a part of protocol for example ftp://... \nThis variable  contains number of  lines  to scan.\n\ng:autoUploadModelineStart (default: 'autoupload:')\n\nPattern which 'modeline' should begin with. Can contain regex.\n\ng:autoUploadUseBuffer (default: 1, possible: 0, 1, 2)\n\nIf  g:autoUploadUseBuffer  is  set to 0, then no scan is done.\nIf  g:autoUploadUseBuffer>g:autoUploadUseMaps then  script will scan  buffer  before  maps.\nIf g:autoUploadUseBuffer<=g:autoUploadUseMaps then  script will scan  maps  before  buffer.\n\ng:autoUploadUseMaps (default: 1, possible: 0, 1, 2)\nIf  g:autoUploadUseMaps is set to 0 , then no no maps are searched.\nIf g:autoUploadUseMaps=>g:autoUploadUseBuffer then  script will  scan  maps before  buffer.\nIf  g:autoUploadUseMaps<g:autoUploadUseBuffer then  script will  scan  buffer before  maps.\n\ng:autoUploadStopAfterFirstUpload (default: 1)\n\nIf set to 1 then  maximum one upload  will be done  no matter  how many maps will  have proper entries  and  how  many proper entries will be in one map. In  other  words: Find first remote  location that is assigned to actual buffer, use it and return to editor.  This one variable turns off all multiple upload possibilities.\n\ng:autoUploadStopAfterFirstMap\t(default: 1)\n\nIf 1, then processing of maps will stop after first  map  that  had  at  least one matching entry.  So you can assign  multiple remote locations to one file using one map  and  if variable g:autoUploadStopAfterFirstUpload  will be set to 0 then multiple uploads of the same file will be taken according to data in first map that has matching entry.\n\nCombinations of two last options:\n\ng:autoUploadStopAfterFirstUpload = 0\ng:autoUploadStopAfterFirstMap\t= 1\n\nThis will do multiple uploads to addresses taken from only one map  ( first one that has some match).\n\ng:autoUploadStopAfterFirstUpload = 0\ng:autoUploadStopAfterFirstMap\t= 0\n\nThis will  upload  current  buffer  to  every assigned remote location - multiple locations per map and multiple maps will be used.\n\n:call MG_AutoUpload()\t\tMap this to some key combination\n\nExample_customization:\n\tlet g:autoUploadMaps = \".autoupload.info:/root/.remote.inf\"\n\tlet g:autoUploadStopAfterFirstUpload = 0\n\tnnoremap <F12> :call MG_AutoUpload()<CR>\n\nWorth_to_read:\n:help netrw\n\nWarning:\nGlobal map files are dangerous because file names can repeat (index.php main.c, etc). You should use it for special cases only.\n"}, {:name=>"expander.vim", :summary=>"flexible expansion of abbreviations/templates", :description=>"expander.vim requires Vim's Python interface-----\n\nexpander expands abbreviations. Its abbreviations can take arguments that are repeated in the expanded text. For instance, for C++ iterators you can type:\n\n@fib@vector<char>@vec<C-e>\n\nand this expands to:\n\nfor(vector<char>::iterator i = vec.begin(); i != vec.end(); ++i) {\n    *\n}\n\nWith your cursor in the place of the *. Defining new abbreviations is easy. The above one was defined like this:\n\n\"fib\": \"\"\"\nfor($1::iterator i = $2.begin(); i != $2.end(); ++i) {\n$\#$0\n}\"\"\"\n\nWhen expander expands this, it replaces the string $# with spaces equal to your shiftwidth, it puts the cursor at $0, and it replaces $1, $2, etc, with the first, second, etc, arguments."}, {:name=>"vfp8.vim", :summary=>"Visual FoxPro 8 syntax file", :description=>"Visual FoxPro 8 syntax file heavilly based on vfp.vim (from Edward franks).\nI added the typical uppercase conversion for FoxPro keywords and functions but I dropped the 4 letter abbreviations."}, {:name=>"vis", :summary=>"Extended Visual Mode Commands, Substitutes, and Searches", :description=>"I'm hereby making the <vis.vim> script, long available at http://mysite.verizon.net/astronaut/vim/index.html#VIS, also available here at vim.sf.net.  There are two commands made available: B and S.\n\n\n----------------\nVisual Commands:\n----------------\n\n    B\n\n    Use V, v, or ctrl-v to visually mark some region.  Then use\n       :B cmd     (this command will appear as:   :'<,'>B cmd)\n\n    The command will then be applied to just the visually selected region.\n    For examples:\n\n      Use ctrl-v to select a column and then do a substitute on just that column.  \n      ctrl-v ..move.. :B s/pattern/becomes/\n    \n      Use ctrl-v to select a column, then apply an external filter to that column.\n      ctrl-v ..move.. :B !sort\n\n\n----------------\nVisual Searches:\n----------------\n\n    S\n\n    Use V, v, or ctrl-v to visually mark some region.  Then use\n        :S pattern   (this search will appear as     :'<,'>S pattern)\n\n    The search will then be applied to just the visually selected region.\n    It may be repeated with n and N commands, too (without having to\n    re-mark the region).  A plain S will apply the last :S-pattern\n    to the latest selected region.\n\n\n-----------------\nRelated Subjects:\n-----------------\n\n * For incrementing/decrementing numbers, dates, and letters in a column: see vimscript#670 and vimtip#150\n * For sorting based on a column (column-restricted, whole lines but column-keyed), see vimtip#588\n * For overwriting visual blocks with other visual blocks: see vimtip#808\n * For more on applying substitutes to a visual block: see vimtip#63\n * For swapping pairs of visual blocks: see vimtip#329\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#VIS)\n"}, {:name=>"omlet.vim", :summary=>"Much better OCaml indentation, and more...", :description=>"OMLet provides a much better indentation for Caml/OCaml files than the official one. It mostly behaves as tuareg-mode for emacs does. Omlet supports most of the language features, including objects. I believe that the result is already very convincing, check at (http://perso.ens-lyon.fr/david.baelde/productions/omlet.php). You are no more forced to switch to emacs for editing OCaml! And omlet also provides nice folding...\n\nOMLet is nearly stable, and will then be included as official OCaml indentation file in VIm. For now, it is available in the Debian package ocaml-tools."}, {:name=>"ocaml.annot.pl", :summary=>"Displays OCaml type annotations", :description=>"When editing a OCaml file for which annotations have been compiled, press <F3> and get a message with the type of the value under the cursor.\n\nI didn't want to use the python code from original ocaml.vim in omlet.vim (script_id=1196), so I wrote this tiny hack using an external perl script -- no need for feature \"perl\". I only print out the first line, because I found no convenient way to print everything without having the message bar to grow big, mess the screen and have a prompt... To be continued.\n"}, {:name=>"nodiff.vim", :summary=>"defines Nodiff command to get out of diff mode", :description=>"This script provides :Nodiff command, which turns off the diff mode in each window.  When called as :Nodiff! it will turn off the diff mode in all existing buffers including the hidden ones."}, {:name=>"increment_new.vim", :summary=>"Subsitute a pattern with incremented values ENHANCED", :description=>"This is a great (I think) improvement of the plugin increment.vim made by William Natter (natter at magma.ca) (vimscript #842). \n\nI tried to contact William, but his mailbox does not exist... So here it goes.\n\nAs William wrote:\n\"This is a handy plugin that makes easy replacing your favorite pattern (\"@\" by default) with a sequence of incremented values using the \"Inc\" command.  \"\n\nBesides what the original script can do, it has two new features:\n    a) Now you are able to search for a pattern and replace the Nth word from the beginning of the line with the incremental number. \n    b) And also you can get a confirmation message before change.\n\nThe help file is also greatly improved.\n\nHere is an example:\n\n       You have: (beginning with spaces only)\n           ----- cut -----\n                   LMsgInstall6 = 7; // @\n                 LMsgInstall7 = 8;   // @\n               LMsgInstall8 = 9;     // @\n\n               {STANDALONE}\n               LErrConnectionStandAlone1 = 10; //THIS\n               LErrConnectionStandAlone3 = 7; //THIS\n               LErrConnectionStandAlone5 = 12; //THIS\n           {some text}\n               LMsgExitConfirm = 30;\n           ...\n           ----- cut -----\n\n       You do: (with confirmation) \n           :'<,'>Inc p^\\ *\\\\\\<\\[A-Za-z0-9_]*\\\\\\>\\ =\\ [0-9]* w3 i25 s100 c\n                                   (Note that I had to use tree \"\\\" before the \"<\" sign. Since Vim 7 the \"<\" and \">\" have to be skiped by a \"\\\")\n\n       You get:\n           ----- cut -----\n                   LMsgInstall6 = 100; // @\n                 LMsgInstall7 = 125;   // @\n               LMsgInstall8 = 150;     // @\n\n               {STANDALONE}\n               LErrConnectionStandAlone1 = 175; //THIS\n               LErrConnectionStandAlone3 = 200; //THIS\n               LErrConnectionStandAlone5 = 225; //THIS\n           {some text}\n               LMsgExitConfirm = 250;\n           ...\n           ----- cut -----\n\n       Then you do: (without confirmation)\n           :'<,'>Inc pTHIS w3 i3 s5\n\n       You get:\n           ----- cut -----\n                   LMsgInstall6 = 100; // @\n                 LMsgInstall7 = 125;   // @\n               LMsgInstall8 = 150;     // @\n\n               {STANDALONE}\n               LErrConnectionStandAlone1 = 5; //THIS\n               LErrConnectionStandAlone3 = 8; //THIS\n               LErrConnectionStandAlone5 = 11; //THIS\n           {some text}\n               LMsgExitConfirm = 250;\n           ...\n           ----- cut -----\n\n       Then you do: (without confirmation)\n           :'<,'>Inc\n\n       You get:\n           ----- cut -----\n                   LMsgInstall6 = 100; // 0\n                 LMsgInstall7 = 125;   // 1\n               LMsgInstall8 = 150;     // 2\n\n               {STANDALONE}\n               LErrConnectionStandAlone1 = 5; //THIS\n               LErrConnectionStandAlone3 = 8; //THIS\n               LErrConnectionStandAlone5 = 11; //THIS\n           {some text}\n               LMsgExitConfirm = 250;\n           ...\n           ----- cut -----\n\nHope it helps.\n\nKeywords: Inc Increment increment increment.vimnumber numbers num replace substitute subst pattern regex"}, {:name=>"namazu.vim", :summary=>"A frontend to the namazu command-line client.(not mknmz)", :description=>"Namazu is a full text search engine.\nSee http://www.namazu.org/.\n\nnamazu.vim has the following features.\n   - searching from the namazu index.\n   - open a file from search result. (now, only a plain text file)\n\n\" Options:\n\"\n\"   let g:namazu_cmd   = '/path/to/namazu'\n\"                        (default: namazu)\n\"\n\"   let g:namazu_index = '/path/to/indexdirectory'\n\"                        (Can be a space-separated list)\n\"\n\"   let g:namazu_range = NUMBER\n\"                        Set the number of documents shown to NUMBER.\n\"                        (default: 30)\n\"\n\"   let g:namazu_color = NUMBER\n\"                        Set this to zero to disable syntax\n\"                        highlighting.  (default: 1)\n\"\n\" Usage:\n\"\n\"   Type :Namazu<CR> to start searching.\n\"\n\"   <enter> : Open a selected file.\n\"   r       : Research.\n\"   s       : Set a sort METHOD (score, date)\n\"   k       : Move to a previous result.\n\"   j       : Move to a next result.\n\"   h       : Move to a previous page.\n\"   l       : Move to a next page.\n\"   q       : Close the namazu window.\n\""}, {:name=>"c.vim--Schellong", :summary=>"Extended original c.vim", :description=>"An extended and modified version of the original c.vim"}, {:name=>"bsh.vim", :summary=>"Syntax Highlighting for Shell »bsh«", :description=>"Syntax Highlighting for Shell »bsh«\n(DOS, Windows, Linux, FreeBSD, SCO...; 32+64Bit Arithm.)\nDownload of the Shell (Freeware):  http://www.schellong.de\n(Base: sh.vim)"}, {:name=>"WhereFrom", :summary=>"WhereFrom helps one locate where maps, functions, or commands are defined", :description=>"The WhereFrom and WF commands search the runtimepath (see |'runtimepath'|) to determine where the setting, function, map, or command was defined.  With the \"!\", WhereFrom will continue looking for more than one instance.\n\n    WhereFrom[!] functionname(s)      WF[!] functionname(s)\n    WhereFrom[!] map(s)               WF[!] map(s)\n    WhereFrom[!] setting(s)           WF[!] setting(s)\n    WhereFrom[!] command(s)           WF[!] command(s)\n\n\nWF-style commands are available only if the command has not been previously defined, and are provided as a shorthand.\n\nA search is undertaken only for functions, commands, and maps, and then only if the function, command, or map is known to the currently running vim.  Determining where settings are set is done using vim's built-in method.\n\nThese commands don't search all *.vim files that you may have; it only examines those that lie on your runtimepath in the common directories plugin, ftplugin, colors, compilier, indent, syntax, and the after/ variants.  In addition, it also searches the AsNeeded directory (see vimscript#915)\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#WHEREFROM)\n"}, {:name=>"oo", :summary=>"Java code commpletion", :description=>"This plugin is used for Java code completion. It's depends on ctags , \nvim which +ruby future is enabled.\nFor generate tags :\n         ctags --fileds=+ai   .....\nFor  generate tags Index file:\n         :ruby generateIndex(\"/usr/java/jdk/src/tags\",2)\nThe second parameter which value is 2  is recommand.\n\nOnce you vim version is 7.00aa \n         :set cfu=OocompleteFun\nYou can use <CTRL>-x<CTRL>-u for this samle:\n        String str=\"\";\n        str.to\n                ^<CTRL>-X<CTRL>-U\nFor c++ user:\n         SomeClass * abc;\n         abc->So\n                        ^<CTRL>-X<CTRL>-U\nBoth java and c++\n         Abc::So\n                        ^<CTRL>-X<CTRL>-U\nThen toByteArray, toUpperCase...  would be selectable.\n\nvim version is 6.xx\n         :Oofun String to\nFirst parameter is name of the class , the second is the function name ( partly)\nThen toByteArray, toUpperCase...  would be show in command window.\n\nOne command is added, It's used to check variable type\n         :Ootype varname\n\nTODO list :\n         ctags's support for jdk1.5 , something incorrectly. like ,java.util.Vector\n         Advanced varible define selector. Something lik normal command gd\n\n         The last, my poor document  and my poor English, \n\n"}, {:name=>"Java-Syntax-and-Folding", :summary=>"Java Syntax & Folding", :description=>"Modified from the original syntax/java.vim to support syntax folding. I also removed a lot of unncessary syntax defs including error detection, standard classes, etc.\n\n\nKnown issues:\n\n- Method declaration is also folded currently, this is very ugly..."}, {:name=>"ProvideX-Syntax", :summary=>"The language blows.  But working with it doesn&#039t have to.", :description=>"ProvideX is a Business Basic dialect used within the popular Mas90/200 accounting product lines, as well as many other business software products.\n\nI do not advocate the use of providex.  I only hope to aide those who have found themselves in the position of working with it as I have :-)\n\nPointers were taken from many syntax files, mainly the basic.vim syntax file from Allan Kelly. <allan@fruitloaf.co.uk>\n\nUpdate: I no longer work with ProvideX!  Congratulations are welcome :-)"}, {:name=>"DNA-Tools", :summary=>"few utils for people working with DNA sequences", :description=>"My $0.02 worth of...\nWorking with DNA sequences, especially if you don't have a Unix machine handy might need a few tools. Some of the modifications are simple enough that even a trivial Vim script would deal with.\nWhat you can do:\n- get the reverse-complement of a sequence\n- count A/T/C/Gs in a sequence and get a very crude Tm for a primer\n- brush-up a few file formats (PS from ClustalX, FASTA etc).\n\nMany thanks to Will Nater and Tim Chase for helping!\n\nVersion \"1.0\" means that, up to now, I did not have any screwed-up sequence, but this is far from saying that it's definitely foolproof."}, {:name=>"vimCU", :summary=>"comment/uncomment functionalities for every language", :description=>"vimCU is a set of ViM functions that you can use to customize your ViM editor to comment/uncomment source code of every language you like.\n\nComment key binding defaults to \",#\" while uncomment key binding to \",3\" (mnemonic: same key as comment, but without shift). In command mode the current line will be commented/uncommented, in visual mode all selected lines will.\n\nIn order to support commenting in the language of your choice you've to define how comments are handled in that language defining the following local variables:\n\n- variable \"b:CommentType\". A string formed using \"s\" and/or \"m\" chars; \"s\" means that your language supports single line comment like, e.g., bash script, perl or similar, that are comments formed adding something at the beginning and at the end of a line; \"m\" means that your language supports multi line comment like, e.g. ANSI C, OCaml, or similar, that are comments that extends from a character set to another character set; \"ms\" or \"sm\" mean that your language supports both kinds of comments like, e.g., C++.\n\n- variables: \"b:beginOfCommentSingle\", \"b:endOfCommentSingle\". Strings that are used to begin and end a single line comment. These strings are added at the begin and at the end of the line you want to commend.\n\n- variables: \"b:beginOfCommentMulti\", \"b:endOfCommentMulti\". Strings that are used to begin and end a multi line comment. These strings are added before and after the line(s) you are commenting on a line by themeselves.\n\nFor example, in order to support C++, just add to your ~/.vim/ftplugin/cpp.vim the following lines:\n      let b:CommentType = \"ms\"\n      let b:beginOfCommentSingle = \"// \"\n      let b:endOfCommentSingle = \"\"\n      let b:beginOfCommentMulti = \"/*\"\n      let b:endOfCommentMulti = \"*/\"\n"}, {:name=>"cvsvimdiff", :summary=>"cvs diff + vimdiff", :description=>"Perform cvs diff invoking vimdiff.\n\nThis script does not aim at supporting cvs as vimscript #90, it simply enables people acquainted with \"cvs diff\" to see its output in a handier way."}, {:name=>"latexmenu", :summary=>"Generates a \"tableofcontents\"-navigation-menu for the gui menubar.", :description=>"This plugin adds a function GenerateLatexMenu() which parses a latexfile\nfor \\chapter's, \\section's, etc. and generates a \"Navigation\"-menu in the gui-menubar\nwhere you can jump quickly into the different sections.\n"}, {:name=>"XML-Indent", :summary=>"My XML Indent (align attributes)", :description=>"It aligns all attributes of a tag to the same column\n\n<!-- there are 10 spaces before \"xmlns:c=...\" -->\n<jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page&quot;\n          xmlns:c=\"http://java.sun.com/jstl/core&quot;\n          xmlns:tf=\"urn:jsptagdir:/WEB-INF/tags\">\n\n<jsp:root\n  xmlns:jsp=\"http://java.sun.com/JSP/Page&quot;\n  xmlns:c=\"http://java.sun.com/jstl/core&quot;\n  xmlns:tf=\"urn:jsptagdir:/WEB-INF/tags\">\n\n\n(The original indent/xml.vim does only the second type of indent)"}, {:name=>"AddIfndefGuard", :summary=>"Add the #ifndef/#define/#endif guard to a C/C++ header file", :description=>"When one writes a header file for C/C++, compile errors will occur if the same header script is included more than once. A common solution is to add\n     #ifndef FILENAME_H\n     #define FILENAME_H\nto the start of a file, and\n     #endif\nto the end. This solves the problem.\n\nHowever this is mechanical and routine. So the computer should do it. So here's a script to do it.\n\nIt will add those lines to the top of the file you call it in. It will change FILENAME to be the uppercase name of that file, ommiting the file extension. It will not (yet) check to see if a #define/#ifndef/#endif black has already been added. It will not check the filename, so it can be called on anyfile."}, {:name=>"Vim-JDE", :summary=>"Vim - Just a Development Envirement (Java/C++)", :description=>"Just  a  Development Environment  for VIM . (VJDE)\nAnd now , It's support C++/C by ctags\n(VIM>=700  , +ruby future is on , JDK 1.5 support , JDK1.4 (maybe, not tested))\n\nIt's Had  been tested on Leopard 10.5.1 .\n\nuse <c-space> as the Code completion key!\nchange it by \n:let g:vjde_completion_key='<c-space>'\n\ndoc http://media.cqic.com.cn/vjde-tut/index.htm .\nA quick refrence create by Andrea Spadaccini http://media.cqic.com.cn/vjde-tut/vJDE_qr.pdf\n\nEnglish Version will coming soon.\nJust work for :\n       Project manager (load/store  your VJDE settings)\n       Code completion ( working for java and jsp,taglib,html,xml,xsl,xsd) (VIM 7.0 required)\n       Source tools( variable extract local, member,argument,  extract number or String to constance , fix build\n                             unreported exception error ( depends on getqflist() )\n        Source tools ( Override methods, implements interface,extract import, sort import)\n       Create javadoc (depends on jcommentor.vim)\n       Create getter/setter stub.\n       Generate constructor of class which has all member;\n(2009-04-03\n      Support for annotation completion.\nNew(2005-09-08)\n       Use readtags for tags parse.\n       Bug fix.\nNew(2005-09-02)\n       Code completion for more language available .(require ctags)\n       let g:vjde_ctags_exts='vim;rb'\n       Code template more powerfull!\n      Put your own definition file , such as c.iab,vim.iab,cpp.iab ruby.iab to ~/.vim/vjde/\n       let g:vjde_iab_exts='c;vim;cpp;rb'\n      in you c/c++/vim/ruby file, you can use <c-j>\n      \nNew(2005-09-01)\n       More beautiful document viewer. ^_^\n       C++/C Code completion support for both GUI and Console\n       C++/C parameter information support for both GUI and Console\n       use:\n       ctags --c++-kinds=+px -R .\n       For search speed , Befor your use Code completion,\n      use:\n       :call VjdeCppGenerateIdx()\n      to generate a index file for your every tag file.\n      see vcde.txt for detail\nNew (2005-08-27)\n       Add JAVA document preview in GUI mode\n       Add code template like (for block...) in console mode.\n       Improved Preview window.\nNew (2005-09-01)\n        More beautiful document window.^_^\n        C++/C preview support\n       C++/C parameter information support.\n\nNew (2005-08-22)\n         Add import statement for classes .\n         Add code template like (for block, while block...)\n         Create javadoc (depends on jcommentor.vim)\n         Create getter/setter stub.\n         Generate constructor of class which has all member;\n         Allow    write your own template file in: ~/vim/.vjde/iab.vjde\n                                see vimfile/plugin/vjde/tlds/iab.vjde for detail.\n         Bugfix for vim install on a folder like : c:\\program files\\vim..\n         Add menu shortcut.\nNew (2005-04-30) Add sensitive java code support for dot '.' , '@',\n       Add sensitive Jsp code support for '<' ':' and space.\nNew . Code completion support for packages.\n         import java.net.<CTR>-x<CTR>-u\n\n         or in coding:\n               java.io.<CTR>-x<CTR>-u\n\n        Code completion      \n\t\tThis future is depends on JDK, the java reflect API.\n               available for\n                System.<CTR>-x<CTR>-u\n                System.o<CTR>-x<CTR>-u\n                System.out.<CTR>-x<CTR>-u\n            \n               a[+-*/%&|^=] str.<CTR>-x<CTR>-u\n              \n               return str.<CTR>-x<CTR>-u\n                \n                new Something(str.<CTR>-x<CTR>-u\n         Use it , enjoy it.\n         Completion for jsp\n                <jsp:<CTR>-x<CTR>-u\n                <jsp:include <CTR>-x<CTR>-u\n                <jsp:include flush=\"<CTR>-x<CTR>-u\n                <jsp:us<CTR>-x<CTR>-u\n         Completion for taglib (ie. STL)\n           <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core&quot;;%>\n             :XMLns stl_c c\n             <c:<CTR>-x<CTR>-u\n             <c:out <CTR>-x<CTR>-u\n             .....\n \n         Completion for xml ....(See doc for detail...)\n\n\n        Definition search ( User Command    :Vjdei)\n                you can list a class or a field or a method detail\n                For example:\n                 System.out.println(str.toUpperCase().tr....\n                Place cursor on the class System, the detail of System  would be shown , Constructor, fields\n,methods, inner class ...\n\n            \nTODO list :\n\n\nTanks for every one who's name is occurred in my source code. ^_^ \n\n"}, {:name=>"cvsdiff.vim", :summary=>"visual cvs diff utility for vim diffsplit, horizontal or vertical", :description=>"vim plugin to for visual display of cvs diff in vim using vim diffsplit\n\n1) used as vim command, format :Cvsdiff [v] [version #]\n    :Cvsdiff     \n       -- diff between opened file and lastest cvs version, \n           horizontal split\n    :Cvsdiff  v\n       -- diff between opened file and lastest cvs version, \n           vertical split\n    :Cvsdiff <version #>  example  :Cvsdiff 1.2\n       -- diff between opened file and cvs version #, horizontal split\n    :Cvsdiff v <version #>  example  :Cvsdiff v 1.2\n       -- diff between opened file and cvs version #, vertical split\n2) map to key \n    can create mapping in ~/.vimrc by adding following lines, examples\n    map <F8> <Plug>Cvsdiff\n        -- press F8 in vim, show diff to cvs last version, horizontal split\n    map <F7> <Plug>Cvsdiffv\n        -- press F7 in vim, show diff to cvs last version, vertical split\n\nerror report: \n    eji@yahoo-inc.com\n    feel free to customize it, distribute it or do whatever you want.\n\n"}, {:name=>"Super-Shell-Indent", :summary=>"Improved indentation for shell scripts", :description=>"This is a shell indentation script that calculates the indent level based on begin/end syntax pairs, as opposed to complex conditionals and pattern matching.\n\nThis script also introduces indentation for:\n\n           case blocks \n           paren blocks\n           '[[' blocks\n           line continuation\n\nIt's slower than the stock indentation, but IMHO, it doesn the \"right\" thing much more often.  :)\n\n"}, {:name=>"cool.vim", :summary=>"Syntax Highlighting for COOL (Classroom Object Oriented Language)", :description=>"Highlight all basic contructs in cool."}, {:name=>"Perldoc-from-VIM", :summary=>"Perldoc from VIM", :description=>"This script gives you direct access to perldoc documentation from inside VIM.\nPerldoc support is automatically activated when editing perl files.\n\nRequirements: \"perl\" v5.004 (or better) and \"perldoc\" must be accessible from your command line. Also, module Pod::Text::Termcap must be installed.\n\nUsage: After installing (see below), edit a perlfile, press <F3>, enter name of wanted perldoc-page.\nA new window is opened (presuming the wanted page exists), hopefully containing what you're looking for - a perldoc page, tuned up with some VIM syntaxhighlighting, generated from POD informations.\n\nPerldoc pages that have already been retrieved earlier are taken from cache.\nThis speeds up the search and avoids double generation of VIM's synhighlight-commands.\n\nYou'll need to specify a directory where the cached perldoc-pages will be stored. This is done in the 2nd line of pdoc4vim.vim (you'll be guided there automatically if a valid entry couldn't be found).\nOf course you can change the perldoc-key (default: F3) too, just check out the first lines from pdoc4vim.vim."}, {:name=>"The-NERD-Commenter", :summary=>"A plugin that allows for easy commenting of code for many filetypes.", :description=>"Grab the latest dev version from github: https://github.com/scrooloose/nerdcommenter.\n\nThe following key mappings are provided by default (there is also a menu\nprovided that contains menu items corresponding to all the below mappings):\n\nMost of the following mappings are for normal/visual mode only. The\n|NERDComInsertComment| mapping is for insert mode only.\n\n,cc |NERDComComment| \nComments out the current line or text selected in visual mode.\n\n,cn |NERDComNestedComment| \nSame as |NERDComComment| but forces nesting.\n\n,c<space> |NERDComToggleComment| \nToggles the comment state of the selected line(s). If the topmost selected\nline is commented, all selected lines are uncommented and vice versa.\n\n,cm |NERDComMinimalComment| \nComments the given lines using only one set of multipart delimiters if\npossible. \n\n,ci |NERDComInvertComment| \nToggles the comment state of the selected line(s) individually. Each selected\nline that is commented is uncommented and vice versa.\n\n,cs |NERDComSexyComment| \nComments out the selected lines ``sexily''\n\n,cy |NERDComYankComment|\nSame as |NERDComComment| except that the commented line(s) are yanked\nbefore commenting.\n\n,c$ |NERDComEOLComment| \nComments the current line from the cursor to the end of line.\n\n,cA |NERDComAppendComment| \nAdds comment delimiters to the end of line and goes into insert mode between\nthem.\n\n,cI |NERDComPrependComment| \nAdds comment delimiters to the start of line and goes into insert mode between\nthem.\n\n|NERDComInsertComment| \nAdds comment delimiters at the current cursor position and inserts between.\nDisabled by default.\n\n,ca |NERDComAltDelim| \nSwitches to the alternative set of delimiters.\n\n,cl OR ,cr OR ,cb |NERDComAlignedComment| \nSame as |NERDComComment| except that the delimiters are aligned down the\nleft side (,cl), the right side (,cr) or both sides\n(,cb).\n\n,cu |NERDComUncommentLine| \nUncomments the selected line(s).\n\nFiletypes that can be commented by this plugin:\nabaqus abc acedb ada ahdl amiga aml ampl ant apache apachestyle asm68k asm asn\naspvbs atlas autohotkey autoit automake ave awk basic b bc bdf bib bindzone bst\nbtm caos catalog c cfg cg ch changelog cl clean clipper cmake conf config\ncontext cpp crontab cs csc csp css cterm cupl csv cvs dcl debchangelog\ndebcontrol debsources def diff django docbk dns dosbatch dosini dot dracula dsl\ndtd dtml dylan ecd eiffel elf elmfilt erlang eruby eterm expect exports\nfetchmail fgl focexec form fortran foxpro fstab fvwm fx gdb gdmo geek\ngentoo-package-keywords' gentoo-package-mask' gentoo-package-use' gnuplot gtkrc\nhaskell hb h help hercules hog html htmldjango htmlos ia64 icon idlang idl\nindent inform inittab ishd iss ist jam java javascript jess jgraph jproperties\njproperties jsp kconfig kix kscript lace lex lftp lifelines lilo lisp lite\nlotos lout lprolog lscript lss lua lynx m4 mail make maple masm master matlab\nmel mf mib mma model moduala.  modula2 modula3 monk mush muttrc named nasm\nnastran natural ncf netdict netrw nqc nroff nsis ocaml occam omlet omnimark\nopenroad opl ora otl ox pascal passwd pcap pccts perl pfmain php phtml pic pike\npilrc pine plaintex plm plsql po postscr pov povini ppd ppwiz procmail progress\nprolog psf ptcap python python qf radiance ratpoison r rc readline rebol\nregistry remind rexx robots rpl rtf ruby sa samba sas sather scheme scilab\nscreen scsh sdl sed selectbuf sgml sgmldecl sgmllnx sicad simula sinda skill\nslang sl slrnrc sm smarty smil smith sml snnsnet snnspat snnsres snobol4 spec\nspecman spice sql sqlforms sqlj sqr squid st stp strace svn systemverilog tads\ntaglist tags tak tasm tcl terminfo tex text plaintex texinfo texmf tf tidy tli\ntrasys tsalt tsscl tssgm uc uil vb verilog verilog_systemverilog vgrindefs vhdl\nvim viminfo virata vo_base vrml vsejcl webmacro wget winbatch wml [^w]*sh\nwvdial xdefaults xf86conf xhtml xkb xmath xml xmodmap xpm2 xpm xslt yacc yaml\nz8a \n"}, {:name=>"darkblack.vim", :summary=>"A black background color scheme based on darkblue.", :description=>"Darkblack is an alteration to the darkblue colorscheme by Bohdan Vlasyuk.\nIt provides a black background and fonts with light colors to keep them visible.\n\nDesign for gui, but should look good on cterm as well."}, {:name=>"OpenGLSL", :summary=>"OpenGL Shading Language syntax script", :description=>"A syntax script for builtin functions, uniform variables, constants and types for the OpenGL Shading Language V1.1 (http://www.opengl.org/documentation/oglsl.html)\n"}, {:name=>"monkeyd-configuration-syntax", :summary=>"Syntax highlighting for monkeyd http server configuration files", :description=>"Syntax highlighting for monkeyd http server configuration files"}, {:name=>"OCaml-instructions-signature---parser", :summary=>"Script that parses and provides signature of instructions", :description=>"Project is closed!\nAnyone who would like to continue it please let me know.\n\n\nIf you have any suggestions or have found a bug please write to me: \n125783@student.pwr.wroc.pl\n\nIf you want to know how OCaml understands your instructions try this small script.\nThis script just shows you the signature of instruction - shows the OCaml answer after parsing.\n\nVer 0.81\nRemember to clear the buffer!! (see description below)\n\nVer 0.79:\nExample (returning the first and the last element of the list):\nlet example a = \n  if (List.length a)=0 then failwith \"Empty list!!\"\n  else List.hd a, List.hd (List.rev a);;\nexample [1;2;3;4];;\n\n:OCamlSigParseAllF\n# let example a  =\n  if (List.length a)=0 then failwith \\\"Error!!!\\\"\n  else List.hd a, List.hd (List.rev a);;\n      val example : 'a list -> 'a * 'a = <fun>\n# example [1;2;3;4];;\n- : int * int = (1, 4)\n\nIf you want to use menu type:\n:OCamlSigMenu\n\nFor parsing one instruction type\n:OCamlSigParseInstruction\n\nFor parsing whole program:\n:OCamlSigParseAll\nor (for full parsing information)\n:OCamlSigParseF \n\nTo close Status Window:\n:OCamlSigStatusWinClose\n\nTo open Status Window:\n:OCamlSigStatusWinShow\n\nIf you want to see the buffer (list of parsed and remembered instructions):\n:OCamlSigShowOCamlBuffer\n\nFor clearing this buffer:\n:OCamlSigClearOCamlBuffer\n\nIf the plugin cannot find OCaml edit the plugin file, find this line:\nlet s:OCamlPath = \"\"\nand set it to path where you have \"ocaml\" file\n"}, {:name=>"plist.vim", :summary=>"Old-Style ASCII Property List", :description=>"Property Lists were a configuration file format commonly used in the OpenStep framework. Currently, Apple has updated Property Lists to be XML-based, but Cocoa still supports the old-style Property Lists as well.\n\nProperty Lists are also available to the GNUStep libraries.\n\nMore information about property lists may be found at:\nhttp://developer.apple.com/documentation/Cocoa/Conceptual/PropertyLists/Concepts/OldStylePListsConcept.html\n\nAll suggestions to improve this syntax file are welcome."}, {:name=>"my-_vimrc-for-Windows-2000XP-users", :summary=>"My very own _vimrc.", :description=>"This _vimrc is currently used on a windows XP machine running gvim 7.1. However, it has been run on Linux (running vim 5.x and above). I dont think it has any platform specific customization and has been reasonably commented. Contains tips from friends, this site and other sources.\n\nThis is not exactly the best _vimrc but my humble contribution. If you find a mistake or have a suggestion/query - do leave a comment below or at my blog - http://tinyurl.com/3jvty"}, {:name=>"DotOutlineTree", :summary=>"Helps you edit structured text.", :description=>"This plugin makes an outline tree of a buffer.\nAlso this plugin enables jumping to a node and operating nodes.\n\nCurrently, it supports three formats:\n\n    - reStructuredText\n    - TaskPaper\n    - dot-structured text (.. title)\n\nFor more detailed descriptions, read dot.vim, or go to\nhttp://chimachima-site.infoseek.ne.jp/ (in Japanese)."}, {:name=>"Vim-klip-for-Serence-Klipfolio-Windows", :summary=>"Klip that queries vim.sf.net for recent scripts", :description=>"For vim script lovers like myself who like to stay updated on the recently released vim scripts. Requires the (windows-only) klipfolio application from Serence.com. This klip is also avialable at: http://www.klipfarm.com/farm.php?page=info&klip=4122"}, {:name=>"explorer-reader.vim", :summary=>"preview many text files quickly", :description=>"with this script you can quickly preview files\nin a directory. For example execute these commands\nin a directory with many text files\n:cd dir_with_many_text_files\n:vi .\nor\n:vi dir_with_many_text_files\nthen by pressing page down you will preview files.\nPressing down will scroll the preview one line at a time and \npressing page down while on the preview \nit will focus on the explorer window"}, {:name=>"recent.vim", :summary=>"List recent edited files", :description=>"Save all written files into file ~/.vim/recent._files.\nAdd command :recent to open a buffer listing all edited files."}, {:name=>"crontab.freebsd.vim", :summary=>"FreeBSD crontab syntax", :description=>"Crontab syntax, with FreeBSD extensions.\nUnderstands comments, environment variable assignmnents, date parts extensions (ranges, steps), @reboot etc, and some highlighting for executed commands (strings, percent sign)."}, {:name=>"Rainbow-Parenthesis", :summary=>"Highlight matching parens in a rainbow of colors", :description=>"This script highlights matching parenthesis with a rainbow of colors. This make it visually very obvious which matches what. Most useful for Lisp."}, {:name=>"mom.vim", :summary=>"Syntax highlighting for the troff macro package", :description=>"Syntax highlighting for mom, a troff macro package, or as mom's homepage (http://faustus.dyn.ca/mom/mom.html) states: \"mom is a typesetting and formatting package used to create high-quality, PostScript documents for printing.\"\n\nThis script is specialized for mom, although that is a troff macro package, this script does only have limited troff highlighting capabilities.\n"}, {:name=>"DoTagStuff", :summary=>"Syntax Highlight based on tags", :description=>"Extract information from a tags file (exuberant ctags), and generate syntax highlighting scripts for functions, globals, macros, etc.\n\nSomewhat \"raw\" extraction from my working environment; i.e., not particularly generic; e.g., hard-coded color settings for the various types of tokens identified (functions, macros, etc.).  Easily changed, but by editing the c.vim included that is intended to go in your \"after/syntax\" vim directory.\n\n*Not* very polished, but perhaps helpful.\n\nFor a sample of the results, see:  http://castandcrew.com/~gary/DoTagStuff/\n\nNOTE: You *must* include the --fields option to ctags that includes \"language of source file containing tag\" (i.e., \"--fields=l\" ; I use --fields=+Kl).  It's needed so that  the language type of each tag is included in the tags file.  This is needed to properly form syntax groups (e.g., cStaticFunction or perlExternalFunction -- to get the \"c\" or \"perl\" parts)."}, {:name=>"gentypes.py", :summary=>"Colorize types you use while editing code (Linux)", :description=>"While browsing Vim documentation I encountered a nice tip about how to get highlithing of user-defined types. I decided to extend it a little to also support types defined elsewhere, that the source file may use (i.e. included files).\n\nThe script is written in Python and also requires CPP preprocessor (tested with 3.3 and 3.4) as well as exuberant ctags program."}, {:name=>"YankRing.vim", :summary=>"Maintains a history of previous yanks, changes and deletes", :description=>"Vim already maintains a list of numbered registers containing the last 9 deletes.  These previous deletes can be referenced using [register]p, so \"1p will paste the last delete, \"2p the 2nd last delete.  For more information see |quote_number|.\n\nVim does not provide any mechanism to reference previous yanked, deleted or changed text.  In Emacs this feature is called the \"kill ring\".\n\nThe YankRing plugin allows the user to configure the number of yanked, deleted and changed text.  A split window can be used to choose which element(s) from the yankring you wish to paste.  Alternately after text has been pasted (using p), it can be replaced with a previous value from the yankring with a single key stroke.\n\nThe captured text is stored in a file (location configurable) and is instantly available (also configurable) to any other instance of Vim also running on the same machine.\n\nStoring the capture text in a file allows the text to be shared easily between multiple instances of Vim running in X, Windows, SSH or Screen.\n\nA tutorial is included to take you through the various features of the plugin.  After you have installed the plugin just run:\n     :h yankring.txt\n     :h yankring-tutorial\n\nThe yankring can be interacted with in two ways:  a GUI or via maps.\n\nThe yankring supports all of Vim motions and text-objects.  There are very few new keystrokes the user must learn.   One keystroke to open the yankring to choose which item to paste is all that is required.  It has been designed work seamlessly with Vim\n\nAll the mappings and behaviours are configurable via global variables you can optionally specify in your vimrc.\n\nThe plugin can be toggled on and off, and supports:\n    Ranges\n    Registers\n    Counts\n    All visual modes (characterwise, linewise and blockwise)\n    All motions\n    All text-objects\n\nExamples:\n    yy - Adds the current line to the yankring.\n    dd - Adds the current line to the yankring and deletes it.\n   5yw - Adds 5 words to the yankring.\n  \"ade - Deletes the word, and puts it into both the yankring and the \"a register.\n    cw - Changes the word and stores the previous value in the yankring.\n10\"zyy - Places 10 lines into both the yankring and the \"z register.\n :1,4YRYankRange   - Similar to 1,4y\n :3,$YRDeleteRange  - Similar to 3,$d\n\nIf you wish to paste previous values from the yankring and do not want to use the GUI, there are only two additional maps you must learn (these are configurable via your vimrc if needed).  The purpose of the yankring is to gain access to previously yanked (or deleted) elements.  The YRReplace command will replace the previously pasted text with a different entry from the yankring.  By default, I choose <C-P> (P for previous) to replace the text last pasted while moving backwards through your previous text from the yankring and <C-N> (N for next) to replace the previous paste while moving forward through the yankring.\n\nA separate buffer window to allow you to easily interact with the contents of the yankring.  The window is similar to many other plugins: TagList, SelectBuf and so on.  You can use the mouse or standard Vim keys (p, gp, P, ...).  Visual mode is used to support counts, pasting multiple times and reversing the order of pasted elements.\n\nThe GUI significantly simplifies your interaction with the yankring for basic functions.  But often it useful to take advantage of the more powerful features of the yankring.\n\nHere is a small section from the tutorial (using maps) so you have some idea of how you interact with the plugin gaining access to previous yanks.  Using the GUI for basic operations is self explanatory.\n\n---- Partial Tutorial ----\nTo understand how to use the yankring, the following example should demonstrate the various features.\n\nAssume we have this buffer: \n        one\n        two\n        three\n        four\n        five\n\nNow yank (yy) each line separately starting at line 1.  Display the\ncontents of the yankring. \n        :YRShow  \n            --- YankRing ---\n            Elem  Content\n            5     five^@\n            4     four^@\n            3     three^@\n            2     two^@\n            1     one^@\nSince we yanked the text starting at line 1 and finishing at line 5, the most current yankring element is the last one, the contents of line 5.  \n\"five^@\" is displayed, the \"^@\" is a newline character (since we issued a \"yy\").\n\nNow, go to the end of the file and press p.  The resulting buffer appears as: \n        one\n        two\n        three\n        four\n        five\n        five\nNow press <C-P> to move backwards through the yankring, this results in: \n        one\n        two\n        three\n        four\n        five\n        four\nNow press 2<C-P>.  This would be the same as pressing <C-P> two times in a row.  This results in: \n        one\n        two\n        three\n        four\n        five\n        two\nNow press <C-N> to move forwards through the yankring, this results in: \n        one\n        two\n        three\n        four\n        five\n        three\n\nYou can create a map to display a buffer displaying the yankring's contents:\n    nnoremap <silent> <F11> :YRShow<CR>\n\nYRShow creates a new split buffer (you can configure where it should be and it's size)\n        :YRShow  \n            AutoClose=1;Cmds:<enter>,[g]p,[p]P,d,r,a,u,q,<space>;Help=?\n            --- YankRing ---\n            Elem  Content\n            3     three^@\n            2     two^@\n            1     one^@\n            5     five^@\n            4     four^@\nYou can simply hit \"p\", <enter>, double click on an item and it will be pasted into your document.  The window will automatically close (by default) after you have made a choice.  The element will be pasted into the correct buffer if you have multiple split windows.\n\nYou can paste multiple items using visual mode.\nYou can also remove items from the yankring.\n\n---- Partial Tutorial ----\n\nConcentrating on the last line of the buffer you could see how we were able to replace our pasted text with lines yanked previously.  This is a feature Vim only has for deletes, and is limited to 9.  This plugin enables the same features for both yanks, deletes and changes, the size of the history is configurable.\n\n\n\n"}, {:name=>"mathml.vim", :summary=>"MathML syntax highlighting", :description=>"File for Mathematical Markup Language 2.0 syntax highlighting.\nUses XML syntax file."}, {:name=>"xhtml.vim--Grny", :summary=>"XHTML syntax highlighting", :description=>"Syntax highlighting for Extensible HyperText Markup Language.\nHandles XHTML 1.0 (Strict, Transitional and Frameset) and XHTML 1.1;\nXHTML 2.0 (as of 7th Working Draft), including XML Events and XForms, is also highlighted.\n\nSyntax of the following languages embedded in XHTML document can be highlighted: MathML, SVG, CSS, JavaScript, VBScript, SSI and XSSI.\n\nThere is also special highlighting for XHTML events (\"on...\" attributes with JavaScript content), however it is possible to disable it by setting the following variable:\n    xhtml_no_events_rendering\n(just insert line \"let xhtml_no_events_rendering=1\" to your .vimrc file).\n\nCSS highlighting in \"style\" attributes is availaible too; you can disable it by setting this variable:\n    xhtml_no_inline_css_rendering\n"}, {:name=>"MS-SQL-Server-Syntax", :summary=>"Microsoft SQL Server 2000 T-SQL (Transact-SQL) Syntax", :description=>"Syntax file for M$ SQL Server 2000 Transact-SQL\n\nI added all reserved words, system functions and stored procedures.\n\nNotes:\n- All types, statements, and operators are colored as Keyword.\n- All keywords must be UPPER_CASED.\n- @local_variables (lower_cased) are colored as Special\n- User-defined types in the form of \"Some_User_Defined_Type\" are colored as Type. (you must append the ending \"_Type\")\n- @@SYSTEM_VARIABLES are colored as PreProc. Must be UPPER_CASED too."}, {:name=>"Mark", :summary=>"a little script to highlight several words in different colors simultaneously", :description=>"This script is written to highlight several words in different colors simultaneously. For example, when you are browsing a big program file, you could highlight some key variables. This will make it easier to trace the source code.\n\nI think this script is functional similar with MultipleSearch vimscript #479.\n\nUsage:\n\nHighlighting:\n  Normal mode:\n    \\m mark or unmark the word under (or before) the cursor\n          Place the cursor under the word to be highlighted, press \\m, then the word will be colored.\n    \\r manually input a regular expression\n          To highlight an arbitrary regular expression, press \\r and input the regexp.\n    \\n clear this mark (i.e. the mark under the cursor), or clear all highlighted marks\n  Visual mode:\n    \\m mark or unmark a visual selection\n          Select some text in Visual mode, press \\m, then the selection will be colored.\n    \\r manually input a regular expression (base on the selection text)\n  Command line:\n    :Mark regexp   to mark a regular expression\n    :Mark regexp   with exactly the same regexp to unmark it\n    :Mark          to clear all marks\nSearching:\n  Normal mode:\n    * # \\* \\# \\/ \\? use these six keys to jump to the other marks\n    and you could also use VIM's / and ? to search, since the mark patterns have\n    been added to the search history.\n\nHere is a sumerization of * # \\* \\# \\/ \\?:\n\n\" First of all, \\#, \\? and # behave just like \\*, \\/ and *, respectively,\n\" except that \\#, \\? and # search backward.\n\"\n\" \\*, \\/ and *'s behaviors differ base on whether the cursor is currently\n\" placed over an active mark:\n\"\n\"       Cursor over mark                  Cursor not over mark\n\" ---------------------------------------------------------------------------\n\"  \\*   jump to the next occurrence of      jump to the next occurrence of\n\"       current mark, and remember it       \"last mark\".\n\"       as \"last mark\".\n\"\n\"  \\/   jump to the next occurrence of        same as left\n\"       ANY mark.\n\"\n\"   *   if \\* is the most recently used,        do VIM's original *\n\"       do a \\*; otherwise (\\/ is the\n\"       most recently used), do a \\/.\n\nScreenshot:\nhttp://elephant.net.cn/files/vim_screenshot.png (It is also the screenshot of my colorscheme vimscript #1253.)\n\nBugs and Notes:\nSome words which have been already colored by syntax scripts could not be highlighted.\n\nmark.vim should be re-sourced after any changing to colors. For example, if you\n:set background=dark  OR\n:colorscheme default\nyou should\n:source PATH_OF_PLUGINS/mark.vim\nafter that. Otherwise, you won't see the colors.\nUnfortunately, it seems that .gvimrc runs after plugin scripts. So if you set any color settings in .gvimrc, you have to add one line to the end of .gvimrc to source mark.vim."}, {:name=>"autoit.vim--Breland", :summary=>"AutoIt syntax file", :description=>"This is a syntax file for AutoIt v3, available from http://www.autoitscript.com/autoit3/.\n\nThis is an updated version of Riccardo Casini's original script:\nhttp://www.vim.org/scripts/script.php?script_id=968\n\nVersion 1.5 is included with the official Vim distribution beginning with version 7.1, but I will continue to update the syntax file as necessary for future versions of AutoIt.  These updates, along with change details, will be posted here."}, {:name=>"Guardian", :summary=>"Colorful theme with rich syntax for coders.", :description=>"Originally intended for XHTML and CSS editing, I grew to love this colors scheme - been using it as my default one for quite a long time now.\n\nRich syntax highlighting with colors, bolds and italics in a semantic way designed to be practical and helpful for coders especially.\n\nScreenshot of 1.0 here: http://safelyinrussia.com/tmp/miikka/guardian.png"}, {:name=>"octave.vim--Hauberg", :summary=>"Syntax highlighting for GNU Octave", :description=>"Syntax highlighting for GNU Octave. It inherits the Matlab syntax highlighting and adds a few extra things like endif etc."}, {:name=>"Markdown-syntax", :summary=>"Syntax file for Markdown text-to-HTML language", :description=>"A syntax file for the Markdown text-to-HTML tool http://daringfireball.net/projects/markdown/\n\nThe latest development version is available on Github at http://github.com/plasticboy/vim-markdown/\nPlease submit patches there."}, {:name=>"desert256.vim", :summary=>"A slightly-modified desert theme, for 88- and 256-color xterms.", :description=>"These are the colors of the \"desert\" theme by Hans Fugal with a few small modifications (namely that I lowered the intensity of the normal white and made the normal and nontext backgrounds black), modified to work with 88- and 256-color xterms.\n\nThe original \"desert\" theme is available as part of the vim distribution or at http://hans.fugal.net/vim/colors/.\n\nThe real feature of this color scheme, with a wink to the \"inkpot\" theme, is the programmatic approximation of the gui colors to the palettes of 88- and 256- color xterms.  The functions that do this (folded away, for readability) are calibrated to the colors used for Thomas E. Dickey's xterm (version 200), which is available at http://dickey.his.com/xterm/xterm.html.\n\nI struggled with trying to parse the rgb.txt file to avoid the necessity of converting color names to #rrggbb form, but decided it was just not worth the effort.  Maybe someone seeing this may decide otherwise..."}, {:name=>"Embedded-Vim-Preprocessor", :summary=>"Embedded Vim Preprocessor", :description=>"This is a basic Preprocessor Engine \n\n   It contains a script for processing Embedded Vim code in any file by using the following statements:\n\n\n*Now: Includes statmens were added, it supports nested including, and each included file will be proccesed too.\n\n<?vim:include=\"file_source.html\">\n\n...any text...\n<?vim>\n   ...\n  {pure vim statements}\n   ...\n</?vim>\n...any text...\n\n\n\nor\n...any text...<?vim={a vim expresion}>...any text...\n_________________________________________________________________________\n\n\n****WRITE THE FOLLOWING FILE:****\n---------File.txt--------------------\n<?vim:include=\"headerfile.txt\">\nYou can use it on any file\n<?vim>\nlet i=0\nwhile i<11\n</?vim>\nThe i value is: <?vim=\"actually \".i >\n<?vim>let i=i+1 | endw</?vim>\n---------------------------------------\n\n*****TYPE ':%PPEV'****\n\n\n****AND YOU WILL GET THE FOLLOWING FILE****\n-----------File2.txt---------------------\nHeader of the included file\nYou can use it on any file\nThe i value is: actually 0\nThe i value is: actually 1\nThe i value is: actually 2\nThe i value is: actually 3\nThe i value is: actually 4\nThe i value is: actually 5\nThe i value is: actually 6\nThe i value is: actually 7\nThe i value is: actually 8\nThe i value is: actually 9\nThe i value is: actually 10\n--------------------------------------\n_________________________________________________________________________\nCurrent Features:\n  *You can use  embedded  Vim code with any file, then\n  *using ':%PPEV' command it generates another file(any name) with the Embedded Vim Code processed\n  *<?vim> </?vim> statements\n  *<?vim={expr}> statement\n  *<?vim:include=\"{file}\"> statement\nFuture versions:\n  *ifdef\n  *ifndef\n  *define\n\n "}, {:name=>"cvsmenu.vim-updated", :summary=>"CVS(NT) integration plugin (Script #58 continued since 2005)", :description=>"Supports most cvs commands and adds some extended functions. It also works with CVSNT quite well and has some support for multiple encodings. Part of the top-level menus are as follows (screen shot: http://wyw.dcweb.cn/download.asp?path=vim&file=vim_session.png):\n\n- Info\n- Setting (switches and update)\n- Keyword\n- Directory (directory operations; screen shot: http://wyw.dcweb.cn/download.asp?path=vim&file=cvs_localstatus.png)\n- Extra (operations on a specific revision, etc.)\n- Diff (in the split-window style of Vim; screen shot: http://wyw.dcweb.cn/download.asp?path=vim&file=cvs_diff.png)\n- Annotate (screen shot: http://wyw.dcweb.cn/download.asp?path=vim&file=cvs_annotate.png)\n- History\n- Log (screen shot: http://wyw.dcweb.cn/download.asp?path=vim&file=cvs_log.png)\n- Status\n- Local status (offline: displays status and version info)\n- Check out\n- Query update (like WinCVS/gCVS)\n- Update (conflicts will be highlighted)\n- Add\n- Commit\n\nThe output can be sorted and is often clickable: it is easy to open conflicting files, etc. It works on single files as well as on whole directories, when called from fileexplorer. It also includes highlighting / mappings to navigate through cvs output or show conflicts.\n\nThe menu is displayed in GUI versions of Vim. However, it is useful even in text-only Vim. --- You may choose to use `wildmenu', or you can use key sequences similar to the hot keys in menu. E.g. `alt-c, i' is used to commit with the GUI menu; so `,ci' could be used in text-mode Vim to commit. The leader key, currently `,', can be easily modified in the script.\n\nThis is the re-release of Mr Thorsten Maerz's original script (vimscript #58), which was last updated in 2002. It now includes many bug fixes and enhancements. The latest revision of the cvsmenu script can also be found in the SourceForge CVS:\n\n:pserver:anonymous@ezytools.cvs.sourceforge.net:/cvsroot/ezytools/VimTools/cvsmenu.vim\n\nCvsMenu is able to update itself using this anonymous CVS. Find the menu items under `CVS > Settings > Install'."}, {:name=>"Omap.vim", :summary=>"create user-defined operator mappings", :description=>"Omap.vim provides the :Omap command, among others, which creates user-defined operator commands (like y c d and g?, see :help operator for more info).\n\nTo demonstrate, this command can be used to add functionality to other scripts. You can use Omap.vim in conjuction with EnhancedCommentify.vim (vimscript #23) to create a commenting operator. Assuming both EnhancedCommentify.vim and Omap.vim are installed in your vim plugin directory, add the following commands to your .vimrc file:\n\n    let g:EnhCommentifyUserBindings = 'yes'\n    runtime plugin/Omap.vim\n    Omap <silent> <unique> <leader>c <Plug>Commentj\n    Omap <silent> <unique> <leader>u <Plug>DeCommentj\n\nThis will stop the default mappings being defined by EnhancedCommentify.vim and in their place create comment (\\c) and uncomment (\\u) operators.\n\nThis allows commenting to be carried out over areas defined by vim motions and text objects. For example: \n\n    \\cc  --  comments a line\n    .  --  comments the next line (repeats last command)\n    3\\cc  --  comments three lines\n    \\uu  --  uncomments a line\n    \\c4j  --  comments the current line and the four following lines\n    \\caB  --  comments a block of code\n\nNote that the dot (.) command (see :help .) works to repeat Omaps even though they are mappings. A command, :DotCommandSet, is defined by Omap.vim which allows other mappings to similarly be repeated using the dot command. \n\nFor more detailed help see the help documentation in the archive below.\n"}, {:name=>"swig", :summary=>"SWIG syntax", :description=>"The standard Vim cannot recognise SWIG (http://www.swig.org) description file.\nI write some simple scripts for highlinghting SWIG description file.\n\nAny advice could be sent to mrkissinger@gmail.com"}, {:name=>"cccs.vim", :summary=>"Syntax file for Clearcase config specs", :description=>"Colours your Clearcase config specs."}, {:name=>"vc_diff", :summary=>"show difference of source code using", :description=>"Programers often want to check the difference using cvs/svn diff when they change source codes on cvs/svn environment.This script do that.\nStep to use this script:\n1. cd source code directory which is controled by svn or cvs.\n2. run vim and execute \":Vcdiff\" to make a patch file.\n3. move a cursor to source code name on vim.\n4. execute \":call Vcshow\" to check difference between current and original codes."}, {:name=>"Teradata-syntax", :summary=>"Teradata SQL, BTEQ Commands (Teradata V2R4,V2R5)", :description=>"Syntax file for Teradata database and BTEQ commands."}, {:name=>"timekeeper", :summary=>"keeps a journal of used time", :description=>"Keeps a log of used (wasted) time. The script will trigger every hour whereupon the script will beep and you'll enter a description of what you'll be doing during the next hour.\n\nKeys:\n<Leader>E to insert a new hour entry\n<Leader>D to insert a new date entry\n\nCommands:\nAutojournal on | off for setting off and on the autojournalling feature\n\nThe script will uninstall (remove itself from memory) after the current journal is closed."}, {:name=>"trt.vim", :summary=>"Test Real Time scripting language for C testing.", :description=>"This is a syntax file for TRT (Rational Test Real Time), a scripting tool for testing programs written in C."}, {:name=>"greens", :summary=>"A grey-on-black colorscheme", :description=>"A colorscheme mainly using white, green, red and yellow, with a dark background. I try to make things harmony yet also easy to be discerned, and work in both terminal and GUI. For diff mode, the default colors are kept.\n\nScreenshot:\nhttp://elephant.linux.net.cn/files/vim_screenshot.png (It is also the screenshot of my vimscript #1238.)"}, {:name=>"VIMEN", :summary=>"Vim Is More than Editor Now", :description=>"VIMEN is a mini IDE to work with VIM(Gvim) and GDB.\nSEE Screen Shots: http://sourceforge.net/project/screenshots.php?group_id=134978&ssid=9952"}, {:name=>"pike.vim", :summary=>"pike syntax highlighting", :description=>"Borrowed a few things from (the much superior) lpc.vim by Shizhu Pan -- which fixed bug with parens among other things, quit highlighting arrays/mappings as a single giant identifier, and updated the predef function list dramatically.\n\nIt is otherwise the original syntax file written by Francesco Chemolli."}, {:name=>"aspvbs.vim--Bitterberg", :summary=>"indenting for asp vbs files", :description=>"Having to write active server pages with visual basic script included is pain enough. Vim eases this and with this automatic indenter even more.\n\nThis script tries to be very smart and will probably fail horribly. Since version 0.4 (there is no 0.3) aspvbs.vim will do indenting based on the context. That means when you are in an html context, the html indenter will be used, otherwise the ASPVBS indenter.\n\nBut wait, there is even more! The script tries to pick up the previous indent of each block, so when you open a new ASP block with <% the indent of the last ASP block will be resumed.\n\nThe script works best when an opening <% and a closing %> are placed on a line on their own. You can most definitely break the script by writing code like '%><html></html><% ...'\n\nHere is an example of its indenting sprinkled with comments:\n\n<%\nfunction baz\n    if asd then\n        bcd\n%> \n<html>\n    <head>\n        <title><%=myTitle%></title>\n    </head>\n    <body>\n<% If myPage = 1 Then %>\n        <table> <!-- the indent of body is continued -->\n            <tr>\n                ...\n            </tr>\n        </table>\n<% End If %> <!-- the indent of < % if mypage = 1 is picked up -->\n    </body> <!-- the indent of </table> is continued\n<%\n        ' the indent of line 4 is continued (inside if)\n        efg\n    end if ' if asd then is closed\n\n    ' normal asp indent here\n    if foo then\n        select case blah\n            case foo\n                Response.Redirect \"google\"\n        end select\n    else\n        Response.Redirect \"yahoo\"\n    end if\n    =this_is_a_statement()\n%>\n</html>\nTest1<%testin1%>Test2<%testin2%>test3<%statement\n\n    ' for the previous line, the html indenter wins\n    =this_is_a_statement2()\nend function ' close function baz\n%>\n\n"}, {:name=>"wood.vim", :summary=>"Wood cabin color scheme", :description=>"This color scheme is based on the aqua.vim color scheme, but using wood color tones instead of aqua blue. The colors are of neutral intensity, low contrast, not too dark and not too bright. It is meant to be an occasional change of pace from the typical color schemes.\n"}, {:name=>"custom", :summary=>"good color scheme", :description=>"good color scheme with dark background"}, {:name=>"sienna", :summary=>"Color scheme with harmonic colors easy to distinguish (dark and light styles).", :description=>"This color scheme has both dark and light styles with harmonic colors easy to distinguish. Terminals are not supported, therefore you should only try it if you use the GUI version of Vim.\n\nThe versions of this color scheme older than 1.20 contain the light style only."}, {:name=>"tmda_filter.vim", :summary=>"colorizes tmda filter files", :description=>"Colorizes the filter files used by TMDA ( http://www.tmda.net/ ), the Tagged Message Delivery Agent.\n\nI don't use all of the features of TMDA, so please let me know of any things that should be colorized and aren't."}, {:name=>"cstol.vim", :summary=>"Colorizes OASIS CSTOL files", :description=>"Colorizes OASIS CSTOL ( http://lasp.colorado.edu/oasis/#User%20Interface ) files.  There are some small regular expression bugs, but overall CSTOL scripts are much more readable with this syntax coloration than without it.  I welcome bug reports."}, {:name=>"tex_umlaute", :summary=>"replaces German Umlauts with their TeX encodings on save", :description=>"This script is based on vimscript #907 by Timo Teifel. Main reason I wrote this is that I was annoyed by the different encoded Umlauts in TeX files of different authors. Some write {\\\"a}, some \\\"a, some \\\"{a} some even \"a.\n\nOn loading all occurances of TeX encoded German Umlauts will be replaced by their normal counterparts. On writing they are replaced by a clean standard encoding (\\\"a for an ä, \\ss{} for ß).\n\nCan be simply extended for other chars or utf-8 codings if there is need for..."}, {:name=>"Quick-access-file-Menu", :summary=>"Add files in current Directory in Menu for quick access", :description=>"This utility pulls all  the file names of a particular type  and present it in menu(currently *.c *.h and *.a51 8051 assembly).This utility is usefull when your compiler generates many object and temp files in current directory  and navigating to select files using  explorer becomes painful."}, {:name=>"IComplete", :summary=>"IComplete is a C/C++/Java/C# code completion system using the omnifunc framework", :description=>"There is a new vim plugin OmniCppComplete at:\nhttp://www.vim.org/scripts/script.php?script_id=1520\nIt works better, is easier to setup and is also better maintained, so please use that.\n\nIMPORTANT: I will NOT maintain icomplete in future anymore, if you are interested in improving it, please tell me, and you can take over maintainership.\n\n------------------------------------\n\n**** Features ****\n- Automatic generation of a tags file for the current source file by building a tree of included files. \n- Listing members (also inherited ones) of a class\n For QString s; s. only non-static members are suggested, for QString:: only static ones. \n- Listing all function signatures of overloading methods\n- Recognizes return values of methods.\nQWidget w; w.rect().topLeft(). // Lists completions for a QPoint \n- Uses the scope of the cursor position\n- Recognizes, if you are inside a method-definition and completes also private or protected variables for this class. For a global scope, only public members are suggested. \n- Works in both console and graphical vim\n- Uses a cache system for increased spead.\n- Understands namespaces\n- Automatic completions after . and ->\n\n------------------------------------\n\nQuick start: press <Ctrl-X><Ctrl-O> at any code position in insert mode.\n\nFor more usage information and screenshots or if you want to donate a little bit, then look at:\nhttp://icomplete.sourceforge.net\n"}, {:name=>"Emacs-outline-mode", :summary=>"Imitates Emacsen", :description=>"This is really just a foldexpr function and a few syntax lines.  If you have ever used outline-mode in Emacs, then using this will be obvious.  Just use vim's fold manipulation commands to expand and collapse sections.\n\nFor the rest, it's really just like any other type of outline mode, except that it uses asterisks at the beginning of a line to indicate the level of the section, as opposed to numerical indexes.  This is very convenient when you'd like to be able to organize information, and also be able to easily RE-organize it without changing a bunch of numbers around.  Good for keeping notes on several topics in one file.   ...or for whatever.  :)"}, {:name=>"teol.vim", :summary=>":TEOL <string> and :TSOL <string>; toggles string at end/start of line(s)", :description=>"This is a vim remake of an old macro I had for Multi-Edit, handy it was though\nnot so necessary with VIM, given A and :s but this will not mess up your cursor\nposition, works on a range, etc. It has some use.\n\nThere are default/example mappings for both visual and normal modes:\n\nFor end of line toggling:\n\n<leader>;    toggles \";\" at end of line.\n<leader>,    toggles \",\" at end of line.\n<leader>:    toggles \":\" at end of line.\n\n\nFor start of line: (start of line for this is first non white space char, like\n^ as opposed to 0 )\n\n<leader>s,    toggles \", \" at start of line.\n<leader>s:    toggles \": \" at start of line.\n\n\nNOTE that you can toggle strings not just chars; I.e. \":TSOL --\", \":TEOL --\"\nand so on."}, {:name=>"acsb", :summary=>"CScope frontend (multi queries, multi stacks)", :description=>"A cscope frontend supporting\no Multiple queries\n   It uses a buffer for listing the results of cscope queries.\no Multiple tag stacks\n   Supports multiple tag stacks for serious code analyzis.\n   The stacks are shown in a buffer.\nMore information (e.g. usage) can be found at the beginning of the script file.\nIt uses its own tag stack and not the one that vim has built in. It means that\nif you use both vim's ctags support and this script in parallel the two tag stacks\nwill not interfere.\n\n"}, {:name=>"drcstubs", :summary=>"Imaps to provide active stubs  (currently: c, LaTeX, sh, vim)", :description=>"All of the DrCStubs ftplugin scripts provide maps which work during insert mode.  One may use either the shorthand or longhand maps to invoke the corresponding imap.  They are invoked whenever a string is followed by a backquote.\n\nOne major advantage of these imaps is that they, in turn, take advantage of the user's cindent settings and/or indentation scripts.  Thus the result should be as if the user had typed them him/herself.\n\n  * These imaps will not operate if \"set paste:\" is on.\n  * They work well with vimscript#1270 indenting scripts\n\nIn the maps below:\n\n An \"X\" is where the cursor will end up after the map is invoked.\n An \"Y\" is where the cursor will end up after an <esc> is pressed.\n A  \"|\" means a newline.\n\nAnother form of help is available by typing >\n\n :Drcstubs\n\n------------------\nC LANGUAGE SUPPORT\n------------------\n     Shorthand    Longhand     Expands\n     Map          Map          To\n     ---------    --------     -------\n     i`           if`          if(X) {Y}\n     e`           els[e]`      else {X}\n     ei`          eli[f]`      else if(X) {Y}\n     f`           for\\=`       for(X;;) {Y}\n     w`           wh[ile]`     while(X) {Y}\n     s`           sw[itch]`    switch(X) {Y}\n     c`           ca[se]`      case X: Y break;\n     d`           defa[ult]`   default: Y break;\n     `            do`          do {X} while(Y);\n     E`           Ed[bg]`      Edbg((\\\"func(X)\\\"Y));\n     R`           Rd[bg]`      Rdbg((\\\"funcX\\\"Y));\n     D`           Dp[rintf]`   Dprintf((1,\\\"X\\\"Y));\n                  in[clude]`   #include X\n                  de[fine]`    #define X\n                  #`           #ifdef X ... #endif\n\n-------------\nLATEX SUPPORT\n-------------\n       Environments And Abbreviations\n     Shorthand    Longhand     Expands\n     Map          Map          To\n     ---------    --------     -------\n     align`                    \\begin{align}|X|\\end{align}\n     arr`         array`       \\left[\\begin{array}{ccc}|X|\\end{array}\\right]\n     ctr`         center`      \\begin{center}|X|\\end{center}\n     desc`        description` \\begin{description}|\\item[X]|\\end{sdescription}\n     enum`        enumerate`   \\begin{enumerate}|\\item X|\\end{enumerate}\n     eps`         epsf`        \\begin{figure}[H]\\centering\\framebox{\\epsfbox{X.eps}}\\end{figure}\n     eqn`         equation`    \\begin{equation}|X|\\end{equation}\n     eqna`        eqnarray`    \\begin{eqnarray}|X&=& Y \\\\|\\end{eqnarray}\n     fig`         figure`      \\begin{figure}[H]\\centering \\framebox{X} \\caption{CAPTION HERE} \\end{figure}\n     flalign`                  \\begin{flalign}|X|\\end{flalign}\n     frac`                     \\frac{X}{Y}\n     gat`         gather`      \\begin{gather}|X|\\end{gather}\n     i`                        \\item X\n     i`                        \\item[X] Y        (if vim v7, and in a description block)\n     item`        itemize`     \\begin{itemize}|\\item X|\\end{itemize}\n     mat`         matrix`      \\left[|\\begin{array}{cc}| X &   & \\\\|&   & |\\end{array}|\\right]\n     mini`        minipage`    \\begin{minipage}[H]{4in}|X|\\end{minipage}\n     multc`       multicol`    \\multicolumn{1}{X|c|}{MultiColumn} \n     multl`       multline`    \\begin{multline}|X|\\end{multline}\n     split`                    \\begin{equation}\\begin{split}|X|\\end{split}\\end{equation}\n     tab`         tabular`     (too long for here)\n     v`                        \\verb`X`\n     verb`        verbatim`    \\begin{verbatim}|X|\\end{verbatim}\n\n         Script Style Support\n     Shorthand    Longhand     Expands\n     Map          Map          To\n     ---------    --------     -------\n     bf`                       \\textbf{}\n     it`                       \\textit{}\n     rm`                       \\textrm{}\n     sc`                       \\textsc{}\n     sf`                       \\textsf{}\n     sl`                       \\textsl{}\n     tt`                       \\texttt{}\n     mtt`                      \\mathtt{}\n     mrm`                      \\mathrm{}\n     mbf`                      \\mathbf{}\n     msf`                      \\mathsf{}\n     mtt`                      \\mathtt{}\n     mit`                      \\mathit{}\n     mcal`                     \\mathcal{}\n\n                 Greek Letters:\n     Shorthand    Expands        Shorthand    Expands\n     Map          To             Map          To\n     ---------    -------        ---------    -------\n     a`           \\alpha        v             \\nu\n     b`           \\beta         f             \\xi\n     g`           \\gamma        p             \\pi\n     d`           \\delta        vp            \\varpi\n     e`           \\epsilon      r             \\rho\n     ve`          \\varepsilon   vr            \\varrho\n     z`           \\zeta         s             \\sigma\n     n`           \\eta          v             \\varsigma\n     t`           \\theta        t             \\tau\n     vt`          \\vartheta     u             \\upsilon\n     io`          \\iota         h             \\phi\n     k`           \\kappa        vh            \\varphi\n     l`           \\lambda       x             \\chi\n     m`           \\mu           q             \\psi\n     w`           \\omega\n\n\n----------\nSH SUPPORT\n----------\n     Shorthand    Longhand     Expands\n     Map          Map          To\n     ---------    --------     -------\n     ca[se]`      c`           case X in|Y|esac\n     fo[r]`       f`           for X in Y ; do|Z|done\n     if`          i`           if [[ X ]]; then|Y|fi\n     eli[f]`      ei`          elif [[ X ]]; then|Y\n     els[e]`      e`           else|X\n     fu[nction]`               function X|{|Y|}\n     wh[ile]`     w`           while [[ X ]]; do|Y|done\n\n\n-----------\nVIM SUPPORT\n-----------\n     Shorthand    Longhand     Expands\n     Map          Map          To\n     ---------    --------     -------\n     i            if           if X|endif\n     e            els[e]       else|X\n     ei           eli[f]       elseif X\n                  fu[nction]   fun! X(Y)|endfun\n     w            wh[ile]      while X|endwhile\n     F            Df[unc]      call Dfunc(\"func(X)\")|Y\n     R            Dr[et]       call Dret(\"return func X\")\n     D            De[echo]     call Decho(\"X\")|Y\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#DRCSTUBS)\n"}, {:name=>"drc_indent", :summary=>"DrC's indent scripts (currently: sh LaTeX vim maple)", :description=>"DrChip's indent files; some are modified from the distribution (such as the ones for sh, vim) and some are new (maple, tex). They're what I use.  Indenting is one of those \"Irrationality Reigns\" topics; everyone seems to have a lock on the Right Way to do it.  So, my Right Way may not be yours (sorry!).\n"}, {:name=>"rubikscube.vim", :summary=>"a rubik's cube game in vim script", :description=>"Commands:     \n\n- u, d, l, r, f, b to turn up, down, left, right, front and back faces clockwise (whatever cube orientation) \n- c, m, v to turn the three belts clockwise\n- shift + letter for turning counterclockwise - ctrl + letter for half turn \n- the whole cube can turn with the four arrows and Pgup/Pgdown keys\n- sramble cube with s key, reset it with S\n\nTODO:\n- more configurable display\n- add some edit technique with a solver algorithm - in order to solve a real cube :-) \n- chrono + high score stuff \n- support for 4x4 and 5x5 cubes \n- write moves in letters when done\n- some optimization (seems to be slow on old or \"slow networked display\" machines) \n- etc.\n"}, {:name=>"php_check_syntax.vim", :summary=>"Check the syntax when saving or reading a php file", :description=>"This plugin is superseded by vimscript #1431.\n\nThis ftplugin is based on Klaus Horsten's php_console (vimscript #779). In \nopposition to php_console, it only checks the syntax. It does this automatically\nwhen opening or closing a file.\n\nIf you use this as a ftplugin, the script will miss the first BufRead event \nas this is when it's being loaded.\n\nIf php isn't in your path, set the g:php_check_syntax_cmd variable \n(including the -l switch).\n"}, {:name=>"Mathematica-Syntax-File", :summary=>"Syntax highlighting file for Mathematica code", :description=>"[ Note, as of May 2005,  this is included in Vim7 ]\n\nThis file greatly extends the old Mathematica syntax highlighting that has traditionally come with vim.  It has substantial support for Mathematica patterns, operators, and includes comments notation goodies, such as special function comments beginning with (**.  Try it out and let me know what you think.\n\nAdd autoindenting vimscript #1274, salt and pepper to taste."}, {:name=>"Mathematica-Indent-File", :summary=>"Indentation file for Mathematica code", :description=>"[ Note: As of May 2005, this is included in Vim7 ]\n\nThis is a simple file that allows rudimentary auto indenting of Mathematica code.  Combine it with vimscript #1273, it makes editing Mathematica package code a breeze."}, {:name=>"SpotlightOpen", :summary=>"Open files using MacOS Tiger's Spotlight", :description=>"This is based on Ciaran McCreesh's locateopen script. I modified it so it uses Spotlight instead of slocate. So this script will only run on MacOS 10.4 or later.\n\nIt allows you to open files in VIM by just typing (part of) the filename. You don't have to type their full path. If there's more than one match, you can choose a file from a menu.\n\nUsage is the same, except the command names have \"Spot\" in place of \"Locate\":\n\n:SpotEdit <file>\n:SpotSplit <file>\n:SpotSource <file>\n:SpotRead <file>\n\n\nUser-definable options (see script header):\n\n- You can choose whether the typed name must match the filename exactly, its beginning, or any part of the filename.\n\n- You can limit the search to a certain filetype.\n\n\nI use the following in my .vimrc:\n\nlet g:spotlightopen_match = 1\nlet g:spotlightopen_limitftype = \"public.plain-text\"\n\nwhich means that it will look for any plain text files beginning with a given name. So for example\n\n:SpotEdit PrefsW\n\nwould find PrefsWindow.c and PrefsWindow.h - but not PrefsWindow.o (since it's a binary file and not plain text).\n\n\nTodo:\n\n- Option to exclude matches from the trash..."}, {:name=>"autoscroll", :summary=>"autoscroll the screen, see the context of current line clearly", :description=>"auto scroll the screen:\nwhen there are still  certain lines between current line and the top or bottom boundry of the current window, the screen would scroll automatic, so that you can see the context of current line always.\nwhen in insert mode, if current line is quite near the bottom boundry of current window, and if you press enter, some extra blank spaces would appear so that the current line not  be too close to the boundry."}, {:name=>"vsearch.vim", :summary=>"Allows text to be searched vertically", :description=>"This script enables the command \":VS\" which allows you to search for patterns vertically (column-wise)\n\n\" Usage:\n\"  1) .,$VS <pattern> [Preferred approach, shows multiple occurence in a line]\n\"      [ Use @: to search for further hits]\n\"  2)  [range]VS <pattern> [Only first occurence in a line shown]\n\"\n\" Pre-requisites:\n\"   :set nocp cpo+=<\n"}, {:name=>"quantum.vim", :summary=>"quantum syntax file", :description=>"Syntax file for SPSS quantum and ccount (http://pan-data.dyndns.org/ccount/) data manipulation and tabulation software packages.  Very basic (only a few colors) highlighting used, to be compliant with UNIX interfaces (such as SecureCRT) as well."}, {:name=>"ToggleOptions.vim", :summary=>"Quick toggling of options", :description=>"This allows \"toggling\" of more complex operations, like switching off \"diffthis\".  It also reduces the number of key mappings used overall by placing the operations under a key activated command window menu, i.e. if the key map is <leader>o  and <leader> is \",\":\n     ,o\ndisplays an option list in the command window:\n     wrap, Wrapscan, list, binary, modifiable, diff, virtualedit, uhex\nso the full command\n    ,od\ntoggles \"diff\" mode on/off for a window (including foldcolumn=0)\n    ,om\ntoggles \"modifiable\" and \"readonly\" together.\n\nYou should edit the script to add what want.  E.g.  add your item to the menu call string:\n\n    let l:char = s:Char_menu( \"{w}rap, {W}rapscan, {l}ist, {b}inary, {m}odifiable, {d}iff, {v}irtualedit, uhe{x}\" )\n\nwhere {text} is in a different color, then add an elseif clause:\n\n    elseif l:char ==# 'm'\n        if &modifiable && !&readonly\n            set nomodifiable\n            set readonly\n        else\n            set modifiable\n            set noreadonly\n        endif\n        set readonly?\n        set modifiable?\n"}, {:name=>"crontab.vim", :summary=>"Syntax highlight for crontab files", :description=>"I've made a patch to the crontab.vim script, and the maintainer appears to be offline. So I've upload the script here."}, {:name=>"tagselect", :summary=>"Provides a better :tselect command.", :description=>"If you don't like the more prompt that comes up when there are too many\nhits to the :tselect and the related commands, then try this plugin.\nUseful even with finding help topics in a help window (see :help {subject}\nand see the tip on the usage below).\n                                                                           \n  Use :Tselect command instead of :tselect to bring up the :tselect output\n  in a vim window. You can then search and press enter on the line(s) of\n  the tag which you would like to select. If you don't want to select any\n  tag you can quit by pressing \"q\". You can also start typing the number\n  of the tag instead of moving the cursor to the line and pressing enter.\n                                                                           \n  To select another tag index for the same tag, you can use :Tselect\n  without arguments or just use :tselect itself.\n                                                                           \n  You can also use :Stselect, :Tjump and :Stjump commands to execute\n  :stselect, :tjump and :stjump commands respectively.\n                                                                           \n  The normal mode commands, \"g]\" and \"g^]\" (g] and g_CTRL-]) and their\n  corresponding visual mode commands (v_g] and v_g_CTRL-]) and window\n  split commands (CTRL-W_g] and CTRL-W_g-CTRL-]) will be remapped to use\n  the plugin. To disable these maps, set g:no_tagselect_maps in your\n  vimrc.\n                                                                           \n  You can also use :Tags command to show the output of :tags command in\n  a vim window. You can then search and press enter on the line of the tag\n  which you would like to jump to. The plugin executes the appropriate\n  command (:tag or :pop) with the right index.\n                                                                           \n  Use g:tagselectWinSize to set the preferred size of the window. The\n  default is -1, which is to take just as much as required (up to the\n  maximum), but you can set it to empty string to make the window as high\n  as possible, or any +ve number to limit its size.\n                                                                           \n  Use g:tagselectExpandCurWord to configure if <cword> and <cWORD> tokens\n  will be expanded or not.\nTips:\n  - You can intermix the usage of the plugin commands with that of\n    built-in commands (ie., :tn, :tp followed by a :Tselect)\n  - You can use :Ts instead of the full :Tselect, as long as there are no\n    other commands which could confuse the usage. The same applies to\n    :Tjump (:Tj) and other commands.\n  - The [Tag Select] buffer is set to to \"tagselect\" filetype, so this\n    allows you to customize the look & feel (colors, maps etc.) by\n    creating syntax/tagselect.vim and ftplugin/tagselect.vim files in your\n    runtime.\n  - In a help window, you can use the :Tselect /<pattern> command to do\n    very powerful and handy lookup of the help topics. Using this\n    technique to find the help topic you want is fun and easy and you are\n    sure to bump into features that you are not aware of (both in Vim and\n    in plugins that you installed). E.g., to find all the topics that have\n    \"shell\" in its name,\n        :h\n        :Tselect /shell\nLimitations:\n  - Executes tag commands (:tselect :stselect) twice, once to show the\n    list, and once to jump to the selected tag. This means, if the tag\n    search takes considerable time, then the time could potentially be\n    doubled (which is usually not a problem because Vim seems to cache the\n    last tag results). This could probably be fixed in Vim7 using the new\n    tag functions.\n\n\n\n\nSearch_key_words: tag tags tagselect tselect stselect tjump stjump visual explorer hari krishna dara"}, {:name=>"TinyBufferExplorer", :summary=>"A 1-file buffer list plugin with Grouping", :description=>"[Key features]\n\n    1. incremental collection of buffers\n      - buffer information are collected in the background\n      - less time requred showing lists\n\n    2. grouping\n      - it suppresses excessive information\n      - it's easy to switch among groups\n      - defined groups:\n        - Directory groups corresponding to buffers\n        - MRU(Most Recently Used buffers) group\n        - Search group\n        - [new] All buffers group\n\n    3. ease of accessing buffers and groups\n      - the MRU group can list buffers you are likely to edit\n      - the group list supports you switching among groups\n      - it's easy to switch to the Directory group in which\n        the current buffer is\n\n    4. [new] selectable UIs\n      - \"Fullfeatured\" (default), SimpleGroup and Minimal\n      - \"SimpleGroup\": one window, supports switching groups\n      - \"Minimal\": one window, shows all buffers\n\n    5. customizable list format (Fullfeatured UI only)\n\n[How to use it? (and screenshots)]\n\nThere are 3 UIs now. (You can choose by command)\n\nFullfeatured UI: \n  execute :TinyBufferExplorer or :TBE.\n  http://bitbucket.org/shu/tinybufferexplorer/downloads/fullfeatured.png\n\nSimpleGroup UI:\n  execute :TBESimpleGroup.\n  http://bitbucket.org/shu/tinybufferexplorer/downloads/simplegroup.png\n\nMinimal UI:\n  execute :TBEMinimal.\n  http://bitbucket.org/shu/tinybufferexplorer/downloads/minimal.png\n\nFor more detailed descriptions, read tbe.vim(in clumsy English).\n"}, {:name=>"TortoiseSVN.vim", :summary=>"Support for TortoiseSVN (a subversion client for Windows)", :description=>"TortoiseSVN.vim will commit the current buffer to your subversion \nrepository everytime you update the file or once per session (see \n|tortoiseSvnCommitOnce|). The advantage over using command line svn \ncommands is that you get the TortoiseSVN GUI for committing files, \nbrowsing the repository etc.\n\nSome aspects of this plugin can be configured by setting the following \nvariables in your |vimrc| file.\n\n    g:tortoiseSvnCmd :: The path to \"TortoiseProc.exe\".\n\n    g:tortoiseSvnCommitOnce, b:tortoiseSvnCommitOnce :: If true, the \n    buffer will be committed to the subversion repository only once \n    (i.e., when saving the file for the first time).\n\n    g:tortoiseSvnMenuPrefix :: If empty (''), no menu will be installed.\n\n    g:tortoiseSvnStartCmd :: A command for detaching TortoiseProc.exe \n    from the shell (e.g., start).\n\n    g:tortoiseSvnInstallAutoCmd :: If false, no autocmd will be \n    installed.\n"}, {:name=>"nasl.vim--Polloni", :summary=>"small and more automated nasl syntax file", :description=>"Small syntax file for the Nessus Attack Scripting Language. It uses the built-in functions and constants found in nasl_init.c and the keywords found in nasl_grammar.tab.c. Arguments like english:, deutsch:, data:,etc are matched using regexes instead of fixed names."}, {:name=>"sadic.tgz", :summary=>"Japanese to  English and English to Japanese translator", :description=>"This is a handy utility to translate text from Japanese to English and vice versa. \nIt uses the excite.co.jp services to translate the text then displays the result in \nthe standard output.\n\nsadict was created to be integrated with vim and mutt , \nIf you add the following lines into your ~/.vimrc \n\nvmap j :w! /tmp/.vim.msg.en<cr>:!sadic -j  < /tmp/.vim.msg.en<cr>\nvmap ,j :w! /tmp/.vim.msg.en<cr><esc>`>o<cr><esc>:r !sadic -j < /tmp/.vim.msg.en<cr>\nvmap e :w! /tmp/.vim.msg.jp<cr>:!sadic < /tmp/.msg.jp<cr>\nvmap ,e :w! /tmp/.vim.msg.jp<cr><esc>`>o<cr><esc>:r !sadic < /tmp/.vim.msg.jp<cr>\n\nThen you can visually select a text region (by pressing Shift-V then\nmoving the cursor), then when you press \"j\" , the text will be translated \nfrom English to Japanese.\n\n\",j\" translates the text from english to Japanese then appends the result (japanese text) \nright after the visually selection region.\n\nThe \"e\" and \",e\" mappings do the same thing except that they translate text from\nJapanese to English.\n\nFor Mutt , you can add the following into your .muttrc\nmacro pager   j          \"v\\n| nkf -e | sadic -j | less \\nq<left>\"\nmacro pager   e         \"v\\n| nkf -e | sadic  | less \\nq<left>\"\n\nThen , while viewing your e-mails , you can press \"j\" to translate from English\nto Japanese. and \"e\" to translate from Japanese to English."}, {:name=>"tabs.vim", :summary=>"Allows to quickly switch between buffers and displays them as tabs.", :description=>"Adds a special \"tab line\" at the bottom of Vim main window. Make a tab for the current buffer by pressing \\t. The tab gets highlighted when the buffer is activated. Switch between tabs by pressing \\1, \\2, ..., \\9.\nSee detailed instructions at the top of the script's source."}, {:name=>"otherfile.vim", :summary=>"Allows you to quickly switch between .h/.c, .h/.cc, .ads/.adb etc", :description=>"Press F8 to switch between header and source files, or any other kind of paired files.\nIn the present state, handles C/C++/Ada files, but can be (really) easily modified to handle more.\nIf no alternate file is found, asks for the file name to create. Press ESC to cancel if you want.\nBy default maps <F8> to do the job; you may change this (see the end of file)."}, {:name=>"otherfile.vim-B", :summary=>"Allows you to quickly switch between .h/.c, .h/.cc, .ads/.adb etc", :description=>"Press F8 to switch between header and source files, or any other kind of paired files.\nIn the present state, handles C/C++/Ada files, but can be (really) easily modified to handle more.\nIf no alternate file is found, asks for the file name to create. Press ESC to cancel if you want.\nBy default maps <F8> to do the job; you may change this (see the end of file)."}, {:name=>"LogiPat", :summary=>"Boolean-Logic Patterns", :description=>"LogiPat takes Boolean logic arguments and produces a regular expression which is used to search for a line satisfying the logic.  The search register (@/) is initialized with the resulting regular expression, so repeating such searches is as easy as repeating any search.  A series of examples follows:\n\n:LogiPat \"abc\"\n\t\twill search for lines containing the string \"abc\"\n\n:LogiPat !\"abc\"\n\t\twill search for lines which don't contain the string \"abc\"\n\n:LogiPat \"abc\"|\"def\"\n\t\twill search for lines which contain either the string \"abc\" or the string \"def\"\n\n:LogiPat !(\"abc\"|\"def\")\n\t\twill search for lines which don't contain either of the strings \"abc\" or \"def\"\n\n:LogiPat \"abc\"&\"def\"\n\t\twill search for lines which contain both of the strings \"abc\" and \"def\"\n\n:let pat= LogiPat('!\"abc\"')\n\t\twill return the regular expression which will match all lines not containing \"abc\".  The double quotes are needed to pass normal patterns to LogiPat, and differentiate such patterns from boolean logic operators.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#LOGIPAT)\n"}, {:name=>"luarefvim", :summary=>"Lua reference manual", :description=>"This a Vim help file containing references for Lua 5.0 and 5.1, and it is -- with a few exceptions and adaptations -- a copy of the Lua 5.0 and Lua 5.1 reference manuals. Lua is a lightweight script language; see http://www.lua.org .\n\nSimilarly to CRefVim (from where a lot of ideas were drawn), you can easily search for references for words under the cursor, visually selected words, and manual contents."}, {:name=>"keywords.vim", :summary=>"mappings to move and quote iskeyword text", :description=>"This scripts provides two functionalities that use the iskeyword setting of\nthe current buffer.\n\nThe following mappings are provided for moving keywords in normal mode:\n\n    <C-Up>   : exchange the current keyword with the previous one.\n    <C-Down> : exchange the current keyword with the next one.\n\nThese mappings can be changed by changing the value of the following variables.\n\n    let g:keywords_MoveWordL = '<C-Up>'\n    let g:keywords_MoveWordR = '<C-Down>'\n\nAlso there exists mappings for adding/deleting \"quotes\" to/from a keyword or a\nvisually selected area. The mappings are as follows:\n\n   qw, q\"  : double quote\n   qs, q'  : single quote\n   qe, q`  : quote execute\n   q[, q]  : quote with square brackets\n   q{, q}  : quote with brackets\n   q(, q)  : quote with parantheses\n   q<, q>  : quote with xml style tag.\n\nIf you wish to provide a different map leader than 'q' use this variable:\n\n   let g:keywords_MapLeader = 'q'\n\nThere is one normal mode mapping for removing quotes from a keyword:\n\n   wq  :  removes non iskeyword material around the current keyword.\n\nConsider sending an email if you have any comments or suggestions :-)\n"}, {:name=>"Pida", :summary=>"A graphical IDE that uses Vim as its editor over the client-server protocol.", :description=>"I personally believe that Pida offers a unique experience for programmers and other Vim users. It is essentially an IDE, except that it lives entirely outside the text editor (Vim) and all the other tools it uses.\n\nIt is written in Python, and uses the GTK toolkit.\n\nOnce installed, you can run Pida to connect to existing \"vim -g\" or \"vim --servername <name>\" sessions, or run in embedded mode, to embed a single instance of Vim much like a conventional IDE.\n\nPlease visit http://pida.berlios.de/ for the application website (there may be newer verisons there) for more details, or see a (large) screenshot of pida being used to develop itself at http://pida.berlios.de/images/5/5c/Pida_embed.png.\n\nPida is still early at this stage, and I very much appreciate all types of bug reporting, advice, criticism etc."}, {:name=>"nightshade.vim", :summary=>"Bright colors on a black background with a 2nd colorization script for printing", :description=>"NightShade uses a black background with bright highlighting.\nNightShade_Print uses similar colors but is designed for printing.\n\nI put the macro below in my .vimrc file to allow a single key\nto change to the nightshade_print colorization, print, then change back.\n\n   map <F1> :colorscheme nightshade_print<CR> :hardcopy<CR> :colorscheme nightshade<CR>\n"}, {:name=>"form.vim", :summary=>"FORM syntax file", :description=>"This is a minor upgrade for the sytax file that comes with the vim distribution, now including some changes due to the latest release FORM 3.x ."}, {:name=>"rsl.vim", :summary=>"Basic syntax for RSL (droidarena.net).", :description=>"I just wanted to get something going, so I added all the events/commands/functions, etc.  There are a number of changes I still want to make still.  All suggestions welcome."}, {:name=>"Color-Scheme-Explorer", :summary=>"Easy color scheme browsing", :description=>"Color Scheme Explorer display a list of all available color schemes you have installed on your computer. Once opened, you are able to scroll through the list and select the color scheme of your choice. Once you have selected the color scheme you would like to see, your color scheme will change to reflect that scheme. If you would like to see another scheme, simply select a different one from the list. After you are done explorering all the color schemes, you can press &#039q&#039 to quick explorering...\n\nBy default the command to involke the Color Scheme Explorer is &#039:ColorSchemeExplorer&#039"}, {:name=>"Project-Browser-or-File-explorer-for-vim", :summary=>"Easy project navigation by listing the files", :description=>"Emulates the project file browser similar to some popular code browsers.      \nThis will list all the files in the project in a new window and allow user to open any file by mouse click/<CR>/O/V/H. This will come very handy when you are dealing with huge number of files and you really dont want to worry about the project directory structure, but just about the filename you are working on.  \n\nMore information about the key maps and configuration can be found in the fileexplorer.vim file.\n\nFeel free to contact me, in case you have any questions/feedback."}, {:name=>"Shortcut-functions-for-KeepCase-script-", :summary=>"Makes substitutions using Michael Geddes' KeepCase functions easier", :description=>"This is a very simple script that allows you to easily do case-preserving text replacements over an arbitrary range. See vimscript #6 by Michael Geddes for the functions this script depends on.\n\nFor example:\n\n:'<,'>call S('building','campus')\n\nwill replace all occurrences of \"building\" with \"campus\", \"BUILDING_ID\" with \"CAMPUS_ID\", \"getBuilding\" with \"getCampus\", etc. across the currently selected range.\n\nAlso included is the SS(pat,sub) function which uses KeepCaseSameLen for the substitutions instead of KeepCase.\n\nThanks to Michael Geddes for a great script!"}, {:name=>"maximize.dll", :summary=>"Maximizing plugin for Win32 gVim", :description=>"Maximizes gVim window on startup.\n\n\nReason:\n\n\"simalt ~x\" does not work in a Russian Win2000, although it did in WinME, with corresponding Russian letter instead of \"x\". Everything always works fullscreen on my computer, and Vim is the core part of my work, so I maximized its window by hands each time, and searched for an automated solution.\n\n\nDetails:\n\nThis can be done by a DLL, which must be called with libcallnr() function:\n\n    call libcallnr('maximize', 'Maximize', 1)\n\nIt takes one numeric parameter: 1 means maximize the window and 0 restores it back. It returns 1 on success, 0 on fault.\n\n\nZIP archive is 4.4 Kb.\nSource inside."}, {:name=>"recycle.dll-and-recycle.vim", :summary=>"Backup directly into Recycle Bin on Win32", :description=>"The idea is stolen from Aditor (http://aditor.swrus.com/). When backuping, the file is dropped to Recycle Bin instead of a temporary directory. As multiple files from one place may be deleted and will be stored in the bin, the bin may serve as a kind of versioning system.\n\nCall the DLL with\n    libcallnr('recycle', 'Recycle', 'd:\\path\\file.ext')\n\nReturns 1 on ok, 0 on error, -1 on user cancel (although the latter has little chance to happen, as the DLL deletes the file silenly).\n\nThere was a version that just deleted the file specified. Nothing wrong with it, but Vim said \"New\" when writing to the file, which is not true. So, for now, the DLL copies the file, adding the ~ suffix to it, and then deletes the copy. It overwrites any file~ that may occur to exist. And when restored from the bin, the original file is not overwritten, but a copy with ~ appears in the same directory.\n\nA .vim plugin is there, too. It adds an autocommand which backups the file to the Recycle Bin on each write, and disables Vim's own backup procedure. If the recycle fails, normal backup is enabled.\n\nIt does not honor the 'patchmode' option for now, does not load at all when it is set.\n\nPlanned:\n- honor 'patchmode'.\n- use the 'backupext' option instead of ~. The same with 'patchmode'.\n\nDecide:\n- copy the file with \"~\" or 'backupext' added (like now) or just delete the file (like it was)?\n- add an autocommand on FileWritePre?\n\nZIP archive is 2.4 Kb.\nThe DLL is 2.5 Kb.\nSource inside."}, {:name=>"php_funcinfo.vim", :summary=>"Quick help on PHP functions", :description=>"A filetype plugin file for PHP. Displays a list of built-in PHP functions, their prototypes and short descriptions.\n\nIntended to be quick-reference-under-hand while editing a PHP script. You hit a hotkey, it opens a list of all PHP functions and displays a short synopsis for the word under cursor, if that is found.\n\nThe plugin is =UNFINISHED=, so there are some bugs:\n- Some bugs in function list updating. Flicker. And somewhere in moving back-and-forth, wrong entries begin to show up.\n- Syntax highlighting of the function prototype is quite messy.\n- No mappings to put the selected function call back into the text.\n- Speedup might help.\n\nAlso planned:\n- Parse the XML source of the manual thoroughly, including predefined constants and variables, dividing functions into sections, etc.\n- Kind of integration with external help, like Vim format by Jörn Horstmann (http://planetxml.de/vim-php-manual.php), or HTML format (will probably have to write a Vim browser) or CHM.\n\nAnybody who cares, feel free to take over the development of this plugin.\n\nZIP file is 80 Kb."}, {:name=>"T7ko", :summary=>"Plugins set I use in my everyday vimming (especially when programing)", :description=>"These plugins were written by me during quite a long time.  I just wrote functions and commands for all those operations, that was often necessary for me to do and modified them when my necessities changed.  I'm not sure, that these will be helpful to anybody else except me, but I hope so.\n\nThis plugins-set is multi-purpose one.  Among others tasks it can handle, there are:\n - alignment text in a table-like columns;\n - enabling diff on directories from inside Vim;\n - some floating-point operations;\n - improved vimsessions management;\n - sorting lines and makes them unique (useful for those working under Windows).\n\nIt also has one feature, which I think it is a quite good idea.  You can switch on and off the functionality of each component of this plugin-set at run-time, without restarting Vim.  This allows you not to pollute global Vim namespace with unnecessary functions and commands."}, {:name=>"cguess", :summary=>"C and C++ identifier completion", :description=>"Cguess is a (Yet another?) C/C++/Java\u0099 syntax auto-completer meant to be used as a plugin for VIM text editor or others. See its homepage: http://www.zabor.org/cguess and the README file for details.\n\nThis is an early version and is quite limited. It works the \"intellisense\"-style way but the interface is quite primitive in this version. It maps several key combinations in insert mode and will show a list of members in a splitted window, function prototypes or the list of enumerators in comparisons (after typing == or !=) whenever possible.\n\nCguess is based on a true C++ language parser (like the compilers) and understands even the most complex syntactic constructs (but it will refuse to parse programs that contain errors). The parser supports several GNU extensions to C and C++ and some ISO and ANSI specific ideas.\n\nJava\u0099 is not supported.\n\nIf you use cguess, help Uganda."}, {:name=>"php_template", :summary=>"PHP5 Code templates for common snippets", :description=>" This filetype plugin provides a couple of code templates for PHP5\n development. The code is formatted according to PEAR Coding Standards.\n\n The three provided templates are:\n  - Class file template\n  - Method docblock template\n  - Field getter and setter template\n\n"}, {:name=>"another-dark-scheme", :summary=>"a pep-up of desert", :description=>"a color scheme for dark and fuzzy backgrounds, i made it because i thought \"desert\" was too boring.\nopen-source\nhave fun."}, {:name=>"java_fold", :summary=>"Folding expression for Java", :description=>"This script uses the expr fold-method to create folds for java source code.  Folds are created for methods, variables and nested classes with a javadoc comment (that is, at any line inside a class that starts with /**).  The fold will show a count of the number of lines contained in it and the first line of the variable or method declaration.\n\nThe fold level for each fold is equal to the indentation divided by the value of the 'shiftwidth' option, so make sure that 'shiftwidth' is set to the right value for your code.\n\nCaveats:\n- this doesn't work if you don't indent your code (properly) or if you don't use javadoc comments\n- the folds are \"greedy\": they start at a javadoc comment and run upto the next javadoc comment (they don't pay attention to syntax)\n- you can't see the javadoc comments in the folds"}, {:name=>"DataStage-Universe-Basic", :summary=>"Programming language used in Universe DB and DataStage", :description=>"Note: This script is obsolete.\n\nIf you need syntax file for DataStage go at vimscript #2161. The file includes DataStage Basic and Parallel functions plus DSX syntax.\n\nIf you need just syntax for Universe Basic go at vimscript #2143.\n\n"}, {:name=>"vimplate", :summary=>"template system for vim  (example for C++, Perl, LaTeX and make)", :description=>" 1. Description\n 2. Usage\n 3. Subroutines\n 4. Example\n 5. Documentation\n 6. Depends\n 7. Installation\n\n\n1. Description                                        *vimplate-description*\n \nVimplate provides an extensible and powerful template processing system.\nIt is based on Perl and Template-Toolkit.\nYou can create templates for program code, makefiles, letters, html pages,\nlatex etc. As example vimplate contains templates for C++, LaTeX, Perl\nand Makefile.\nWith vimplate you can write templates which interact with the user.\nFor themes are the functions choice() and input().\nYou can choose different locale for the function date() and locale().\nYou can write your own perl code directly in the templates.\n\nIn case you find my template useful,\nor have suggestions for improvements, please let me know.\n\nIf you write a new template,\nand  would like me to add it to the vimplate package\nplease send it to: stotz@gmx.ch\n\n\n2. Usage                                                    *vimplate-usage*\n\nUsage:\n  :Vimplate <template> [options]\n    choice <template> whit <TAB> (command line completion is supported).\n    With <TAB> all templates are listed.\n    [options]\n      -user|u=<username>\n        Use the information form user <username> while parsing templates.\n      -dir|d=<templatedir>\n        Search templatefiles in <templatedir>.\n\n\n3. Subroutines                                         *vimplate-subroutines*\n\n  locale()                  for locale please see: man locale\n  [% loc=locale() %]        get the current locale\n                              and write it to the variable loc\n  [% locale('C') %]         set global the current locale to C\n  [% locale('de_DE') %]     set global the current locale to de_DE\n  date()                    for date please see: man date\n  [% date('%c') %]          print the current date\n                              with the current locale setting\n  [% date('de_DE', '%c') %] print the current date with the locale de_DE\n  input()\n  [% var=input() %]         read input from user\n                              and write it to the variable var\n  choice()\n  [% day=choice('day:', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa') %]\n                            let the user choice between different values\n                            and write it to the variable day\n\n  please try :Vimplate Test\n\n\n4. Example                                                *vimplate-example*\n\na LaTeX Template:\n  http://typedef.ch/vimplate/example/LaTeX.tt.html\nthe generated LaTeX File:\n  http://typedef.ch/vimplate/example/Example.tex.html\na Makefile Template for LaTeX:\n  http://typedef.ch/vimplate/example/Makefile-LaTeX.tt.html\nthe generated Makefile:\n  http://typedef.ch/vimplate/example/Makefile.html\nc++ Templates:\n  http://typedef.ch/vimplate/example/hpp-default.tt.html\n  http://typedef.ch/vimplate/example/cpp-default.tt.html\nthe generated class:\n  http://typedef.ch/vimplate/example/Example.hpp.html\n  http://typedef.ch/vimplate/example/Example.cpp.html\nthe generated class with doxygen:\n  http://typedef.ch/vimplate/example/ExampleDoxy.hpp.html\n  http://typedef.ch/vimplate/example/ExampleDoxy.cpp.html\na perl Template:\n  http://typedef.ch/vimplate/example/perl.tt.html\nthe genereated program:\n  http://typedef.ch/vimplate/example/Example.pl.html\nthe genereated program with Log4Perl:\n  http://typedef.ch/vimplate/example/ExampleLog.pl.html\n\nExample:\n  the template letter.tt:\n    ________________________________________________________\n    [%\n       sex=choice('sex: ', 'female', 'male')\n       name=input('name: ')\n       location=input('your location: ')\n    -%]\n                       [% ucfirst(location) %], [% date('C', '%b %d, %Y') %]\n\n    Dear [% IF sex=='female'; 'Ms'; ELSE; 'Mr'; END %] [% ucfirst(name) %]\n\n    ...\n\n    Sincerely\n\n    [% user.firstname %] [% user.lastname %]\n    ________________________________________________________\n\n  run vim:\n    :Vimplate letter\n    sex:\n      0) female\n      1) male\n    0\n    name: Meier\n    your location: Olten\n\n  your input was:\n    :Vimplate letter<CR>0<CR>Meier<CR>Olten<CR>\n\n  this will produce this letter:\n    ________________________________________________________\n                                      Olten, Jul 11, 2005\n\n    Dear Ms Meier\n\n    ...\n\n    Sincerely\n\n    Urs Stotz\n    ________________________________________________________\n\nExample:\n  the template hpp-default.tt:\n    ________________________________________________________\n    [% classname=input('Class name: ')\n       doxygen=choice('with Doxygen comments: ', 'no', 'yes')\n    -%]\n    #ifndef [% uc(classname) %]_HPP\n    #define [% uc(classname) %]_HPP\n\n    [% IF doxygen=='yes' -%]\n    /**\n     * @brief [% classname %] ... short description ...\n     * @author [% user.firstname %] [% user.lastname %] <[% user.mail %]>\n     * @date [% date('%Y-%m-%d') %]\n     * ... description ...\n     */\n\n    [% END -%]\n    class [% classname %]\n    {\n      public:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Default constructor\n         */\n    [% END -%]\n        [% classname %]();\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n    [% END -%]\n        [% classname %](const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n    [% END -%]\n        [% classname %]& operator=(const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Destructor\n         */\n    [% END -%]\n        virtual ~[% classname %]();\n\n      private:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n    [% END -%]\n        void init();\n    [% IF doxygen=='yes' -%]\n\n    /**\n     * Method to copy each member (deep copy)\n     * @param other reference on object to copy\n     */\n    [% END -%]\n        void init(const [% classname %]& other);\n    };\n\n    #endif /* #ifndef [% uc(classname) %]_HPP */\n    ________________________________________________________\n\n  run vim:\n    :Vimplate hpp-default\n    Class name: Parent\n    with Doxygen comments:\n      0) no\n      1) yes\n    1\n\n  your input was:\n    :Vimplate hpp-default<CR>Parent<CR>1<CR>\n\n  this will produce this c++ include file:\n    ________________________________________________________\n    #ifndef PARENT_HPP\n    #define PARENT_HPP\n\n    /**\n     * @brief Parent ... short description ...\n     * @author Urs Stotz <stotz@gmx.ch>\n     * @date 2005-07-18\n     * ... description ...\n     */\n\n    class Parent\n    {\n      public:\n\n        /**\n         * Default constructor\n         */\n        Parent();\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n        Parent(const Parent& other);\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n        Parent& operator=(const Parent& other);\n\n        /**\n         * Destructor\n         */\n        virtual ~Parent();\n\n      private:\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n        void init();\n\n        /**\n         * Method to copy each member (deep copy)\n         * @param other reference on object to copy\n         */\n        void init(const Parent& other);\n    };\n\n    #endif /* #ifndef PARENT_HPP */\n    ________________________________________________________\n\n\n5. Documentation                                    *vimplate-documentation*\n\nDocumentation:\n  - http://typedef.ch/vimplate\n  - http://www.template-toolkit.org/docs.html\n  - http://perldoc.perl.org/perl.html\n\nTodo:\n  - better exception handling\n  - write more templates\n\nLicense:\n  This program is free software; you can redistribute it and/or modify it\n  under the terms of the GNU General Public License, version 2, as published\n  by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n  for more details.\n\n  A copy of the GNU GPL is available as /usr/share/common-licenses/GPL-2\n  on Debian systems, or on the World Wide Web at\n  http://www.gnu.org/copyleft/gpl.html\n  You can also obtain it by writing to the Free Software Foundation, Inc.,\n  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA\n\nCopyright:\n  Copyright (c) 2005, Urs Stotz <stotz@gmx.ch>\n\nVersion:\n  vimplate 0.2.3"}, {:name=>"vimplate-B", :summary=>"Template-Toolkit support for Vim", :description=>"Please use this page: http://www.vim.org/scripts/script.php?script_id=1311"}, {:name=>"bwftmenu.vim", :summary=>"help you make a menu only for buffers with a certain filetype", :description=>"Description:\n  You can use This script to help you make a menu which only appears when  you are editing buffers with a certain filetype. You can use this script  to make menus in your ftplugin scripts.\n\n  The menu is automatically made once you enter a buffer whose  filetype is specified. And if you switch to another buffer with a  different filetype, the revious menu is automatically deleted.\n\nUsage:\n  In your ftplugin scripts, follow these steps:\n  1. write a function which creates a menu. The function should not\n     start with s: or <SID>.\n  2. call BW_RegisterFTMenu function which is the only function provided by this script\n  That's all.\n\n  Here is an example. I want to create a menu only for python files,  so I create a function in my ftplugin/python.vim:\n\n  function MakeFTMenu_python\n    amenu 8000.11 Python.check :echo 'check python script'\n    amenu 8000.12 Python.run :echo 'run python script'\n  endfunction\n\n  and then, add this statement to the same .vim file:\n\n  call BW_RegisterFTMenu('python','Python','MakeFTMenu_python')\n\n  Note: the second parameter MUST be the same with the name of the menu\n        which you created in MakeFTMenu_python function.\n"}, {:name=>"asmM6502.vim", :summary=>"MOS 6502 Assembly syntax", :description=>"Syntax for the 6502, included &#039Sally&#039 (Atari8) ops"}, {:name=>"udvm.vim", :summary=>"highlights files containing assembly for UDVM", :description=>"Universal Decompresor Virtual Machine is defined in RFC3320 (SigComp). \nIt has an assembly language whose definition can be found in the draft draft-ietf-rohc-sigcomp-user-guide-01.\n\n"}, {:name=>"bwHomeEndAdv.vim", :summary=>"This script enhances the <Home> and <End> in both normal mode and insert mode", :description=>"Description:\n  This script enhances the <Home> and <End> key in both normal mode and\n  insert mode. \n\n  <Home> is enhanced to behave like in Visual C++, you can use <Home> to\n  jump between the first column and the first non-space character of a\n  line.\n\n  Besides, <End> is also enhanced and can be used to jump between the last\n  column and the last non-space character of a line."}, {:name=>"bwUtility.vim", :summary=>"This script provides some trivial functionalities", :description=>"  This script provides following trivial functionalities you can used\nin your own scripts:\n  - open a console in the current working directory.\n  - remove trailing spaces.\n  - insert date. This is only available via menu entry.\n\n  Once the script is installed, it automatically add a menu named\n'bwUtility' via which you can access all functins of this script."}, {:name=>"snippetsEmu", :summary=>"An attempt to emulate TextMate's snippet expansion", :description=>"***** IMPORTANT *****\nThe plugin has now been split into two separate vimballs. The plugin itself and the bundles. This was done because bundles were updated a lot more often than the plugin itself.\n\nPrevious users of the plugin should delete the old file when upgrading to 1.0. The name of the file changed in 0.6 and so you'll end up with two versions when unpacking the file. Remove the old version \"snippetEmu.vim\" from the plugin directory. The new version is called \"snippetsEmu.vim\". Note the extra 's'\n\n\nHomepage: http://slipperysnippets.blogspot.com/\nIssue tracker: http://code.google.com/p/snippetsemu/issues/list\n\nPlease email me bugs or create them in the issue tracker.\n\nThis file contains some simple functions that attempt to emulate some of the behaviour of 'Snippets' from the OS X editor TextMate, in particular the variable bouncing and replacement behaviour.\n\nDIVING IN:\n\nInstall the plugin, start a new perl file (as an example) and type the following in insert mode:\n\nfor<tab><tab><tab><tab>\n\nYou'll see the text expand and the jumping in action. Try the same again but this time type a new value for 'var' once it is selected. I.e.\n\nfor<tab>test<tab><tab><tab>\n\nNotice how all the 'var's are replaced with 'test'.\n\nCheck out the bundles and the docs for more examples of what can be done.\n\n*IMPORTANT*\n\nIf you have any questions, suggestions, problems or criticisms about the plugin then please, please email me and I will do the best to help."}, {:name=>"perlprove.vim", :summary=>"Perl unittest compiler. Parses Test::Harness' `prove` output.", :description=>"Runs the Test::Harness 'prove' utility and formats the errors. It is implemented as a compiler, so it's invoked with :make and the usual error navigation commands work.\n\nUsage:\n:make  - runs prove for the testfile you are in. Failed tests and perl errors are recognized by vim and it jumps to the first error (failed test or perl syntax error). Use :cn and :cp to go to the next resp. previous error. :cl gives a list of all the errors and :cc <number> jumps to a specific error message. See the 'quickfix' part in the vim manual.\n:make <arguments>  - runs prove with the argument you give. It does not add the filename of the current test. Useful to run all your test, eq: ':make *t', or ':make t'\n"}, {:name=>"Dynamic-Keyword-Highlighting", :summary=>"Color-highlighted multi-search trail", :description=>"When inspecting text, often highlighting the current search keyword isn't enough. \nThis script allows you to highlight keywords and search patterns in different colors.\nThere are a few ways to use this functionality.\n\n1) visual mode keyword selection\nUse visual mode to select text and press <CTRL>h\nThe next available color will be used to highlight the keyword.\n<CTRL>h without a visual mode highlight releases the last highlight.\n\n2) search pattern selection\nPerform a regular \"/\" search, and the press <CTRL>j\nThe next available color will be used to highlight matches.\n<CTRL>h without a visual mode highlight releases the last highlight.\n\n3) search pattern backtracking\nThe last highlighted word is set as the current search pattern.\nThis allows you to backtrack searches easily. For example,\n- search \"keyword\" \n/keyword\n- remember search \n<CTRL>j\n- search \"pattern\"\n/pattern\n- remember search\n<CTRL>j\n- At this point, repeating search with just \"/\" will search \"pattern\".\n   Use <CTRL>h without any visual highlight to backtrack.\n  Repeating search with just \"/\" will now search \"keyword\".\n"}, {:name=>"CSVTK", :summary=>"Tool kit to work with Comma Separated Values files", :description=>"CSVTK Provides functions and mappings to help working with CSV files or\nany files where a separator (e.g. a comma) is used between values and\nwhere values can be enclosed between delimiters (e.g. double quotes).\nSeparators characters inside delimiters are not considered as separators.\n\nField numberting starts at 1.\n\nMappings allow user to:\n  * Jump to a specific field,\n  * Display the field number of the field under the cursor,\n  * Return the value of field (given the field number) on current line or\n  specified line,\n  * Toggle highlighting for each field (in one or several colors).\n\nThe highlight will show in the current line and be updated when user \nchanges line (the highlight is updated thanks to an autocomand on the \nCursorHold event, therefore it is not updated when in insert mode). The \nseparator following the field is highlighted as part of the field.\n\nAlso, a few examples are provided to show how to display the current field\nnumber in the status line (so you always know what field you're in) and\nhow to fold lines depending on field content."}, {:name=>"ps2vsm", :summary=>"PlayStation2 Vector Unit Assembly syntax", :description=>"This is just a simple PlayStation2 Vector Unit Assembly highlight file for (g)VIM. Unfortuantly it only supports gvim at the moment, since it defines some of its own colours. You are, of course, welcome to modify the file to support normal vim!\nIt uses different colours for High and Low instructions, seperates Integer, Floating Point and Special registers by colour, and also highlights destination, broadcast and bit setting extenstions.\n\nI'm sure it has many bugs, but it works pretty well here, and helps out alot.\n\nCouple of screenshots for those who don't have a vsm file handy:\nhttp://www.jbit.net/~jbit/ps2vsm-dark.png\nhttp://www.jbit.net/~jbit/ps2vsm-light.png\n\nHope this helps somebody!"}, {:name=>"advantage", :summary=>"Dark theme for us sensitive coders", :description=>"This theme is a modified version of the bluesky color scheme. I liked most of the colors in this theme, however they were a little too bright so I toned it down a little and came up with this darkened version of it."}, {:name=>"The-Stars-Color-Scheme", :summary=>"A dark scheme", :description=>"A dark, but colorful, color scheme."}, {:name=>"bufferlist.vim", :summary=>"simple, fast, and slick non-disturbing buffer list", :description=>"This script offers a nice buffer list that does not get in your way. Just hit a key to open it, it will \"slide\" in from the left, select the buffer you want to go to, and *swoosh* the list is gone again.\n\nSee http://devel.burningsoda.com/vim/bufferlist_ani.gif for a short demo."}, {:name=>"Impact", :summary=>"Nice dark colorscheme for term/cterm only", :description=>"This is my personal colorscheme designed for long nights with a fullscreen terminal (e.g the one from xfce-extras).\nIt is designed for in-term vim usage only and has no gui definitions in it.\n\nHappy viming!!"}, {:name=>"Windows-PowerShell-Syntax-File", :summary=>"Default syntax coloring for Windows PowerShell", :description=>"Provides syntax support for Windows PowerShell (formerly known as MSH/Monad) scripts. Best used with the Windows PowerShell Indent file and Filetype Plugin file (vimscript #1815 and vimscript #1816)."}, {:name=>"xslt", :summary=>"XSLT ftplugin", :description=>"The Xslt plugin is the best vim plugin available to edit xsl files. I say its  \nthe best because I could not find any other script and had to make one!\n\nOnce the Xslt plugin is installed, simply press the <F2> key in Insert\nmode after the proper keywords and xsl text will be generated.\n\nYou also need to have xmledit plugin installed."}, {:name=>"verilogams.vim", :summary=>"Highlighting scheme for Verilog-AMS", :description=>"We're in 6.4 now, but unfortunately, Bram used the 1.0 version I sent him initially. I'll let him know that he can grab the latest version here for the 7.0 release.\n\nSo for the best highlighting experience, you should keep your own copy of 1.2 installed."}, {:name=>"XHTML-1.0-strict-help-file", :summary=>"Help file for XHTML 1.0 Strict", :description=>"Help file for XHTML 1.0 Strict\n\nYou will find there \n- description of tag, \n- tags allowed inside of given tag, \n- list of attributes,\n- description of attributes,\n- WAI guidelines for each tag"}, {:name=>"sudoku", :summary=>"Sudoku solving helper", :description=>"Easy key bindings for entering Sudoku riddles.\nCreation of fileds, filling in digits and a basic check\nfor correctness."}, {:name=>"tidy", :summary=>"Color scheme 'tidy' based on PerlTidy's colors.", :description=>"\" Vim color file tidy.vim based on PerlTidy syntax, http://perltidy.sourceforge.net/ written by Steve Hancock <perltidy@users.sourceforge.net>. It's on light background and very pleasant look.\n\nTwo jpegs with a sources from http://www.cs.cmu.edu/~maverick/VimColorSchemeTest/ :\nhttp://haze.ehost.pl/pub/perl-test.jpg\nhttp://haze.ehost.pl/pub/c-test.jpg\n"}, {:name=>"Pleasant-colorscheme", :summary=>"A bright and pleasant colorscheme for heavy programming", :description=>"This is a bright and pleasant colorscheme for heavy programming for the gui version.\nI use it all the time for PERL !"}, {:name=>"VST", :summary=>"Vim reStructured Text", :description=>"Requires Vim7.\n\nVST is script which makes possible to export text files with simple markup to HTML or LaTeX format or S5 HTML presentation. Script doesn't require any external dependency and will work on any platform Vim7 is available. VST is implementation of reStructuredText.\n\nSupported elements of inline markup:\n\n- emphasised text (italic)\n- strongly emphasised text (bold)\n- hyperlinks (in various syntax forms)\n- custom decorations (among them: sub, sup, big, small)\n\nElements of documents structure:\n\n- paragraphs\n- block quotes\n- ordered lists\n- unordered lists\n- option lists\n- footnotes\n- citations\n- images\n- preformatted text\n- colorized preformatted text (HTML export only)\n- tables\n- admonitions\n- table of contents\n\nAlso bunch of auxiliary commands which should ease writing of document and navigating (folding, text table of contents, lists or declared links, replacements)\n\nLatest version of script:\nhttp://skawina.eu.org/mikolaj/vst.zip\n\nHelp file in text form:\nhttp://skawina.eu.org/mikolaj/vst.txt\n\nFollowing versions of help file was produced without any modifications to HTML or LaTeX source:\n\nHTML:\nhttp://skawina.eu.org/mikolaj/vst.html\n\nLaTeX file exported from vst.txt:\nhttp://skawina.eu.org/mikolaj/vst.tex\n\nPDF file produced from vst.tex:\nhttp://skawina.eu.org/mikolaj/vst.pdf\n"}, {:name=>"A-soft-mellow-color-scheme", :summary=>"A soft mellow colorscheme", :description=>"A soft mellow colorscheme especially suited for bright light condition."}, {:name=>"Professional-colorscheme-for-Vim", :summary=>"At last, a professional colorscheme for Vim...", :description=>"At last, a professional colorscheme for Vim...released by popular demand !\n\n*Highlights*\n\n* Uses light background for easy editing on bright light conditions\n* Status bar and line numbers uses dark background\n* No two highlighting terms have same colors making it easy to distinguish what you are looking at\n\nSpecially suited if you spend most of your day editing and writing code\n\nCurrently supports only GUI version. If there is enough demand, I will release a cterm version."}, {:name=>"pluginfonts.vim", :summary=>"Multi OS Font Plugin", :description=>"This plug-in set's the font used depending on the operating system / windowing system used. It also contains a smaller and larger font to zoom in and out. It is very helpful if you use GVim with more then one OS, display resolutions etc. pp.\n\nYou can easily expand the plugin for more OS's or fonts.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\nFor Support see: http://code.google.com/p/vim-scripts/wiki/MultiOSFontPlugin\n"}, {:name=>"TabBar", :summary=>"Plugin to add tab bar ( derived from miniBufExplorer).", :description=>"The plugin is derived from miniBufExplorer.\nOnly the modifiable buffer are displayed, and counted.\nKey-bindings for buffer switching: <Alt-bufNumber>\nColored the tabs with the same color as StatusLineNC to create the impression\nof tabs.\n\nTabBar in winxp cmd:\nhttp://photos1.blogger.com/blogger/4648/1229/1600/winxp_cmd.jpg\n\nand gvim on winxp\nhttp://photos1.blogger.com/blogger/4648/1229/1600/winxp.jpg\n\n\nand gvim on linux+ion3\nhttp://photos1.blogger.com/blogger/4648/1229/1600/screen.1.jpg"}, {:name=>"Autoproject", :summary=>"Use Makefile.am for project management", :description=>"This is another project management for vim. \nIt scans all Makefile.am files recursively for SUBDIRS, _HEADERS and _SOURCES entries and displays all found files and directories in a window left of the codewindow. \nIf you select a file, it is opened. "}, {:name=>"last_change", :summary=>"automatically set time-stamp on modification", :description=>"this (very) lightweight script automatically updates the time-stamp on a file when you :write it out.\nthe time-stamp is of the form:\n     Last Change:  Wed Aug 31 10:00 AM 2005 EDT\n\nThe script is similar to the example given in :help autocmd, the difference being that the time-stamp already there is checked. If it is identical to the one being added, then nothing is done. Since the time-stamp is truncated to the last hour, this ensures that the undo buffer is changed only for :write's every hour.\n\nSet g:timeStampLeader in your ~/.vimrc to change 'Last Change: '\n(to 'Last modified: ' for instance)\n\nUse :NOMOD to force the time-stamp to be not updated.\nUse :MOD to change it back.\n\nPS: The update only works if the string 'Last Change: ' is found somewhere\nin the first 20 lines of the file. Only the first found occurence is processed. \n\nThis is a modified version of lastchange.vim script by Srinath Avadhanula.  This version fixes a bug where if the system was not win32, the time-zone would get truncated from PST to P, or EDT to E, etc."}, {:name=>"last_change-B", :summary=>"automatically set time-stamp on modification", :description=>"this (very) lightweight script automatically updates the time-stamp on a file when you :write it out.\nthe time-stamp is of the form:\n     Last Change:  Wed Aug 31 10:00 AM 2005 EDT\n\nThe script is similar to the example given in :help autocmd, the difference being that the time-stamp already there is checked. If it is identical to the one being added, then nothing is done. Since the time-stamp is truncated to the last hour, this ensures that the undo buffer is changed only for :write's every hour.\n\nSet g:timeStampLeader in your ~/.vimrc to change 'Last Change: '\n(to 'Last modified: ' for instance)\n\nUse :NOMOD to force the time-stamp to be not updated.\nUse :MOD to change it back.\n\nPS: The update only works if the string 'Last Change: ' is found somewhere\nin the first 20 lines of the file. Only the first found occurence is processed. \n\nThis is a modified version of lastchange.vim script by Srinath Avadhanula.  This version fixes a bug where if the system was not win32, the time-zone would get truncated from PST to P, or EDT to E, etc."}, {:name=>"AutoTag", :summary=>"Updates entries in a tags file automatically when saving", :description=>"If you use ctags to make tags files of your source, it's nice to be able to re-run ctags on a source file when you save it.\n\nHowever, using ctags -a will only change existing entries in a tags file or add new ones. It doesn't delete entries that no longer exist. Should you delete an entity from your source file that's represented by an entry in a tags file, that entry will remain after calling ctags -a.\n\nThis python function will do two things:\n\n1) It will search for a tags file starting in the directory where your source file resides and moving up a directory at a time until it either finds one or runs out of directories to try.\n\n2) Should it find a tags file, it will then delete all entries in said tags file referencing the source file you've just saved and then execute ctags -a on that source file using the relative path to the source file from the tags file.\n\nThis way, every time you save a file, your tags file will be seamlessly updated."}, {:name=>"switchtags.vim", :summary=>"Switch tags option automatically between different projects", :description=>"When edit files that belong to different projects with different tags option \nsettings at the same time, it's annoying to switch tags option manually.\nThis plugin can switch tags option automatically according to the buffer's\nfile full name."}, {:name=>"dmd", :summary=>"DigitalMars D language file type plugin(syntax, fold, compiler,include search)", :description=>"It's a quite poor ftplugin,but it work.\n\nI permiss I will make a d language ftplugin as good as C/C++ have.\nHowever, This is first step.\n\nfeathers:\n   syntax highlight, it's official version.\n   syntax fold, quick and dirty way.\n   include search, set environment veriable DMD to dmd home, vim can search\nall module under $DMD/import for symbol under cursor.(normal [i, [I ). gf key-sequeue open the module under cursor, too\n   ctags support, there is a modified ctags support C/C++/D language.\n\ntodo:\n   make comment works well.\n   redesign syntax fold.\n   "}, {:name=>"VIM-Email-Client", :summary=>"Independent Email Client for Vim", :description=>"This email client contains two python scripts: fetch.py and send.py that handle the send&receive process, and a vim script called \"email.vim\" that handles the vim binding.\n\nsee http://www.ee.bgu.ac.il/~elentok/os/vim-mail/ for a tutorial and installation instructions.\n\n"}, {:name=>"cxxcomplete", :summary=>"Tries to implement code completion.", :description=>"First, you'll need ruby support compiled in vim, and ruby bindings for gtk( ruby-gnome).\n\nWhat it can do?\nScans your tags file, and pops up a list of possible completions.\nThe completions refers to your variables, and member functions/variables.\nhttp://photos1.blogger.com/blogger/4648/1229/1600/screen11.jpg\n\nThe script that scans the tags file is based on cppcomplete.\n"}, {:name=>"The-Vim-Gardener", :summary=>"Dark and colorful forrest khaki theme works with 256 color xterms", :description=>"  'For code surgeons and web gardeners everywhere'\n\nA nice earthy  color scheme which is easy on  the eyes. It\nhas  as it's  base a  dark background  monocrhomatic khaki\nscheme with dabs of color thrown  in here and there on the\nkeywords. It's gives you the feeling of looking at the sun through \nthe afternoon spring leaves, but all at night time :)\n\nPlus  lots of  extra config  options so  you can\ntweak  it to  your liking  and or  make it  more like  the\noriginal Guardian scheme. All the defaults are what I like\nbut if you want to change stuff just set the right var and\nit will change pretty much  immediately, you might have to\nmove out of and back into your buffer for it to refresh.\n\n\nNew Features:\n  256 Color XTerm Compatibility\n  Richer Syntax\n  Black Background\n  Functions\n  No Italics\n  Purple Booleans\n  Swapped Status Line Colors\n  Green like a garden\n  Other minor tweaks\n\nScreenshot:\n  http://entheon.com/vim-gardener.gif\n"}, {:name=>"Colortest", :summary=>"xterm 256 color test and visual colors list", :description=>"spits out a list of all the colors IN COLOR, \n\nalso therefor functions as a test to find out whether your xterm was compiled with 256 color support to use the nice colorschemes. i have no idea what will happen to your terminal if you don't have 256 color support, but I'd imagine you'll just get a bunch of funny chars and that's about it...\n\nvery handy for writing terminal colorschemes for vim - gives you the cterm color number and the rgb values... makes it very easy and fast to port \"gui only\" colorschemes to the 256 color terminal\n\ndoesn't work with rxvt and I don't know about other terms because it uses xterm color escapes... it doesn't have the color names... it just displays each one with the color that it actually is, so you just look at it to know what color it is. if you've changed your xresources in your xdefaults file to modify the xterm colors then the RGB values won't hold true, but the actual colors and their corresponding cterm numbers will still produce whatever your xterm is set to...\n\nsupports a couple of display options... if you've got a fairly normally large/decent size screen you'll probably want to run it with the switches:\n\ncolortest -w -s\n\nNO WARRANTY! or ANYTHING is implied... if this breaks your computer it's not my fault... you might wanna read the code first, it's not doing anything complicated though and it works for me\n\nI probably will never update or support this in the future so whoever wants it can have it... i hereby grant a full \"anything goes at any time in any way with this file\" 100% free liscense to anyone who wants to mess around with the file"}, {:name=>"Mud", :summary=>"Dark brown colorscheme with beutiful highlighing", :description=>"This is a night mode colorscheme for GUI version.\nDark brown colorscheme with beutiful highlighing and easy to distinguish colors for different highlight groups. Very easy on the eyes and especially suited if you are the sort who burn midnight oil. suited for low light conditions !"}, {:name=>"Mud-B", :summary=>"Dark brown colorscheme with beutiful highlighing", :description=>"This is a night mode colorscheme for GUI version.\nDark brown colorscheme with beutiful highlighing and easy to distinguish colors for different highlight groups. Very easy on the eyes and especially suited if you are the sort who burn midnight oil. suited for low light conditions !"}, {:name=>"Modelines-Bundle", :summary=>"Insert Modelines from current settings", :description=>"Inserts two modelines with the currently active filetype and tabulator settings.\n\nCan be used for:\n\n - a quick overview of the file settings (like is the file dos or unix format). \n - to set the file setting (just change the settings which are wrong).\n - to make shure the file settings stay put when the file is saved and loaded.\n\nCan be easily exdended for more settings - just as you want it.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\nFor Support see: http://code.google.com/p/vim-scripts/wiki/ModelinesBundle"}, {:name=>"syntaxada.vim", :summary=>"Syntax Plugin for Ada (inactive, replaced by vimscript#1609)", :description=>"This plugin is superseded by vimscript#1609.\n\nImproved Version of David A. Wheeler Ada Syntax Plugin. This Version has hightlight for attributes, knows about folding and makes better use of colors.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\nThere is also a Wiki site (http://ada.krischik.com/index.php/VIM/AdaMode) which describes the plugin in further detail."}, {:name=>"Night-Vision-Colorscheme", :summary=>"Programming through night vision googles :)", :description=>"A night vision color scheme - dark green background (GUI only)\n\n\n"}, {:name=>"PDV--phpDocumentor-for-Vim", :summary=>"Provides really comfortable generation of phpDocumentor doc blocks for PHP4 & 5.", :description=>"PDV (phpDocumentor for Vim)\n========================\n\nVersion: 1.0.0\n\nCopyright 2005 by Tobias Schlitt <toby@php.net>\nInspired by phpDoc script for Vim by Vidyut Luther (http://www.phpcult.com/).\n\nProvided under the GPL (http://www.gnu.org/copyleft/gpl.html).\n\nThis script provides functions to generate phpDocumentor conform\ndocumentation blocks for your PHP code. The script currently\ndocuments:\n\n- Classes\n- Methods/Functions\n- Attributes\n\nAll of those supporting all PHP 4 and 5 syntax elements.\n\nBeside that it allows you to define default values for phpDocumentor tags\nlike @version (I use $id$ here), @author, @license and so on.\n\nFor function/method parameters and attributes, the script tries to guess the\ntype as good as possible from PHP5 type hints or default values (array, bool,\nint, string...).\n\nYou can use this script by mapping the function PhpDoc() to any\nkey combination. Hit this on the line where the element to document\nresides and the doc block will be created directly above that line.\n\nChangelog\n=========\n\nVersion 1.0.0\n-------------------\n\n* Created the initial version of this script while playing around with VIM\n   scripting the first time and trying to fix Vidyut's solution, which\n   resulted in a complete rewrite."}, {:name=>"eraseSubword", :summary=>"Erase one subword from a camel case word or from a _ delimited word", :description=>"Makes <C-H> in insert mode delete one subword from a camel case word or one _ delimited subword before the cursor.\n\nFor example, the following word is typed in an editor:\n\none_twoThree\n\nFirst <C-H> will delete \"Three\", second - \"two\" and the third will completely erase the word.\n\nDefault mapping could be changed by setting g:EraseSubword_insertMap to the desired key.  Setting s:EraseSubword_insertMap to an empty string would remove default mapping at all.  Mapping could be changed later (for example in file type plugin or in some auto commands) using EraseSubword_setInsertMap function that takes one argument - new value for the g:EraseSubword_insertMap.  Empty value would disable plugin and any other value would add new mapping (old mapping would be removed).\n\nThere is also a possibility to use buffer local mapping.  Than you probably want to set g:EraseSubword_insertMap to an empty string (so that there would be no global mapping) and then use EraseSubword_setlocalInsertMap in FileType auto command or BufNew, BufCreate and a like to set buffer local mapping.  EraseSubword_setlocalInsertMap uses same syntax as EraseSubword_insertMap - one argument that is a desired mapping or empty string to remove existing mapping."}, {:name=>"larlet.vim", :summary=>"Type large letters in Insert mode", :description=>"Larlet.vim provides an enhanced Insert mode: It allows you to type larger symbols, i.e. symbols composed of several characters.  This is rather fun than a utility.\n\nIf you're looking for a real utility, you might better use Unix' banner or surf to http://www.figlet.org/\n\nTo toggle Larlet mode press F8 in Insert mode or Normal mode.  This maps one key per symbol.  Currently, the following keys are mapped:\n\n    abcdefghijklmnopqrstuvwxyz.,;!?=+-*:'`#()[]{}^~%$&0123456789/\\\"_@<>|EL\n\nCase is not distinguished, only lower letter keys get mapped.  The upper keys are free to map special symbols (e.g. E - euro symbol, L - lambda).  The mappings are per buffer, thus there should be no inference with the rest of the session (except the globally set 'listchars' option reminds you to not use hard tabs).\n\nv0.04: An alternative key for toggling can be mapped this way:\n    :nmap <buffer> <F8> <plug>Larlet_ToggleKeymap\n    :imap <buffer> <F8> <c-o><plug>Larlet_ToggleKeymap\n\nEditing possibilities are - of course - limited. Symbols will always be appended at the end of a d-line [1].  i_Space adds d-spaces, i_Enter creates d-newlines.  i_Backspace deletes symbols from the end of a d-line, by looking for a d-space backwards.\n\nSymbol size is fixed to 2 lines x 5 columns.  Symbols are arranged tightly in the text, thus \"type-setting\" is not monospace.\n\n(v0.10 only) A menu \"Larlet\" will be installed for setting some options. [2]\n(v0.04) Letter and word spacing can be changed with :SpaceSet\n\n(v0.10 only)\n'fileformat' of the script is dos, if you're on unix you have to convert it.  Ok, this script is not written in a very clean manner, make sure to use it in an extra vim session.\n\nExample:\n.  /  /|  /¯) /  /¯¯ -/-  | / / /|/)\n. /_ /¯| /¯\\ /_ /_¯  /  o |/ / /  /\n(this looks like crap, you'll need a monospace font for viewing)\n\n----------\n[1] As symbols need two buffer lines of text, some above terms get a \"d\" prepended for \"double\"\n[2] Note: v0.10 is a typo, it should be v0.01\n"}, {:name=>"Cthulhian", :summary=>"dark color scheme based on oceandeep", :description=>"This is a dark color scheme based on the OceanDeep by Tom Regner (so it is required to have OceanDeep too ;), you can get it from here: vimscript #368).\nI slightly modified some colors to my liking.\nI agree with Tom that \"console colors /do/ suck\", so this scheme will look nice (I hope ;)) only in gvim."}, {:name=>"SmartCase", :summary=>"replacing words while keeping original lower/uppercase style", :description=>"An example, you may want to replace any FileSize appears in your program into LastModifiedTime. Since it appears everywhere as both uppercases and lowercases, you have to write it several times:\n\n  :%s/FileSize/LastModifiedTime/g      \" function names\n  :%s/file_size/last_modified_time/g   \" variable names\n  :%s/FILE_SIZE/LAST_MODIFIED_TIME/g   \" macros\n  :%s/File size/Last modified time/g   \" document/comments\n  ......\n\nThis script copes with the case style for you so that you need write just one command:\n\n  :%s/file\\A\\?size/\\=SmartCase(\"LastModifiedTime\")/ig\n\nAn alternative way:\n  first search for the string:  /\\cfile\\A\\?size\n  then run a command:  :%SmartCase \"LastModifiedTime\"\n\nBy the way, SmartCase can also cope with the circumstance where you want to replace the string's case style while keeping its words. For example:\n  FileSize => file_size\n  LastModifiedTime => last_modified_time\n  ......\nThis can be done with the following command:\n\n  :%s/\\(\\u\\l\\+\\)\\{2,}/\\=SmartCase(0,\"reference_style\")/g\n\nTo sum up: the first argument to SmartCase is the reference words, the secend argument is the reference styles, if the second argument omitted, it's submatch(0)."}, {:name=>"HP-41-syntax-file", :summary=>"Syntax highlighting for HP-41 calculator programs", :description=>"The HP-41 syntax highlighting goes well with the HP-41 file type plugin to facilitate easy writing of HP-41 programs in VIM.\n\nThere is a matching file type plugin here:\nhttp://vim.sourceforge.net/scripts/edit_script.php?script_id=1361"}, {:name=>"HP-41-file-type-plugin", :summary=>"Makes it easier to write HP-41 calculator programs in VIM", :description=>"This ftplugin has the following features:\n\nAuto-line-numbering: Upon pressing <CR> after a line, the next line has the correct line number. It even renumbers the whole file automatically. So, if you add new lines in the middle of a program, it renumbers the whole file. If you delete a line, just press <M-+> to renumber the file (either in Normal or Insert mode)\n\nAlso, shortcuts to usual commands:\n<M-L> LBL\n<M-l> LBL'    (note: lower case L)\n<M-G> GTO\n<M-T> RTN\n<M-O> STOP\n<M-I> ISG\n<M-D> DSE\n<M-R> RCL\n<M-S> STO\n<M-X> XEQ\n<M-E> ENTER\n<M-Y> X<>Y\n<M-P> PROMPT\n<M-V> VIEW\n<M-A> AVIEW\n<M-C> CLX\n<M-W> Strips the file so that it is ready to be converted to a .RAW file \n\nThere is a matching syntax file here:\nhttp://vim.sourceforge.net/scripts/script.php?script_id=1360"}, {:name=>"Last-Modified", :summary=>"Changes the Last modified date of a file", :description=>"It changes the Last modified date automatically without changing the format of the time you use\nHere i added some extra features ----\n   1> It checks the time format in the file you are working on and the format given in the plugin. If both are same, it changes the time, other wise it shows you a warning.\n   2> It does not change any other thing in the file.\n\n"}, {:name=>"cloudy", :summary=>"A deep blue cloudy color scheme", :description=>"Perfect for a rainy day !"}, {:name=>"xslhelper.vim", :summary=>"Help for writing XSLT stylesheets", :description=>"Very basic helper abbreviations for writing xslt stylesheets. Like vivek Venugopalan's dbhelper.vim, uses the format \",<abbrev>\", as in:\n,tm ==> <xsl:template match=\"\"></xsl:template>\n,at ==> <xsl:apply-templates/>\n\nIt helps me a ton, hope it helps you too. Please send feedback to andrews AT oreilly.com.\n\nCheers."}, {:name=>"adobe.vim", :summary=>"Adobe theme, easy on eyes. Coloring philosophy inside.", :description=>"Great for many programming languages, especially Python.  Also cursory testing of bash, perl, html, vim, java, c++, moin, and mutt. Includes console coloring to match GUI colors (for tested cases, please let me know of ones I missed).\n\nMore details in my blog article: http://micahelliott.com/2008/12/editor-color-scheme-philosophy"}, {:name=>"Peppers", :summary=>"The ultimate dark color scheme...", :description=>"The ultimate dark color scheme...well, atleast a pretty good one.\nEasy on the eyes and suited for most programming languages."}, {:name=>"syntaxconkyrc.vim", :summary=>"Conky conkyrc syntax highlighting", :description=>"Syntax highlighting for conkyrc files used by the the Conky system monitor (http://conky.sourceforge.net/)."}, {:name=>"bookmarks.vim", :summary=>"Menu driven bookmarks for gvim", :description=>" BOOKMARKS OVERVIEW\n ------------------\n Bookmarks.vim provides an intuitive menu driven interface to facilitate \n bookmarking files and directories in gvim.  \n \n    Bookmark Features:\n       -Configurable \\\"popup\\\" bookmark menu\n       -Bookmarks contain file name and part of text from bookmarked file, making it easier to remember.\n       -The whitespace in bookmarks is compressed, increasing readability.\n       -Can have unlimited number of bookmarks.\n       -Can bookmark place in help files.\n       -Can bookmark local files, remote files, and directories.\n       -Can bookmark blank lines - Line number used.\n       -Can bookmark gvim on-line help docs.\n       -Includes full function bookmark editor -- It&#039s called gvim!\n"}, {:name=>"Zopedav", :summary=>"Handles remote editing with WebDAV, including zope", :description=>"This script allows editing of WebDAV resources and is zope-aware. \nThis plugin does not conflict with netrw and catches the \nwebdav:// and zope:// url schemes.\n\n- Zope scheme\nzope://[username:password@]host[:port]/path/to/document urls are \nGET using a \"/document_src\" suffix and\nPUT using no suffix\n\n- WebDAV scheme\nwebdav://[username:password@]host[:port]/path/to/document urls are \nGET using no suffix and\nPUT using no suffix\n\n- Using SSL\nShall you need to use ssl, add an \"s\" prefix to the protocol, for instance\nszope://securedhost/some/private/document.dtml\nswebdav://securedhost/some/private/document\n\n- Options\nIf you intent on editing every WebDAV resource under the \"/source\"\nurl suffix or/and upload them back under the \"/upload\" suffix, use the\nfollowing options in your .vimrc :\nlet g:webdav_get_suffix = \"/source\"\nlet g:webdav_put_suffix = \"/upload\"\n\nNB: No error handling is performed\nNB: See also vimscript #1075 \n"}, {:name=>"CVSconflict", :summary=>"CVS conflict resolution using vimdiff", :description=>"CVS conflict resolution using vimdiff\n\nWhen one does \"cvs update\", one may get files marked with \"C\" for conflict.  Cvs was unable to automatically merge one's local version of such files with the repository's version, and so merging requires human intervention.  The :CVSconflict command takes the current conflict file, splits it into two separate files, and enables vimdiff-style editing and viewing.\n\nA command,\n\n  :CVSconflict\n\nis provided which transforms the current file containing cvs conflict sections such as\n\n  <<<<<<<\n  ...local version...\n  =======\n  ...repository version...\n  >>>>>>>\n\ninto two side by side versions.  Vim&#039s diff mode is enabled with these two windows, greatly facilitating the production of a merged file.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#CVSCONFLICT)\n"}, {:name=>"TextMarker", :summary=>"GUI to mark same words in a file using mouse and toolbar buttons, fast and easy", :description=>"Place the cursor over the word you want to mark and press the TextMarker button in the toolbar or place the mouse cursor over the word you want to mark and use the right mouse button menue or place the mouse cursor over the word you want to mark and press the middle (wheel) mouse button. Using the middle mouse button will colorize the words in different colors for each mouse click.\n\nIt is also possible to remove the color markers using the same methode.\n\nHere you can see a screenshot:\nhttp://home.arcor.de/andreas.thoelke/Vim/Vim/screenshot.png"}, {:name=>"ldap.vim", :summary=>"Active Directory Email Lookup using Python and LDAP", :description=>"This script is designed to give LDAP access from within VIM using a Python script.  I developed this script to retrieve email addresses from a Microsoft Exchange server using an Active Directory for usernames, but the script should be easily used with any LDAP server.  In my never-ending quest to never again use MS Windows, I use mutt to read mail and vim to write new messages.  This led to the inevitable problem of looking up people's email addresses without opening Outlook, which led me to writing this script.\n\nThe script maps the key ^F for insert mode only.  Typing in a person's username followed by ^F will retrieve their email address from the LDAP server and place the first result found in place of the username searched for.\n\nThe script must be setup with the appropriate server, search base, and (if needed) username/password before use.  See comments within the script for setup details.\n\nNote that this script is not generic, I wrote it to fulfill my need and am providing it here simply so that anyone else who needs a similar capability has an example of how to start."}, {:name=>"asmh8300", :summary=>"Hitachi H8S, H8/300 assemble language syntax", :description=>"My work is writing firmware of H8 mpu now. So I need a better syntax file than old one. I try to improve the official syntax file. My improved one will highlight the keywords more correctly, and highlight the branch command , like \"bhi, blo, ...\" with different color. "}, {:name=>"TailMinusF", :summary=>"Provides near real-time update of a file in the preview window.", :description=>"TailMinusF allows you to view the contents of a file in real time.  When a\nchange in the file is detected, the window displaying the file is updated and\nrepositioned to the last line.\n\nThe update is not exactly real time, but usually updates within a few seconds\nof the file change.  The update interval of the output is determined by the\n|updatetime| parameter, along with continued usage of Vim.  This means that if\nyou are not doing any editing or motion commands, the preview window will not\nbe updated.  See |CursorHold| for more information.\n\nBecause this window becomes the preview window, it will accept all related\ncommands.  For more information, see |preview-window|.\n\nOnce installed, simply use &#039:Tail <filename>&#039 to see the file.\n Use ':pclose' to close this window."}, {:name=>"QFixToggle", :summary=>"Toggle the visibility of the quickfix window", :description=>"QFixToggle allows you to toggle the visibility of the |quickfix| window\neasilly.  The goal is to provide easy access to the error list when\nprogramming or searching for text.\n\nThanks to Hari for the help on the auto-commands."}, {:name=>"fpc.vim", :summary=>"\"Free Pascal Compiler\" compiler plugin.", :description=>"FPC compiler plugin."}, {:name=>"Chars2HTML", :summary=>"Converting special characters to HTML", :description=>"This plugin will convert between characters(ISO-8859-1) and their HTML \\\\\\\"&xxxxxx;\\\\\\\" entity in the current file. Its a rewrite of html_da vim vimscript #1163, this plugin can be used on all filetypes and contains more special characters and their HTML encoding. Nice plugin if you often copy text to use as HTML, with special european characters(ISO-8859-1), embedded in various programming languages."}, {:name=>"cfengine-log-file-highlighting", :summary=>"Syntax highlighting for cfagent/cfengine log files", :description=>"Very early release and very buggy and incomplete, but it does work suitably enough that reading logfiles is no longer so difficult.  Currently highlights schedule changes, editfiles blocks, and when things \"change\" on the system (like when files get copied).  As I learn more about how to write syntax files, this should improve somewhat."}, {:name=>"syntaxuil.vim", :summary=>"Motif/UIL Syntax", :description=>"The original Motif/UIL Syntax file is missing some keywords and hasn't got folding support. This version does!\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts"}, {:name=>"cHeaderFinder", :summary=>"Finds header required by C functions.", :description=>"This script can find the header or list of headers requires by a particular C function. It uses man pages, chapters 2 and 3. If not found there, it uses the tags file in combination with the a.vim plugin.\nAll that without spoiling the jumplist!!!\n\nUnder suggested settings:\n\\f: gets all the headers required by the function under the cursor and puts them in the default register, so you can go to the top of the C source and 'p' them.\n\\a: goes to the header of the function under the cursor. It's usually where it *should* be documented.\n"}, {:name=>"syntaxudev.vim", :summary=>"Syntax highlighting for udev.rules", :description=>"Syntax highlighting for the udev.rules file."}, {:name=>"charon", :summary=>"Dark colorscheme based on peppers !", :description=>"Dark colorscheme based on peppers colrscheme by Iyer !"}, {:name=>"SessionMgr", :summary=>"Simplified session management.", :description=>"SessionMgr allows you to easilly and quickly save and restore multiple sessions within Vim.\n\nBased loosely on the plugin by Andrew Rodionoff:\n        http://www.vim.org/scripts/script.php?script_id=780"}, {:name=>"UniCycle", :summary=>"Unicode character cycler", :description=>"This script cycles through certain Unicode characters while typing. It only\nworks if set encoding=utf-8.\n\nWhen on, the hyphen (-), period (.), apostrophe ('), and quote (\")\ncharacters are mapped to the appropriate functions within this file.\n\nWhen you enter two hyphen characters in a row, the first hyphen character\nwill cycle to an EN DASH character. A third hyphen will turn the EN DASH\ninto an EM DASH. A fourth hyphen will turn your EM DASH back into a\nHYPHEN-MINUS.\n\nEntering three periods in a row will replace all three periods with a\nHORIZONTAL ELLIPSIS character.\n\nEntering an apostrophe will try to determine if the apostrophe should be a\nLEFT SINGLE QUOTATION MARK or RIGHT SINGLE QUOTATION MARK. It does this by\nlooking at the character to the left of the new character. You can cycle\nbetween LEFT SINGLE QUOTATION MARK, APOSTROPHE, and RIGHT SINGLE QUOTATION\nMARK by repeatedly hitting your apostrophe key.\n\nQuote characters are treated in the same manner as apostrophe characters.\nYou get either a LEFT DOUBLE QUOTATION MARK, normal QUOTATION MARK, or RIGHT\nDOUBLE QUOTATION MARK based on the previous character and how many times you\nhit your quote key in a row."}, {:name=>"interfaces", :summary=>"A syntax file for /etc/network/interfaces", :description=>"This syntax file adds syntax hilighting for your /etc/network/interfaces."}, {:name=>"gdbvim", :summary=>"Watch in gvim what you debug in gdb. And more.", :description=>"NOTICE: MICROSOFT WINDOWS IS NOT CURRENTLY SUPPORTED BY THIS SCRIPT YET!\n\nI found a very nice plugin called gdbvim. Now I can debug my C / C++ code in VIM with its help. The original copy of the plugin can be found at: vimscript #84. See this link for more information about this plugin.\n\nUnfortunately, I can only set breakpoints with this plugin, but I can't clear the breakpoints set before. So I modified the plugin and made \"toggle breakpoints\" feature possible. Here is my newly patched code. The new gdbvim.vim requires multvars.vim, which can be found at: vimscript #171.\n\nAny comments or suggestions are welcome."}, {:name=>"build.vim", :summary=>"A compiler plugin for the Windows CE build command.", :description=>"A compiler plugin for the Windows CE build command."}, {:name=>"jay-syntax", :summary=>"Syntax highlighting for jay", :description=>"Syntax highlighting for jay, a parser generator for C# (part of Mono)"}, {:name=>"d.vim-indent", :summary=>"Indent script for the D programming language.", :description=>"Indent script for the D programming language."}, {:name=>"GreedyBackspace.vim", :summary=>"Make backspace eat multiple whitespace characters", :description=>"This script will cause your backspace key to delete all the whitespace characters before the cursor when the cursor is on a whitespace character.\n\nFor example, if you typed \"x       x\" and then hit backspace twice, you'd only have \"x\".  This can be especially useful when auto/smart/c/expression indenting is on.\n\nThis script isn't very useful if you don't put \"set backspace=indent,eol,start\" or at least \"set backsapce=indent,start\" in your vimrc.\n\n\n(Thanks to Tomi Mickelsson for testing and bug reports.)"}, {:name=>"BuildWin", :summary=>"View the output of a build in progress.", :description=>"BuildWin allows you to view the progress of a build within the Vim instance.  When a build is finished, it will automatically load the results into the error list.\n\nsee ':help buildwin'"}, {:name=>"py_jump.vim", :summary=>"Ultimate % command for python!", :description=>"The title says it all - this script enhances a % command in python to make it jump not only between ([{}]) brackets, but also between start and end of the indented block - just like it does for {} in C++ and perl.\n\nThe script also uses some tricks to guess the _beginning_ of the indented block when jumping backwards. Try to use % several times for a deeply nested block to check it out.\n\nEnjoy!"}, {:name=>"motus.vim", :summary=>"Dark color scheme based on the popular torte setup. Good for LCD and consoles", :description=>"This is a modification of the popular grey-on-black color scheme vimscript #111 (torte).\nIt looks great on LCDs and full-screen consoles; I also like it in grey-on-black xterm and KDE Konsole with Linux Colors scheme.\nScreenshot is here:\nhttp://motus.kiev.ua/motus2/Files/motus_vim.png\nEnjoy!"}, {:name=>"fish.vim", :summary=>"color syntax for fish", :description=>"This is a first attempt to offer a color syntax for fish. It is heavily based on the zsh.vim file. I hope it will become as good :)\n\nplease feel free to report any problems at the email indicated inside the file."}, {:name=>"Processing-Syntax", :summary=>"Syntax description for Processing .pde files", :description=>"This is a simple syntax description for Processing .pde files. You can find more information about Processing at http://processing.org."}, {:name=>"range-search.vim", :summary=>"Allows one to perform a search only inside a range", :description=>"The default vim search searches the entire file. This script allows a command called :'a,'eRs mypat (where 'a,'e is any range), that searches in only a specified range of lines within a file."}, {:name=>"xml.vim", :summary=>"helps editing xml (and [x]html, sgml, xslt) files", :description=>"A plugin for editing xml. I used xml.vim (http://www.vim.org/scripts/script.php?script_id=301)\nThe script does retain most of the functionality of the original xml.vim \n - closing tags while you type\n - optional adding attributes\n - and more\n - % matches end or begin tag\nit adds:\n - fold tags, comments and Cdata \n - add start tag\n - add end tags\n - add  tag around a visual blok or a tag,\n - join 2 adjacent same tags\n - delete tag\n - delete tag section\n - change a tag \n - visual mode  (blocks, listitems\nThe documentation will be created once the script is loaded e.g edit a xml file.\nRead the help documentation by typing from within vim  :help xml-plugin\n"}, {:name=>"tagSetting.vim", :summary=>"Dynamically set tags option by scanning directory structure", :description=>"There's two functions provided here.  The first is SetTags() which will scan all of the directories from your current working directory to the root directory for a file called \"jtags\" (who can rename it to just tags if you want).  If it finds a jtags file, it adds it to the tags option. \n\nI use SetTags() when switching back and forth between different projects that have different tags files at their root level.  \n\nThe second function is GenerateTags() which works similar to the above script.  It starts at your current working directory and scans all of the directories above it looking for a file called \"build.xml\" (you can use any file you want).  When it finds this file, it assumes that it is at the top of your directory structure and will run the ctags command to generate a new tags file.  By default it creates a tags file called \"jtags\" at that top level.  I use build.xml to indicate the top level because I generally use Ant and the ant build file is a good way to recognize the top of the project in the directory structure.\n\nThe two functions have been mapped to commands to save typing.  Those commands are:\n\nmap <unique> <Leader>tj <ESC>:call SetTags()<CR>\nmap <unique> <Leader>tg <ESC>:call GenerateTags()<CR>"}, {:name=>"javap.vim", :summary=>"Runs the javap command and displays results in a new buffer", :description=>"This command allows you to run the JDK utility javap to show the methods in a class found in your classpath.  This function assumes that you have your classpath set up and that you have javap in your path.\n\nIt's useful when I want to know a method or constructor signature and don't want to look up the javadocs for it.\n\nTo use it just go to the ex prompt and ...\n\n:Javap fully_qualified_classname\n\nFor example,\n\n:Javap java.lang.String;"}, {:name=>"desertedocean.vim", :summary=>"Tan/blue GUI color scheme modified from Desert, akin to OceanDeep, & Zenburn", :description=>"I changed my username, and uploaded to a new location for this color scheme.\n\nNEW SCRIPT LOCATION:\nhttp://www.vim.org/scripts/script.php?script_id=1404\n\nTry out the new versions there, these are OUTDATED."}, {:name=>"Zen-Color-Scheme", :summary=>"Zen color scheme for Vim", :description=>"Zen is a color scheme for white background terminals with elegant and clean look and feel. This color scheme was developed on Mac OS X but it also looks great on Ubuntu Linux.\n\nNOTE: this color scheme is now for me deprecated, I would recommend to install Satori color scheme http://www.vim.org/scripts/script.php?script_id=1614\n"}, {:name=>"DarkZen-Color-Scheme", :summary=>"DarkZen color scheme for Vim", :description=>"DarkZen is a color scheme for black background terminals with elegant and clean look and feel. This color scheme was developed on Mac OS X but it also looks great on Ubuntu Linux. \n\nNOTE: this color scheme is now for me deprecated, I would recommend to install Satori color scheme http://www.vim.org/scripts/script.php?script_id=1614 "}, {:name=>"gnupg-symmetric.vim", :summary=>"Plugin to transparently work with GPG-symmetric-encrypted (using AES) files.", :description=>"This plugin is designed to automatically decrypt/encrypt GPG files which were encrypted with a passphrase (a.k.a. symmetric encryption using the AES cipher).  It is designed to be secure and robust.  You can replace AES with AES128, AES256 or any other ciphers supported by your gpg."}, {:name=>"desertedocean.vim-B", :summary=>"Tan/blue GUI color scheme modified from Desert, akin to OceanDeep, & Zenburn", :description=>"------------------------Screenshot--------------------------\nhttp://axs221.1l.com/desertedocean.gif (Updated)\n------------------------------------------------------------------\n\nAlso try out the dull, low contrast version: http://www.vim.org/scripts/script.php?script_id=1407\n\nThis color scheme has a dark greyish blue background and a blue number line and folding column, and has shades of tan (from orange to wheat) for highlighting syntax. This scheme is made for a GUI; terminal colors are still set to the defaults set by the Desert color scheme. I made this scheme using Desert as a starting point and looked to make it have similar qualities with OceanDeep and Zenburn as well. The final result uses mostly a sandy foreground with a fairly high contrast with the greyish blue background.\n\nFeedback is appreciated! I will respond to any questions.\nEmail comments or suggestions to axs221@gmail.com.\nVisit my homepage at http://axs221.1l.com.\n"}, {:name=>"understated", :summary=>"cterm and gui defs, for sensitive eyes", :description=>"This is a dark-background colorscheme with enough definition to easily make out all text, but without any colors that are super-bright.  Need a graphical terminal (cterm) or gui."}, {:name=>"impactG", :summary=>"Modification of the original impact colorscheme", :description=>"This was done by Adam Blinkinsop and is a modification of my impact colorscheme.\nThis version now contains support for GVim.\n\nThank's Adam!"}, {:name=>"DesertedOceanBurnt", :summary=>"A dull, low saturation version of desertedocean", :description=>"This is a low saturation/dull version of my desertedocean color scheme. I wanted a separate version in the same style as Zenburn, better for low light situations or extended periods of use.\n\ndesertedocean (high saturation version): http://www.vim.org/scripts/script.php?script_id=1404\n---------------------------------------------------------------------------------------------------------------------\nThis color scheme has a dark greyish blue background and a blue number line and folding column, and has shades of tan (from orange to wheat) for highlighting syntax. This scheme is made for a GUI; terminal colors are still set to the defaults set by the Desert color scheme. I made this scheme using Desert as a starting point and looked to make it have similar qualities with OceanDeep and Zenburn as well. The final result uses mostly a sandy foreground with a fairly high contrast with the greyish blue background.\n\nFeedback is appreciated!\nEmail comments or suggestions to axs221@gmail.com.\nVisit my homepage at http://axs221.1l.com. "}, {:name=>"Local-configuration", :summary=>"Use different settings for different directories.", :description=>"I work in a project which involves contribution from many other people each with their own coding style. This script helps to load files from different places but with the right settings. I use \"ts=4, sw=4, ...\" in directories i use, and set it to \"ts=8, sw=8, ...\" in the root of the linux kernel directory. These configurations are stored in a file called .lvimrc, subdirectories inherit the settings from their parent unless the subdirectory itself doesnot have a .lvimrc file.\n"}, {:name=>"OMNeTpp-NED-syntax-file", :summary=>"Syntax file for OMNeT++ NED files", :description=>"I didn't find a syntax file for the network description language of the OMNeT++ network simulator. Its files are called *.ned.\n\nThis syntax file just does basic highlighting and doesn't know any regions or areas. I will maybe change this when I learned how to do it ;)\n\nIf somebody has a better syntax file for this filetype, please tell me!"}, {:name=>"Workspace-Manager", :summary=>"Plugin for managing groups of files", :description=>"The workspace plugin allows you to easily access groups of frequently used\nfiles and run any command on a selected set of files from the workspace.\n\nYou can create one or more groups in a workspace. Each group can contain\nadditional sub-groups. The workspace and the groups can contain one or more\nfilenames.\n\nThe contents of a workspace are saved in a user specified file. This allows\nyou to create multiple workspaces and to load the desired workspace when\nneeded.\n\nYou can run any Vim ex command or an external shell command on a selected\ngroup of files from the workspace.\n\nFor more information about using this plugin, after installing the\nworkspace plugin, use the \":help workspace\" command.\n\nThe workspace plugin manual is also available online at:\n     http://www.geocities.com/yegappan/workspace/workspace.html\n"}, {:name=>"bwTemplate", :summary=>"This script is used to load templates to buffers with different filetypes", :description=>"This script can be used to load template files just to save time. It shows templates for current buffer's filetype, you can choose one and load it. Some templates are distributed with this script, and I will\nadd more if I have time. Of course, you can post your templates to me if you like, and I will add them to this package and your name to this script, :-)\n"}, {:name=>"vim_colors", :summary=>"4 Vim Themes I use for programming (GUI only)", :description=>"These are 4 themes I made which I prefer for programming, pyte.vim for example is a light and clear one which uses italic mode for pronouncing something, quite fun when programming python (or any other language).\nThe color-themes will be readably in the console I suppose (since I stole parts from other themes), but are intended to use with a gui such as gvim."}, {:name=>"brsccs.vim", :summary=>"an SCCS browser", :description=>"        It allows you to scroll the history back and forth  looking at how the code has changed in a convenient way.\n\n       Very helpful if you work with Sun Studio + Vim + TeamWare.\n\n        To start browsing an sccs file press ,v\n\n        Two windows will pop up: sccs versions and sccs browser.\n        In the sccs browser you see the text annotated by the version numbers.\n        Each line has the version number when it has changed the last time.\n        Press enter in any such line and you jump right to that version.\n        Press ,< and you jump right \"under\" that version. I.e. right before\n        that line was changed.\n       The plugin tries to track your position in the file so that you stay on the same line when move through the history\n\n        enter           go to the version that annotation specifies\n        ,v              start the SCCS browser\n        ,-              go back one version\n        ,+ or ,=        go forward one version\n        ,<              go one version earlier than the annotation specifies\n\n"}, {:name=>"bibFindIndex", :summary=>"Jump to an index in an alphabetically ordered file", :description=>"This is a small ftplugin that helps jumping to a key in a bibtex file. \nIt assumes a bibtex file that is alphabethically ordered by the bibitem \nkey. Maybe some people will find this useful.\n\nType <LocalLeader>g and a bibtex-key you want to find.\nType <LocalLeader>n to jump to the next key in line.\n\nExample use:\n\nIf the keys in the file were: \n    \n    @article{aa,\n    ...}\n    @article{ab\n    ...}\n    @article{aba\n    ...}\n    @article{ac\n    ...}\n\nthen '<LL>gab<cr>' would take you to \"ab\" but '<LL>nab<cr>' to \"ac\". \nActually BibGotoNextIndex is the main reason for why I wrote this one.\n\nIf g:bibFindIndexAllowSpaces is true, the \"entry head\" may include whitespace. \n(I'm not sure if this is legal bibtex, though.)\n"}, {:name=>"Auto-debug-your-vim", :summary=>"Debug your vim automatically", :description=>"Read this bash script  through and modify to your needs.\nRun it instead of vim directly.\n\nHope this helps to make vim more stable.\nAny comments, suggestions are welcome.\n"}, {:name=>"shorewall.vim", :summary=>"Shorewall syntax highlighting", :description=>"This is a first approach to make a syntax check and highlighting script for shorewall (http://www.shorewall.net). \n\nIt's not heavily tested yet, but it works. It renders you a nice colored rules file and it also check for basic typing errors such as invalid characters, mistyped protocol names or incorrect white spaces that may prevent  the firewall to start."}, {:name=>"carvedwood", :summary=>"A dark (tan/grey) color scheme for scanning Html", :description=>"A typical tan on dark grey color scheme, with more important elements in HTML brightened. \n\nComments and suggestions are greatly appreciated:\n  axs221@gmail.com"}, {:name=>"avs.vim", :summary=>"syntax for avisynth script files (.avs)", :description=>"This is a syntax file for avisynth http://www.avisynth.org a powerful tool for video post-production. It provides almost unlimited ways of editing and processing videos. AviSynth works as a frameserver, providing instant editing without the need for temporary files.\n\nThis syntax file attempts to add all of the avisynth filters to the syntax list, as well as comments, strings, and nubmers.  This helps make long avs scripts easier to read. \n\nI tried to include all of the third-party filters in this release, but there are A LOT of them!  Shoot me an email with a list of filters that you would like added to the syntax file and I will release a new version with an update. There are always new filters coming out.  "}, {:name=>"jadl.vim", :summary=>"Syntax highlighting for the JIAC Agent Description Language", :description=>"The JIAC framework is the Java-based Intelligent Agent Componentware [http://www.jiac.de/] developed at the DAI-Labor [http://www.dai-labor.de/] at the Technical University of Berlin [http://www.tu-berlin.de/].\n\nThis script provides syntax highlighting for the *.jadl and *.onto files which are used to program agents in the framework.\n\nThe official homepage of the script can be found at\nhttp://user.cs.tu-berlin.de/~makunze/vim-jiac.html"}, {:name=>"openvpn", :summary=>"OpenVPN configuration syntax highlighter", :description=>"This vim syntax script highlights configuration files used with James\nYonan's OpenVPN application (http://openvpn.net).\n\nFeatures:\n\n  * Highlights options, comment lines, and arguments\n  * Recognizes quoted strings and escaped characters (e.g. \\\\, \\\")\n  * Flags arguments given for options that take no arguments\n  * Special highlighting for route and server command arguments\n\nReporting Issues:\n\n  If you discover an OpenVPN file that this script highlights incorrectly,\n  please email the author (address at the top of the file) with the\n  following information:\n\n    * Problem OpenVPN file WITH ANY SENSITIVE INFORMATION REMOVED\n    * The release version of this script (see top of the file)\n    * If possible, a patch to fix the problem\n\nDesign Notes:\n\n  Part of this script is autogenerated from the output of openvpn --help.\n  The source code for generating the script is available from the author on\n  request (see email address at the top of the script).  The script should\n  build from source on most Linux systems with openvpn installed.\n\n  The build system that generates this script strips special CVS tokens\n  (like \"Id:\") so that CVS no longer recognizes them.  This allows users to\n  place this script in their own version control system without losing\n  information.  The author encourages other vim script developers to adopt a\n  similar approach in their own scripts.\n"}, {:name=>"softblue", :summary=>"A blue color scheme, low contrast", :description=>"Only support gui version of vim."}, {:name=>"bufmap.vim", :summary=>"automatically maps buffers to function keys", :description=>"A script that automatically maps buffers to function keys.\n\nKeys:\nF<n>\n        Switch to window 1 through 12.\nSHIFT-F<n>\n        Switch to window 13 through 24.\nALT-1 through ALT-0\n        Switch to window 1 through 10.\nCTRL-W, F<n>\n        Swap the buffer in the current window with the one\n        in window n, and activate window n.\nCTRL-W, SHIFT-F<n>\n        Swap the buffer in the current window with the one\n        in buffer n+12, and activate window n+12.\nCTRL-W, ALT-<n>\n        Swap the buffer in the current window with the one\n        in window n, and activate window n.\nCTRL-W, c\n        Close the current buffer. This does \":bdelete\",\n        so it will not work when there are unsaved changes.\n        Use \":bd!\" in this case if you want to discard them.\nCTRL-W, .\n        Move buffers along to lower numbered windows\n        (useful after closing a buffer)\nCTRL-W, /\n        List all Windows.\n"}, {:name=>"corn", :summary=>"green + blue + wheat colorscheme", :description=>"Simple colorscheme, only three to five different colors. The colors try to differentiate between reserved words and user created elements."}, {:name=>"dtdmenu", :summary=>"DTD menu with skeletons", :description=>"Adds a Dtd menu. Dtd as in docbook and xhtml. e.g\n          <!DOCTYPE book PUBLIC \"-//OASIS//DTD DocBook XML V4.3//EN\"\n\t      \"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd\"&gt;\n\nit currently features 6 dtd's (xml docbook (2). HTML (3), XHTM(1))\nThe provided skeletons depends  on xml.vim for its expansion. \nIf you want to add your own DTD entries look in the file for instructions how to do that"}, {:name=>"iptables", :summary=>"iptables-save/restore syntax highlighter", :description=>"This vim syntax script highlights files used by Harald Welte's iptables-save\nand iptables-restore utilities.  Both utilities are part of the iptables\napplication (http://www.netfilter.org/projects/iptables).\n\nFeatures:\n\n  * Distinguishes commands, options, modules, targets and chains.\n  * Distinguishes numeric IP addresses from net masks.\n  * Highlights tokens that occur only in hand-edited files; for example,\n    \"--append\" and \"destination-unreachable\".\n  * Special handling for module names; for example, the tcp module is\n    colored differently from the tcp protocol.\n\nOptions:\n\n  Customize the behavior of this script by setting values for the following\n  options in your .vimrc file.  (Type \":h vimrc\" in vim for more information\n  on the .vimrc file.)\n\n  g:Iptables_SpecialDelimiters\n    This variable, if set to a non-zero value, distinguishes numeric\n    delimiters, including the dots in IP addresses, the slash that separates\n    an IP address from a netmask, and the colon that separates the ends of a\n    port range.  If not set, this option defaults to off.\n\nKnown Issues:\n\n  * Some special argument tokens are highlighted whether or not they are\n    used with the correct option.  For example, \"destination-unreachable\"\n    gets special highlighting whether or not is used as an argument to the\n    --icmp-type option.  In practice, this is rarely a problem.\n\nReporting Issues:\n\n  If you discover an iptables file that this script highlights incorrectly,\n  please email the author (address at the top of the script) with the\n  following information:\n\n    * Problem iptables file WITH ANY SENSITIVE INFORMATION REMOVED\n    * The release version of this script (see top of the script)\n    * If possible, a patch to fix the problem\n\nDesign Notes:\n\n  Part of this script is autogenerated from the output of the iptables man\n  page.  The source code for generating the script is available from the\n  author on request (see email address at the top of the script).  The\n  script should build from source on most Linux systems with iptables\n  installed.\n\n  The build system that generates this script strips special CVS tokens\n  (like \"Id:\") so that CVS no longer recognizes them.  This allows users to\n  place the script in their own version control system without losing\n  information.  The author encourages other vim script developers to adopt a\n  similar approach in their own scripts.\n"}, {:name=>"CarvedWoodCool", :summary=>"A variation of CarvedWood with a softer blue background", :description=>"For those who prefer a blue background, this uses the same basic text scheme as CarvedWood, but with a softer blue background and side bars.\n\nCarvedWood can be found at:\nhttp://www.vim.org/scripts/script.php?script_id=1417\n\nSend comments and suggestions to:\naxs221@gmail.com"}, {:name=>"darkerdesert", :summary=>"A darker version of desert scheme, less radiation", :description=>"Turn the original desert scheme (http://vim.sourceforge.net/scripts/script.php?script_id=105) into a darker one. The distinction between different  hightlight groups remains."}, {:name=>"selection_eval.vim", :summary=>"Evaluate the statements which you select with visual mode.", :description=>"Evaluate the statements which you select with visual mode.\n\nCommands:\nvmap <c-e><c-r> evaluate with using ruby.\nvmap <c-e><c-l> evaluate with using perl.\nvmap <c-e><c-p> evaluate with using python.\nvmap <c-e><c-s> evaluate with using shell(bash)\nvmap <c-e><c-v> evaluate with using vim.\n\nyou need to install the interpreter which you want to use.\n\nUsage: \n1. press <ctrl> + v\n2. select the snippets with visual mode.  cf) echo \"hello world\"\n3. press <c-e><c-v> or :EV (evaluate by vim.)\n4. you get the result in the another buffer.\n5. when you press the <e-c>c or :ECL, the result buffer is closed.\n\nReference: dbext.vim\n\nI use this scripts on FreeBSD5.4 and cygwin. (vim6.3)"}, {:name=>"cfname", :summary=>"Shows (or jumps to) the C/C++ prototype of the function the cursor is in", :description=>"This is a simple (limited) script for C/C++ programmers.\nWhen editing source files with very long functions, it may happen the \nprogrammer does not know which function the current line is in (e.g. \nwhen using tags and jumping with Ctrl-] or jumping after a search). \nHere are some shortcuts to be typed in normal mode: \n   ff: shows the function prototype on the command line \n   fb: jumps to the function beginning \n   fe: jumps to the function end \n   ft: jumps back where the cursor was before typing 'fb' or 'fe'\n       (the first 'fb' or 'fe' if a sequence of them is typed)\n   fz: folds the function \n   fo: unfolds the function      \nAlso, the function name is visible between square brackets on the status \nline, with automatic update. To disable/enable this feature on-the-go use 'fd'/'fs'.\nTo disable it steadily, comment the statements \n'au BufRead,BufNewFile * CFunSetStatusByFileName' and\n'au BufEnter * CFunSetStatusByFileName' by putting a \" in front of them.\n\nNote that, by default, the status line is not visible when only one window is open.\nIf you like to have it always visible, add the statement 'set laststatus=2' in the script.\n\n\n***KNOWN ISSUES***: \n- The automatic update of the status bar may slow down or even block the cursor movements. \n  This has been experienced with VIM running on an UNIX machine; also experienced with\n  very large files and functions. Refer to the instructions above to disable the status line update. \n\n- In files with comments like \"// ... }\" (with unmatched '{' or '}' brackets), the script does not\n  work well (however, from version 2.2 on, the cursor should behave properly). \n  I think it will not be easy to fix this problem. \n\n\n***SPECIAL VERSION***\nThere is a special version 3.0a by Yakov Lerner. This version has two differences with respect\nto version 3.0:\n1) if the user has a non-standard status line, that is preserved and the function name information\n   is added to it (the status line is not changed to default);\n2) the status line is updated with the function name information only after a while if the\n   cursor position is held (it shows [...] before). That is useful if you feel window scrolling\n   is slowed down too much.\nWith version 3.0a, use a capital F as the first letter for shortcuts.\n\n\nNote that taglist.vim (vimscript #273), the most downloaded script, already does the job of showing \nthe function prototype, together with a lot more! However, try this little thing too!\n\n"}, {:name=>"checksyntax-B", :summary=>"Check for syntax erros when saving a file (php, ruby, tex ...)", :description=>"http://github.com/tomtom/checksyntax_vim\n\nThis plugin is based on Klaus Horsten's php_console (vimscript #779) and \nit is the successor of php_check_syntax.vim (vimscript #1272). In \nopposition to php_console, it is not a php ftplugin but a general \nsolution for checking the syntax when saving a file (using the \nappropriate interpreter, lint or whatsoever).\n\nBy default, :CheckSyntax is mapped to <F5>. The :CheckSyntax takes one \noptional argument: the mode (default: &filetype). The following modes \nare pre-defined (and some more):\n\n    javascript :: Check syntax via jsl\n    lua :: Parse file (luac -p)\n    php  :: Check syntax (php -l)\n    phpp :: Parse a file (php -f)\n    ruby :: Check syntax (ruby -c; no auto-checks)\n    tex, latex :: Parse file (chktex -q -v0; no auto-checks)\n\nUse vimscript #2584 to mark syntax errors with signs.\n"}, {:name=>"textutil.vim", :summary=>"Vim plugin for editing rtf,rtfd,doc,wordml files.", :description=>"\n Usage:\n    When you open rtf, rtfd, doc or wordml file with Vim,\n    editing file format is automatically converted to plain text.\n    And when you write file, file format is automatically converted to\n    rtf, rtfd, doc or wordml file format.\n\n Configuration:\n    When this script convert rtf, rtfd, doc or wordml file to plain text with textutil command,\n    this script use \"g:textutil_txt_encoding\" encoding.\n    Default value of \"g:textutil_txt_encoding\" is 'utf-8'.\n    You want to change text encoding, set \"g:textutil_txt_encoding\" in your $HOME/.vimrc file.\n    for example,\n\n        :let g:textutil_txt_encoding='Shift_JIS'\n\n Note:\n    This script is based on 'textutil' command.\n    So this script will only run on MacOS 10.4 or later.\n\n"}, {:name=>"haml.zip", :summary=>"Haml and Sass syntax, indenting, and ftplugin", :description=>"Runtime files for Haml and Sass. An older version is included with Vim 7.2. Newest version is on Github:\n\nhttp://github.com/tpope/vim-haml"}, {:name=>"Dev-Cpp-Scheme", :summary=>"Nice, clear, gentle, professional colorscheme from Dev-C++", :description=>"Nice, clear, gentle, professional colorscheme from Dev-C++.\n\nBy Xi Chen, HyperNewbie, \nbased on the nice structure of the Visual C++ theme :)\n\nIts te default Dev-C++ theme with little fix-ups from Kate editor. Nice white-background theme that uses gentle colors and strong colors where appropriate, so you grab the right attention while not killing your eyes.\n\nShould work on most versions of vim...\n\n\n"}, {:name=>"HiMtchBrkt", :summary=>"Highlights matching bracket in normal mode", :description=>"The HiMtchBrkt plugin attempts to highlight the matching bracket as you move your cursor in normal mode.  Bracket include\n\n    (){}[]  (actually the |'matchpairs'| option is used)\n\nand the matching one is highlighted when the cursor is moved on top of the bracket.  It does so by making a fair number of maps that intercept the requested motion, perform the requested motion, then also call the HiMatchBracket() function which does the work to highlight any matching bracket.  Basically it does a \"%\" to find the matching bracket (if any) and then constructs and executes an appropriate \":match\" command.\n\nAs of version 10, such overloaded motions include:\n\n    ,  E   F)  k      <down>         \n    ;  f(  F[  l      <end>          \n    $  f)  F]  w      <home>         \n    %  f[  F{  <c-b>  <left>         \n    0  f]  F}  <c-d>  <leftmouse>    \n    b  f{  h   <c-f>  <right>        \n    B  f}  j   <c-u>  <up>           \n    e  F(              \n\nVersion 12 supports overloading of 0, too (if you have vim6.2 and patch 405 or later).\n\nBecause vim is rich with commands that can move the cursor, the script also uses the CursorHold event (see |cursorhold| and |'updatetime'|) to highlight matching brackets after the cursor is left still for awhile.\n\nTo start HiMtchBrkt mode you have several choices:\n\n    (put in your .vimrc)  let g:HiMtchBrktOn= 1    (vim will always start up in HiMtchBrkt mode)\n    command: :HMBstart\n    map:     \\[i\n\nTo stop HiMtchBrkt mode:\n\n    command: :HMBstop\n    map:     \\[s\n\nWhen you start HiMtchBrkt, any user maps associated with HiMtchBrkt maps are saved; when you stop HiMtchBrkt, those maps are restored.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#HIMTCHBRKT)\n"}, {:name=>"Compiler-Plugin-for-msbuild-csc", :summary=>"Build your msbuild file and visual studio .net 2005 csharp projects in vim.", :description=>"Msbuild is an easy way to building visusal studio's solution without the IDE. It's very cool using vim to work with your \"IDE team members\". So this is msbuild plugin.\n\nMsbuild use csc internally to build .csproj project file. Normally we build .sln file, which is in the parent directory of .csproj file. So the csc's output is relative to .csproj directory, not the .sln directory. Vim can't find the error source file. To solve this, you must enable \"GenerateFullPaths\" option in your .csproj project file."}, {:name=>"XML-Folding", :summary=>"Folds XML / HTML Tags, CDATA and comments", :description=>"It pretend to be the fold solution for all XML/HTML/SVG and other xml derivated...\n\nThis script supports:\n\nTag folds between two different lines: <tag> </tag>\nComments folds: <!-- comment -->\nCDATA folds content between \"<!<CDATA[\" and \"]]>\""}, {:name=>"compilerpython.vim", :summary=>"compiler plugin for python", :description=>"Based on the script and notation from vimscript #477\n\nThis compiler script does not run the source through the python interpreter, but instead uses the py_compile package to check for syntax errors.  This allows for a development cycle similar to a compiled language - edit, compile, run."}, {:name=>"winmanager--Fox", :summary=>"A windows style IDE for Vim", :description=>"This plugin is a minor bug-fix version of vimscript #95.\n\nI sent the patches to the author of winmanager last September but I've received no reply till now.  I assume that he doesn't maintain this script any more.  So I decide to upload my patched version as a new entry.\n\nOne new feature of this plugin is called \"start\".  When you are browsing files with winfileexplorer, just place your cursor onto a file and press \"S\" (shift-s), Vim will open the file with the application associated with the file type. So you are able to launch a media player to enjoy the music without opening an extra konqueror or nautilus.\n\nAnother new feature of this plugin is \"toggle show hidden files/directories\".  By default, this plugin doesn't show files/directories prefixed with dot \".\".  You can toggle show/hide hidden files/directories by pressing \"x\" in the file explorer window.  You can override this default setting by putting \"let g:explShowHiddenFiles = 1\" in your \"~/.vimrc\" to make it show hidden files/directories by default."}, {:name=>"xsl-fo", :summary=>"xsl-fo Syntax", :description=>"syntax file for xsl-fo\n\nIt colors all \"valid\" xsl-fo elements and attributes with a set of colors making it easy to spot invalid xsl-fo constructs.\n\nThis syntax works well with other related syntaxs like xsl or xml.\n\n"}, {:name=>"XML-Completion", :summary=>"Completion for XML files", :description=>"Context sensitive completion for XML.\nCompletes:\n * element names\n * attribute names (rejects already presented attributes)\n * attribute values (if defined as enumeration)\n * closing tag names\n * keywords in XML declaration\n\n1. Invoking\n\nThe completion function is XmlComplete() and is imapped on \\C-J.\n\n2. Completion in elements\n\nDistribution contains definition files (recipes) for DocBook 4.[234], XSL FO 1.0, XSLT 1.0, Relax NG 1.0, XML Schemas 1.0, SVG 1.1, XHTML 1.1, XInclude 1.0 and OpenOffice 1.0 XML format.\n\nIf g:xmlSubelements == \"yes\" (default \"no\"), completion of element names is restricted on subelements of parent element. This feature is new and momentarily works only for DocBook, XSLT and XML Schemas (the recipes must be modified).\n\nCompletion algorithm:\n1. If name of currently opened tag is prefixed, looks for respective xmlns mapping for its URN. If mapping exists, selects recipe associated with this URN.\n2. If name isn't prefixed, looks for implicit NS. If exists, ... (see above).\n3. Looks for Doctype decl. If found, tries first PUBLIC, then SYSTEM ident.\n4. If all fails, fires \\C-N for normal completion."}, {:name=>"telstar.vim", :summary=>"outer space color scheme for gvim", :description=>"A dark, blue/lavender/gray/magenta space-y theme for gvim only, sorry. Also has a few extra highlights for Java. Screenshot at http://excelsi.org/telstar.jpg (the background there is not part of the colorscheme, but it does match nicely...)\n\nIf you want to use the Java highlighting you'll need Claudio Fleiner's java.vim syntax highlighting from\nhttp://www.fleiner.com/vim/download.html."}, {:name=>"colors", :summary=>"Functions to manipulate color values (vim7).", :description=>"Rgb2Hsv - change RGB into HSV colorspace\nHsv2Rgb - change HSV into RGB colorspace\n\nr, g, b [0..255]\nh [0..359]\ns, v [0..255] sic!\n\nHex2Rgb - change Hex notation (#ffffff) into rgb [255,255,255]\nRgb2Hex - change RGB notation into Hex notation\nTxt2Rgb - change text names of functions into RGB notation (names according to rgb.txt of X consortium)\n\nIn addition there is function ColorFormula which will tell if brightness and\ncolor differences are good enough (according to W3C) to became background and text colors.\nGood for testing colorschemes on HTML sites and Vim.\n"}, {:name=>"AllBuffersToOneWindow.vim", :summary=>"Bring all remote Vim window buffers together in one Vim window.", :description=>"Usage:\n   This script adds one new command \":AllBuffersToOneWindow\".\n   You can use the \":AllBuffersToOneWindow\" command to load buffers that are\n   loaded in remote Vim window in main Vim window.\n\n   1. Run Vim application (process A), and edit File1, File2, FIle3.\n   2. Run Vim application (process B), and edit File4, File5\n   3. Run Vim application (process C), and input \":AllBuffersToOneWindow\"\n      command.\n   4. Input \":buffers\" command. (Vim application process C)\n      File1, File2, File3, File4 and File5 are added to buffer list.\n\nNote:\n   o  To run this script, Vim needs to be compiled with \"+clientserver\" option.\n   o  If buffer is file and can be read, buffer will be loaded in main Vim window.\n   o  If buffer is already loaded in main window, buffer will not be loaded."}, {:name=>"MoveLine", :summary=>"Moves Lines up or down", :description=>"Uses the 'e' and 'f' keys to move a line up or down.  Extremely useful when coding."}, {:name=>"Altair-OptiStruct-Syntax", :summary=>"Fixed field formatting (8 field) for Altair OptiStruct", :description=>"8 Field formatting for editing Altair OptiStruct decks - you'll never again need to add another \"$......><......><......><......><......><......>\" line when editing an OptiStruct deck . The syntax shows the 8 field spacing with coloured fields.\nIt is also recommended that this syntax be used for editing nastran files - its much more useful than the nastran syntax!!"}, {:name=>"Low-Contrast-Color-Schemes", :summary=>"Collection of low-contrast color schemes", :description=>"Many color schemes have colors that have a medium to high contrast.  A higher contrast makes the text stand out more against the background.\n\nI personally don't like high contrast in my text.  I find it distracting, and it bothers my eyes after looking at it for a long time.  It's especially distracting when the colors have a varying degree of contrast-ness.\n\nSo, I worked to find the best low-contrast colors that are still distinguishable from each other.  High contrast is still there if it's something important, like an error, or if I never changed the default because it never shows up in the things I do.\n\nHope you like them!"}, {:name=>"vera.vim--Larson", :summary=>"Syntax highlighting for Vera", :description=>"Updated syntax file for Vera 2005.06. Many new features are added from previous vera syntax versions."}, {:name=>"VHDL-indent-93-syntax", :summary=>"Revised VHDL indent file", :description=>"This VHDL indent file will help indent a VHDL file in Vim with the operator '='.\nTo indent the whole file, do 'gg=G'. See \":help =\"\n\nPrevious good work has been done by N. J. Heo & Janez Strangelj (see vimscript#766). However, Heo & Strangelj's script was lacking in terms of alignment for assignment statements that continued on for more than one line, among other things.\n\nThis script covers a broad set of VHDL keywords, and performs proper alignment on port/generic mappings & on the RHS of assignment operators.\n\nTo disable alignment of generic/port mappings:\n  :let g:vhdl_indent_genportmap = 0\n\nTo disable alignment of right-hand side assignment \"<=\" statements:\n  :let g:vhdl_indent_rhsassign = 0\n\nThe two options above are enabled by default. To change them, place either of the above in \".vimrc\".\n\nIn later versions of Vim 7.1 and above, access help documentation with:\n  :help ft-vhdl-indent\n\nPlease send feedback and bug reports via e-mail. Much appreciated :)"}, {:name=>"svn_commit", :summary=>"read in aborted subversion commit log messages", :description=>"This plugin will look in the current directory for aborted subversion commit log messages, and then read in the newest one to your current commit log.\n\nThis saves you having to remember what the log files are called, or importing it yourself and tidying up the log message manually.\n\nhttp://atlee.ca/blog/software/svn-commit/"}, {:name=>"cecscope", :summary=>"command and menu driven cscope interface", :description=>"    (requires vim7.0aa snapshot #188 or later)\nDrChip's cscope interface supports commands:\n\n    CS     [cdefgist]   : cscope\n    CSl[!] [cdefgist]   : locallist style (! restores efm)\n    CSs[!] [cdefgist]   : split window and use cscope\n\n    !            split vertically\n    c (calls)    find functions calling function under cursor\n    d (called)   find functions called by function under cursor\n    e (egrep)    egrep search for the word under cursor\n    f (file)     open the file named under cursor\n    g (global)   find global definition(s) of word under cursor\n    i (includes) find files that #include file named under cursor\n    s (symbol)   find all references to the word under cursor\n    t (text)     find all instances of the word under cursor\n\nand menus which allow you to do all the above.  Includes help\nand a tutorial.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#CECSCOPE)\n"}, {:name=>"baycomb", :summary=>"An intuitive Color Scheme (w/ dark & light colors)", :description=>"This is a dark scheme consisting primarily of red/orange & green/blue/purple, with support for Terminal and 7.0 users. \nBoth the original dark and a light version is included, be sure to specify the version:\n  :set background=dark   or   :set background=light\n\nColors are laid out intuitively, such that:\n         action/structure syntax is tan (Control Structure: red; Commands: orange; Operators: tannish yellow)\n         variables/values are blue (Identifier: greenish blue; Type: greyish blue; Constants: blue)                                   \n         text/special text is white/yellow (Normal: white; Title: golden; Underline: yellow; Special: brown)\nIt works very well for me coding in Html, ASP, and Perl.\n\nScreenshots (v2.1): [removed from image host, I'll need to resubmit some]\n\nRecommended programming fonts:\n  ProFont, Proggy Fonts, Dina, or Envy Code A (downloadable), as well as Lucida Console or Terminal\nSet :set linespace=0  to your preferred line spread (default is 1). \n\nComments and suggestions:               axs221@gmail.com "}, {:name=>"VCard-syntax", :summary=>"Vcard syntax for vcf file.", :description=>"I've developed simple syntax file so I'm able to see vcard from Plaxo in colour. It improves the readability of such file."}, {:name=>"copypath.vim", :summary=>"Copy current editing file path to clipboard.", :description=>"Usage:\n   This script adds two new command \":CopyPath\" and \":CopyFileName\".\n   You can use the \":CopyPath\" command to copy file path to clipboard,\n   and you can use the \":CopyFileName\" command to copy file name to clipboard.\n\n   :CopyPath\n       copy current editing file full path to clipboard.\n       And, if you set g:copypath_copy_to_unnamed_register option to 1 then,\n       copy file full path to unnamed register too.\n       Default, not copy to unnamed register.\n\n   :CopyFileName\n       copy current editing file name to clipboard.\n       And, if you set g:copypath_copy_to_unnamed_register option to 1 then,\n       copy file name to unnamed register too.\n       Default, not copy to unnamed register.\n\nConfiguration:\n   g:copypath_copy_to_unnamed_register\n      set this option value to 1 then, copy file path and name to unnamed register too.\n  >\n      let g:copypath_copy_to_unnamed_register = 1\n  <\n\nNote:\n   o  To run this script, Vim needs to be compiled with \"+clipboard\" option.\n"}, {:name=>"CycleColor", :summary=>"Cycles through available colorschemes", :description=>"This script provides a function, CycleColor (which is mapped to F4), to cycle through (almost) all available colorschemes.  It includes colorschemes from all \\\"colors\\\" subdirectories in the runtimepath.\n\nBecause the script uses \\\":colorscheme\\\" rather than \\\":source\\\" to set the colorscheme, if there are two files with the same name in different directories in rtp, only the first one will be used (thus \\\"almost\\\" above).\n\nThe script was inspired by a one-liner by Tim Chase."}, {:name=>"Grape-Color", :summary=>"Light colorscheme", :description=>"Grape red on light background. GUI only. Made in monitor with low brightness (10%), so it will be pale if you use brightness > 50%"}, {:name=>"moin.vim", :summary=>"Syntax file for MoinMoin wiki text", :description=>"This provides syntax highlighting for MoinMoin wiki text (http://moinmoin.wikiwikiweb.de/).\n\nThe homepage for moin.vim is http://moinmoin.wikiwikiweb.de/VimHighlighting\n\nmoin.vim is maintained by Michael Lamertz <mike@perl-ronin.de>"}, {:name=>"glark.vim", :summary=>"a wrapper for the glark command (a grep-like utility)", :description=>"This plugin provides one wrapper command for the glark command:\n\n    :Glark <args>\n\nExample: Find occurrences of \"foo\" and \"bar\" within 3 lines and \ndisplay 2 lines context:\n\n    :Glark -r -C 2 --and=3 foo bar *\n\nThe arguments are passed to the glark command.\n\nIt displays the output of the glark command (see below) in a window, \ndoes some highlighting and provides some handy key maps.\n\nIf you don't want to display context information, you're probably better\noff by setting 'grepprg' to \"glark --grep\".\n\nBe also aware that this plugin doesn't use vim's quickfix functionality\nas most grep plugins do."}, {:name=>"syntaxm4.vim", :summary=>"Improved m4.vim", :description=>"This is an improved version of m4.vim.\n\nIf you are using the changequote() and changecom(), you can specify\nthe quote and comment delimiters just like vim modelines in the\nfollowing way:\n\n<BLANK>vim-m4-syntax: quote=[,] comment=<!--,-->:\n\nYou can specify your default delimiters at your vimrc:\n\n:let g:m4_default_quote=\"`,'\"\n:let g:m4_default_comment='#'\n\nAfter the file read, you can change them in the following way:\n\n:let b:m4_quote='<<,>>'\n:let b:m4_comment=''\n:call M4UpdateSyntax()\n"}, {:name=>"dtd2vim", :summary=>"Script for creation XML data file for Vim7 XML omni-completion from DTDs", :description=>"Script for creation XML data file for Vim7 XML omni-completion from DTDs\nRequires: perl and perlSGML (tested against 1997Sep18 version)\n\nINSTALLATION:\n\n   Copy into your $PATH\n\nUSAGE:\n\n   dtd2vim <file.dtd> [<dialectname>]\n\nThis command will create file <file.vim> (remove .dtd extension and add .vim;\nother extensions will remain intact).\n\n<dialectname> (not obligatory) will be part of dictionary name and will be\nused as argument for :XMLns command (file name - sans extensions) have to be\nthe same.\n\nperlSGML and this script doesn't work with multiple files. User has to\nprepare single DTD file to parse all data.\n\nIn created file global variable is named g:xmldata_<dialectname>. When second\nargument wasn't provided 'xxxx' will be used.\nAfter that place file in:\n\n   ~/.vim/autoload/xml\n\ndirectory. Of course it can be also global directory or other Vim data\nhierarchy of files. Example for  DocBook 4.4:\nDTD is in file docbook.dtd, call command with\n\n   dtd2vim.pl docbook.dtd docbook44\n\nPut file as:\n  \n   ~/.vim/autoload/xml/docbook44.vim\n\n Omni-completion for DocBook 4.4 files will be started with:\n\n   :XMLns docbook44\n\n command.\n\n"}, {:name=>"docbook44", :summary=>"DocBook 4.4 vim7 xml data file", :description=>"Data file for Vim7 omnicompletion. Unzip and place in \n~/.vim/autoload/xml directory. Completion will be available after \n\n:XMLns docbook44\n\ncommand.\n"}, {:name=>"moria", :summary=>"A color scheme for GUI supposed to be highly readable", :description=>"This color scheme contains four color schemes: two dark and two light color schemes. All highlighting groups have similar brightness. In the dark schemes bold highlighting is avoided, but used where it is reasonable. Different highlighting groups can be distinguished easily without a cluttered appearance. The highlights of all four color schemes have similar colors, but differ in contrast. \n\nThis color scheme is for the GUI version of Vim and makes only some minor tweaks for the console version.\n\nThis color scheme is optimized for Vim 7.0, but works for Vim 6.0, too."}, {:name=>"Ant", :summary=>"Ant  vim7 xml data file", :description=>"Ant vim7 xml data file\n\nPut in \n\n~/.vim/autoload/xml\n\nLoad data with\n\n:XMLns ant\n\nfile.\n"}, {:name=>"netrw.vim--Hwang", :summary=>"support to ftp explorer : support to view ftp file list", :description=>" I am not that  fluent in English.\n\nnetrw.vim plugin not support to view ftp file list..\n\nthis script to change from netrw.vim to that support to view ftp file list.\n\nshift + O is \"Open file\" like of explorer!!\n\nI don't change pattern so don't execute \"vim ftp://localhost&quot;..\n\nbut execute \"vim ftp://localhost/&quot; is success!!\n\n\n\n"}, {:name=>"far", :summary=>"FAR internal editor color scheme", :description=>"This color scheme is very similar to FAR(http://www.rarsoft.com) internal editor one.\nI use Vim on Unix environment (vim) as replacement of Midnight Commander's internal editor and on Win32 env (gvim) as replacement of FAR internal editor."}, {:name=>"bayQua", :summary=>"An offwhite version of the baycomb colorscheme, influenced by TaQua", :description=>"An offwhite version of baycomb.vim, with subtle background shading on syntax.\nThis is basically a mix between my latest colorscheme, baycomb, and TaQua, by Eustaquio Rangel de Oliveira Jr. \n\nWhite backgrounds make it harder for me to identify normal text, and it seems harder to identify colors than on a dark background, so I added the soft glowing colors to syntax background. They may or may not be visible on your computer (they are too light to see on my computer at work; i adjusted them to be darker but then they were too dark and overpowering on my home computer).\n\nThe scheme has highlighting for both the GUI and Terminal. For tips and more information, go to baycomb's site:\n\nbaycomb: http://www.vim.org/scripts/script.php?script_id=1454\nTaQua: http://www.vim.org/scripts/script.php?script_id=594\n\n                                                                                 _______________\n     Comments and suggestions:                    ***| axs221@gmail.com | ***\n                                                                                 ---------------------------"}, {:name=>"promela", :summary=>"Promela indent file", :description=>"This is my first attempt at writing an indent file for VIM.\nIt seems to work OK for at least basic stuff."}, {:name=>"lbnf.vim", :summary=>"LBNF (Labeled Backus Naur Form) syntax file", :description=>"Syntax highlighting for Labeled BNF."}, {:name=>"watermark", :summary=>"a low contrast Color Scheme", :description=>"Watermark is a low contrast scheme, with a similar color set as baycomb (vimscript #1454) but the contrast of ps_color (vimscript #760).\n                                                                                       _______________\n           Comments and suggestions:                    ***| axs221@gmail.com | ***\n                                                                                       --------------------------- "}, {:name=>"Sift", :summary=>"a stark Color Scheme for maximum reading speed/identifiability", :description=>"My goal for this theme is to be brighter and more contrasted than my previous scheme (baycomb), and I focused on making the scheme cohesive as well as having different color schemes for different sections of code. \n\nMy basic vision for this scheme, along with others to various degree, would be, even if you were to squint, you could easily identify one type of code from another. Colors are laid out on a spectrum from yellow to blue, with the strongest yellow colors being control structures, green being variables, and blue being values. I usually lay it out this way so that, for example, if functions are performed on a variable, it will fit in well with a yellow/green scheme, but if you throw one into a long string it won't look like the string is cut in two.\n\nThat's the basic idea. Let me know if there's anything I could be doing better in that sense.\n                                                                \nComments and suggestions:  axs221@gmail.com\n\n"}, {:name=>"vim7-install.sh", :summary=>"{download + build + install} latest vim7.1 from svn sources in 1 command.", :description=>"(This shell script works on Linux, Solaris, Unix, OSX, Cygwin. Not for VisualStudio.)\nDownload this script, vim7-install.sh, into any directory and invoke:\n        sh ./vim7-install.sh\n\nThis will download vim7 sources, then build and install vim7. \n- You do not need root privileges. If you do not have root privileges, it will install under your $HOME ($HOME/bin). If you do have root privileges, it will install system-wide (/usr/local/bin. You can change this with --prefix option).\n- No arguments are needed (but you can add any configure-style arguments, see below). \n- The latest vim7 sources are downloaded either from svn repository, or from cvs repository, up to the latest today's patch. The freshest runtime files are downloaded from rsync repository.\n\nPrerequisites: requires either svn client or cvs client installed. Requires C compiler (gcc). On debian or ubuntu, install build prerequisite packages with this command: apt-get build-dep vim-gtk vim-full\n\nBy default, Vim will be built with '--with-features=huge'. But you can override this with commandline arguments, see below. \n\nIn case of  $HOME/bin install, script will prompt you to add $HOME/bin to your PATH.\n\nNon-root installation vs Root installation\n-------------------------------------------------------\nIf you are invoking the script as root, vim will be installed into /usr/local (that is , for everybody). If you are non-root, then you will be prompted for one of two choices: (1) to install vim under your $HOME (for which you do not need root password), or (2) to install vim under /usr/local, for which you need to know root password.\n\nIn case of $HOME/bin install, script will prompt you to add $HOME/bin to your PATH.\n\nCustom build options\n------------------------------\nAll arguments beginning with '--' will be passed to 'configure'. Options beginning with single minus are for vim7-install.sh itself:\n   sh vim7-install.sh  -h           prints options of vim7-install.sh itself\n   sh vim7-install.sh  --help     prints options of vim's 'configure', and options of vim7-install.sh\n\nWithout arguments, vim will be built with '--with-features=huge', unless you pass some other '--with-features='  argument. The '--with-features=huge' enables \"almost all features\" (including GUI ), but does not include \"interpreters\" (perl, python, ruby, etc).\n\nTo include interpreters, add following options:\n      ./vim7-install.sh --enable-perlinterp --enable-pythoninterp --enable-rubyinterp\n\nChoice of download methods: Svn-export, Svn-checkout, CVS\n----------------------------------------------------------------------\nDefault download method is Svn-export (thus you need svn client software). Other\ndownload methods are CVS (option -cvs), and Svn-checkout (-cvscheckout).\nAs of 2006, CVS server is less reliable than SVN server; but CVS server gets patches first. SVN server lags behind CVS by several hours. Overall, SVN server is better choice since it is more reliable.\nSvn is noticeably faster than svn-checkout in one run, but svn-checkout is faster\nif you do multiple builds.\n\nSource cache, automatic cleanup, manual cleanup\n-------------------------------------------------------------------------\n- vim7-install.sh downloads only \"delta\";  that is, changed files that changed since last build. Thus the non-first build is *much* faster than the first build. Your fist build must download the whole source tree, of course.\n\n- each build is automatically preceded by 'make distclean'. This is non-optional.\n\n- script will checks for locally modified source files. If script finds locally modified source files, you will be prompted (whether to (1) drop local changes, or (2) to preserve local changes).\n\n-  if local source tree becomes corrupted and unusable, you need to clean it:\n         ./vim7_install.sh clean\n\nQ: Do I need to uninstall vim6 before using vim7-install.sh ?\n------------------------------------------------------------------------------------\nA: No. I recommend that you do not uninstall vim6 before \nusing vim7-install.sh. But I do recommend that you rename \nvim6 before using vim7-install.sh, as follows:\n      become root\n      mv /usr/bin/vim /usr/bin/vim6\n\nPossible future enhancements: \n  - easy inclusion of external patches \n  - rsync download method.\n\nBug reports and feedback\n-------------------------------------\nSend to:   iler.ml at gmail.com\nPlease let me know if it works on other Unix flavor other than mentioned in the first line. Or doesn't work."}, {:name=>"yellow", :summary=>"A yellow-green color scheme", :description=>"I read from a readability study that yellow on green was pretty readable, and decided to try making a scheme out of it. Basic colors are yellow, green, and orange on dark green."}, {:name=>"maude.vim", :summary=>"Syntax file for the Maude language", :description=>"This is a very rudimentary but functional and hopefully useful syntax file for the Maude language (http://maude.cs.uiuc.edu/). A screenshot with the \"koehler\" colorscheme is available here: http://severinghaus.org/projects/mandelbrot/maudelbrot_vim.png"}, {:name=>"delphi", :summary=>"Delphi color scheme", :description=>"Delphi color scheme"}, {:name=>"Modeliner", :summary=>"Generates modeline according to the current settings.", :description=>"[How to use it?]\n\nexecute ':Modeliner'.\n\n\n[And, what will happen?]\n\nIf your current settings are like below:\n  - setl fenc=utf-8\n  - setl et\n  - setl sts=4\n\nthen you will get a modeline like:\n  - for 'c' filetype:\n      /* vim: set fenc=utf-8 et sts=4 : */\n  - for 'xml' filetype:\n      <!-- vim: set fenc=utf-8 et sts=4 : -->\n\n\n[How to include my favorite options?]\n\nModify  g:Modeliner_format.  It is a simple format.\n\nAn example:\n    let g:Modeliner_format = 'fenc=  tw=  et  ts=  sts=  sw=  backup wrap'"}, {:name=>"Surveyor", :summary=>"High contrast colorscheme with dark background", :description=>"My first attempt at a color scheme for vim. It uses high contrast colors with a dark background.\nSeems to work pretty well under situations with high light levels.\n\nScreenshot:\nhttp://www.vulcanusgames.net/mars/vimcolors1.gif"}, {:name=>"muttrc.vim", :summary=>"A syntax file to support the syntax of devel versions of mutt", :description=>"A modified script to support the syntax of devel versions of mutt, as well as a few of the more common patches. This syntax file is for muttrc files. This is the same script that comes with the official vim, but I'm using this page to store versions of the file that are more recent than the one included in the stable vim release."}, {:name=>"CmdlineCompl.vim--Cheah", :summary=>"Word completion on the command line", :description=>"See also:\n\nvimscript#474\nvimscript#147\n\nDescription:\n\nBased on ideas from the above two plugins, but also adds the following features:\n * Word completion in a regular command line. (in addition to word completion in a search command line)\n * Word completion in the middle of the command line. (not just the end of the command line)\n\nTo use, hit F12 while in the command line. Hit F12 again to get a different completion. Repeated invocations will cycle through all possible completions. Word completion will be done in the context of the current buffer.\n\nCustomization:\n\nTo inhibit loading of this plugin, define the loaded_cmdline_compl variable.\n\nTo change the key mapping, cmap the desired key to <Plug>CmdlinecomplComplete. For example:\n\n    cmap <F11> <Plug>CmdlinecomplComplete\n"}, {:name=>"cvops-aut.vim", :summary=>"Syntax for CVOPS automation language", :description=>"Syntax file for the CVOPS (C Virtual OPerating System, http://www.celtius.com/s.asp?id=418) automation language."}, {:name=>"kid.vim", :summary=>"Syntax file for the Kid templating language", :description=>"Kid (http://kid.lesscode.org/) is a attribute-based xml templating language written in Python. This syntax file covers the language as documented in the language specification. The gzipped tarball also contains a kid ftplugin, for gvim integration and a kid ftdetect plugin so that vim highlights the file as kid rather than xml/xhtml."}, {:name=>"marklar.vim", :summary=>"Dark colorscheme based on green chalkboard colors", :description=>"marklar.vim is designed for gvim. It is used daily on both gvim and an 8 color\nxterm terminal (Terminal.app on os x).  The colors are designed to take full\nadvantage of gvim while still being recognizable (and useful) in the limited\ncolor environment.\n\nThe colors are chosen with regard to contrast, semantics and use. \n\nFor general reading, a medium contrast colors that minimize eye strain.\n\nIn situations where immediate attention to change is appropriate, strong stark\ncontrast. Errors, warnings, mode labels, for example.\n\nElements of the interface (or bits that vim wants to hide, like IGNORE), low\ncontrast.\n\nFor example, in diff mode, a blue-tinted background indicates added text, a\nred-tinted background indicates deleted text. For incsearch, a yellow-tint\nshows the match in progress. \n\nGreen is the reference color, two specific shades, in rgb: text=#71C293\nbackground=#06544a.\n\nIf the background and foreground color of your terminal can be set to these\ncolors, this colorscheme will work, even for terminals that only have 8 color\nsupport. Terminal.app on os x is an example.  I am sure there are others.\n\nGreen is the easiest color for human eyes to see. By easiest, I mean that there\nare far more green frequency color receptors in the retina than the blue or red\nones. Early monotone computer monitors chose green phosphors for this reason. I\nstarted this scheme based on a memory of an old hp monitor, but I ended up with\na color that reminds me of a green chalkboard.\n\nI use vim and its syntax highlighting to catch mistakes and recognize patterns\nin code. As I expand my use of vim as a tool, I make adjustments to contrasts.\nColors are completely a matter of taste, but this colorscheme has been designed\nincrementally from constant use. I hope you will try it.\n\n-- new -- \n\nOptional Settings.  (requires vim7) \n\nWorks much like options in vim, except using :Marklar in place of :set. A few\nexamples should make it clear.\n\n    :Marklar        <- displays a list of available options\n    :Marklar bold!  <- toggles the setting of the bold option\n    :Marklar bold?  <- queries the value of the bold option\n    :Marklar bold 1 <- sets the bold option to 1 (on).\n\nThe options:\n\n    bold   <- activates bold for a group of commonly used highlight regions.\n    ignore <- toggles Ignore region between nearly and completely invisible.\n\nThe default settings are : bold 0, ignore 1. If you prefer different defaults\nuse the :Marklar command in your .vimrc file, to set your preferences.\n"}, {:name=>"spectro.vim", :summary=>"Colorful scheme using HSL colorspace, S and L can be defined globally.", :description=>"Spectro is a colorful scheme with a dark background. The colors are defined in the HSL (Hue, Saturation, Lightness) colorspace.\nThe main interest over the RGB colorspace, is that it's easy to change the overall brightness of the scheme in order to adapt to different screens. \nThe Saturation and Lightness are defined globally with g:spectro_saturation and g:spectro_lightness, which shall be set between 0 and 255.\n\nYou can see what it looks like here : \"http://pierreantoine.lacaze.free.fr/linux/config/\n\nNote that there is no support for terms yet."}, {:name=>"StickyCursor", :summary=>"remembers the cursor position relative to the window", :description=>"The default vim behavour when switching to an open buffer is to scroll the window so the cursor will be positioned at the window's center.\n\nThis script remembers the cursor position relative to the window for every visited buffer and restores it (makes proper scrolling) when switched back to the buffer.\n\nFor more pleasure you can \":set nostartofline\" option.\n"}, {:name=>"fasm.vim", :summary=>"an indent script for fasm assembler", :description=>"an indent script for fasm assembler"}, {:name=>"django.vim", :summary=>"Syntax highlighting for Django templates", :description=>"Type \":setfiletype htmldjango\" from within Vim to select highlighting for Django HTML templates.  If you desire Django template highlighting but not HTML highlighting, type \":setfiletype django\" instead.  Items highlighted include template tags, built-in filters, arguments and comments.\n\n(N.B. For Vim 7.1 and later you shouldn't need the additional htmldjango.vim file.)"}, {:name=>"ScrollColors", :summary=>"Colorsheme Scroller, Chooser, and Browser", :description=>"SYNOPSIS:\n   This is colorscheme Scroller/Chooser/Browser.\n   With this plugin, you walk through installed colorschemes using arrow keys.\n\nSHORT USAGE DESCRIPTION:\n   Drop ScrollColors.vim into your plugin directory.\n   Type :SCROLL\n   Use arrow keys to walk through colorschemes, ? for help, Esc to exit.\n\n DETAILED DESCRIPTION:\n   1. source ScrollColors.vim  \" or drop ScrollColors.vim into\n                          \" your ~/.vim/plugins directory\n   2. Type :SCROLL\n        Another synonym is :COLOR\n   3. Use arrows to scroll thgough colorschemes.\n   4. When done, press Esc to exit. You will be prompted\n      wether to\n\n   You can download 140 colorschemes pack from:\n        http://www.vim.org/scripts/script.php?script_id=625\n   Having 140 installed colorschemes is in no way prerequisite for ScrollColors. But with ScrollColors you can preview 140 colorschemes  in couple of minutes. Have fun.\n\nCUSTOM KEY MAPPINGS:\n   You can map two keys of your choice to NextColor and PrevColor actions.\n   Choose pair of shortcut keys (for example <F2> and <f3>, or \\n and \\p)\n   and map them as follows:\n      map <silent><F3> :NEXTCOLOR<cr>\n      map <silent><F2> :PREVCOLOR<cr>\n\nWorks both in vim6 and vim7."}, {:name=>"PluginKiller", :summary=>"Helps plugin writers find trouble-causing options before their users do", :description=>"The PluginKiller helps Vim plugin writers to determine which options that users might set that will cause problems with their plugin before their users do!\n\nTo do this, the PluginKiller utilizes two instantiations of vim.  The first one is the pluginkiller server; it keeps a copy of the current potential trouble-making options.  The second vim is your working vim; in it you exercise your plugin.  Whenever your plugin works with the currently active trouble-makers, type :PKg (for PluginKiller-good).  This tells the PluginKiller server about the nice set of options it selected, and it responds with a new set.\n\nOn the other hand, whenever your plugin isn't performing up to your exacting specifications, type :PKb (for PluginKiller-bad).  This command tells the PluginKiller server about the trouble it caused, and the PluginKiller responds with a smaller set of potential troublemakers.\n\nYou'll need to repeat trying out your plugin and typing :PKg or :PKb until the PluginKiller has found the culprit option.  Its OK to quit the second vim and to use :PK to resume working with the PluginKiller server -- whether you need to quit and resume depends on how your plugin operates -- :PK just reloads the current settings that the PluginKiller wants to have tried out.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#PLUGINKILLER)\n"}, {:name=>"jr.vim", :summary=>"jr language syntax script", :description=>"This script provides syntax highlighting for the JR programming language, available at http://www.cs.ucdavis.edu/~olsson/research/jr/"}, {:name=>"JavaScript-syntax", :summary=>"Better JavaScrirpt syntax support", :description=>"Hi JavaScript and VIM funs, \n\nIf you want to use VIM to edit/view the JavaScript files, you should have this one. \nReplace it with the javascript syntax file included with the VIMRUNTIME.\n\nWhy it is here:\nBecause I found that the originaly one which packed with the VIMRUNTIME didn't work very well for the JS files in Mozilla Browser/SeaMonkey/Firefox and Dojo. So I decided to some refine on it. \n\nHope it is also useful for you~~~\n\nGood Luck,\n\nYi Zhao (ZHAOYI)\nBlog: http://linuxyz.blogspot.com/"}, {:name=>"pyte", :summary=>"A clean, light (nearly white) theme", :description=>"This is a light theme I use for coding.\nBackground is very light grey, special things are green or blue, this is for gui only and uses italic for some things (which I find very nice as its makes gvim look less console-like).\n\nScreenshot: http://leetless.de/vim.html"}, {:name=>"Sudoku-Solver", :summary=>"Plugin for solving Sudoku puzzles", :description=>"Sudoku solver plugin\n\nImportant: Vim 7.0 or later required.\n\nSudoku is a puzzle where you have to fill all the blank spaces with digits from 1 to 9 such that no row, column, or 3x3 block of cells have any digits repeated. This plugin holds a Vim script that solves Sudoku puzzles by exhaustive search.\n\nEnter the puzzle into a buffer like this:\n\n    8xx 69x xx2\n    91x xxx xxx\n    5xx xx8 xx7\n\n    xxx 2x9 xx6\n    xxx 8xx xx3\n    2xx 3x4 xxx\n\n    3xx 78x xx9\n    xxx xxx xx5\n    4xx x5x x28\n\nThe numbers represent supplied digits 1 to 9 in the puzzle. Use any other character to represent blank spaces.\n\nThen visually select the puzzle and invoke the macro binding ,s\n"}, {:name=>"Efficient-python-folding", :summary=>"Fold python code nicely and toggle with one keystroke", :description=>"Folding goes like this:\n\n1. Only top level class or function definitions are folded (no nesting)\n2. Folding is done one line after the class or function definition, so\n    for example the line 'class foo( bar )' is right above the fold\n3. Fold text is the first line of the corresponding docstring (if any)\n    together with the number of folded lines\n4. Toggle all folds on/off with the key F\n5. Toggle the fold under the cursor on/off with the key f\n6. In some rare cases folding can break down which can be fixed by :call ReFold()\n    The reason for this break down is not known sometimes it happens when jumping\n    between different files using tags.\n\nIn addition the script binds the key <Shift-e> (hint: _e_xecute) to saving the file and executing it in the interpreter assuming that /usr/bin/env exists otherwise you need to change this key mapping slightly. The keys 'gd' (hint: _g_o _d_efinition) are also bound to look for the definition of a function under the cursor similarly to the same key binding for C.\n\nInspired by vimscript #515, actually the way the number of lines are displayed is stolen from there :). A related script is vimscript #781 and a tip on toggling a fold is vimtip #108.\n\nThe content of the script is this, in case you find it more convenient to copy/paste it than downloading:\n\n\" Only do this when not done yet for this buffer\nif exists(\"b:did_ftplugin\")\nfinish\nendif\nlet b:did_ftplugin = 1\n\nmap <buffer> <S-e> :w<CR>:!/usr/bin/env python % <CR>\nmap <buffer> gd /def <C-R><C-W><CR> \n\nset foldmethod=expr\nset foldexpr=PythonFoldExpr(v:lnum)\nset foldtext=PythonFoldText()\n\nmap <buffer> f za\nmap <buffer> F :call ToggleFold()<CR>\nlet b:folded = 1\n\nfunction! ToggleFold()\n    if( b:folded == 0 )\n        exec \"normal! zM\"\n        let b:folded = 1\n    else\n        exec \"normal! zR\"\n        let b:folded = 0\n    endif\nendfunction\n\nfunction! PythonFoldText()\n    let size = 1 + v:foldend - v:foldstart\n    if size < 10\n        let size = \" \" . size\n    endif\n    if size < 100\n        let size = \" \" . size\n    endif\n    if size < 1000\n        let size = \" \" . size\n    endif\n    \n    if match(getline(v:foldstart), '\"\"\"') >= 0\n        let text = substitute(getline(v:foldstart), '\"\"\"', '', 'g' ) . ' '\n    elseif match(getline(v:foldstart), \"'''\") >= 0\n        let text = substitute(getline(v:foldstart), \"'''\", '', 'g' ) . ' '\n    else\n        let text = getline(v:foldstart)\n    endif\n    \n    return size . ' lines:'. text . ' '\nendfunction\n\nfunction! PythonFoldExpr(lnum)\n    if indent( nextnonblank(a:lnum) ) == 0\n        return 0\n    endif\n    \n    if getline(a:lnum-1) =~ '^\\(class\\|def\\)\\s'\n        return 1\n    endif\n        \n    if getline(a:lnum) =~ '^\\s*$'\n        return \"=\"\n    endif\n    \n    if indent(a:lnum) == 0\n        return 0\n    endif\n\n    return '='\nendfunction\n\n\" In case folding breaks down\nfunction! ReFold()\n    set foldmethod=expr\n    set foldexpr=0\n    set foldnestmax=1\n    set foldmethod=expr\n    set foldexpr=PythonFoldExpr(v:lnum)\n    set foldtext=PythonFoldText()\n    echo \nendfunction\n\n"}, {:name=>"derefined", :summary=>"A simplistic blue Color Scheme tailored for the 16-color Terminal", :description=>"A color scheme. Derefined.\nKind of like Torte or Astronaut. But different.\nThe colors are the same for the gui and the terminal.\n\nScreenshot: http://www.upimages.net/upload/49c1ea3b.gif\n\nSend me what's on the top of your mind:  axs221@gmail.com"}, {:name=>"initng", :summary=>"syntax for initng", :description=>"syntax hiliting of *.i and *.ii files of initng init scripts. Inherits from sh.vim and adds\nin the hiliting to start/stop {} blocks. Requires Vim 6.3 or later.\n\nhttp://www.initng.org/\n\nthis script is also available at http://glen.alkohol.ee/pld/initng/vim/"}, {:name=>"Align.vim", :summary=>"Map keys ')' and ']' to perform automatic formatting of parentheses content", :description=>"  Map keys ')' and ']' to perform automatic formatting of parentheses content, i. e., insert spaces in all proper positions.\n   Currently spaces are inserted:\n   a)After and before '(', ')', '[', ']', '+', '-', '*', '/', '%', '=', '&', '|', '^'\n   b)After and before '==', '+=', '-=', '*=', '%=', '/=', '|=', '&=', '!=','^=', '<<', '>>', '>=', '<=', '&&', '||' (and never in the middle!)\n   c)Only after (and not before) ',', '++', '--'\n\n   If syntax highlighting is enabled, script correctly handles string literals, i.e, do not change their content.\n\n   If you have nested parentheses, their content will not be formatted. It is implied that the source is edited continuously, so content of each pair of pare\n   ntheses is formatted after closing parenthesis is printed.\n\n   Bugs:\n   a) Unary '*', '&' and '-' are not handled correctly(i. e., spaces are inserted before and after no matter of context)\n   b) Final position of cursor is not always proper\n"}, {:name=>"all-colors-pack", :summary=>"all colors pack 1.0 There are 223 of them included", :description=>"This package is simply to help people who want to look at alot of color schemes.  It is all the color schemes on vim.sf.net as of March 13th, 2006 -- zipped up in a single package.  There are 223 of them included.  Every single theme was updated to its newest revision. \n"}, {:name=>"rfc2html", :summary=>"Convert a RFC into HTML easy to browse", :description=>"This little script makes a HTML file from a RFC (request for comment)\ntext file from IETF.org.\n\nThe TOC is converted into a navigation-frame and anchors inserted everywhere in the document.\n\nSome visual improvement are done : bold title, rulers between pages, etc."}, {:name=>"delins.vim", :summary=>"easy marking of corrections in a document", :description=>"This script I use for marking changes in text files with the html ins and del tags.\n\nTo mark something something to insert past the current char press <F5> in normal mode.  \"<ins></ins>\" appears. The caret is where you would expect it in insert mode.\n\nTo mark something to be deleted mark it in visual mode and press\nD.  \"<del>...</del>\" appears around it.\n\nFor convenience R (replace) in visual mode is bound to D<F5>."}, {:name=>"slr.vim", :summary=>"Statusline/Ruler rotation", :description=>"This script simply rotates around a preconfigured set of statusline/ruler formats. Some times depending on the type of editing being done it is useful to have different status lines.\n\nSee the comments in the file to see how to setup the status lines. Two status lines are already provided. Can configure in the script or in the .vimrc file.\n\n<Leader>r is the default mapping to effect a single rotation. To cycle through all statuslines/rulers keep using <Leader>r."}, {:name=>"Vimball", :summary=>"vim-based archiver: builds, extracts, and previews", :description=>"                                            [VIM VERSION 7.1 or 7.2 REQUIRED]\n\nThe vimball plugin facilitates creating, extracting , and listing the contents of \"vimball\" archives (*.vba).  Vimball also records the files extracted with it and can remove them.\n\nCREATING A VIMBALL\n\nVimball can create a \"vimball\" archive (*.vba) with the following command:\n\n   :[range]MkVimball[!] filename\n\nAs an example:\n\n    plugin/something.vim\n    doc/something.txt\n    :%MkVimball something\n\nwill create a \"vimball.vba\" archive.  Each line in the range processed by the MkVimball command simply describes where in the usual vim directory tree various files are.  I am now also providing a C source program that creates vimballs; see http://mysite.verizon.net/astronaut/src/index.html#MKVIMBALL .\n \nEXTRACTING FROM A VIMBALL\n\nUsers of a vimball archive simply need to\n\n    :vim something.vba\n    :so %\n\nand the contents of the vimball will be extracted and placed into the proper directories, no matter where the user opened up the vimball.  Furthermore, the helptags command will be automatically and transparently used to make any doc/*.txt files' contents available by the Vim help system.\n\nPREVIEWING A VIMBALL\n\nInstead of immediately sourcing a vimball to extract its contents, one may use\n\n    :VimballList\n\nto preview the contents of the vimball archive.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#VIMBALL)\n"}, {:name=>"Search-unFold", :summary=>"Fold everything except search results", :description=>"This is mainly used to display log files. The program will unfold all lines except the previous search. Additional search terms can be added and unfolded.\n:SFS --- search fold start\n:SF   ---- additional fold\n:SR   ---- reset\n:SC   ---- count number found"}, {:name=>"jbase.vim", :summary=>"Syntax highlighting for jBASE (Pick) Basic", :description=>"This is a syntax highlighting script for jBC -- the jBASE flavor of Pick Basic. \n"}, {:name=>"jbase.vim-indent", :summary=>"Indent script for jBASE (Pick) Basic", :description=>"This is an indenting script for jBC -- the jBASE flavor of Pick Basic."}, {:name=>"LargeFile", :summary=>"Edit large files quickly (keywords: large huge speed)", :description=>"Editing large files can be a time consuming process as Vim is working on a number of things behind the scenes, such as maintaining an undo database, searching for a syntax highlighting synchronization point, etc.  LargeFile.vim is a very small \"plugin\"; mostly, its just an autocmd that disables certain features of vim in the interests of speed.\n\nThere's an option:  g:LargeFile (by default, its 100).  It describes the minimum size of a file needed for it to be considered as a \"LargeFile\", in megabytes.  You may set that option in your <.vimrc>.\n\nThe plugin is based on vimtip#611."}, {:name=>"TabLineSet.vim", :summary=>"A Vim7 tabline customization", :description=>"Screenshot link:  http://www.geocities.com/eric_p_arnold/TabLineSet_eg.html\n\nSee feedback tip#1239   http://vim.sourceforge.net/tips/tip.php?tip_id=1239\n \nSynopsis:\n\n    -   Configurable, intelligent/dynamic tab field sizing.\n\n    -   See all buffers loaded in windows in all tabs.\n\n    -   New colorscheme and general presentation.  The highlighting groups are\n        defined at the end of the script.  Tweak as desired.\n\n    -   The indicator sets are customizable.\n        (It will also turn verbose mode off automatically, as needed.)\n\n        You can add the   g:TabLineSet_.*   vars to your .vimrc, where you can\n        customize tab min/max, etc., and these these indicators:\n            modified        : whether any window in the tab needs saving\n            windows         : window count in the tab\n            buffers_list    : tab label contains comma list of buffers contained\n            closers         : add hot spots (\"!\") to the tab for click-to-close\n\n            These are mostly for development, but might be useful otherwise:\n            tabnr           : include the tab number for the selected tab/window\n            winnr           : ... window number\n            bufnr           : ... buffer number\n            filler_func     : tell it to use   g:TabLineSetFillerFunc   to\n                              contain the name of a function to be evaluated\n                              at runtime.  It's proof of concept, mostly.\n\n\n    -   You can add these mappings to your .vimrc to control the verbose\n        settings on the fly:\n\n        The first one toggles all indicators off:\n\n            nmap <Leader>tv :call TabLineSet_verbose_toggle()<CR>\n\n        The second rotates through a list of option settings which\n        configurable/extensible via g:TabLineSet_verbose_sets.  See below.\n\n            nmap <Leader>tr :call TabLineSet_verbose_rotate()<CR>\n\n    -   Additional customization can be done via the filter lists.  These are\n        more complex, requiring use of regex's and such, but they allow you to\n        make arbitrary changes to the TabLine string at runtime.\n\n    -   You have the choice of editing stuff in place here, but it might be\n        better to copy the vars and highlights of interest into your .vimrc .\n        I think I've isolated it all to be easy to cut and paste, maybe.\n\n    -   Finally, the ultimate customization:  dink around with the script\n        yourself :-)\n\n\n"}, {:name=>"XHTML-1.0-Strict-vim7-xml-data-file", :summary=>"vim7 xml data file", :description=>"This is xml data file for vim7. Not required for regular (X)HTML completion but necessary for mixing (X)HTML with other XML dialects."}, {:name=>"autohi", :summary=>"highlights words like eclipse", :description=>"This plugin highlights words that do not belong to the language in c,cpp and java-buffers.  This way you can instantly see if you have typed the right variable/package/class name right.\n\nI just did this to say: \"Hey look, my vim is as good as your eclipse!\" :)\n\nThis is my first plugin and also my first submission, so please, bear with me."}, {:name=>"manuscript.vim", :summary=>"Sets text width and formatting options for manuscript editing", :description=>"Manuscript format is the page layout in which most editors prefer to receive writers' submittals of text (novels, short stories, etc.) for publication.  This small script sets text to 60 columns/five character tabs, reasonable defaults for editing a manuscript as plain text.  Printing is set to 12-point Courier.\n\nIt doesn't do much more than this; page headers and line spacing is _not_ automatically set correctly in printed output.  Nonetheless I have provided it in the hope that someone will find it useful.\n\nType \":setfiletype manuscript\" from within Vim to run the script.\n\nUse the following line in your .vimrc file to associate manuscript.vim with the \".manuscript.txt\" file extension:\n\nau BufNewFile,BufRead *.manuscript.txt setf manuscript\n\nUse the following six lines in your .vimrc file to add some useful key mappings (_mf, _mF and _MF):\n\n\" Use _mf to reformat whole document, paragraphs wrapped to 60 columns.\nmap _mf :setlocal tw=60 ts=5 sts=5 et sw=5 noai fo+=aw2tq nonu<CR>ggVGgq\n\" Use _mF to remove excess linefeeds/spaces, useful before issuing _MF.\nmap _mF :%s/^[\\n \\t]\\+/\\r/<CR>\n\" Use _MF to reformat with newlines only at the end of each paragraph.\nmap _MF :setlocal tw=99999999 nu<CR>ggVGgq"}, {:name=>"screenpaste.vim", :summary=>"pastes current GNU screen buffer in (almost) any mode", :description=>"Rationale:\nThe terminal window manager Screen http://www.gnu.org/software/screen\noffers the capability to copy and paste between windows.\nIn principle you can just do \"C-a ]\" (default) to paste the current Screen buffer into a vim buffer.\nHowever this gives unexpected results when 'paste' is not set or in Vim's command-line.\nThis script provides convenience mappings and functions to get correct results.\nAs an additional feature the current Screen buffer is available\nin any Vim instance, even those /outside/ the current screen session.\nMany commands are autodetected and the behaviour adapts automatically [:help getcmdtype()].\n\nMaps:\nAssuming the default mapleader \"\\\" and screenpaste's default mappings you can type:\n\\p   in Normal mode to put Screen buffer after cursor\n\\P   in Normal mode to put Screen buffer before cursor\n\\gp in Normal mode to put Screen buffer after cursor and leave cursor after new text\n\\gP in Normal mode to put Screen buffer before cursor and leave cursor after new text\n\\p   in Visual mode to replace selection with Screen buffer\n\\gp in Visual mode to replace selection with Screen buffer and leave cursor after new text\n\\p   in Insert and Replace mode to insert Screen buffer\n\\p   in Command-line-mode to insert Screen buffer\n\nCommands:\n\n:ScreenYank [x]\nyanks Screen buffer [into register x]\n\n:[line]ScreenPut [x]\nputs Screen buffer after [line] (default: current line) using register [x]\n\n:[line]ScreenPut! [x]\nputs Screen buffer before [line] (default: current line) using register [x]\n\n:ScreenCmdlineConf  search | sub | noesc\ntells script how to convert Screen buffer in Command-line mode\nExamples as typed with default keybindings:\n:ScreenCmdlineConf search\n:s/\\p/repl/\n:ScreenCmdlineConf sub\n:s/pattern/\\p/\n\n:ScreenCmdlineInfo\nechoes info on current Command-line mode behaviour\n\n:ScreenSearch\nsets conversion of Screen buffer inserted in cmdline for search use\n\n:ScreenSub\nsets conversion of Screen buffer inserted in cmdline for substitution use\n\n:ScreenNoEsc\nsets end-of-line only conversion for Screen buffer insertion in cmdline\n\nVimrc Examples:\nChange mappings:\nNormal and Visual mode:\nmap  <Leader>P <Plug>ScreenpastePut\nNormal mode (put before cursor):\nnmap <Leader>I <Plug>ScreenpastePutBefore\nInsert and Command-line mode:\nmap! <F7> <Plug>ScreenpastePut\nChange cmdline behaviour setting at startup:\nlet g:screen_clmode = \"sub\"\nSpecify Screen executable (default: 'screen'):\nlet g:screen_executable = \"/usr/local/bin/screen\"\nSwitch register used for Screen buffer (default: '\"' for unnamed register):\nlet g:screen_register = \"s\"\nAutomatically select pasted text in Visual mode:\nlet g:screen_visualselect = 1\nWait longer for Screen to finish writing its exchange file:\nlet g:screen_wait = '500m'\n\nMercurial repository: http://www.blacktrash.org/hg/screenpaste"}, {:name=>"VimVS6", :summary=>"Compile Visual Studio 6 projects and search in MSDN help files using VIM", :description=>"This script provides a way to compile and link MS Visual Studio 6 C++       \nprojects, jump to compiler errors, start .exe file and look up in MSDN   \nhelp files from within VIM.                                              \nThere are other projects that try to integrate VIM in Visual Studio.     \nVimVS6 does it the other way around and tries to integrate Visual Studio \nin VIM ;-)   (don't take this too seriously)                             \n                                                                         \nVisual Studio can export a make file for nmake (see menu                 \nProject -> Export Makefile... in Visual Studio). Nmake is included in    \nVisual Studio 6. VimVS6 compiles a Visual Studio 6 project using nmake   \nand the exported makefile.                                               \n                                                                         \nUsage:                                                                   \n  <F5>:    make project                                                  \n  <S-F5>:  make all                                                      \n  <C-F5>:  start .exe file                                               \n  <F2>:    search for help in MSDN files for word under cursor           \n                                                                         \n  Once per VIM session the function VVS_SetEnvironment() must be called  \n  to specify paths VimVS6 looks for the project files.                   \n  Do   :call VVS_SetEnvironment( 'projectpath', 'projectname' )          \n                                                                         \n  E.g. :call VVS_SetEnvironment( 'f:\\prog\\GALer', 'GALer' )              \n                                                                         \n  This call is not needed if only MSDN help search is used.\n\nFor details on configuration see script header."}, {:name=>"SwitchExt", :summary=>"Switch between source and header files", :description=>"It can switch between your source file (.c/.cpp files) and the related header file (.h files), to save your time :)"}, {:name=>"VhdlNav", :summary=>"Keeps track of your position in a VHDL file", :description=>"VHDL is very repetitive in nature.  Often, when looking at only a small section of code that's visibile in the window, it's difficult to glean exactly where you are.  \n\nFor example, if you have four instances of a component, each 100 lines long.  It can be difficult to know which instance your in without navigating away from your current spot, which I find annoying.\n\nTo address this, I wrote a script which shows a window displaying snippits of code representing what I consider the major entry points of the source.  The script then determines where you are relative to the snippits, and highlights the snippit above your current location.\n\nSnippits currently include:\nentity declaration\ncomponent declaration\nfirst line of an instatiation \nfirst line of a process\nhorizontal lines created from comments (displays the next line as the snippit)\n\nAs an added bonus, you can also double-click (or hit enter) in the Vhdl_Nav window to jump to the section of code represented by the snippit.\n\nThis isn't the first script I've ever written, but it's the first I've attempted to write for others to use.  So, while it's been working great for me, you've been warned.  I welcome any feedback and suggestions."}, {:name=>"smcl.vim", :summary=>"vim syntax file for SMCL files", :description=>"smcl.vim is a syntax file for Stata's smcl- and hlp-files\n\nThis syntax file will help identify: \n\n* most smcl codes\n* errors in parens, brackets, ...\n"}, {:name=>"changelog", :summary=>"Create ChangeLog entry fast", :description=>"The python script creates automatically a ChangeLog entry (GNU style).\n\n"}, {:name=>"ClassTree", :summary=>"Display class/interface hierarchy", :description=>"Define command \"CTree\" to display hierarchy of classes/interfaces defined\n\nYou must build tag file using Exuberant Ctags with option \"--fields=+i\"\n\nWorks for C#. Should work for Java and any other single-inheritance OO language."}, {:name=>"icalendar.vim", :summary=>"Syntax file for icalendar files", :description=>"This is a very rudimentary syntax file for icalendar files (.ics), used by Apple's iCal, Mozilla's Sunbird, Google Calendar, and other software. A screenshot of the syntax highlighting using the \"koehler\" colorscheme is available here: http://severinghaus.org/projects/icalendar_syntax.png"}, {:name=>"OmniCppComplete", :summary=>"C/C++ omni-completion with ctags database", :description=>"This script is for vim 7.0 or higher it provides an omnifunc cppcomplete function.\nYou can use the omni completion (intellisense) in C and C++ files.\nThis is a full vim script and you only need a ctags database.\n\nIt's not finished yet but now you can :\n\n    -   Complete namespaces, classes, structs and union members.\n    -   Complete inherited members for classes and structs (single and multiple inheritance).\n    -   Complete attribute members eg: myObject->_child->_child etc...\n    -   Complete type returned by a function eg: myObject->get()->_child.\n    -   Complete the \"this\" pointer.\n    -   Complete a typedef.\n    -   Complete the current scope (global and class scope).\n    -   Complete an object after a cast (C and C++ cast).\n    -   Complete anonymous types (eg: struct {int a; int b;}g_Var; g_Var.???). It also works for a typedef of an anonymous type.\n\n\nNotes :\n    -   The script manage cached datas for optimization.\n    -   Ambiguous namespaces are detected and are not included in the context stack.\n    -   The parsed code is tokenized so you can run a completion even if the current \n        instruction has bad indentation, spaces, comments or carriage returns between words\n        (even if it is not realistic).\n\nScreenShots :\n\n    http://vissale.neang.free.fr/Vim/OmniCppComplete/ScreenShots/screenshots.htm\n\n\n"}, {:name=>"maven2.vim", :summary=>"Compiler plugin for maven2", :description=>"This is a simple compiler plugin to use quickfix with maven2. It sets\nmakeprg to \"mvn\", and sets the errorformat appropriately. Activate\nwith \"compiler maven2\".\n\nSince this expects the pom.xml to be in the current working directory,\ntry adding something like the following to your .vimrc:\n\naugroup my-project-X\n  au!\n  autocmd BufNewFile,BufRead    */project/x/*       lcd <directory-containing-pom>\n  autocmd BufNewFile,BufRead    */project/x/*       compiler maven2\naugroup END\n\nKnown problems: the compiler output uses a 0-based column number, but vim\nexpects a 1-based column, so the cursor is off by one.\n"}, {:name=>"WinWalker.vim", :summary=>"Vim 7 windows navigator/manager", :description=>"  Features:                                            *WW_Features* {{{~\n\n   -   Navigate and manage windows and layouts with blinding speed!\n\n   -   Multiple window operations are faster and easier because it creates\n       a window navigation and management mode where all window commands\n       are familiar single chars,  i.e.  h,H,^H  and j,J,^J  etc.  If you\n       weren't using Vim in full-screen mode, you'll start considering it.\n\n   -   More added functionality:\n\n       -   Better [im]movability:\n\n           -   Enhanced push/drag for windows and buffers.\n\n           -   Push/drag/exchange buffers between windows, and windows\n               between tabs.  Use adjacent tabs as if they were extensions\n               of the current visible screen.\n           \n           -   Constrained size and placement.  Windows can be 'attached'\n               to walls or other windows.\n\n       -   Quick search/jump to any window in any tab by giving the first\n           unique char(s).  It jumps to a buffer's window, instead of the\n           default action of editing buffers in the current window.\n\n       -   More intuitive for many operations:\n           \n           -   Incremental resizing is easier, using the [HJKL] and\n               [^h^j^k^l].\n\n           -   Resize in the direction specified, unlike  wincmd + - < > \n\n           -   Windows move/push past each other more like you'd expect.\n               They can push 'between', instead of just 'maximize at far\n               side'.\n\n       -   Other usability stuff:\n\n           -   A window-level jump list for ^I/^O  movement.\n\n           -   O/^O  as a tab-capable alternative to ^Wo .\n\n           -   Various shortcuts to help keep you from breaking your\n               stride, i.e. to  :edit,  :ex  mode, sessions, macros, remapping\n\n   -   All the commands are presented as a prompt menu in the command line\n       so forgetting stuff isn't a problem.\n\n   -   Many of the commands are the same as the default Vim window  ^W  and\n       'wincmd' for easy transition, others are shifted around to be more\n       consistent.\n\n   -   Different invocation modes:  |WW_timeoutlen| for menu, key pass-through.\n       The goal is to have the menu mode there when you want it, and keep\n       quiet otherwise.  Experiment with the different methods to find\n       what works best for you.\n\n\n\n  Useful Examples:                                            *WW_Useful_Examples* {{{~\n\n    ... Or, 'How is this going to help me?'\n\n\n    Ergonomics:\n\n        Overall speed dealing with multiple windows.  Try it out:\n\n        -   Start the WinWalker menu, ^W\n        -   Open a new tab with  'N'\n        -   Open a few windows with  'n' and 'v'\n        -   Jump around a little with  '[hljk]'\n        -   Put some files in them with 'e'\n        -   Push some around with '[HLJK]'\n        -   Smack them all down with 'q'\n\n        By now you should have a feel for the difference it makes to have\n        single keys to deal with the window system.\n\n\n    AutoResizing:\n\n        -   Your screen/terminal/GUI size will no longer cramp your style.\n            Create windows that are always big enough.\n\n            Example:  You have several windows open, vertical and\n            horizontal, which you set to 80 columns, but you only have\n            120 or whatever.\n\n            -   Quickly visit each window, set the dimensions with 'c'.\n                See |WW_Misc_Menu| => |WW_presets| if you want to change\n                the values.\n            \n            -   For more individualized sizing,  'grow' the window to\n                whatever size makes sense, and use the\n                |WW_Attach_Constrain_Menu| -> lc 'lock columns' (and/or\n                'll') command to cause the window to resize itself to the\n                current size each time it is entered.\n\n            Now all those windows will resize themselves each time they are\n            entered.\n\n    Templates:\n\n    -   Store a tab to a session with the windows arranged how you\n        want.\n\n    -   Create a macro key to retrieve the template like:\n\n        <F2>    srsessname^M\n\n                s               save menu\n                 r              restore\n                  sessname      name of the session (without Session. or .vim )\n                          ^M    literal carriage return, with ^V^M or ^Q^M\n                    \n\n    Keeping Track Of Buffers:\n\n        If you're using TabLineSet.vim with the verbose option, you'll be\n        able to see all open buffers in the tabline (especially if you have\n        the 'Tabline wrapping patch' installed).\n\n        The find, '/', command will show you all loaded buffers, or '?' for\n        all buffers.\n\n"}, {:name=>"cmaxx", :summary=>"Expands user defined templates for any filetype.", :description=>"This script was inspired by Borland Delphis code template function.\n\nTemplates can be defined in text files. The filename (wihtout extension) is the template name. By entering the template name in the document and pressing the expasion key (predefined to <F6>) the template is expanded.\n\nTemplates can also use macros which will be replaced bei either a user defined or a predefined text during template expansion."}, {:name=>"magic.vim", :summary=>"Syntax highlighting for file's magic", :description=>"This script provides syntax highlighting for magic definitions of the file utility.  The highlighting is strict, everything non-matching is marked as an error (please report problems)."}, {:name=>"vbnet.vim", :summary=>"Syntax highlighting for VB.NET", :description=>"Although VB.NET is really just a new version of VB, the differences seemed large enough to warrant new syntax highlighting.  Nonetheless, this file aims to be backwards compatible with classic VB, although some deprecated VB syntax may be flagged as an error.\n\nFolding is supported. Try \":set foldmethod=syntax\".\n\nI haven't done any VB since that one semester in college. I'd appreciate someone taking over this file and submitting it to be included in Vim. I believe it to be a rename and :%s/vbnet/vb/g away from being a far superior replacement for the vb.vim included with Vim, but it is terrible at VBScript, which vb.vim also handles.\n"}, {:name=>"javaimports.vim", :summary=>"Inserts all import clauses to your java source file", :description=>"This plugin let you write your java application in vim, \nwithout taking care about import clauses. Just press `ii (` == backticks)\nto insert all neccessary imports.\n\nOnly for GNU Linux OS.\n\n"}, {:name=>"habiLight", :summary=>"A light color scheme with support of Vim 7 features", :description=>"This is a color scheme for light background. It can be used with Vim 6 and 7. It is based on nuvola from Johann Pfefferl (vimscript #719). I changed some colors and added support of punctuators, operators, vim 7 features like omni completion, spell checking...\n\nScreenshot: http://www.habermann-net.de/img/screen/habiLight.png\n"}, {:name=>"comments.vim", :summary=>"To Comment/Un-Comment single/multiple lines of code for different source files", :description=>"Global Plugin to comment and un-comment lines in different source files in both normal and visual <Shift-V> mode\nusage:\nctrl-c to comment a single line\nctrl-x to un-comment a single line\nshift-v and select multiple lines, then ctrl-c to comment the selected multiple lines\nshift-v and select multiple lines, then ctrl-x to un-comment the selected multiple lines\nsupports: c, c++, java, php[2345], proc, css, html, htm, xml, xhtml, vim, vimrc, sql, sh, ksh, csh, perl, tex, fortran, ml, caml, ocaml, vhdl, haskel and normal files"}, {:name=>"FlexWiki-syntax-highlighting", :summary=>"syntax highlighting for FlexWiki wiki", :description=>"Syntax highlighting for FlexWiki, http://www.flexwiki.com/ Also a filetype detection script which sets appropriate buffer-local options for editing long lines, etc.\n\nLatest copy can be found at http://www.georgevreilly.com/vim/flexwiki/\n\nMore details can be found at http://www.flexwiki.com/default.aspx/FlexWiki/VimPluginForFlexWiki.html\n\nThis is included in Vim 7.0\n"}, {:name=>"timing.vim", :summary=>"stopwatch timing of execution time of vim commands and command sequences", :description=>"This script provides the TIM command which measures execution time vim takes to execute given commands up to microsecond resolution (actual resolution depends on OS).\n\nExample:\n\n   TIM 2000 let x=0  \" How much time is takes to do 'x=0' 20000 times ?\n\nIf first argument after TIM is a number, it is treated as repetiion count. \nIf first argument is not a number, the command is executed once.\n\nMultiple commands, separated by bars(|) can be used under TIM command:\n\n     TIM 100 e xxx | bd  \"How much time it takes \n                                  \" to open and close the buffer 100 times\n\n"}, {:name=>"backburnerEdit_Visual_Block.vim", :summary=>"Edit text from Visual Block as if a virtual window.", :description=>" ---------------------------------------------------------------------------\n\n Edit_Visual_Block.vim :   Edit the text in a Visual Block as \n                           if it were in a virtual window.\n\n   Description:\n   \n       Creates a virtual 'edit window' inside the visual selection area.\n       Once the boundary box is drawn, you can insert/replace/cut/paste as\n       normal, and it will try to maintain the boundary box in some\n       reasonable fashion.\n\n   Usage:\n\n       i   Select a Visual Block (with ^V or ^Q), and type 'i' (default\n           mapping).  It will draw a box around the visual area, and return\n           you to Vim Normal mode.  Begin editing.  See Notes for things\n           not to do.\n\n       <ESC>\n           Hitting escape while in Vim Normal mode will terminate the\n           Edit Visual Block mode, and return to the visual block\n           selection.\n\n   Notes:\n\n   -   While this mode is in effect, for the lines that are part of\n       the seletion, characters outside of the visual block selection\n       cannot be changed,.  It needs these strings as markers for the\n       boundaries of the virtual edit window.\n\n       If changes are made, the boundary strings will be restored, with\n       other text moved inwards, if possible.\n       \n   -   Deleting or adding lines in the selected area is not handled or\n       recommended.\n\n   -   Pasting simple block-wise(\"^V\"), or line-wise (\"V\") text will\n       generally do something useful, but pasting multi-line char-wise\n       (\"v\"), will generally do something messy.\n           \n   -   Until I can decypher 'undojoin', you will have use more than one\n       'undo' at a time, i.e.  '2u' or '3u' or whatever, to undo the last\n       change while the mode is in effect.\n\n"}, {:name=>"txt.vim", :summary=>"Universal syntax script for all txt docs, logs and other types", :description=>"This is an universal syntax script for all text documents, logs, changelogs, readmes and all other strange and undetected filetypes. The goal is to keep it very simple.It colors numbers, operators, signs, cites, brackets, delimiters, comments, TODOs, errors, debug, changelog tags and basic smileys ;]\n\nVisit project site:\nhttp://www.haze.ehost.pl/spoonman/index.php5?p=9\n\nor take a look at 4 comparision screenshots (version 1.2, colors used: dusk and moria):\nhttp://www.haze.ehost.pl/spoonman/images/vim-txt-dusk-1-1.2.png\nhttp://www.haze.ehost.pl/spoonman/images/vim-txt-moria-1-1.2.png\n\nhttp://www.haze.ehost.pl/spoonman/images/vim-txt-dusk-2-1.2.png\nhttp://www.haze.ehost.pl/spoonman/images/vim-txt-moria-2-1.2.png\n\nI'd also suggest to add a file into your $HOME/ftdetect called txt.vim that contains a line:\n au BufRead,BufNewFile *  setfiletype txt\nThis way if Vim cannot detect a filetype of a file you've just opened - it sets this universal syntax.\n\nYour suggestions are very welcome."}, {:name=>"amarok.vim", :summary=>"amaroK integration for vim", :description=>"amarok.vim - amaroK integration for vim                                         \n                                                                                \nThis plugin let's you control amaroK (http://amarok.kde.org) from vim. It adds  \na menu to your gvim, and defines a new command called 'AmaroK', which let's     \nyou control amarok via Ex-commands. Since it uses the dcop-functionality of     \namaroK, you can type in any dcop command the dcop-player-interface of amarok    \nsupports. For a complete list type: dcop amarok player functions in a terminal  \n                                                                                \n                                                                                \nIf you don't like the menu, you can set the g:AmaroK_show_menu-variable to 0    \nin your vimrc and the menu will not be displayed                                \n"}, {:name=>"vimproject", :summary=>"A Python script to create nested menus in gvim to open files in a project", :description=>"A crude but useful way to quickly open files in a project, particularly those several directories deep -- saves a lot of typing. See http://whisperingwind.co.uk/index.php/free/vimproject/ for screen shots and example XML project file.\n\nThis could probably be done in vim's native scripting language, but I don't know it and can't be bothered to learn it. Perhaps one day..."}, {:name=>"TagsParser", :summary=>"Automatic tagfile updating and tag viewer", :description=>"\nThe TagsParser plugin does two things.\n\nFirst it automatically updates the tag files when you write a file out (Dynamic Tags).  This is controlled by a path so that this does not happen for every file that you ever edit.  This way as soon as you save a file, you will be able to access tags via the usual vim methods ^], :tag, :ts, ^T, etc.  There are various options in the plugin that control which files to tag.  \n\nThis is nice if you have a bunch of source that you are working on, and like to use ctags to navigate through your source, but get annoyed at manually re-tagging your source to pick up any new variables/functions/etc.\n\nSecondly, there is a tag viewer (the Tag Window) which uses the tag files created by the Dynamic Tag functionality of the script to display the tags that belong to the file you have open.  For C/C++ and Ada files, it will display the tags hierarchically, so for example, struct members get displayed below the struct they belong to.  This part of the script can be turned off if you prefer to only use the Dynamic Tags functionality.  There are many options which control what is displayed and how, and of course, these are all detailed in the included help file.\n\nConfiguring the \"TagsParserTagsPath\" or \"TagsParserProjectConfig\" options can be difficult sometimes.  The \":TagsParserPrintPath\" command can help you debug the normal tags path variable, but has not been updated to support debugging the project configurations yet.  See the \"tagsparser-config\" help file entry for more details, but this is the short version:\n\nThe first important thing to keep in mind, is to use either unix-style slashes (/), or to 'escape' your windows-style slashes when using a double quoted path (\"stuff\\\\foo\").  Alternatively single quotes can be used instead ('stuff\\foo').\n\nThe second important thing to keep in mind is that the directories used in defining the project configuration root directories must be defined using the correct slash style for your platform.  So for example, MS windows users _must_ use \"\\\" instead of \"/\".  Following is an project configuration setup:\n\n  let g:TagsParserProjectConfig = {}\n  let g:TagsParserProjectConfig['C:\\Working\\PRJ1\\Software\\Source Code'] = {}\n  let g:TagsParserProjectConfig['C:\\Working\\PRJ1\\Software\\Source Code'] = { 'tagsPath' : 'C:/Working/PRJ1/Software/Source Code/OBJ1,C:/Working/PRJ1/Software/Source Code/OBJ1/**,C:/Working/PRJ1/Software/Source Code/BSP,C:/Working/PRJ1/Software/Source Code/BSP/**' }\n  let g:TagsParserProjectConfig['C:\\Working\\PRJ2\\Software\\OBJ1'] = {}\n  let g:TagsParserProjectConfig['C:\\Working\\PRJ2\\Software\\OBJ1'] = { 'tagsPath' : 'C:/Working/PRJ2/Software/OBJ1,C:/Working/PRJ2/Software/OBJ1/**' }\n\nThis plugin supports all filetypes that Exuberant Ctags supports, along with Ada.  For Ada support I have created an Ada Mode parser for Ctags.  You can find the latest version of that parser here: http://gnuada.svn.sourceforge.net/viewvc/gnuada/tags/ At the time that I am writing this version 4.1.0 was the latest and is in this directory: http://gnuada.svn.sourceforge.net/viewvc/gnuada/tags/ctags-ada-mode-4.1.0 Directions to install the ada.c file are in the file itself, or you can use the add_ada.vim file to do the necessary updates to the ctags source for you.\n\nThere are many options that govern how the Tag Window appears, I have tried to setup the default options so that it will display nicely with out any customization, but if you so desire there should be many ways to adjust the way the window appears.\n\nPlease email me with any questions you have or bugs you find.  I am also happy to take suggestions for features or options that would make this plugin more useful for you.\n\n-------- Notable Additions -------\n- Example configuration options in help file.\n\n- Tabpage support that actually works!  (I hope)...\n\n- Debugging functionality.\n\n- TagsParserCurrentFileCWD feature (added in an earlier release, but was missing from documentation.\n\n--- Previous Notable Additions ---\n- The big addition to version 0.9 is project configurations, these are only supported in Vim 7.0.  The full details can be gathered if you check the help page for \"TagsParserProjectConfig\", but a short version is here:\nInstead of one path variable (\"TagsParserTagsPath\"), now you can configure separate paths for different 'projects'.  A project is configured using a Vim hash (dictionary), where the root directory of a project is used as the hash key.  Then a TagsPath, TagsLib, and various other variables can be configured uniquely for every project.  This should reduce the time required to find tags in each project.\n\n- Tabpages are now supported when using the Tag Window functionality.  Also added some mappings to make it easier to navigate between tabs and buffers.  See \"TagsParserCtrlTabUsage\" for detailed information.\n\n- All commands have default key mappings (such as <leader>t<space> to toggle the Tag Window On and Off - :TagsParserToggle), and these can all be overridden by a user mapping.\n\n- The TagsParserSaveInterval variable now prevents tagging a file too frequently (default of 30 second wait period).\n\n- The TagsParserTagsDir variable can now be used to change the name of the directory that is created to store tag files in (default of \".tags\").\n\n- The TagsParser functions are now autoloaded, hopefully this speeds up vim startup and reduces overhead when the TagsParser is not being used.\n\n- See \"tagsparser-changelog\" for more detailed information. "}, {:name=>"remind", :summary=>"remind syntax", :description=>"remind is a sophisticated reminder service; you can download remind from: http://www.roaringpenguin.com/penguin/open_source_remind.php"}, {:name=>"pluginbackup.vim", :summary=>"Numbered Backups.", :description=>"Holds numered backups inside a seperate directory.\n\nAutomaticly purges old backups. Standart is to hold the last 10 versions.\n\nTested with Linux, MS-Windows and OpenVMS.\n\nIMORTANT: Creating this plugin was only possible because vim 7 offers new file management functions - namely :mkdir, finddir() delete() and the new List datatype. This plugin won'g work with vim 6.x.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\nFor Support see: http://code.google.com/p/vim-scripts/wiki/NumberedBackups"}, {:name=>"colorsmartin_krischik.vim", :summary=>"My own color scheme for all OS I uses.", :description=>"I don't expect anybody bu me to like the colors. But I do think you will like the clean layout of the script file and the symbolic color names used when you plan to create your own color scheme.\n\nTested with Linux (gui, terminal, console), MS-Windows (gui, terminal) and OpenVMS (gui, terminal).\n\nOptimized for GUI use and readable with terminal and console.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n"}, {:name=>"Highlighter.vim", :summary=>"Want to mark up your files with a highlighter?", :description=>"This plugin gives you the capability to mark up your files as if you had a highlighter.\n\nIt's a really useful aid for inspecting log files and marking important sections in source code and documents (even vim help files).\n\nThe highlights are remembered, even after you close the file. You can also distribute the marks so others can see the highlights you've made.\n\nThere are a number of different highlighters available for use. (NOTE: you will probably want to create mappings for these commands)\n:WordHighlighter\nHighlight the word under the cursor\n\n:SelectionHighlighter\nHighlight the current selection. A visual mapping for this command is recommended.\n\n:SearchPatternHighlighter\nHighlight the current search pattern.\n\n:ClearAllHighlighters\nClear all highlights made in this file.\n\n:ClearCurrentHighligher\nClear the Highlighter under the cursor\n\n:ConfigureHighlighter\nOpen the configure window. From here you can configure how the highlighter colors are determined - randomized, use a favorite color, etc.\n\nLook under Plugin->Highlighter for more options.\n\nThe highlighter only works with gvim and 'syntax' must be on.  Also, the terminal must support vim colors in the format #rrggbb.\n\nComments/suggestions/complaints are gladly taken."}, {:name=>"mousefunc-option-patch", :summary=>"Patch set to create a mousefunc option", :description=>"When compiled with this patch set, gvim will have a new option, \"mousefunc\" which will call a user script function for every mouse event.\n\nThe zip file contains a test script which demonstrates how to do things like:\n\n\n\" This script tests various aspects of the \"mousefunc\" option:\n\"\n\" - demonstrate having the mouse move tabs in the tabline.\n\"\n\" - text hotspots:\tHere is mouseover |tag1| and here is |tag2|\n\"\n\" - verbose option which shows all mouse info.\n\"\n\" - mouse-follow highlighting (set s:show_bullseye)\n\"\n\" - associate actions with clicking on statusline words\n\n\n\n\n\nFrom the options.txt doc file:\n\n\n'mousefunc' 'mfn'\tstring\t(default empty)\n\t\t\tglobal\n\t\t\t{not in Vi}\n\tWhen nonempty, this option calls the given function when mouse events\n\t(click, drag, move, etc.) are detected.  The function should accept\n\tthese arguments:\n>\n\t\tMouseFunc(\tmouse_key, \n\t\t\t\t\\ buf_row, buf_col, buf_vcol, \n\t\t\t\t\\ mouse_row, mouse_col, \n\t\t\t\t\\ x, y,\n\t\t\t\t\\ area, screen_line )\n<\n\t\"mouse_key\" is a string containing up to 6 chars.  It will match\n\tagainst a string like:   a:mouse_key == \"\\<LeftMouse>\".\n\t\"mouse_key\" can be empty, particularly when cursor-move-only events\n\tare delivered.  \n\n\t\"buf_row/col/vcol\" should match line(\".\") and col(\".\") if you were\n\tto click in a buffer at that point.\n\n\t\"mouse_row/col\" are independent of windows and buffers.\n\t\n\tThe \"x\" and \"y\" are in pixels, and can be negative, when that\n\tinformation isn't available (see also |mousefocus| to have \"x\" and\n\t\"y\" track the mouse cursor).  \n\n\t\"area\" is Vim's idea of where the mouse is.  Values can be:\n\t\"IN_BUFFER\", \"IN_UNKNOWN\", \"IN_SEP_LINE\", \"IN_STATUS_LINE\".\n\n\t\"screen_line\" contains the literal characters in \"mouse_row\" which\n\thave been written to the screen, rather than any buffer.  Useful to\n\tread what's on the statusline, tabline, and command line areas.\n\t\n\tThe function should return 0 to consume the mouse click, or 1 to\n\tpass it on transparently.\n\n\tThe |mousefunc| option is set empty for the duration of the call to\n\tprevent recursion.  Setting it again during the call could have\n\tunexpected problems.\n\n\tIt intercepts the mouse events at a low level, which has its good\n\tand bad points.  The good is that you get the mouse events before\n\tother restrictions like statusline, tabline, empty regions, etc.,\n\tand receive mouse events while in any mode.  The bad is that you\n\thave to watch out for things like recursion errors (i.e.  calling\n\tgetchar() from a script function while |mousefunc| is set).\n\n\tThis function is called often when the mouse is moving, so attention\n\tshould be given to returning early out of as many cycles as\n\tpossible.\n\n\tAt the moment, drag and release events are approximated based on the\n\tlast primary event (i.e. <leftmouse> or <rightmouse> ).\n\n"}, {:name=>"GetChar-event-patch", :summary=>"Adds a new event intercepting char reads", :description=>"When compiled with this patch, Vim will have a new event, \"GetChar\".\n\nThe doc page patch:\n\n\n                            *GetChar*\nGetChar             Called immediately after a character is\n                received from the user or typeahead buffer,\n                and before it is processed.  The character is\n                available in the |v:getchar| variable as a\n                string (not a number).  Changing |v:getchar|\n                changes the value returned by the\n                |getchar()|function.  The |v:getchartype|\n                variable can be blank, 'KeyTyped', or\n                'KeyStuffed', depending on how the character\n                was obtained.  Setting |v:getchar| to ''\n                essentially skips the current character.\n"}, {:name=>"pythoncomplete", :summary=>"Python Omni Completion", :description=>"This is the pythoncomplete omni-completion script shipped with vim 7.  Updated versions will appear here, as the vim tarballs do not ship with updated runtime files.\n\nTo use this plugin, make sure ftplugins are enabled, via \"filetype plugin on\".\nFiletype detection will set the omnifunction appropriately.\n\nFeatures:\n   Dynamic type deduction (without actually evaluating statements)\n   Local visibility handling (will complete from all parent scopes).\n   completeopt=preview support, displaying python docstrings\n   Function argument completion (whenever possible)\n\nRequires Vim7 compiled with +python support."}, {:name=>"Tabline-wrapping-patch", :summary=>"Allows tabline strings to wrap onto new lines", :description=>"When compiled with this patch, Vim will allow the strings delivered via the 'tabline' option to wrap onto new lines.  It is up to the 'tabline' string or function to limit itself.   See TabLineSet.vim for an example of  a script which does this."}, {:name=>"foxpro.vim", :summary=>"syntax file for MS Foxpro v2.6 for DOS & UNIX", :description=>"Starting from the original foxpro.vim maintained by Powing Tse <powing@mcmug.org>, this version has been updated to include highlighting for proper Codebook variable naming. An issue with comments has also been corrected."}, {:name=>"abolish.vim", :summary=>"Work with several variants of a word at once", :description=>"This is a plugin over 3 years in the making that I've deferred releasing, primarily because it's so gosh darn hard to explain.  It's three superficially unrelated plugins in one that share a common theme: working with variants of a word.\n\nABBREVIATION\n\nI know how to spell separate.  I know how to spell desperate.  My fingers, however, have trouble distinguishing between the two, and I invariably have a 50 percent chance of typing seperate or desparate each time one of these comes up.  At first, I tried abbreviations:\n\niabbrev  seperate  separate\niabbrev desparate desperate \n\nBut this falls short at the beginning of a sentence.\n\niabbrev  Seperate  Separate\niabbrev Desparate Desperate \n\nTo be really thorough, we need uppercase too!\n\niabbrev  SEPERATE  SEPARATE\niabbrev DESPARATE DESPERATE \n\nOh, but consider the noun form, and the adverb form!\n\niabbrev  seperation  separation\niabbrev desparation desperation \niabbrev  seperately  separately\niabbrev desparately desperately \niabbrev  Seperation  separation\niabbrev Desparation Desperation \niabbrev  Seperately  Separately\niabbrev Desparately Desperately \niabbrev  SEPERATION  SEPARATION\niabbrev DESPARATION DESPERATION \niabbrev  SEPERATELY  SEPARATELY\niabbrev DESPARATELY DESPERATELY \n\nWait, there's also separates, separated, separating, separations, separator...\n\nAbolish.vim provides a simpler way.  The following one command produces 48 abbreviations including all of the above.\n\nAbolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}\n\nMy current configuration has 25 Abolish commands that create hundreds of corrections my fingers refuse to learn.\n\nSUBSTITUTION\n\nOne time I had an application that with a domain model called \"facilities\" that needed to be renamed to \"buildings\". So, a simple search and replace, right?\n\n:%s/facility/building/g\n\nOh, but the case variants!\n\n:%s/Facility/Building/g\n:%s/FACILITY/BUILDING/g\n\nWait, the plural is more than \"s\" so we need to get that too!\n\n:%s/facilities/buildings/g\n:%s/Facilities/Buildings/g\n:%s/FACILITIES/BUILDINGS/g\n\nAbolish.vim has your back.  One command to do all six, and you can repeat it with & too!\n\n:%Subvert/facilit{y,ies}/building{,s}/g\n\nYou can abbreviate it as :S, and it accepts the full range of flags including\nthings like c (confirm).\n\nThere's also a variant for searching and a variant for grepping.\n\nCOERCION\n\nWant to turn fooBar into foo_bar?  Press crs (coerce to snake_case).\nMixedCase, camelCase, snake_case, and UPPER_CASE are all just 3 keystrokes\naway.  These commands support repeat.vim (vimscript #2136).\n"}, {:name=>"perl_search_lib", :summary=>"update &l:path by tokens from perl \"use lib\" sentence", :description=>"this is after plugin."}, {:name=>"compilergnat.vim", :summary=>"Compiler setup for GNAT (inactive, replaced by vimscript#1609)", :description=>"This plugin is superseded by vimscript#1609.\n\nCompiler setup for the GNAT [1] compiler.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n\n[1] http://gnuada.sourceforge.net"}, {:name=>"ftpluginada.vim", :summary=>"Filetype plugin for Ada (inactive, replaced by vimscript#1609)", :description=>"This plugin is superseded by vimscript#1609.\n\nAdded the new Ada 2005 keywords.\n\nMake completion optional. This is usefull if you have tag files created with \"gnat xref -v\" in which case the builin completion works better.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n"}, {:name=>"bluez", :summary=>"Dark blueish coloscheme for urxvt  (keywords: urxvt cterm 88 color)", :description=>"Dark eye resting coloscheme designed for use in urxvt or urxvt/screen terminals.\nIt makes heavy use of the 88 colors available in this environment and it will not work in any other environment e.g. xterm or gui.\n\nYou can set a transparent background by adding\n\n'let g:bluez_transbg=1' \n\nto your vimrc."}, {:name=>"jVim", :summary=>"A vim plugin which tries to make vim's keys compatible with other editors.", :description=>"I tried to make vim a bit compatible with my old editors, so I maped CTRL+C, CTRL+V, CTRL+Y to copy, paste, del and so on, made Shift+Arrows work in insert mode as \"v\" does in normal mode, popup auto complete menu as you type, map CTRL+Right, CTRL+Left to next/prev buffer in normal mode, CTRL+N, CTRL+x to new/del buffer, and some custom settings.\n\nSee here for more:\nhttp://pijulius.blogspot.com/2006/05/jvimvim.html\n\nDon't misunderstand me, I really like vim keys, but for now I needed some compatibility with my old editor, so I thought it may be useful for someone too.\n\nAny feedback/addition/note/idea is more than welcome."}, {:name=>"Simple-Color-Scheme", :summary=>"Light blue background and simple", :description=>"This scheme is derived from print_bw and,While maintaining the simplicity of print_bw it has low contrast."}, {:name=>"ScreenShot", :summary=>"ScreenShot.vim enables you make screenshot of your VIM session as HTML code.", :description=>"ScreenShot.vim enables you generate HTML code for screenshot of all open windows at once.\nWindows layout will be preserved, and status line for every window will be displayed.\nIn other words, the resulted HTML will look the same as you VIM looks, with exception of menu, toolbar and other GUI items. \nHere(http://community.livejournal.com/screenshot_vim/4086.html) you can see a few examples.\n\nScreenShot.vim defines three commands:\n1) ScreenShot  -- to make screenshot itself\n2) Text2Html -- to generate HTML code for syntax highlighting of  peace of selected text  or of all current buffer if nothing selected. This command resemles standard command TOhtml, though has a few differences:\n   a) Generation of HTML code is designed in assumption that this code will occupy just a region of HTML page rather than all page, so it wrapped in <table> tag and has no <body> tag. Background color and default text color for this region of page will be setted properly.\n   b) Width of resulted HTML will be always equal to the width of current window. When 'wrap' setting is on, lines longer than the width of the window will wrap and  displaying continues on the next line.  When off lines will not wrap and only part of long lines will be displayed. So, you do not need to take in account long lines which may broke you page.\n   c) Foldcolumn will be displayed\n3) Diff2Html -- to display two files comparing with differencies highlighted. You may select any part of the first file, and obtain HTML code for this part and corresponding part of the second file separated with vertical split line.\n\nScreenShot.vim has a few global options which are stored in global dictionary g:ScreenShot:\n\ng:ScreenShot.Title -- is title bar enabled\ng:ScreenShot.Icon -- is VIM icon displayed in title bar (disabling of icon can significantly decrease size of document)\ng:ScreenShot.Credits -- are credits displayed\ng:ScreenShot.force_background -- force background color to some specific values \ng:ScreenShot.fill_screen -- force space from end of line to end of window to be filled with whitespaces(especially useful with command Text2Html to force highlighted text to occupy a region of HTML page with fixed width)\n\nColor should be specified as a string in HTML color format #RRGGBB. This option may be useful as there is no reliable method to find out background color for console versions of VIM.\n\nFor instance, if you want to disable icon and credits you should insert in your vimrc : \n\nlet ScreenShot = {'Icon':0, 'Credits':0, 'force_background':'#FFFFFF'}\n\nBy default all these options enabled.\n\n\n"}, {:name=>"autoproto.vim", :summary=>"Auto display function parameter in preview", :description=>"The \"autoproto\" plugin displays the function parameter/prototypes\nin the preview window if you type a left parenthesis behind a function name.\nWith this plugin it is not necessary to memorize large parameter lists.\nYou do not need to leave insert mode. Typing is almost not affected. "}, {:name=>"autoloadadacomplete.vim", :summary=>"Omni-Competion for Ada (inactive, replaced by vimscript#1609)", :description=>"This plugin is superseded by vimscript#1609.\n\nOmnicompletions which uses tags database created by \"gnat xref -v >tags\".\n\nIt is a lot simpler then the other omnicompletion plugins which is quite helpfull if you plan to write your own.\n\nNOTE: \"gnat xref -v\" is very tricky to use as it has almost no diagnostic output - If nothing is printed then usualy the parameters are wrong. Here some important tips:\n\n1) You need to compile your code first and use the \"-aO\" option to point to your .ali files.\n2) \"gnat xref -v ../Include/adacl.ads\" won't work - use  the \"gnat xref -v -aI../Include adacl.ads\" instead.\n3) \"gnat xref -v -aI../Include *.ad?\" won't work - use \"cd ../Include\" and then \"gnat xref -v *.ad?\"\n4) Project manager support is completely broken - don't even try \"gnat xref -Padacl.gpr\".\n5) VIM is faster when the tags file is sorted - use \"sort --unique --ignore-case --output=tags tags\" .\n6) Remember to insert \"!_TAG_FILE_SORTED\t2\t%sort ui\" as first line.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n"}, {:name=>"CD_Plus", :summary=>"cd completion accelerator & file browser", :description=>"\n\n Features:\n\n    Gets you where you're going with the minimum possible keystrokes:\n\n        Each key stroke is completed as it is typed.  Since I used <Tab>\n        and ^D constantly, I figured, why not make it the default?\n\n        A directory listing is maintained in a separate window.  The clean,\n        scrollable/editable directory/file completion list is in a regular\n        Vim window.\n\n        A history is maintained individually for directories and files\n        accessed.\n\n        The completion is optimized for fast directory browsing, and file\n        opening.\n\n        You can create aliases for any directory/file.  So, if you've set an\n        alias for '1', then ':cd 1<cr>' moves to that directory.\n\n\n\n    Key Commands:\n\n    ^H <BS>     The backspace keys are a combination of single char backspace\n                and immediate history \"rollback\".  They attempt to go back to\n                the first valid directory completion point.\n\n    ^W          Erase backwards a word/directory.\n\n    ^U          Clear the line.\n\n    <TAB>       Rotate through the current list.\n    <S-TAB>     \n\n    <CR>        Execute a \"cd\" command to the currently shown directory.\n\n                If <CR> is typed in the display window, the name under the\n                cursor will be copied to the command line.\n\n    <ESC>       Jump into the __CD__ display window.   <ESC> jumps back.\n                <CR> selects and jumps back.  Changes made to history lists\n                in the buffer are saved to the global history vars.\n\n    <C-F>       ^F opens the command edit window.\n\n    <C-C>       ^C quits without changing directories.\n\n    <C-N>       Forward/backward in the directory/file history.\n    <C-P>       \n\n    /           Can have special actions, see 'Navigating'\n\n    <C-L>       Refresh\n\n    <C-E>       Scroll one line\n    <C-Y>\n    <C-D>       Scroll page\n    <C-B>\n                Note : it is almost as easy to do your scrolling using\n                <ESC> to bounce to/from the display window.\n\n\n    Other Commands:\n\n        The built-in commands are implemented as aliases (as are pc-drive\n        names).  You can override them, but then it's up to you to create\n        new ones.  Enter commands after a trailing  / .\n\n    'set '      Set an alias to the current directory displayed.\n\n    'delete '   Delete an alias.\n\n    'o pt '     Sets options.  (o<SPACE>pt is to force it to match sooner.)\n        \n            -   Set display column wrap width.  Set to 0 for auto-sizing to\n                longest path name.\n\n            -   Auto-change directory.  (default is 'local', as in 'lcd')\n\n            -   Recan for pc drives, and create 'C:/' style aliases.\n\n            -   Match collapses (shortens) listings (default on; off means\n                always show full directory listing).\n\n            -   Toggle highlighting on/off\n\n\n    'sort '     Sets sorting type. (default==alpha, time, size)\n\n    'long'      Long listing toggle (sets wrap, fsize, etc.)\n\n    'help '     This listing.\n\n    'history '  Browse the history.  A separate history is accessed\n                depending on whether the current command is 'cd' or 'lcd',\n                or some other file oriented command like 'e' or 'new'.\n\n    'edit '     Switch to 'open/edit' file mode.\n    'new '      \n\n    ': '        Input other ex command.  I.e.  :vimgrep aug<CR>\n                will prepend as ':vimgrep aug /someroot/somefiles*'\n\n\n            Most of these can be abbreviated as first-char<space>  .\n\n\n        Note:   Spaces might not be displayed at the end of a line due to\n                some problem with 'echo' and 'input()'.\n\n\n    Navigating:\n\n        Every character typed will be treated as part of a directory or alias,\n        and the display will change accordingly.  Unmatched characters will\n        generally be discarded.  This takes a little getting used to, since\n        you might tend to type ahead more than will match (see also // below ).\n\n        The  /  character is somewhat special.  If you add a slash after a\n        directory name, it moves the display to that directory, and sets the\n        current 'input' value to null.  Therefore, typing aliases is best done\n        after a trailing  /  char.\n\n        Literal input:\n\n            '//' must be used to enter non-existing names.\n\n            Adding a / to the end of a line which already ends in / will\n            toggle the  'g:CD_any_input'  option (default off).\n            Normally, keys which don't match anything are thrown away unless\n            this option == 1.  It also affects what names can be taken\n            from the ^N/^P history.  Aliases are not completed, and must be\n            entered as .../full_alias<space>/\n\n\n\n    Aliases:\n\n    -   Aliases automatically have a space added after them to help\n        distinguish from directories of the same name.\n\n    -   Best way to see all aliases is to clear the line with ^U\n\n\n\n\n    Customizing:\n\n        The default key mapping is:\n\n            cnoremap <silent> <expr> e<space> ( getcmdpos() == 1 && getcmdtype() == ':' ? CD_Plus_start('e') : 'e' )\n            cnoremap <expr> cd ( getcmdpos() == 1 && getcmdtype() == ':' ? CD_Plus_start('cd') : 'cd' )\n            cnoremap <expr> lcd ( getcmdpos() == 1 && getcmdtype() == ':' ? CD_Plus_start('lcd') : 'lcd' )\n        \n        a simpler keymap might be:\n            nnoremap <leader>cd :call CD_Plus('cd')<CR>\n\n        There is a list of globals,  following the script header, which you\n        can change.  There are a few more, but these are the simple ones,\n        which can also be set via option aliases.\n\n            g:CD_rc_file                default: $HOME . '/.vim_cd_plus'\n                                    Most globals and history are saved\n                                    here.\n\n            g:CD_autochdir          'off', 'local', or 'global'\n\n            g:CD_dsp_wrap_len       default 19, specifies display column\n                                    wrapping.\n\n            g:CD_any_input          0 or 1, the starting value for literal\n                                    input (also set by trailing // toggle).\n\n            g:CD_scan_pc_drives     0 or 1, whether to attempt to discover\n                                    pc drive names (like C:, D:, etc.) and\n                                    create aliases for them.\n\n        If you want to customize the highlighting or sorting, it's a little\n        more complicated.  For highlighting, there is an 'init' function\n        that needs to be changed.  For sorting, an entry must be added to\n        the g:CD_aliases dict var (see top of script), and a new function\n        must be defined to do the sorting.  See the Sort_by_ftime() or\n        Sort_by_extension() functions for examples.\n\n\n\n    Caveats:\n\n    -   Works only with 'shellslash' on.\n    -   Restoring the command line height is a true pain in the ass.  It\n        works most of the time, though that is little consolation.\n    -   Tabbing is a little slow on large directory lists because of the\n        redraw requirement.  It isn't much a problem, though since it's only\n        noticable when you hold the tab key down.\n"}, {:name=>"xul.vim--peyronel", :summary=>"Support autocompletion (CTRL-XCTRL-U): balises and attributes with XUL files.", :description=>"Support autocompletion (CTRL-XCTRL-U): balises and attributes with XUL files.\nIt's easy to extend to others XML files.\n"}, {:name=>"Toggle-Window-Size", :summary=>"Toggle the OS Window size(s) of GVIM", :description=>"This will maximize/restore the height and width of the OS Window containing GVIM.  It allows you to specify what the maximum sizes are and will restore the original size and position."}, {:name=>"icansee.vim", :summary=>"Custom color scheme for maximum legibility on dark background.", :description=>"Black (dark) background, with no obnoxious bold colors.  My attempt at a clean, legible color scheme, tested for half a year with various solaris/linux/windows file types (scripts/configs/etc.).\nTested on vim 6.x - 7.0.\n"}, {:name=>"KDE-GVIM-vimopen", :summary=>"Opens a file in a currently running GVIM instance", :description=>"This approximates the Open In... functionality of the Windows GVIM implementation.  If there is currently one or more instances of GVIM open, a dialog box is presented which lists them and allows one to be selected.  If the \"new\" option is picked then a new instance is created.  The last-selected instance is the default."}, {:name=>"Neverness-colour-scheme", :summary=>"A dark colour scheme", :description=>"Since I did not like any of the colour themes for one reason or another, I did my own.\n\nScreen shot with C, Python, LaTeX and Email files: http://www.kierun.org/screen_shot_vim.png\n\nCriticism and comments are welcome. "}, {:name=>"Rainbow-Parenthsis-Bundle", :summary=>"Colors Parenthsis", :description=>"Based on the original rainbow_parenthsis from john gilmore but enhanced for gui mode.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts"}, {:name=>"patchreview.vim", :summary=>"Plugin for doing single or multipatch code reviews and workspace diff reviews", :description=>"The Patch Review plugin allows single or multipatch code or diff reviews to be done in VIM.\n\nIt opens each affected file in the patch or workspace diff in a diff view in a separate Tab.\n\nVIM provides the :diffpatch command to do single file reviews but can not handle patch files containing multiple patches as is common with software development projects.  This plugin provides that missing functionality. \n\nIt also improves on :diffpatch's behaviour of creating the patched files in the same directory as original file which leads to project workspace pollution.\n\n(Keywords: codereview, codereviews, code review, patch, patchutils, diff, diffpatch, patchreview, patchreviews, patch review, vcs, scm, mercurial, bazaar, hg, bzr, cvs, monotone, mtn, git)"}, {:name=>"forth.vim", :summary=>"Syntax highlighting for the Forth programming language", :description=>"This version is an update of the version shipped with Vim 6.X and 7.X. I have only tested it with Vim 7.X.\n\nNew version allows highlighting of \"space errors\" in comments (e.g. trailing spaces and/or tabs). Thanks to Benjamin Krill for this nice feature. To turn it on, add the following line to your vimrc:\n\nlet forth_space_errors=1\n\nIf you have switched it on, you can turn off highlighting of trailing spaces in comments by setting forth_no_trail_space_error in your vimrc. If you do not want the highlighting of a tabulator following a space in comments, you can turn this off by setting forth_no_tab_space_error.\n\n\nComment for the Initial upload:\n\nThomas E. Vaughan send me a patch, to allow words end with a parenthesis. Such a trailing parenthesis will now no longer start the highlighting for stack comments.\n\nI have also added a fix for a bug in the script, that led to an annoying W18 warning while parsing the script. Bill McCarthy and Ilya Sher found that bug in 2004!\nShame on me, I thought I had applied that fix *two* years ago to the offical version.\nWelcome to embarrassment city :-\\"}, {:name=>"ftdetectada.vim", :summary=>"Filetype detection for Ada (inactive, replaced by vimscript#1609)", :description=>"This plugin is superseded by vimscript#1609.\nAdded *.gpr to the list of Ada files. While GNAT project files are not realy Ada they share the same keywords and concepts like use of Attributes so using Ada syntax highlight works quite well for them\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n"}, {:name=>"gtd", :summary=>"TODO List Plugin and Syntax based-on \"Getting Things Done\"", :description=>"A file-type plug-in and syntax file for the Vim editor that provides readers of David Allen's book, \"Getting Things Done\", a way to manage their task lists from within Vim.\n\nScreenshots, installation instructions and a user's guide is available at:\nhttp://www.bartholomew.id.au/projects/gtdwithvim/\n\n\nThis is my first Vim script, so if anyone has any recommendations (especially to improve portability and compatibility with other Vim versions) please contact me."}, {:name=>"rails.vim", :summary=>"Ruby on Rails: easy file navigation, enhanced syntax highlighting, and more", :description=>"TextMate may be the latest craze for developing Ruby on Rails applications, but Vim is forever.  This plugin offers the following features for Ruby on Rails application development.\n\n1. Automatically detects buffers containing files from Rails applications, and applies settings to those buffers (and only those buffers).  You can use an autocommand to apply your own custom settings as well.\n\n2. Unintrusive.  Only files in a Rails application should be affected; regular Ruby scripts are left untouched.  Even when enabled, the plugin should keep out of your way if you're not using its features.\n\n3. Easy navigation of the Rails directory structure.  gf considers context and knows about partials, fixtures, and much more.  There are two commands, :A (alternate) and :R (related) for easy jumping between files, including favorites like model to migration, template to helper, and controller to functional test.  For more advanced usage, :Rmodel, :Rview, :Rcontroller, and several other commands are provided.\n\n4. Enhanced syntax highlighting.  From has_and_belongs_to_many to distance_of_time_in_words, it's here.  For easy completion of these long method names, 'completefunc' is set to enable syntax based completion on CTRL-X CTRL-U.\n\n5. Interface to rake.  Use :Rake to run the current test, spec, or feature.  Use :.Rake to do a focused run of just the method, example, or scenario on the current line.  :Rake can also run arbitrary migrations, load individual fixtures, and more.\n\n6. Interface to script/*.  Generally, use \":Rscript about\" to call \"script/about\" or \"script/rails about\".  Many commands have wrappers with additional features: \":Rgenerate controller Blog\" generates a blog controller and edits app/controllers/blog_controller.rb.\n\n7. Partial extraction and migration inversion.  :Rextract {file} replaces the desired range (ideally selected in visual line mode) with \"render :partial => '{file}'\", which is automatically created with your content.  The @{file} instance variable is replaced with the {file} local variable.  :Rinvert takes a self.up migration and writes a self.down.e\n\n8. Integration with other plugins.  :Rproject spawns  NERDTree (vimscript #1658) or creates a new project.vim (vimscript #69) project.  :Rdbext loads database settings from database.yml for dbext.vim, vimscript #356 (and this happens by default under most situations).  Cream users get some additional keybindings, and all GUI users get a menu.\n\nIf you like rails.vim and use Git, please Watch the repository on Github at http://github.com/tpope/vim-rails, and try my Git wrapper fugitive.vim: vimscript #2975 http://github.com/tpope/vim-fugitive"}, {:name=>"abnf", :summary=>"Initial Augmented BNF syntax script", :description=>"Provides basic ABNF syntax highlighting, modeled closely after the excellent BNF syntax script by Michael Brailsford. All errors are my responsibility, however.\n\nI welcome feedback, comments or a new owner for this script. :-)"}, {:name=>"montz.vim", :summary=>"Port of montz color-theme from Emacs.", :description=>"This is a close approximation of the Montz color theme from Emacs.\nBackground is grey/white.  Colors should be similar in console and Gui.\n\n"}, {:name=>"redstring.vim", :summary=>"Dark background colorscheme designed for console and Gui.", :description=>"This colorscheme combines some of the ideas from the colorschemes darkzen vimscript #1402 and understated vimscript #1405.  It colors comments in a dark grey so that they don't distract you from seeing the code, but they are there if you need them. It should look similar in both console and Gui.  It looks really good for Python and Javascript, and hopefully will look good for other languages."}, {:name=>"php.vim--Hodge", :summary=>"PHP Syntax", :description=>"PHP syntax file, with several bug fixes, improvements and additions.  Should be up-to-date with all features of PHP 5.1.4.  If anything is missing, broken, not working well on your setup, or an inconvenience for you, please let me know, all feedback is welcome: <toomuchphp-vim at yahoo.com>.\n\n\nNew and improved highlighting features include:\n===============================================\n\n- User-defined special functions (__autoload(), __construct(), etc)\n- Built-in constants (STDIN, STR_PAD_LEFT, etc)\n- Built-in classes (stdClass, Exception, Reflection, etc)\n- Built-in interfaces (Iterator, Serializable, etc)\n- Complex expressions inside double-quoted strings using { }\n- Support for PCRE patterns\n  (Patterns are only recognized if the pattern is inside the\n  function call.)\n- Braces are colored to help you see when they are mismatched.\n\n\n* You can find a complete list of available options near the top of the syntax file.\n\n* Release 0.9 is the official 'stable' release, however I do encourage you to use the latest version as it shouldn't have any bugs either."}, {:name=>"SQLComplete.vim", :summary=>"SQLComplete is a SQL code completion system using the omnifunc framework", :description=>"SQLComplete.vim is a plugin which uses the new Vim7 OMNI completion features (intellisense code completion).\n\nSQLComplete.vim version 4.0 is included in the Vim 7.0 release.\nSQLComplete.vim version 5.0 is included in the Vim 7.1 release.\nSQLComplete.vim version 6.0 is included in the Vim 7.2 release.\nSQLComplete.vim version 9.0 is included in the Vim 7.3 release.\n\nWhat does it do:\n-----------------------\nCompletion for the SQL language includes statements, functions, keywords, operators and database options which it draws from the current SQL syntax file in use.  Vim ships with 9 different SQL syntax files (Oracle, Informix, MySQL, SQL Anywhere, ...).  You can choose different SQL dialects using the command  (see :h sql-dialects):\n:SQLSetType sqlanywhere\n:SQLSetType <Tab> will cycle through the installed dialects.\n\nIt will also dynamically complete tables, procedures, views and column lists with data pulled directly from within a database.  It does this in conjunction with the dbext.vim \"vimscript #356\".  For detailed instructions and a tutorial see :h omni-sql-completion.\n\nExisting instructions can be found within Vim7 using \n:h sql.txt\n:h sql-completion\n\nThis plugin is new to Vim7.  Improvements to the script will be uploaded here, and supplied to Bram for inclusion into future versions of Vim7.\n"}, {:name=>"systemverilog.vim", :summary=>"SystemVerilog syntax highlighting", :description=>"Since there didn't seem to be a SystemVerilog syntax file yet for Vim, I wrote this.\nIt's based on the existing Verilog mode from Vim 6.3.\nAll language keywords are defined, as are most builtin method/task/function names."}, {:name=>"settlemyer.vim", :summary=>"A skyblue/darkgrey/spring green color scheme with a dark background.(screenshot)", :description=>"This is my first gvim color scheme and it has been adapted from a wonderful .emacs file I found online by someone named Brad Settlemyer (http://deepcopy.org/emacs/dotemacs).  Since I moved to vim I had been looking for a theme like this and I couldn't find one so I tried my best to re-create it.\n\nYou can find a screenshot on the color scheme list here:\nhttp://www.cs.cmu.edu/~maverick/VimColorSchemeTest/index-c.html\n"}, {:name=>"findstr.vim", :summary=>"Using MS-Windows findstr utility to search for text with Vim", :description=>"Overview\nThe findstr plugin integrates the MS-Windows findstr search utility with\nVim. You can use this plugin to search for a pattern or text in multiple\nfiles in the current directory or in a directory tree and easily jump to the\nmatches. This plugin is useful only on MS-Windows based systems where the\nfindstr utility is available.\n\nUsage\nThe findstr plugin introduces the \":Findstring\", \":Findpattern\",\n\":Rfindstr\" and \":Rfindpattern\" Vim commands to search for text and patterns\nin files.\n\nThe \":Findstring\" command is used to search for literal strings in files in\nthe current directory. The \":Rfindstring\" command is used to search for a\nliteral string in the files in a directory tree.\n\nThe \":Findpattern\" command is used to search for a regular expression\npattern in files in the current directory. The \":Rfindpattern\" command is\nused to search for a regular expression pattern in the files in a directory\ntree.\n\nThe syntax of these commands is\n\n   :Findstring [ <options> ] [ <search_string> [ <file_name(s)> ] ]\n   :Findpattern [ <options> ] [ <search_pattern> [ <file_name(s)> ] ]\n   :Rfindstring [ <options> ] [ <search_string> [ <file_name(s)> ] ]\n   :Rfindpattern [ <options> ] [ <search_pattern> [ <file_name(s)> ] ]\n\nIn the above commands, all the arguments are optional.\n\nYou can specify findstr options like /i (ignore case) to the above command.\nIf the <options> are not specified, then the default findstr options\nspecified by the variable Findstr_Default_Options is used. Refer to the\nfindstr MS-Windows documentation for the command-line options supported by\nthe findstr command.\n\nYou can specify the search text/pattern as an argument to the above\ncommands.  If the <search_pattern> is not specified, then you will be\nprompted to enter a search pattern. By default, the keyword under the cursor\nis displayed for the search pattern prompt. You can accept the default or\nmodify it. The regular expression patterns supported by the findstr command\ncan be used in the pattern argument. Refer to the findstr MS-Windows\ndocumentation for more information.\n\nIf you want to specify a search pattern with space characters or a\nmulti-word pattern, then you should use the \":Findstring\" command text input\nprompt to supply the pattern.\n\nYou can specify one or more file names (or file patterns) to the above\ncommands.  If the <file_names> are not specified, then you will be prompted\nto enter file names.  By default, the pattern specified by the\nFindstr_Default_Filelist variable is used. To specify the file name(s) as an\nargument to the above commands, you have to specify the search pattern also.\n\nWhen you enter only the command name, you will be prompted to enter the\nsearch pattern and the files in which to search for the pattern. By default,\nthe keyword under the cursor is displayed for the search pattern prompt.\nDepending on the command, you may prompted for additional parameters like\nthe directories to search for the pattern.\n\nYou can retrieve previously entered values for the \":Findstring\" prompts\nusing the up and down arrow keys. You can cancel the command by pressing the\nescape key.  You can use CTRL-U to erase the default shown for the prompt\nand CTRL-W to erase the previous word in the prompt. For more information\nabout editing the prompt, read ':help cmdline-editing' Vim help topic.\n\nYou can cancel the \":Findstring\" command when you are prompted for a search\npattern or file names by pressing the <Esc> key. You cannot cancel (or kill)\nthe findstr command after the external command is invoked.\n\nYou can map a key to invoke \":Findstring\". For example, the following map\ninvokes the \":Findstring\" command to search for the keyword under the\ncursor:\n\n      nnoremap <silent> <F3> :Findstring<CR>\n\nThe output of the findstr command will be listed in the Vim quickfix window.\n1. You can select a line in the quickfix window and press <Enter> or double\n   click on a match to jump to that line.\n2. You can use the \":cnext\" and \":cprev\" commands to the jump to the next or\n   previous output line.\n3. You can use the \":colder\" and \":cnewer\" commands to go between multiple\n   findstr quickfix output.\n4. The quickfix window need not be opened always to use the findstr output.\n   You can close the quickfix window and use the quickfix commands to jump\n   to the findstr matches.  Use the \":copen\" command to open the quickfix\n   window again.\n\nFor more information about other quickfix commands read \":help quickfix\"\n\nConfiguration\nBy changing the following variables you can configure the behavior of this\nplugin. Set the following variables in your .vimrc file using the 'let'\ncommand.\n\nThe \":Findstring\" command will prompt you for the files in which to search\nfor the pattern. The 'Findstr_Default_Filelist' variable is used to specify\nto default value for this prompt. By default, this variable is set to '*'.\nYou can specify multiple matching patterns separated by spaces. You can\nchange this settings using the let command:\n\n      :let Findstr_Default_Filelist = '*.[chS]'\n      :let Findstr_Default_Filelist = '*.c *.cpp *.asm'\n\nThe 'Findstr_Default_Options' is used to pass default command line options\nto the findstr command. By default, this is set to an empty string. You can\nchange this using the let command:\n\n      :let Findstr_Default_Options = '/i'\n\nBy default, when you invoke the \":Findstring\" command the quickfix window\nwill be opened with the search output.  You can disable opening the quickfix\nwindow, by setting the 'Findstr_OpenQuickfixWindow' variable  to zero:\n\n      :let Findstr_OpenQuickfixWindow = 0\n\nYou can manually open the quickfix window using the :cwindow command.\n"}, {:name=>"crt.vim", :summary=>"A colorscheme in the spirit of old crts. Changeable selection of 20 schemes.", :description=>"This is a colorscheme with a dark grey background and foreground colors reminiscent of old crts -- yellows, bright greens, ambers, and whites. I find that the colors are easy on the eyes and non-distracting. There are 20 variations that can be changed on the fly. Works with gui, 8, 16+, and 256 color terms (see 256 color xterm). Any preferred variation can be made the default by setting a user-defined variable \"T_CO\" in the vimrc file with a statement like \"let T_CO = 259\". The colors can be changed within vim with \":set t_Co=259\". (259 - looks like a green blackboard.)"}, {:name=>"css.vim--Streppone", :summary=>"CSS compiler file", :description=>"This compiler script allows to validate CSS files within vim, through W3C's CSS validation web-service. The compiler file invokes a helper perl script that connects to jigsaw.w3.org and reports all css errors and warnings, showing them up directly in the vim buffer (with :copen command, BTW).\n\nSurely the script can be made better in many ways.\nSuggestions welcome!\n\nREQUIREMENTS:\n- a [dr]ecent perl interpreter installed\n- WebService::Validator::CSS::W3C module installed from CPAN.\n"}, {:name=>"tcl.vim", :summary=>"Tcl syntax TEST version", :description=>"I am experimenting with updating the syntax file for Tcl. I have added more \"keywords\" and I have enable the syntax highlighting of an option flags starting with \"-\" (i.e. -padx, -text).\n\nSince Tcl doesn't officially have keywords they may need to be pared down since I added all of the Tcl and Tk commands from the Tcl wiki page.\n\nNote: This is basically just something I am working on and not for consumption. However, if you have suggestions or requests please email me.\n\nNote: You need to put \"let tcl_extended_syntax=1\" in your vimrc to get the extra OO syntax coloring. Otherwise you get the \"standard\" syntax coloring."}, {:name=>"cr-bs-del-space-tab.vim", :summary=>"Use CR-TAB-DEL-SPACE-TAB in Normal Mode like in Insert Mode", :description=>"Use the keys: \"Return, Backspace, Delete, Space, Tab\" in Normal-Mode like you are used from Insert-Mode.\nVery usefull to do some code cleanup in Normal-Mode, or to make some place for copy/paste action. Or just to delete a line fast and easy.\n(or insert a new line.....). "}, {:name=>"FlagIt", :summary=>"Add some flags to your code", :description=>"FlagIt privides a simple way to flag lines with a set of signs.\n\nScreenshot: http://sexylizard.org/images/flagit.png\n(Icons from http://tango.freedesktop.org/Tango_Desktop_Project)\n\nA configuration example is provided in the script header.\n\nUsage:\ng:Fi_Flags\n\ta dictionnary which describes the flags\n\tSynopsis:\n\tan item: '\"flagName\" : [\"aUrlToTheImagePath\", \"aText, One or two character\", uniq, \"additionnal options\"]'\n\n\t\"flagName\" : an uniq identifier\n\t\"aUrlToTheImagePath\" : The path to a pixmap. The flag will be drawn as a pixmap (if GUI avaible and g:Fi_OnlyText is 0).\n\t\"aText\" : One or two character. The flag will be drawn as a text (if GUI not avaible or g:Fi_OnlyText is 1)\n\tuniq : If 1, only one instance of this flag will be drawn, else multiple instance will be allowed\n\t\"additionnal options\" : options added to signs definition (cf. \"sign define\")\n\n\texample:\n\t\tlet g:Fi_Flags = {\"fixme\" : [\"/home/login/.vim/signs/fixme.png\", \"!!\", 0, \"\"],\n\t\t\\ \"error\" : [\"/home/login/.vim/signs/error.png\", \"XX\", 1, \"texthl=ErrorMsg linehl=ErrorMsg\"] }\n\ng:Fi_ShowMenu\n\tIf 1 and Gui avaible and g:Fi_OnlyText is 0, a menu will be added to the ToolBar.\n\ng:Fi_OnlyText\n\tIf 1, pixmap will not be used\n\nFlagList\n\tList all avaible flags\n\nFlagIt flagName [line number]\n\tAdd a flag. If line number is not provided, current line is uses\n\tIl a flag is already presents, it will be removed\n\nUnFlag [flagName]\n\tRemove all flags of type flagName\n\tIf flagName is not provided,  remove all flags\n\nFlagDemo\n\tJust a way to draw all kind of flags (for test)\n\nTODO:\nsave flags (Modelines ? session ? dedicated file ?)\n"}, {:name=>"lookupfile", :summary=>"Lookup files using Vim7 ins-completion", :description=>"Now requires Vim 7.1 version.\n\nLookupfile is a very simple approach to opening files by typing a pattern to\nrepresent the file you are looking for, and selecting a file from the completion\ndropdown to open in the current Vim session. It provides a consistent interface\nto lookup files by various means (tags, path, buffers, external tools etc.). It\nuses the new Vim7 insert-mode completion mechanism to show matching files.\n\nThe most part of the plugin is autoloaded so it doesn't increase the startup time and doesn't take up Vim resources until it is used for the first time.\n\nHere are the list of commands that the plugin defines:\n        LookupFile      Lookup files from tag files. This is a like a fast GNU\n                        find on name. It can lookup files from any Vim\n                        compatible tag file (which includes those from ctags),\n                        but at the moment it is advisable to generate\n                        specialized tag files using :find command (see\n                        |lookupfile-tags|).\n        LUPath          Lookup files from 'path' using |globpath()|. The :find\n                        command while being able to lookup files from 'path', it\n                        doesn't provide any completion mechanism, and it is\n                        clumsy when there are multiple files with the same name.\n                        The :find command doesn't even accept a pattern.\n        LUBufs          Lookup loaded files (buffers) using |bufname()|. This is\n                        a great addition to whatever buffer-explorer you are\n                        using. When there are too many buffers open, this\n                        sometimes makes it easy to find the right buffer, by\n                        typing part of its name.\n        LUWalk          Lookup files using |glob()|. This works like the Emacs\n                        ido.el, allowing you to walk up and down a path looking\n                        for files. If you use the filename completion with :edit\n                        command, then you will find this a lot more convenient\n                        and faster to use.\n        LUArgs          Lookup files from |:args| list.\n\nIt is also very easy to add new commands to or customize the plugin at various\nlevels. At the simplest, you can create custom command on top of the above that\neither pass dynamic arguments or tmporarily change the settings (e.g., you could\nhave a command that will start LUPath with the 'path' temporarily changed to\nfind only the include header files). You can also take advantage of the the\n|lookupfile-extend| features to add new commands that lookup files from a\ncompletely new source. You can even add commands that lookup something\ncompletely different than a file (like e.g., a spelling using spellsuggest()).\n\nFor more information install the plugin and type :h lookupfile after running :heptags command.\n\nHere is what users have to say about the plugin:\n    - I am thoroughly enjoying your lookupfile script -- it's just awesome! -- Reva Revadigar (regarding :LookupFile and :LUWalk commands)\n    - I use Lookupfile a couple of hundred times a day -- Max Dyckhoff (regarding :LookupFile command)\n    - I tried the new plugin. Excellent! Exactly what I want. -- Eddy Zhao (regarding :LUWalk command)\n\n\n\nSearch_Key_Words: lookupfile util utils lookup complete completion filename open edit file tags path ctags glob globpath Hari Krishna Dara"}, {:name=>"vim-addon-background-cmd", :summary=>"keep on working while compiling your project", :description=>"see Example in doc\n\nusing KISS implementation now\n\nUse vim-addon-manager to install this plugin:\nhttp://www.vim.org/scripts/script.php?script_id=2905\n\ngit repo: http://github.com/MarcWeber/vim-addon-background-cmd\n\nrenamed from runtaskinbackground -> vim-addon-background-cmd"}, {:name=>"tobase", :summary=>"Convert from base(2,8,10,16) to base(2-32). Also character to html entity.", :description=>"Number base converter and character to html entity converter.\nPlugin script for vim on any OS. \n\n(1) Number/character base converter:\nGet a quick answer about a number or character without having\nto refer to an external chart or calculator.\n\nSyntaxes are \n :Tobase obase inum\n :Tobase obase [0oxy&]inum -- Optional modifier is '0,o,x,y,or &'\n\nConvert inum to obase and and return it.\nThe result will be placed in the unnamed register @@ \nwhere a subsequent 'p' command would put the result \n|P| before, |p| after the cursor. \nOptional modifier preceeding inum indicates input base\nof octal, hexadecimal, binary, or html character entity (e.g., &Auml;).\nVersion 1.2 has been extended to allow input number to be a character. \n(note: vy captures 1 character under the cursor.)\n(note: inum may be pasted from the mouse copied from any screen.)\nInput base defaults to decimal if not preceeded by a modifier.\nOutput base may be 2-32, c, or h (c-character, h-html).\nMultiple numbers can be input at once.\n\nYou could define a command to reduce typing Tobase e.g.,\ncommand -nargs=* C Tobase <args>\nThen you could execute it like the following examples:\n:C 16 101              -- prints 65\n:C c 192 193 xc2  -- prints 3 accented capital A's: grave, acute, circ\n\n(2) Convert characters to/from html entities:\nFunction call Syntaxes\ncall Char2HtmlExec() -- Characters to entities (everything on all lines)\n[range] call Char2HtmlExec( [min, max, [string] ] ) -- Characters to entities\n[range] call Html2CharExec( [min, max, [string] ] ) -- Entities to characters\n[range] call Char2AsciiExec( [min, max, [string] ] ) -- Characters to ascii simulation\n\nThe optional [range] may be line numbers such as 1,15 \nor it may be relative such as .-5,.+5 or markers such as 'a,'b.\nRange may also be searches such as /line with this/,/line with that/\nIf range is omitted, or if range equates to just 1 line, it does all lines.\n\nThe optional [min, max, [string] ] goes like this:\nmin and max are numbers or characters which evaluate via Tobase\nto the range of 128 to 255.\nIf both min and max are equal to 0, it means 'do not convert any entities'.\nIn order to specify the optional [string], both min and max must be present.\nThe optional [string] is useful to specify whether to convert \nthe & < > \" to or from &  <  > \"\nIf [string] contains & it should be the first one.\n[string] can contain any combination of & < > \"\n\nThus, [range] call Char2HtmlExec(0, 0, '& < > \"') \nwould cause html in [range] to display literally in the browser.\n\nIt is easier for me to put these commands in my ~/.vimrc file:\ncommand! -range -nargs=* Foo <line1>,<line2>call Char2HtmlExec(<f-args>)\ncommand! -range -nargs=* Foof <line1>,<line2>call Html2CharExec(<f-args>)\ncommand! -range -nargs=* Fooa <line1>,<line2>call Char2AsciiExec(<f-args>)\nThose commands should be entered exactly as seen.\nYou may use other names besides Foo, Foof, and Fooa.\n\nCommand syntaxes\n[range] Foo [ min max [string] ]\nIn the command, note that there are not commas between the arguments\nand there are not any parentheses, i.e., Foo(128, 255, '&<>\"') is wrong!\n\nWith the commands in place the syntax is easier:\nFoo        - convert all accented characters to entities and convert & < > \"\nFoo j      - (j)ust convert & < > \"\nFoo n      - (n)ot convert & < > \"\n\n:Tobase -h    (Help)\n:Tobase -hc  (Character conversion help)\n\nTo run from the command line, a script like this could do the job:\n\"::::::::::::::\n\"foo.vim\n\"::::::::::::::\n\"vim -e input_file_name < foo.vim\n\"c:\\vim\\vim62\\gvim.exe -e input_file_name +\"source foo.vim\"\n\"                                                                         :help gui-w32-cmdargs\n:if argc() == 1 && exists(\"*Char2HtmlExec\")\n    :let ofile=argv(0) . '.tmp'\n    :call Char2HtmlExec()\n    :execute ':w!' . ofile . \"\\n\"\n:endif\n:q\n"}, {:name=>"Erlang-plugin-package", :summary=>"A pre-release of a plugin package for Erlang.", :description=>"Erlang plugin package.\n\nIncludes indenting, syntax highlighting, folding, partial omni completion.\n\nThere is a repository at:\nhttp://github.com/oscarh/vimerl"}, {:name=>"actionscript.vim--Jethani", :summary=>"Syntax file for ActionScript", :description=>"This is a simple syntax highlighting script for ActionScript 3.0."}, {:name=>"verilog_systemverilog.vim", :summary=>"Extending Verilog syntax highlighting for SystemVerilog", :description=>"This script extends Verilog syntax highlighting, which comes along with Vim 6.3, and adds SystemVerilog stuff to it. It will recognize Verilog and SystemVerilog syntax in *.v, *.vh and *.sv files. The new syntax is named as \"verilog_systemverilog\". If your scripts are loaded correctly, you should see this syntax name when you execute the Vim command \":set syntax?\" in your Verilog/SystemVerilog files."}, {:name=>"myghty.vim", :summary=>"Syntax script for Myghty", :description=>"This is a syntax script for Myghty (Python embedded in HTML). It was created from mason.vim just by replacing all \"perl\" occurences by \"python\".\nThen slight modifications in regular expressions were introduced to match differences between Mason and Myghty syntax.\nSeems to work well."}, {:name=>"ShowFunc", :summary=>"Show/Jump to Function/Class name", :description=>"This small utility define commands to display the type/function name the cursor in. You can also jump to the closest function/type name in scope.\n\nCommand:\n    SFunc -- Show type/function name\n    JFunc  -- Jump to closest type/function name in scope\n\nshortcut:\n     ,f    -- call SFunc\n     \\f    -- call JFunc\n\nIt doesn't relies on ctags file, but it use the syntax file in vim 7.0. It should work for C#/Java/C++, but it has best support for C#. In addition to function, it can also recognize property/event in C#.\n\n"}, {:name=>"skk.vim", :summary=>"Japanese SKK", :description=>"This script is an implementation of the Japanese SKK (Simple Kana to Kanji\nconversion program).\n\nThis script is no longer maintained here.\nYou can get newer versions of skk.vim from vimscript #3118."}, {:name=>"unimpaired.vim", :summary=>"Pairs of handy bracket mappings", :description=>"Much of unimpaired.vim was extracted from my vimrc when I noticed a pattern: complementary pairs of mappings.  They fall into three categories.\n\nThere are mappings which are simply short normal mode aliases for commonly used ex commands. ]q is :cnext. [q is :cprevious. ]a is :next. [b is :bprevious.  See the documentation for the full set of 16 mappings and mnemonics.  All of them take a count.\n\nThere are linewise mappings. [<Space> and ]<Space> add newlines before and after the cursor line. [e and ]e exchange the current line with the one above or below it.\n\nThere are mappings for encoding and decoding. [x and ]x encode and decode XML (and HTML). [u and ]u encode and decode URLs. [y and ]y do C String style escaping.\n\nOh, and there's also [o and ]o to go to the next/previous file in the directory.\n\nhttp://github.com/tpope/vim-unimpaired"}, {:name=>"octave.vim--Castro", :summary=>"Another syntax highlighting file for octave", :description=>"This script is based in the matlab syntax file, however it adds a few significant features:\n\n* Supports the octave syntax, including things like endwhile, the # comment, the strings delimited by ' and \", etc.\n\n* Highlights the predefined functions like normal_cdf, sqrt, etc...\n\n* Highlights any functions defined in the file being editted, for example if you are editting a file containing something like this:\n\nfunction my_function()\n  ...\nendfunction\n\nit will highlight appearances of my_function in the current file."}, {:name=>"crestore.vim", :summary=>"Save (restore afterwards) the current file before using a quickfix command.", :description=>"The script \"crestore.vim\" provide the command \"Crestore\". Before using a quickfix command the script\nwill save the current file and cursor position. Using \"Crestore\" will restore the file (and cursor position) used before.\n \nUsage:\n\n1. Run a quickfix command: vimgrep, make etc.\n2. Jump around in the list, fix errors....\n3. Type \"Crestore\" to go back to the file you used before. Quickfix window will be closed. "}, {:name=>"comment.vim--Joshi", :summary=>"Comment-Uncomment Single/Multiple Files -added Tex file format", :description=>"Global Plugin to comment and un-comment different\nsource files in both normal and visual <Shift-V> mode\n\nRefer to Jasmeet Singh Anand&#039s Original \\\"comment.vim\\\"\nEntire script is copied and I, Keyur Joshi have just added support for two more file formats \\\".tex\\\" and \\\".bib\\\""}, {:name=>"showhide.vim", :summary=>"Show or Hide lines by folding based on pattern", :description=>"A simple script to quickly show/hide lines of interest. Useful for viewing log files or other huge files in general.\n\n Uasge:\n     zs    Show all lines containing word under cursor\n     zh    Hide all lines containing word under cursor\n\n     :SHOW word pattern ...\n           Show lines containing either word or pattern\n     \n     :HIDE word pattern ...\n           Hide lines containing either word or pattern\n\n           -- pattern can be any regular expression --\n\n  See \":h fold\" for commands related to folds, e.g.,\n     zn\t   Open all folds\n"}, {:name=>"warsow.vim", :summary=>"Syntax script for WarSoW player config and HUD files", :description=>"This is a syntax script for WarSoW game config and hud script files. It features all commands, variables and keywords for player config files and variables, constants and operators for HUD scripting files.\n\nChangelog:\n1.0.21 Release (2.01.2007)\n- update for War§oW 0.21 version changes\n- added dynvars\n\nVisit project page on:\nhttp://www.haze.ehost.pl/spoonman/index.php5?p=8\n\nExamples (using dusk.vim colorscheme):\nhttp://www.haze.ehost.pl/spoonman/images/warsow-vim1.png\nhttp://www.haze.ehost.pl/spoonman/images/warsow-vim2.png\n\nYour suggestions are very welcome. I plan to maintain and update this file as WarSoW development continues."}, {:name=>"blacklight", :summary=>"Dark colorscheme. Looks like a black light.", :description=>"Works in gui and 256 color xterm."}, {:name=>"color_toon", :summary=>"Colorscheme utility.", :description=>"Shows the colors and the cterm/gui numbers of the colors. Shows the current syntax highlighting of the color scheme.\nYou can change the highlighting colors and save a copy\nin a 'myjunk.vim' colorscheme.\n\nUsage: Colortoon\n       Colortoon d  - shows 2nd group of 127 cterm_gui colors\n       Colortoon j  - sets colors from last myjunk.vim file\n       \n        (1) First, run Colortoon.\n        (2) Get the desired range of colors into the NamedColors window:\n              If cc is mapped to Colorchange as in the suggested setup,\n              typing cc will type for you the command line:\n              Colorchange h 9\n              Following 9<Space>, type a number between 0 and 6.\n                0 or blank - All the colors (too many for vim < 7)\n                1 - 1st group of 182 named colors (only for guifg and guibg)\n                2 - 2nd group of 182 named colors (only for guifg and guibg)\n                3 - 3rd group of 182 named colors (only for guifg and guibg)\n                4 - 1st group of 128 cterm_gui colors\n                5 - 2nd group of 127 cterm_gui colors\n                6 - All 255 cterm_gui colors (too many for vim < 7)\n\n                4 or 5 is recommended.\n                You may follow the number with a space and the letter r if you\n                want to see color blocks instead of colored lettering.\n\n              Step (2) may be repeated whenever desired.\n                \n        (3) Position to desired hi group in myjunk window and type :y b\n        (4) Position to desired color in NamedColors window and type :y a\n        (5) Colormake                 - Set foreground color per registers a,b\n            Colormake b               - Set background color per registers a,b\n            If you mapped cm to Colormake as in the suggested setup,\n            type cm instead.\n\n         In steps 3 & 4, ':y a' means :y<SPACEBAR>a<RETURN>\n                                   or :yank<SPACEBAR>a<RETURN>\n                                   or \"ayy\n \n                               ':y b' means :y<SPACEBAR>b<RETURN>\n                                   or :yank<SPACEBAR>b<RETURN>\n                                   or \"byy\n                         \n                        If you consistently(!) reverse a and b, it still works.\n\n\nYou can also try editing the line in the myjunk window, then copy and \npaste that line to the command line which will also update highlighting.\nYou can copy the line with  yy\n                 and paste it with  :@\"\n"}, {:name=>"yanktmp.vim", :summary=>"enables vim to yank and paste through the multi processes", :description=>" This plugin enables vim to yank and paste through the multi processes.\n\n If :call YanktmpYank(), yank string write to tmpfile.\n And :call YanktmpPaste_p() or YanktmpPaste_P(), paste string from tmpfile.\n\n Default tmp file is '/tmp/vimyanktmp'\n If you want to change tmp file.\n let g:yanktmp_file = '/tmp/example_tmp_file'\n\n==================== file yanktmp.vimrc ====================\nmap <silent> sy :call YanktmpYank()<CR>\nmap <silent> sp :call YanktmpPaste_p()<CR>\nmap <silent> sP :call YanktmpPaste_P()<CR>\n==================== end: yanktmp.vimrc ====================\n"}, {:name=>"highlight.vim", :summary=>"Highlight lines or patterns of interest in different colors", :description=>"   Line mode\n     <C-h><C-h>   Highlight current line \n     <C-h><C-a>   Advance color for next line highlight\n     <C-h><C-r>   Clear last line highlight\n\n   Pattern mode\n     <C-h><C-w>   Highlight word under cursor (whole word match)\n     <C-h><C-l>   Highlight all lines having word under cursor (whole word match)\n     <C-h><C-f>   Highlight word under cursor (partial word match)\n     <C-h><C-k>   Highlight all lines having word under cursor (partial word match)\n     <C-h><C-s>   Highlight last search pattern\n     <C-h><C-d>   Clear last pattern highlight \n\n     <C-h><C-n>   Clear all highlights\n\n   All above commands work in both normal & insert modes.\n   <C-h><C-h> also works in visual mode. (Select desired lines & hit <C-h><C-h>)\n\n"}, {:name=>"pop11.vim", :summary=>"Syntax highlighting for Pop-11", :description=>"Basic syntax highlighting for the Pop-11 programming language (http://www.poplog.org/) and some common extensions (objectclass and poprulebase)."}, {:name=>"Smooth-Scroll", :summary=>"Smooths scrolls the window for various key mappings", :description=>"\" Smooth Scroll\n\"\n\" Remamps \n\"  <C-U>\n\"  <C-D>\n\"  <C-F>\n\"  <C-B>\n\"\n\" to allow smooth scrolling of the window. I find that quick changes of\n\" context don't allow my eyes to follow the action properly.\n\"\n\" The global variable g:scroll_factor changes the scroll speed.\n\"\n\"\n\" Written by Brad Phelan 2006\n\" http://xtargets.com\n"}, {:name=>"developer", :summary=>"clean colorscheme like MSVS 8.0", :description=>"A clean developer colorscheme like MSVS 8.0"}, {:name=>"tcl.vim--smithfield", :summary=>"tcl syntax file", :description=>"tcl.vim (syntax)\n\n    An updated and complete syntax coloring scheme for tcl. Uses the 12 syntax rules of tcl as a starting point.\n\nADDITIONS/CORRECTIONS:\n    \n    Line Continues can be optionally highlighted as Warnings.\n\n    [set set set] does the right thing.\n\n    [set ^canvas [canvas create ...]] does the right thing.\n\n    For [list ...], the subsequent expression is lit like a normal command. Also for [uplevel xx ...].\n\n    The improved interaction of comments with line continuation and braces based on user feedback.\n\n\nFEATURES:\n\n    Handles a wide variety of escaped expressions correctly.\n\n    Multi-line comments following a semi-colon.\n\n    Spell checking (when spell is enabled) for strings and comments.\n\n    8.5 syntax: apply, chan, dict, lassign, lrepeat, unload, {expand} and {*} and the new math expressions, all the new words.\n\n    Added error state to line continues that have trailing spaces, these are errors in a tcl script and now they are immediately visible. (thank you Ilya).\n\n    \"if {0} {}\" multi-line commenting idiom.\n\n    Smart syntax folding for procs, namespaces, and several itcl constructs - only folds the outer braces\n\n    Nested parens brackets braces and quotes.\n\n    Primary commands, secondary commands, and options.\n\n    Highlights implicit expressions, such as the first group after an 'if' statement, or the second group after a 'for' statement.\n\n    Colors expressions and math keyworks; but only inside expressions.\n\n    Easily extended to include other packages. \n\n    Current Extensions:\n        snit (vimscript #1715)\n        sqlite (vimscript #1716)\n        itcl (vimscript #1765)\n        togl (vimscript #1766)\n        critcl (vimscript #1775) \n\n    Highlight options to adjust the level of coloring. (default is most 'colorful').\n "}, {:name=>"colornames", :summary=>"Show named colors / cterm colors with hex code and name colorized in a window", :description=>"Show named colors / cterm colors with hex code, name, colorized in a window\n\n Named colors work in gui only - no color in xterm\n\n cterm/gui colors work in gui and 256 xterms\n\ncall Showhexcolornames() - show all, do not clear syntax\n\ncall Showhexcolornames(b) - show all (background), do not clear syntax\n\ncall Showhexcolornames(9) - show all after clearing syntax\n\ncall Showcolornames(n) - show nth 182 named colors or nth cterm colors\n                                             do not clear syntax.\n                    [n: 1-3, named]\n                    [n: 4-5, cterm]\n                    [n: 10,11, cterm (hsv sorted)]\n                    [n: 12-14 named (hsv sorted)]\n                    [n: 20-24 mixed (hsv sorted)]\n                    [hsv sorted: black->red->green->blue->purple]\n\n\ncall Showcolornames(9,n) - show nth 182 named colors or nth cterm colors\n                                                after clearing syntax.\n                    [n: 1-3, named]\n                    [n: 4-5, cterm]\n                    [n: 10,11, cterm (hsv sorted)]\n                    [n: 12-14 named (hsv sorted)]\n                    [n: 20-24 mixed (hsv sorted)]\n                    [hsv sorted: black->red->green->blue->purple]\n\n\n    n, b, 9 may be combined as in\n                            Showhexcolors(9,4,5) - clear/ show all cterm\n                            Showhexcolors(9,1,2,3) - clear/ show all named\n                            Showhexcolors(9,r,4) - clear/ show 1st cterm\n                                                                    group in background blocks\n\n\n    n=0 - all named colors\n    n=6 - all cterm colors\n    n=7 - all mixed colors (hsv sorted)\n    n=15 - all named colors (hsv sorted)\n    n=16 - all cterm colors (hsv sorted)\n\n    n=20 - mixed, hsv sorted, \"blacks to whites\n    n=21 - mixed, hsv sorted, \"reds to yellows\n    n=22 - mixed, hsv sorted, \"yellows to greens\n    n=23 - mixed, hsv sorted, \"blues\n    n=24 - mixed, hsv sorted, \"purples\n\n    r   - same as b (or background, or reverse) \n\ncall Showhexcolornames(8) - cleanup highlighting added by Showhexcolornames\n\nvim < 7 only can show 223 simultaneous highlight groups.\n        Once that limit is exceeded, the colors will be random until exit.\n        Therefore use 1, 2, 3, 4, or 5 (group of) colors in call.\n        Also use 9 - clear syntax, since it needs to clear syntax \n        to avoid the 223 limit which makes random colors.\n\nvim 7 does not have max 223 colors problem\n\nThis script is also used by color_toon.vim for selecting colorscheme colors.\n"}, {:name=>"gsl.vim", :summary=>"Syntax file for gsl templates", :description=>"gsl.vim provides syntax highlighting for GSL templates; more information about GSL can be found on iMatix's site, http://www.imatix.com/products ."}, {:name=>"HelpWords", :summary=>"search vimhelp for paragraphs containing given words(substrings) in any order", :description=>"\" This script searches vimhelp for paragraphs containing\n\" given words (substrings), in any order, and non-adjacent.\n\" Scripts defines commandHELPWORDS and it's synonym, HW.\n\"              Usage: HW word1 word2 ...\n\" This command will search vimhelp for paragraphs\n\" containing all given words, in any order (and non-adjacent).\n\" To proceed to the next match, us :cn command.\n\"\n\" Example: HW normal count\n\" will find all paragraphs that talk about normal-mode counters.\n\"\n"}, {:name=>"color_peruse", :summary=>"Peruse, compare, choose color schemes", :description=>"Peruse, compare, choose color schemes\n\nWhen the cursor is in the ColorPeruse window:   \n<kPlus>      :ColorPeruse 1             (next color)\n<kMinus>    :ColorPeruse -1            (prev color)\n<kMultiply> :ColorPeruse                 (original color)\n<kDivide>   :ColorPeruse 0              (color under cursor)\n     =             :call ColorPeruseDel() (remove duplicate lines)\n     +             :call ColorPeruseMerge() (append all :set rtp colors to list)\n     ?      Help\n     :q     quit\n \n\nYou are in vim when in the ColorPeruse window, so you can edit items you \ndon't like from the list, or place markers to return to re-view particular colorschemes.\nYou can cut/paste to put favorites or color/lightness groups together \nto compare more closely.\nAlso, since it is in vim, you can save the ColorPeruse list to a file, or \nload it from a previous perusal list.\n\n\n"}, {:name=>"Chrome-syntax-script", :summary=>"Syntax script for RemObjects Software's Chrome compiler", :description=>"This is a syntax script for RemObjects Software's Chrome compiler. That is, for those, who don't know, a compiler for the .NET-Framework or Mono-Framework (which should be almost the same, except for the OS). I just wrote it from the chm help file shipped with the compiler. I just used attributes for color terminals because I got the Windows version without gui so I can't use any other attributes. Maybe the script is not compatible to your shell (though an 8 color terminal is a rather rare sight in these days). And I don't know anything about the least vim version (I asumed 6.0 because it is one major version before the today's, I got 6.4 and it works fine.)\nI'm not opposed to feedback from users, so don't be afraid to make my POP3 server work. The address is nullplanwichmann@web.de, and the preferred language is german (my mother tongue) because all the spam I get is english, so I can filter easily. Don't worry: A handwritten mail won't see the dephts of my spam directory. At least I think so."}, {:name=>"Ada-Bundle", :summary=>"Complete Ada-Mode as Vim-Ball or Tar.bz2", :description=>"Contains all files for the new Ada mode. It also has a vim help file which you can call with\n\n:help ada.txt.\n\nIncluded is:\n\n - Syntax highlight\n - Auto indenting\n - Tag searching\n - Classic code completion\n - Omni code completion\n - Online help\n\nFor some functionality you need a ctags programm. You can user either \"gnat xref -v\" or a patched [1] version  of the  exuberant Ctags [2].\n\nDon't forget to actualy activate filetype and syntax support:\n\n:filetype plugin indent on\n:syntax enable\n\nThe Ada mode can be be further extened with the following Scripts:\n\n - backup.vim,\t\t\t\tvimscript#1537\n - rainbow_parenthsis.vim,\tvimscript#1561\n - nerd_comments.vim,\t\tvimscript#1218\n - matchit.vim,\t\t\t\tvimscript#39\n - taglist.vim,\t\t\t\tvimscript#273\n\nThe GNU Ada project [3] offers ready patched binary rpm's including the Ada-Mode, all the scripts mentioned above and Ada aware exuberant Ctags for easy installation.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n\n[1] vimscript#1535\n[2] http://ctags.sourceforge.net\n[3] http://gnuada.sourceforge.net"}, {:name=>"IncRoman.vim", :summary=>"Cope with Roman numbers", :description=>"Increase or decrease a Roman number found under the cursor, with [count].\nIf a decimal number is found it is converted into its corresponding Roman\nnumber, ignoring the [count].  Any other word is converted to the Roman\nnumber that [count] corresponds to.\n\nRange: I .. MMMCMXCIX (1..3999)\nHigher numbers result in more than three \"M\"s.\n\nThere are interface mappings: <plug>IncRoman and <plug>DecRoman .\nThey can be mapped globally or local to buffer, the latter is the default.\nFrom the script:\n    nmap <unique><buffer> <C-A> <plug>IncRoman\n    nmap <unique><buffer> <C-X> <plug>DecRoman\n\nTherefore if you want to use the script as a plugin, you should define\nglobal keys in your .vimrc:\n    nmap <C-A> <plug>IncRoman\n    nmap <C-X> <plug>DecRoman\n\nOther scripts with support for Roman numbers:\nvimscript #197 genutils : General utility functions\n    genutils#Roman2Decimal(str)\nvimscript #431 VimFootnotes : Insert various types of footnotes\nvimscript #670 VisIncr : Produce increasing/decreasing columns of numbers, dates, or daynames\nvimscript #2120 speeddating.vim : Use CTRL-A/X to increment dates, times, and more\n\nLast Change: 2007 Jan 11"}, {:name=>"Access-SQL-Syntax-file", :summary=>"full access syntax highlighting", :description=>"Including:\n asql.vim - syntax definition file\n filetype.vim - with automatical access sql recognition\n synmenu.vim - modified menu file\n\nfor lower versions than 7:\nWARNING: I tried to replace filetypes.vim with that from this package, but in version 6.4\nIt won't run and it completely disable all filetype autodetections... So if you have lower version\nthan 7 please excuse me, you must extend your autodetection In filetypes yourself,\nIf someone have done it, please send it to me, i will include, if not, I will do that as soon as possible"}, {:name=>"vj", :summary=>"color scheme", :description=>"This scheme is well suited for low and high light condition."}, {:name=>"phps", :summary=>"colors like .phps", :description=>"It for people who like PHP (http://www.php.net/).\nI try to find script for vim, that have same colors like .phps file, i can't found it. And then i write my color scheme...\nit's color scheme only for GUI version.\n\n\nAny suggestions, patchs and new versions mail me to MishaStrij@Mail.Ru - i write your name here)))"}, {:name=>"Satori-Color-Scheme", :summary=>"Satori is an elegant and clean color scheme for Vim", :description=>"Satori is an elegant and clean color scheme for white or black background terminals. This color scheme has been developed under Terminall.app on  Mac OS X but it also looks great in another Unix variants. \n\nDevelopment version in http://code.google.com/p/ruda/source/browse/trunk/vim/satori.vim"}, {:name=>"SWIG-syntax", :summary=>"Syntax file for SWIG", :description=>"This is a syntax file for SWIG (Simplified Wrapper Interface Generator) description files.  The default syntax for .i files highlights comments in a reverse color scheme which is really horrible.  This syntax builds on vim's c++ syntax by adding highlighting for common swig directives and user defined directives.  For an alternative syntax, see  vimscript #1247 (which I found after writing this).  "}, {:name=>"tdl.vim", :summary=>"Vim syntax file for the TreeDL 2.3 language", :description=>"TreeDL stands for Tree Description Language. See http://treedl.sourceforge.net for details."}, {:name=>"afterimage.vim", :summary=>"Edit PNG and GIF icons by converting them to XPM", :description=>"This plugin converts PNG and GIF icons to XPM with ImageMagick when edited in vim. XPM is an easy to edit plain text image format (it looks great in gvim, too).  The plugin is handy for quick changes to small icons; bigger files are of course more managable in a traditional image editor.\n\nSee a screenshot at http://yfrog.com/37afterimagep .\n\nAs a bonus, support is also provided for PDFs, Word documents, and Mac OS X plist files.\n\nhttp://github.com/tpope/vim-afterimage"}, {:name=>"cshelper", :summary=>"Highlights the highlighting groups of the colorscheme you are editing.", :description=>"Color Scheme helper\n\nThis just highlights the highlighting groups of the color scheme you are\nediting in the current buffer -- so that you can see what you are doing.\n\n:CShelper   - Do 'color g:colors_name' of the file in the buffer, then do CShelperHL\n\n:CShelperHL - update highlight from current buffer\n"}, {:name=>"vimtips_with_comments", :summary=>"a package of all tips from vim's homesite with all comments", :description=>"   Yes, we can get a tarball of vimtips from http://vim.sf.net/tip_download.php, but there are several things missing, for example, there is no comments and no rate record. But they are really very helpful especially when there are many tips in the tip's comments inspired by the current tip. And the rate is also very useful when we need to review tons of tips. Sometime I want to sort all the tips based on the quotient of rating, usally I can find some very useful but not popular tips by this way :)\n   In fact, I think there are many other ways to make full use of vim tips, I think post tips about how to make full use of vim tips as a new vim tip will be interesting ;) \n   I make this tarball to make my life easier and hope it will be helpful to you. \n\n   In practice, I use the following script to grab all the scripts. It is not perfect but it works well. Feel free to modify it to make it more powerful and don't forget to tell about your progress :)\n\n==================================>8=========================================\n\n#! /usr/bin/env bash\n\nw3m -dump http://vim.sourceforge.net/tips/tip.php?tip_id=$1 |cut -c 28- | sed -ne '1i\\\n======================================================================\\\n\n1,4d\n/^\\s*\\[Add Note\\]/Q\np'\n\n===================================>8===========================================\n\n   TODO: \n        * add a colorscheme for tips with comments\n   \n\n"}, {:name=>"scvim", :summary=>"syntax highlighing, interaction and help/class def lookup for Supercollider", :description=>"See http://x37v.info/scvim/ for more details. [and the most up to date version].\n\nHi, these are my supercollider interaction scripts and syntax highlighting for vim.\n\nIt works on both linux and osx.\n\nSo far I have:\n\n    * Syntax Highlighting\n    * The ability to single lines, visual blocks or supercollider blocks (ie surrounded by parens) to sclang\n    * key bindings for s.freeAll, thisProcess.stop() [cmd-. in the SC editor], TempoClock.clear()\n    * In-line Help\n    * In-line Class Look-up"}, {:name=>"phpx", :summary=>"Like phps colorscheme, similar to php net. Light background. Xterm capability.", :description=>"Like phps colorscheme, looks similar to php net. \nLight background colorscheme.\nxterm support."}, {:name=>"TIMEIT", :summary=>"Time execution of vim command(s) with subsecond resolution", :description=>"\" Time execution of vim command(s) with subsecond resolution,\n\" For example:\n\"      :TIM sleep 100m\n\" prnits\n\"      Execution took   0.100301 sec.\n\" With counter, TIMEIT times that many repetitions of the command:\n\"      :10TIM sleep 100m\n\" prints:\n\"      10 repetitions took   1.039352 sec.\n\" You can use sequence of |-separated commands under TIM:\n\"      :10TIM syntax off | syntax on\n\" This will time ten repetitions of (syntax off | syntax on)\n\" sequence, not 10 repetitions of \"syntax off\" followed by\n\" one untimes \"syntax on\".\n"}, {:name=>"phpfolding.vim", :summary=>"Automatic folding of PHP functions, classes,.. (also folds related PhpDoc)", :description=>"This script can fold PHP functions and/or classes, properties with their PhpDoc, \nwithout manually adding marker style folds ({{{ and }}}). It will generate the following \nfolds when executed:\n\n<?php\n/**\n* This is Foo...\n* @author Foo\n*/\nclass Foo {\n+-- 11 lines: function fooFunction($bar) ** -----------------------------------------\n+--   8 lines: function fooFunction2($bar) ** ----------------------------------------\n+-- 24 lines: function fooFunction3($bar) -------------------------------------------\n}\n\n+--112 lines: class Foo2 ** -------------------------------------------------------------\n?>\n\nBased on e.g. functions declared like this:\n\n<?php\n/**\n * This is fooFunction...\n * \n * @param mixed $bar \n * @access public\n * @return void\n */\nfunction fooFunction($bar) {\n    [...]\n}\n?>\n\nSCREENSHOT\nYou can view a screenshot here: http://www.fighterz.net/trig/folding.gif\n\nFEATURES\n- It remembers fold settings. If you add functions and execute the script again, \n  your opened folds will not be closed.\n- It will not be confused by brackets in comment blocks or string literals.\n- The folding of class properties with their PhpDoc comments.\n- The folding of all class properties into one fold.\n- Folding the original marker style folds too.\n- An \"**\" postfixing the fold indicates PhpDoc is inside (configurable).\n- An \"**\#@+\" postfixing the fold indicates PhpDocBlock is inside (configurable).\n- Empty lines postfixing the folds can be configured to be included in the fold.\n- Nested folds are supported (functions inside functions, etc.)\n\nFUTURE\n- Better 'configurability' as opposed to editting the PHPCustomFolds() function and\n  some \"Script configuration\" global variables.\n\nNOTE\nIf anyone has emailed me and I have not replied, it's probably lost. I just found out \nhotmail recognizes alot as junk. I now turned off the junk filter..\n\nNOTE2:\nI'm currently more active again with this project, so if you have any contributions to \nthis project, please let me know.\n\nCOMPATIBILITY\nThis script is tested successfully with Vim version >= 6.3 on windows and linux\n(With 6.0 it works *sometimes*, I don't recommend using it in that version)"}, {:name=>"pastie.vim", :summary=>"Interface with pastie.org; read and create pastes", :description=>"This script lets you read and create pastes at http://pastie.org/ .  Pastes can be created from a range, a register (including the clipboard), any number of files, all open windows, or an existing paste.  It automatically maps between Vim filetypes and pastie's parsers.  Details for how to use the :Pastie command are included in the comments at the top of the plugin.\n\nPastie is the preferred method of sharing code in the Ruby IRC community.\n\nhttp://github.com/tpope/vim-pastie"}, {:name=>"x12-syntax", :summary=>"Highlighter for X12 EDI(electronic data interchange) files", :description=>"A simple syntax highlighter for EDI X12 files -\nIt does not validate the correctness of X12s. Just highlights the file. \nCurrently only Healthcare 270/271s are tested."}, {:name=>"liquid.vim", :summary=>"Vim syntax file for Liquid Templates", :description=>"This highlights Liquid Template Files ( http://home.leetsoft.com/liquid )\nIt recognizes tags, outputs and comments as well as highlighting \nRuby instance variables.\n\nIt sets the file type to html so that it highlights html as well. If this shouldn't be automatic for some reason, let me know how it should be and I'll change it.\n\nEnjoy ;)"}, {:name=>"doriath.vim", :summary=>"a nice mellow dark green scheme", :description=>"This theme is _loosely_ based on my old friend the desert colorscheme, but is geared more toward a forest-green/sea-green appearance.\nThis colorscheme was tested only in GVIM so I have no clue what it does in terminal vim."}, {:name=>"findfuncname.vim", :summary=>"Find the name of the function you are editing", :description=>"This is similar to the tip I posted previously, except I made a few fixes and made it self-contained as a plugin.\n\nThe script contains a function called 'FunctionName()' that returns the name of the function you are currently working in.  This is handy if you got there through a search, or are in a large function or small screen/window and can't see the function's name.  \n\nThis on-command (I've seen some that constantly display in the status line) function uses a search pattern to search for a pattern that matches every function declaration I've tried in C, Objective-C, C++, Perl, and Python with the caveat that the function declaration must start on the first character of the line.  I'll fix this one of these days, since Java files will break on that particular point.\n\n"}, {:name=>"XChat-IRC-Log", :summary=>"Syntax highlighting for X-Chat IRC log files", :description=>"This syntax script provides highlighting for X-Chat's log files, as well as for any text copied and pasted from X-Chat."}, {:name=>"gnuchangelog", :summary=>"Changelog support like Emacs/GNU", :description=>"Enhances the default changelog support with a global mapping that opens and adds an entry in the appropriate ChangeLog file.  The entry now includes the edited filename and if configured, the class/method/function name.  The function that finds the class/method/function name can be configured with filetype plugins so that one can use different tag searchers for different languages.\n\nThe ChangeLog file is only edited if it already exists, which  is searched upwards starting in the directory where the  edited file is located.  If the corresponding ChangeLog file is already opened, the script either splits the window to edit the buffer or switches to the window where the buffer is already opened.\n\nThis behavior is identical to how emacs handles ChangeLog  files with the change-log-mode provided by C-x 4 a.\n\nSee also:\n\nhttp://gnudist.gnu.org/software/emacs/manual/html_node/Change-Log.html\nhttp://www.gnu.org/prep/standards/html_node/Change-Log-Concepts.html\n"}, {:name=>"sh.vim", :summary=>"Indent script for sh/bash", :description=>"This is a minor bug-fix version of the official sh indent script, in order to support the \"case\" statement.\n\nThe default indent style is to put the case labels in the same indent level of the case statement. If you want to increase the indent level of the case labels, just add this line in your .vimrc:\n\nlet g:sh_indent_case_labels=1\n"}, {:name=>"svncommand-tng", :summary=>"Subversion (svn) Integration Plugin, the next generation (tng)", :description=>"This is an update to Adam Lazur's svncommand script, vimscript #922, which was itself based on the cvscommand script (now vcscommand), vimscript #90.\n\nKeywords: svn SVN svncommand subversion Subversion\n\nBasically I pulled a newer version of cvscommand (1.76) that had a lot of nice updates that I wanted to use with Subversion and did what Adam did, which is lots of 's/CVS/SVN/'.  Then hacked on it till it worked like it was supposed to.  I also pulled in Adams SVNCommitDiff function for displaying a diff for a svn-commit.* file.  \n\nFinally, I added a few features of my very own:\n - Option to enable automatic execution of SVNCommitDiff when a svn-commit.* file is loaded.\n - A simple property editor.  SVNPropedit with no options runs \"svn proplist\" to give you a listing of all the set properties.  If given an argument, it grabs the property of that name and gives you a window to update the value in.\n \nThe vcscommand script has just been updated to support Subversion (8-10-06), but so far there is not a property editor or CommitDiff function.\n\nShoot me an email if you find my additions useful! "}, {:name=>"matlab_run.vim", :summary=>"Run matlab script using Python for Windows users", :description=>"I no longer use Matlab nor Windows so I won't be able to improve this script any more.  Feel free to take over it and improve it.  \n\nRequired Python and its module win32com.  \nOnly in win32 platform.\n\nKnown successful versions\nWinXP, Python 2.4, Vim 7, Matlab 6.5\n\nPlease refer to tip#1298: http://www.vim.org/tips/tip.php?tip_id=1298\n(Thanks for the improvement from the comments.)\n\nHow to use:\nType ,r then it will save your file and run the file in Matlab.  The output from Matlab will be displayed in the current window.\n\nRemarks: \n1. Work for function file as well as script file, as long as the function does not require inputs.\n\n2. It will automatically add the path of your file using addpath in Matlab.  If you want to remove it you need to use rmpath in Matlab to do so manually. (Ignore this for version 1.1)\n\n3. It may take longer time than usual when you open an m file because it also starts Matlab.\n\n4. DO NOT close the Matlab Command Window.  It will close itself when you close your m files.\n\n5. For those of you who don't have Python but consider to install it, I recommand the enthought edition (http://code.enthought.com/enthon/) which includes pywin32.  As a Matlab user, you may also find scipy and numpy very useful in the future."}, {:name=>"candycode.vim", :summary=>"A colorful dark scheme with bright pastel colors", :description=>"This is my personal colorscheme, which I've been carefully tweaking over the past couple years.  It uses a (nearly) black background contrasted with bright pastel colors, which I think are easy to read and rather purty, too.  I don't know of any colorschemes that are too similar, but then again I've only seen a fraction of the huge number that are out there.\n\nHTML \"screenshot\": http://goflyapig.googlepages.com/candycodesample.html\nPNG screenshot: http://img98.imageshack.us/img98/9297/screenshotcandycodevimvimcolorsgvim1ki2.png\n\nOptimized for the GUI version, but color terminal settings are included, too."}, {:name=>"JDL-syntax-file", :summary=>"Syntax highlighting for .jdl files (Job Description Language)", :description=>"Simple highlighting plugin.  It highlights most common attributes, operators, a lot of literals and wrong whitespace at the end of the line.\n\nReference: http://www.infn.it/workload-grid/docs/DataGrid-01-TEN-0102-0_2-Document.pdf\n"}, {:name=>"myfold.vim", :summary=>"make it easy to open/close fold and foldcolumn", :description=>"NOT MAINTAINED , I don't recommend you to use this script, this was script I created when I was vim newbee. \n\n\n\n\nThis plugin provide functionality to enable or disalbe\nfold more easier.\ntwo command wil added.\n\n:MyFoldEnable\n:MyFoldDisable\n\nParameters are based on my favorite setting( syntax base ), so please modify\nthese values directly in function if you need.\n\n\n"}, {:name=>"SourceCodeObedience", :summary=>"Browse source code easily with cscope, ctags and marks system", :description=>"PURPOSE\n\nResearch source code.\nSupport source code.\n\nREQUIREMENT\n\nCscope: http://cscope.sourceforge.net/\nCtags: http://ctags.sourceforge.net/\n\nwithout cscope and ctags you can use only marks.\n\nUSAGE\n\n--NEW--:  mark commands ability added. read sco_command_feature.sco with vim about new feature\n\nFirst step:\n   Create new file with \"sco\" extension: [g]vim my_name.sco\n   Read help.\n   Change settings at the beginig of sco file\n\n   Execute one of the commands\n       :SCOSymbol 'class' (for example)\n       :SCOGlobal 'main'\n       :SCOWhoCall 'setValue'\n       :SCOFile 'main'\n       :SCOInclude 'stdafx.h'\n       :SCOText 'Enter password'\n       :SCOGrep ' \".*\" '\n       :SCOTag 'gui'\n       :SCOClassInfo 'class[struct]name' (cant take some time)\n\nSecond step:\n   Unfold result.\n   Filter result (:Delete :Leave :Filter commands)\n   Preview result (:Preview command or c<Space>p)\n   Preview result using :SCOUp :SCODown commands ( map them on keys <C-Up> <C-Down> for example )\n   Select appropriate row and press <Enter> to open file for edit.\n\nThird step:\n   Move inside file.\n   Select interesting line.\n   Execute :SCOMark command (c<Space>m) or :SCOMarkSmart (c<Space>n)\n\n   Use :SCOMarkSmart for store results for future\n   Change caption of the marks with  :Caption ['sometext'] command or :FileNameCaption\n\n   Use vim search and then :SCOSaveSearch(c<Space>s) to quick overview of find result and to select appropriate one ( To avoid multi n pressing )\n\n   Execute :AppendPlace to select place where new marks will be appear ( example http://groups.google.com/group/SourceCodeObedience/web/content-example )\n\n   Use :SCOReMark for change marks point\n\nFourth step:\n   Add tags and header information to your marks and text description to quick find later with http://www.vim.org/scripts/script.php?script_id=1791\n\nheader: creation of database connection\n   tags: connection, create, database\nsome text\n    SCOMark\n\nDebug step:\n\n  when you are going to understand source code with debugger (gdb) you should to use \n    :TransferToMarks command.\nCopy backtrace lines to sco file. Select them and :TransferToMarks.\n\nDiscuss step:\n\nhttp://groups.google.com/group/SourceCodeObedience/topics\n\nCSCOPE\n\nYou don't need to create cscope connection.\nWhat cscope data base to use you can set by adding (added automatically when sco file first created)\n\n% cscope_db: cscope.out\n\nin the begining of sco file.\nAs a result you can have many sco buffers with different cscope connections.\nIf your cscope executable installed not in standart place - you can change path to cscope by adding\n\n% cscope_exe: /my_path/cscope\n\nin the begining of sco file.\n\nCTAGS\n\nIf you want to use :SCOClassInfo you must have tag file generated with ctags --fields=fks (default settings)\n\nChange % tags_db: path_to_tag_file at the begining of sco file to path for your tag file\n\nVIMRC\n\nset \ng:sco_default_db\ng:sco_default_exe \ng:sco_default_tags in your .vimrc to avoid continual change first lines of newly created .sco files\n\nExample \nlet g:sco_default_db = /home/ni/cscope.out\nlet g:sco_default_exe = /home/ni/bin/cscope\nlet g:sco_default_tags = /home/ni/tags"}, {:name=>"MultiTabs", :summary=>"Open N files, each one in his own tab, like this:  :NTAB file1 file2 ... fileN", :description=>"Open N files, each one in his own tab, like this: \n    :NTAB file1 file2 ... fileN\n\nSynonyms:    :NTABS, :ETABS, TABS, OPENTABS\n\nEnjoy.\n\nYakov Lerner"}, {:name=>"cpp.vim--Skvirsky", :summary=>"Extends C++ syntax highlighting to STL classes and method names", :description=>"My cpp.vim is intended to replace the cpp.vim that comes with the Vim package (the author of the original is Ken Shan <ccshan@post.harvard.edu>).  It extends the original cpp.vim's C++ syntax highlighting to SGI STL classes and method names (including, e.g., hash_map and hash_set, which do not appear in the official STL).  The color of STL identifiers is distinct from all other colors used by the cpp.vim syntax scheme.\n\nAs C++ evolves, future versions of this syntax file will reflect any official additions to the standard library, i.e. Boost.  (May happen earlier, depending on user requests.)\n\nThe STL highlighting scheme is applied to the following words:\n\nabort abs accumulate acos adjacent_difference adjacent_find any append asctime asin assert assign at atan atan2 atexit atof atoi atol auto_ptr back back_inserter bad bad_alloc bad_cast bad_exception bad_typeid badbit begin binary_compose binary_negate binary_search binder1st binder2nd bitset bsearch c_str calloc capacity ceil cerr cin clear clearerr clock clog close compare const_iterator construct copy copy_backward copy_n cos cosh count count_if cout ctime data deque destroy difftime div domain_error empty end endl eof eofbit equal equal_range erase exception exit exp fabs fail failbit failure fclose feof ferror fflush fgetc fgetpos fgets fill fill_n find find_end find_first_not_of find_first_of find_if find_last_not_of find_last_of flags flip floor flush fmod fopen for_each fprintf fputc fputs fread free freopen frexp front fscanf fseek fsetpos fstream ftell fwrite gcount generate generate_n get_temporary_buffer getc getchar getenv getline gets gmtime good goodbit hash_map hash_multimap hash_multiset hash_set i2s ifstream ignore includes inner_product inplace_merge insert invalid_argument ios ios_base iostate iota is_heap is_open is_sorted isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace istream istream_iterator isupper isxdigit iter_swap iterator key_comp ldiv length length_error lexicographical_compare lexicographical_compare_3way list localtime log log10 logic_error longjmp lower_bound make_heap malloc map max max_element max_size mem_fun mem_fun1 mem_fun1_ref mem_fun_ref memchr memcpy memmove memset merge min min_element mismatch mktime modf multimap multiset next_permutation npos nth_element ofstream open ostream ostream_iterator out_of_range overflow_error pair partial_sort partial_sort_copy partial_sum partition peek perror pointer_to_binary_function pointer_to_unary_function pop pop_back pop_front pop_heap pow power precision prev_permutation printf ptr_fun push push_back push_front push_heap put putback putc putchar puts qsort raise rand random_sample random_sample_n random_shuffle range_error rbegin rdbuf rdstate read realloc remove remove_copy remove_copy_if remove_if rename rend replace replace_copy replace_copy_if replace_if reserve reset resize return_temporary_buffer reverse reverse_copy rewind rfind rotate rotate_copy runtime_error scanf search search_n seekg seekp set set_difference set_intersection set_symmetric_difference set_union setbuf setf setjmp setlocale setvbuf signal sin sinh size size_t sort sort_heap splice sprintf sqrt srand sscanf stable_partition stable_sort std str strcat strchr strcmp strcoll strcpy strcspn strerror strftime string strlen strncat strncmp strncpy strpbrk strrchr strspn strstr strtod strtok strtol strtoul strxfrm substr swap swap_ranges sync_with_stdio system tan tanh tellg tellp temporary_buffer test time time_t tmpfile tmpnam to_string to_ulong tolower top toupper transform unary_compose unary_negate underflow_error unget ungetc uninitialized_copy uninitialized_copy_n uninitialized_fill uninitialized_fill_n unique unique_copy unsetf upper_bound va_arg value_comp vector vfprintf vprintf vsprintf width write\n"}, {:name=>"AfterColors.vim", :summary=>"Provides support for after/colors/ scripts", :description=>"Allows you to create an after/colors/ script for customizing any colorscheme.\n\n-- EXAMPLE --\nIf you like the 'desert' colorscheme, but you really want comments to be red and functions to be blue, previously you would copy the entire colorscheme into your home directory and customize it.  With this plugin installed, you can create a small script to change just the parts you want for that colorscheme, exactly how you would for an ftplugin or syntax script:\n\nFor unix systems you would create:\n  ~/.vim/after/colors/desert.vim:\n    highlight Comment guifg=Red ctermfg=Red\n    highlight Function guifg=Blue ctermfg=Blue\n\nOn windows you would create:\n C:\\Documents and Settings\\Peter\\vimfiles\\after\\colors\\desert.vim:\n    highlight Comment guifg=Red ctermfg=Red\n    highlight Function guifg=Blue ctermfg=Blue\n\n\n-- VERSION 6 WARNING --\nIf your Vim is older than version 7, then the after/colors scripts will only be loaded once when Vim starts.  This will not be a problem if you choose your colorscheme in your .vimrc file, but if you change your colorscheme after vim has loaded then your after/colors scripts will be ignored.  This is not an issue in Vim 7.\n\n\nIn case of problems, you can email me: <toomuchphp-vim at yahoo.com>\n"}, {:name=>"zzsplash", :summary=>"Show Vim splash screen even when started with a filename argument", :description=>"By default, (g)vim displays a splash screen when starting with no editfile, or in response to the \":intro\" command. This plugin makes the splash screen appear at startup in all cases, even when started with one or more \"filename\" arguments."}, {:name=>"SuperTab-continued.", :summary=>"Do all your insert-mode completion with Tab.", :description=>"Supertab aims to provide tab completion to satisfy all your insert completion\nneeds (:help ins-completion).\n\nThis version is a continuation of vimscript #182 by Gergely Kontra, who has\nasked me to take over support and maintenance.  This version contains many\nenhancements.\n\nYou can also find supertab in my github repository:\nhttp://github.com/ervandew/supertab\n\nSupertab provides several features to enhance your insert completion\nexperience:\n- You can set your favorite insert completion type (keyword, omni, etc.) as\n  supertab's default.\n- When using another completion type (ctrl-x ctrl-f), supertab will\n  temporarily make that the default allowing you to continue to use tab for\n  that completion. The duration is configurable to one of 'completion'\n  (retained until you exit the current completion mode), 'insert' (retained\n  until you leave insert mode), or 'session' (retained for the remainder of\n  your vim session).\n- Supertab provides a 'context' completion type which examines the text\n  preceding the cursor to decide which type of completion should be used\n  (omni, user, file, or keyword).  You can also plug in your own functions\n  which will be used to determine which completion type to use according to\n  your new functionality.\n- The 'context' completion can also be used to set the default completion type\n  according to what the file supports, based on a discovery mechanism which\n  you specify.\n- For users not yet familiar with all the various insert completion types that\n  vim supports, supertab also provides a :SuperTabHelp command which opens a\n  temporary buffer listing all the available types and the ability to easily\n  switch to that type.\n\nAfter installing, see the supertab help for more information (:h supertab).\n"}, {:name=>"switch_headers.vim", :summary=>"Simple switching between corresponding .h/.hpp and .c/.cpp files", :description=>"Simply switches between .c/.cpp and .h/.hpp files, suitable for one-keystroke switching.\nOrder of priority when looking for corresponding files:\n1) if .h file, seeks for .c first, then .cpp\n2) otherwise, seeks for .h first, then .hpp\nInspired by vimtip #384. Not as complex as vimscript #31, but if you need only small amount of code ..."}, {:name=>"tikiwiki.vim", :summary=>"TikiWiki syntax highlighting", :description=>"Syntax file for the tikiwiki language.\nThis is mainly useful if your browser allows you to edit text areas in an external editor (like the Mozex entension of Firefox). See also vimtip #805 if you are on Windows.\n"}, {:name=>"str2numchar.vim", :summary=>"String convert to Numeric Character Reference", :description=>"Author:       secondlife <hotchpotch@NOSPAM@gmail.com>\nLast Change:  2006 Sep 02\nVersion: 0.1, for Vim 7.0\n\nDESCRIPTION:\n This plugin is String convert to Numeric Character Reference\n and String convert to Hex Literal\n\nfor example:\n:echo Str2HexLiteral('abcd')\n\\x61\\x62\\x63\\x64\n:echo Str2NumChar('abcd')\nabcd\n\n==================== file str2numchar.vimrc ====================\nvmap <silent> sn :Str2NumChar<CR>\nvmap <silent> sh :Str2HexLiteral<CR>\n==================== end: str2numchar.vimrc ====================\n"}, {:name=>"addexecmod.vim", :summary=>"add execute permission automatically at saving file", :description=>"If you use this plugin, you don't need to type the command \"chmod +x your_script\"."}, {:name=>"ASL", :summary=>"ACPI syntax language", :description=>"Syntax file for the ACPI Syntax Language. Uses the c.vim syntax file as base. Added important keywords for highlighting."}, {:name=>"scrollfix", :summary=>"keep cursor at fixed visual line of window", :description=>"\" This plugin, scrollfix, maintains cursor at fixed visual line of window\n\" (except near beginning of file and near end of file. The\n\" latter is configurable. You can choose whether to fix cursor\n\" near end of file or not, see g:fixeof below). This is enhancement\n\" to the 'set scrolloff=999', but scrollfix allows any visual line of\n\" window to keep cursor at, not only middle line of window.\n\"\n\" MAIN CONTROL VARIABLE, THE g:scrollfix:\n\"\n\" You choose the visual line of screen in percentages from top of screen:\n\"     let g:scrollfix=100 \" means lock cursor at bottom of window\n\"     let g:scrollfix=0   \" means keep cursor at top line of window\n\"     let g:scrollfix=50  \" means middle line of screen\n\"     let g:scrollfix=66  \" means two-third from top of screen\n\" As shipped, cursor is at 60% (let g:scrollfix=60)\n\"\n\" CONTROL VARIABLES:\n\" To change plugin settings, assign to following variables in your .vimrc.\n\" g:scrollfix - percentage from top of screen where to lock cursor\n\"               -1 - disables. Default: 60\n\" g:fixeof    - 1=>fix cursor also near end-of-file; 0=>no. Default:0\n\" g:scrollinfo - 1=>inform when scrollfix is turned on, 0=>no. Default: 1\n\" :FIX NNN         comand :FIX is alternate way to change g:scrollfix variable\n\"\n\" NB:\n\" - You need vim version at least 7.0.91 or later (vim6 won't work).\n\"   If you have vim7 before 7.0.91, you can use script#1473 to build\n\"   & install the latest vim7 executable.\n\" - this is beta version of the scrollfix plugin.\n\"   Your feedback is welcome. Please send your feedback to iler at gmail dot com.\n\"................................................................\n"}, {:name=>"asmx86_64", :summary=>"Syntax highlighting for x86_64 asm including gcc preprocessor", :description=>"This syntax is especially adapted to working in the Linux kernel (x86_64)\n\nI am still working on it ... so this is a first version enjoy"}, {:name=>"freya", :summary=>"A dark color scheme with warm colors", :description=>"This color scheme has a dark blackground. Most colors are very warm (mainly brown and beige shades). The brightness of all highlights is rather similar.\n\nThis color scheme is for GUI only, but makes some minor tweaks to cterm, too."}, {:name=>"highlight_current_line.vim", :summary=>"Highlights CurrentLine", :description=>"Highlights the current line."}, {:name=>"proe.vim", :summary=>"Pro/Engineer *.pro syntax", :description=>"This is for Wildfire 2.  I doubt there are big changes in 3, but let me know.\n\nI prefixed syntax items with \"mk_\" because Pro/E files are largely used for 'Mapkeys'.\nHowever, some of the syntax items here apply to general Pro/E syntax.\n\nThere is no vocabulary built in.  I was unable to download a good list of commands.  This documentation for Wildfire 2 is in PDF form, and translating to text and HTML both fail miserably for me.\n http://www.cad-resources.com/WF2_configuration_options.pdf\n\nI'm confused as to why the tildes ~ and the 'mapkey(continued) ' markings were necessary to the syntax... thoughts, anyone?\n"}, {:name=>"git.zip", :summary=>"Git runtime files", :description=>"Included are syntax, indent, and filetype plugin files for git, gitcommit, gitconfig, gitrebase, and gitsendemail.\n\nEarlier versions of these files are shipped with Vim as of 7.2. The latest versions of these files can be retrieved from http://github.com/tpope/vim-git, which is the official distribution.\n\nIf you're looking for a Vim interface to Git, be sure to try fugitive.vim: vimscript #2975 http://github.com/tpope/vim-fugitive"}, {:name=>"cobol.zip", :summary=>"COBOL indent plugin:  Understands COBOL's awkward use of columns", :description=>"Shipped with Vim as of 7.1\n\nThe indent plugin understands the column requirements of COBOL (Area A vs. Area B, comment indicator indented 6 spaces, etc.) and also neatly formats nested blocks and fields.  It works quite well for the code I have used it with; further feedback is appreciated.\n\nThe ftplugin is designed to help comply with COBOL's insane column requirements.  <C-T>, <C-D>, and <Tab> are remapped in insert mode to stop in columns 1, 7, 8 (Area A), and 12 (Area B) before switching to the use of shiftwidth/softtabstop.  In normal mode, << and >> are remapped to ignore the first 7 columns, and with Vim 7, < and > serve as more general operator maps (>ap to indent a paragraph).  These two behaviors (insert vs. normal mode) are a bit different but generally what one would expect.\n\nThis script works well coupled with vimscript #1654 ."}, {:name=>"quilt", :summary=>"Enable quilt usage in vim", :description=>"(from the help of the plugin: :help quilt-intro ) :\n\n\nQuilt is a project initiated by Andrew Morton to work with patches sent on the\nLKML. It is quite stable now, and really usefull to deal with stacked patches.\n\nFirst of all, before using this plugin, you must install quilt on your\nstation, for, under debian distribution, type in a command shell:\n\n\taptitude install quilt\n\nNow that you have your station setuped, let's speak a little about Quilt\nitself, more information can be found in man quilt shell command.\n\nThe idea behind quilt is that you work on patches, not on sources directly, so\nall your productions are patches. You create a patch to track your\nmodifications and send this patch to a work group so they can valiadate/accept\nor integrate your modifications.\n\nNow you need a tool to help you maintain your patches, and that's exacltly\nwhat quilt does. Quilt let you apply a patch, modify your files (and thus the\npatch), unapply the patch. But it also allows you to do that on several\npatches at a time (one patch applied after the other ...) that's what we call\nthe stacked patches. (or the patch stack). \n\nYou can go to a level on the patch stack, modify the patch, and come back to\nanother patch stack level.\n\nThis plugin helps you handle all those boring operations with simple vim\ncommands ;)\n\nTo sum up the workflow :\n\n|:QuiltSetup| <patchdir>\n\n then:\n\n|:QuiltNew|   <patchname>\n\n ... open a file ...\n\n|:QuiltAdd|\n\n ... work on the file ...\n ... save your modifiations ...\n\n |:QuiltRefresh|\n\n and so on ... \n\n:help quilt-usage"}, {:name=>"doxygenerator", :summary=>"Aotomatically generates Doxygen style documentation template for C functions", :description=>"Just type '\\f' putting the cursor on a C function definition/definition, and it will generate the corresponding Doxygen format documentation template for that function. So far, it doesn't handle functions with variable number of arguments, using '...'. Also, using it for 'void' functions will give incorrect result :)"}, {:name=>"The-NERD-tree", :summary=>"A tree explorer plugin for navigating the filesystem", :description=>"Grab the latest dev version from github: https://github.com/scrooloose/nerdtree. \n\nWhat is this \"NERD tree\"??\n\nCheck out this demo http://www.flickr.com/photos/30496122@N07/2862367534/sizes/o/\n\nThe NERD tree allows you to explore your filesystem and to open files and\ndirectories. It presents the filesystem to you in the form of a tree which you\nmanipulate with the keyboard and/or mouse. It also allows you to perform\nsimple filesystem operations.\n\nThe following features and functionality are provided by the NERD tree:\n    * Files and directories are displayed in a hierarchical tree structure\n    * Different highlighting is provided for the following types of nodes:\n        * files\n        * directories\n        * sym-links\n        * windows .lnk files\n        * read-only files\n        * executable files\n    * Many (customisable) mappings are provided to manipulate the tree:\n        * Mappings to open/close/explore directory nodes\n        * Mappings to open files in new/existing windows/tabs\n        * Mappings to change the current root of the tree\n        * Mappings to navigate around the tree\n        * ...\n    * Directories and files can be bookmarked.\n    * Most NERD tree navigation can also be done with the mouse\n    * Filtering of tree content (can be toggled at runtime)\n        * custom file filters to prevent e.g. vim backup files being displayed\n        * optional displaying of hidden files (. files)\n        * files can be \"turned off\" so that only directories are displayed\n    * A textual filesystem menu is provided which allows you to\n      create/delete/move file and directory nodes as well as copy (for\n      supported OSs)\n    * The position and size of the NERD tree window can be customised\n    * The order in which the nodes in the tree are listed can be customised.\n    * A model of your filesystem is created/maintained as you explore it. This\n      has several advantages:\n        * All filesystem information is cached and is only re-read on demand\n        * If you revisit a part of the tree that you left earlier in your\n          session, the directory nodes will be opened/closed as you left them\n    * The script remembers the cursor position and window position in the NERD\n      tree so you can toggle it off (or just close the tree window) and then\n      reopen it (with NERDTreeToggle) the NERD tree window will appear exactly\n      as you left it\n    * You can have a separate NERD tree for each tab, share trees across tabs,\n      or a mix of both.\n    * By default the script overrides the default file browser (netw), so if\n      you :edit a directory a (slighly modified) NERD tree will appear in the\n      current window\n"}, {:name=>"dw_colors", :summary=>"Set of black color schemes with some highlight variations", :description=>"Like the summary says.  Screenshots for all variants can be found here: http://sites.google.com/site/dwcolors/\n\nA contact e-mail is in the header of the colorschemes.  Please feel free to contact me with comments."}, {:name=>"mint", :summary=>"dark background (gui only)", :description=>"Colorscheme I currently use, just want to share it.\n\nI don't know if there is anything minty about the colors, but I like the name ...\n\nPreview http://img45.imageshack.us/img45/4215/mintht7.png (Bitstream Vera Sans Mono 9pt Bold, set linespace=2)\n(Thanks to ImageShack for [URL=http://imageshack.us]Free Image Hosting[/URL])\n\nThanks."}, {:name=>"redocommand", :summary=>"Execute commands from the command history.", :description=>"DESCRIPTION\nRe-executes the last / Nth ex command previously entered in command mode. An\noptional pattern is used to locate the most recent matching command. This is\nsimilar to the command-line window (q:), or navigating the command history via\n<Up> and <Down>, but provides an even faster way to re-execute a command if\nyou remember some characters or a pattern that identifies the command line.\nThe redocommand itself will not be included in the command history. Global\nliteral replacement can be done via 'old=new' arguments. \n\nThis is modeled after the 'fc -s' command from the Posix shell (which is often\naliased to 'r'). \n\nUSAGE\n:[N]Redocommand (or abbreviated :R)\n\t\t\tExecute the last / Nth ex command. \n\n:[N]Redocommand {pattern}\n\t\t\tExecute the last / Nth ex command that matches\n\t\t\t{pattern}.\n\t\t\tSettings such as 'magic' and 'ignorecase' apply. \n\n\t\t\tWith N=0, only the very last command from the history\n\t\t\tis executed if it matches {pattern}; the entire\n\t\t\thistory isn't searched. \n\n:[N]Redocommand old=new [old2=new2 ...] [{pattern}]\n\t\t\tExecute the last / Nth ex command (that matches\n\t\t\t{pattern}), replacing all literal occurrences of 'old'\n\t\t\twith 'new'. \n\nEXAMPLE\nGiven the following history:\n    :history\n    1 e foo.txt \n    2 %s/foo/\\0bar/g \n    3 w bar.txt \n:Redocommand\t\twill execute :w bar.txt\n:Redocommand %\t\twill execute :%s/foo\\0/bar/g\n:Redocommand foo\twill execute :%s/foo\\0/bar/g\n:2Redocommand foo\twill execute :e foo.txt\n:Redocommand b=B .txt=\twill execute ':w bar.txt' as :w Bar"}, {:name=>"rubycomplete.vim", :summary=>"ruby omni-completion", :description=>"rubycomplete is an omni-completion script for ruby. \nIt supports the following:\n  * dynamic completion of in-buffer entities (classes, methods, objects, modules).\n  * rails \n          - inclusion of column-names/fields\n          - helpers included in completions\n  * automatic inclusion of required modules\n  * automatic handling of syntax errors\n\nRubycomplete requires ruby support to work. It uses ruby to process the buffer and introspection to create a list of completions. \nIt is distributed with vim, and as part of the vim-ruby project (http://vim-ruby.rubyforge.org/).\nCVS versions are availible from vim-ruby, major releases will be published here and on my site.\n\nFor more info go to: http://blog.hasno.info/blog/segfault/dev/2006/04/10/vim-7-ruby-omni-completion.html\n"}, {:name=>"asm8051.vim", :summary=>"Syntax for 8051 Assembly (some IAR specifics)", :description=>"To my surprise I could not find a syntax file for 8051 assembly.  So I started with vimscript#966 (which was apparently derived from the asm68k syntax) and derived this syntax file.\n\nThe assembler directives and such are IAR specific b/c that is the toolset that I am currently using.  Feel free to expand with support for Keil and/or SDCC.\n"}, {:name=>"buftabs", :summary=>"Minimalistic buffer tabs saving screen space", :description=>"[Screeshot available at  http://zevv.nl/play/code/vimscripts/]\n\n\nIntroduction\n------------\nThis is a simple script that shows a tabs-like list of buffers in the bottom\nof the window. The biggest advantage of this script over various others is\nthat it does not take any lines away from your terminal, leaving more space\nfor the document you're editing. The tabs are only visible when you need\nthem - when you are switchin between buffers.\n\nUsage\n-----\nThis script draws buffer tabs on vim startup, when a new buffer is created\nand when switching between buffers.\n\nIt might be handy to create a few maps for easy switching of buffers in your\n.vimrc file. For example, using F1 and F2 keys:\n\n  noremap <f1> :bprev<CR> \n  noremap <f2> :bnext<CR>\n\nor using control-left and control-right keys:\n\n  :noremap <C-left> :bprev<CR>\n  :noremap <C-right> :bnext<CR>\n\n\nSome configuration options are available for styling and layout, check the top of the plugin file for instructions.\n"}, {:name=>"tavi.vim", :summary=>"Syntax highlighting for the WikkiTikkiTavi ('Tavi) wiki engine", :description=>"Syntax highlighting for the WikkiTikkiTavi ('Tavi) wiki engine.\n\nHomepage: http://tavi.sourceforge.net/"}, {:name=>"Alternate-workspace", :summary=>"Switch or watch diff between alternate files from child and parent workspaces", :description=>" This script provide a way to quickly switch between files from different workspaces (Child and Parent). And to see difference between them.\n\nSet variable g:aw_child_path and g:aw_parent_path to work with this script.\n\nExample of vimrc:\n\n   let g:aw_child_path = '/home/ni/branch'\n   let g:aw_parent_path = '/project/' \n   let g:aw_stop_word = 'src'\n\n   nnoremap \\wd :AWDiffMirror<CR>\n   nnoremap \\we :AWEditMirror<CR>\n\nEDIT MIRROR\n\nSuppose you have two files in different workspaces.\nYou edit now file from child workspace.\n\nyou are at line 100\nin that line is text 'int main()'\n\nin alternate file there is line 'int main()' too but in line 200\n\nafter command :AWEditMirrorFile you will be at line 200 in alternate file\nIt is very useful.\n\nif there is now such line in alternate file you'll be at line 100.\n\nSET WORKSPACES \n\nUse AWSetChild and AWSetParent commands to set workspaces directories (thanks to Sergey Popov).\n\nUse AWAutoSetChild and AWAutoSetParent commands - this commands will create child and parent path form current file name\nexample: \n    let g:aw_stop_word = 'src'\n    current file name = '/home/me/project/src/..../.../1.cpp'\n    after execution of AWAutoSetChild aw_child_path will be '/home/me/project/'\n\n:AWEditMirrorFile - edit alternate file\n:AWDiffMirrorFile - diff current and alternate file\n"}, {:name=>"campfire", :summary=>"A feel good colorscheme", :description=>"Remember those nights, sitting around the campfire.\nThe darkblue sky, the green matches, the colors of the campfire, the red coals, the grey ashes."}, {:name=>"blink", :summary=>"Minimal colorscheme.", :description=>"A minimal (but complete) colorscheme for dark backgrounds.  Written to simplify customization."}, {:name=>"lazarus", :summary=>"Lazarus color scheme", :description=>"Lazarus color scheme"}, {:name=>"doorhinge.vim", :summary=>"light blue theme with orange highlights", :description=>"\ndoorhinge color theme\n\nUpdated: cleaned up a bit, added cursorline, diff, pmenu, tabline, minibuf, modified statusline, visual modes, folds, color tweak, half decent console colors.\n\nScreenshots are here:\n\nhttp://members.shaw.ca/dimset/vim/guishot.png\nhttp://members.shaw.ca/dimset/vim/xtermshot.png"}, {:name=>"darktango.vim", :summary=>"Tango based color scheme", :description=>"Based on the color specifications of www.tango-project.org.\n\nI've been using this color scheme, for a couple of weeks now. It's not complete but I really like it. For suggestions etc feel free to email me.\n\nDarkTango, fits great with Tango desktop themes and all that is Tango-ish!\n\nEnjoy!\n\nCouple of screenshots (0.3):\nhttp://flickr.com/photos/panosl/2321828928/in/photostream/"}, {:name=>"blueprint.vim", :summary=>"A color theme inspired by blueprint", :description=>"This is a color theme inspired by blueprint. It use not-so-dark blue background and not-so-bright white characters, trying to give user a clean, simple and easy to read interface, yet easy to identify different part of your masterpiece codes :)"}, {:name=>"pdf.vim", :summary=>"PDF Syntax Highlighting", :description=>"Syntax hightlighting for PDF files.  "}, {:name=>"Drupal-5.0-function-dictionary", :summary=>"Drupal 5.0 function name dictionary for Ctrl-X Ctrl-K completition", :description=>"This is just a dictionary for Drupal developers, to make their life a bit easier. If you add it to the dictionary list in vim, you can use the Ctrl-X Ctrl-K completition in INSERT mode."}, {:name=>"toggle_words.vim", :summary=>"toggle words like:'true'=>'false', 'True'=>'False' etc", :description=>"\" Documentation: \n\"   The purpose of this plugin is very simple, it can toggle words among\n\"   'true'=>'false', 'True'=>'False', 'if'=>'elseif'=>'else'=>'endif' etc . \n\"\n\"   To use it, move the cursor on some words like 'true', 'False', 'YES', etc, \n\"   call command \n\"     :ToggleWord\n\"\n\"   It will toggle 'true'=>'false', 'False'=>'True', 'YES'=>'NO' etc. Yes,\n\"   this script will try to take the case into account when toggling words, so\n\"   'True' will be toggled to 'False' instead of 'false'. Currently the way to\n\"   check the case is very simple, but it works well for me.\n\"\n\"   You can define a map for 'ToggleWord' comand to make it easier: \n\"     nmap ,t :ToggleWord<CR>\n\"\n\"   This script can search the candicate words to toggle based on\n\"   current filetype, for example, you can put the following configuration\n\"   into your .vimrc to define some words for python:\n\"      let g:toggle_words_dict = {'python': [['if', 'elif', 'else']]}\n\"   \n\"   There are some default words for toggling predefined in the\n\"   script(g:_toogle_words_dict) that will work for all filetypes.\n\"   Any comment, suggestion, bug report are welcomed. \n"}, {:name=>"twilight", :summary=>"A clone of Textmates twilight scheme", :description=>"A dark scheme, with golden and blueish script.\nThis is just a first try, there may be lots of things missing or wrong.\n\nSee  http://leetless.de/vim.html for a screenshot."}, {:name=>"Tab-Name", :summary=>"Set name for your tab-pages.", :description=>"Suppose you have tab pages with same buffer for edit but with different line positions. How are you going to find correct tab page? \nWhat about tabpages with splitted windows?\n\n:TName 'tab_page_name' - set name of tab-page\n:TNoName - remove tab page name"}, {:name=>"tidy-compiler-script", :summary=>"compiler script for tidy", :description=>"Tydi is a useful tool for fixing and indenting html files, see http://tidy.sourceforge.net/, and this zip contains a compiler script.\n"}, {:name=>"Vexorian-color-scheme", :summary=>"initial release", :description=>"It uses the highlight setup I personally prefer for programming, white background, green for comments, a different color for constants, italic for strings, gray for preprocessors and bold black for keywords."}, {:name=>"ekvoli", :summary=>"Different shades of blue (colour scheme)", :description=>"A colour scheme with different shades of blue.\n\nScreenshots can be seen here: http://www.pvv.org/~randhol/Vim/ekvoli/\n\nHope you like it. "}, {:name=>"IndexedSearch", :summary=>"shows  'Nth match out of M'  at every search (index of match+total # matches)", :description=>"\" This plugin redefines 6 search commands (/,?,n,N,*,#). At every\n\" search command, it automatically prints\n\"        \"At match #N out of M matches\".\n\" -- the total number of matches (M) and the number(index) of current\n\" match (N). This helps to get oriented when searching forward and\n\" backward.\n\"\n\" To try out the plugin, source it and play with N,n,*,#,/,? commands.\n\" There are no new commands and no new behavior to learn. \n\" Just watch the bottom line when you do /,?,n,N,*,#.\n\"\n\" Works on vim6 and vim7.  Won't cause slowdown\n\" on very large files (but then counters are not displayed).\n\"\n\" -----------------------------------------------------\n\" Checking At which Match Number You Are\n\" .....................................................\n\" You can press g/ or \\\\ or \\/ (that's backslach then slash),to show \n\" at which match index you are, without moving the cursor.\n\" Messages are:\n\"     At Nth match of M (if cursor is exactly on the match)\n\"     Betwen matches N1-N2 of M (if cursor is between matches)\n\"     At single match\n\"     Before first match, of N\n\"     After last match, of N\n\" Command  ':ShowSearchIndex'  shows same information.\n\" ------------------------------------------------------\n\" To disable colors for messages, set 'let g:indexed_search_colors=0'.\n\" ------------------------------------------------------\n\" Performance.     Plugin bypasses the calculation of match index when \n\" it would take too much time (too many matches, too large file). You can\n\" tune performance limits, look into script sources after comment \n\" \"Performance tuning limits\".\n\" ------------------------------------------------------\n\" In case of bugs and wishes, please email to:  \n\" iler.ml at gmail.com\n\" ------------------------------------------------------\n\" To show slightly shorter messages, define 'let g:indexed_search_shortmess=1'\n"}, {:name=>"Darcs", :summary=>"basic Darcs support for vim", :description=>"Defines the following commands:\n  DarcsDiff shows the diff between the file in the current buffer and the Darcs version of that file\n  DarcsOff closes the diff view opened by DarcsDiff\n  DarcsChanges shows the changes to the file in the current buffer. "}, {:name=>"DNA-sequence-highlighter", :summary=>"Highlight DNA and RNA sequences", :description=>"Highlight DNA and RNA sequences in a manner similar to most sequence-editing software, e.g., Sequencher, TreeView, MEGA etc."}, {:name=>"plaintex.vim", :summary=>"Support files for editing plain TeX documents", :description=>"ftplugin/plaintex.vim\ncompiler/plaintex.vim\ndoc/ft-plaintex.txt\n\nThis package provides a compiler plugin and a filetype plugin for editing plain TeX documents ('ft' = plaintex).  It is intended to be used in addition to the default ftplugin for plaintex, which I also maintain.\n\nThe compiler plugin enables you to run tex (or pdftex) on your file with\n  :make\nand then correct errors using quickfix mode.\n\nThe filetype plugin maps \" (double quote mark) to insert `` (open quotes) at the start of a quotation, then '' (close quotes) at the end.  It also maps <C-B> to insert \"{\\bf }\" and <C-T> to insert \"{\\it \\/}\".  Both of these keys work in Normal, Insert, and Visual modes."}, {:name=>"Tango-colour-scheme", :summary=>"Colour scheme using the Tango Desktop project palette", :description=>"Colour scheme using the Tango Desktop project palette. Works both in GUI and terminal.\n\nScreenshot and comments: http://blog.micampe.it/articles/2006/10/20/vim-tango-color-scheme\nInspired by the Tango palette for the GNOME terminal: http://uwstopia.nl/blog/2006/07/tango-terminal\nWhat is Tango: http://tango.freedesktop.org"}, {:name=>"jdox", :summary=>"generates javadoc compatibile comments for c++ function definitions", :description=>"JDOX is a vim plugin that generates javadoc compatibile comment for c++ function definitions. The main point that differs jdox from similar commenting plugins is that jdox supports comments between arguments, function name and return types.\nExample:\n/**\n * Function: a_function\n * @author Pawel Prokop\n * @param str \n * @param number \n * @return unsigned  int\n * @version 1.0\n */\nunsigned \nint  a_function  ( char * str, /* int not_used_anymore, */ unsigned int number) {\n\n"}, {:name=>"MakeInBuilddir", :summary=>"runs :make for projects where build and source directories are separated", :description=>"Let's consider a libtool/autoconf project where source and build directories are separeted:\n  source_dir\n  source_dir/build\n\nIf you're editing a file in source_dir/src and type Make then\n  1/ the name of the build directory will be asked (here 'build') (it is asked only once)\n  2/ :make will be run in source_dir/build/src\n\nsource_dir is found by searching for configure.ac, configure.in or configure\n\nThe following additional commands are defined:\n   Compile - compiles the current file by calling the libtool-specific\n           :make basename.lo\n   MakeAll - runs :make in source_dir regardless of the directory of the current file\n   Reconfigure - runs \"config.status --recheck\" in source_dir/build\n   RegenAll - runs \"config.status\" in source_dir/build\n   Run execname - starts execname instead of :make\n   Debug execname - start a libtool-wrapped gdb (for libtool generated executables)\n"}, {:name=>"mail_indenter", :summary=>"pretty indentation for e-mail replying", :description=>"This tiny script (my first one) can convert this:\n\nOn 2006/10/23@16:47, <Mauro, Sauco> wrote:\n  > This is a post with a very long text without wrapping of text that can go on and on forever and its very annoying because it will make the reply almost impossible to understand.\n  > This is another very long line that looks very ugly because some e-mail clients will wrap it automatically but will not consider the indentation mark.\n  > I love inline replaying because:   \n  > 1. Inline posting creates a natural, chronological ordering to each segment of the discussion stored within a message.\n  > 2. Inline posting promotes the practice of trimming quoted text to prevent signature blocks, free-mail-service ads, and corporate disclaimers piling up in a growing useless \"tail\" at the end.\n  > 3. nline posting doesn't require the poster to recap each issue being addressed, as comments can be made point-for-point against the original message, making for a more structured, disciplined and unambiguous reply.\n\nInto this:\n\nOn 2006/10/23@16:47, <Mauro, Sauco> wrote:\n  Mauro> This is a post with a very long text without wrapping of text   \n  Mauro> that can go on and on forever and its very annoying because it\n  Mauro> will make the replay almost impossible to understand.  This is\n\nThen you can replay inline like this.\n   \n  Mauro> another very long line that looks very ugly because some e-mail   \n  Mauro> clients will wrap it automatically but will not consider the\n  Mauro> indentation mark.  I love inline replaying because: 1. Inline\n\nOr like this.\n\n  Mauro> posting creates a natural, chronological ordering to each   \n  Mauro> segment of the discussion stored within a message.  2. Inline\n  Mauro> posting promotes the practice of trimming quoted text to   \n  Mauro> prevent signature blocks, free-mail-service ads, and corporate\n  Mauro> disclaimers piling up in a growing useless \"tail\" at the end.\n\nI agree !\n\n  Mauro> 3. nline posting doesn't require the poster to recap each issue\n  Mauro> being addressed, as comments can be made point-for-point\n  Mauro> against the original message, making for a more structured,\n  Mauro> disciplined and unambiguous reply.\n\nIn case you didn't notice, the text is now wrapped at 72 and indented with the recipients name.\nHow you like it ?\n\nPlese feel free to drop me an e-mail with questions, suggestions, etc.\n\nRead the header of the script for keybidings."}, {:name=>"IndentConsistencyCop", :summary=>"Is the buffer's indentation consistent and does it conform to tab settings?", :description=>"DESCRIPTION:\n  In order to achieve consistent indentation, you need to agree on the\n  indentation width (e.g. 2, 4 or 8 spaces), and the indentation method (only\n  tabs, only spaces, or a mix of tabs and spaces that minimizes the number of\n  spaces and is called 'softtabstop' in VIM). Unfortunately, different people\n  use different editors and cannot agree on \"the right\" width and method.\n  Consistency is important, though, to make the text look the same in\n  different editors and on printouts. If any editor inadvertently converts\n  tabs and spaces, version control and diff'ing will be much harder to do. \n\n  The IndentConsistencyCop examines the indent of the buffer and analyzes the\n  used indent widths and methods. If there are conflicting ones or if bad\n  combinations of tabs and spaces are found, it alerts you and offers help in\n  locating the offenders - just like a friendly policeman: \n\n  :IndentConsistencyCop\n  Found inconsistent indentation in this buffer; generated from these\n  conflicting settings:\n  - tabstop (1838 of 3711 lines) <- buffer setting\n  - 4 spaces (33 of 3711 lines)\n  - bad mix of spaces and tabs (4 of 3711 lines)\n\t[I]gnore, (H)ighlight wrong indents...: h\n  What kind of inconsistent indents do you want to highlight?\n\tNot [b]uffer settings (sts4), Not best (g)uess (tab), Not (c)hosen\n\tsetting..., (I)llegal indents only: g\n  Marked 180 incorrect lines.\n\n  If the buffer contents are okay, the IndentConsistencyCop can evaluate\n  whether VIM's buffer settings are compatible with the indent used in the\n  buffer. The friendly cop offers to correct your buffer settings if you run\n  the risk of screwing up the indent consistency with your wrong buffer\n  settings: \n  \n  :IndentConsistencyCop\n  The buffer's indent settings are inconsistent with the used indent '8\n  spaces'; these settings must be changed:\n  - expandtab from 0 to 1\n  How do you want to deal with the inconsistency?\n\t[I]gnore, (C)hange: c\n  The buffer settings have been changed: tabstop=8 softtabstop=0 shiftwidth=8\n  expandtab\n\n  The IndentConsistencyCop is only concerned with the amount of whitespace\n  from column 1 to the first visible character; it does not check the\n  alignment of tables, equals signs in variable assignments, etc. Neither does\n  it know any specifics about programming languages, or your personal\n  preferred indentation style. \n\nUSAGE:\n  Start the examination of the current buffer or range via:\n\t:[range]IndentConsistencyCop\n  The triggering can be done automatically for configurable filetypes with the\n  autocmds defined in IndentConsistencyCopAutoCmds.vim (vimscript #1691). \n\n  If you chose to highlight incorrect indents, either re-execute the\n  IndentConsistencyCop to update the highlighting, or execute\n\t:IndentConsistencyCopOff\n  to remove the highlightings. \n\n  If you just want to check a read-only file, or do not intend to modify the\n  file, you don't care if VIM's buffer settings are compatible with the used\n  indent. In this case, you can use \n\t:[range]IndentRangeConsistencyCop\n  instead of :IndentConsistencyCop. "}, {:name=>"IndentConsistencyCopAutoCmds", :summary=>"autocmds for IndentConsistencyCop.vim", :description=>"DESCRIPTION:\n  The autocmds in this script automatically trigger the IndentConsistencyCop\n  for certain, configurable filetypes (such as c, cpp, html, xml, which\n  typically contain lots of indented lines) once when you load the file in\n  VIM. The entire buffer will be checked for inconsistent indentation, and you\n  will receive a report on its findings. With this automatic background check,\n  you'll become aware of indentation problems before you start editing. \n\nUSAGE:\n  Triggering happens automatically; of cause, you can still start the\n  IndentConsistencyCop ex command to re-check the buffer after changes. \n\n  For very large files, the check may take a couple of seconds. You can abort\n  the script run with CTRL-C, like any other VIM command. "}, {:name=>"tailtab.vim", :summary=>"View log files getting updated automagically", :description=>"This is a plugin that lets you view multiple log files or any files of interest that are modified externally. The files are opened in read \nonly mode.\n\n:TailView /tmp/foo /var/log/bar ...\n\nwill open as many new tabs as files and you can update the file from disk using the \n<Ctrl-K> keypress in normal mode. Also when you swich tabs using the gt command the file gets updated from disk automatically.\n\nOf course you can use the TAB key to complete file names.\n\nNormal vim usage is not affected in any way. Only files opened with the TailView command are in read only mode and updated from disk\nautomatically when you enter that tab"}, {:name=>"desertEx", :summary=>"a colorful desert based scheme", :description=>"The desert scheme is good to our eyes but not beautiful, so  I changed it a lot and made it more colorful, enjoy!\nScreenShot:\nhttp://mbbill.googlepages.com/desertEx1.png\nhttp://mbbill.googlepages.com/desertEx2.png"}, {:name=>"SnippetsMgr", :summary=>"This script helps to work with code snippets.", :description=>"This script helps to work with code snippets. It provides functions to insert, edit, create, delete and rename code snippets.          \nSnippets are files that can be loaded into the active buffer (e.g. programmers can easily add a template function header when writing a new function or add often used codes).                   \n                                                                   \nTo invoke the snippets manager, press <leader>sm                   \n  Memory aid: sm (s)nippets(m)anager                               \nIn the current window a list of code snippets will be shown. To copy a snippet into the buffer in which SnippetsMgr was invoked,  move cursor over a snippet and press <enter>. That's it.           \n                                                                   \nSimple and not very useful code snippets are provided with this script. See them as examples and as starting point to write own ones. Code snippets are very personal. To use them in an efficient way you will have to write your owns.                                         \n"}, {:name=>"StateExp", :summary=>"Ease writing code by expanding statements.", :description=>"The main point this script targets to is to ease writing code. Just type sw<ctrl-s> and you get a complete switch(){case;break;}  statement. \nBut it can also be used to add a header to a letter, etc. What to expand and how to expand can easily be configured.          \n                                                                    \nTo invoke the statement expansion, type a short form of a statement and press <ctrl-s> in insert mode.                        \n  Memory aid: s (s)tatement expansion                               \nThe statement will be expanded. By default the most important C statements are defined. \n                                                                    \nPress <leader>sh to get a list of defined statements.               \n  Memory aid: sh (s)tatement expansion (h)elp                       \n "}, {:name=>"VPars", :summary=>"Parameter substitution functions to be used in text fragments", :description=>"PURPOSE\n\nParameter substitution functions to be used in text fragments.\n\nDesigned as kernel to yet another template processing script, but may as well be used stand-alone or from another Vim script.\n\nMay be used interactively or in batch processing mode, both called from another Vim script (e.g. a templates manager) or directly by the user on a visually selected text block or by calling functions from the command line.\n\n\nCONCEPTUAL OVERVIEW\n\nThese are basic capabilities only. But VPars is extensively documented in the accompanying Vim help text. Look there for more detail and for the programming interface.\n\nVPars basically works on a specially selected text block. It finds variables in there, waits for the user to enter replacement text and substitutes this upon a simple keypress (<F3> by default, but may be redefined at any time). Then the next variable in sequence is found, etc.\n\nThere are built-in mechanisms which allow to skip or alter variables in the course of processing, so VPars will finally wrap around to the beginning of the text block and reprocess it until all variables have been handled.\n\n\nVARIABLES\n\nEach variable is assumed to have one of the following formats.\n\nCURSOR\n<|>\nis a cursor mark which will simply be removed and the cursor be positioned there.\n\nSIMPLE VARIABLES\n<|value|>\nwhere 'value' denotes both the variable label and the default value.\n\n<|value|:label:|>\nwhere 'value' denotes the (possible empty) default value, and 'label' the explicit label of this variable.\n\nRESTRICTIONS\nThere are almost no restrictions on the default value and the label as well, except that they must fit in the same line, and cannot contain another VPars variable. The user can even enter multiple lines as substitution text.\n\nHOW VARIABLES GET SUBSTITUTED\nPressing <F3> with the cursor inside the 'value' field of a simple variable will cause this and all equally named variables be replaced by the following text.\n    * The current variable will be replaced by the text extending from the left '<|' delimiter up to the current cursor position.\n    * If the cursor is positioned immediately after the left delimiter, the variable will be replaced by the given 'default' value.\n    * Any text to the right of the cursor does not count.\n      (Exception: If the variable bears an explicit ':label:' and was initially empty (of the form <||:label:|>), any text between the bars will be taken as replacement, independent of where the cursor was positioned.)\n\nIMPLICIT AUTOMATIC SUBSTITUTION\nAny equally labeled variable within the currently marked text block will automatically receive the same replacement text, except delayed ones (see below). \n\nALTERNATIVES\n<|alt_1|alt_2|..|alt_n|>\nwhere 'alt_1'..'alt_n' denote given alternative substitution values of which the one bearing the cursor will replace this one variable.\n\n<|alt_1|alt_2|..|alt_n|:label:|>\nsame, but explicitely labeled. The selected substitution will replace any variable with this name.\n\nDELAYED VARIABLES\nThere is a primitive means of defining another order to visit the variables and/or cursor marks within the selected text block. This is based on the VPars method of repeatedly processing the given text block until no variables are left over.\n\nIf the variable mark found is surrounded by another level of '< .. >' delimiters, this extra level will be removed and the variable skipped in this turn.\n\nThis allows delaying the variable substitution until others are available, or to position a cursor to a mark located near the beginning of the most recently inserted text after all variable substitutions were done.\n\n\nEXPLICITELY LABELED VARIABLE SUBSTITUTION\nIf there is an explicit ':label:' given, all variables bearing this label will be replaced with the substitution of the first occurrence found. This occurs independent of the form the other variables. Especially will the replacement text of simple variables replace alternative variables bearing this name and vice versa.\n\n\nTEXT BOUNDARIES\nText replacement will occur upon pressing <F3>. As long as there are variables in this block, <F3> will wrap around from the its end to the marked beginning line. This mechanism allows the handling of delayed variables.\n    * The text boundaries are marked linewise.\n    * Usually, the text bundaries will be marked by some calling function.\n    * The user can expressely select a visual block, which will then repeatedly be parsed for variables upon pressing <F3>.\n    * When there is no text block marked or there are no more variables found, the script switches to 'global mode', where the next variable from cursor to the end of the buffer will be found, if any. This global mode is strictly linear, no wrapping around will happen. \n\n\nBATCH PROCESSING\nThere is a VPars function implemented which allows batch replacement of any variable in the selected text block before interactive mode is entered.\n\n\nPRE- AND POSTPROCESSING VARIABLES\nCalling scripts may provide so-called hook functions which provide ways to process a VPars variable before and after substitution. See the vpars.txt help for more."}, {:name=>"surround.vim", :summary=>"Delete/change/add parentheses/quotes/XML-tags/much more with ease", :description=>"Surround.vim is all about \"surroundings\": parentheses, brackets, quotes, XML tags, and more.  The plugin provides mappings to easily delete, change and add such surroundings in pairs.  While it works under Vim 6, much of the functionality requires Vim 7.\n\nExamples follow.  It is difficult to provide good examples in the variable width font of this site; check the documentation for more.\n\nPress cs\"' (that's c, s, double quote, single quote) inside\n\n\"Hello world!\"\n\nto change it to\n\n'Hello world!'\n\nNow press cs'<q> to change it to\n\n<q>Hello world!</q>\n\nTo go full circle, press cst\" to get\n\n\"Hello world!\"\n\nTo remove the delimiters entirely, press ds\" .\n\nHello world!\n\nNow with the cursor on \"Hello\", press ysiw] (iw is a text object).\n\n[Hello] world!\n\nLet's make that braces and add some space (use \"}\" instead of \"{\" for no space): cs]{\n\n{ Hello } world!\n\nNow wrap the entire line in parentheses with yssb or yss) .\n\n({ Hello } world!)\n\nRevert to the original text: ds{ds)\n\nHello world!\n\nEmphasize hello: ysiw<em>\n\n<em>Hello</em> world!\n\nFinally, let's try out visual mode. Press a capital V (for linewise visual mode)\nfollowed by S<p class=\"important\">.\n\n<p class=\"important\">\n  <em>Hello</em> world!\n</p>\n\nThis plugin is very powerful for HTML and XML editing, a niche which currently seems underfilled in Vim land.  (As opposed to HTML/XML *inserting*, for which many plugins are available).  Adding, changing, and removing pairs of tags simultaneously is a breeze.\n\nThe \".\" command will work with ds, cs, and yss if you install repeat.vim, vimscript #2136.\n\nAll feedback appreciated.  I am particularly interested to hear back on the following topics:\n\nHow exactly should indenting be handled?  Is the current s/S distinction useful, or should we just always reindent with =?\n\nIs the s mapping annoying in visual mode? While you can just use c to get the original s function, does it still interfere with motor memory?  This can be disabled if you provide your own map instead, but would this be a good default?\n\nIs the open/closing brace == add/don't add whitespace worth maintaining, or would it be better to just type an extra space before the brace to get said whitespace?\n\nhttp://github.com/tpope/vim-surround"}, {:name=>"C_Epita", :summary=>"Usefull for EPITA students", :description=>"This script will help you,  with the EPITA norme.\n * Headers are automaticaly generated on writing FILE\n * cindent is config\n * (norme checker) not yet implemented"}, {:name=>"vimGTD", :summary=>"frontend to PyGTD todo list manager", :description=>"vimGTD - Using 'Getting Things Done' in Vim\n--------------------------------------------------------------\nall plugin files under the Vim Copyright License\n\nOverview\n--------------\n\nPyGTD is  a simple  Getting Things  Done (GTD) system  based on  David Allen's\npersonal-productivity  book  and  Stephen  Covey's  'Seven  Habits  of  Highly\nEffective People'. It is implemented as Python script written by Keith Martin\n(http://96db.com/pyGTD/). The goal is to easily organize and prioritize your\ntodo lists.\n\nvimGTD is the Vim frontend to the Python program and includes such features as\nsyntax highlighting, file navigation support, and a quick help reference."}, {:name=>"vimksh", :summary=>"Using MSWin Vim with MSWin SFU 3.5", :description=>"For MS Windows XP users with Windows Services for Unix (SFU) 3.5 installed, the vimksh script enables the MS Windows version of Vim to use SFU commands and utilities for its shell commands (e.g., \":shell\" and \":!...\") as well as for its filter commands (e.g., \"1G!Gwc -cl\" followed by a quick \"u\"). No more dealing with \"cmd.exe\" -- you get to deal with ksh instead. The script has been tested with Vim 7.0, but should work with earlier Vim versions and with other versions of MS Windows that run SFU 3.5."}, {:name=>"Remove-Trailing-Spaces", :summary=>"removes the trailing space from the file", :description=>"removes the trailing space from the file when user will save   any changes\n\nTo force the time stamp to be not updated, use the command:\n             \t\t:NOMODSP\nTo change it back, use\n             \t\t:MODSP\n"}, {:name=>"edc-support", :summary=>"Syntax/indent for edc files", :description=>"This vimball provides syntax highlighting and indentation for edc files, as well as embryo scripts embedded withing the edc files.\n\nIt also provides an omni completion script, which will complete all the usual keywords/statements/labels appropriately, as well as complete part names and program names when applicable"}, {:name=>"vdb.vim", :summary=>"Vim becomes an integrated debugger for any language with a text based debugger", :description=>"VDB will eventually provide a generic interface to any text based, line oriented, debugger, such as gdb, or pdb. Right now it only works with gdb, but eventually, it is intended to be made extensible by use of \"interface configuration files\" [potentially in XML, but that's probably overkill] specifying what the debugger of choice considers the commands for various actions to be. It only works on operating systems that support pty's, i.e. not windows. Currently users are able to step over/into a particular line of code, execute until the current cursor line is reached, set watches on expressions, view the output of their programs in a vim buffer, and interactively enter data into the same buffer when their program requires input. More powerful actions can be performed by using the debug console, which gives you direct access to the back-end debugger process. Type commands in here, and see their results both in text, and reflected in the various status displays within vim. You will need vim version 7.0 or higher. Actually it might work on lower versions, I haven't tested yet. For more info check out the README file that's bundled in the package.\n\nYou might want to check out pygdb (vimscript #2270) if you prefer GUI debuggers, it looks very promising.\n\nIf you want to contact me, simply fire off a message to vimdebugger@gmail.com."}, {:name=>"vdb-duplicated", :summary=>"Interrupted upload duplication, do not download", :description=>"Please see vdb.vim instead which is vimscript #1703"}, {:name=>"redcode.vim--Thorne", :summary=>"Redcode '88 '94 and Pspace syntax for Corewars", :description=>"This syntax file supports the REDCODE '88 or '94 (with or without Pspace extensions) languages as defined in the ICWS'94 Draft (extended).\n\n     http://www.koth.org/info/pmars-redcode-94.txt\n\nThe language was first popularized in a March 1984 Scientific American article, Core War Guidelines, by A. K. Dewdney and D. G. Jones.\n\nThis implementation can be configured to flag elements of Redcode '94 when used in coding Redcode '88 warriors. It also highlights line-continuations (responsible for a well-known problem with the program Marcia Trionfale 1.3).\n\n"}, {:name=>"Marks-Browser", :summary=>"A graphical marks browser", :description=>"Description:\nThis script provides a graphical browsers of the user marks for the local\nfile [a-z]\n\nHelp:\nTo open the browser, use the :MarksBrowser command\nThe select the a mark to jump to, use <CR> or <2-LeftMouse>\nTo delete a mark, press d\n\nTo have the browser window not close itself after you jump to a mark, set the\nmarksCloseWhenSelected in your ~/.vimrc file\n\tExample: let marksCloseWhenSelected = 0\n"}, {:name=>"php_getset.vim", :summary=>"Automatically add getter/setters for PHP4 properties", :description=>"This script is modification of: \n\"Automatically add getter/setters for Java properties (including array-based)\"\nby Pete Kazmier.\n\nThis filetype plugin enables a user to automatically add getter/setter\nmethods for PHP properties.  The script will insert a getter, setter,\nor both depending on the command/mapping invoked.  Users can select\nproperties one at a time, or in bulk (via a visual block or specifying a\nrange).  In either case, the selected block may include comments as they\nwill be ignored during the parsing.  For example, you could select all\nof these properties with a single visual block.\n\nclass Test \n{ \n   var $count;\n\n   var $name;\n\n   var $address;\n}\n\n\nThe getters/setters that are inserted can be configured by the user.\nFirst, the insertion point can be selected.  It can be one of the\nfollowing: before the current line / block, after the current line /\nblock, or at the end of the class (default).  Finally, the text that is\ninserted can be configured by defining your own templates.  This allows\nthe user to format for his/her coding style.  For example, the default\nvalue for s:phpgetset_getterTemplate is:\n\n    /**\n     * Get %varname%.\n     *\n     * @return %varname%\n     */\n    function %funcname%()\n    {\n        return %varname%;\n    }\n\nWhere the items surrounded by % are parameters that are substituted when\nthe script is invoked on a particular property.  For more information on\nconfiguration, please see the section below on the INTERFACE.\n\nINTERFACE (commands, mappings, and variables)\nThe following section documents the commands, mappings, and variables\nused to customize the behavior of this script.  \n\nCommands:\n  :InsertGetterSetter\n      Inserts a getter/setter for the property on the current line, or\n      the range of properties specified via a visual block or x,y range\n      notation.  The user is prompted to determine what type of method\n      to insert.\n\n  :InsertGetterOnly\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block or x,y range\n      notation.  The user is not prompted.\n\n  :InsertSetterOnly\n      Inserts a setter for the property on the current line, or the\n      range of properties specified via a visual block or x,y range\n      notation.  The user is not prompted.\n\n  :InsertBothGetterSetter\n      Inserts a getter and setter for the property on the current line,\n      or the range of properties specified via a visual block or x,y\n      range notation.  The user is not prompted.\n\n\nMappings:\n  The following mappings are pre-defined.  You can disable the mappings\n  by setting a variable (see the Variables section below).  The default\n  key mappings use the <LocalLeader> which is the backslash key by\n  default '&#039.  This can also be configured via a variable (see below).\n\n  <LocalLeader>p   (or <Plug>JavagetsetInsertGetterSetter)\n      Inserts a getter/setter for the property on the current line, or\n      the range of properties specified via a visual block.  User is\n      prompted for choice.\n\n  <LocalLeader>g   (or <Plug>JavagetsetInsertGetterOnly)\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block.  User is not\n      prompted.\n\n  <LocalLeader>s   (or <Plug>JavagetsetInsertSetterOnly)\n      Inserts a getter for the property on the current line, or the\n      range of properties specified via a visual block.  User is not\n      prompted.\n\n  <LocalLeader>b   (or <Plug>JavagetsetInsertBothGetterSetter)\n      Inserts both a getter and setter for the property on the current\n      line, or the range of properties specified via a visual block.\n      User is not prompted.\n\n  If you want to define your own mapping, you can map whatever you want\n  to <Plug>JavagetsetInsertGetterSetter (or any of the other <Plug>s\n  defined above).  For example,\n\n      map <buffer> <C-p> <Plug>JavagetsetInsertGetterSetter\n\n  When you define your own mapping, the default mapping does not get\n  set, only the mapping you specify.  \n\nVariables:\n  The following variables allow you to customize the behavior of this\n  script so that you do not need to make changes directly to the script.\n  These variables can be set in your vimrc.\n\n  no_plugin_maps\n    Setting this variable will disable all key mappings defined by any\n    of your plugins (if the plugin writer adhered to the standard\n    convention documented in the scripting section of the VIM manual)\n    including this one.\n\n  no_php_maps\n    Setting this variable will disable all key mappings defined by any\n    php specific plugin including this one.\n\n  maplocalleader\n    By default, the key mappings defined by this script use\n    <LocalLeader> which is the backslash character by default.  You can\n    change this by setting this variable to a different key.  For\n    example, if you want to use the comma-key, you can add this line to\n    your vimrc:\n      \n        let maplocalleader = ','\n\n  b:phpgetset_insertPosition\n    This variable determines the location where the getter and/or setter\n    will be inserted.  Currently, three positions have been defined:\n\n        0 - insert at the end of the class (default)\n        1 - insert before the current line / block\n        2 - insert after the current line / block\n\n  b:phpgetset_getterTemplate\n  b:phpgetset_setterTemplate\n    These variables determine the text that will be inserted for a\n    getter, setter, array-based getter, and array-based setter\n    respectively.  The templates may contain the following placeholders\n    which will be substituted by their appropriate values at insertion\n    time:\n\n        %varname%       The name of the property\n        %funcname%      The method name (\"getXzy\" or \"setXzy\")\n\n    For example, if you wanted to set the default getter template so\n    that it would produce the following block of code for a property\n    defined as \"var $name\":\n\n        /**\n         * Get name.\n         * @return name\n         */\n       function getName() { return $this->name; }\n    \n    This block of code can be produced by adding the following variable\n    definition to your vimrc file.\n\n        let b:phpgetset_getterTemplate = \n          \\ \"\\n\" .\n          \\ \"/**\\n\" .\n          \\ \" * Get %varname%.\\n\" .\n          \\ \" * @return %varname%\\n\" .\n          \\ \" */\\n\" .\n          \\ \"%function %funcname%() { return $this->%varname%; }\"\n\n    The defaults for these variables are defined in the script.  For\n    both the getterTemplate and setterTemplate, there is a corresponding\n    array-baded template that is invoked if a property is array-based.\n    This allows you to set indexed-based getters/setters if you desire.\n    This is the default behavior.\n"}, {:name=>"FencView.vim", :summary=>"Autodetect multiple encodings", :description=>"Usage:                                                             \n              Commands:                                            \n               :FencAutoDetect                                     \n                   Auto detect the file encoding.                  \n                   Built-in detected encodings:                    \n                    Unicode:                                       \n                       UTF-8                                       \n                    Chinese Simplified:                            \n                       CP936 (GBK, EUC-CN)                         \n                    Chinese Traditional:                           \n                       CP950 (Big5)                                \n                       EUC-TW                                      \n                    Japanese:                                      \n                       CP932 (SJIS)                                \n                       EUC-JP                                      \n                    Korean:                                        \n                       CP949 (EUC-KR)                              \n               :FencView                                           \n                   Open the encoding list window,                  \n                   <up> and <down> to select an encoding,          \n                   enter to reload the file                        \n              Menu:                                                \n                Select a file encoding from the                    \n                Tools->Encoding menu just like what you do in      \n                firefox/IE.                                        \n              Options:                                             \n                Set these value in vimrc to config this            \n                plugin. Expmple:                                   \n                let g:fencview_autodetect = 1                      \n                                                                   \n                \"$FENCVIEW_TELLENC\"                                \n                  Now FencView allows the use of an external       \n                  program to determine the file encoding. It       \n                  may give you better performance, or better       \n                  accuracy, in some cases. Set the environment     \n                  variable FENCVIEW_TELLENC (or the vimrc          \n                  variable $FENCVIEW_TELLENC) to use this          \n                  feature. It is currently tested against          \n                  tellenc.                                         \n                  (default: 'tellenc')                             \n                  It means if tellenc is executable, it will       \n                  be used by default. If you still want to use     \n                  the detection mechanism of this script, set      \n                  the value to \"fencview\".                         \n                                                                   \n                \"g:fencview_autodetect\"                            \n                  Auto detect file encoding when you open a        \n                  file.                                            \n                  (default: 1)                                     \n                                                                   \n                \"g:fencview_auto_patterns\"                         \n                  Set this variable in your vimrc to decide        \n                  the pattern of file names to enable              \n                  autodetection.                                   \n                  (default: '*.txt,*.htm{l\\=}')                    \n                                                                   \n                \"g:fencview_checklines\"                            \n                  It checks first and last several lines of        \n                  current file, so don't set the value too         \n                  large.                                           \n                  (default: 10)                                    \n                                                                   \nTip:          1 \"+iconv\" feature is needed. If you are             \n                using Microsoft Windows, make sure you             \n                have iconv.dll in $PATH.                           \n                (http://mbbill.googlepages.com/iconv.dll)          \n                Use command \":echo has('iconv')\" to check it.      \n              2 Make sure there is no modeline at the end of       \n                current file.                                      \n              3 set encoding to utf-8 for better performance.      \n              4 No effect to Vim encrypted files.                  \n                                                                   \n"}, {:name=>"scons.vim", :summary=>"Syntax file for SConscript/SConstruct", :description=>"Syntax file for SConscript or SConstruct, configuration files of the build tool SCons.\n\nhttp://www.scons.org/"}, {:name=>"SWIFT-ATE-Syntax", :summary=>"SWIFT ATE files highlighting", :description=>"Proper SWIFT (http://www.swift.com) ATE files highlighting.\n\nThis syntax complies to FIN release 2006."}, {:name=>"Business-Objects-Syntax", :summary=>"Highlighting for Business Objects formulas", :description=>"Highlighting for Business Objects formulas (english)"}, {:name=>"Test.Base-syntax", :summary=>"Test::Base spec syntax hilighting", :description=>"testbase.vim is Test::Base spec syntax hilighting.\n\nScreenShot: http://f.hatena.ne.jp/images/fotolife/s/secondlife/20061117/20061117163415.png\n  \n: installation\n   This script cp ~/.vim/syntax/testbase.vim\n   and write file detect file ~/.vim/ftdetect/testbase.vim\n      au BufNewFile,BufRead *_test.rb set filetype=ruby | unlet b:current_syntax | syn include @rubyTestBase syntax/testbase.vim | syn region rubyTestBase matchgroup=rubyData start=\"^__END__$\" keepend end=\"\\%$\" contains=@rubyTestBase\n      au BufNewFile,BufRead *.t set filetype=perl | unlet b:current_syntax | syn include @perlTestBase syntax/testbase.vim | syn region perlTestBase matchgroup=perlData start=\"^__\\(DATA\\|END\\)__$\" keepend end=\"\\%$\" contains=@perlTestBase\n"}, {:name=>"darker-robin", :summary=>"Dark color scheme, based on robinhood", :description=>"Dark color scheme, based on robinhood, but less contast, tested on GVim 7.0\n\nIt's looks fine on my TFT in night, evening.\n\nHope, you find it useful :)\n\nBest regards"}, {:name=>"Tail-Bundle", :summary=>"Yet another tail -f plugin", :description=>"This Tail plug-in combines the ideas from vimscript#1374 and vimscript#1692 into one plugin offereing both preview and tabed tail functionality. I also added shortcut mapping to \"set wrap\" and \"set number\" - which both can be useful when observing log files.\n\nLast not least I use the new Vim 7.0 autoload feature so this script should load faster and use less memory then there vimscript#1374 and vimscript#1692.\n\nAll in all: The best tail plugin you can get. If you still have ideas to improve visit our Google-Code page: http://code.google.com/p/vim-scripts/wiki/TailBundle\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n"}, {:name=>"tcl_snit.vim", :summary=>"syntax coloring for snit, extends tcl.vim", :description=>"Adds snit syntax to tcl.vim (vimscript #1603)\n\nWords that (can) conflict with Tcl\n      option - same word, different usage\n      variable - has additional options\n      configure - can step on tk configure !watch out! \n\n"}, {:name=>"tcl_sqlite.vim", :summary=>"syntax coloring for sqlite inside tcl, extends tcl.vim", :description=>"Adds sqlite syntax to tcl.vim (vimscript #1603)\n\nWords that (can) conflict with Tcl\n        eval -  overrides eval as a secondary command for interp. \n                   This should really not be a problem.\n"}, {:name=>"tcl.vim--smithfield-indent", :summary=>"indentation file for tcl", :description=>"This is a replacement for the tcl indent file that ships with vim. \n\nHandles line continuations, nested braces and combination of the two. Skips over braces in comments. This should produce indented code that looks \"as you'd expect\".\n\nIf you have any suggestions or bugs, please send them along. \n\nRequires vimscript #1603."}, {:name=>"tabula.vim", :summary=>"ergonomic green chalkboard colorscheme for GUI and 256 colors xterms", :description=>"This is a \"chalkboard\" green background Vim colorscheme featuring soft, yet highly readable contrasts. It is based on marklar.vim by SM Smithfield (vimscript #1483), which I like very much.\nThe GUI colors have been optimized for easy, equal contrast on a TFT monitor.  Main goal was to minimize eye strain when working in a mixed environment where during long edit sessions you have to switch to high contrast white background screens every now and then.\nAdditionally there have cterm colors been defined so they will look mostly identical on a 256 color (Linux) xterm. \n\nView a color sample: http://img87.imageshack.us/img87/4386/tabulacolors.png\n(Tabula settings dialog is shown at bottom.)\n\nStarting with v. 0.2 the colorscheme is adjustable either on setup or on the fly. To permanently redefine the defaults put these settings in your .vimrc file before the\n        :colorscheme tabula\nline, e.g.:\n        :let Tabula_ColorPre = \"red\"\n\nTo redefine them on the fly call the built-in options dialog:\n        :call Tabula()\nfrom the Vim command line.\nThe new settings will be immediately effective as soon as control is back in the main dialog.\nTo get the defaults back issue\n        :colorscheme tabula\nagain.\n(This has changed from earlier tabula versions where this call was necessary to make the settings changes effective.)\n\nDisplay Statements In Bold:\n        Tabula_BoldStatement = 0    -- statements display not bold\n        Tabula_BoldStatement = 1    -- statements display bold\nDefaults to non-bold display.\n\nSet GUI Cursor Color:\n        Tabula_CurColor = 'blue'\n        Tabula_CurColor = 'red'\n        Tabula_CurColor = 'yellow'\n        Tabula_CurColor = 'white'\nDefaults to 'blue'.\nNOTE: This works in gvim only. In a terminal (like xterm) the cursor cannot be changed.\n\nSet Color For Preprocessor Statements:\n        Tabula_ColorPre = 'blue'     -- purple-blue\n        Tabula_ColorPre = 'red'\t      -- orange-red\n        Tabula_ColorPre = 'yellow'  -- lightgreen-yellow\nDefaults to 'blue'.\n\nUse Dark Error Background:\nSometimes desirable for less distracting error highlighting.\n        Tabula_DarkError = 0        -- light error background\n        Tabula_DarkError = 1        -- dark error background\nDefaults to light error background.\n\nUse multiple colors for constant values:\n        Tabula_FlatConstants = 1    -- use one common color for all constants\n        Tabula_FlatConstants = 0    -- use a different color for each constant type\nDefaults to using one common color.\n\nHow To Display Ignore And NonText Characters:\n        Tabula_InvisibleIgnore = 0    -- slightly visible\n        Tabula_InvisibleIgnore = 1    -- invisible on standard background\nDefaults to invisible display.\n\nShow Line Numbers Underlined:\nSometimes useful to spot a line more easily.\n        Tabula_LNumUnderline = 0    -- not underlined\n        Tabula_LNumUnderline = 1    -- line numbers are underlined\nDefaults to not underlined.\n\nLet Search Occurrences Stand Out More Prominently:\n        Tabula_SearchStandOut = 0    --- normal dark background display\n        Tabula_SearchStandOut = 1    --- prominent underlined display\n        Tabula_SearchStandOut = 2    --- very prominent display\nDefaults to normal display.\n\nHow To Display TODOs And Similar:\n        Tabula_TodoUnderline = 0    -- display on a blue background\n        Tabula_TodoUnderline = 1    -- display them underlined white\n        Tabula_TodoUnderline = 2\t   -- display them bold\n        Tabula_TodoUnderline = 3\t   -- do not enhance them at all\nDefaults to underlined display.\n\nHow to display typographic character values (bold, italic, underlined):\n      Tabula_CharValuesColored = 0\tcolored in addition to typographics\n      Tabula_CharValuesColored = 1\tnot colored, italics in terminal-based vim reversed\n      Tabula_CharValuesColored = 2\tnot colored, underlined in terminal-based vim reversed\nDefaults to a colored typographics character values display.\nNOTE: \"Colored\" is to be preferred in terminal-based vim because there is no easy way to distinguish italic from underline. In this mode italics and underlined characters are distinguished by different color shades, both displaying not reversed (usually black on a white background field) which is easier to read.\nOtherwise there are two non-colored modes:\n- italics are shown reversed, underlines are shown underlined\nor\n- italics are shown underlined, underlines are shown reversed.\nThese sub-modes do not affect the GUI display, however, where italics and underlined always display as usual, only color coded or in the common text color.\n\n"}, {:name=>"WLS-Mode", :summary=>"Complete Bea-Weblogic-Mode as tar.bz2", :description=>"Don't expect to much as it is only Version 0.1 but if you need to edit/create weblogic.Admin [1] scripts then this plugin will be helpfull.\n\nAs time passes I plan to add other goodies for Weblogic users. Other contributors are welcome as well.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n\n[1] http://e-docs.bea.com/wls/docs81/admin_ref/cli.html"}, {:name=>"gvimext.dll--support-tabs-under-VIM-7", :summary=>"Support loading files into a VIM tab", :description=>"Important: this update only applies to VIM 7.\n\nThis update to gvimext.dll supports the loading of files under a new tab in VIM 7.  Both the gvimext.dll and its updated source codes are provided in the attached zip file.\n\nI believe this code change will be included in the upcoming VIM release.  So this upload is for the brave and the impatient.\n\nBelow is the usage:\n0.  The new dll will display \"Edit with ... using tabs\" options upon right-click on files in Windows Explorer based on a registry key and the Shift key combination.\n1.  If you don't import UseTab.reg file into registry, gvimext.dll will behave just like before the change.  You can still get the \"using tabs\" options by holding down the Shift key before right-clicking the files.\n2.  Shift key effect\nShift key serves as a toggle key for the \"Edit with ... using tabs\" context menu.  If you hold down the Shift key and then right-click the selected files in Windows Explorer, the opposite of the default Vim context menu will display.\nOnce the Vim content menu displays, you don't need to hold down the Shift key anymore.  Its effect will hold until the next Right-Click.\n"}, {:name=>"renamer.vim", :summary=>"Use the power of vim to rename groups of files", :description=>"Basic Usage:\nShow a list of file names in a directory, rename then in the vim \nbuffer using vim editing commands, then have vim rename them on disk\nStart the plugin with the command :Renamer\n\nDetails:\nRenaming a single file is easily done via an operating system file explorer,\nthe vim file explorer (netrw.vim), or the command line.  When you want to\nrename a bunch of files, especially when you want to do a common text\nmanipulation to those file names, this plugin may help.  It shows you all\nthe files in the current directory, and lets you edit their names in the vim\nbuffer.  When you're ready, issue the command \":Ren\" to perform the mass\nrename.  The intention is to rename files in the same directory, but\nrelative paths can be specified to move files around - provided the \ndestination directories exist"}, {:name=>"cf.vim--Severinghaus", :summary=>"Syntax file for ColdFusion", :description=>"This is a reasonably complete syntax file for ColdFusion, up to at least version 7.0. I have pored over the LiveDocs fairly thoroughly to make sure that every valid tag, attribute, and function is included; nonetheless, if you find a problem, please let me know! The only current shortcoming that I'm aware of is that deprecated items are not highlighted properly, though they are tagged with the \"Error\" class.\n\nTwo screenshots are available, one of plain CFML and one of a ColdFusion component:\nhttp://severinghaus.org/projects/cfml.png\nhttp://severinghaus.org/projects/cfc.png"}, {:name=>"vimpager", :summary=>"Use ViM as PAGER", :description=>"A slightly more sophisticated replacement for less.sh that also supports being set as the PAGER environment variable.\nDisplays man pages, perldocs and python documentation properly.\nDefinitely works on Linux, Solaris, OSX and Cygwin. Should work in most other places, if it detects your \"ps\" correctly."}, {:name=>"pyljvim", :summary=>"pyljvim - LiveJournal Plugin for VIM.", :description=>"pyljvim is a a Livejournal Plugin for Vim. One can post to the Livejournal  directly from vim! :)\n\nHow to use pyljvim:\n1) Provide Configfile.txt required details and Install it on your platform\n2) Two Templates for posting are provided\n\n:LJTemplate standart\n\nOR\n\n:LJTemplate extended\n\nFill in the details. Subject is a must.\n3) Give a Space after those details and type your text to the world at LJ.\n4) When you have finished typing it, do a:\n\n:LJPost\n\n5) Your post is online.\n\n-- \nSenthil\nhttp://phoe6.livejournal.com"}, {:name=>"capslock.vim", :summary=>"Software Caps Lock", :description=>"This plugin enables a software caps lock.  This is advantageous over a regular caps lock in that normal mode commands, other buffers, and other applications are unaffected.\n\nThe default mapping is <C-G>c but if you use this feature regularly, you will probably want a shorter one.  Simply map something to <Plug>CapsLockToggle and you are good to go.  The default behavior is to disable caps lock when leaving insert mode, but this is customizable too.\n\nA couple of functions are provided for adding a caps lock indicator to the statusline.\n"}, {:name=>"ruby_imaps", :summary=>"Textmate like Ruby snippets for Vim", :description=>"This is (another) snippets script that tries to emulate what I've seen of Textmates snippets feature (I haven't used Textmate, so this assumption is based on rails screencasts I've watched).\n\nThis uses imaps.vim. A *great* script originally written by Srinath Avadhanula and modified by Benji Fisher. It is part of the latex suite of scripts but I've included it here with Srinaths and Benjis permission. (If you use latexsuite then there is no need to install  the file again).\n\nI've set maplocalleader to \";\" in ruby_imaps.vim. If you have set it elsewhere then comment out or remove the first line in that script. You can change it to your preferred key if required. All mappings begin with <localleader>.\n\nHow it works.\nSince this is a ruby ftplugin, the mappings will only work if you are editing a .rb file\nThe script is nothing more than a collection of imaps that contain '<+  +>' regions. The description of which is probably best illustrated with an example.\n\nin a .rb file type ' ;tc ' (<localleader>tc) while in insert mode (without the quotes).\nthis will expand to:\n\n---\nrequire \"test/unit\"\nrequire \"<+ lib file name +>\"\n\nclass Test<+ NameOfTestCases +> < Test::Unit:TestCase\n  def test_<+ test case name +>\n    <++>\n  end\nend\n---\n\nand <+ lib file name +> should be selected.\nIf you start typing the path to the required file it will overwrite <+ lib file name +>.\nOnce you've finished, hold the control key and hit 'j' (CTL-j).\n\nThis is were the magic of imaps.vim happens!\n\nYou should jump to the next <+ +> section (<+ NameOfTestCases +>)\nAgain, replace by simply typing a viable name.\nCTL-j again will jump to and select <+ test case name +>\nContinue typing replacements and jumping to the next <+ +> region using CTL-j until you've completed the snippet.\n\nNote: I've specifically written this for ruby (NOT rails). I've intentionally called it ruby_imaps to not only indicate it uses imaps.vim, but hoping that if others liked it and would like to create other ftplugins they might follow the naming convention (python_imaps, perl_imaps etc). Only a suggestion though ;-)\n\nBrowse through ruby_imaps.vim to see all mappings.\nSome others to test are:    ;ama  ;inj0  ;eawi\n\nI've tried to make the text between the <+ and +> describe what needs to be typed at any particular point.\n\nAny suggestions or feedback would be greatly appreciated (markonlinux At internode Dot on Dot net)\n(For eg I really need to include more do/ end blocks!)\n\n\n-- \nMark"}, {:name=>"Templeet", :summary=>"Syntax file for templeet", :description=>"Templeet is an open-source project initiated by Pascal Courtois and Fabien Penso. It allows you to create photo galeries, news systems, personal sites, blogs, etc. Using Templeet, you can generate HTML, CSS, SVG pictures, SMIL, and any kind of text files.\n\nFor more details, see http://templeet.org/index.en.html"}, {:name=>"sal-syntax", :summary=>"syntax file for the SAL modeling language", :description=>"SAL (http://sal.csl.sri.com/) is a language to specify automata for model checking.  This is a syntax file that can help read the models."}, {:name=>"exUtility", :summary=>"Global search,symbol search,tag track...(Like IDE/Source Insight)", :description=>"The original idea to develop this plugin is to enhance the vim, as an IDE like editor.\nThe plugin has the following features:\n\n    Global Search \n        1: Display global search result.\n        2: The search result can be edit and batch select into a quick view window. \n        3: Display the search result history.\n\n    Tag Select\n        1: Display tag preview and have good ui for user to select tags\n        2: Display tag stack and code-line preview for easy pop stack, re-entry stack, re-select tags.Good ui for user to easy track code.\n\n    Symbol List\n        1: Display the symbols based on the tags-file\n        2: Pick up symbol pattern and copy it into quick-view window\n        3: Symbol tag jump\n\n    Environment Setting\n        1: Automatically generate project\n        2: Variable setting\n        3: Multi-projects support\n                                                *exUtility-Contact*\n"}, {:name=>"tAssert", :summary=>"Simple assertions, poor man's contracts for vim script", :description=>"This plugin defines a command |:TAssert| that takes an expression as \nargument and throws an exception if this expression evaluates to \n|empty()|. You can insert these comments throughout your code whenever \nsomething could potentially go wrong. The exception is then thrown right \nwhere the problem occurs. You could think of it as a poor man's \ndesign-by-contract substitute.\n\nOne goal of this plugin is to allow users to quickly switch on or off \nassertions depending on the context. This can be done either by:\n\n    1. Turning assertions off so that they are not evaluated. This can \n       be achieved by setting g:TASSERT to 0 or by calling the command \n       |:TAssertOff|.\n\n    2. Commenting out assertions in the current buffer by calling the \n       commmand |:TAssertComment|.\n\n\nExample:\n\n    fun! Test(a, b)\n        TAssertType a:a, 'string'\n        TAssertType a:b, 'number'\n        TAssert !empty(a:a)\n        return repeat(a:a, a:b)\n    endf\n\n\nLogging:\n\nTAssert also includes a few convenience commands for logging. The \nvariable g:TLOG controls where messages are written to:\n\n    echom ... Print messages in the echo area.\n    file  ... Print messages to a file; syntax \"file:FILENAME\"\n    Decho ... Print messages via Decho (vimscript#642)\n"}, {:name=>"perlcritic-compiler-script", :summary=>"Compiler file for the perlcritic syntax checker", :description=>"This is a simple compiler script for perlcritic (http://search.cpan.org/~thaljef/Perl-Critic-0.22/bin/perlcritic) a tool to critique Perl source."}, {:name=>"rdark", :summary=>"A dark colorscheme for the GUI", :description=>"A dark color scheme for the GUI, inspired by the Tango color scheme.\nUse vimscript #1571 to take full advantage of the PHP syntax highlighting features.\n\nScreenshot: http://ld.yi.org/vim/rdark/\n\nFeatures:\n  - let rdark_current_line = 1 if you want to highlight the current line"}, {:name=>"aedit", :summary=>"Advanced Edit", :description=>"Advanced Edit provides convenience commands, shortcuts and completion for programming.\nFull documentation at http://ld.yi.org/vim/aedit/."}, {:name=>"vbugle", :summary=>"Highlight possibe security bugs", :description=>"vBugle will highligh possible security bugs in Java/C/PHP/C++/ASP source code, using the current Bugle list. To get the most recent bug list go to http://www.cipher.org.uk/index.php?p=projects/bugle.project . Very small at the moment but if you want to give more bug regexp submit them at the link above. \n\n"}, {:name=>"echofunc.vim", :summary=>"Echo the function declaration in the command line for C/C++.", :description=>"Authors:\n              Ming Bai <mbbill AT gmail DOT com>,\n              Wu Yongwei <wuyongwei AT gmail DOT com>\n\nUsage:\n              When you type '(' after a function name\n              in insert mode, the function declaration\n              will be displayed in the command line\n              automatically. Then you may use Alt+- and\n              Alt+= (configurable via EchoFuncKeyPrev\n              and EchoFuncKeyNext) to cycle between\n              function declarations (if exists).\n\n              Another feature is to provide a balloon tip\n              when the mouse cursor hovers a function name,\n              macro name, etc. This works with when\n              +balloon_eval is compiled in.\n\nOptions:\n              g:EchoFuncLangsDict\n                Dictionary to map the Vim file types to\n                tags languages that should be used. You do\n                not need to touch it in most cases.\n              g:EchoFuncLangsUsed\n                File types to enable echofunc, in case you\n                do not want to use EchoFunc on all file\n                types supported. Example:\n                  let g:EchoFuncLangsUsed = [\"java\",\"cpp\"]\n              g:EchoFuncMaxBalloonDeclarations\n                Maximum lines to display in balloon declarations.\n              g:EchoFuncKeyNext\n                Key to echo the next function\n              g:EchoFuncKeyPrev\n                Key to echo the previous function\n\nThanks:       edyfox\n\n\nScreen shot:\n   http://mbbill.googlepages.com/echofunc.PNG\n"}, {:name=>"applescript.vim", :summary=>"Syntax highlighting for AppleScript", :description=>"Syntax file for AppleScript. Requires local ~/.vim/filetype.vim. More details on http://www.fastnlight.com/syntax"}, {:name=>"gnuplot.vim", :summary=>"Syntax highlighting for Gnuplot", :description=>"Syntax file for Gnuplot.\nRequires local ~/.vim/filetype.vim.\nMore details on http://www.fastnlight.com/syntax\n"}, {:name=>"RunVim.applescript", :summary=>"AppleScript to launch vim w/in Terminal (Mac OS X)", :description=>"Script to launch command-line vim w/in Terminal.\nFor full details & Xcode project, see http://www.fastnlight.com/runvim\nNote, must be built w/ Xcode/AppleScript Studio project. Requires InterfaceBuilder .nib bindings & Info.plist."}, {:name=>"Info.plist", :summary=>"Mac OS X Property List for file type bindings to vim", :description=>"This is a companion file to the RunVim.applescript file. Finder and LaunchServices use this file to map file types to their corresponding applications.\n\nFull details on: http://www.fastnlight.com/runvim"}, {:name=>"filetype.vim", :summary=>"Maps *.applescript, *.as to applescript, *.plt to gnuplot", :description=>"Defines two filetypes:\n\n*.applescript,*as  --> applescript\n*.plt,.gnuplot --> gnuplot\n"}, {:name=>"R-MacOSX", :summary=>"Evaluate R (www.r-project.org) code from Vim in Mac OS X.", :description=>"Enables you to evaluate code in R (http://www.r-project.org) via the shell command \"osascript\". Tested on Vim 7.0, R 2.4.0 (GUI 1.17) and Mac OS 10.4.8. Probably should also work on earlier versions.\n\nEvaluate current line or visual selection with <Cmd-E> and source current file with <Shift-Cmd-E>. The key mappings are inspired by the R GUI internal editor.\n\nTODO (patches accepted!):\n- the key mappings should be customizable"}, {:name=>"Utility", :summary=>"Vertical Copy", :description=>"This is the script which duplicates current  text in current file vertically. \n\nPlay with beautymargin variable to get desired indentation. \n\ncan be executed using  command  :call ColCopy()\nand you will see that it performs vertical copy."}, {:name=>"vst_with_syn", :summary=>"combine of Mikolaj Machowski's VST and Estienne Swart's rest.vim", :description=>"Fixed non-broken space bug in chinese environment. (just change scriptencoding to utf-8)\nFixed '\\&#039 escape bug to make VST more python-restructure like, and the code more clear.\nTake Estienne Swart's rest.vim in and make it VST compatible,and fix bugs.\n\nI would like to send this to Mikolaj Machowski, but I can't contact him. So I upload it here, before Mikolaj Machowski got it :))"}, {:name=>"nightflight.vim", :summary=>"Yet another dark color scheme; dedicated to Antoine de Saint-Exupéry", :description=>"\"Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\"\n-- Antoine de Saint-Exupery \n"}, {:name=>"amifmt.vim", :summary=>"Syntax for AmiFormat", :description=>"http://orangoo.com/labs/AmiNation/AmiFormat/"}, {:name=>"compilerflex.vim", :summary=>"Compiler plugin for Adobe Flex 2 compiler", :description=>"A simple Vim compiler plugin to run ':make' for Adobe Flex 2 MXML files.\nCurrently, it works only with 'mxmlc'."}, {:name=>"javascript.vim--Frstenberg", :summary=>"javascript highlight", :description=>"javascript syntax highlight containing DOM keywords"}, {:name=>"toggle_word.vim", :summary=>"toggles words, ie. turn on into off, true into false, etc.", :description=>"Toggles words and preserves case. The words will get converted like this:\n\n  on -> off\n  On -> Off\n  ON -> OFF\n \nany other case gets converted to lowercase, e.g.:\n\n  tRUe -> false\n\nInspired from vimscript #1676\nAll I really wanted besides what that script did, was the ability to\npreserve the case of words.\n\nUsage:\nOnce installed it will give you a ToggleWord() command and will map it by\ndefault to \"<leader>t\". All you need to do is position the cursor over the word\nyou want to toggle and press \\t in normal or visual mode.\n"}, {:name=>"GotoFileArg.vim", :summary=>"Jump right to file in arg list by name, substr, regex", :description=>"GotoFileArg.vim v0.9b\n\nMostly for those who load up VIM with a lot of files at once in the arg list.\nWhen jumping around in files, this allows you to jump right to a file, by a\nsubstring/regex of the filename.  It repositions VIM in the arg list so\nsubsequent :n :N commands work from the actual location of the file.\n\nAt present it also maps esc-f as the keystroke to type the filename in.\n(esc-f is alt-f / meta1-f on my system, and many others).\n\nFeatures:\n  * Filename match is done using \"=~\" so a substring / regex are fine\n  * Last pattern is remembered\n  * If the current filename matches, the search, as one would expect, begins\nat the next file, and wraps.\n"}, {:name=>"kib_darktango.vim", :summary=>"A color scheme based on DarkTango specially for Python editing", :description=>"The color scheme I use to edit all my Python files. \nIt is more or less based on DarkTango color scheme.\n\nSome users told me it was nice with PHP files as well, but I haven't tested with other files than Python and Ruby.\n\nA screenshot is here :\nhttp://kib2.free.fr/documents/Vim/vim_kib_dark_tango.png\n\nAll comments are welcome.\n"}, {:name=>"tGpg", :summary=>"Yet another plugin for encrypting files with gpg", :description=>"This plugin currently can do the following:\n    - encrypt symmetrically\n    - encrypt asymmetrically\n    - clearsign buffer contents\n\nI couldn't get any of the existing gpg plugins to work properly (windows \nGvim & cygwin gpg) and do all the things I wanted it to do, so I wrote \nthis one. The main purpose is to perform symmetric encryption (the \ndefault) but it's flexible enough to do also clearsign and asymmetric \nencryption. Depending on your version of gpg, this script could also \nbe used as some kind of password safe.\n\nYou can set g:tgpgMode or b:tgpgMode to 'encrypt' for switching to \nasymmetric encryption as default. You can also control the use of \nsymmetric and asymmetric encryption by setting set \ng:tgpgPattern_symmetric and g:tgpgPattern_encrypt.\n\nThis plugin passes the passphrase on the command line to the gpg \nprogramm. So, it could be possible that somebody makes the passphrase \nshow up in some command log. Under some circumstances it could also be \npossible that some info (eg the recipients) is logged in your viminfo \nfile. If you clearsign a message, the plain text will be written to \ndisk. Ie, if you clearsign a gpg encrypted message, the text will \ntemporarily be written to disk as plain text -- please keep in mind the \nvast range of possible consequences.\n\nThis plugin uses the (Buf|File)(Read|Write)Cmd autocommand events to \nwrite/read the file. I'm not sure how this works out with other plugins \nusing these events.\n\nAs I don't like typing passphrases, this plugin caches all the \npassphrases entered in a script local variable. This means that \npassphrases are likely to be written to the swapfile, from where \nsomebody somehow could possibly do something ... Set g:tgpgCachePW to 1 \n(buffer-wise caching only) or 0 (no caching) to change this.\n\nThis plugin was tested with Windows GVim & cygwin gpg 1.4.5 (using bash \nas shell) as well as linux vim & gpg 1.4.5. It's possible that the use \nof a pure Windows version of gpg or cmd.exe as shell doesn't work. \n(Please report problems.)\n\nIf you get a message telling you about gpg command line options instead \nof the decrypted file, please check the value of g:tgpgShellQuote.\n\nIf writing fails, it's possible that you end up with a corrupted or \nempty file. That's why we make backups by default. Set g:tgpgBackup \nto 0 to change this.\n"}, {:name=>"kib_plastic", :summary=>"My second theme for Python editing.", :description=>"A new theme, relaxing with pale color scheme.\n\nI was not aware that Dmitry Vasiliev wrote an additional python syntax file for Vim, the next versions of the theme will try to use it.\n\nOnce again, a the script and a screenshot can be seen here :\nhttp://kib2.free.fr/documents/Vim/\n\nDon't forget to rate it, please.\n\n"}, {:name=>"surrparen", :summary=>"Hilights a pair of parens/braces that surround the cursor", :description=>"The surrparen plugin hilights a pair of parens/braces that surround\nthe cursor position automatically. Unlike the matchparen.vim, it works \neven when the cursor is not just on a paren/brace.\nIt's useful especially for texts that have many parens like lisp source."}, {:name=>"TTrCodeAssistor", :summary=>"Accelerate your inputing during coding,with auto-complete the function prototype", :description=>"I make it as easy as possible and make a lot of action for you to accelerate \nyour inputing coding , accoding to the habit of a coder . So i make a lot of \nexpand 'key' word to append the content with hot key <c-cr> , and move to the\ndifferent area just by <tab> . So ,try and  enjoy it ! I am sure you will love it!\n\nI add the function that let the ( can  complete the function prototype when you input \nyour coding  which make you not have to remeber the sequence of the function arguments.\n\nAdd the menu item which let you can  control whether this plugin can start or stop.\nAnd of course you can let it start automatically by add this to your vimrc:\nlet g:TTrCodeAssistor_AutoStart=1\n\nusage :\n<c-cr> to expand the 'key' word ( you can change it to you habit )\n<tab> to move forward and <s-tab> to move backward between the 'labels'\n(         key to compete the function prototype automantically.\n)         automatically move or input itself accoding to the content\n<bs>   use as normal but will remove the ) when its front char is (\n\nRecently ,  i will just add some useful function without map them to some key\nJust to expand the function of this plugin , so you can map it according to  your taste. :-)\n1. TTrcodeAssistor_ToggleComments\n                  nnoremap <F7> :call TTrCodeAssistor_ToggleComments()<CR>\n                  vnoremap <F7> :call TTrCodeAssistor_ToggleComments()<CR>\n\n\nNote : \n       the function prototype completing must use the exuberant ctags to\n       make the tag files which you should add to vim by :set ctags+=/your/file\n       and You have to add the arguments  --fields=+S after all your arguments\n       while making the tag files with 'ctags'\n       ex : Make the tags for all the  files of current directory including the subdirectory\n             ctags -R --c-types=+p --fields=+S *\n\n'key' word table can be seen in the file.\n\nJust have a try."}, {:name=>"sparql.vim", :summary=>"Syntax file for SPARQL query language for RDF", :description=>"This is a first stab at syntax highlighting for SPARQL; Very useful if you write SPARQL in, for example, rq files that you can use with the roqet command line query processor. \n\nMore information on SPARQL at http://www.w3.org/TR/rdf-sparql-query/. \n\nYou might find a more recent version at http://www.redslider.net/2007/2007-01-06-sparql-syntax-vim.html (check the last modified date in the script comment). "}, {:name=>"BinarySearchMove", :summary=>"implements a binary search algorithm to a cursor movement", :description=>"Move a cursor with binary search principle - each step is twice shorter than previous.\nThis requires log2(N) steps in a worth case to position in a line with a length N (7 keypresses for a 120 chars line).\n\nleft/right movement are bound to H and L\nup/down to <Leader>u and <Leader>d \n"}, {:name=>"lbdbq", :summary=>"query lbdb from Vim", :description=>"Functions and various mode mappings for querying lbdb (http://www.spinnaker.de/lbdb/) when using Vim to edit mails and mail headers, for example from Mutt (http://www.mutt.org).\n\nUsing this utility lines like the following appearing in a Vim buffer:\n    To: name surname, name2 surname2\ncan be automatically converted to lines like\n    To: My Friend <foo@example.com>, My Other Friend <bar@example.com>\nby querying lbdb.\n\nWhen the expansion of a given contact is ambiguous (i.e. it corresponds to more than one contact) the user is interactively asked to choose among them.\n\nThe utility can be used in various ways:\n- in normal mode typing <Leader>lb: the current recipient line will be expanded (i.e. all expandable short names will be expanded to full name/address pairs)\n- in insert mode typing <Leader>lb: same as above but without leaving insert mode\n- in line visual mode typing <Leader>lb: same as above but all the visually selected line will be subject to expansion\n- in visual mode typing <Leader>lb: only the short names contained in the visually selected text will be subject to expansion\n\nRELATED SCRIPTS\n\nI'm (now) aware that vimscript #388 is older than this script of mine and provide similar features. But this script is strictly more powerful (YMMV of course). For example it works in various modes (visual/insert/normal/...), is able to substitute more contacts at once, and takes into account the semantics of recipient lines. E.g.: if you try to expand \"name surname\" (without double quotes) the plugin looks up for both of them, while vimscript #388 will look up only for the part under the courses, leading more likely to ambiguous answers."}, {:name=>"kate.vim", :summary=>"Kate Color Scheme", :description=>"Simple light color scheme which is as close to Kate as I could get.  Let me know of any updates that need to be made."}, {:name=>"conlangs", :summary=>"Esperanto text typing plugin", :description=>"Better alternative to Esperanto keyboard (also Volapük is supported gratis). Another location is http://wagner.pp.ru/~slobin/vim/conlangs.zip"}, {:name=>"lojban", :summary=>"Lojban language support plugin", :description=>"An exhaustive support for the Lojban language (http://www.lojban.org) - ftdetect, ftplugin and syntax files in one bundle. Another location is http://wagner.pp.ru/~slobin/vim/lojban.zip\n "}, {:name=>"surrogat", :summary=>"Surrogate alphabets handling plugin", :description=>"This plugin converts Unicode characters to their ASCII representations (HTML, LaTeX, any) and vice versa. Data driven, highly configurable. Another location is http://wagner.pp.ru/~slobin/vim/surrogat.zip\n "}, {:name=>"aspnetcs", :summary=>"Syntax highlighting for ASP.NET C# files", :description=>"This script is just a syntax highlighting file for ASP.NET files (.aspx, .ascx) written with C# as the language."}, {:name=>"lua-support", :summary=>"Lua-IDE -- Write and run Lua-scripts using menus and hotkeys.", :description=>"- insert various types of comments\n- insert complete statements (e.g. 'if then else end' )\n- insert often used code snippets (e.g. empty function, open file) \n- read, write, maintain your own code snippets in a separate directory\n- run scripts or run syntax check from within the editor\n- show compilation erros in a quickfix window; navigate with hotkeys \n\nHere are some screen shots :   http://lug.fh-swf.de/vim/vim-lua/\n\nThe help file online :   http://lug.fh-swf.de/vim/vim-doc/luasupport.html\n\nDocumentation \n_____________ \nThis plugin comes with a help file (luasupport.txt).  Read it with   \n   :h luasupport \nor type \\h in normal mode."}, {:name=>"code_complete", :summary=>"function parameter complete, code snippets, and much more.", :description=>"Demo :http://files.myopera.com/mbbill/files/code_complete.gif\nIt shows what this script can do.\nIn insert mode, when you type \"<tab>\"(default value of g:completekey) after function name with a \"(\" , function parameters will be append behind, use \"<tab>\" key again to switch between parameters.\nThis key is also used to complete code snippets.\nExample:\npress <tab> after function name and (     \n  foo ( <tab>                             \nbecomes:                                  \n  foo ( `<first param>`,`<second param>` )\npress <tab> after code template           \n  if <tab>                                \nbecomes:                                  \n  if( `<...>` )                           \n  {                                       \n      `<...>`                             \n  }                                       \n"}, {:name=>"tcl_itcl.vim", :summary=>"syntax coloring for itcl, extends tcl.vim.", :description=>" Adds itcl syntax to tcl.vim (vimscript #1603)"}, {:name=>"tcl_togl.vim", :summary=>"syntax coloring for togl. extends tcl.vim", :description=>"Adds togl syntax to tcl.vim (vimscript #1603)\n"}, {:name=>"recent.vim--Wokula", :summary=>"Quick access to recently written files", :description=>"Former recentern.vim\nInspired by vimscript #1228\n\nRecent.vim keeps track of files you have _written_ recently.  This is useful\nto continue work on files that are scattered around the file system.\n\nThe list of filenames is persistently stored in ~/.vim/recent_files\n\nPer default, the filelist shows up at startup if no other file (or session) is loaded.\nAlso a menu with commands gets installed.  You can turn these things off.\n\nTo open a file of the list, several commands and options are provided to make\nuse of windows and tabpages.\n\nDetails can be found in the help file.\n\nMisc:\n- if there is a window for a file, it is always reused (first one found in\n  any tabpage), currently not customizable\n- files can be ignored based on autocmd-pattern\n- filenames can be highlighted based on extension\n- the file list is only updated when necessary"}, {:name=>"SnipSnap", :summary=>"Filetype and Syntax SnipSnap Wiki.", :description=>"Syntax and Filetype plugin for SnipSnap Wiki [1].\n\nUse together with Editus Externus [2] and FireFox [3] for easy editing of SnipSnap Wiki pages.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n\n[1] http://www.snipsnap.org/space/start\n[2] http://martin.krischik.com/index.php/Main/EditusExternus.\n[3] http://www.mozilla.com/firefox"}, {:name=>"lispcomplete.vim", :summary=>"SLIME-like compound completion for Lisp", :description=>"*** Before using this script, you should check out Limp - http://mikael.jansson.be/hacking/limp/docs/\nIt gives an experience much closer to SLIME, and is most likely a better solution. ***\n\nAn omnifunc that provides SLIME style completion of compound keywords.\n\ne.g.   \\\"m-v-b<C-X><C-O>\\\" expands to \\\"multiple-value-bind\\\"\n\nThis isn&#039t anything close to a reimplementation of SLIME completion, but provides something closer to the default behavior. Most importantly, since there isn&#039t a connection to swank and a live lisp instance, you can only complete static keywords from the syntax file. (like syntaxcomplete.vim -- in fact this started out as a quick munging of that file, and still has lots of its code in there) Also, currently only \\\"simple\\\" and \\\"compound\\\" modes work, there is no support for \\\"fuzzy\\\" completion."}, {:name=>"etk-vim-syntax", :summary=>"Syntax highlighting for Etk Enlightenment Toolkit", :description=>"A C extension syntax file for Etk.\n\nEtk stand for Enlightenment Toolkit, it's another graphical toolkit written\nwith the new EFL. It's under development and there is no stable release for\nthe moment, so etk.vim file may not to be up to date.\n\nEtk version: 0.1.0.002"}, {:name=>"woc", :summary=>"A vim WoC browser. It enables hyperlinks for sources and ASCII texts.", :description=>"This is the WoC client for Vim.\nIf you don't know what WoC is, read http://dev.dyne.org/wiki/Woc .\n\nShort description:\nThis plugin permits to use \"hypertags\", i.e. tags pointing to remote files. \nIt also supports cscope and ctags, thus you can use hyper-cscope commands which will bring you to remote locations.\n\nGeneral description:\nWocvim is a WoC client for Vim. WoC is a protocol which enables the use of hyperlinks in plain ASCII texts. \nThe links can point to local or remote locations. The protocol is specifically designed to support source code, but it can\nbe used in any text. For source code, it's also possible to use ad-hoc tag generators like cscope and ctags.\n\n\nwoc-vim: http://www.freaknet.org/alpt/src/utils/woc/readme"}, {:name=>"DAMOS-tools", :summary=>"syntax-, indent- and ftplugins for files to use with DAMOS application tool", :description=>"DAMOS tools provides support for several filetypes used by DAMOS:\n*.dcm, *.dcl, *.kgs\n\nIt supports syntax highliting, indentation, commentify, tags, ...\n\nTags:\n- if you want to create tags for your kgs- and osp-files you can use the configuration file tools/ctags.conf. Now you can jump from a kgs-file to the 'codesyntax' or the 'umrechnung'.\n\n'Umrechnung':\n- If you have osp-files for 'umrechnung' and you parsed it with ctags, you can get a set of example values by the command 'GetOspTestValues'\n- see :help damos for more information"}, {:name=>"Haml", :summary=>"Haml syntax highlight", :description=>"This is the syntax highlighting mode for Haml (http://haml.hamptoncatlin.com/) -- XHTML Abstraction Markup Language (http://en.wikipedia.org/wiki/Haml)\n\nScreenshot: http://www.flickr.com/photos/dmitryilyashevich/1006425091/"}, {:name=>"Menu_SQL_Templates.vim", :summary=>"SQL code templates in VIM Menu", :description=>"This is a simple script, which adds a new menu in GVIM. The menu SQL_Templates will have few sub menus. \n\nThe purpose of the this is to insert SQL code templates in current window/ file.\nSo you don't have to refer manuals for those SQL commands which you don;t use often."}, {:name=>"tcl_critcl.vim", :summary=>"syntax coloring for critcl. extend tcl.vim", :description=>"    c-syntax for blocks of c-code in tcl definitions.\n\n    Adds critcl syntax to tcl.vim (vimscript #1603)\n\n"}, {:name=>"Vimgrep-Replace", :summary=>"Use vimgrep to do search and replace", :description=>"Embryonic hack to allow a user to do search and replaces on a directory using vimgrep and s///\n\nSuggestions and updates are very welcome!"}, {:name=>"cvsdiff", :summary=>"a simple shell script that invoking vimdiff to compare CVS file", :description=>"You can use this script to invoke vimdiff for comparing two files between CVS repository and local copy, or any two difference CVS revision in repository.\n\nUsage: cvsdiff [-rrevision1] [-rrevision2] file\nExamples:\n  cvsdiff test.c                           show difference between cvs (in your branch) and local copy.\n  cvsdiff -r1.3 test.c                  show difference between revision 1.3 and local copy.\n  cvsdiff -rHEAD test.c            show difference between HEAD and local copy.\n  cvsdiff -r1.3 -r1.4 test.c         show difference between revision 1.3 and revision 1.4.\n  cvsdiff -rHEAD -r1.4 test.c   show difference between HEAD and revision 1.4.\n"}, {:name=>"Wombat", :summary=>"Dark gray color scheme sharing some similarities with Desert", :description=>"Dark gray background with easy-on-the-eyes font colors. It shares some similarities with the Desert color scheme.\n\nA few screens at: http://dengmao.wordpress.com/2007/01/22/vim-color-scheme-wombat/"}, {:name=>"tcmdbar.vim", :summary=>"Script for use with Total Commander's button bar", :description=>"This script is only for users of Total Commander and Win32 (maybe Win16).\n\nAfter proper installation:\nStart Total Commander, select one or more files, then click the GVim button.\nGVim will create an argument list from the selected files so you can edit them.\nSounds trivial, but it is not.\n\nWorks with Ctrl-B (show flattened file list).\n\n\nCustomization for _vimrc (optional)\n\nOpen files in windows, tab pages or in diff mode:\n    :let Tcmdbar_OpenIn = \"Windows\"\n    :let Tcmdbar_OpenIn = \"Tabs\"        \" ignored in Vim6\n    :let Tcmdbar_OpenIn = \"Diff Mode\"\n\nValues may be abbreviated to \"win\", \"tab\" and \"diff\".\n\n\nYou will get an error if you want to open too many files.  In this case\nVim will only open windows/tabs for as many files as possible.\n\n-- Please report errors if the script does not work for you! --\n\n2007 Sep 17\nIf the first argument is always the file list, the plugin actually isn't needed!\nYou can define the button this way:\n    Command: <path>\\gvim.exe \"+n `=readfile(argv(0))`\"\n    Parameters: %L\nIn the help:\n    :h `=\n    :h next_f"}, {:name=>"scala.vim", :summary=>"syntaxic coloration for Scala code", :description=>"This script enables syntaxic coloration of source code written in the Scala programming language (http://www.scala-lang.org)\n\nDisclaimer\n\n- This is an absolutly basic version\n- Only keywords and simple constructs like comments are recognized\n- It is by far not finished\n\nKnown bugs\n\n- automatic indentation does not work properly when using the syntaxic possibilities of scala (for example when omitting the ; after the return value)\n- sign before a number is not colored"}, {:name=>"mlint.vim", :summary=>"Matlab code checker (mlint) compiler file", :description=>"This is the compiler file for the Matlab code checker - mlint. I've tested this with Matlab R2006a and vim 7.0, but this should work with other versions too.\n\nMatlab's editor automatically checks the code you type in it for warnings and errors. To do this in vim, install this script, and type :make whenever you want to check your code. There is a button for this in gvim. Note that you need to have Matlab's bin directory in your system path. \n\nmlint's messages are of 3 types :\nType 1: Suggestions and simple warnings\nType 2: Warnings about performance penalties\nType 3: Errors\nThe type number is displayed next to the column number in the error window. Use :copen to open the error window, and :cn and :cp  (or Alt-n and Alt-p) to go to the next and previous message respectively."}, {:name=>"polycl.vim", :summary=>"Polyhedra CL syntax", :description=>"CL is the programming language of stored procedures embedded in the Polyhedra database.\nFor more information about Polyhedra, see: http://www.enea.com/templates/Extension____259.aspx\n\nThis script provides syntax highlighting and folding for this language.\n\nSee also vimscript#1799: Polyhedra configuration syntax"}, {:name=>"cscope-wrapper", :summary=>"make gvim(WIN32) + cscope(Cygwin) work together", :description=>"Actually this isn't a script, but a small application. If you are in the same situation as me cswrapper may help.\n1. I'm using gvim Win32 version. It works perfectly in my Windows XP.\n2. I tried cscope Win32 version, but it always returns 0 lines for any request.\n3. I compiled a cscope(ver 15.6) in Cygwin. It works well in its own command window. But gvim freezes when creating a connection to my cscope with 'cs add cscope.out'.\nI guess the reason is cscope doesn't flush its output, it causes gvim to hang up when reading from the pipe. Instead of hacking into cscope's source code, I created this wrapper. It acts as a cscope command window, reads requests from gvim, gets the result by executing cscope, then passes the result to gvim. It works well for me till now.\nCSWrapper isn't a full function cscope. It only accesses the parameter '-f /path/cscope.out' and acts as a wrapper between gvim and cscope. Please use the original cscope.exe to create databases."}, {:name=>"apachestyle", :summary=>"Simple indent for apache config files", :description=>"I could not find an indentation file for Apache configuration files, so I wrote this based on someone's xml indentation file. It's very simple and basic."}, {:name=>"javacomplete", :summary=>"Omni Completion for JAVA", :description=>"This is javacomplete, an omni-completion script of JAVA language for vim 7.\n\nIt includes javacomplete.vim, java_parser.vim, Reflection.java, and \njavacomplete.txt\n\nFeatures:\n- List members of a class, including (static) fields, (static) methods and ctors.\n- List classes or subpackages of a package.\n- Provide parameters information of a method, list all overload methods.\n- Complete an incomplete word.\n- Provide a complete JAVA parser written in Vim script language.\n- Use the JVM to obtain most information.\n- Use the embedded parser to obtain the class information from source files.\n- Tags generated by ctags can also be used.\n- JSP is supported, Builtin objects such as request, session can be recognized.\n  The classes and jar files in the WEB-INF will be appended automatically to classpath.\n\n\nRequirements:\nIt works on all the platforms where\n- Vim version 7.0 and above\n- JDK version 1.1 and above\nexisted \n\nInput context:\nIt recognize nearly all kinds of Primary Expressions (see langspec-3.0)\nexcept for \"Primary.new Indentifier\". Casting conversion is also supported.\nSamples of input contexts are as following:\t('|' indicates cursor)\n    (1). after '.', list members of a class or a package\n    - package.|         subpackages and classes of a package\n    - Type.|                static members of the 'Type' class and \"class\"\n    - var.| or field.|     members of a variable or a field\n    - method().|         members of result of method()\n    - this.|                   members of the current class\n    - ClassName.this.|  members of the qualified class\n    - super.|               members of the super class\n    - array.|                members of an array object\n    - array[i].|             array access, return members of the element of array\n    - \"String\".|            String literal, return members of java.lang.String\n    - int.| or void.|       primitive type or pseudo-type, return \"class\"\n    - int[].|                   array type, return members of a array type and \"class\"\n    - java.lang.String[].|\n    - new int[].|           members of the new array instance\n    - new java.lang.String[i=1][].|\n    - new Type().|      members of the new class instance \n    - Type.class.|      class literal, return members of java.lang.Class\n    - void.class.| or int.class.|\n    - ((Type)var).|         cast var as Type, return members of Type.\n    - (var.method()).|   same with \"var.|\"\n    - (new Class()).|    same with \"new Class().|\"\n\n   (2). after '(', list matching methods with parameters information.\n    - method(|)                 methods matched\n    - var.method(|)           methods matched\n    - new ClassName(|)  constructors matched\n    - this(|)                        constructors of current class matched\n    - super(|)                     constructors of super class matched\n    Any place between '(' and ')' will be supported soon.\n    Help information of javadoc is not supported yet.\n\n   (3). after an incomplete word, list all the matched beginning with it.\n    - var.ab|          subset of members of var beginning with `ab`\n    - ab|                list of all maybes\n\n   (4). import statement\n    - \" import         java.util.|\"\n    - \" import         java.ut|\"\n    - \" import         ja|\"\n    - \" import         java.lang.Character.|\"        e.g. \"Subset\"\n    - \" import static java.lang.Math.|\"        e.g. \"PI, abs\"\n\n   (5). package declaration\n    - \" package         com.|\"\n\n   The above are in simple expression.\n   (6). after compound expression:\n    - PrimaryExpr.var.|\n    - PrimaryExpr.method().|\n    - PrimaryExpr.method(|)\n    - PrimaryExpr.var.ab|\n    e.g.\n    - \"java.lang        . System.in .|\"\n    - \"java.lang.System.getenv().|\"\n    - \"int.class.toString().|\"\n    - \"list.toArray().|\"\n    - \"new ZipFile(path).|\"\n    - \"new ZipFile(path).entries().|\"\n\n   (7). Nested expression:\n    - \"System.out.println( str.| )\"\n    - \"System.out.println(str.charAt(| )\"\n    - \"for (int i = 0; i < str.|; i++)\"\n    - \"for ( Object o : a.getCollect| )\"\n\n\nLimitations:\nThe embedded parser works a bit slower than expected.\n\nTODO:\n-  Improve performance of the embedded parser. Incremental parser.\n-  Add quick information using balloonexpr, ballooneval, balloondelay.\n-  Add javadoc\n-  Give a hint for class name conflict in different packages.\n-  Support parameter information for template\n-  Make it faster and more robust.\n\nScreenshots:\nmembers of a package, http://blog.chinaunix.net/photo/44758_070917101010.jpg\nmembers of a type, http://blog.chinaunix.net/photo/44758_070917101048.jpg\nlocal variable, http://blog.chinaunix.net/photo/44758_070917101134.jpg\nspecial reference super, http://blog.chinaunix.net/photo/44758_070917101158.jpg\nobject of method result,  http://blog.chinaunix.net/photo/44758_070917101236.jpg\n\nFeedBack:\nAny problem, bug or suggest are welcome to send to fangread@yahoo.com.cn\n\nBTW, If you want to get more functions on writting java program besides code completion,\nyou can try VJDE. http://www.vim.org/scripts/script.php?script_id=1213"}, {:name=>"hexsearch.vim", :summary=>"search with a hexadecimal string", :description=>"This is a preprocessor to Vim's search command.\nIt converts a sequence of hex numbers into a usual search pattern\n(one char per hex-code).  Searching is literal.\n\nExample:\n    :HexSearch 56696d 20 72756c657a21\nfinds ... you know.\n\nIf 'fileformat' is unix or mac, there is (almost) no difference to searching\nfor a hex string in a hex-editor.\n\nHere is the \"almost\" case for 'ff=unix':\n    :HexSearch 0A\nfinds a linebreak at the end of the file, even if there isn't one.\n\nSee inside script for more details."}, {:name=>"wikipedia.vim", :summary=>"Syntax highlighting for MediaWiki articles", :description=>"This file is for people who use external editors to work on articles on Wikipedia and other MediaWiki sites.  Please note that I didn't write this -- it was downloaded from http://en.wikipedia.org/wiki/Wikipedia%3AText_editor_support#Vim and may well be more up-to-date there.  If the version here is out of date contact me and I'll upload the improved version.\n\nVersion 1 of this script also contains a few settings to better deal with the fact that MediaWiki articles only contain newlines between paragraphs, you may prefer to remove those and put them in ~/.vim/ftplugin/Wikipedia.vim.  In version 2 these have been moved to a separate file."}, {:name=>"Bexec", :summary=>"Execute script in buffer and display output in buffer.", :description=>"The Bexec plugin allows the user to execute the current buffer if it contains a script with a shebang (#!/path/to/interpreter) on the first line or if the default interpreter for the script's type is known by Bexec. The output of the script will be grabbed and displayed in a separate buffer.\n\nIt can be used to execute, for instance, Shell, PHP, PERL, Python or SQL scripts from within Vim.\n\nScreenshots can be found at: http://www.electricmonk.nl/index.php?page=bexec\n"}, {:name=>"Audacious-Control", :summary=>"A simple plug-in which let you control your Audacious right within Vim", :description=>"You can control your Audacious right within your Vim.\n\nDisplaying playlist (you can navigate through it and select the song to play),\nPlay/Pause/Stop Audacious,\nJumping forward/backward in playlist,\nTurning on/off Shuffle play,\nTurning on/off Repeat,\nGetting info about the current playing song,\nIncreasing/decreasing volume,\nAnd Shutting down Audacious.\n\nAlso this plugin provides a menu for gVim users."}, {:name=>"tagscan", :summary=>"Tag your file for better search requisite place", :description=>"[ This script is obsolete. Please use http://www.vim.org/scripts/script.php?script_id=2507 instead ]\n\nIf you've file with lines\n\nheader: creation of form with scroll\n     tags: create, gui\n --- some info\n--- some .sco links\n --- some info\nheader: creation of speed buttons\n     tags: gui, create\n --- some info\n --- some info\n// tags: todo, bug\nvoid function_bug( bug_height )\n{\n}\n\nYou can type command\n:ScanTags\n  and do fast find by tags lines you want\n\n:Select   command do add tag to list ( <CR> key )\n:Deselect command remove last tag from list ( <BS> key )\n\nany letter keys to quick move to tag ( s o r t -  show only tags than consist \"sort\" as their part)\n<Tab> key to move to next visible tag\n\nScript written for easy search information in  files (.sco files for example http://www.vim.org/scripts/script.php?script_id=1638 )\n"}, {:name=>"erm.vim", :summary=>"Syntax highlight for ERM", :description=>"ERM is a script language, the design is similar to most assembler language such as ARM assembler. \n\nBut the source code is extremely difficult to read without syntax highlight due to it's obfuscated syntax.\n\nNow you can edit ERM in Vim, bear in mind that ERM script must always be saved in Unix format even in MacOS and Windows. If anything does go wrong, open the script in ERM_S and save it.\n\nEnjoy!"}, {:name=>"fcsh-tools", :summary=>"you can compile .as and .mxml files from vim via fcsh : Flex Comipler SHell", :description=>"fcsh can compile actionscript 3 and mxml files.\nincluded are fcshserv.sh and fcshcmp.sh.\nfcshserv.sh should be launched manually before you edit\n.as or .mxml files.\nthen, you can execute fcshcmp.sh from vim to compile and optionally run .swf file.\n"}, {:name=>"vibrantink", :summary=>"A Vim port of Justin Palmer's VibrantInk theme for TextMate", :description=>"Based on John Lam's rudimentary Vim version of Justin Palmer's Vibrant Ink color scheme for TextMate. This scheme also works on 256 color terminals.\n\nScreenshot at http://jozilla.net/images/software/scripts/vibrantink.png"}, {:name=>"autoloadTemplate.vim", :summary=>"load the template according the filetype while editing a new file", :description=>" Load template file from a specific directory according their filetype while\n starting to edit a new file. if the file does not exist, skip it!"}, {:name=>"SETL2", :summary=>"Syntax file for SETL2 sources", :description=>"First attempt to create a syntax file for SETL2 sources."}, {:name=>"svnvimdiff", :summary=>"svn diff + vimdiff", :description=>"This shell script will display svn diff output by using vimdiff. If you use the -g switch, you use gvimdiff instead of vimdiff. This was cloned from the script cvsvimdiff, written by Stefano Zacchiroli and Enrico Tassi. It launches whatever vim version you have."}, {:name=>"smarty.vim", :summary=>"smarty syntax file", :description=>"A friend and I found that there were no acceptable vim syntax files for smarty, so we took the only one we could find and added everything from the smarty documentation (http://smarty.php.net/manual/en) to it.  If nothing else, this is a very good start on a complete smarty syntax file.  We have even used vimtip #498 to use autocomplete with this syntax and so far it seems to work well."}, {:name=>"polycfg.vim", :summary=>"Polyhedra configuration syntax", :description=>"This script provides syntax highlighting for the configuration files of the Polyhedra database.\nFor more information about Polyhedra, see: http://www.enea.com/templates/Extension____259.aspx\n\nSee also vimscript#1782: Polyhedra CL syntax"}, {:name=>"IndentHL--Summers", :summary=>"Color each indent level in different colors.", :description=>"A simple syntax coloring script you can use to augment existing syntaxes with to include highlighting of each indent level with a different color.\n\nSee http://viming.blogspot.com/2007/02/indent-level-highlighting.html for screenshots."}, {:name=>"c16gui", :summary=>"A default-looking GUI color scheme of the 16 colors", :description=>"c16gui is a GUI color scheme composed of the sixteen colors, which simulates\nthe default scheme.\n\nscreen shots: http://www.geocities.jp/e27874/"}, {:name=>"eclipse.vim", :summary=>"Eclipse like color scheme", :description=>"This color scheme is based on the default colors of the eclipse development environment.\n\nCheck out some screen shots of what it looks like with Vim script, Java and C++\nhttp://juan.axisym3.net/vim-color-schemes/#eclipse"}, {:name=>"compview", :summary=>"Creates an interactive search window", :description=>"CompView.vim is a handy little script that I use all the time. After a search term is entered it generates a list of matches and displays a window with all the matching lines. As you move around this window to different matched lines the original window is automatically updated to show you where in the file the match is found. It is like an interactive \u0091cw\u0092 command.\n\nCheck out this page for a screen shot of the script in action.\nhttp://juan.axisym3.net/vim-plugins/#compview"}, {:name=>"brief2", :summary=>"Brief emulation", :description=>"This is based on \"brief.vim\" authored by Yegappan Lakshmanan.\nIt has some minor improvements, but I hope to add more to make the emulation as complete as possible.  I started using this under Vim 6.3, and have tried it on 7.0 with good success.\n\n"}, {:name=>"SearchFold", :summary=>"Search a file by folding non-matching lines with optional context.", :description=>"SearchFold is a good script to have around. You give it a search string to find and folds everything except for the lines where the string matches. By default is keeps some non-matching lines around so you can get an idea of where you are in the file and gives you the ability to expand \u0093the view\u0094 for a particular match to get more context. After you are done looking around you can \u0093quit\u0094 the script and keep the fold or go back to the file as it was (restoring any previous folds).\n\nCheck  out this page for a screen shot.\nhttp://juan.axisym3.net/vim-plugins/#searchfold"}, {:name=>"MultiEnc.vim", :summary=>"Autodetect multiple encodings (more than 'fileencodings')", :description=>"------------------------------------------------------------------------\nIMPORTANT NOTICE: This script is now merged with Ming Bai's FencView.vim. The content below is now obsolete. Please go check vimscript#1708.\n------------------------------------------------------------------------\n\nThe Vim option 'fileencodings' has some limitations: e.g., it cannot autodetect GBK and Big5 files at the same time. This is my first motivation to write this script (and the support program tellenc).\n\nThis script does these things to decide the encoding of a file:\n\n- If a file has a modeline fileencoding=..., it will be used as the encoding to open the file.\n- If a file is an HTML file, and it has the encoding specified with a HTTP-EQUIV meta tag, it will be used as the encoding to open the file. The file pattern of HTML files can be customized by the global variable multienc_html_patterns.\n- If a file cannot be decided by the steps above, tellenc may be used to decide its encoding. This includes HTML files without a suitable HTTP-EQUIV meta tag, and additional files can be detected with the global variable multienc_auto_patterns.\n- A file can be manually autodetected with the command EditAutoEncoding (without a file name for the current buffer, or with a file name to edit a new file).\n- The autodetection may be overridden with the command EditManualEncoding (\"e ++enc=\" may not work in some cases now).\n\nThe program used to tell the encoding of a file is \"tellenc\" by default. It can also be changed with the environment variable MULTIENC_TELLENC. My current tellenc, available at http://wyw.dcweb.cn/download.asp?path=&file=tellenc.zip, supports ASCII, UTF8, UTF-16, Latin1, Windows-1252, GB2312, GBK, Big5, and any Unicode encodings with BOM."}, {:name=>"calmar256-lightdark.vim", :summary=>"256 color-scheme for a capable terminal", :description=>"It should be *easy* to tweak the colors, \njust tweak the numbers based on this chart:\n\nhttp://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\nor: \nhttp://www.calmar.ws/vim/terminalcolors.py\n\nalso see:\n:help hl-<highlight-group>  and \n:help highlight-groups\n\ncalmar256{light,dark}.vim generates the same color for you gvim, like in your 256 color terminal.\n\nScreenshot: \nhttp://www.calmar.ws/vim/calmar256-dark.vim.png\nhttp://www.calmar.ws/vim/calmar256-light.vim.png\n\n(Note: you may need a proper $TERM variable set, so that termcap/terminfo\nknows it's a 256 color terminal. E.g. TERM=xterm-256color in xterm's case. but\nespecially set t_Co=256 in your .vimrc so vim knows about what you want.)\n\nMay also have a look at: \nhttp://www.calmar.ws/vim/ (paragraph: Vim and Colors)\n\nThe file themselves (very lastest version):\n\nhttp://www.calmar.ws/dotfiles/dotfiledir/calmar256-dark.vim\nhttp://www.calmar.ws/dotfiles/dotfiledir/calmar256-light.vim\n\n(feel free to upload improved versions etc, colors or code...)"}, {:name=>"Vimplate-Enhanced", :summary=>"Vimplate template system for vim 7.0 (supports C/C++/Cpp, Perl, make, LaTeX)", :description=>"*** Introduction and Explanation ***\n\nI have made substantial updates to the package layout and installation procedure of Stotz's most recent version of vimplate (v0.2.3).  I implemented several fixes so that it would actually be compatible with windows.  I have reworked the installation procedure and it should now be much easier to follow.\n\nThis version of Vimplate should be MUCH easier to install! (on all operating systems, but especially windows).\n\nIt is a really neat plugin and I am very pleased to have it working on my laptop.  I hope this will be helpful for at least a few of you out there.\n\n\n--------------------------------------------------------------------------------\nChangelog\n--------------------------------------------------------------------------------\n0.2.4, released by JET on 2007-02-25\n  Fixed a number of typos and added additional details in the installation instructions to improve the clarity.\n\n  Added prompts during the -createconfig phase of the setup so that the user will not need to do as much editing of the .vimplaterc file by hand.\n\n  Added a createconf batch file to simplify things for windows.\n\n  Changed how error conditions are handled and displayed in the perl script so that an appropriate amount of information about the problem will be shown.\n--------------------------------------------------------------------------------\n\n\n\n1. Description\n2. Usage\n3. Subroutines\n4. Example\n5. Documentation\n6. Depends\n7. Installation\n\n\n1. Description                                        *vimplate-description*\n\nVimplate provides an extensible and powerful template processing system.\nIt is based on Perl and Template-Toolkit.\nYou can create templates for program code, makefiles, letters, html pages,\nlatex etc. As example vimplate contains templates for C++, LaTeX, Perl\nand Makefile.\nWith vimplate you can write templates which interact with the user.\nFor themes are the functions choice() and input().\nYou can choose different locale for the function date() and locale().\nYou can write your own perl code directly in the templates.\n\nIf you find this useful and want to let the original author of this package know, email him at <stotz@gmx.ch>.\n\nIf you write a new template and  would like me to add it to the vimplate package please send an email with the text [VIMPLATE] in the subject line to: < outtatime@gmail.com >.\n\n\n2. Usage                                                    *vimplate-usage*\n\nUsage:\n  :Vimplate <template> [options]\n    choice <template> whit <TAB> (command line completion is supported).\n    With <TAB> all templates are listed.\n    [options]\n      -user|u=<username>\n        Use the information form user <username> while parsing templates.\n      -dir|d=<templatedir>\n        Search templatefiles in <templatedir>.\n\n\n3. Subroutines                                         *vimplate-subroutines*\n\n  locale()                  for locale please see: man locale\n  [% loc=locale() %]        get the current locale\n                              and write it to the variable loc\n  [% locale('C') %]         set global the current locale to C\n  [% locale('de_DE') %]     set global the current locale to de_DE\n  date()                    for date please see: man date\n  [% date('%c') %]          print the current date\n                              with the current locale setting\n  [% date('de_DE', '%c') %] print the current date with the locale de_DE\n  input()\n  [% var=input() %]         read input from user\n                              and write it to the variable var\n  choice()\n  [% day=choice('day:', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa') %]\n                            let the user choice between different values\n                            and write it to the variable day\n\n  please try :Vimplate Test\n\n\n4. Example                                                *vimplate-example*\n\na LaTeX Template:\n  http://www.napali.ch/vimplate/example/LaTeX.tt.html\nthe generated LaTeX File:\n  http://www.napali.ch/vimplate/example/Example.tex.html\na Makefile Template for LaTeX:\n  http://www.napali.ch/vimplate/example/Makefile-LaTeX.tt.html\nthe generated Makefile:\n  http://www.napali.ch/vimplate/example/Makefile.html\nc++ Templates:\n  http://www.napali.ch/vimplate/example/hpp-default.tt.html\n  http://www.napali.ch/vimplate/example/cpp-default.tt.html\nthe generated class:\n  http://www.napali.ch/vimplate/example/Example.hpp.html\n  http://www.napali.ch/vimplate/example/Example.cpp.html\nthe generated class with doxygen:\n  http://www.napali.ch/vimplate/example/ExampleDoxy.hpp.html\n  http://www.napali.ch/vimplate/example/ExampleDoxy.cpp.html\na perl Template:\n  http://www.napali.ch/vimplate/example/perl.tt.html\nthe genereated program:\n  http://www.napali.ch/vimplate/example/Example.pl.html\nthe genereated program with Log4Perl:\n  http://www.napali.ch/vimplate/example/ExampleLog.pl.html\n\nExample:\n  the template letter.tt:\n    ________________________________________________________\n    [%\n       sex=choice('sex: ', 'female', 'male')\n       name=input('name: ')\n       location=input('your location: ')\n    -%]\n                       [% ucfirst(location) %], [% date('C', '%b %d, %Y') %]\n\n    Dear [% IF sex=='female'; 'Ms'; ELSE; 'Mr'; END %] [% ucfirst(name) %]\n\n    ...\n\n    Sincerely\n\n    [% user.firstname %] [% user.lastname %]\n    ________________________________________________________\n\n  run vim:\n    :Vimplate letter\n    sex:\n      0) female\n      1) male\n    0\n    name: Meier\n    your location: Olten\n\n  your input was:\n    :Vimplate letter<CR>0<CR>Meier<CR>Olten<CR>\n\n  this will produce this letter:\n    ________________________________________________________\n                                      Olten, Jul 11, 2005\n\n    Dear Ms Meier\n\n    ...\n\n    Sincerely\n\n    Urs Stotz\n    ________________________________________________________\n\nExample:\n  the template hpp-default.tt:\n    ________________________________________________________\n    [% classname=input('Class name: ')\n       doxygen=choice('with Doxygen comments: ', 'no', 'yes')\n    -%]\n    #ifndef [% uc(classname) %]_HPP\n    #define [% uc(classname) %]_HPP\n\n    [% IF doxygen=='yes' -%]\n    /**\n     * @brief [% classname %] ... short description ...\n     * @author [% user.firstname %] [% user.lastname %] <[% user.mail %]>\n     * @date [% date('%Y-%m-%d') %]\n     * ... description ...\n     */\n\n    [% END -%]\n    class [% classname %]\n    {\n      public:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Default constructor\n         */\n    [% END -%]\n        [% classname %]();\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n    [% END -%]\n        [% classname %](const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n    [% END -%]\n        [% classname %]& operator=(const [% classname %]& other);\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Destructor\n         */\n    [% END -%]\n        virtual ~[% classname %]();\n\n      private:\n    [% IF doxygen=='yes' -%]\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n    [% END -%]\n        void init();\n    [% IF doxygen=='yes' -%]\n\n    /**\n     * Method to copy each member (deep copy)\n     * @param other reference on object to copy\n     */\n    [% END -%]\n        void init(const [% classname %]& other);\n    };\n\n    #endif /* #ifndef [% uc(classname) %]_HPP */\n    ________________________________________________________\n\n  run vim:\n    :Vimplate hpp-default\n    Class name: Parent\n    with Doxygen comments:\n      0) no\n      1) yes\n    1\n\n  your input was:\n    :Vimplate hpp-default<CR>Parent<CR>1<CR>\n\n  this will produce this c++ include file:\n    ________________________________________________________\n    #ifndef PARENT_HPP\n    #define PARENT_HPP\n\n    /**\n     * @brief Parent ... short description ...\n     * @author Urs Stotz <stotz@gmx.ch>\n     * @date 2005-07-18\n     * ... description ...\n     */\n\n    class Parent\n    {\n      public:\n\n        /**\n         * Default constructor\n         */\n        Parent();\n\n        /**\n         * Copy constructor\n         * @param other reference on object to copy\n         */\n        Parent(const Parent& other);\n\n        /**\n         * Assignment operator\n         * @param other reference on object to copy\n         * @return reference on initialisated object\n         */\n        Parent& operator=(const Parent& other);\n\n        /**\n         * Destructor\n         */\n        virtual ~Parent();\n\n      private:\n\n        /**\n         * Base initialisation should be called\n         * at beginning of each constructor\n         */\n        void init();\n\n        /**\n         * Method to copy each member (deep copy)\n         * @param other reference on object to copy\n         */\n        void init(const Parent& other);\n    };\n\n    #endif /* #ifndef PARENT_HPP */\n    ________________________________________________________\n\n\n5. Documentation                                    *vimplate-documentation*\n\nDocumentation:\n  - http://napali.ch/vimplate\n  - http://www.template-toolkit.org/docs.html\n  - http://perldoc.perl.org/perl.html\n\nTodo:\n  - better exception handling\n  - write more templates\n\nLicense:\n  This program is free software; you can redistribute it and/or modify it\n  under the terms of the GNU General Public License, version 2, as published\n  by the Free Software Foundation.\n\n  This program is distributed in the hope that it will be useful, but\n  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n  for more details.\n\n  A copy of the GNU GPL is available as /usr/share/common-licenses/GPL-2\n  on Debian systems, or on the World Wide Web at\n  http://www.gnu.org/copyleft/gpl.html\n  You can also obtain it by writing to the Free Software Foundation, Inc.,\n  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA\n\nCopyright:\n  Copyright (c) 2005, Urs Stotz <stotz@gmx.ch>\n\nVersion:\n  vimplate 0.2.4"}, {:name=>"guicolorscheme.vim", :summary=>"auto convert gui-only colorschemes to 88/256 color terminal schemes", :description=>"I'll admit, I don't use gvim, except on Windows machines.  When I'm at a terminal, I'm in front of a 88 or 256 color terminal 90% of the time.  Because of this, I have lots of fancy color options, but my vim setup doesn't take advantage of them well because most interesting color schemes are made for gvim and not console vim.  Sure, inkpot, desert256, and a handful of others work nicely, but the choices are so limited.\n\nEnter GuiColorScheme.  This script converts, as best it can muster, the gui-specific parts of a colorscheme into color numbers for 88 and 256 color terminals (it should also still support gvim as well).\n\nUsage:\n   :GuiColorScheme <color scheme name>\n\nTab completion works exactly like the completion for the :colorscheme command, so you can use it to browse through your colorschemes.\n\nFor good measure, a screenshot, showing gvim and putty (in 256 color mode):\nhttp://img.phraktured.net/other/guicolorscheme.png"}, {:name=>"Infobasic-Set-Syntax-FTDetect-FTPlugi", :summary=>"It allows work with infobasic scripts, for jbase programming and Globus/T24 App.", :description=>"It allows work with infobasic scripts, for jbase programming and Globus/T24 App.\n\n* Syntax Highlighting\n* FileType Recognition (Because this files doesn't have extension, i convent that all files have the letters SFC from my company)\n* Compiler\n* Indent"}, {:name=>"Random-Tip-Displayer", :summary=>"display random of \"Best Vim tips\"", :description=>"This Vim script allows: viewing, downloading, and displaying random position of \"Best Vim Tips\" from the page:\nhttp://rayninfo.co.uk/vimtips.html (see: vimtip #305)\n\n\nUsage:\n\n<Leader>gt (or :call GetVimTips()) - download and parse \"Best Vim Tips\". File is saved in ~/.vim/vimtips.txt (~/vimfiles/vimtips.txt under windows)\n\n<Leader>dt (or :call DisplayVimTips()) - display \"Best Vim Tips\" in separate buffer (download it, if the file is not present)\n   \n<Leader>rt (or :call DisplayRandomTip()) - display random position in vimtips.txt (download if necessary)\n"}, {:name=>"gotofile", :summary=>"gf replacement by using the tags file", :description=>"This script defines a new command 'GotoFile', which resembles the normal\n'gf' function, but uses a standard tags file generated by ctags for\nlooking up the file name under the cursor. \n\nYou need to generate a standard tags file (with ctags) for this script to work.\nAdd the following ctags option for generating filename tags: --extra=+f\n\nFor example: ctags -R --extra=+f\n\nAdd the following mapping to your .vimrc (or _vimrc) to replace the\nnormal 'gf' behavior by the GotoFile command:\n\nnmap <silent> gf :GotoFile<CR>\n\nI wrote this script mainly for having an alternative for setting the\npath and using 'gf'. While using completion all header files within\nthe path are also searched, which causes a major performance hit for\nlarge projects (at least for me). So this script allows using the\n'gf' feature without setting the path. Other suggestions are welcome!\n"}, {:name=>"greplace.vim", :summary=>"Replace a pattern across multiple files interactively", :description=>"Overview\n\nThe Global Replace plugin allows you to search and replace a pattern\nacross multiple files. The lines containing a specified pattern in multiple\nfiles are displayed in a buffer. You can edit the lines in this buffer and \nmake the desired modifications to them. The plugin can then \nincorporate these changes back into the corresponding files interactively.\n\nThe following commands are provided by this plugin:\n\n:Gsearch         Search for a given pattern in the specified group of\n                 files and display the matches in the replace buffer.\n:Gbuffersearch   Search for a given pattern in all the buffers\n                 in the Vim buffer list.\n:Gargsearch      Search for a given pattern in all the files in the\n                 Vim argument list.\n:Gqfopen         Use the results from the quickfix list.\n:Greplace        Incorporate the modifications from the replace buffer\n                 into the corresponding files.\n\nRefer to the greplace.txt help file for more information (available with the\nplugin).\n\nThis plugin will run only on Vim version 7.0 and above.\n"}, {:name=>"sqlvim.sh", :summary=>"Run Oracle SQL*Plus commands from vim", :description=>"This shell script runs Oracle SQL*Plus commands/sql statements in a register from within vim and inserts the results at the location marking the end of the register.\n\nThe simplest way to use the script is to install it per the instructions in install details, type your SQL code in the vim editor. For example,\n\nMark the line starting with column as ... ma\nGo to line starting with select, then ... \\sx\n\ncolumn tc format a10\nset linesize 120\nselect 'hello' tc from dual;\n\nTC\n----------\nhello\n\n1 row selected.\n\nAnything that you can do on the SQL*Plus command line, you can do from within vim using this script. I have tested it on cygwin and hp/ux.\n"}, {:name=>"Windows-PowerShell-Indent-File", :summary=>"Simple indenting rules for Windows PowerShell", :description=>"Sets up a customized version of cindent for use with PowerShell. Best used with the Windows PowerShell syntax and ftplugin files (vimscript #1327 and vimscript #1816)"}, {:name=>"Windows-PowerShell-File-Type-Plugin", :summary=>"Simple ftplugin for use with Windows PowerShell", :description=>"Sets up a few simple things like comment tokens and configures gvim File Browse dialog. Best used with the Windows PowerShell Syntax file and Filetype Plugin file (vimscript #1327 and vimscript #1815)."}, {:name=>"buffers_search_and_replace", :summary=>"Simple but powerful buffer(s) search & replace tool", :description=>"    The \"Buffers Search & Replace\" plugin is a simple but powerful buffer(s)\nsearch & replace tool. Search results can be set in the 'delete' category and replacement\ncan be performed on the remaining or deleted search results.\n\nPlease report any bugs or feature requests.\n\nAvailable commands :\n------------------------------\n    :Bs <search_regex>\n    :<range> Bsc <search_regex>\n\nThe 'Bs' command is searching in all the buffers and 'Bsc' only in the current buffer.\n\n    :Bsf <buffer_name_filter_regex> <search_regex>\n    :Bse <buffer_name_exclusion_regex> <search_regex>\n\nThe 'Bsf' command is searching in all the buffers whose name match <buffer_name_filter_regex> and\n'Bse' in all buffers whose name doesn't match <buffer_name_exclusion_regex>.\n\nDefault key mappings in the buffer with the results :\n---------------------------------------------------------------------\n  \"Space\"  : moves the cursor on the first result of the next buffer\n  \"Enter or Control-j\"   : shows or jumps to the result under the cursor\n  \"J\"  : enables or disables jumping on the buffer when pressing Enter or Control-j\n  \"A\"  : enables or disables auto-showing the context of the results when pressing j or k\n  \"d\" : deletes the current range search result (default: current line)\n           (the deleted search results are showed at the bottom of the buffer)\n  \"D\" : definitely deletes the current range search result (default: current line)\n  \"Q\"  : enables or disables auto-quitting the buffer results when jumping\n  \"O\"  : toggles between showing options or showing results\n  \"r\"  : replace action on the non-deleted searched results\n  \"R\"  : replace action on the deleted searched results\n  \"u\"  : replaces this search with a newer one (with the same keyword)\n  \"i\"  : enables or disables the search match highlighting on the buffer with the results\n  \"I\"  : enables or disables the search match highlighting on the other buffers (not the buffer with the results)\n  \"x\"  : enables or disables quite-full-screen\n  \"q\"  : deletes the buffer with the results\n  \"?\"  : toggles between showing help or showing results\n\nScreenshot : http://ioalex.net/buffers_search_and_replace/screenshot.png\nSmall demo video (ogg theora) : http://ioalex.net/buffers_search_and_replace/demo.ogv\n\nFor more information, contact me or read the more complete documentation at the start of the plugin file."}, {:name=>"Yankcode", :summary=>"Paste syntax code to webpage quickly", :description=>"Many times when I using my old blog system, I fell in bad mood when I have to mix my source code with content, or no support for source code like syntax highlighted. And when I use vim\u0092s script TOhtml to deal with these thing, I feel that it\u0092s handy, but still not enough convenient. I have to choose and copy the html code by my hand, then add a something like <quoteblock class=\u0094vimblock\u0094>(\u0094vimblock\u0094 is a user-defined CSS element, will be mention later) tag to differentiate these code from common <quoteblock>. It\u0092s too inconvenient, also seems easy to be done with a script. So I wrote this.  \n\nWith this script, pasting syntax code is only: \"V\"(selection) and \":Yankcode\" and ctrl-v in editor.\n\nThe script based on TOhtml written by Bram Moolenarr. It convert the current selection to html using 2html, then get the body of html and wrap it with <blockquote class=\u0094vimblock\u0094>. In the end, it send the wrapped section of syntax code to clipboard for the further use.\n\nWelcome any advice."}, {:name=>"vimbuddy.vim--Whiteinge", :summary=>"Vimbuddy (update): An absolutely unuseful little thing", :description=>"An update to vimscript #8 for Vim 7 by the Gentoo guys.\n\nI'm neither the author nor the updator (if you are, drop me a line and I'll relinquish control of this page).\n\nPuts a smiley on your status line. Nose will rotate on <Left> and <Right>\nWill frown on errors and warnings"}, {:name=>"NAnt-completion", :summary=>"XML omni-completion data for NAnt build files", :description=>"File to allow Vim's xml autocompletion to work with NAnt build files (http://nant.sourceforge.net/). Elements and attributes were taken from the 0.85 version schema."}, {:name=>"NAnt-syntax", :summary=>"Highlighting for nant build files", :description=>"A simple syntax script for NAnt build files (http://nant.sourceforge.net/). Just highlights elements and attributes as extracted from the version 0.85 schema."}, {:name=>"incfilesearch.vim", :summary=>"Incremental search for files to edit using glob", :description=>"Based on incbufswitch.vim (http://www.vim.org/scripts/script.php?script_id=685)\n\nUsage:\n(1) Define a normal key mapping to :IncFileSearch or leave the default of <C-O>\n(2) When activated, start typing the name of the buffer you want to switch to.\n(3) Press <BS> if you make an error\n(4) Press <CR> to edit the first buffer in the remaining match list\n(5) Press <ESC> to quit and continue editing the current buffer\n\nStill a little crude. Polish from vim experts appreciated!"}, {:name=>"NetSend.vim", :summary=>"NetSend.vim: Plugin for sending messages using MS net send", :description=>"Plugin for sending messages with the 'net send' MS command.\nIt keeps the name of the users you send messages in a file and you can access them with the <tab> key.\nNavigation through menu (Plugin->NetSend->...) you can send messages, add users and remove them.\nYou can also open the file with the user names and edit directly.\n\nUsage:\n----------\nYou can use the menu in \"Plugin->NetSend-> or:\nInsert ':NetSend user_name message to this user'\n    and user_name will reicive a message saying: 'myUser says: message to this user'\nInsert :NetSent <tab> to see the list of users you have stored.\nInsert :NetSent r<tab> to see all the users beginning by 'r'\nInsert: NetSendCC user1 user2 user3<ENTER>\n    to send the same message to several users at a time (or :NetSendBCC if you wish)\n\nTo edit the list of users just open the file used in the g:NetSend_File. You can do it Typing :EditNetSend\n\nTODO: write the unix/linux version (smbclient -M MS-Windows-host-name OR talk)"}, {:name=>"Hints-for-C-Library-Functions", :summary=>"while typing a C function, a prototype is shown (man2 based)", :description=>"This script may be manually sourced or, if placed in .vim/ftplugin/c, will be automatically sourced whenever a C file is edited (which is where vimball will put it).  The prototypes within it are based on gcc's /usr/share/man/man2 directory.\n\nThis plugin is truly simple to use: after one has typed a function name, a protype \"hint\" will be shown.\n \nex.    select(\n\n       will result in\n\n          int select(int nfds, fd_set * readfds, fd_set * writefds, fd_set * exceptfds, struct timeval * utimeout)\n\n       being echo'd at the bottom of the display.\n\nYou'll probably want your cmdheight option set to at least two (ie.  set ch=2). \n\n(see vimscript#1826 for man-3 based function hints)"}, {:name=>"Hints-for-C-Library-Functions-B", :summary=>"while typing a C function, a prototype is shown (man3 based)", :description=>"This script may be manually sourced or, if placed in .vim/ftplugin/c, will be automatically sourced whenever a C file is edited (which is where vimball will put it).  The prototypes within it are based on gcc's /usr/share/man/man3 directory.\n\nThis plugin is truly simple to use: after one has typed a function name, a protype \"hint\" will be shown.\n \nex.    printf(\n\n       will result in\n\n          int printf(const char * format, ...)\n\n       being echo'd at the bottom of the display.\n\nYou'll probably want your cmdheight option set to at least two (ie.  set ch=2).\n\n(see vimscript#1825 for man-2 function hints)\n\n"}, {:name=>"smp", :summary=>"You will never bored, bcoz its simple", :description=>"Ultra nice colors may be very good for kids or just for looking, for long time simple color scheme good for both bright and low light situation. Works great for eyes brain and work."}, {:name=>"writebackup", :summary=>"Write backups of current file with date file extension.", :description=>"DESCRIPTION\nThis is a poor man's revision control system, a primitive alternative to CVS,\nRCS, Subversion, etc., which works with no additional software and almost any\nfile system. \nThe :WriteBackup command writes subsequent backups of the current file with a\n'current date + counter' file extension (format '.YYYYMMDD[a-z]'). The first\nbackup of a day has letter 'a' appended, the next 'b', and so on. (So that a\nfile can be backed up up to 26 times on any given day.) \n\nBy default, backups are created in the same directory as the original file,\nbut they can also be placed in a directory relative to the original file, or\nin one common backup directory for all files (similar to Vim's 'backupdir'\noption), or even in a file-specific location that is determined via a\nuser-provided callback function. \n\nUSAGE\n:WriteBackup[!]\n\t\t\tWrite the whole current buffer to the next available\n\t\t\tbackup file with a '.YYYYMMDD[a-z]' file extension. \n\t\t\tIf the last backup is identical with the current\n\t\t\tbuffer contents, no (redundant) backup is written. \n\t\t\tWith [!], creation of a new backup file is forced: \n\t\t\t- even if the last backup is identical\n\t\t\t- even when no more backup versions (for this day) are\n\t\t\t  available (the last '.YYYYMMDDz' backup gets\n\t\t\t  overwritten, even if it is readonly)\n\nPS: In addition to this Vim script, I also provide the basic writebackup\nfunctionality outside of Vim as VBScript and Korn Shell script versions at\nhttp://ingo-karkat.de/downloads/tools/writebackup/index.html"}, {:name=>"writebackupVersionControl", :summary=>"Version control functions (diff, restore, history) for writebackup backups.", :description=>"Version control functions (diff, restore, history navigation) for backups made\nwith the writebackup plugin, which have a date file extension in the format\n'.YYYYMMDD[a-z]'. \n\nDESCRIPTION\nThis script enhances the primitive file backup mechanism provided by\nwritebackup.vim with some functions of real revision control systems like\nCVS, RCS or Subversion - without additional software. \nVia Vim commands, you can list and go to all backup versions that exist for\nthe current file, check whether you have a current backup, backup the saved\nversion of the buffer even after you've made unsaved changes in the buffer\n(which is useful for after-the-fact backups). \nWithin Vim, you can create a diff with the previous version, restore the\ncurrent file from its predecessor or any other backed-up version. \n\nUSAGE\n:WriteBackupListVersions\n\t\t\tList all backup versions that exist for the current\n\t\t\tfile. If the file isn't the original, it is marked in\n\t\t\tthe version list. If the file is the original, the\n\t\t\ttime that has passed since the last backup is printed,\n\t\t\ttoo. \n\n:[count]WriteBackupGoPrev[!]\n:[count]WriteBackupGoNext[!]\n\t\t\tOpen a backup file version relative to the current\n\t\t\tbackup or original file (with 'readonly' set to\n\t\t\tprevent accidental edits) . You can skip multiple\n\t\t\tbackups via the optional [count]; if the resulting\n\t\t\tindex is out of bounds, the first / last available\n\t\t\tbackup version is edited.\n\t\t\tThus, :999WriteBackupGoPrev edits the very first\n\t\t\texisting backup, and :999WriteBackupGoNext edits the\n\t\t\tlatest (i.e. most recent) backup.\n\t\t\tWith [!], any changes to the current version are\n\t\t\tdiscarded. \n\n:WriteBackupGoOriginal[!]\n\t\t\tEdit the original of the current backup file. If\n\t\t\tbackups are stored in a different directory, it may\n\t\t\tnot be possible to determine the original file. With\n\t\t\t[!], any changes to the current version are discarded. \n\n:WriteBackupIsBackedUp\n\t\t\tCheck whether the latest backup is identical to the\n\t\t\t(saved version of the) current file (which must be the\n\t\t\toriginal file). \n\n:[count]WriteBackupDiffWithPred\n\t\t\tPerform a diff of the current file (which may be the\n\t\t\toriginal file or any backup) with the [count]'th\n\t\t\tprevious version. If the resulting index is out of\n\t\t\tbounds, the first available backup version is used.\n\t\t\tThe diff is done inside Vim, with a new diffsplit\n\t\t\tbeing opened. \n\n:[count]WriteBackupViewDiffWithPred [{diff-arguments}]\n\t\t\tShow the differences of the current file (which may be\n\t\t\tthe original file or any backup) with the [count]'th\n\t\t\tprevious version. If the resulting index is out of\n\t\t\tbounds, the first available backup version is used.\n\t\t\tThe diff output is opened in a split scratch buffer. \n\t\t\tAny {diff-arguments} are passed as-is to the diff\n\t\t\texecutable. The \"icase\" and \"iwhite\" settings of\n\t\t\t'diffopt' are used, too. \n\t  + [count]du\n\t\t\tBy repeating the command, an existing scratch buffer\n\t\t\tis updated; no new split is created. One can also\n\t\t\tupdate the differences by repeating\n\t\t\t:WriteBackupViewDiffWithPred in the diff scratch\n\t\t\tbuffer itself, or through the buffer-local [count]du\n\t\t\tmapping. \n\n:[count]WriteBackupRestoreFromPred[!]\n\t\t\tOverwrite the current file (which must be the\n\t\t\toriginal) with the [count]'th previous backup. With\n\t\t\t[!] skips confirmation dialog and allows to restore\n\t\t\tover readonly original file. \n\n:WriteBackupRestoreThisBackup[!]\n\t\t\tRestore the current file as the original file, which\n\t\t\twill be overwritten. With [!] skips confirmation\n\t\t\tdialog and allows to restore over readonly original\n\t\t\tfile. \n\n:WriteBackupOfSavedOriginal[!]\n\t\t\tInstead of backing up the current buffer, back up the\n\t\t\tsaved version of the buffer. This comes handy when you\n\t\t\trealize you need a backup only after you've made\n\t\t\tchanges to the buffer. \n\t\t\tWith [!], creation of a new backup file is forced: \n\t\t\t- even if the last backup is identical\n\t\t\t- even when no more backup versions (for this day) are\n\t\t\t  available (the last '.YYYYMMDDz' backup gets\n\t\t\t  overwritten, even if it is readonly)\n\n:WriteBackupDeleteLastBackup[!]\n\t\t\tDelete the last backup. With [!] skips confirmation\n\t\t\tdialog and allows to delete readonly backup file. "}, {:name=>"html-improved-indentation", :summary=>"A better indentation for HTML and embedded javascript", :description=>"This has been indenting HTML and JavaScript more properly that the standard html.vim.\n\nIt depends on the syntax file for HTML and JavaScript."}, {:name=>"VimSpy", :summary=>"VimSpy enables you to browse through all Vim internal entities.", :description=>"VimSpy defines a few commands and key mappings which enables you browse through almost all Vim internal entities such as functions, commands, menus and key mappings. \n\nMain commands: \n\nFunction [funcName]\nCommand [cmdName]\nAutocmd [autocmd]\nMenu [menuName]\nMap [mapping]\nSyntax [synItem]\nHighlight [synItem]\n\nThese commands are simply analogues of well-known Vim informational commands as function, command, autocmd and so on.\nBut they are modified in such a way that enables you use it much more efficient.\n\n1. An output of command is displayed in new window rather than ugly console.\n2. It is nicely highlighted.\n3. All function names and other keywords in output are clickable. When you double-click function name, new window with function definition is opened. In this function definition you may click any other function name and one more definition will be opened.  If you double-click Vim built-in keyword, help window will be opened. You also may to put cursor on keyword you are interested for and press enter. It will have the same effect as double-click.\n\n So you can in such a way quickly browse Vim internals. \n\nVimSpy also has such commands:\n\nChanges -- :change command analogue\nMessages -- :message command analogue\n\nCommandOutput  [cmd [args]] -- display output of any command in new window (It will not be highlighted though, except all command that have uppercase analogues)\n\nAMap        AMenu         ANoreMap   ANoreMenu\nCMap        CMenu         CNoreMap  CNoreMenu\nIMap          IMenu          INoreMap    INoreMenu\nNMap         NMenu        NNoreMap   NNoreMenu\nNoreMap    NoreMenu    OMap          OMenu\nONoreMap ONoreMenu  SMap          SMenu\nSNoreMap  SNoreMenu  VMap          VMenu\nVNoreMap  VNoreMenu  XMap          XMenu\nXNoreMap  XNoreMenu  LMap         LNoreMap    --      analogues of lowercase functions\n\n\n"}, {:name=>"asciidoc.vim", :summary=>"Syntax file for Asciidoc", :description=>"*Update:* A more sophisticated syntax file for Asciidoc is included since release 8.2. Check http://www.methods.co.nz/asciidoc/ f or details.\n\nThis is a syntax file for Asciidoc markup. You'll get info about Asciidoc on the Asciidoc Homepage: http://www.methods.co.nz/asciidoc/.\n\ncurrently the following elements are supported:\n\n * titles\n * rules\n * bullets\n * TODO, FIXME, ToDo, FixMe\n * references\n * labels\n * footnotes\n * links\n * comments\n * meta info\n\nThanks to Dag for several enhancements!\n\nFeel free to submit patches, comments, suggestions...to felix at obenhuber dot de and don't forget to cc asciidoc-discuss at metaperl dot com.\n\n\n"}, {:name=>"des3.vim", :summary=>"Edit DES3 encrypted files and turn Vim into a simple password safe.", :description=>"\nThis is replaced by openssl.vim. See vimscript#2012."}, {:name=>"st.vim", :summary=>"Syntax highlighting for Smalltalk", :description=>"st.vim is a syntax highlighting script for Smalltalk that I wrote because I wasn't quite happy with the one that was distributed with my copy of Vim.  It's somewhat GNU Smalltalk-oriented, but I'm open to suggestions on improving compatibility with other versions of Smalltalk, as well as suggestions and corrections in general.  Also, I have only tested it in Vim 7.0.  If it works (or can be made to work) in earlier versions, please let me know.\n"}, {:name=>"RDF-Namespace-complete", :summary=>"RDF Vocabulary/Model Omni-Completion for Vim 7+", :description=>"In a file with namespace prefix declarations similar to XML, Turtle/Notation3 or SPARQL, call\n\n  :RDF\n\nto turn on completion on terms within a namespace using the preceding prefix. This will load all RDF/XML and n3-files found in one of the following dirs:\n\n  - $RDF_MODEL_FILES (environment variable)\n  - ~/rdfmodels/\n  - ~/Documents/rdfmodels/\n  - /usr/local/share/rdfmodels/\n\nCall\n\n  :RDF reload\n\nto reload model files, and\n\n  :RDF quit\n\nto restore the original omnifunc (if any).\n"}, {:name=>"bufpos", :summary=>"switch buffer with Alt-<number>", :description=>"This script provides a function to activate a vim buffer by passing it the position in the buffers list and maps it to <M-number> to easily switch between open buffers.\n\nThis is best used together with the buftabs plugin: http://www.vim.org/scripts/script.php?script_id=1664\nAnd even better with my slightly modified version: http://blog.micampe.it/articles/2007/03/28/enhanced-buftabs-vim-plugin\n\nExplanation here: http://blog.micampe.it/articles/2007/03/25/tabs-in-vim-and-my-first-plugin"}, {:name=>"BlitzBasic-syntax-and-indentation", :summary=>"Syntax highlighting and indentation for BlitzBasic.", :description=>"These two scripts provide syntax highlighting and automatic code indentation for BlitzBasic code. Supported are the Blitz2D and Blitz3D commandsets.\n\nPlease note that there's one little bug: I couldn't determine which regular expression to use for if statements to indent correctly. Therefore you always have to write a 'Then' at the end of an if statement - which looks better anyway, in my opinion. ;-) Whatever, if you know how to change the regex to support both versions (with and without 'Then'), feel free to contact me."}, {:name=>"tEchoPair", :summary=>"Display the matching parenthesis/pair in the echo area", :description=>"VIM is an excellent editor but in comparison too e.g. emacs it lacks a \nminor feature that makes editing lisp code somewhat cumbersome. While \nVIM can highlight the matching parenthesis, this doesn't help much with \nlong functions when the matching parenthesis is off the screen. \nEmacs users are better off in such a situation, since emace displays the \nmatching line in the echo area.\n\nThis plugin tries to mimic Emacs's behaviour. Whenever the cursor is \nplaced over a parenthesis or an element of a pair the matching element is \ndisplayed in the echo area. If 'cmdheight' is set to a value greater \nthan 1, additional context lines are displayed, too.\n\n\nIn order to enable this plugin, you choose between the following  \noptions:\n    TEchoPairInstallBuffer ... enable for the current buffer\n\n    call TEchoPairInstall('*') ... enable globally\n\n    let g:tEchoPairInstall = ['lisp', 'scheme'] ... enable for certain \n      filetypes\n\n\nCurrently, there are the following display modes:\n    indicate ... Display the whole line and highlight the matching \n      parenthesis. If 'cmdheight' is greater than 1, additional lines \n      are display.\n\n    inner ... Display the inner text Emacs-style.\n\nIn order to see the matching parenthesis when 'showmode' is on, set \n'cmdheight' to something greater than 1.\n\nYou can select the preferred display mode on a filetype basis, by \nsetting g:tEchoPairStyle_{STYLE}.\n\nExample:\n    let g:tEchoPairStyle_inner = ['lisp', 'scheme']\n    let g:tEchoPairStyle_indicate = ['java']\n\n\nThe pairs are usually deduced from the value of 'matchpairs' unless \nthere is an entry for the current buffer's filetype in g:tEchoPairs. For \nthe following filetypes custom pairs are pre-defined:\n    - ruby\n    - vim\n\nBUT: It actually only works for lisp-like languages.\n"}, {:name=>"IndentAnything", :summary=>"Write indentations or enhance existing indentations without writing code", :description=>"The IndentAnything plugin is intended to make it easier to write new indentation scripts and/or supplement existing ones.  It makes the assumption that all indentable languages have similar characteristics:\n\n\t- blocks of code or text over multiple lines\n\t- continuation lines\n\t- comments\n\nThe rules of indentation are specified in a series of variables.  Explanation is provided in the included doc/IndentAnything.txt help file.\n\nAn example HTML indentation enhancement is also included."}, {:name=>"Javascript-Indentation", :summary=>"Indentation for Javascript", :description=>"Yes, Javascript has similarities to C, but it is a more flexible syntax, with constructs that are not handled by cindent().  And they shouldn't be, since it's not really C.\n\nThis script requires the IndentAnything plugin.\n\nFeedback is welcome."}, {:name=>"nicotine.vim", :summary=>"Light and simple color scheme for Gvim", :description=>"This is in fact a slightly customed version of lingodirector colorscheme\n(vimscript #1012) by Thomas Schmall.\n\nThis is a GUI version just for now.\n\nThanks:\nThomas Schmall for a great color scheme (lingodirector.vim) and\nBram Moolenaar et al. for the gem that is Vim."}, {:name=>"screenplay", :summary=>"A filetype plugin to enable easy screenplay writing", :description=>"The definition of a well formatted screenplay (as I understand it) goes\nsomething like:\n\n<15 spaces>SCENE/ACTION/DESCRIPTIONS (max 54 chars before wrapping)\n<37 spaces>CHARACTER NAME\n<25 spaces>DIALOG (max 35 chars before wrapping)\n\nIt might look like:\n\n\n             EXT. CITY STREET - DAY\n\n             Rain pissing down. Newspaper KID on street. A man stops\n             to listen.\n\n                                   KID\n                             (shouting)\n                       Extra! Extra! Child labour used to\n                       sell newspapers!\n\nFeatures\n========\n\n * All text is just a tab away from being indented correctly.\n   The tab button and the backspace button have been modified to go\n   backwards and forwards in helpful chunks  \n   Action  == 16 spaces == 1 tab\n   Dialog  == 26 spaces == 2 tabs\n   Speaker == 38 spaces == 3 tabs\n\n * The textwidth (tw) variable switches from 68 to 60, when moving from\n   ACTION to DIALOG. This ensures good margins.\n\n * Control-p will re-format a paragraph from under the cursor\n   downwards, relative to the (textwidth) margin\n\n * When you tab three times to type in a character name for DIALOG, and you\n   type the first letter of the characters name and then tab again, then you\n   will be presented with a choice to autocomplete that characters name.\n   (provided you've typed that characters name above a DIALOG at least once\n   before).\n  \n * Hitting enter after DIALOG should align for a new character name  \n\n * Hitting enter twice after DIALOG should align for new ACTION block\n"}, {:name=>"jman.vim", :summary=>"Initial upload", :description=>"* About\n\nThs \"jman.vim\" plugin is jman browser plugin for vim and jman user.\nJman is \"on-line manual pages for japanese\".\nJman is seen so that you may just use man.vim for man.\n\n* Need \"jman\" command.\n\nIt need \"jman\" command!\nIf you use FreeBSD, you can install jman program as root user,\n\n   cd /usr/ports/japanese/man && make install clean\n\njman.vim use /usr/local/bin/jman.\n\n* Usage\n\nIf you want to know ls(1), you can type following command.\n:Jman ls\n\nWant to know printf(3)\n:Jman 3 printf\n\n\n* see also\n\n- /usr/local/share/vim/vim*/ftplugin/man.vim\n"}, {:name=>"OceanBlack256", :summary=>"OceanBlack color scheme for a 256 color terminal.", :description=>"This color scheme based on Chris Vertonghen\u0092s Ocean Black color scheme. It is basically a conversion using dither.pl a Perl script I wrote to convert schemes to 256 xterm. \n\nSee the link bellow for some screen shots of what it looks like with Vim script, Java and C++ as well as the Perl source code for dither.pl.\n\nhttp://juan.axisym3.net/vim-color-schemes/#oceanblack256 \n\nWhen sending questions or comments please keep in mind that this theme will not work on 8/16 color terminals and I have not tested it in 88 color terminals. Also I am not in any way a unix/linux expert and had to endure many headaches recompiling Vim and messing with TERMCap settings trying to get the 256 term to work "}, {:name=>"haproxy", :summary=>"syntax for haproxy", :description=>"HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and proxying for TCP and HTTP-based applications. It is particularly suited for web sites crawling under very high loads while needing persistence or Layer7 processing.\n\nFor more details, see http://haproxy.1wt.eu/."}, {:name=>"gitdiff.vim", :summary=>"show git diff in a split window", :description=>"This script provides two functions to display git diffs in vim.\n\n:GITDiff [commitish]\n\n    Split the vim window vertically, display the HEAD, or some other changeset, version of the file in the split, then diff them.\n\n:GITChanges [commitish]\n\n    Highlight lines that were changed since the HEAD or some other changeset.\n\nSome examples:\n\n:GITDiff HEAD~10\n:diffoff\n\n:GITChanges origin/master\n:syntax on"}, {:name=>"NesC-Syntax-Highlighting", :summary=>"The Syntax Highlighting for NesC Files", :description=>"nesC is an extension to the C programming language designed to embody the structuring concepts and execution model of TinyOS. TinyOS is an event-driven operating system designed for sensor network nodes that have very limited resources.\nThis script is the Syntax Highlighting for the programming files written in NesC.\nDetailed can found from here: http://www.amingsite.info/aming/archives/?arch=vi_nesc"}, {:name=>"arpalert", :summary=>"arpalert syntax file", :description=>"Arpalert is a daemon used for monitoring ethernet networks. See http://www.arpalert.org/ for more details."}, {:name=>"AutoClose", :summary=>"Inserts matching bracket, paren, brace or quote", :description=>"There are very simple ways to insert a closing brace by setting up a few mappings. The problem with all these approaches is that they break undo, history or both. This script is my sixth attempt at correcting this problem and the first one that has worked in all scenarios.\n\nUsing this script, typing ``(`` will result in (|), where | is the cursor position and the double backticks are just marking input. Typing a ``)`` will move the cursor outside the parens. This moving outside works even in nested scenarios. Typing ``if(my_array['key`` results in if(my_array['key|']) and ``)`` gets you if(my_array['key'])|.\n\nThe paired characters are: [, (, {, \", '\n\nIf you like this script, you should also check out surround.vim"}, {:name=>"carrot.vim", :summary=>"My color scheme based on \"PeachPuff\" color scheme", :description=>"* My color scheme based on the \"PeachPuff\" color scheme\n* Works only for gvim"}, {:name=>"SearchSyntaxError", :summary=>"search for the next syntax error detected by the vim highlighting mechanism", :description=>"\" This scritp searches for the next syntax error detected by the vim highlighting\n\" mechanism. To search for the next syntax error, issue command\n\"       :ERR\n\" That all, folks.\n\"\n\" You can map this :ERR to your favorite key or key combination as follows:\n\"\n\"    noremap <silent><C-K><C-E>  :ERR<cr>\n\"\n\" For feedback, bugs and wishes: write to: iler.ml at gmail.com\n\"\n\" As a bonus, :ERRP searches backwards for the syntax error.\n\" And <Ctrl-K><Ctrl-E> is mapped to :ERR, unless somebody redefined it(\n\" (your vimrc or some other plugin)."}, {:name=>"clarity.vim", :summary=>"Yet another color scheme with a dark blue background", :description=>"Yet another color scheme with a dark blue background. Has good syntax highlighting. I have found it to be easy on the eyes for long hours of looking at code. Has been written for gvim."}, {:name=>"Twitter", :summary=>"A simple client for Twitter", :description=>"It's just a simple client for Twitter, if you want to update your Twitter status, check public timeline or your friends timeline all right from within your Vim, then this script is for you!\n\nNOTE: It requires your Vim to be compiled with Python bindings (which is, in most distributions by default)"}, {:name=>"Xdebugxs-dictionary-of-functions", :summary=>"This is simply  dictionary of Xdebug2 functions", :description=>"This is simply  dictionary of Xdebug2 functions. So after install it you can use auto completion of these functions in your PHP scripts.\n\nFor more details watch http://xdebug.org/"}, {:name=>"textmate16.vim", :summary=>"Textmate like colors for 16 color xterm.", :description=>"Color scheme to emulate the default color scheme from textmate for ruby scripts. Designed to work with an xterm with 16 colors. The background color is not changed and the intention is that the color scheme be used with a dark back ground, so the user should change the background to a dark gray or black. If you are using the gui then use the vibrantink.vim color scheme instead."}, {:name=>"Jinja", :summary=>"adds jinja highlighting support to vim", :description=>"Adds Jinja support to vim. The jinja.vim just highlights Jinja, the jinjahtml.vim which you can install additionally also highlights HTML around the Jinja tags.\n\nJinja is a template engine for python located at http://jinja.pocoo.org/\n\nScreenshot with my personal vim theme: http://lucumr.pocoo.org/static/pictures/jinja_in_vim.png"}, {:name=>"native.vim", :summary=>"dark greenish theme for vim.", :description=>"Screenshot: http://pocoo.org/~mitsuhiko/green-human.png"}, {:name=>"mako.vim", :summary=>"Adds mako support to vim", :description=>"Adds support for the mako python template engine to vim.\n\nMako: http://www.makotemplates.org/\n\nLicense: three clause BSD"}, {:name=>"eZVim", :summary=>"eZVim adds some features to vim for eZ Publish CMS", :description=>"Features\n    * Classes View : a sidebar displaying group classes, classes and attributes of content object classes.\n    * Syntax highligthing for eZ Publish templates and ini files\n    * Some vim abbreviations for the eZ Publish template syntax.\n\nRequirements\n    * vim and python scripting support. Under Debian or Ubuntu, just install the vim-python package.\n    * eZ Publish with the eZDevtools extension.\n\nTested with vim 7.1 under Ubuntu. It should work under any Unix. Not tested with others. \n\nSee project page http://projects.ez.no/ezvim for more."}, {:name=>"Directory-specific-settings", :summary=>"Easily have settings that apply only to files under a given directory", :description=>"This is a very simple plugin that allows for directory tree-specific vim settings.\n\nFor example, I prefer to indent with spaces, but one of the code bases I'm working on uses TABs for indentation.  So, instead of mucking with settings and going back and forth, I just create a file called \".vimdir\" at the top of that tree and put in some code like this:\n\nsetlocal noexpandtab\n\nAnd that's it!  Every file I edit under that directory will use that setting!\n\nFor every file edited, it searches upward from that file's directory for a file named '.vimdir' and sources it.  So, any arbitrary code can be put into the .vimdir file.  But you should take care to ensure that the code applies only to that file and doesn't have any global side-effects.  So, for example, always use 'setlocal'.\n\nThis plugin is very similar to vimscript #441.\n"}, {:name=>"errormarker.vim", :summary=>"Highlights and sets error markers for lines with compile errors", :description=>"Hooks the make quickfix command and converts all compiler errors into signs that are placed next to the line with the error. Additionally, lines with errors are highlighted. Hover with your mouse over such a line to get the error message in a tooltip (only gui), or press \\cc. The error markers will be updated on every call to :make.\n\nA screenshot of doxygen in action with a lot of errors can be found at http://mh21.piware.de/vim-error-markers-doxygen.png."}, {:name=>"kpl.vim", :summary=>"KPL (A Kernel Programming Language) syntax file", :description=>"KPL is the C-like language used for programming for BLITZ (see http://web.cecs.pdx.edu/~harry/Blitz/)"}, {:name=>"tlib", :summary=>"Some utility functions", :description=>"This library provides some utility functions. There isn't much need to \ninstall it unless another plugin requires you to do so.\n\nThe most useful functions provided by this library probably are:\n\ntlib#input#List(), tlib#input#ListW()\n    - Display a list\n    - Dynamically filter items matching a pattern (somethat like google)\n        - E.g. you filter for \"foo -bar\": show all entries containing foo but not bar.\n    - Select items from a list\n    - Do stuff\n        - Developers can define keys that trigger some action with the \n          selected items\n\ntlib#input#EditList\n    + Edit a list (copy, cut, paste, delete, edit ...)\n\n:TLet VAR = VALUE\n    Set a variable only if it doesn't already exist.\n\n:TScratch\n    Open a scratch buffer (a buffer without a file).\n\n:TVarArg VAR1, [VAR2, DEFAULT2] ...\n    Handle \"rest\" (variable) arguments in functions.\n    EXAMPLES:\n      function! Foo(...)\n          TVarArg ['a', 1], 'b'\n          echo 'a='. a\n          echo 'b='. b\n      endf\n\nTBrowseOutput COMMAND\n    Every wondered how to effciently browse the output of a command \n    without redirecting it to a file? This command takes a command as \n    argument and presents the output via |tlib#input#List()| so that you \n    can easily search for a keyword (e.g. the name of a variable or \n    function) and the like.\n    \n    If you press enter, the selected line will be copied to the command \n    line. Press ESC to cancel browsing.\n    \n    EXAMPLES:\n      TBrowseOutput 20verb TeaseTheCulprit\n      TBrowseOutput let\n      TBrowseOutput map\n\n\nRelated (small) plugins that utilize tlib and thus provide some degree of uniform user experience:\n    tbibtools (vimscript #1915): bibtex-related utilities (sort, reformat, list contents ...)\n    tmboxbrowser (vimscript #1906): A mbox browser -- Read your e-mails with vim\n    tmru (vimscript #1864): Most Recently Used Files\n    trag (vimscript #2033): A slightly language-aware alternative to grep\n    tregisters (vimscript #2017): List, edit, and run/execute registers/clipboards\n    tselectbuffer (vimscript #1866): A quick buffer selector/switcher\n    tselectfile (vimscript #1865): A quick file selector/browser/explorer (sort of)\n    ttagecho (vimscript #2055): Show current tag information\n    ttagcomplete (vimscript #2069): Context-sensitive tags-based completion and code skeletons\n    ttags (vimscript #2018): Tag list browser (List, filter, preview, jump to tags)\n    ttoc (vimscript #2014): A regexp-based table of contents of the current buffer\n\n\nFor full details, please see: \nhttp://github.com/tomtom/tlib_vim/blob/master/doc/tlib.txt\n\nAlso available via git\nhttp://github.com/tomtom/tlib_vim"}, {:name=>"tmru", :summary=>"Most Recently Used Files", :description=>"Also available via git http://github.com/tomtom/tmru_vim\n\nThis plugin provides a simple most recently used files facility.\n\n:TRecentlyUsedFiles ... open one or more recently used file(s)\n:TRecentlyUsedFilesEdit ... edit the mru list\n\nIf viminfo contains \"!\", the data is stored as global variable. Otherwise,\ntlib#cache is used -- which saves the data in ${vimfiles}/cache/tmru/files\nby default."}, {:name=>"tselectfiles", :summary=>"A quick file selector/browser/explorer (sort of)", :description=>"This plugin provides a simple file browser. It is not a full blown \nexplorer but can be nevertheless be useful for quickly selecting a few \nfiles or renaming them.\n\nAs the plugin does some caching in the background, the filelist is only \ngenerated once for each path or when called with [!]. In conjuncture \nwith the use of the [wbg]:tselectfile_filter_rx variable, this provides \nfor use as a simple ad-hoc project manager.\n\nVIM-CENTRIC EXAMPLE:\nWhen I open a file under \"~/vimfiles\", I set b:tselectfiles_dir \nto all the relevant directories under \"~/vimfiles\" and then set \nb:tselectfile_filter_rx = expand('%:t:r'). Thus, when I open \n\"~/vimfiles/plugin/foo.vim\", b:tselectfile_filter_rx is \"foo\", and \n:TSelectFiles shows all the files under \"~/vimfiles\" matching \"foo\".\n\nFeatures:\n    - list files (recursively or the in the current directory only), \n      dynamically select files matching a pattern\n    - open files\n    - preview files\n    - rename/move files\n    - batch rename/move files (using a regular expression)\n    - copy files\n    - delete files\n    - show file info\n\nAdvanced uses:\n\nRelated files: If you set |g:tselectfiles_filter_rx| to some appropriate \nvalue, only files matching that regexp will be shown initially. This can \nbe used to restrict the list to \"related\" files. (The initial filter can \nbe removed by pressing <c-bs>.) See also |tselectfiles#BaseFilter()| and \n|g:tselectfiles_part_subst|.\n\nRolodex: If a filename matches an entry in \n|g:tselectfiles_filedescription_rx| (a dictionnary patter => funcref), \nfuncref(filename) will be called to retrieve the file's description. \nThis function could be used to extract metadata or selected lines from \nthe file etc. By mapping one record onto one file, you would get some \nsort of rolodex-like database. See \n|tselectfiles#FormatVikiMetaDataOrFirstLine()| for an example for \nviki/deplate (vimscript #861) formatted files.\n"}, {:name=>"tselectbuffer", :summary=>"A quick buffer selector/switcher", :description=>"This plugin provides a simple buffer selector. It doesn't have all the \nfeatures other buffer selectors have but can be useful for quickly \nswitching to a different buffer or for deleting buffers.\n\nThe idea is to view the buffer list, to do something, and to close the \nbuffer list. If you really want to permanently watch the buffer list to \nsee whether it's changed, you might want to use a different plugin.\n\nFeatures:\n    - list buffers, dynamically filter buffers matching a pattern\n    - switch to a buffer\n    - rename a buffer (you may need to use :saveas! or :w! when writing \n    the renamed buffer to disk)\n    - delete one or more buffer(s)\n\n:[N]TSelectBuffer[!]\n    List buffers. With a count or a !, show also hidden buffers.\n    Keys:\n    <cr>  ... Select (close the buffer list)\n    <c-s> ... Open in split window\n    <c-v> ... Open in vertically split window\n    <c-t> ... Open in new tab\n    <c-w> ... Show in original window (continue with the buffer list)\n    <c-d> ... Delete a buffer\n    <c-u> ... Rename a buffer\n    <     ... Jump to opened buffer in window/tab\n\nSuggested keymaps (put something like this into ~/.vimrc):\n    noremap <m-b> :TSelectBuffer<cr>\n    inoremap <m-b> <c-o>:TSelectBuffer<cr>\n"}, {:name=>"doctest-syntax", :summary=>"Highlighting for Python doctest files", :description=>"Syntax file for highlighting Python doctest files. This is usefull for when you have your doctests in a seperate from your source code (in a .txt file). The syntax highlighter will color the ReST headers, code blocks and expected values."}, {:name=>"simplefold", :summary=>"space-optimized, configurable folds, supports Ruby, Ocaml, Perl, PHP, Java...", :description=>"More info at http://eigenclass.org/hiki/simplefold\n\nsimplefold is a small plugin that improves (for some definition of \"improve\", see the explanation and screenshots at http://eigenclass.org/hiki/simplefold) on other folding methods (syntax, marker, indent, expr). It was originally written for Ruby, but now also supports Objective Caml, PHP, Perl and Java. It features:\n* optimized vertical space usage\n* sensible foldtext\n* top-level folds: one per interesting definition. No need to open a class fold to see which methods it contains. Get a quick overview of the classes/methods/functions (whatever applies in the current filetype) with zM.\n* optional nested folds for if/while and so on\n* easy to adapt to other filetypes; just by setting 2-3 regexps\n\nUsage\n---------\nUse <Leader>f (by default \\f) to fold.\n\nYou can also use \n :Fold UNQUOTED-REGEXP\n\nto create folds showing the lines matching the given regexp, leaving everything else hidden; e.g.\n\n :Fold \\vfoo(bar|baz)\n\nwill create folds starting at each line matching foo(bar|baz), so that these are the only lines you see in your buffer (it's effectively a sort of internal grep).\n\nSee also vimtip#77 and vimscript #158"}, {:name=>"genshi.vim", :summary=>"Adds support for Genshi HTMl Templates to vim", :description=>"Adds support for Genshi HTML Templates to Vim.\n\nGenshi Webpage: http://genshi.edgewall.org/"}, {:name=>"django.vim--Ronacher", :summary=>"colorscheme in the colors of the django webpage", :description=>"Vim colorscheme in the colors of the django webframework webpage."}, {:name=>"fruity.vim", :summary=>"Dark Colorscheme with advanced color informations for several languages", :description=>"This colorscheme contains additional color informations for python, ruby, jinja templates and some others I use often."}, {:name=>"summerfruit.vim", :summary=>"Light version of fruity.vim", :description=>"Smaller and brighter version of fruity.vim."}, {:name=>"projtags.vim", :summary=>"Set tags file for per project", :description=>"Usage:\n\nSet your projects path into g:ProjTags as a list, for example:\n\nlet g:ProjTags = [ \"~/work/proj1\" ]\n\nIn this case for all file match the pattern \"~/work/proj1/*\", the tag file\n\"~/work/proj1/tags\" will be used.\n\nYou can also specify a tags file other than the default one or more tags\nfiles for one directory by a list:\n\nlet g:ProjTags += [[ \"~/work/proj2\", \"~/work/proj2/tags\",\n\"~/work/common.tags\" ]]\n\nIn this case for all files match the pattern \"~/work/proj2/*\", the tag files\n\"~/work/proj2/tags\" and \"~/work/common.tags\" will be used.\n\nIf one of the items in the list begins with \":\", it will be treated as a\ncommand (other than tag file):\n\nlet g:ProjTags += [[ \"~/work/proj3\", \"~/work/proj3/tags\",\n\":set shiftwidth=4\" ]]\n\nIn this case for all files match the pattern \"~/work/proj3/*\", the tag file\n\"~/work/proj3/tags\" will be used, and \"shiftwidth=4\" will be set.\n\nPlease note that if you use \"set\" in the command, we will actually use\n\"setlocal\" instead, to avoid polluting the whole vim environment.\n\nYou can add the above codes into your vimrc file"}, {:name=>"psql.vim--Snel", :summary=>"initial upload", :description=>"This file is a rewrite for PostgreSQL of the more general SQL intenting vim file made for Oracle and Sybase Adaptive Server Anywhere (ASA). All credits go to David Fishburn."}, {:name=>"verilog_emacsauto.vim", :summary=>"verilog filetype plugin to enable emacs verilog-mode autos", :description=>"Two emacs verilog-mode functions are mapped.\n\\a expands all the verilog-mode autos (similar to C-c C-a in emacs).\n\\d collapses all the verilog-mode autos (similar to C-c C-d in emacs).\n\nPreviously if I wanted to update verilog-mode autos, I would\n   save and quit vim\n   fire up emacs\n   do the auto commands\n   save and close emacs\n   fire up vim.\nAnd in doing so, I would lose all the edit history in vim.\nWith this I can just type \\a and keep all the previous edit history for undos.\n\nThis is my first attempt at writing a vim plugin. Code should be simple enough for an average Verilog user to take and fix/enhance according to needs. Doing :he plugin, :he write-plugin, or :he plugin-details should reveal how simple this really is."}, {:name=>"securemodelines", :summary=>"Secure, user-configurable modeline support", :description=>"Secure, user-configurable modeline support for Vim 7.\n\nVim's internal modeline support allows all sorts of annoying and potentially insecure options to be set. This script implements a much more heavily restricted modeline parser that permits only user-specified options to be set.\n\nThe g:secure_modelines_allowed_items array contains allowable options. By default it is set as follows:\n\n    let g:secure_modelines_allowed_items = [\n                \\ \"textwidth\",   \"tw\",\n                \\ \"softtabstop\", \"sts\",\n                \\ \"tabstop\",     \"ts\",\n                \\ \"shiftwidth\",  \"sw\",\n                \\ \"expandtab\",   \"et\",   \"noexpandtab\", \"noet\",\n                \\ \"filetype\",    \"ft\",\n                \\ \"foldmethod\",  \"fdm\",\n                \\ \"readonly\",    \"ro\",   \"noreadonly\", \"noro\",\n                \\ \"rightleft\",   \"rl\",   \"norightleft\", \"norl\"\n                \\ ]\n\nThe g:secure_modelines_verbose option, if set to something true, will make the script warn when a modeline attempts to set any other option.\n\nThe g:secure_modelines_modelines option overrides the number of lines to check. By default it is 5.\n\nIf g:secure_modelines_leave_modeline is defined, the script will not clobber &modeline. Otherwise &modeline will be unset.\n\nKeeping things up to date on vim.org is a nuisance. For the latest version, visit:\n\n    http://github.com/ciaranm/securemodelines"}, {:name=>"voodu.vim", :summary=>"Framework for implementing Object Oriented Programming with Vim Scripts", :description=>"This is an implementation of OOP with a decisively Perl flavor utilizing Vim 7.0's dictionary representation of objects.  More extensive documentation will be added at a later date.  I'm also aware of vimscript #1034 but it was pre-7.0 and thus doesn't utilize many of the features involved with Voodu.  For now, you can do the following:\n\nlet s:AD = tv#series#comedy#New('Arrested Development')\nlet s:TO = tv#series#comedy#New('The Office')\n\necho s:AD.name()\necho s:AD.type()\necho s:TO.name().\" is a \".s:TO.type()\n\nlet s:SS = tv#series#comedy#New('The Simpsons')\n\n\" An example of Class Method accessing Class Data\necho tv#series#Names()\n\nlet s:dailyshow = tv#New('News Parody')\necho s:dailyshow.type()\n\n--------------------------------------- Future Plans ---------------------------------------\n\nI want to demonstrate the usefulness of this utility plugin by implementing generic tab/window/buffer classes that can hide a lot of the work I see plugin authors performing, e.g. wincommander, WinWalker, SideBar.\n\nAdditionally, I believe I can add functionality similar to Perl's Class::Accessor or Ruby's attr_reader:, namely automatic provision of simple accessor methods."}, {:name=>"vimoutliner-colorscheme-fix", :summary=>"Allows VimOutliner files to work with *any* colorscheme.", :description=>"If you're familiar with VimOutliner, at http://vimoutliner.org, you know it's a fantastic outlining tool that can easily become your default way to use Vim. The one major annoyance I've found is that it ships with one or two colorschemes. \nUnlike most syntax files, the colors are hard-coded in, so if you try to use a different colorscheme, the syntax highlighting disappears.\n\nFortunately, there's an easy fix. This tiny package is simply an updated syntax file, in which I have linked the syntax groups to established Vim groups, like Normal, Comment, and so on. You can now open a VimOutliner file in any colorscheme you like. \n\nYou\u0092ll still get some occasional weirdnesses (certain elements can default to invisible), in which case you can either change colorschemes, tweak the colorscheme itself, or tweak syntax/vo_base.vim. Anyhow, it usually works.\n\n(More info at http://www.billpowellisalive.com/2007/01/vimoutliner-and-a-tweak-to-use-colorschemes/)"}, {:name=>"AutoComplPop", :summary=>"Automatically opens popup menu for completions", :description=>"Repository:\n  https://bitbucket.org/ns9tks/vim-autocomplpop/\n\nIssues:\n  http://bitbucket.org/ns9tks/vim-autocomplpop/issues/\n\nDownload latest(development) version\n  https://bitbucket.org/ns9tks/vim-autocomplpop/get/tip.zip\n\n==============================================================================\nINTRODUCTION                                                *acp-introduction*\n\nWith this plugin, your vim comes to automatically opens popup menu for\ncompletions when you enter characters or move the cursor in Insert mode. It\nwon't prevent you continuing entering characters.\n\n\n==============================================================================\nINSTALLATION                                                *acp-installation*\n\nPut all files into your runtime directory. If you have the zip file, extract\nit to your runtime directory.\n\nYou should place the files as follows:\n>\n        <your runtime directory>/plugin/acp.vim\n        <your runtime directory>/doc/acp.txt\n        ...\n<\nIf you disgust to jumble up this plugin and other plugins in your runtime\ndirectory, put the files into new directory and just add the directory path to\n'runtimepath'. It's easy to uninstall the plugin.\n\nAnd then update your help tags files to enable fuzzyfinder help. See\n|add-local-help| for details.\n\n\n==============================================================================\nUSAGE                                                              *acp-usage*\n\nOnce this plugin is installed, auto-popup is enabled at startup by default.\n\nWhich completion method is used depends on the text before the cursor. The\ndefault behavior is as follows:\n\n        kind      filetype    text before the cursor ~\n        Keyword   *           two keyword characters\n        Filename  *           a filename character + a path separator \n                              + 0 or more filename character\n        Omni      ruby        \".\", \"::\" or non-word character + \":\"\n                              (|+ruby| required.)\n        Omni      python      \".\" (|+python| required.)\n        Omni      xml         \"<\", \"</\" or (\"<\" + non-\">\" characters + \" \")\n        Omni      html/xhtml  \"<\", \"</\" or (\"<\" + non-\">\" characters + \" \")\n        Omni      css         (\":\", \";\", \"{\", \"^\", \"@\", or \"!\")\n                              + 0 or 1 space\n\nAlso, you can make user-defined completion and snipMate's trigger completion\n(|acp-snipMate|) auto-popup if the options are set.\n\nThese behavior are customizable.\n\n                                                                *acp-snipMate*\nsnipMate's Trigger Completion ~\n\nsnipMate's trigger completion enables you to complete a snippet trigger\nprovided by snipMate plugin\n(http://www.vim.org/scripts/script.php?script_id=2540) and expand it.\n\n\nTo enable auto-popup for this completion, add following function to\nplugin/snipMate.vim:\n>\n  fun! GetSnipsInCurrentScope()\n    let snips = {}\n    for scope in [bufnr('%')] + split(&ft, '\\.') + ['_']\n      call extend(snips, get(s:snippets, scope, {}), 'keep')\n      call extend(snips, get(s:multi_snips, scope, {}), 'keep')\n    endfor\n    return snips\n  endf\n<\nAnd set |g:acp_behaviorSnipmateLength| option to 1.\n\nThere is the restriction on this auto-popup, that the word before cursor must\nconsist only of uppercase characters.\n\n                                                               *acp-perl-omni*\nPerl Omni-Completion ~\n\nAutoComplPop supports perl-completion.vim\n(http://www.vim.org/scripts/script.php?script_id=2852).\n\nTo enable auto-popup for this completion, set |g:acp_behaviorPerlOmniLength|\noption to 0 or more.\n\n\n==============================================================================\n"}, {:name=>"ck.vim", :summary=>"ChucK Audio Programming Language Syntax", :description=>"Syntax file for the ChucK Audio Programming Language http://chuck.cs.princeton.edu/"}, {:name=>"svndiff", :summary=>"Shows colored signs in buffer indicating diff with original svn/git file,", :description=>"Screenshot available at http://zevv.nl/play/code/vimscripts/\n\nIntroduction\n------------\n\nNOTE: This plugin is unix-only!\n\nAn small vim 7.0 plugin for showing RCS diff information in a file while\nediting. The following RCS types are supported:\n\n * CVS\n * Subversion (SVN)\n * Git\n * Mercurial\n \nThis plugin runs a diff between the current buffer and the original\nfile from svn or git, and shows coloured signs indicating where the buffer\ndiffers from the original file from the repository. The original\ntext is not shown, only signs are used to indicate where changes were made.\n\nThe plugin can be used for files managed with subversion or GIT. The type of\nRCS will be detected when first issuing a svndiff command on the file.\n\nThe following symbols and syntax highlight groups are used for the signs:\n\n  > DiffAdd:    Newly added lines. (default=blue)\n\n  ! DiffChange: Lines which are changed from the original. (default=cyan)\n\n  < DiffDel:    Applied to the lines directly above and below a deleted block\n                (default=magenta)\nUsage\n-----\n\nThe plugin defines one function: Svndiff(). This function figures out the\ndifference between the current buffer and it's svn/git original, and adds\nthe signs at the places where the buffer differs from the original file from\nsvn or git. You'll need to call this function after making changes to update\nthe highlighting.\n\nThe function takes one argument specifying an additional action to perform:\n\n  \"prev\"  : jump to the previous different block\n  \"next\"  : jump to the next different block\n  \"clear\" : clean up all signs\n\nYou might want to map some keys to run the Svndiff function. For\nexample, add to your .vimrc:\n\n  noremap <F3> :call Svndiff(\"prev\")<CR>\n  noremap <F4> :call Svndiff(\"next\")<CR>\n  noremap <F5> :call Svndiff(\"clear\")<CR>\n\nConfiguration\n-------------\n\nThe following configuration variables are availabe:\n\n* g:svndiff_autoupdate\n\n  If this variable is defined, svndiff will automatically update the signs\n  when the user stops typing for a short while, and when leaving insert\n  mode. This might slow things down on large files, so use with caution.\n  The vim variable 'updatetime' can be used to set the auto-update intervar,\n  but not that changing this variable other effects as well. (refer to the\n  vim docs for more info)\n  To use, add to your .vimrc:\n\n  let g:svndiff_autoupdate = 1\n\n* g:svndiff_one_sign_delete\n\n  Normally, two 'delete' signs are placed around the location where\n  text was deleted. When this variable is defined, only one sign is\n  placed, above the location of the deleted text.\n  To use, add to your .vimrc:\n\n  let g:svndiff_one_sign_delete = 1\n\nColors\n------\n\nPersonally, I find the following colours more intuitive for diff colours:\nred=deleted, green=added, yellow=changed. If you want to use these colours,\ntry adding the following lines to your .vimrc\n\nhi DiffAdd      ctermfg=0 ctermbg=2 guibg='green'\nhi DiffDelete   ctermfg=0 ctermbg=1 guibg='red'\nhi DiffChange   ctermfg=0 ctermbg=3 guibg='yellow'\n\nChangelog\n---------\n\n1.0 2007-04-02  Initial version\n\n1.1 2007-04-02  Added goto prev/next diffblock commands\n\n1.2 2007-06-14  Updated diff arguments from -u0 (obsolete) to -U0\n\n2.0 2007-08-16  Changed from syntax highlighting to using signs, thanks\n                to Noah Spurrier for the idea. NOTE: the name of the\n                function changed from Svndiff_show() to Svndiff(), so\n                you might need to update your .vimrc mappings!\n\n3.0 2008-02-02  Redesign with some ideas from Jan Bezdekovsky. The\n                diff is only updated when the buffer actually changes,\n                cleanup of signs is now done properly and some info\n                about each diff block is printed in the status line.\n\n3.1 2008-02-04  Fixed bug that broke plugin in non-english locales, thanks\n                to Bernhard Walle for the patch\n\n3.2 2008-02-27  The latest rewrite broke vim 6 compatiblity. The plugin\n                is now simply disabled for older vim versions to avoid\n\n                a lot of warnings when loading.\n\n4.0 2008-11-24  Added GIT support. The RCS type is now detected (svn/git)\n\n4.1 2008-11-25  Added CVS support\n\n4.3 2010-05-08  Added support for Mercurial, fixed git support (thanks \n                          Frankovskyi Bogdan)\n\n"}, {:name=>"Increment-and-Decrement-number", :summary=>"Increment or decrement the number which is under your cursor", :description=>"In the command mode, move your cursor on the number which you want to change.\nThen use SHIFT and + to increment the number \nor SHIFT and - to decrement the number."}, {:name=>"felix.vim", :summary=>"Felix language syntax highlighting", :description=>"Felix language syntax highlighting"}, {:name=>"python_import.vim", :summary=>"automatically remove unused imports and clean up the rest", :description=>"This plugin defines a function for automatically cleaning up the imports\nin a python module or program. It does two things:\n\n - removes unused imports\n - sorts and formats the remaining imports\n\nThis function is mapped to <LocalLeader>i (for \"import\") in two contexts.\nIn Normal mode, it operates on the current paragraph.\nIn Visual mode, it operates on the selected range.\n\nThe python 'tokenize' module is used to determine which symbols are used\nin the current buffer, so the script is pretty good at identifying unused imports.\n\nThe import formatting style was chosen to work well with grep - the name of\nthe module and the symbols imported from it are guaranteed to always\nappear on the same line."}, {:name=>"scmCloseParens", :summary=>"Lets you easily close all open parens up to the cursor line.", :description=>"Lets you easily close all open parens up to the cursor line.\n\nI tested it quickly with Scheme, but it should also work with Lisp.\n\n(define foo\n  (lambda(x)\n    (+ x 1\n\nPut your cursor on the last line (or below), and type <Leader>p\nIt will become\n\n(define foo\n  (lambda(x)\n    (+ x 1)))\n\nI chose \"p\" as in \"parens\", for it is easy to remember. I would have preferred \"c\" as in \"close\", but <leader>c is already taken by the good EnhancedCommentify :D\n\n\nI apologize for this script beeing a dirty quick hack, but writing in vim's script language is a real pain, and this script is enough useful to me to choose to share it.\nI should at least clean it by the following weeks."}, {:name=>"nginx.vim", :summary=>"initial version", :description=>"nginx.vim highlights configuration files for nginx, the high-performance web server (see http://nginx.net)."}, {:name=>"AnyPrinter", :summary=>"Lets you insert a print statement quickly in any language", :description=>"\" This is a  simple script to quicky insert a print statement in your code.\n\" Currently supported languages are : \n\"       C\n\"       Scheme, Lisp , OCaml/Omlet, Haskell\n\"       Java\n\" It also indents current line and puts the cursor where you expect it to be, in\n\" insert mode of course !\n\nFor example, in C, it would insert a printf(\"X\"); while in Scheme, you'd have a (display X), where X is the cursor position.\n\nMapped to <Leader>P in normal mode\nabbreviated to pap in insert mode (as in \"PrintAPrint\")\n\nTODO :\nMore languages to be added as I'm requested.\nSome more idiomatic statements may replace those I chose, and the possibility to choose between several printers ? (print, display, pretty-print, show....)\n"}, {:name=>"DiffGoFile", :summary=>"Jump to file from diff output", :description=>"Description:\nIf you are editing diff file and you want to jump quickly to corresponding source files, function DiffGoFile does that. Place cursor on the spot in diff file which interests you, call DiffGoFile and you will be presented with the source file exactly at the place you were looking at. Currently only unified diff is supported, but the script has framework for adding more types.\n\nInvocation:\nPlace cursor on the line you are interested in and\n:call DiffGoFile('X')\nWhere X is one of: n - open in New window\n                   v - open in Vertical split\n                   h - open in Horizontal split\n                   t - open in new Tab\n\nConfiguration:\nYou may wish to setup a hotkey, I'm using CTRL-] (:tag) for example\n\nautocmd FileType diff nnoremap <buffer> <C-]> :call DiffGoFile('n')<CR>\n"}, {:name=>"automated-rafb.net-uploader-plugin", :summary=>"only works on Windows, uploads current file in rafb.net", :description=>"the script is actually a perl script\nand you only have to make a minor modification to vimrc\nto be able to use it.\nwhat it does it is automated to go to rafb.net\npaste the current file you're editing there,and\nthen as rafb.net gives you a link to the file\nthe script will put it in your clipboard so you can reffer\nto where you need it.\nthis script would be recommended for whoever needs to paste some code.\nyou can use F5 to run the script on the current file.\nit only works on windows."}, {:name=>"LustyExplorer", :summary=>"Dynamic filesystem and buffer explorer", :description=>"LustyExplorer is a fast and responsive way to manage files and buffers in Vim.  It includes a filesystem explorer, a buffer switcher, and a buffer grep for searching through and switching between files and buffers quickly, all through a mostly common interface.\n\nA short video someone made:\n\n      http://www.youtube.com/watch?v=dLMKVYqdarY\n\n      Some old stuff (pre v2.0 - we now use fuzzy matching instead of tab completion):\n      http://viewglob.sourceforge.net/lusty-explorer-animated.gif\n      http://viewglob.sourceforge.net/lusty-explorer-annotated.png\n\nInstructions:\n\n      :LustyFilesystemExplorer\n      :LustyFilesystemExplorerFromHere\n      :LustyBufferExplorer\n      :LustyBufferGrep (for searching through all open buffers)\n\n      <Leader>lf  - Opens filesystem explorer.\n      <Leader>lr  - Opens filesystem explorer at the directory of the current file.  \n      <Leader>lb  - Opens buffer explorer.\n      <Leader>lg  - Opens buffer grep.\n\nWhen one of the explorers is launched, a new window appears at bottom presenting a table of files/dirs or buffers, and in the status bar is a prompt:\n\n      >>\n\nAs you type a name, the table updates using a fuzzy matching algorithm (or regex matching in the case of grep).  Press enter to open the selected match, <C-n>/<C-p> to select the next/previous match, or press <ESC> or <Ctrl-c> to cancel.\n\nSee the \"Usage:\" section of the script for other tricks and features.\n\nIf you like LustyExplorer, you may also like LustyJuggler: vimscript #2050\n\nDevelopment repository: http://github.com/sjbach/lusty"}, {:name=>"vividchalk.vim", :summary=>"A colorscheme strangely reminiscent of Vibrant Ink for a certain OS X editor", :description=>"This colorscheme is based on the Vibrant Ink theme for TextMate.  The original\ntheme was biased towards Ruby on Rails and this colorscheme continues that\ntradition.  In addition to the GUI, 256, 88, and even 16 color terminals are\nall supported.\n\nhttp://github.com/tpope/vim-vividchalk\n"}, {:name=>"CimpTabulate.vim", :summary=>"Utility script for case tabulation in C/C++", :description=>"This utility script is useful where you have a long list of similar, one-line case statements, and you'd like to format these statements in tabular form.\n\nThe script main function is :[range]call CimpTabulateCase(...) and it takes one optional argument. \n\nCimpTabulateCase() has three modes of tabulation: \n  * tabulation -- each sub-statement following the \"case :\" is aligned to a column\n  * compact -- only the statement immediately following the \"case :\" is aligned to a column\n  * smart tabulation -- as with tabulation, but tries to reduce the number of columns or apply compact for lines which overflow &textwidth\n\nCimpTabulateCase() interprets arguments as follows:\n  * 1 or \"^s\" -- use smart tabulation\n  * 2 or \"^c\" -- use compact tabulation\n  * all other non-empty arguments -- use normal tabulation\n\nIf CimpTabulateCase() it is used without arguments, and on the same range as it was previously used, it will cycle through the three modes of tabulation. Otherwise, it will use normal tabulation.\n\ncimp.vim defines four mappings for CimpTabulateCase():\n\n  :map <Leader>cc :call CimpTabulateCase()<CR>\n  :map <Leader>c0 :call CimpTabulateCase(0)<CR>\n  :map <Leader>c1 :call CimpTabulateCase(1)<CR>\n  :map <Leader>c2 :call CimpTabulateCase(2)<CR>\n\ncimp.vim also defines the following settings:\n\n  g:CimpPadding -- column padding, default = 1\n  g:CimpAlignSpecial -- align statements at the end of each line matching g:CimpAlignSpecialPattern in the last column, default = 1\n  g:CimpAlignSpecialPattern -- pattern for special alignment, default = \"\\^return\\\\|\\^break\"\n\nCimpTabulateCase() is probably best demonstrated using the following example: \n\n1. Add the following case statements to any buffer:\n    case kOneArg:         printf(\"Number: %d\\n\", argc); break;\n    case kTwoArgs:        printf(\"Number: %d\\n\", argc); break;\n    case kFourArgs:       printf(\"Number: %d\\n\", argc); a = b + c; break;\n    case kFifteenArgs:    printf(\"Number of args: %d\\n\"); a = b; break;\n    case TwentyThreeArgs: printf(\"Number of args are way too many: %d\\n\"); break;\n\n2. :se tw=80\n\n3. At the first case statement, try the following normal commands: \n\n  5\\c0 -- normal tabulation\n  5\\c1 -- smart tabulation\n  5\\c2 -- compact tabulation\n  5\\cc -- cycle to normal tabulation\n\nOf course you can also select a range using visual mode, and then\n\n  \\c0\n  gv\\c1\n  gv\\c2\n  gv\\cc\n\nImprovement suggestions and bug submissions are welcome."}, {:name=>"vmake", :summary=>"Use quickfix with external make", :description=>"vmake is a small bash script to use quickfix with the external make command.  running 'vmake' on sourcode with errors will let gvim  jump automatically to the first error. Now you can use all quixfix commands.\nIf you prefer the external make instead of the build in check it out.\n"}, {:name=>"Vim-Setup-system", :summary=>"Vim Setup system - persistent setup directly in vim", :description=>"This script is a modified version of the Setup script created by Jos van RisWick and which can be found here: \nhttp://www.xs4all.nl/~josvanr/vim/setup.vim\n\nModifications:\n- This package includes all the external scripts needed in order to make this script work.\n- All scripts are modified such that they expect to find the other scripts in the plugin folder in vimhome instead of in the users home directory. \n- fixed an incompatibility with vim 7.0 and newer\nPlease see Jos' site for more info about the script. "}, {:name=>"gmcs.vim", :summary=>"Mono C# compiler profile", :description=>"Mono C# compiler profile.  Tells vim to run gmcs when you :make your file.  Plus, when you run the :make command on your .cs file, this will parse the error messages and let you jump right to the problem points.   "}, {:name=>"ragtag.vim", :summary=>"A set of mappings for HTML, XML, PHP, ASP, eRuby, JSP, and more (formerly allml)", :description=>"This plugin started out as a set of personal mappings, but there was enough enjoyment among those I shared it with for me to clean it up and release it.\n\nFeatures:\n\nWhile there are several HTML and XML scripts on vim.org, I have found none that share a significant amount of functionality with allml.vim.\n\nA huge variety of filetypes are supported:  html, xhtml, wml, xml, xslt, xsd, jsp, php, aspperl, aspvbs, cf, mason, htmldjango, and eruby.  (Let me know if I missed any).  Some features take note of the filetype and adapt to it.\n\nMaps for editing tags.  This includes a couple of \"make last word into a tag pair\" maps, a doctype map (inserts <?xml ...?> in XML), a \"close last tag\" map, and a few extra goodies.\n\nFor templating languages (ASP, PHP, etc.), there are maps for inserting template code.  The maps are dependent on the filetype: in ASP, you get <% %> and <%= %>, in PHP, <?php ?> and <?php print ?>, etc.  If said template language has a comment syntax, there is a map for it, otherwise, that map points to <!-- -->.\n\nMaps for XML/HTML escaping and URL encoding have been moved to unimpaired.vim, vimscript #1590.\n\nEnhances surround.vim, vimscript #1697.\n\nhttp://github.com/tpope/vim-ragtag"}, {:name=>"synic.vim", :summary=>"A pastel and high contrast colorscheme", :description=>"Based from desert, but with a higher contrast of colors.  The background is always black to make the syntax colors stand out better.  I took special effort to make sure that no color is too bright.  Works great if you're working at the office under good light.\n\nScreenshot at http://www.exaile.org/vim.png\n\nThe latest version is the combined 256 color terminal and gvim colorscheme"}, {:name=>"vcsnursery", :summary=>"Additional backends for vcscommand", :description=>"Intro:\nThis package contains additional backends (Mercurial and sccs currently) for vcscommand vimscript#90 (thanks for the excellent package!). While talking Bob about including them to vcscommand, he suggested to create additional package, which would contain new and possibly buggy backends. After some soak time, they might be moved to vcscommand itself. So here we go.\n\nCurrent status:\nMercurial: Full support + annotate syntax\nSCCS: Limited support (full is not possible, see below) and annotate syntax\n\nSccs backend does not have Add, Delete, Lock, Revert, Unlock and Update. There's enough for VCSVimDiff, VCSAnnotate and VCSLog. The reason is, that sccs can be used on it's own, through TeamWare and through other wrappers like Sun internal wx. It would be possible to write plugin to handle them all, but I'm not convinced that it's worth the hassle (make me do it :)).\n\nContact:\nsee my account info\n"}, {:name=>"FindFile", :summary=>"Open file quickly by using autocomplete", :description=>"Somewhat similar to locate on Unix, FindFile allows you open a file quickly by typing in its file name.  You can use :FC to generate the cache of all files in a directory recursively, then using :FF will open a buffer that can autocomplete on the filenames that are cached.  Pressing <Enter> will open the file.  \n\nThis is a pure vim implementation and the cache is stored in memory using a vim dictionary.  It should work on both Windows and Unix.\n\nSee http://wlee.net/FindFile.swf.html for details."}, {:name=>"ael.vim", :summary=>"Syntax for Asterisk Extension Language (AEL)", :description=>"Includes highlighting for most of the basic structure of AEL files."}, {:name=>"freefem.vim", :summary=>"FreeFEM++ Syntax File", :description=>"This is the syntax file for FreeFEM++ opensource finite element oriented PDE solver:\n\nhttp://www.freefem.org"}, {:name=>"skill_comment.vim", :summary=>"After pair of brackets auto-add starting keyword in the comment", :description=>"Vim filetype plugin enhancement\nLanguage: skill (cadence extension language)\n\nType \");\" in Insert mode to insert the word located before the matching \"(\".\nFor selected keywords this also adds the argument (following the keyword).\nTo work properly, keyword and argument must be found on the same line.\n\nExample:\n\nprocedure( vscCheckpointHier( @key lib cell view message inclibs )\n    let(( ddCVs )\n        vscPrint0(sprintf( nil \"Hierarchy for %s,%s,%s ...\" lib cell view ))\n        when( ddCVs = vscGetHierarchyDDs( ?lib lib ?cell cell ?view view\n                                          ?inclibs inclibs )\n            vscPrint0(sprintf( nil \"  %d cellviews.\" length(ddCVs) ))\n            vscCheckpoint( ddCVs ?message message)\n        ); when ddCVs\n    ); let\n); procedure vscCheckpointHier\n"}, {:name=>"-REPL", :summary=>"Prompt-driven replace(substitute) for console vim, also in multiple files.", :description=>"\" This script defines command REPL which is prompt-driven. REPL \n\" command does not take arguments. It prompts for:\n\" 1) string to replace. You can use * here for current word under cursor,\n\"    / for current search pattern. Simply Enter means current search pattern, too.\n\" 2) string to repalce to. Empty string means empty string here.\n\" 3) Substitution flags:\n\"     (i) ignorecase (m) matchCase\n\"     (w) as word    (c) confirm    (f) in files\n\"    Default flags are 'mw' - match-case and whole-word substitution.\n\"\n\" If you include f in flags, you are additionally prompted for\n\" file patterns (space-separated). Examples: (1) *.c *.h (2)  **.[ch]\n\" '**' in file patterns means recursive file matching.\n\"\n\" Press Ctrl-C at any prompt to abort the script.\n\"\n\" That's all.\n\" Send bugs and wishes to: iler.ml@gmail.com\n\"\n\" Todo & wishes:\n\" - print \"No substitutions\" when there were no substitutions. Currently,\n\"   nothing is printed where nothing was substituted.\n\"\n\" Example dialog:\n\"  :REPL\n\"  Replace what > foo\n\"  Replace to   > bar\n\"   (i) ignorecase (m) matchCase\n\"   (w) as word    (c) confirm    (f) in files [mw]\n"}, {:name=>"ReloadScript", :summary=>"Reload a VIM script during script development.", :description=>"DESCRIPTION:\n  Re-sources a VIM script. The script may use a multiple inclusion guard\n  variable g:loaded_{scriptname} (with {scriptname} having either the same\n  case as specified or all lowercase.) \n  If you specify the bare scriptname (without .vim extension), the script must\n  reside in $VIMRUNTIME/plugin/{scriptname}.vim. Otherwise, the passed\n  filespec is interpreted as the file system location of a VIM script and\n  sourced as-is. \n  If you execute :ReloadScript without passing a scriptname, the current\n  buffer is re-sourced. \n\nUSAGE:\n  :ReloadScript Re-sources the current buffer. \n  :ReloadScript {scriptname} Re-sources the passed plugin script. \n  :ReloadScript {path/to/script.vim} Re-sources the passed file. \n\nASSUMPTIONS:\n  Not every script supports reloading. There may be error messages like\n  \"function already exists\". To support reloading, the script should use the\n  bang (!) variants of :function! and :command!, which will automatically\n  override already existing elements. \n\n  Ensure that the script uses a multiple inclusion guard variable that\n  conforms to the conventions mentioned above. The :ReloadScript command will\n  issue a warning if it cannot find the inclusion guard variable. "}, {:name=>"camelcasemotion", :summary=>"Motion through CamelCaseWords and underscore_notation.", :description=>"DESCRIPTION\nVim provides many built-in motions, e.g. to move to the next word, or end of\nthe current word. Most programming languages use either CamelCase\n(\"anIdentifier\") or underscore_notation (\"an_identifier\") naming conventions\nfor identifiers. The best way to navigate inside those identifiers using Vim\nbuilt-in motions is the [count]f{char} motion, i.e. f{uppercase-char} or f_,\nrespectively. But we can make this easier: \n\nThis script defines motions ',w', ',b' and ',e' (similar to 'w', 'b', 'e'),\nwhich do not move word-wise (forward/backward), but Camel-wise; i.e. to word\nboundaries and uppercase letters. The motions also work on underscore notation,\nwhere words are delimited by underscore ('_') characters. From here on, both\nCamelCase and underscore_notation entities are referred to as \"words\" (in double\nquotes). Just like with the regular motions, a [count] can be prepended to move\nover multiple \"words\" at once. Outside of \"words\" (e.g. in non-keyword\ncharacters like // or ;), the new motions move just like the regular motions. \n\nVim provides a built-in 'iw' text object called 'inner word', which works in\noperator-pending and visual mode. Analog to that, this script defines inner\n\"word\" motions 'i,w', 'i,b' and 'i,e', which select the \"word\" (or multiple\n\"words\" if a [count] is given) where the cursor is located. \n\nUSAGE\nUse the new motions',w',',b' and ',e' in normal mode, operator-pending mode (cp.\n:help operator), and visual mode. For example, type 'bc,w' to change 'Camel' in\n'CamelCase' to something else. \n\nEXAMPLE: motions\nGiven the following CamelCase identifiers in a source code fragment:\n    set Script31337PathAndNameWithoutExtension11=%~dpn0\n    set Script31337PathANDNameWITHOUTExtension11=%~dpn0\nand the corresponding identifiers in underscore_notation:\n    set script_31337_path_and_name_without_extension_11=%~dpn0\n    set SCRIPT_31337_PATH_AND_NAME_WITHOUT_EXTENSION_11=%~dpn0\n\n,w moves to ([x] is cursor position): [s]et, [s]cript, [3]1337, [p]ath,\n    [a]nd, [n]ame, [w]ithout, [e]xtension, [1]1, [d]pn0, dpn[0], [s]et\n,b moves to: [d]pn0, [1]1, [e]xtension, [w]ithout, ...\n,e moves to: se[t], scrip[t], 3133[7], pat[h], an[d], nam[e], withou[t],\n    extensio[n], 1[1], dpn[0]\n\nEXAMPLE: inner motions\nGiven the following identifier, with the cursor positioned at [x]:\n    script_31337_path_and_na[m]e_without_extension_11\n\nv3i,w selects script_31337_path_and_[name_without_extension_]11\nv3i,b selects script_31337_[path_and_name]_without_extension_11\nv3i,e selects script_31337_path_and_[name_without_extension]_11\nInstead of visual mode, you can also use c3i,w to change, d3i,w to delete,\ngU3i,w to upper-case, and so on. \n\nSource: Based on http://vim.wikia.com/wiki/Moving_through_camel_case_words by\nAnthony Van Ham."}, {:name=>"tmboxbrowser", :summary=>"A mbox browser -- Read your e-mails with vim", :description=>"mbox is a widely used format to store e-mails. Thunderbird uses it too.\n\nFeatures\n    - Show an index of e-mails contained in a mbox file\n    - Mark e-mails as read and don't show them again in the index\n    - View e-mails\n        - display single parts of a multipart message\n        - decode quoted printables\n        - filter html mails through an external program; in the default \n          setup, this requires \"w3m\" (g:tmboxbrowser_convert_html)\n        - view base64 encoded attachments; this also requires \"base64\" \n          (g:tmboxbrowser_convert_base64) to be installed\n            - if viki (vimscript #861) is installed, use \n              VikiOpenSpecialFile()\n            - otherwise the file will be opened with \n              g:netrw_browsex_viewer\n\n:TMBoxBrowser[!] [FILE]\n    Open a index list with the e-mails in the currently opened mbox.\n    With [!], read items are displayed too. In this mode, no e-mails are \n    marked as read.\n    If [FILE] is given, the file is (newly) edited.\n    I.e. if you open a mbox, mark all items as read and then want to \n    browse the file again, you'll have to type>\n\n        :TMBoxBrowser! %\n\n    Alternatively, press <c-t> in the list view to show/hide read mails.\n\n:TMBoxSelect[!]\n    Show a list of mbox files (as defined in g:tmboxbrowser_path). \n    Open a mbox & call :TMBoxBrowser.\n\n\nKey maps\nThese are effective in the __MBOX_Browser__ window:\n\n    i        ... Display the index list (in gvim, you can also use <esc>)\n    p        ... Select parts or re-view mail\n    q        ... Quit the browser\n    ?        ... Help\n    <space>  ... Page down\n    <bs>     ... Page up\n"}, {:name=>"snipper", :summary=>"snippets script for vim (like textmate or scribes have)", :description=>"see https://launchpad.net/snipper/ and http://tmske.blogspot.com/\nyou need vim with python enabled for this script\nfor the most recent package at all times you beter use the code of https://launchpad.net/snipper/\nThere are some templates in the package (python, c, xml, ...)\n\nSee http://snipper.googlecode.com/files/snipper-0.1-example.ogg for a small screencast of how snipper works"}, {:name=>"creole.vim", :summary=>"creole.vim is a syntax file for the creole wiki markup standard.", :description=>"creole.vim is a vim syntax file for the http://www.wikicreole.org markup standard. \n\nIt is based on vimscript#725 from Andreas Kneib.\n\nNew versions can be found at http://www.peter-hoffmann.com/code/vim/"}, {:name=>"QuickBuf", :summary=>"Very small, clean but quick and powerful buffer manager!", :description=>"QuickBuf\nVim plugin helps navigate and manipulate buffers\nMaintainer: palnart <palnart@gmail.com>\n\nBrief description:\nWhile making the task of browsing and manipulating buffers visual and simple, QuickBuf also offers advanced abilities of dealing with buffers (ex: \"unlisted\" mode). It's unique among several other buffer managers for creating no dedicated buffer and defining no auto command, thus minimize its interference.\n\nGive it a try and you may find it all you need to work with Vim's buffers!\nAny bugs or suggestions, please mail to: palnart@gmail.com\n\nUsage:\n+ Press the assigned hotkey to activate QuickBuf (default <F4>). It brings out a list of buffers that you can browse and give commands on! Some indicators in the list:\n\t- * : the buffer being opened in the active window\n\t- = : a buffer being opened in a window, but not active\n\t- [+] : modifed buffer\n+ Use k/j or <Up>/<Down> keys to select the buffer.\n+ Press a key to give a command to the currently selected buffer\n\t- d : delete buffer\n\t- w : wipe out buffer\n\t- s : open buffer in a new horizontally split window\n\t- u : open buffer\n\t- <enter> : open buffer and leave QuickBuf; if the\tbuffer is already opened in a window, switch to that window.\n+ d, w, and <enter> operations may fail (ex: delete a modified buffer), QuickBuf will inform you so that you can force them by preceding the above characters with an exclamation mark ('!'). Ex: !d, !w, !<enter>\n+ Instead of moving the selection bar around to select a buffer, you can use a number to specify a buffer. For example: '2d' will delete the second buffer in the list. Try '3<enter>', '1w', '1!w'\n+ Use 'l' key to toggle between LISTED and UNLISTED mode. Which mode QuickBuf enter first depends on the active buffer. While in UNLISTED mode, 'unlisted' buffers (the buffers you have deleted) are showed. Also:\n\t- [+] indicates a loaded buffer\n\t- 'd' command makes the selected buffer 'listed' again\n+ Press <esc> key to leave QuickBuf"}, {:name=>"SuperPre", :summary=>"syntax for the text that contains several programming language", :description=>"The spre (SuperPre) is a syntax plugin for the text that contains several programing language.  The text can be converted to HTML.  This is useful for writing programming notes or creating web pages.\n\nspre syntax is like a C macro.  Example to make HTML:\n<html>\n<head>\n<title>example</title>\n</head>\n<body>\n#macro\n\" You can use Vim script as embedded macro.\nreturn \"<h1>Example to make HTML</h1>\"\n#end\n\n## comment is removed from result.\n\n#pre c {\"colorscheme\":\"evening\"}\n/* This section will be <pre class=\"c\">...</pre> */\nint func(int n) {\n  return func(n);\n}\n#end\n\n#macro\nlet s:attr = {}\nlet s:attr.colorscheme = \"desert\"\nlet s:attr.tag = \"div\"\nlet s:attr.class = \"c main\"\nlet s:attr.modeline = \"list number\"\n#end\n#pre c s:attr\n/* This section will be <div class=\"c main\">...</div> */\nint main(int argc, char **argv) {\n  return 0;\n}\n#end\n\n#macro\nreturn readfile(expand(\"%:p:h\") . \"/footer.txt\")\n#end\n</body>\n</html>\n\nIf you want to highlight HTML tag outside of spre macro:\n  :set ft=html.spre\nSpre will work as additional syntax.\n\ncolored example:\nhttp://yukihiro.nakadaira.googlepages.com/spre_example.html"}, {:name=>"in.vim", :summary=>"Syntax file for Silvaco/Simucad Atlas and Athena input files", :description=>"This is a syntax file for input files used by \"Atlas\" or \"Athena\", which are semiconductor device and process modeling tools developed by Silvaco/Simucad.   The default extension for \"Atlas\" and \"Athena\" input files is .in"}, {:name=>"perlhelp.vim", :summary=>"Interface to perldoc", :description=>"A plugin that provides quick and easy access to perldoc. The perldoc text is displayed in a new window. This window is reused for resulting lookups if left open. When looking up a module filetype is set to perl so it is correctly highlighted, if syntax highlighting is turned on.\n\nFunctions:\nThe functions can accept an argument for the topic to lookup. If no argument is supplied they will prompt for the topic.\nPerlFAQ - Lookup a regular expression using perldoc -q.\nPerlHelp - Lookup a topic using perldoc.\nPerlFunc - Lookup a function using perldoc -f.\nPerlMod - Lookup a module using perldoc -m.\nPerlVar - Lookup a Perl builtin variable in the perlvar page.\n\nKey Mappings:\n<Leader>ph - Lookup the selected text in visual mode or the word under the cursor in normal mode using perldoc.\n<Leader>PH - Prompt for a topic to lookup using perldoc.\n<Leader>pf - Lookup the selected text in visual mode or the word under the cursor in normal mode using perldoc -f.\n<Leader>PF - Prompt for a function to lookup using perldoc -f.\n<Leader>pm - Lookup the selected text in visual mode or the word under the cursor in normal mode using perldoc -m.\n<Leader>PM - Prompt for a module to display using perldoc -m.\n<Leader>pq - Lookup the selected text in visual mode or the word under the cursor in normal mode using perldoc -q.\n<Leader>PQ - Prompt for a regular expression to lookup using perldoc -q.\n<Leader>pv - Lookup the selected text in visual mode or the word under the cursor in normal mode in the perlvar page.\n<Leader>PV - Prompt for a Perl builtin variable and look it up in the perlvar page.\n\nThe <Leader> key is normally '\\&#039. Thus to lookup the word under the cursor type '\\ph'.\n\nTip:\nAdding the following to your vimrc file will make POD documentation in Perl modules easier to read:\nlet perl_include_pod=1\n\nIf you find any problems or have any suggestions please feel free to email me at LoranceStinson+perlhelp AT gmail DOT com.\n\nAlso available at http://lorance.freeshell.org/perlhelp/"}, {:name=>"phphaxor", :summary=>"Dark colorscheme made for highlighting PHP especially in between HTML/JS", :description=>"phphaxor is a dark minimalistic syntax highlighting theme.\nSpecially made to light out your PHP code in between HTML/JS.\n\nAm still working on toggling HTML / PHP highlighting, that will be in V1.0\nFor now just PHP is highlighted out.\n\nExample: http://img169.imageshack.us/my.php?image=phphaxorv091kl0.png\n"}, {:name=>"tbibtools", :summary=>"bibtex-related utilities (sort, reformat, list contents ...)", :description=>"tbibtools provide a simple regexp-based bibtex parser. Please be aware \nthat this script makes a few assumptions on how a bib file should look \nlike and that it may fail on files formatted in unusual ways. Failure \nmay lead to loss of bib entries and malformed or incomplete output.  \nComments and other text will be stripped when reformatting entries. Any \nfeature of bibtex I don't know and/or don't use myself is most likely \nnot supported by this script/class.\n\nPlease take care when using this script. Make backups and check the \noutput, especially when using the -f command-line option. Don't blame me \nif you lose information or end up with corrupted bib files.\n\n\nFeatures:\n    - sort bib files\n    - reformat bib files\n    - list keys in a bib file\n    - show bib entries matching a regular expression\n\n\nFrom the commands line:\n\nThe ruby directory contains a file tbibtools.rb that can be used as a \nstand-alone script from the command line. For command-line use, only the \nfile tbibtools.rb and a ruby interpreter is needed.\n\n    tbibtools [OPTIONS] < IN > OUT\n\n\nFor vim users:\n\nThe file plugin/tbibtools.vim provides the commands\n\n    :'<,'>TBibTools [OPTIONS]\n        Filter the selected text or the whole buffer through \n        tbibtools.rb. The command line options are the same as for the \n        script.\n\n    :'<,'>TBibList [OPTIONS]\n        List keys in a bibtex file (mostly the same as TBibTools --ls \n        but lets you select an entry and jump to its position in the \n        bibtex file).\n\n\nOptions:\n\n    -i          ... case insensitive\n    -e REGEXP   ... display entries matching the regexp\n    -f FORMATS  ... re-format (order matters, comma-separated list): \n                    align, bracket, check, downcaseType, gsub, indent, \n                    list, nil, nnIsYear, ls, tml, stripEmpty, \n                    stripRedundantTitel, unwrap, upcaseType, wrap\n    --ls        ... synonym for: -f list,stripPrelude (\"list\" implies \n    \"unwrap\")\n    -l FORMAT   ... format string for list\n    -q FIELD=RX ... show entries for which field matches the regexp\n    -P          ... strip the prelude: same as -f stripPrelude but helps \n    to maintain the original formatting\n    -s FIELD    ... sort (default: sort by key; key = _id, type = _type)\n    -S          ... replace/expand strings\n    --strip FIELDS ... ignore/strip fields\n    -u          ... unsorted\n\n\nFormats:\n\nFormats can be easily plugged in by defining a method (see \nTBibTools#format). As the formatters process the entry one after the \nother, the order given on the command line matters.\n\nPlease scrutinize the output carefully. The use of an incomplete or simply \nthe wrong set of formatters can easily result in a corrupted bib file \nthat bibtex cannot read.\n\n    align\n         Align the = sign.\n\n    bracket\n         Enclose non-numeric values in curly braces.\n\n    gsub=FROM1:TO2:FROM2:TO2\n         Replace text in the value.\n\n    indent,\n         indent=N (default=4) Indent the entry's key-value pairs.\n\n    nil\n         Don't print any output.\n\n    stripRedundantTitel\n         If an entry has a title and a booktitle field with the\n         same value, only the booktitle field will be propagated.\n\n    stripEmpty\n         Drop fields with empty values.\n\n    unwrap\n         Put wrapped text into a single line.\n\n    wrap\n         Try to cheaply wrap the value.\n\n    check\n         Print a warning on invalid entries\n\n    nnIsYear\n         Try to correctly sort two-digit numbers in the key, i.e. sort \n         example99 before example00.\n\n    downcaseType\n         Downcase the bibtex type.\n\n    upcaseType\n         Put the bibtex type in upper case letters.\n\n    list\n         List keys only.\n\n    stripPrelude\n         Drop any prelude (useful in conjunction with some other \n         commands). It is supposed the bibtex file is made up of a \n         prelude containing @string definitions and a series of bibtex \n         entries.\n\n    tml\n        A shortcut for: \n        nnIsYear,downcaseType,stripRedundantTitle,stripEmpty,bracket,align,unwrap,indent \n        (see also TBibTools#format_option_tml)\n\n\nExamples:\n\nReformat the bib file\n\n  tbibtools -f tml < monos.bib > monos_sorted.bib\n\n  tbibtools -f gsub=Ã¤:\\\"a:Ã¶:\\\"o:Ã¼:\\\"u < monos.bib > monos_sorted.bib\n\nList the contents (see also TBibTools#format_option_ls)\n\n  tbibtools --ls < monos.bib\n  tbibtools --ls -l \"\#{_lineno}: \#{author|editor|institution}: \#{title|booktitle}\" < monos.bib\n\nExtract a few entries à la grep (kind of):\n\n  tbibtools -P -e Hugo < monos.bib\n  tbibtools -P -q author=Adorno -q keywords=Adorno < monos.bib\n  tbibtools -P -q author=\"Husserl|Merleau-Ponty\" < monos.bib\n\n"}, {:name=>"vdm.vim", :summary=>"Syntax file for VDM-SL", :description=>"This script provides syntax highlight for VDM-SL specification language.\nhttp://www.vdmtools.jp/en/\n\nDownload at http://rcg-pt.net/programacao/vdm.vim.gz"}, {:name=>"mySqlGenQueryMenu.vim", :summary=>"Generates vim menu from sql queries files (python required)", :description=>"When you use a database as a tool for your work, you may have queries you\noften use and don't want to write each time.\nIn this case, as you are a vim user, you may dream of a way to simply create a\nmenu in vim containing all your queries with a few parameters...\nThis plugin is for you.\n\nIt aims to let you write your queries in sql files as you would normally do it\nand then generate a menu for you to access them.\n\n\nAdvertising :\nHave you heard of this other funny script ?\n\nIf you find this script  too serious, try this other one : \nhttp://www.vim.org/scripts/script.php?script_id=800\nWith this script you'll be able to MixCase like the best Hà®d(orê m1×Càse ma$+Er and make your coding very new style ;-)"}, {:name=>"Scheme-Mode", :summary=>"As many useful commands and functions for Scheme as possible", :description=>"\" This is a simple fileplugin supposed to help you write Scheme code fast.\n\" Comes with shortcuts for usual patterns such as `if`, `cond`, `case`, as\n\" well as `let`s (normal, letrec and named let), `syntax-rules`, and eventually\n\" a header generator and shortcuts to inser (print) lilke statements.\n\" Since many of those patterns have placeholders for code, `f and `s tags are\n\" mapped to what can be thought of as 1st place and 2nd place. For example, in\n\" an `if`, first place is the #t branch, and second place is the #f branch\n\"\n\" Little help with motions is given too. Mapped <C-l> and <C-h> to the next and\n\" previous Sexp, in depth parsing order.\n\"\n\" You are more than suggested to define the bindings as you want them.\n\" I chose <Leader>sX so that the \"s\" reminds you scheme, though is slows down\n\" typing quite a bit. Moreover, you might not want a 3 keyed shortcut to start a\n\" quoted list...\n\"\n\" Also comes with a function that closes all open brackets.\n"}, {:name=>"clibs.vim", :summary=>"Syntax highlighting for C library functions and constants", :description=>"This is a fork of the default c.vim syntax file that provides highlighting of C library functions and constants.\n\nThe patch to c.vim is very minor (just add one container class for library functions / constants), so your usual syntax highlighting in C will be preserved.\n\nIt contains options that let you control how much, and which libraries you want highlighted.\n\nCurrently, the only libraries supported are \"glibc\" and \"xlib\". But it comes with instructions on how to add your own (project specific, or other) libraries. Feel free to add support for other standard libraries and send them to me :)."}, {:name=>"cvsps-syntax", :summary=>"Syntax highlight for cvsps files", :description=>"It lacks a detector, the user must manually \":set ft=cvsps\", make a ftdetect based on filename or put \"vim: ft=cvsps\" in the file."}, {:name=>"javalog.vim", :summary=>"syntax highlighting for default java.util.logging output", :description=>"Syntax highlighting appropriate for log files written by java.util.logging default FileHandler settings."}, {:name=>"ChocolatePapaya", :summary=>"low contrast scheme, light or dark", :description=>"This is a unified light/dark version of PapayaWhip (vimscript #591) and ChocolateLiquor (vimscript #592). Both are pretty easy on the eyes, and feature the colors PapayaWhip and one I call ChocolateLiquor (aka #3F1F1F).\n\nScreenshots:\n\nLight Version: http://home.ptd.net/~gwilliam/vim/PapayaWhip.png\nDark Version: http://home.ptd.net/~gwilliam/vim/ChocolateLiquor.png"}, {:name=>"vpp.vim", :summary=>"Syntax file for VDM++", :description=>"This script provides syntax highlight for VDM++ specification language. \nhttp://www.vdmtools.jp/en/ \n\nDownload at http://rcg-pt.net/programacao/vpp.vim.gz"}, {:name=>"omniperl", :summary=>"omnicompletion for the perl language", :description=>"\nNote : This script is a bit buggy and wrong in the details.\nIt needs a more theoretical sound basis, rework or maybe a different approach.\n\n"}, {:name=>"context-complier-plugin", :summary=>"complier for context", :description=>"This complier plugin sets up texexec with appropriate options as the make program. To use this do\n\n:compiler texexec\n:make <options> <filename>\n\nwhere <options> are additional options that you want to pass to texexec. If you always want to use this compiler with context files, add \n\ncompiler texexec\n\nin your .vim/ftplugin/context.vim file."}, {:name=>"bbs.vim", :summary=>"Syntax highlighting plugin for SMTH BBS", :description=>"This is a simple syntax highlighting plugin for SMTH BBS. If you didn't know what is SMTH, this plugin has no use to you so just ignore it. :-)"}, {:name=>"syntaxalgol68.vim", :summary=>"Syntax for Algol68", :description=>"First version... looking for ideas.\n\nAlternate download location: http://3ttechnology.com/vim/syntax/algol68.vim\n\nCurrently does fully handle unicode/htm4 characters, eg &divide; for ÷ AND &perp; for ⊥\n\nTargeted toward the ALGOL-68G version from:\nhttp://www.xs4all.nl/~jmvdveer/algol.html#obtaining\nAnd includes extensions.\n\nHas SOME reserved words/extensions from ALGOL-68R and ALGOL-68C\n\nCurrently cannot parse code with BOLDED HTML.\n\nSome pascal syntax remains."}, {:name=>"Rename", :summary=>"Rename a buffer within Vim and on disk", :description=>"A command and function that basically does a \":saveas <newfile>\" then removes the old filename on the disk.\n"}, {:name=>"DBGp-client", :summary=>"a remote debugger interface to the DBGp protocol (tested only with XDebug/PHP)", :description=>"PLEASE NOTE: This script has only been tested with XDebug for PHP debugging. But it may work with other debuggers. If you would like to contribute any patches which would add support for other debuggers, please contact me at sam at box dot net.\n\nALSO PLEASE NOTE: The original script was written by Seung Woo Shin, located at http://www.vim.org/scripts/script.php?script_id=1152. This is a slightly modified version of that script with a few additional capabilities. If anyone would like to contribute any patches to this script, feel free to submit diffs or contact me at sam at box dot net."}, {:name=>"maxscript.vim", :summary=>"Syntax highlighting for MAXScript 8.0", :description=>"This file will provide basic highlighting for MAXScript release 8.0. Comments, keywords, numbers, and strings are currently highlighted."}, {:name=>"svndiff.vim", :summary=>"vim plugin to for visual display of svn diffs in two vim windows", :description=>"1) used as vim command, format :D [v] [version #]\n   :D h    \n      -- diff between opened file and lastest svn version, horizontal split\n   :D      \n      -- diff between opened file and lastest svn version, vertical split\n   :D h <version #>  example  :D 1.2\n      -- diff between opened file and svn version #, horizontal split\n   :D <version #>  example  :D v 1.2\n      -- diff between opened file and svn version #, vertical split\n2) map to key \n   can create key mapping by adding the following lines in ~/.vimrc, example\n   a. map <F8> <Plug>D\n        -- press F8 in vim, show diff to svn last version, horizontal split\n   b. map <F7> <Plug>Dh\n        -- press F7 in vim, show diff to svn last version, vertical split\n3) return from diff mode to normal mode\n   :set nodiff\n\nexample:\n  a) open a file in vim\n  b) use vim command line, :D <enter> to see two windows with diffs\n  c) :close to close tmp window\n  d) :set nodiff to expand the compressed view, or press a on '+' sign to expand \n\nversion updates:\n0.2 -- merged Tom Ziomek's fix"}, {:name=>"visSum.vim", :summary=>"Computes sum of selected numbers", :description=>"It is something so trivial, I can't believe it hasn't been done before.\nAfter looking for an hour I couldn't find a plugin to do this without relying on external programs, so here is my offering, 100% pure vimscript.\n\nHighlight some lines containing numbers, and use <Leader>su (usually that's \\su) and the sum appears in the message line.  \n\nIt works by grepping each line of your selection for the first number it sees, and adds that to the running total.\n\nVisual Block support added in version 0.2.\n\nFeedback to g?? ArjBsnyFbCe@tzNnvZy.pbz - NOSPAM\n"}, {:name=>"html_french", :summary=>"view html entities as accented characters for French", :description=>"When loading a html file, this plugin replaces all HTML-coded French characters (like & eacute ;) with the normal representation (é), like so many other scripts: html_umlaute(vimscript#907), html_portuguese(vimscript#924), html_danish (vimscript#1163).  I specifically ripped off html_danish, thank you Sune Vuroela.\n"}, {:name=>"git-commit", :summary=>"see your commit diff with git", :description=>"this ftplugin (and syntax file) brings you the ability to see the diffs of the commit you are commenting at the same time, a bit like svn-commit does."}, {:name=>"rectcut", :summary=>"Rectangle Copy", :description=>"After installation\n\n Run Command \n\n:Cut 1 1 3 4    => Copies from Col 1 Row 1 to Col 3 and Row 4 \n:Pas 1            => Paste every thing at end of line number 1"}, {:name=>"OOP-javascript-indentation", :summary=>"This indentation script for OOP javascript (especially for EXTJS)", :description=>"This indentation script for javascript \n\nexample of public method of class\n\nvar testing = function(){\n  return {\n    showDialog:new dialog([\n      {\n        1:'testing',\n        2:'coba',\n        3:'jajal'\n      }\n    ]);\n  }\n}\n\nComments are welcome! ryanthe@gmail.com"}, {:name=>"Syntax-for-XUL", :summary=>"Highlighting for XML User interface Language.", :description=>"Syntax highlighting for the XML User interface Language (XUL) a.k.a. eXtensible User interface Language.  Based on Nicolai Nespor's xul.vim v0.5.  Follows XUL's reference at http://developer.mozilla.org/en/docs/XUL_Reference.\n\nAlso available at http://bioinf.ibun.unal.edu.co/~miguel/?id=5"}, {:name=>"todo.vim", :summary=>"Syntax highlighting for simple to do lists.", :description=>"Adds syntax highlighting for simple to do lists.\n\nThis is pretty rudimentary right now, but I've been using it for a while. Please send me comments/suggestions.\n\nThe file todo.vim lists known limitations/bugs."}, {:name=>"autofmt", :summary=>"text formatting plugin", :description=>"This is a 'formatexpr' plugin and framework for it.\n\nFollowing method can be used:\n  compat (Vim compatible)\n  uax14 (Implementation of UAX #14)\n  Japanese\n\nUAX #14: Line Breaking Properties: http://unicode.org/reports/tr14/.\n"}, {:name=>"drools.vim", :summary=>"Syntax highlighting for DROOLS Rules Sets.", :description=>"Syntax highlighting for \"Rules Set\" files for the DROOLS Rules Engine, a.k.a, JBoss Rules: http://labs.jboss.com/jbossrules/. This does a ton of borrowing from the existing Java syntax file, as written by Claudio Fleiner <claudio@fleiner.com>, so I hope he doesn't mind. This is just an initial version that I wrote to make writing DROOLS files a little more bearable, so if you see any desired improvements, just e-mail me and let me know. Thanks!"}, {:name=>"fx.vim", :summary=>"JavaFX Script syntax", :description=>"This is a simple syntax mode for the new JavaFX Script language. This is also my first-ever vim syntax file. I couldn't get some things working, such as types for function arguments. Feedback, contributions, and enhancements are most welcome!"}, {:name=>"stingray", :summary=>"blue gray colorscheme", :description=>"Color Scheme that tries to make the actual program logic more visible.\nComments and type identifiers are displayed in colors that try to put them in the background. \nThey are still visible if necessary, but can be ignored if desired.\nGenerally the more important something is to algorithmic logic, the brighter it should be."}, {:name=>"JSON.vim", :summary=>"A syntax highlighting file for JSON", :description=>"A simple highlighting file for JSON constructs."}, {:name=>"QuickFixFilterUtil", :summary=>"filter matched files in the quickfix window manually/ drop .svn .hg _darcs", :description=>"When grepping I don\\\\&#039t want to get the files stored by the version control system. That\\\\&#039s why I\\\\&#039ve written this script to remove those matches. \nIt can also be used to replace filenames (cygwin problem)..\nIf you are unsure which and how many files have been removed just invoke :LogShowAll and rerun. \n"}, {:name=>"outline", :summary=>"Create your own custom view of the file based on regex", :description=>"Vim has many possibilites to let you find the code you want to have a look at.\nThis script shows all matches of a regular expression in another buffer together with line numbers. The cursor will be placed where you have been.\nSo you won't loose orientation.\n\nI think a small example will help you much to illustrate what this script can do for you\n\nThe script is called autoload/vl/ui/navigation/jump_to_code_by_regex.vim\n\nand looks like :\n==============================\n[...]\nfunction! vl#ui#navigation#jump_to_code_by_regex#Outline(regex, ...)\n  exec vl#lib#brief#args#GetOptionalArg('try_higlight', string(0))\n[...]\nendfunction\n[...]\nfunction ...\n==============================\n\nAfter using the mapping you'll get \n==============================\n   17  function! vl#ui#navigation#jump_to_code_by_regex#Outline(regex, ...)\n   66  function! vl#ui#navigation#jump_to_code_by_regex#JumpToPos()\n   75  function! vl#ui#navigation#jump_to_code_by_regex#AddOutlineMappings(regex)\n==============================\nPressing enter will take you to line 17 / 66 etc..\n\nOf course you can also find definitions this way (use let as regex and you'll get)\n====================\n   19    let ft = &filetype\n   20    let file = expand('%')\n   21    let window = winnr()\n[...]\n=====================\nPressing <c-o> will take you back\n\nI'v put some minor effort into higlighting the regular expression match. Thus you can use \\zs and \\ze to higlight special words.\nHow nice this works depends on the already existing syntax definitions. This can be improved much"}, {:name=>"Dictionary", :summary=>"English Dictionary", :description=>"English Dictionary"}, {:name=>"VimExplorer", :summary=>"VE - the File Manager within Vim!", :description=>" Usage:        :h VimExplorer\nScreen shots: \nhttp://mbbill.googlepages.com/VE1.PNG\nhttp://mbbill.googlepages.com/VE2.PNG\n\nCONTENTS                                        *VimExplorer-contents*\n\n1.  Intro.......................................|VimExplorer-start|\n2.  Functionality...............................|VimExplorer-functionality|\n    2.1  Tree Panel Hotkeys.....................|VimExplorer-treehotkey|\n    2.2  File Panel Hotkeys.....................|VimExplorer-filehotkey|\n    2.3  Commands...............................|VimExplorer-commands|\n3.  Directory Browsing..........................|VimExplorer-browse|\n    3.1  Tree Browsing..........................|VimExplorer-treebrowse|\n    3.2  File Browsing..........................|VimExplorer-filebrowse|\n    3.3  Forward and Backward...................|VimExplorer-forbackward|\n    3.4  Favorites..............................|VimExplorer-favorite|\n    3.5  Temp Marks.............................|VimExplorer-tempmark|\n4.  Marks.......................................|VimExplorer-mark|\n    4.1  Single File Marks......................|VimExplorer-marksingle|\n    4.2  Visual Marks...........................|VimExplorer-markvisual|\n    4.3  Regexp Marks...........................|VimExplorer-markregexp|\n5.  File operations.............................|VimExplorer-fileoperation|\n    5.1  Create.................................|VimExplorer-new|\n    5.2  Move...................................|VimExplorer-move|\n    5.3  Delete.................................|VimExplorer-delete|\n    5.4  Diff...................................|VimExplorer-diff|\n    5.5  Search.................................|VimExplorer-search|\n    5.6  Other Operations.......................|VimExplorer-otherfileopt|\n6.  Other Functionalities.......................|VimExplorer-otherfuncs|\n7.  Customization...............................|VimExplorer-customize|\n    7.1  Normal Options.........................|VimExplorer-custnormal|\n    7.2  Hotkey Customization...................|VimExplorer-custhotkey|\n    7.3  Command Customization..................|VimExplorer-custcommand|\n8.  The Author..................................|VimExplorer-author|\n9.  Problems and Fixes..........................|VimExplorer-problems|\n\n\n==============================================================================\n1.  Intro                                       *VimExplorer-start*\n\nWhat is VimExplorer ？\nVimExplorer is a file manager, it can do a lot of file operations such as\ncopy, delete, move, preview, search and so on. Also it has a variety of other\ncapacities and customization abilities.\n\nYou can start VimExplorer by the following command:\n>\n        :VE\n<\nThen it will ask you for the starting directory, default is the current path.\n>\n        VimExplorer (directory): /home/username/\n<\nYou can change it to some other directories or just push \"Enter\" to start it.\n\nThe second approach to start VimExplorer:\n>\n        :VE [directory]\n<\nExample:\n>\n        :VE /usr/src/\n<\nNow, VimExplorer will start using the path '/usr/src/'. When you are typing\nthe path, <tab> and <ctrl-d> will help you to complete the path automatically.\nAfter all of these operations, you can see a new tab which has two panels\nwithin it, one is the \"Tree Panel\" and the other is \"File Panel\". From now you\nwill have a happy journey using the powerful file manager.\n"}, {:name=>"gvim-pdfsync", :summary=>"Open file in OS X Vim at a specific line. Good for PDFSync inverse searches.", :description=>"For a summary of the newest developments (e.g., PDFSync support in the new MacVim project), see\n\nhttp://phaseportrait.blogspot.com/2007/12/pdfsync-inverse-searches-in-macvim.html\n\nBelow are the comments at the head of the gvim-pdfsync script. \n\n# gvim-pdfsync: Script for opening a file in Vim in OS X and positioning\n#               the cursor at a particular line. If the file is already\n#               open in an existing Vim, the cursor will be repositioned\n#               re-opening the file.\n#\n#               The script is meant to extend the inverse searching\n#               (c.f. PDFSync compatible PDF viewers (e.g., Skim or\n#               TeXniscope) or DVI viewers that pay attention to \n#               source specials (e.g., TeXniscope)) to MacVim.\n#\n# Author: Ted Pavlic\n#         ted@tedpavlic.com\n#         http://www.tedpavlic.com/\n#\n# Usage: gvim-pdfsync \"%file\" [%line]\n#\n#        where %file is a file name and %line is a line number.\n#\n# History and acknowledgments: \n#\n#    The genesis of this script is this comment:\n#\n#    http://www.macosxhints.com/comment.php?mode=view&cid=88674\n#\n#    to this thread:\n#\n#    http://www.macosxhints.com/article.php?story=20070111095701823\n#\n#    Most of the important AppleScript is by Yonatan Amit, the original\n#    author of that thread.\n#\n# For more information (and history):\n#\n# http://phaseportrait.blogspot.com/2007/07/pdfsync-inverse-searches-on-vim-for-os.html\n#"}, {:name=>"systemverilog.vim--Kher", :summary=>"Syntax for SystemVerilog", :description=>"IEEE 1800 SystemVerilog is the industry's first unified hardware description and verification language (HDVL) standard. SystemVerilog is a major extension of the established IEEE 1364 Verilog language.\nThe latest version of this package can always be found at http://kher.org/blog/technical_stuff/vim_syntax_for_systemverilog.html\ncheers!"}, {:name=>"Vimpress", :summary=>"Manage wordpress blog posts from Vim", :description=>"Vimpress is a nifty plugin for Vim which allows you to publish and edit posts on your wordpress blog.\n\nFeatures\n    * Get a list of all articles\n    * Write a new article\n    * Edit a current article\n    * Save (yeah, no kidding)\n    * Supports categories\n    * Supports tags1\n\nCommands\n    * \u0093:BlogList\u0094\n      Lists all articles in the blog\n    * \u0093:BlogNew\u0094\n      Opens page to write new article\n    * \u0093:BlogOpen id\u0094\n      Opens the article for edition\n    * \u0093:BlogSend\u0094\n      Saves the article to the blog\n\nProjects page : http://www.friggeri.net/projets/vimpress/"}, {:name=>"yavdb", :summary=>"Yet Another (Generic) Vim Debugger Integration", :description=>"This is a generic Vim <->Debugger Interface Tool designed to be adaptable to any debugger application.  Currently supported debuggers include jdb and gdb.\n\nScript Requirements:\n-VIM compiled with Signs, Client-Server, and Python support.\n-Python 2.5\n-An operating system with support for named pipes\n\nUsing YAVDB:\n\n  yavdb [-s servername] [-t type] <debugger command line>\n\n-s specifies the Vim servername.  If no VIM (or GVIM) window exists with this servername, a new GVIM window will be opened.  If not specified, the servername 'VimDebugger' will be used.  If multiple applications are being debugged simultaneously unique servernames must be used.\n\n-t can be used to override the debugger type.  If this option is omitted the debugger name will be used as the type.  Currently supported debugger types include 'gdb' and 'jdb'.  Note that jdb will only correctly notify VIM of events when classnames are identical to filenames (other than the .java extension).\n\nVIM will have the following key mappings set:\n\n<C-F5> Run Application\n<F5> Continue Execution\n<F7> Step Into a Function\n<F8> Next Instruction\n<F9> Set Breakpoint\n<F10> Print variable value under cursor\n"}, {:name=>"doxygen-support.vim", :summary=>"Generate Doxygen comments from user defined templates", :description=>"This plugin generates Ex commands and a menu (or a menu tree) from a template\nfile containing user defined comment templates to be used for source code\ndocumentation with Doxygen. The template file can have user defined macros.\n\nExample and screen shots :   http://lug.fh-swf.de/vim/vim-doxygen/index.html\n\nThe help file online :   http://lug.fh-swf.de/vim/vim-doc/doxygensupport.html\n\nDocumentation\n--------------------------------------------------------\nThis plugin comes with a help file (doxygensupport.txt). Read it with  \n\n  :h doxygensupport\n\n\nMAILING LIST\n--------------------------------------------------------\nYou can subscribe to the vim-plugins-list mailing list to post your questions or\nsuggestions for improvement or to report bugs.  The list will also be used to\nannounce new releases ( c.vim / bash-support / perl-support / doxgen-support ).\nVisit the following page for subscribing to the mailing list:\n     \n  http://lug.fh-swf.de/cgi-bin/mailman/listinfo/vim-plugins-list\n\nThe vim-plugins-list list is very low on traffic.\n\n_______________________\nThank you for rating doxygen-support !\n \n"}, {:name=>"smart_cr", :summary=>"Inserting snippets in new line", :description=>"Deprecated, use vimscript#1957\n\nExample\n-------\nPerhaps you editing C file:\n  #include <stdlib.h*>\n(* - cursor position)\nIf you hit Enter, new include directive will be inserted:\n  #include <stdlib.h>\n  #include <*>\n\nConfiguration\n-------------\nYou must create new hash g:smart_cr\n  let g:smart_cr = {}\nHash must contain arrays for different filetypes:\n  let g:smart_cr.c = [['^#include <', '^>$', \"#include \\<@@@>\"],\n                     \\['^#include \"', '^\"$', \"#include \\\"@@@\\\"\"]]\nWhen you hit Enter, line is divided on two parts - before and above\nthe cursor. First two strings are regular expressions for left and\nright parts of line. If they matched, third string will be inserted in\nnew line.\n\"@@@\" is marker where to place cursor. You may redefine it by setting\nglobal variable:\n  let g:smart_cr_marker = '<here>'\n\nAnother example\n---------------\nThis for Embedded ruby:\n  let g:smart_cr.eruby = [['<%[^=]', '^\\s*%>',  \"<% @@@ %>\"],\n                         \\['<%[^=]', '^\\s*-%>', \"<% @@@ -%>\"],\n                         \\['<%=',    '^\\s*%>',  \"<%= @@@ %>\"],\n                         \\['<%=',    '^\\s*-%>', \"<%= @@@ -%>\"]]"}, {:name=>"yasnippets", :summary=>"Yet another plugin for snippets and file skeletons", :description=>"With this plugin you may insert text snippets.  These is used for frequently\ntyped text, such as statements in programs, copyrights, timestamps and other.\nThis plugin supports several types of snippets: keyword snippets,\nnewline snippets, file skeletons, To work with this plugin you need support\nfor ruby ('+ruby' compile option and ruby language itself), ERb (embedded ruby\nlibrary for ruby), and imaps.vim plugin (vimscript#244).\n\nMain advantages of this plugin are convenience and flexible way to define\nsnippets, \"newline\" snippets, and file skeletons with embedded ruby.\n"}, {:name=>"SmartX", :summary=>"Smart deletion of \\X escapes with the x/X/Backspace/Delete keys", :description=>"This script will autmatically delete \\X escapes when the cursor is on the \\ and you press X in normal mode or after the X and you press backspace in insert mode.  X and the delete key in normal mode and the delete key in insert mode also work.\n"}, {:name=>"CharSort", :summary=>"Functions and mappings to sort the characters in a string", :description=>"Mappings:\n <lead>so  --  sort, case sensitive\n <lead>si  --  sort, case insensitive\n\nThese mappings work in visual and normal mode--in normal mode they take a motion operator.  See \":help mapleader\"\n\nFunction:\n CharSort#Sort({string} [, {i/c}]) -- Sort {string}\n    {i/c} == c  -- match case (default)\n    {i/c} == i  -- ignore case"}, {:name=>"cimpl", :summary=>"Generates implimentations for C/C++ function prototypes", :description=>"This script generates empty implementations for C/C++ functions from specified header file. For following header file\n\n#ifndef TEST_H\n#define TEST_H\nclass Test\n{\n    public:\n        explicit Test(int val = 0);\n        int getVal() const\n        {\n            return m_val;\n        }\n        void setVal(int val);\n\n        friend const Test operator +(const Test& a, const Test& b);\n\n    private:\n         int m_val;\n};\n\nconst Test operator + ( const Test &a, const Test & b );\n#endif\n\noutput will be\n\nTest::Test(int val)\n{\n    \n}\n\nvoid Test::setVal(int val)\n{\n    \n}\n\nconst Test operator +(const Test& a, const Test& b)\n{\n    \n}\n"}, {:name=>"Tabmerge", :summary=>"Merge a tab's windows with the current tab", :description=>"Usage:\n :Tabmerge [tab number] [top|bottom|left|right]\n\nThe tab number can be \"$\" for the last tab.  If the tab number isn't specified the tab to the right of the current tab is merged.  If there is no right tab, the left tab is merged.\n\nThe location specifies where in the current tab to merge the windows. Defaults to \"top\".\n"}, {:name=>"Simple256", :summary=>"Simple color scheme for using with light background", :description=>"This is a simple color scheme for using with light background and 256/88 colors terminal.\nScreenshot:  http://img249.imageshack.us/img249/5235/screenshotvimrcvimtq1.png ."}, {:name=>"vimscript-coding-aids", :summary=>"some coding aids for writing vim scripts", :description=>"See http://github.com/MarcWeber/theonevimlib.\nStart by reading core/docs/tovl.vim\n\nThere is a plugin called\nplugins#filetype#vim#vl_repo#PluginVL_RepoStuff\n\nEnjoy, join and contribute!"}, {:name=>"tie.vim", :summary=>"Vim syntax file for Tensilica Xtensa TIE extension language", :description=>"This is syntax highlighting file for TIE language that is used by Tensilica for xtensa processor tie extensions. For more information on xtensa and tensilica processors: see http://www.tensilica.com.\n"}, {:name=>"lodgeit.vim", :summary=>"pastes code to paste.pocoo.org", :description=>"Just do :Lodgeit to paste the file or selection."}, {:name=>"Ruby-Snippets", :summary=>"Some abbreviations to use with Ruby", :description=>"This script have some abbreviations to use in insert mode while writing Ruby code. The goal is to speed up (more!) code writing.\nThere are \"triggers\" when typing def, for, begin, inject, class, module, collect, detect, each, find, find_all, map, reject, select, attr_reader, attr_writer, attr_accessor. For example, when typing \"class\" you get\n\nclass ClassName\nend\n\nand the cursor is positioned on \"ClassName\", where you can use cw to replace it to the name you want on the class.\n\nThere's a little video on http://eustaquiorangel.com/blog/show/438 about the script. Non-portuguese readers, please just click on play.\n"}, {:name=>"gvim-extensions-for-TALpTAL", :summary=>"Support for TAL/pTAL source files with syntax highlighting and tags", :description=>"These tools provides support in gvim for TAL/pTAL source files with syntax highlighting and tags. HP NonStop (NSK) users who need to edit TAL/pTAL source files can use all features of gvim with the help of these tools. This is intended for use by developers when the source files have been copied to Windows. Reading and writing of files residing on NSK are not supported.\n\nSyntax highlighting is provided for TAL/pTAL source files, which helps in simplifying complicated code. A tool is provided for building tags for TAL/pTAL source files similar to the tags built by ctags for C code. This helps in easy navigation of multiple source files and jumping directly to procedure definitions.\n"}, {:name=>"indenthaskell.vim", :summary=>"Haskell indent file", :description=>"Indentation script for Haskell.\n\nModify g:haskell_indent_if and g:haskell_indent_case to\nchange indentation for `if'(default 3) and `case'(default 5).\nExample (in .vimrc):\n> let g:haskell_indent_if = 2\n"}, {:name=>"Highlight-and-Mark-Lines", :summary=>"Highlights and Marks lines (up to 3) and allows moving between them.", :description=>"Inspired from other scripters. Thanks.\n\nThis utility was created because of needs as others. My job requires log\nmining. Sometimes I need to highlight specific lines and moving between \nthem for comparison. Most of my colleagues use UltraEdit which has this\ncapability which made me to find a way to add this capability to Vim.\n\nWhat does this utility do?\nIt highlights and marks the line under cursor. Then you'll be able to move\nbetween these marks easily. Unfortunately it is just limited to 3 marks because of my lack of coding knowledge.\n\nStep 1 - Just highlight and mark the line with CTRL+F2, CTRL+F3 or CTRL+F4. \nStep 2 - Then use F2, F3 and F4 to move between these marks. \nStep 3 - Use SHIFT+CTRL+F2, SHIFT+CTRL+F3 and SHIFT+CTRL+F4 to reset the related mark and highlight.\nStep 4 - use cm in normal mode to reset all highlights and marks\n\nIt is that simple."}, {:name=>"deb.vim", :summary=>"browse debian package", :description=>"Allows you to browse debian package in the same way you can browse .tar and .zip files.\nWith this script, after opening a debian package with vim, you get a list of files included in the archive. You can then open those files."}, {:name=>"trivial256", :summary=>"trivial color scheme for terminals", :description=>"Trivial color scheme: light background, no-gui terminals."}, {:name=>"Parameter-Helpers", :summary=>"[Programming] Useful functions for handling parameters in function calls", :description=>"This \"script\" is my initial attempt to ease a typical task that used to frustrate me: changing and moving around parameters in a typical function call.\n\nThe code is written for C/C++ programmers (as well as language that inherit that syntax): change aap( \"noot\", &mies ) to aap( &mies, \"noot\" ) in a single keystroke if you want.\n\nI'm providing this code in the hope it will help some people out. It's not a plug-in. The code works nicely though.\n\nNote that the current code does NOT handle multi-line parameter lists. This is on the TODO list.\n\nFunctions:\nSavePositions and RestorePosiions: save and restore visual and cursor position respectively. Can be called multiple times. Uses script-global variables.\nInsideQuotedString: tries to determine if the cursor is inside a quoted string in a very imprecise way. Only useful to call if something strange is happening (like operator [( not working).\nParamRangeList: the brain stem. Constructs a list of virtual column offsets for the current parameter context.\nCurrentPosition: determine the offset in the list returned by ParamRangeList based on the current cursor position.\nShiftCurrentParam: function to substitute a parameter with another based on a delta in the offset of the list ParamRangeList returned. (e.g. -1 substitutes the CurrentPosition parameter with the one to the left).\n\nExample usage (assuming g:mapleader set):\nexec \"nmap \" .g:mapleader.\"p :call VisualizeParameter(0)<CR>\"\n\" if this is false shifting a parameter at offset 0 to left is an error, trivially analogous case for right shift\n\" if it's true a shift wraps around list boundaries\nlet g:param_shift_round_robin = 1\nexec \"nmap \" .g:mapleader.\"< :call ShiftCurrentParam(-1)<CR>\"\nexec \"nmap \" .g:mapleader.\"> :call ShiftCurrentParam(1)<CR>\"\n\nEverything seems to be sort of robust, I've done some tests, but no guarantees. Typical BSD license conditions apply.\n\nN."}, {:name=>"JET_toggle", :summary=>"Dynamically add sets of commands to toggle between with a hotkey", :description=>"<!-- === START_DOC\n*JET_toggle.txt*           Plugin to dynamically add toggles #version#\n\n\n                         JET_TOGGLE REFERENCE MANUAL~\n\n\n\n\n\n==============================================================================\nCONTENTS {{{2                                        *JET_togglelist-contents* \n\n    1. Intro ................................... |JET_toggle|\n    2. How to add a toggle ..................... |JET_toggle-howto|\n    3. Feedback ................................ |JET_toggle-feedback|\n\n==============================================================================\n1. Intro {{{2                                                     *JET_toggle*\n\n    JET_toggle provides a mechanism for adding toggle commands and mapping\n  them to a shortcut.\n\n==============================================================================\n2. How to add a toggle {{{2                                 *JET_toggle-howto*\n\n  Source the script from your .vimrc, and then add whatever toggles you want.\n  \n\n  Syntax:\n  \n    JET_AddToggle(':someCommandString', ':someOtherCommandString', '<keymap>')\n  \n  \n  Example:\n  \n    source ~/.vim/plugin/JET_toggle.vim\n    JET_AddToggle(':set list', ':set nolist', '<C-l>')\n    JET_AddToggle(':set paste', ':set nopaste', '<M-p>')\n  \n\n    Then, when you type control-l it will toggle between ':set list' and\n  ':set nolist' and when you type alt-p it will toggle between ':set paste'\n  and ':set nopaste'.\n  \n==============================================================================\n3. Feedback {{{2                                         *JET_toggle-feedback*\n\n  Constructive feedback is welcome, send it to outtatime.at-symbol.gmail.com\n  with [JET_toggle] in the subject line.  Enjoy!\n-->"}, {:name=>"pyconsole_vim.vim", :summary=>"PyConsole - embedded console session in windows Vim", :description=>"This plugin allows for the execution of windows based command line commands such as \"dir\", \"findstr\" or \"ping\" directly within a vim buffer.\n\nStart up an embedded console from within vim by:\n        :call PyConsole()\n    or the windows command line by:\n        gvim \"+call PyConsole()\"\n\nSee http://pyconsole.googlecode.com/ for a flash demo.\n\nRequirements:\n- Vim 7.0 or above: http://www.vim.org/download.php#pc\n- Python 2.4 or above: http://www.python.org/download/windows/\n- Python for Windows extensions: http://sourceforge.net/projects/pywin32/\n- Python ctypes module (not necessary for Python 2.5 and above): http://sourceforge.net/projects/ctypes/\n\nBased on the Python PyConsole project.\n"}, {:name=>"lettuce.vim", :summary=>"highly detalized dark scheme for gui and 256 color terminal", :description=>"Detalized and nice-looking color scheme with dark background.\nCan be used in gui and 256 color terminal.\nHighlights statusline in insert mode.\nImproved highlighting for c, cpp, ruby and javascript languages.\n\nAlso following option is recommended (put it to your .vimrc):\nset fillchars=vert:\\ ,fold:\\ \" <- trailing space"}, {:name=>"rcscript", :summary=>"RcScript syntax file", :description=>"RcScript is a scripting language developed by RainCode. For more information see http://www.raincode.com."}, {:name=>"rcscript-indent", :summary=>"RcScript indent file", :description=>"RcScript is a scripting language developed by RainCode. For more information see http://www.raincode.com."}, {:name=>"Easy-alignment-to-column", :summary=>"Quickly align a word to a predefined column", :description=>"This script was made to ease typing programming code like:\n\n    int                        someVariable;\n    double                     foo;\n    std::vector< std::string > andSomeLongerName;\n\n(If this doesn't look nicely aligned it's because you're not viewing it using a fixed-width font.)\n\nThe attached script allows you to quickly align the variable names on the same (virtual) column. It defines two mappings for this:\n\n  ,a : Align the current cursor to the predefined column.\n  ,A : Try to find the alignment column automatically on the previous line.\n\n(Replace , with your g:mapleader.)\n\nThe first mapping actually does want we want to achieve, but the latter makes it really easy to use. It looks for the separating gap, which is \\s\\s (two consecutive white-space characters), and a single tab (following by anything) as a plan B. This may not always work of course. To specify the column, I hijack one of your mark (c in this case), which you can always set manually. If you don't want mark c to be sacrificed to the script, it's very easy to adapt it and make it use another (by editing the key mappings in the file).\n\nThe variable g:align_uses_tabs can be reset if you want the script to only insert spaces. Else, it inserts as many tabs as possible, than \"fine-tunes\" using spaces.\n"}, {:name=>"Sass", :summary=>"Sass syntax highlight", :description=>"This is the syntax highlighting mode for Sass (http://haml.hamptoncatlin.com/) -- Syntactically Awesome StyleSheets\n\nScreenshot: http://www.flickr.com/photos/dmitryilyashevich/1006425093/"}, {:name=>"vimremote.sh", :summary=>"script to use gvim from IDE", :description=>"I wanted to use vim from the Xilinx ide, and I like the following actions to occur from the IDE\n\n\n1) open every file in a split window in one gvim session\n2) when opening the same file again from the IDE, don't cause a new split window if there is already one\n3) use the line numbers provided by the ide.\n\nIn Xilinx you would define the external editor call \n\n/path/to/vimremote.sh XILINX $1 $2\n\nThe XILINX is just a name so that one particular gvim session is used for it, and not any others you might have hanging around\n\nYou need a decent shell. Don't know how that works in Windows. This script could be useful in many other ide's that allow calls to external editors"}, {:name=>"halfmove", :summary=>"Move the cursor half way up or down the screen", :description=>"Vim script to move the cursor half way down/up the screen. This can be\nthought of as a binary search for a line that is visible in the window by\neither moving up or down.\n\nCreated:\t2007 Aug 05\nLast Change:\t2007 Aug 05\nAuthor:\tAndy Spencer <andy753421 at gmail dot com>\nThanks To:\t#vim@irc.freenode.net\n\nUsage:\n  Press <C-K> to jump half way to the top of the screen\n  Press <C-J> to jump half way to the bottom of the screen\n  Pressing <C-[KJ]> several times in a row will jump halfway to the\n  top/bottom or half way to a previous jump location.\n  Example: To jump 3/8 of the way to the bottom of the screen press\n    <C-J><C-K><C-J>\n  \nCustomization:\n  map <silent> <YOUR-DOWN-KEY> :call HM_Move(\"down\")<CR>\n  map <silent> <YOUR-UP-KEY>   :call HM_Move(\"up\")<CR>\n\nProblems:\n  <C-J> and <C-K> will not be mapped over existing mappings. If other\n  scripts map <C-J> or <C-K> then you will need to manually override those."}, {:name=>"vimff", :summary=>"Connection between common-lisp and vim.", :description=>"Connection between common-lisp and vim.\nby pressing 'e' will send form to common-lisp.\nCurrently tested on on sbcl.\n\nfor more info and latest code: http://www.valkama.se/software/vimff/\n"}, {:name=>"GtagsClient", :summary=>"A client for Google Gtags", :description=>"Google Gtags is an extension to GNU Emacs and X-Emacs TAGS functionality, with a server-side component that narrows down the view of a potentially large TAGS file and serves the narrowed view over the wire for better performance. Google Gtags could be downloaded from http://code.google.com/p/google-gtags/ .\n\nThis plugin is a Vim client to Googe Gtags. With this plugin, you could easily set up many projects in your workstation, and use different Gtags servers in different projects automatically. The only thing you should do is putting a text file named \".gtags\" in the project root directory, write the servers' information in this file, one line per server. The description format is:\n\nlanguage,type,hostname,port\n\nFor example:\n\nc++,definition,my.server.org,8928\nc++,callgraph,my.server.org,8929\npython,definition,my.server.org,8930\npython,callgraph,my.server.org,8931\n\nThen when you open any files under this directory (including all sub directories), your Vim will use these servers for tags looking up.\n\nThe server auto-selection doesn't work with \"mixer\" feature.  So if you want to use the server auto-selection feature, you should disable the mixer feature by typing \":let g:google_tags_use_mixer=0\", or put the following lines in your .vimrc.\n\n\" Gtags\nlet g:google_tags_use_mixer=0"}, {:name=>"FuzzyFinder", :summary=>"buffer/file/command/tag/etc explorer with fuzzy matching", :description=>"Repository:\n  https://bitbucket.org/ns9tks/vim-fuzzyfinder/\n\nIssues:\n  http://bitbucket.org/ns9tks/vim-fuzzyfinder/issues/\n\nDownload latest(development) version\n  https://bitbucket.org/ns9tks/vim-fuzzyfinder/get/tip.zip\n\nSceenshot:\n  Buffer mode:\n    http://cdn.bitbucket.org/ns9tks/vim-fuzzyfinder/downloads/fuzzyfinder-buffer.png\n  File mode (searching from all files in vim runtime directories using abbreviation/multiple-search)\n    http://cdn.bitbucket.org/ns9tks/vim-fuzzyfinder/downloads/fuzzyfinder-file-abbrev.png\n\n\n==============================================================================\nINTRODUCTION                                                *fuf-introduction*\n\nFuzzyFinder provides convenient ways to quickly reach the\nbuffer/file/command/bookmark/tag you want. FuzzyFinder searches with the\nfuzzy/partial pattern to which it converted an entered pattern.\n\n        Entered pattern  Fuzzy pattern   Partial pattern ~\n>\n        abc              *a*b*c*         *abc*\n        dir/file         dir/*f*i*l*e*   dir/*file*\n        d*r/file         d*r/*f*i*l*e*   d*r/*file*\n        ../**/s          ../**/*s*       ../**/*s*\n                         (** allows searching a directory tree.)\n<\nYou will be happy when:\n\n        \"./AhLongLongLongLongLongFile.txt\"\n        \"./AhLongLongLongLongLongName.txt\"\n        \"./OhLongLongLongLongLongFile.txt\"\n        \"./OhLongLongLongLongLongName.txt\" <- you want :O\n\nType \"ON\" and \"OhLongLongLongLongLongName.txt\" will be selected. :D\n\nFuzzyFinder can search:\n\n        - buffers\n        - files\n        - directories\n        - most recently used files\n        - files around most recently used files\n        - most recently used command-lines\n        - bookmarked files\n        - bookmarked directories\n        - tags\n        - files which are included in current tagfiles\n        - jump list\n        - change list\n        - buffer lines\n        - quickfix\n        - help\n\nFuzzyFinder also provides APIs to use its system of searching files or\nselecting items.\n\nFuzzyFinder supports multibyte characters.\n\n\n==============================================================================\nINSTALLATION                                                *fuf-installation*\n\nPut all files into your runtime directory. If you have the zip file, extract\nit to your runtime directory.\n\nYou should place the files as follows:\n>\n        <your runtime directory>/plugin/fuf.vim\n        <your runtime directory>/doc/fuf.txt\n        ...\n<\nIf you are disgusted to make your runtime directory confused with a lot of\nplugins, put each of the plugins into a directory individually and just add\nthe directory path to 'runtimepath'. It's easy to uninstall plugins.\n\nThen update your help tags files to enable help for this plugin. See\n|add-local-help| for details.\n\nRequirements: ~\n\n- L9 library (vimscript #3252)\n\n\n==============================================================================\nUSAGE                                                              *fuf-usage*\n\nYou can launch FuzzyFinder by the following commands:\n\n         Command           Mode ~\n        |:FufBuffer|       - Buffer mode (|fuf-buffer-mode|)\n        |:FufFile|         - File mode (|fuf-file-mode|)\n        |:FufCoverageFile| - Coverage-File mode (|fuf-coveragefile-mode|)\n        |:FufDir|          - Directory mode (|fuf-dir-mode|)\n        |:FufMruFile|      - MRU-File mode (|fuf-mrufile-mode|)\n        |:FufMruCmd|       - MRU-Command mode (|fuf-mrucmd-mode|)\n        |:FufBookmarkFile| - Bookmark-File mode (|fuf-bookmarkfile-mode|)\n        |:FufBookmarkDir|  - Bookmark-Dir mode (|fuf-bookmarkdir-mode|)\n        |:FufTag|          - Tag mode (|fuf-tag-mode|)\n        |:FufBufferTag|    - Buffer-Tag mode (|fuf-buffertag-mode|)\n        |:FufTaggedFile|   - Tagged-File mode (|fuf-taggedfile-mode|)\n        |:FufJumpList|     - Jump-List mode (|fuf-jumplist-mode|)\n        |:FufChangeList|   - Change-List mode (|fuf-changelist-mode|)\n        |:FufQuickfix|     - Quickfix mode (|fuf-quickfix-mode|)\n        |:FufLine|         - Line mode (|fuf-line-mode|)\n        |:FufHelp|         - Help mode (|fuf-help-mode|)\n\nIt is recommended to map these commands.\n\nThese commands open 1-line buffer to enter search pattern and start insert\nmode.\n\nFuzzyFinder searchs for matching items with an entered pattern and shows them\nin a completion menu. For more details on pattern matching, see\n|fuf-search-patterns|.\n\nIf there are a lot of matching items, FuzzyFinder limits the number of\nenumerating items (|g:fuf_enumeratingLimit|) to speed up a response time, and\nhighlights the pattern with \"Error\" group.\n\nThe first item in the completion menu will be selected automatically.\n\nTyping <C-w> deletes one block of an entered pattern before the cursor, like a\ndirectory name.\n\nwith <C-s> (|g:fuf_keyPrevPattern|) and <C-^> (|g:fuf_keyNextPattern|), You\ncan recall patterns which have been entered before from history.\n\nYou can open a selected item in various ways:\n\n        <CR>  (|g:fuf_keyOpen|)        - opens in a previous window.\n        <C-j> (|g:fuf_keyOpenSplit|)   - opens in a split window.\n        <C-k> (|g:fuf_keyOpenVsplit|)  - opens in a vertical-split window.\n        <C-l> (|g:fuf_keyOpenTabpage|) - opens in a new tab page.\n\nTo cancel and return to previous window, just leave Insert mode.\n\nWith <C-\\><C-\\> (|g:fuf_keySwitchMatching|), You can switch search method\nbetween fuzzy matching and partial matching.\n\nWith <C-t> (|g:fuf_keyNextMode|) and <C-y> (|g:fuf_keyPrevMode|), You can\nswitch current mode without leaving Insert mode .\n\nYou can preview selected item with <C-@> (|g:fuf_keyPreview|) in some modes.\nRepeating the key on the same item shows another information. The height\nof command-line area is changed to |g:fuf_previewHeight| when you launch a\nmode supporting preview. This feature is available when |g:fuf_previewHeight|\nis not 0.\n\n\n==============================================================================\nMODES                                                              *fuf-modes*\n\n                                                             *fuf-buffer-mode*\nBuffer mode ~\n\nThis mode provides an interface to select a buffer from a list of existing\nbuffers and open it.\n\nPress <C-]> (|g:fuf_buffer_keyDelete|) in this mode and selected buffer will\nbe deleted.\n\n                                                               *fuf-file-mode*\nFile mode ~\n\nThis mode provides an interface to search a file tree for a file and open it.\n\n                                                       *fuf-coveragefile-mode*\nCoverage-File mode ~\n\nThis mode provides an interface to select a file from all files of a preset\ncoverage and open it.\n\nBy default, This mode lists all files under the current working directory\nrecursively. (|g:fuf_coveragefile_globPatterns|)\n\nIf you want to search other coverage, execute |FufCoverageFileRegister|\ncommand to register new search coverage and |FufCoverageFileChange| command to\nchoose a search coverage and launch Coverage-File mode.\n\nIn addition, there is another way to change a search coverage with\n|fuf#setOneTimeVariables()| function.\n\nExample: search only .h and .c files:\n>\n        call fuf#setOneTimeVariables(['g:fuf_coveragefile_globPatterns', ['**/*.h', '**/*.c']])\n              \\ | FufCoverageFile\n<\nExample: search your home directory in addition to the default coverage:\n>\n        call fuf#setOneTimeVariables(['g:fuf_coveragefile_globPatterns', g:fuf_coveragefile_globPatterns + ['~/**/.*', '~/**/*']])\n              \\ | FufCoverageFile\n<\n\n                                                                *fuf-dir-mode*\nDirectory mode ~\n\nThis mode provides an interface to search a file tree for a directory and\nchange the current directory.\n\n                                                            *fuf-mrufile-mode*\nMRU-File mode ~\n\nThis mode provides an interface to select a file from the most recently used\nfiles and open it.\n\nPress <C-]> (|g:fuf_mrufile_keyExpand|) in this mode and files around the most\nrecently used files are listed. Each time the key is pressed, the search range\nare expanded one level along the directory tree upwardly/downwardly.\n\nThis mode is set to disable by default (|g:fuf_modesDisable|) because\nprocesses for this mode in |BufEnter| and |BufWritePost| could cause\nPerformance issue.\n\nSee also: |FufMruFileInCwd|\n\n                                                             *fuf-mrucmd-mode*\nMRU-Command mode ~\n\nThis mode provides an interface to select a command from the most recently\nused commands and execute it.\n\nThis mode is set to disable by default (|g:fuf_modesDisable|) because mapping\n<CR> of Command-line mode required by this mode has side effects.\n\n                                                       *fuf-bookmarkfile-mode*\nBookmark-File mode ~\n\nThis mode provides an interface to select one of the bookmarks you have added\nbeforehand and jump there.\n\nYou can add a cursor line to bookmarks by |:FufBookmarkFileAdd| command.\nExecute that command and you will be prompted to enter a bookmark name.\n\nFuzzyFinder adjusts a line number for jump. If a line of bookmarked position\ndoes not match to a pattern when the bookmark was added, FuzzyFinder searches\na matching line around bookmarked position. So you can jump to a bookmarked\nline even if the line is out of bookmarked position. If you want to jump to\nbookmarked line number without the adjustment, set\n|g:fuf_bookmarkfile_searchRange| option to 0.\n\nPress <C-]> (|g:fuf_bookmarkfile_keyDelete|) in this mode and selected\nbookmark will be deleted.\n\n                                                        *fuf-bookmarkdir-mode*\nBookmark-Dir mode ~\n\nThis mode provides an interface to select one of the bookmarks you have added\nbeforehand and change the current directory.\n\nYou can add a directory to bookmarks by |:FufBookmarkDirAdd| command. Execute\nthat command and you will be prompted to enter a directory path and  a\nbookmark name.\n\nPress <C-]> (|g:fuf_bookmarkdir_keyDelete|) in this mode and selected bookmark\nwill be deleted.\n\n                                                                *fuf-tag-mode*\nTag mode ~\n\nThis mode provides an interface to select a tag and jump to the definition of\nit.\n\nFollowing mapping is a replacement for <C-]>:\n>\n        noremap <silent> <C-]> :FufTagWithCursorWord!<CR>\n<\n\n                                                          *fuf-buffertag-mode*\nBuffer-Tag mode ~\n\nThis mode provides an interface to select a tag of current buffer or all\nbuffers and jump to the definition of it.\n\nTag list is instantly created when FuzzyFinder is launched, so there is no\nneed to make tags file in advance.\n\n|FufBufferTag| covers current buffer and |FufBufferTagAll| covers all buffers.\n\nFollowing mapping is a replacement for <C-]>:\n>\n        nnoremap <silent> <C-]> :FufBufferTagWithCursorWord!<CR>\n        vnoremap <silent> <C-]> :FufBufferTagAllWithSelectedText!<CR>\n<\nor\n>\n        nnoremap <silent> <C-]> :FufBufferTagAllWithCursorWord!<CR>\n        vnoremap <silent> <C-]> :FufBufferTagAllWithSelectedText!<CR>\n<\nThis mode is inspired by taglist.vim (vimscript #273) and refered its codes.\n\n                                                         *fuf-taggedfile-mode*\nTagged-File mode ~\n\nThis mode provides an interface to select one of the files which are included\nin current tagfiles and open it.\n\n                                                           *fuf-jumplist-mode*\nJump-List mode ~\n\nThis mode provides an interface to select one from the |jumplist| of the\ncurrent window and jump there.\n\n                                                         *fuf-changelist-mode*\nChange-List mode ~\n\nThis mode provides an interface to select one from the |changelist| of the\ncurrent buffer and jump there.\n\n                                                           *fuf-quickfix-mode*\nQuickfix mode ~\n\nThis mode provides an interface to select one from the |quickfix| list and\njump there.\n\n                                                               *fuf-line-mode*\nLine mode ~\n\nThis mode provides an interface to select a line from current buffer and jump\nthere.\n\n                                                               *fuf-help-mode*\nHelp mode ~\n\nThis mode provides an interface to select a help tag and jump to the help\npage.\n\n                                                          *fuf-givenfile-mode*\nGiven-File mode ~\n\nThis mode provides an API to open a selected file from a given list.\n\nAPI function:\n>\n        function fuf#givenfile#launch(\n              \\ initialPattern, partialMatching, prompt, items)\n<\n        initialPattern  - String which is inserted after launching\n                          FuzzyFinder.\n        partialMatching - If non-zero, enable partial matching instead of\n                          fuzzy matching.\n        prompt          - Prompt string\n        items           - List of items.\n\nExample of use:\n>\n        \" Open one of your dotfiles.\n        call fuf#givenfile#launch('', 0, '>', split(glob('~/.*'), \"\\n\"))\n<\n\n                                                           *fuf-givendir-mode*\nGiven-Directory mode ~\n\nThis mode provides an API to change current working directory to a selected\none from a given list.\n\nAPI function:\n>\n        function fuf#givendir#launch(\n              \\ initialPattern, partialMatching, prompt, items)\n<\n        initialPattern  - String which is inserted after launching\n                          FuzzyFinder.\n        partialMatching - If non-zero, enable partial matching instead of\n                          fuzzy matching.\n        prompt          - Prompt string\n        items           - List of items.\n\n\nExample of use:\n>\n        \" Change current working directory to one of your runtime directory.\n        call fuf#givendir#launch('', 0, '>', split(&runtimepath, ','))\n<\n\n                                                           *fuf-givencmd-mode*\nGiven-Command mode ~\n\nThis mode provides an API to execute a selected command from a given list.\n\nA selected command is executed by |feedkeys()|, so it is able to emulate a\nseries of key input in Normal mode.\n\nAPI function:\n>\n        function fuf#givencmd#launch(\n              \\ initialPattern, partialMatching, prompt, items)\n<\n        initialPattern  - String which is inserted after launching\n                          FuzzyFinder.\n        partialMatching - If non-zero, enable partial matching instead of\n                          fuzzy matching.\n        prompt          - Prompt string\n        items           - List of items.\n\n\nExample of use:\n>\n        function GetAllCommands()\n          redir => commands\n          silent command\n          redir END\n          return map((split(commands, \"\\n\")[3:]),\n              \\      '\":\" . matchstr(v:val, ''^....\\zs\\S*'')')\n        endfunction\n\n        \" execute one of the user-defined commands \n        call fuf#givencmd#launch('', 0, '>', GetAllCommands())\n\n<\n\n                                                       *fuf-callbackfile-mode*\nCallback-File mode ~\n\nThis mode provides an API to find and get a file path which is selected by an\nuser.\n\nAPI function:\n>\n        function fuf#callbackfile#launch(\n              \\ initialPattern, partialMatching, prompt, exclude, listener)\n<\n        initialPattern  - String which is inserted after launching\n                          FuzzyFinder.\n        partialMatching - If non-zero, enable partial matching instead of\n                          fuzzy matching.\n        prompt          - Prompt string.\n        exclude         - Regexp pattern for items which you want to exclude\n                          from completion list.\n        listener        - |Dictionary| which has 'onComplete' and 'onAbort'.\n                          They are called at the end of FuzzyFinder.\n                          listener.onComplete(item, method) is called with 2\n                          arguments which are a name of selected item and a\n                          number of open method when completed.\n                          listener.onAbort() is called when aborted.\n\nExample of use:\n>\n        let listener = {}\n\n        function listener.onComplete(item, method)\n          echo \"Item: \" . a:item . \"\\nMethod: \" . a:method\n        endfunction\n\n        function listener.onAbort()\n          echo \"Abort\"\n        endfunction\n\n        \" Find a file from current working directory.\n        call fuf#callbackfile#launch('', 0, '>', '', listener)\n\n        \" Find a file from home directory.\n        call fuf#callbackfile#launch('~/', 0, '>', '', listener)\n<\n\n                                                       *fuf-callbackitem-mode*\nCallback-Item mode ~\n\nThis mode provides an API to get an item which is selected from a given list\nby an user.\n\nAPI function:\n>\n        function fuf#callbackitem#launch(\n              \\ initialPattern, partialMatching, prompt, listener, items, forPath)\n<\n        initialPattern  - String which is inserted after launching\n                          FuzzyFinder.\n        partialMatching - If non-zero, enable partial matching instead of\n                          fuzzy matching.\n        prompt          - Prompt string\n        listener        - |Dictionary| which has 'onComplete' and 'onAbort'.\n                          They are called at the end of FuzzyFinder.\n                          listener.onComplete(item, method) is called with 2\n                          arguments which are a name of selected item and a\n                          number of open method when completed.\n                          listener.onAbort() is called when aborted.\n        items           - List of items.\n        forPath         - If non-zero, use a matching method for files.\n\nExample of use:\n>\n        let listener = {}\n\n        function listener.onComplete(item, method)\n          echo \"Item: \" . a:item . \"\\nMethod: \" . a:method\n        endfunction\n\n        function listener.onAbort()\n          echo \"Abort\"\n        endfunction\n\n        \" Select an item from a given list.\n        call fuf#callbackitem#launch('', 0, '>', listener, ['ed', 'vi', 'vim'], 0)\n\n        \" Select a file from a given list.\n        call fuf#callbackitem#launch('', 0, '>', listener, ['../foo/bar', 'baz'], 1)\n<\n\n==============================================================================\nDETAILED TOPICS                                          *fuf-detailed-topics*\n\n                     *fuf-setting-one-time-option* *fuf#setOneTimeVariables()*\nSetting One-Time Options ~\n\nIf you want to set one-time options only for the next FuzzyFinder,\n|fuf#setOneTimeVariables()| function will be of help. This function is used as\nfollows:\n>\n        call fuf#setOneTimeVariables(['g:fuf_ignoreCase', 0], ['&lines', 50])\n<\nThis function takes 0 or more arguments and each of them is a pair of a\nvariable name and its value. Specified options will be set practically next\ntime FuzzyFinder is launched, and restored when FuzzyFinder is closed.\n\n                                                         *fuf-search-patterns*\nSearch Patterns ~\n\nYou can enter one primary pattern and zero or more refining patterns as search\npatterns. An entered pattern is separated by \";\" (|g:fuf_patternSeparator|),\nand the first pattern is a primary pattern and the rest of patterns is a\nrefining pattern.\n>\n                   primary    refining  refining\n                 |----------| |-------| |----|\n        >MruFile>bookmark.vim;autoload/;/home/\n<\nA refining pattern is used to narrow down the list of matching items by\nanother pattern.\n\nWith a primary pattern, FuzzyFinder does fuzzy matching or partial matching,\nwhich you specified. With a refining pattern, FuzzyFinder does partial\nmatching by default. (|g:fuf_fuzzyRefining|)\n\nWhen you enter a number as refining pattern, it also can match the index of\neach item.\n\nIn a mode which targets a static set of file paths (such as Buffer or MRU-File\nmode, not File or Directory) and |g:fuf_splitPathMatching| is non-zero,\nmatching with a primary pattern is divided into head part and tail part and\ndone individually.\n>\n          head   tail\n        |------||-----|\n        foo/bar/baz.vim\n\n        fuzzy matching example:\n        +----------------+---------+---------+---------+\n        | item \\ pattern | foo/bar | foo/    | bar     |\n        +----------------+---------+---------+---------+\n        | foo/bar        |   match |   match |   match |\n        | foo/abc        | unmatch |   match | unmatch |\n        | abc/bar        | unmatch | unmatch |   match |\n        | foobar         | unmatch | unmatch |   match |\n        | foooo/barrrr   |   match |   match |   match |\n        | foooo/fooooo   | unmatch |   match | unmatch |\n        +----------------+---------+---------+---------+\n<\nrefining pattern can match anywhere on each path in the above case.\n\n                                             *fuf-sorting-of-completion-items*\nSorting Of Completion Items ~\n\nFuzzyFinder sorts completion items with some rules.\n\nAn item, one part of which is matched with a whole pattern, is placed upper.\nE.g., with the pattern \"bc\", the item \"abc\" is placed upper than \"bac\".\n\nIn the above case, items, each having matching part at the head of itself, are\nplaced upper than others. E.g., with the pattern \"foo\", the item \"foobar\" is\nplaced upper than \"foobarbaz\".\n\nAnd the shorter the length of the item after matching position puts it higher.\nE.g., with the pattern \"bar\", the item \"foobar\" is placed upper than\n\"foobarbaz\".\n\nIf a pattern matches an item at only word boundaries of it, the item is placed\nupper. E.g., with a pattern \"fb\", items such as \"fooBarBaz\" and \"foo_bar_baz\"\nis placed upper.\n\nPlus, FuzzyFinder has a learning system. An item which has been completed in\nthe past with current pattern is placed upper.\n\n                                                          *fuf-reusing-window*\nReusing Of A Window Containing Target Buffer/File ~\n\nIf a window containing target buffer is found in current tab page when\nFuzzyFinder is going to open the buffer in a split new window, move to it. If\na window containing target buffer is found in other tab page when FuzzyFinder\nis going to open the buffer in a new tab page, move to it.\n\nYou can disable that feature via 'reuse_window' options if always want to open\na buffer in a new window.\n\n                                                             *fuf-hiding-menu*\nTo Hide The Completion Menu Temporarily In FuzzyFinder ~\n\nYou can close it by <C-e> and reopen it by <C-x><C-o>.\n\n                                      *fuf-abbreviation* *fuf-multiple-search*\nAbbreviations And Multiple Search ~\n\nYou can use abbreviations and multiple search in all modes by setting\n|g:fuf_abbrevMap| option.\n\nFor example, set as below:\n>\n        let g:fuf_abbrevMap = {\n              \\   \"^doc:\" : [\n              \\     \"~/project/**/doc/\",\n              \\     \".vim/doc/\",\n              \\   ],\n              \\ }\n<\nand enter \"doc:txt\" in File mode, then FuzzyFinder searches by the following\npatterns:\n\n        \"~/project/**/doc/*t*x*t*\"\n        \".vim/doc/*t*x*t*\"\n\nand show concatenated search results.\n\n                                                               *fuf-data-file*\nData File ~\n\nFuzzyFinder writes completion statistics, MRU data, bookmark, etc to files\nunder |g:fuf_dataDir|.\n\n|:FufEditDataFile| command is helpful in editing your data files. This command\nreads the data file in new unnamed buffer. Write the buffer and the data file\nwill be updated.\n\n                                                                   *fuf-cache*\nCache ~\n\nOnce a cache was created, It is not automatically updated to speed up the\nresponse time by default. To update it, use |:FufRenewCache| command.\n\n                                                            *fuf-dot-sequence*\nGoing Up Parent Directories With Dot Sequence ~\n\nYou can go up parent directories with entering dot sequence. Dot sequence\nafter a path separator is expanded to \"../\" sequence.\n\n        Dot sequence    Expanded pattern ~\n        /..             /../\n        /...            /../../\n        /....           /../../../\n\n                                                         *fuf-how-to-add-mode*\nHow To Add Mode ~\n\nTo add \"mymode\" mode, put the source file at autoload/fuf/mymode.vim and call\nfuf#addMode(\"mymode\") .\n\n                                                                  *fuf-migemo*\nWhat Is Migemo ~\n\nMigemo is a search method for Japanese language.\n\n\n==============================================================================\n"}, {:name=>"runtests.vim", :summary=>"Automatically generate, manage, and run test files for perl source.", :description=>"This is a quick and dirty vim script for automatically generating, managing, and running perl t/*.t files for any perl file you are currently editing.\n\nThe idea is to give a perl developer a leg up in creating tests for new or legacy code to give some basic unit tests.  Please note that these tests are just stub tests - it is up to the developer to expand the stub tests to fully exercise the code they're testing.\n\nIn a module (.pm) file, it looks for a new() constructor and adds a special test to create an object of that package, adds an isa_ok() for the created object, and every subroutine that it finds is called as an method on that object.\n\nIn a normal perl file (.pl), calls all subroutines as functions in ok() calls.\n\nAlso has a few extra commands for opening a quick view to the test file, creating a Makefile, which helps run your tests as well as a few extra bonuses such as running code coverage reporting, automatically opening the HTML code coverage report in a local web browser.  Please note that the last element is completely untested and not working on windows or linux - patches welcome :)\n\nHelp is available after installing:  :help runtests\n\nIdeas for improvements or other suggestions welcome."}, {:name=>"mosalisp.vim", :summary=>"lisp interpreter", :description=>"This is a lisp interpreter written in vim script."}, {:name=>"khaki.vim", :summary=>"A light colorscheme optimized for gui and 256 color terminals.", :description=>"This colour scheme was created primarily because there seems to be few\n(if any) that take the trouble to appear the same in gui and cterm environments.\n\nSecondly, most cterm colour schemes seem to use excessively strong colours\nin psychotic combinations compared to the gui schemes. This scheme\nstrives to follow the guidelines described in \"Color Theory for Developers\"\n       http://www.devsource.com/article2/0,1895,2069736,00.asp\nfor a softer appearance like more modern gui schemes.\n\nFinally, some terminals render bold and italic fonts badly, so those attributes have been avoided.\n\nFeatures:\n    - Optimized for 256 colour palette, then converted to gui.\n    - Identical colour rendition in both gui and cterm environments.\n    - Low-contrast colours keep it \"REAL\", avoiding psychotic edit sessions.\n    - Avoids use of terminal attributes {bold italic etc}, with the\n      exception of 'underline' used with the 'Underlined' group-name.\n\nTesting:\n    Tested with the following programs (256 colour versions), which render identically to gvim:-\n        gnu-screen (compiled with --enable-colors256 option)\n        xterm\n        gnome-terminal\n\n        konsole (version 1.6.5) renders slightly darker colours for some unknown reason.\n            See KDE Bug 138237: Color cube incorrect for xterm-256color mode (patch)\n"}, {:name=>"two2tango", :summary=>"Colorscheme based upon Tango palette", :description=>"This color scheme is based upon Panos Laganakos' original darktango vimscript #1672 color scheme.\nI have improved upon the original scheme by increasing the number of colors used to disambiguate different sytactical structures.  With one exception, the scheme is restricted to colors from the Tango Icon palette \nhttp://tango.freedesktop.org/Tango_Icon_Theme_Guidelines. &nbsp;\n\nSend feedback to NefOaloSr@gPAmaMil.com - NOSPAM"}, {:name=>"gitvimdiff", :summary=>"Script to show git diffs in vimdiff format", :description=>"This script will show a git diff in vimdiff format. -g will use gvimdiff instead of vimdiff.\n\nIt creates a temporary file based on the diff output of git diff, and then runs vimdiff (or gvimdiff) against that. On completion it should delete the temporary files."}, {:name=>"kwiki.vim", :summary=>"Syntax highlighting for kwiki files", :description=>"The script is based on the wiki.vim developed by Andreas Kneib <aporia@web.de> and Mathias Panzenböck <grosser.meister.morti@gmx.at>.  The formatting rules are mainly derived (with modification) from the perl module Kwiki::Formatter. http://search.cpan.org/~ingy/Kwiki-0.39/lib/Kwiki/Formatter.pm\n"}, {:name=>"Shell-History", :summary=>"Autocomplete based upon bash_history", :description=>"If you have previously typed a complicated command into your shell and then want to use it within a shell script this will make it easier to grab\n\njust start typing a fragment of the command and hit control b\n\nNote: .bash_history will normally only be written to when you exit a shell\n\nYou may want to tweak your history settings to gain best possible performance\npossibly http://wooledge.org/mywiki/BashFAQ#faq77 (realtime updates...although I haven't tried this)\n\nThis was just a personal  experiment at vim scripting, please send improvements/suggestions. \n\n"}, {:name=>"triangle.vim", :summary=>"Syntax highlighting for triangle source files", :description=>"A basic syntax highlighting script for the triangle language from the book \"Programming Language Processors in Java\"."}, {:name=>"NightVision", :summary=>"Color scheme with dark background", :description=>"Low contrast color scheme with dark background."}, {:name=>"confluencewiki.vim", :summary=>"Confluence WIKI syntax", :description=>"This is the syntax highlighter for Atlassian Confluence WIKI \n\nhttp://confluence.atlassian.com/renderer/notationhelp.action?section=all"}, {:name=>"railscasts", :summary=>"Railscasts TextMate theme for Vim (GUI Only)", :description=>"A GUI only color scheme based on the Railscasts TextMate theme.  To see the TextMate version check out http://railscasts.com\n\nGitHub: http://github.com/jpo/vim-railscasts-theme/tree/master\nScreenshot: http://github.com/jpo/vim-railscasts-theme/blob/43a71c6debe22d74dfabda27b58cca415c8925d5/screenshot.jpg"}, {:name=>"bruce.vim", :summary=>"annoy people who spy on your emails", :description=>"This small Python plugin is a translation of the Emacs 'bruce' utility (formerly known as 'spook'). It adds key words and phrases one might expect in a e-mail spying program to the end of the current buffer in the form of a signature, in order to confuse such programs. I didn't write it so much to make a statement as to relieve boredom for a few minutes, but the issue is important.\n\nIncludes a terrible Swedish translation of the README."}, {:name=>"undo_tags", :summary=>"small utility that lets you tag undo branches", :description=>"Undo branches are a very cool feature in vim7, which I recently discovered.\nYou can navigate through the change history of the current session as\nlong as you do not run out of undolevels.\n\nThis small plugin lets you:\n-  Assign tags / names and description to points in the buffers change history\n-  List the tags / names\n-  Choose a tag / name to revert back"}, {:name=>"iast.vim", :summary=>"Vim Keymap file for translitteration of pāli and sanskrit with IAST mapping", :description=>"Vim Keymap file for translitteration of pāli and sanskrit with IAST mapping"}, {:name=>"sas.vim--Gray", :summary=>"SAS syntax file", :description=>"And updated SAS syntax file that uses the suggested group names from {group-name} instead of defining its own color scheme."}, {:name=>"blinking_cursor", :summary=>"Makes the cursor blink in x terms when the user is in insert mode", :description=>"A short script ( with two c prgrams ) that makes the cursor blink in x terms when the user switches in insert mode. I think it may run on other vim Version, but i didn't test yet. "}, {:name=>"lookup.vim", :summary=>"Lookup dictionary meaning of a word (and thesaurus too)", :description=>"Place your cursor over a word and run :Lookup. It will then display the list of meanings from a dictionary and the list of similar words from a thesaurus.\n\nIt talks to a DICT server to look up the meaning, so the script will need an active internet connection to work."}, {:name=>"python_ifold", :summary=>"Improved version of python_fold. Uses folding expression for python code.", :description=>"Folds are created for:\n\n- 'class' and 'def' definitions.\n- Blocks between {{{, }}} markers (but not yet {{{n, etc.)\n\n\nFlavors:\n\n- A (python_ifold.a.vim) - ideal for legacy systems.\n- B (python_ifold.b.vim) -  with all options set by default.\n- C (python_ifold.c.vim) -  same as flavor B, but uses extra Vim settings for user comfort.\n\n\nImprovements over python_fold:\n\n- Fixes the wild (i.e. bogus) folding bug \n- Shows class and function signatures\n- Now, as in the original, flavor B will omit any misplaced comment mark\n- Flavor A boosts performance on outdated systems, something of great importance when there are lots of nested folds over large code pages\n\n\nCaveats:\n\n- The fold level for each fold is equal to the indentation divided by the value of the 'shiftwidth' option, so make sure that 'shiftwidth' is set to the right value for your code. For best results set 'shiftwidth' , 'softtabstop'  and 'tabstop' to the same value, and use 'expandtab' and 'autoindent' (all included in flavor C).\n\nExample:\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\nset expandtab\nset autoindent\nset foldcolumn=1  \" Optional\n\n- Class and function folds show a counter of number of lines (and the first line below the signature) that are within the fold when it's closed. Read the change history to learn more about this.\n\n- Press F key whenever you want to disable temporarily the folding, press F again to re-enable it (won't fold the block of code where the cursor is, though).\n\n- If g:ifold_mode is set to a value greater than 0, will make extra parsing to your code to avoid including blank lines at the end of each fold and wont unfold your code if any comment marks are misplaced. This behavior is set by default in flavor B. But be warned , though. This option requires more power from your system (hence the two versions: 'A' for lower-end systems and 'B' for powerful-enough systems), so if you lack of requirements you shouldn't use it. \n\n- The docstring is not shown at all.\n\n- If you choose flavor A or if you set the global g:ifold_mode to 0, bare in mind that any comment mark between the beginning of a line and the first expression's character (of a sentence) WILL interfere with the whole folding process, that is, only if these marks do not respect the indentation sequence."}, {:name=>"gobgen", :summary=>"GObject skeleton generator", :description=>"This plugin generate simple c and h templates for new GObject class and interface.\nThere a bit of commands for this:\n- GOBGenerateC\n- GOBGenerateIC\n- GOBGenerateCModule\n- GOBGenerateH\n- GOBGenerateIH\nScript by default uses current file name for class name (optionaly you can type class name manually)\n\nFor nice code formating it is need to enable ai option"}, {:name=>"ColorSchemeMenuMaker", :summary=>"Auto-generates menu containing your colorschemes (keywords: color scheme menu)", :description=>"Are you in the mood for a blue desktop, but don't want to take the time to go through all of your installed color scheme files just to find the ones you want?  Or do you like to make each of your Vim windows a different color to easily identify which editor contains which projects?\n\nIf so, this plugin is for you.\n\nThis script crawls through the directories in your &runtimepath searching for installed colorscheme files.  When it finds a colorscheme, it adds it to a menu called ColorSchemes where it is sorted by the predominant color used.  Color schemes are also stored alphabetically by name in this menu.  This way, you can have all of your blue themes at your fingertips.  Or if you just remember the name, you can quickly browse to it.\n\nThis script works by analysing the guibg option of the Normal highlight group to determine which basic color to file the scheme under.  It will place each theme in one of the following categories: black, blue, cyan, darkgrey, green, grey, offwhite, orange, purple, red, white, yellow, or unknown if no background color is specified.  It uses a heuristic that is still a work in progress, so it doesn't always guess the color correctly.  For that matter, people have a hard time deciding what category a color might fall under, so it may always be a work in progress!\n\nIf you install new color schemes, force a re-scan by clicking 'Rebuild Menu' in the ColorSchemes menu.  'Reload Menu' simply forces Vim to re-source an already generated menu file.\n\nA menu entry that appears with an asterisk before it indicates a color scheme that contains more than one \"hi Normal\" command.  This script assumes that the first such command encountered is the one that will be executed.  Such entries are not guaranteed to be sorted correctly.\n\nSince version 0.6, this script includes an autoload plugin that facilitates tweaking the color selection algorithm.\nThis autoload plugin contains a Perl script which generates an HTML page that shows the Normal background color for each installed theme, along with the plugin's guess at which category it should be filed under.  The embedded Perl script calls the very same functions the plugin uses, letting you quickly assess the results of your changes.  The plugin keeps track of the three previous guesses, and highlights the colorschemes that have been affected by your changes.  \n\nMore details are found in plugin/ColorSchemeMenuMaker.vim.\n\nIf you can make any improvements, I'd love to see them!\n"}, {:name=>"karma.vim", :summary=>"For given karma print how users possibly voted", :description=>"Usage:\n:Karma {score} {votes}\n\nExamples:\n:Karma 4727 1463\nKarma: 4727/1463\n   1. Life Changing: 1088   Helpful: 375   Unfulfilling: 0\n   2. Life Changing: 1090   Helpful: 370   Unfulfilling: 3\n      ...\n  76. Life Changing: 1238   Helpful: 0   Unfulfilling: 225\n\n(the dots are literal output, and btw this is the karma for vimscript #273)\n\nChecking the results (here for 2.):\n    1090*4 + 370*1 + 3*(-1) = 4727\n    1090 + 370 + 3 = 1463\n\n:Karma -3 16\nKarma: -3/16\n   1. Life Changing: 1   Helpful: 4   Unfulfilling: 11\n\nOther vimscripts: vimscript #936\n\n2007 Dec 08"}, {:name=>"progressbar-widget", :summary=>"pimp your plugins", :description=>"Pimp your plugins with the latest in widget technology ! This plugin implements a simple progressbar for the statusline. Never again you will have to wonder, how you should tell your user that something is happening.\n\nThis may be the foundation of big vim widgets library :O)"}, {:name=>"greplist.vim", :summary=>"vimgrep location list manager", :description=>"This plug-in is for someone who often does multi-file search in multiple locations and these locations often change when for example you work on several different projects.  It helps to maintain a list of frequently used vimgrep locations and defines commands to edit a list and to perform a search in the selected locations.\n\n:GrepListConfig command loads a list for editing.  A list is kept in\n\"$HOME/_vimgrep\" file or in \"$VIM/_vimgrep\" file if $HOME is not defined.  If \"_vimgrep\" file does not exist or empty, a sample list is created.  Status line shows useful normal mode mappings:\n  'q' - abandon any changes and wipe the buffer\n  's' - save the changes and wipe the buffer\n  ' ' - select/deselect current line (selected lines start with '+')\n\n:GrepListFind(mode) command prompts for the string to find and starts the vimgrep search in the selected locations.  The default value for the search string is either the current visual selection (mode != 0) or the current word (mode == 0).  Plug-in automatically surrounds the search string with '/' and adds 'j' option.\n\nAs usual, it is more convenient to create mappings for these commands.  For example:\nnoremap <F8> :GrepListFind 0<CR>\ninoremap <F8> <C-O>:GrepListFind 0<CR>\nvnoremap <F8> <C-C>:GrepListFind 1<CR>\n\nFor more information please see the source code -- it is small and easy to read.\n"}, {:name=>"buffer-status-menu.vim", :summary=>"Add modified/current status to Buffers menu", :description=>"Replacement for Vim's default buffers menu to add status display.\nNow adds a + before modified buffers, * before the current buffer.\n\nNote that Vim doesn't seem to have an autocmd event for a buffer\nbecoming modified, so the menu won't show this change until something\nelse causes it to refresh.\n\nOriginal code stolen from Vim 7.0-164"}, {:name=>"AutoClose--Alves", :summary=>"Auto close pair of characters", :description=>"*NOTE*\n======\nThe header of the plugin says it is on version 1.1, but this is wrong. The 1.4 version is indeed the 1.4 version only with a wrong header. Next version I'll fix it.\n\nOverview\n=======\nThis plugin was  born  as  a  personal  need  to  have some little special features from other editors into my preferred one. The Eclipse IDE editor has an auto-complete for  open-close  pair  of  characters  feature  that I always wanted into Vim.\n\nAs soon  as you type  a character that  could have a  close pair,  Eclipse automatically puts its  pair in front of your cursor,  and  if you continue to type and type  the close character,  Eclipse is smart enough  to not insert it again (it just move your cursor one character forward).\n\nBut the Eclipse editor don't stop  there.  If you type an \"open\" character on any part of your code that  should not have a pair completion,  it will not insert the close character for you.\n\nThe AutoClose plugin is an attempt to reproduce this behavior on Vim. \n\nConfiguration\n==========\n1. Definning characters to auto close\n--------------------------------------------------\nIf you  are not sattisfied  with the default  characters to close  you can define your own by setting the global variable g:AutoClosePairs.\n\nThe only thing to be careful is that this variable must be a dictionary on the following format:\n\n    {\"<open_char>\": \"<close_char>\"}\n\nOtherwise the  plugin will  not recognize  the settings  and will  use the default values.\n\nFollowing is the default declaration for auto close chars. If this configuration is enought, you don't need to configure nothing:\n\n    let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '\"': '\"', \"'\": \"'\"}\n\n\n2. Definning protected regions\n-----------------------------------------\nInside some special  regions  the  auto  close  feature  is far from util, actually we  can say  that on those  regions,  this feature  is worst  than no feature at all. This is the case for \"Comments\" and \"Strings\".\n\nIf you edit files with this characteristic and there is more than comments and strings where you would like  to protect from auto close,  just define the global variable g:AutoCloseProtectedRegions.\n\nThis variable must be  a list of strings or the  plugin will not recognize it and will  use the defaults parameters.  The format  of this variable should be:\n\n    [\"<protected_region1>\", \"<protected_region2>\", ...]\n\nFollowing is the default declaration to the protected regions.  If you are satisfied with this, you don't have to set this setting:\n\n    let g:AutoCloseProtectedRegions. = [\"Comment\", \"String\", \"Character\"]\n\n\n3. Turning AutoComplete on and off\n------------------------------------------------\nAs AutoComplete change the buffer you are editing, sometimes you just want to turn this feature off for a while and than turn it on again.\n\nAutoComplete provide three  commands that can be mapped to  any key as you want to do that task:\n\n    1. AutoCloseOn\n    2. AutoCloseOff\n    3. AutoCloseToggle\n\nAnd if you don't want to map anything, just use them on the command mode.\n"}, {:name=>"sessionman.vim", :summary=>"Vim session manager", :description=>"Vim provides a ':mksession' command to save the current editing session.  This plug-in helps to work with Vim sessions by keeping them in the dedicated location and by providing commands to list all sessions, open session, open last session, close session, save session and show last session.  From a list of sessions you can open session, delete session, edit session and edit extra session script.  Please note that session name can contain spaces and does not have to have a .vim extension.\n\nOn Windows, DOS and OS2 sessions are saved in:\n  \"$HOME/vimfiles/sessions\"   if $HOME is defined\n  \"$APPDATA/Vim/sessions\"     if $APPDATA is defined\n  \"$VIM/sessions\"             otherwise\nOn Unix sessions are saved in:\n  \"$HOME/.vim/sessions\"\nIf this directory does not exist, it will be created by the :SessionSave command (requires Vim 7).\n\nAt the top of the window there is a help that shows normal mode mappings:\n  q, <ESC>                 - close session list\n  o, <CR>, <2-LeftMouse>   - open session\n  d                        - delete session\n  e                        - edit session\n  x                        - edit extra session script\nThe name of an opened session is saved in g:LAST_SESSION variable which is saved in the viminfo file if 'viminfo' option contains '!'.  It is used to open last session by :SessionOpenLast command.  It can be done when Vim starts (gvim +bd -c OpenLastSession) or any time during a Vim session.  You can edit an extra session script to specify additional settings and actions associated with a given session.  If you change values of 'expandtab', 'tabstop' or 'shiftwidth', they will be restored to their original values when session is closed or before a new session is opened.  When session is opened and 'cscope' is enabled, script calls 'cscope add' for the current directory so make sure it is set correctly for the session.\n\n:SessionOpen command takes a session name as an argument.  It supports argument completion.\n\n:SessionOpenLast command opens the g:LAST_SESSION session (see above).\n\n:SessionClose command wipes out all buffers, kills cscope and clears variables with session name.\n\n:SessionSave command saves the current editing session.  If v:this_session is empty it asks for a session name.\n\n:SessionSaveAs command takes a session name as an optional argument.  If there is no argument or it is empty, it asks for a session name (default is the last part of v:this_session).\n\n:SessionShowLast command shows the content of the g:LAST_SESSION and v:this_session variables.\n\nIf 'sessionman_save_on_exit != 0' (default) then the current editing session will be automatically saved when you exit Vim.\n\nPlug-in creates a \"Sessions\" sub-menu under the \"File\" menu.\n"}, {:name=>"dbext4rdb", :summary=>"dbext 506 with added capabilities for Rdb", :description=>"For vim on Open VMS look at http://www.polarhome.com/vim/\nFor Open VMS http://h71000.www7.hp.com/openvms/\n\nThe \"official\" dbext 5.11 release (and any future ones) has incorporated the\nOracle Rdb Open VMS support.  Please refer to the dbext homepage for further\nupdates:\nhttp://vim.sourceforge.net/scripts/script.php?script_id=356\n\n\nIf DBEXT_506_RDB.ZIP was installed, please verify it was not installed into\nany of the vim70 or vim71 directories.  All plugins should be installed into\nthe .vim (Unix) or vimfiles (Windows) directories.  If you find any of the\ndbext files in the vim7x directories, please remove these before installing\nthe official version.\n"}, {:name=>"openssl.vim", :summary=>"Turn Vim into a Password Safe and edit openssl encrypted files", :description=>"== Edit OpenSSL encrypted files and turn Vim into a Password Safe! ==\n\nThis plugin enables reading and writing of files encrypted using OpenSSL.\nThe file must have the extension of one of the ciphers used by OpenSSL. For\nexample:\n\n   .des3 .aes .bf .bfa .idea .cast .rc2 .rc4 .rc5\n\nThis will turn off the swap file and .viminfo log. The `openssl` command\nline tool must be in the path.\n\n== Install ==\n\nPut this in your plugin directory and Vim will automatically load it:\n\n   ~/.vim/plugin/openssl.vim\n\nYou can start by editing an empty unencrypted file. Give it one of the\nextensions above. When you write the file you will be asked to give it a new\npassword.\n\n== Simple Vim Password Safe ==\n\nIf you edit any file named '.auth.bfa' (that's the full name, not just the\nextension) then this plugin will add folding features and an automatic quit\ntimeout.\n\nVim will quit automatically after 5 minutes of no typing activity (unless\nthe file has been changed).\n\nThis plugin will fold on wiki-style headlines in the following format:\n\n    == This is a headline ==\n\nAny notes under the headline will be inside the fold until the next headline\nis reached. The SPACE key will toggle a fold open and closed. The q key will\nquit Vim. Create the following example file named ~/.auth.des3:\n\n    == Colo server ==\n\n    username: maryjane password: esydpm\n\n    == Office server ==\n\n    username: peter password: 4m4z1ng\n\nThen create this bash alias:\n\n    alias auth='view ~/.auth.des3'\n\nNow you can view your password safe by typing 'auth'. When Vim starts all\nthe password information will be hidden under the headlines. To view the\npassword information put the cursor on the headline and press SPACE.\n\nThanks to Tom Purl for the des3 tip.\n\nI release all copyright claims. This code is in the public domain.\nPermission is granted to use, copy modify, distribute, and sell this\nsoftware for any purpose. I make no guarantee about the suitability of this\nsoftware for any purpose and I am not liable for any damages resulting from\nits use. Further, I am under no obligation to maintain or extend this\nsoftware. It is provided on an 'as is' basis without any expressed or\nimplied warranty.\n"}, {:name=>"DrillCtg", :summary=>"Allows fast drill-down search across the pathnames in your ctags file", :description=>"DrillCtg allows drill-down search by character across the pathnames in your current loaded ctags file.  Upon first launching DrillCtg, if a ctags file is currently set, it will parse it and create a Vim list (an array).  This is a sorted array which contains all unique pathnames, able to searched quickly using Vim's match() function.\n\nIt uses Vim's complete-functions to provide a dynamically populated list of values which are updated on every keypress.  You can then select which pathname to open.\n\nIf a ctags file is not currently set upon launching DrillCtg, it will prompt you for the location of one.\n\nIf you set a different ctags file, upon the next call to DrillCtg, it will replace the contents of the old array with the new pathnames.\n\nCurrently this plugin only supports 1 loaded ctags file at a time.  If you have more than 1 ctags file loaded, it is likely that this plugin will not work.\n\nI created this plugin because I wanted something similar to Eclipse's Navigate > Go To > Resource dialog box.  I find this implementation a lot faster than Eclipse when dealing with several thousand unique pathnames.\n\nDrillCtg requires Vim 7."}, {:name=>"ttoc", :summary=>"A regexp-based table of contents of the current buffer", :description=>"This plugin tries to duplicate the functionality of Marc Weber's \noutline.vim (vimscript #1947) on the basis of its description and of \nvim's own |:g|. Other than outline.vim, it relies on tlib\n(vimscript #1863).\n\nThe TToC[!] command can be used to get a quick table of contents of the \nbuffer based on a given regular expression. The regexp can be defined on \nthe command line, in window (w:ttoc_rx), buffer-local (b:ttoc_rx) \nvariables or in global filetype-specific (g:ttoc_rx_{&filetype}) \nvariables. The order actually is: [wbg]:ttoc_rx_{&filetype} > \n[wbg]:ttoc_rx.\n\nIn the list view, you can select a line and either preview it (<c-p>), \njump there (<), close the list and jump there (<cr>).\n\nExample:\n\n  \" Use the default settings for the current file-type\n  :TToC\n  \" Show all words beginning at column 1\n  :TToC ^\\w\n  \" Show 'if' statements (but not the concluding 'then' statement)\n  :TToC ^\\s*if\\>.\\{-}\\ze\\s\\+then\n  \" Show 'if' statements and 3 extra lines\n  :3TToC! \\<if\\>\n\nTToC only shows the matching string. TToC! works somewhat like |:g| in \nshowing the whole line, only that you can browse/filter the list and \nselect an item after reviewing the results. \n"}, {:name=>"cheat.vim", :summary=>"Vim wrapper for cheat (http://cheat.errtheblog.com) utility.", :description=>"Usage:\n\n:Cheat <Tab>\nwill autocomplete the available cheatsheets.\n\nalternatively, you can position the cursor over a word matching a cheatsheet (say ambition) and hit <leader>ch\nTip: looks nicer when you have wildmenu turned on ;-)"}, {:name=>"no_quarter", :summary=>"Colorfully scheme with an nice dark gray background and low contrast", :description=>"Colorfully scheme with an nice dark gray background, low contrast and some special features for Perl developers.\n\nScreenshot: http://emresumo.com/no_quarter/no_quarter-screenshot_01.png"}, {:name=>"tregisters", :summary=>"List, edit, and run/execute registers/clipboards", :description=>":TRegister\n    List the registers as returned by |:reg|.\n\nKeys~\n    <c-e> ... Edit register/clipboard\n    <c-q> ... Execute register (see |@|)\n    <cr>  ... Put selected register(s) (see |:put|)\n    <esc> ... Cancel\n"}, {:name=>"ttags", :summary=>"Tag list browser (List, filter, preview, jump to tags)", :description=>":TTags [KIND] [TAGS_RX] [FILE_RX]\nIn order to match any kind/rx, use *.\nE.g. TTags * * _foo.vim$\n\nFeatures:\n    - List tags\n    - Filter tags matching a pattern\n    - Jump/Preview tags\n    - Insert tags (and a template for the argument list if supported by \n      tSkeleton (vimscript #1160), which has to be installed for this)\n\nYou can use :echo keys(ttags#Kinds())<cr> to find out which kinds are defined.\n"}, {:name=>"3DGlasses.vim", :summary=>"Dark blue scheme with parallax effect", :description=>"This was supposed to be a Tron color scheme, but I don't think it quite captured the essence of the Tron universe.\nThis scheme uses a dark blue background against which soft blue text is set.  Bright red highlights really stand out (that's due to the chromostereoscopic effect).\n\nSend feedback to g?? ArjBsnyFbCe@tzNnvZy.pbz - ABFCNZ\n "}, {:name=>"Gettext-PO-file-compiler", :summary=>"This is a compiler for gettext files (*.po)", :description=>"This compiler plugin compiles the gettext po files to mo files and checks the errors."}, {:name=>"headerguard.vim", :summary=>"Add header guards to C/C++ header files", :description=>"It is a common practice to insert header guards into C/C++ header files to\nallow a header to be included multiple times.  A header guard for file\nHeaderName.h typically looks something like this: >\n\n  #ifndef HEADERNAME_H\n  #define HEADERNAME_H\n\n    ...header content...\n\n  #endif /* HEADERNAME_H */\n\nThis plugin provides the following command:         *HeaderguardAdd*  >\n\n  :HeaderguardAdd                                   \n\nThis will add a new header guard to the current file.  It checks for a\npre-existing header guard, and if found, modifies the existing guard in-place.  \n\nDetection of pre-existing header guards is somewhat primitive.  The first two\npre-processor directives in the file must be the pre-existing header guard's\n#ifndef (or #if !defined()) and #define directives, and the final directive in\nthe file must be the corresponding #endif.  Pre-existing header guards not\nfollowing this form won't be recognized and thus cannot be converted in-place.\nTo avoid mistakenly adding another header guard with the same guard name,\n|HeaderguardAdd| will refuse to add a new header guard if it can find a\n#define of the guard name macro anywhere in the file.\n\nThe guard style may be configured; details on customization and more\nare found in the included documentation."}, {:name=>"Tailf", :summary=>"Tails a log file continuously, like using 'tail -f'", :description=>"Discontinued script, please don't download."}, {:name=>"erlang-indent-file", :summary=>"Erlang indent file", :description=>"This is an indent file for Erlang.\n"}, {:name=>"brew.vim", :summary=>"Syntax highlighting for a templating system in R.", :description=>"Brew is a templating system for R similar to PHP, Java/Active server pages, Ruby's erb, or Python's psp.\n\nBased heavily on eruby.vim of the ruby-vim package by Tim Pope and others.\n\nhttp://github.com/graywh/vim-brew"}, {:name=>"camlanot.vim", :summary=>"Ocaml support for type annotation files, included support for ocamlbuild", :description=>"(22/09/07 This should be soon added to the official ocaml ftplugin)\n\nOcaml support for annot file is already implemented in the official Ocaml ftplugin and in ocaml.annot.pl (script_id=1197).\n\nBut this script adds the following:\n\n   - no need for python support (neither perl or anything else : only vim code inside)\n     + plus: more portable\n     + minus: no more lazy parsing, it looks very fast however\n     \n   - ocamlbuild support, ie.\n     + the plugin finds the _build directory and looks for the \n       corresponding file inside;\n     + if the user decides to change the name of the _build directory thanks\n       to the '-build-dir' option of ocamlbuild, the plugin will manage to find it out;\n     + if ocamlbuild is not used, the usual behaviour holds; ie. the .annot\n       file should be in the same directory as the source file;\n     + for vim plugin programmers:\n       the variable 'b:_build_dir' contains the inferred path to the build \n       directory, even if this one is not named '_build'.\n\n Bonus:\n   - latin1 accents are handled\n   - lists are handled, even on multiple lines, you don't need the visual mode\n     (the cursor must be on the first bracket)\n   - parenthesized expressions, arrays, and structures (ie. '(...)', '[|...|]',\n     and '{...}') are handled the same way\n\nUsage:\n   - press <LocalLeader>t to display the type of expression under cursor\n   - don't forget to compile with -dtypes option (or -cflags -dtypes if you're using ocamlbuild)\n\n\n"}, {:name=>"motion.vim", :summary=>"motion text in command mode", :description=>"motion text in command mode.\nuse:\n**line**\nCTRL+up      - move line\nCTRL+down - move line\n\n**char**\nCTRL+right   - move char\nCTRL+left     - move char\n\n**screen**\nSHIFT+up      - move screen\nSHIFT+down - move screen\nSHIFT+right   - move screen\nSHIFT+left     - move screen"}, {:name=>"taskpaper.vim", :summary=>"TaskPaper to-do list format support", :description=>"From the TaskPaper website (http://hogbaysoftware.com/projects/taskpaper):\n\n  \"TaskPaper is a simple to-do list application that helps you stay\norganized. Unlike competing applications, TaskPaper is based on plain text\nfiles which offer you paper-like simplicity and ease of use.\" \n\nTaskPaper is a to-do list application for Mac OS X based on the \"Getting\nThings Done\" approach of David Allen (http://www.davidco.com/). It supports\nthe GTD notions of projects, tasks and contexts.\n\nThis package contains a syntax file and a file-type plugin for the simple\nformat used by the TaskPaper application. It is intended for Mac users who\nwant to edit their TaskPaper lists in Vim from time to time (for example, in\na SSH session, or on a non-Mac system) and for anyone who is looking for a\nsimple to-do list format.\n"}, {:name=>"MarkLines", :summary=>"Toggle highlighting on important lines", :description=>"The MarkLines plugin allows one to visually mark any number of lines, in any\nnumber of buffers, with any chosen highlight.  In a sufficiently new version\nof VIM, 7.1.040 or greater, you can use more than one highlight color per\nwindow simultaneously.\n\nTHIS PLUGIN REQUIRES VIM 7.0 OR GREATER.\n\nUseful for things like 'Mark every line that contains the word...'  or\n'Brighten every line containing a function declaration' without having it\ncleared every time you search for something else.  :)\n\n(By the way, you could do the first example with :%g/foo/MarkLinesOn)\n\n:MarkLinesOn         turns on highlighting for the current line or range\n:MarkLinesOff         turns off highlighting for the current line or range\n:MarkLinesToggle  toggles highlighting for the current line or range\n\nEach can be followed by an optional highlight group name as an argument;\nif so they turn on highlighting to that color (On, Toggle) or only clear lines of\nthat color (Off).\n\nA few maps are provided as well.\n<leader>mc   Clear:  Call MarkLinesOff for the current line or selection.\n<leader>ms   Select: Call MarkLinesOn for the current line or selection.\n<leader>mt   Toggle: Call MarkLinesToggle for the current line or selection.\n<leader>me   Error:  Like \\mt but using the \"ErrorMsg\" group, rather than the\n                     default highlight group.\n\nFor more details please see the in-vim help.  I spent a long time writing it,\nsomeone should read it.  ^_^\n\nAny questions, please feel free to email me.\n"}, {:name=>"4NT-Bundle", :summary=>"btm (Batch to Memory - 4NT, TakeCommand Script) filetype bundle", :description=>"Updates both the file type and syntax plug-in for btm (Batch to Memory - 4NT, TakeCommand Script) file type Bundle. Includes simple user and omni completion.\n\nReports errors to: http://code.google.com/p/vim-scripts/issues/list\nDiscuss improvements on: http://groups.google.com/group/vim_scripts\n\nhttp://code.google.com/p/vim-scripts/wiki/4NTBundle"}, {:name=>"vimblog.vim", :summary=>"blogging from vim ruby script", :description=>"For Vi, Vim, MacVim or GVim users, there is a simple way to manage your blog posts. Under Vim environment, you can create new blog posts, edit, list all categories, list older posts, delete posts, turn Published into Draft posts, and vice-versa.\nIt is out-of-the-box working for Wordpress, but very easilly, you can make it manage Blogger, MovableType, TextPattern, etc, platforms. Its the beauty of Open Source software. Study the code, change it, and use it. \n\nYou can see some screenshots on Flickr:\nhttp://www.flickr.com/search/?q=vim&w=36867590@N00\n\nhomepage: http://blog.tquadrado.com/?page_id=146"}, {:name=>"makeprgs", :summary=>"Set makeprg and compiler type based on globbed files", :description=>"If you work on several different projects, chances are you will come across Makefile, Ant or SCons based build systems. If you have <F5> mapped to :make with \":nmap <F5> :make<CR>\" then it would be nice if the correct build program were used. That is the purpose of this script. It also maps <F5> as mentioned.\n\nThe script checks if the file SConstruct or SConscript is in the current directory and if so sets the makeprg to scons, or scons -u for scripts.\n\nIf GNUmakefile, makefile or Makefile are found in the current directory, then the makeprg value is set to make.\n\nIf build.xml is found, then \"ant\" is the assumed compiler - i.e. \":compiler ant\" is called.\n\nA global variable makeprgs_make_types can be set to extend the functionality somewhat. Example included in the doc/*.txt file.\n\nThe file detection is pretty crude - it runs a glob in the CWD and if the files are found sets the appropriate value. I hope you find it useful.\n\nTested on Vim 7.0 and 7.1, but should work on earlier releases (6.0 at least)."}, {:name=>"swap-parameters", :summary=>"swap parameters of a function (requires python)", :description=>"Requires python and Vim compiled with +python option\n\nBasic Usecase: Place the cursor inside the parameter you want to swap\nwith the next one, and press gs\n\nIt is a versatile script to swap parameters of a function\nor, generally speaking, elements in any coma seperated list.\n\nkey bindings (normal mode):\n[count]gs -- where count defaults to 1 -- swap the argument under\n             the cursor with the [count] next one\n[count]gS -- swap with the previous one\n\n\nBelow are exaples of what happens after pressing gs (equivalent to 1gs).\nPrettier version can be found here: \nhttp://blog.kamil.dworakowski.name/2007/09/swap-parameters-script-for-vim.html.\nOn each line the lefthand side shows the line before typing gs, and\nthe righthand side shows the effect. The cursor position is depicted\nwith || symbols. par|m|1 means that the cursor is on the character m.\n\nfun(par|m|1, parm2) ==> fun(parm2, parm|1|)\nfun(par|m|1(), parm2) ==> fun(parm2, parm1(|)|)\nfun(parm1(|)|, parm2) ==> fun(parm2, parm1(|)|)\nfun(parm|1|(arg,arg2), parm2) ==> fun(parm2, parm1(arg,arg2|)|)\nfun(parm1|(|arg,arg2), parm2) ==> fun(parm2, parm1(arg,arg2|)|)\nfun(parm1(arg,arg2|)|, parm2) ==> fun(parm2, parm1(arg,arg2|)|)\nfun(parm1(arg, arg2|)|, parm2) ==> fun(parm2, parm1(arg, arg2|)|)\nfun(arg1, ar|g|2, arg3) ==> fun(arg1, arg3, arg|2|)\narray[a|r|g1, arg2] ==> array[arg2, arg|1|]\nfun(par|m|1[], parm2) ==> fun(parm2, parm1[|]|)\nfun(parm1[|]|, parm2) ==> fun(parm2, parm1[|]|)\nfun(par|m|1, array[]) ==> fun(array[], parm|1|)\nfun(|a|,b) ==> fun(b,|a|)\n[(p1, p2|)|, p3] ==> [p3, (p1, p2|)|]\n\n\nThe following lines demonstrate using gS (swap with previous).\n\nfun(parm2, par|m|1) ==> fun(|p|arm1, parm2)\nfun(parm2, par|m|1()) ==> fun(|p|arm1(), parm2)\nfun(parm2, parm1(|)|) ==> fun(|p|arm1(), parm2)\nfun(parm2, parm|1|(arg,arg2)) ==> fun(|p|arm1(arg,arg2), parm2)\nfun(parm2, parm1|(|arg,arg2)) ==> fun(|p|arm1(arg,arg2), parm2)\nfun(parm2, parm1(arg,arg2|)|) ==> fun(|p|arm1(arg,arg2), parm2)\nfun(parm2, parm1(arg, arg2|)|) ==> fun(|p|arm1(arg, arg2), parm2)\nfun(arg1, ar|g|2, arg3) ==> fun(|a|rg2, arg1, arg3)\nfun(arg1, arg2, ar|g|3) ==> fun(arg1, |a|rg3, arg2)\narray[arg2, a|r|g1] ==> array[|a|rg1, arg2]\nfun(par|m|1[], parm2) ==> fun(|p|arm1[], parm2)\nfun(parm2, parm1[|]|) ==> fun(|p|arm1[], parm2)\nfun(array[], par|m|1) ==> fun(|p|arm1, array[])\nfun(b,|a|) ==> fun(|a|,b)\n\nA useful, however unexpected by the author, feature of this script is that\non pressing j to move cursor to the line below, the cursor is restored to \nthe column position before the swap. This allows for a streamlined\nswaping of parameters in the case like this:\n\nfun(arg2, arg1)\nfun(arg2, arg1)\nfun(arg2, arg1)\n\nYou would put cursor on arg2, and type gsjgsjgs"}, {:name=>"trag", :summary=>"A language & project-aware regexp builder & runner for vimgrep", :description=>"Trag builds regular expressions for vimgrep or its own grep-like function (depending on the task at hand) that allow you to find out where a variable is defined, where it is assigned to another variable, where a method is called etc. At least that's the idea. Since it doesn't use a database it's only suitable for smaller projects -- whatever that means.\n\nFirst, define which files belong to your project. Most likely your project's source files are already registered in your tags or manifest.txt files, which will be used if available. Alternatively you can set the variable [wbg]:trag_files to a list of files that will be used instead. (Setting this variable will prevent the use of tags.)\n\nSecondly, perform certain operations on these files, like:\n\n    - Select a file to edit\n    - Scan/search files for an expression (somewhat like grep)\n    - Provide for \"modes\", i.e. format the regular expression so that \n      you can easily search for, e.g., only variable definitions or only \n      function calls.\n\n\n:TRag[!] MODE REGEXP\n    Run |:TRagsearch| and instantly display the result with |:TRagcw|.\n    See |trag#Grep()| for help on the arguments.\n    Examples:\n      \" Find any matches\n      TRag . foo\n\n      \" Find variable definitions (word on the left-hand): foo = 1\n      TRag l foo\n    \n      \" Find variable __or__ function/method definitions\n      TRag d,l foo\n    \n      \" Find function calls like: foo(a, b)\n      TRag f foo\n"}, {:name=>"colorful256.vim", :summary=>"initial upload", :description=>"This is high contrast colorscheme. Not advisable during night.\n Dark background and used lot of colors mostly yellow and light blue shades.\n Only for console version which supports 256 colors.\n Please make sure to set t_Co=256 before calling the colorscheme.\n  "}, {:name=>"F6_Comment-old", :summary=>"Auto commenting that accepts Visual range", :description=>"******************************************************************\nNB.  I accidentally uploaded this script twice, this instance needs to be deleted,\n         and the copy listed under Vim 7.0 should be kept.\n         I just don't know how to do this ... sorry.\n******************************************************************\n\n\nDescription:\nI don't know for sure that something like this does not already exist in Vim, but if it does, I can't find it.\n\nI recall Cream having this kind of functionallity mapped to <F6>,\nso to maintain consistency I've kept the convention.\n\nThis uses the current value of &cms / &commentstring to comment and uncomment code.\nIt works for ranges selected in Visual mode, or for the current line in all modes.\nNB. Comment strings may not include '@' or '+'\n(I don't know of any languages that use these characters).\n\nHelp:\nUse <F6> to comment, and <S-F6> to uncomment\n"}, {:name=>"F6_Comment", :summary=>"Auto commenting that accepts Visual range", :description=>"Description:\nI don't know for sure that something like this does not already exist in Vim, but if it does, I can't find it.\n\nI recall Cream having this kind of functionallity mapped to <F6>,\nso to maintain consistency I've kept the convention.\n\nThis uses the current value of &cms / &commentstring to comment and uncomment code.\nIt works for ranges selected in Visual mode, or for the current line in all modes.\nNB. Comment strings may not include '@' or '+'\n(I don't know of any languages that use these characters for comments).\n\nHelp:\nUse <F6> to comment, and <S-F6> to uncomment\n"}, {:name=>"hookcursormoved", :summary=>"Facilitate definition of triggers on CursorMoved[I] events", :description=>"This experimental plugin provides some help with the definition of \nfunctions that should be called when the cursor position changed.\n\nWhen the cursor position changes, it first checks if a certain condition \nis met and then calls functions registered in \n[bg]:hookcursormoved_{CONDITION} (an array).\n\nPre-defined conditions:\n    linechange\n        The line-number has changed.\n    parenthesis\n        Cursor is over (), [], or {}.\n    syntaxchange\n        The syntax group under the cursor has changed (i.e. the cursor \n        has moved in/out of a syntax group.\n    syntaxleave\n        b:hookcursormoved_syntax (ARRAY) should contain the syntax names \n        which should run the hook code.\n    syntaxleave_oneline\n        Same as a above but check also for changes of the line number.\n\nIn order to define a new conditions, you have to define a function \n\"HookCursorMoved_{CONDITION}(mode)\", which returns true if the condition \nis met.\n\nFunctions are best registered using |hookcursormoved#Register()|.\nExample: >\n\n    function! WhatsGoingOn(mode) \"{{{3\n        if mode == 'i'\n            DoThis\n        elseif mode == 'n'\n            DoThat\n        endif\n    endf\n\n    call hookcursormoved#Register('b', 'syntaxchange', function('WhatsGoingOn'))\n\n"}, {:name=>"narrow_region", :summary=>"hide certain lines of a buffer", :description=>"This plugin provides a command which somewhat limits the buffer to a specified range of lines.\n\n...\n:[range]NarrowRegion\n\t\tThis command does the following, with [range] defaulting to\n\t\tthe current line :\n\t\t- store current folds, foldstates and foldoptions\n\t\t- delete all folds\n\t\t- setl foldopen=undo\n\t\t- setl foldclose=all\n\t\t- setl foldminlines=0\n\t\t- setl foldmethod=manual\n\t\t- fold all lines outside of range\n\t\t- setup the nice extras, see below\n..."}, {:name=>"QuickComment", :summary=>"comment/uncomment utility", :description=>"It bases on Chris Russell&#039s BlockComment and i just added some enhancement to it.\nSimply type : <range> C to comment and <range> NC to uncomment. The original functions are also supported."}, {:name=>"tcalc", :summary=>"A small ruby-based RPN-calculator", :description=>"It turns out that ruby is pretty good at maths and deals well with \ncomplex or rational numbers etc. Anyway, in certain occasions a postfix \nsyntax and a stack are better suited for calculations than ruby's infix \nsyntax. So, here comes ...\n\n:TCalc[!]\n    A small ruby-based[*] RPN-calculator, a simple ASCII function \n    plotter, and stack-based playground :-).\n\nThe tcalc.rb script can also be used as a stand-alone calculator (with \noptional support for curses and readline). Run \"tcalc --help\" for \ninformation on the command-line options.\n\nInput:\n    - Numbers (anything that starts with \"-\" or a decimal)\n    - Strings (anything that matches /^\"(.*?)\"$/)\n        - Be aware that the strings and numbers get evaluated by ruby. \n          You can thus execute ruby code by input like: -1;p'foo'\n    - Methods & constants of the following classes are available:\n        Float    :: http://www.ruby-doc.org/core/classes/Float.html\n        Complex  :: http://www.ruby-doc.org/core/classes/Complex.html\n        Rational :: http://www.ruby-doc.org/core/classes/Rational.html\n        Integer  :: http://www.ruby-doc.org/core/classes/Integer.html\n        Matrix   :: http://www.ruby-doc.org/core/classes/Matrix.html\n        Vector   :: http://www.ruby-doc.org/core/classes/Vector.html\n        Math     :: http://www.ruby-doc.org/core/classes/Math.html\n    - #N (pull the item at position N to the top)\n    - Commands: COMMAND[COUNT][,ARGUMENT]\n        - If COUNT is \"#\", the top element will be used.\n    - Enter, escape => exit\n\nTokens are separated by blanks (à la forth). The blanks between the \nwords thus are significant.\n"}, {:name=>"AutoScrollMode", :summary=>"script to let vim auto scroll text for you", :description=>"Sometimes you just read text inside vim. You spend hours in Normal mode, not doing nothing, just scrolling text and pressing hjkl keys all the time. In such situations this script becomes very useful.\nTo enter Auto Scroll Mode, install this script first,\nand than activate it pressing <F21> key from Normal mode (Pause on keyboard)\nTo start scrolling text type 'l', for more info read next section.\n\nCOMMANDS\n\n Commands used in Auto Scroll Mode to change how Vim will scroll text\n\n        0-9        : change type of movement to:\n\n        \"1\"        : character, default\n        \"2\"        : word\n        \"3\"        : WORD\n        \"4\"        : line\n        \"5\"        : half page\n        \"6\"        : full page\n        \"7\"        : full screen\n        \"8\"        : sentence\n        \"9\"        : paragraph        see 'paragraphs'\n        \"0\"        : section        see 'sections'\n\n\n\n Commands used to change how much time will Vim\n sleep until the cursor is moved, default: Vim will sleep forever\n Note: period can be negative, in that case period is changed to\n positive but direction is switched i.e. up becomes down.\n\n\n        \"h\"        : decrease sleep period for 1 millisecond\n\n        \"l\"        : increase sleep period for 1 millisecond\n\n\n        \"k\"        : divides sleep period for 2\n\n        \"j\"        : multiplies sleep period for 2\n\n\n        \"`\"        : set sleep period to zero, default\n\n other useful commands:\n\n        \"r\"        : clean and redraw screen\n\n        <Space>    : toggle pause, text stop scrolling\n        <Enter>    : toggle backward/forward movement\n\n        <Esc>      : exit AutoScrollMode, enters Normal Vim mode\n        CTRL-C     : immediately exit in Normal Vim mode\n"}, {:name=>"of.vim", :summary=>"Switch between open files / Find files by parital name (Similar to TM's Cmd-T)", :description=>"This script works under CLI Vim (not gvim) and provides a curses interface for switching between / opening files simlar to TextMate's Cmd-T command.  It requires Vim to be compiled with Ruby bindings, and if you want it to keep a history, also for Ruby's sqlite3 bindings to be installed (it makes a db in your home directory, .of.db, where it stores info on recently opened files and preferred shortcuts for certain files).  To open a file called accounts_controller.php, you could simply call OF (I bind it to Alt-T) and type in ac -- a list of files under your working directory come up that have these two letters in any order.  Move up and down with arrows or ^P/^N, scroll with your mouse, or click/enter to select.  Escape gets you out.  This is a work in progress.  The code has no comments and needs to be cleaned up, but it does what I want it to for now, and maybe what you want.\n\nThis may be a little slow if run from a directory with a huge amount of files.  I usually start it from the base of whatever project I'm working on."}, {:name=>"VimPdb", :summary=>"Integrated Python debugging within Vim", :description=>"    * Tired of debugging Python using print statements? \n    * Don't like the cumbersome PDB (Python debugger) console? \n    * Prefer using Vim for coding your Python programs? \n\nVimPdb is the solution - allows debugging Python in an IDE-fashion, right within the Vim editor.\n\nFeatures:\n    * Highlighting of currently debugged line and breakpoint lines.\n    * F5 - Run/continue running.\n    * F2 - Toggle breakpoint at current line\n    * Ctrl-F2 / Shift-F2 - Toggle conditional/temporary breakpoint.\n    * F7 / F8 - Step into/over\n    * F12 - Print stack trace\n    * F3 / Ctrl-F3 - Eval/Exec a given statement (in the current debugging context)\n    * Save/load breakpoints into session files.\n    * Cross-platform\n    * And many more... See readme.txt for details \n\nCheck out http://code.google.com/p/vimpdb/ for a screenshot.\n\nImportant Notes\n\n    * It's still considered Beta, so I'm not too sure about its stability or lack of bugs. However, I do appreciate if you could report bugs, suggest features or help out with the known issues (see \"Known Issues\" section in readme.txt). Email me at vimpdb@gmail.com\n    * It's possible to easily implement the debugging capabilities for another editor (e.g. Emacs) - you could write a Python class of your own, which inherits from the PdbIDE class, and implements editor-specific functionalities (such as highlighting). "}, {:name=>"myvim.vim", :summary=>"useful functions", :description=>"Following functions\nC-C for rectangle copy\nF5 F6 for copy likes of code\nS-f5 f6 to copy cut"}, {:name=>"mips.vim", :summary=>"Your standard MIPS syntax highlighting", :description=>"Frankly, I wasn't happy with the state of MIPS highlighting, so this script attempts to correct this.  It recognizes the entire set of MIPS instructions and directives, as well as all registers (be they aliased ($s0), directly numerical ($16), or an FP register ($f0)), correct MIPS comment style, and label declarations.\n\nIf you have any problems, I invite you to contact me and report them.  Enjoy!"}, {:name=>"Flash-Live-Support-Agent-and-Chatroom", :summary=>"http://www.tufat.com/forum/forumdisplay.php?f=5", :description=>"Only for $5\n\nFlashChat includes a set of advanced administrative options so that you can easily manage rooms, users, bans, messages, and much more. \n\nThe room list and message input area can be re-positioned to different parts of the screen by simply dragging and droppinig. These layout positions can also be set by default in the external layout file. \n\nA PHP-based \"bad words filter\" allows you, the chat administrator, to prevent foul language from being viewed within the chat. \n\nFlashChat's text options can also be externally configured in the config.php file. You can add additional font sizes, specify the default font sizes for the interface text, set the default language, and much more! \n\nNearly every color in FlashChat can be modified within the PHP configuration files (using the HEX color code). You can also set custom JPG or SWF background images easily by editing the appropriate theme file, located in the /inc/themes/ folder). \n\nFlashChat has the ability to use small, graphic avatars for any user. You may also set special avatars for administrators, or to distinguish male vs. female users. The background image can be customized for any user as well. \n\nAIML, the Artificial Intelligence Markup Language, has been integrated with FlashChat. This feature allows your chatters to interact with a true artificial intelligence entity, making your chat seem \"alive\" even during periods of down-time. \n\nWith over 50 configuration options available in the FlashChat config.php file, you can make the chat behave in any of dozens of ways. Set IP limits, log limits, flood intervals, inactivity limits, and much more! You will find that FlashChat is one of the most highly configurable chat systems on the Net. \n\nNearly every piece of text in the FlashChat interface can be customized using external language files. Each language supported by FlashChat comes with a separate UTF-8 language file, which can be easily edited using any standard text editor. \n\nAn advanced installation wizard makes installing FlashChat a snap. As long as you know how to use FTP, and have a MySQL database in place on your server, you can install FlashChat. You should be understand how to set file and folder permissions (chmod). \n\nFlashChat integrates with a wide variety of content-management systems, including popular bulletin boards and web builders, like phpBB, Mambo, vBulletin, Xoops, Invision Power Board, GeekLog, CPG-Nuke, AEDating, AZDG Dating, UBB.Threads, WowBB, Simple Machines, e107, WotLab BB, PHP Fusion, LunaByte, MD-Pro, PHP-Nuke, POST-Nuke, WowBB, XMB Forum, and more! New integrations are constantly being added, and are distributed for free. \n\nAs long as you have access to MySQL on your web server, you should be able to install FlashChat without a hitch. You'll need your MySQL database login information, as shown here (this is from the installation wizard). \n\nYou can integrate FlashChat directly into your website template. (requires basic knowledge of HTML and PHP). Along with the many display customizations that can be made with FlashChat, your system will appear seemlessly integrated with your website's design. There is a sample.php file with the FlashChat download which illustrates how this is done. \n\nFlashChat supports over 20 languages, including Eastern languages like Japanese and Chinese. Additional languages can be quickly and easily added by creating the appropriate PHP file, and then adding the reference to the config.php file. Any language can be disabled, modified, or set as the default for the chat. \n\nThe interface layout can be customized through a powerful PHP layout configuration file. Hide or re-arrange almost every part of the FlashChat interface. \n\nFlashChat's advanced admin panel allows you to view messages within any room from any time period (provided that they have not been purged from the database). Advanced search options ensure that you, the FlashChat administrator, will have quick access to any message that you might be looking for. \n\nStarting with FlashChat 4.0, external SWFs can be loaded into the FlashChat interface, and communicate bi-directionally with the chat via an ActionScript 2.0 API. This permits advanced add-ons to be built, extending FlashChat's abilities without modifying the core SWF. \n\nUsers and administrator can ignore other users, share files, engage in private chats, and view user profiles (if available). Administrator can ban and unban users, and have at their disposal a variety of text-only commands like /broadcast and /alert. \n\nThe FlashChat smilie set is one of the largest of any chat system. FlashChat takes it a step further, however, by allowing the chat administrator to change the code for any smilie, disable any smilie, and re-order the smilies easily by just re-ordering the corresponding PHP lines in the config.php file. \n\nAll of FlashChat's sounds are externally configurable via MP3 files. Any sound can be muted by default. \n\nAs with most scripts on TUFaT.com, FlashChat includes 100% of the Flash 2004 Pro. source code, including the Flash project file and all ActionScript 2.0 classes. If there's something that you can't do with the PHP configuration options, you're sure to be able to do it by directly editing the Flash code! \n\nAny text or language setting can be changed by users \"on the fly\". Their choices are remembered by FlashChat using local shared object. The vectorized FlashChat interface adjusts automatically to accomodate increases or decreases in text size. \n\nAny sound option can be muted and tested. Options also exist for right/left speaker balance (\"pan\") and for overall volume. As you would expect, all of these options are fully externally configurable by the chat administrator as well. \n\nEvery theme color scheme can be fully modified by users, with their settings saved by the Flash player as local shared objects. FlashChat comes with multiple custom-designed skins, including Macintosh Aqua, Windows XP, and Gradient Skin."}, {:name=>"nosql.vim", :summary=>"Provides syntax highlighting for NoSQL tables, or any tab-separated (TSV) tables", :description=>"This is a simple syntax file to color columns in NoSQL tables. It's a rather\nheavily modified version of the VimOutliner syntax file. Currently it supports\nup to 16 columns. If you need more than that, you can always tweak the file.\n\nSince NoSQL tables are just TSV (tab-separated) tables, this syntax file will work on any \nTSV table you like. \n\nIf you don't favor NoSQL, you can access TSV tables in perl, e.g., using\nthe DBI module and DBI::AnyData. For example, to access a list of photos:\n\nour $fphotos = \"photos.tsv\";\n\nour $pdbh = DBI->connect('dbi:AnyData(RaiseError=>1):');\n\n$pdbh->func( 'photos', 'Tab', \"$fphotos\", 'ad_catalog' );\n\nNote that you'll need to remove the ^A characters in the header line to access a NoSQL table \nwith DBI like this. That's the only difference I've noted.\n\nFuture versions of nosql.vim might include helpful mappings for navigation, deleting\ncolumns, and so on, as well as syntax highlighting for NoSQL lists and templates.\n\nNoSQL, of course, is a delightful and free collection of scripts that can\nturn flat text files into databases. Instead of locking your data in binary\nand slogging through phpMyAdmin, you can open your tables in Vim, \nedit your data with your usual Vim flair, and then save your queries and\nreports as shell scripts. If you don't yet have NoSQL installed, check out the\nRESOURCES in the help file.\n\nNoSQL homepage: http://www.scriptaworks.com/cgi-bin/wiki.cgi/NoSQL/HomePage?from=NoSQL.NoSQL\n\nnosql.vim homepage: Coming soon. :)"}, {:name=>"BlockDiff", :summary=>"Difference between two blocks (functions etc...)", :description=>"This script provides a simple and fast way to see the difference between two blocks of text.\nThis might be similar source code functions, definitions, etc.\n\nJust select the first portion, goto Menu \"Tools->BlockDiff->This is block 1\".\nSelect the second portion, goto Menu \"Tools->BlockDiff->This is block 2, start diff\".\nThe script will open a new tab, split it and diff the two portions.\n\nIf you prefer the mouse context-menu, a key mapping or ex commands, they all are prepared in the file, just remove the comment and/or change the mappings.\n\nCurrently only for Vim 7.* with GUI (and tabs). "}, {:name=>"vimpp", :summary=>"Object-oriented programming for vim scripts in C++ style.", :description=>"Vim++ is a library to make object-oriented programming with Vim easy and natural. In Vim 7 were added some syntax constructions for object-oriented programming, but some tricky code should be written still, especially for inheritance and object constructors. So Vim++ defines a few commands to enable script writers avoid additional coding and make code more elegant. Vim++ use C++ like syntax for class definition. It defines commands Class, EndClass, Constr, Method, Abstract and Var. Usually class definitions looks as:\n\nClass MyClass : BaseClass1, BaseClass2, BaseClassN\n    Var member1 = 1\n    Constr New(arg1, arg2, arg3) : g:BaseClass1.New(a:arg1), g:BaseClass2.New(a:arg2), g:BaseClassN.New(a:arg1, a:arg2)\n        let self.member2 = a:arg3\n        return self\n    endfunction\n    Constr New1(arg1, arg2, argn) : {'member3': a:arg1}\n    endfunction\n    ........................\n    Method method1(arg1, arg2)\n        ....................\n    endf\n    Method method2(arg1, arg2)\n        ....................\n    endf\nEndClass\n\nSo definition begins with Class classname, then optionally comma-separated list of base classes follows after colon. Then a few constructors, methods and members are defined(in any order). And EndClass command finishes class definition. The object is available in methods and constructors as self. Methods are like usual functions, just use another keyword Method. Constructors are like functions too, though there are a few differences. After usual function-like definitions a list of initializers may present after colon. Initializers usually are objects of base class constructed, but really any expression allowed which can be evaluated to dictionary. Constructor obtain variable 'self' which is already an object of proper type with all methods and members including inherited from base classes. Constructor should return variable 'self', though it can return something another if construction was not successful due to some reasons. Both constructors and methods must be finished with endfunction.\n\nVim++ object is just a dictionary with a few members and few functions defined with 'dict' attribute. Vim++ class is just global variable contains all default to this class methods and members. So methods should be invoked as object.method1(arg1, arg2, argN) and constructors should be invoked as ClassName.New1(arg1, arg2, argN). If you invoke constructor in another function or in initializers list, you should use g: prefix.\n\ns: prefix is not supported in vim++. Don't use it in methods and constructors. Maybe in future versions it will be fixed.\n\nAll classes are subclass of Object class. Object has a few methods:\n\nMethod is(class)                        Is object of class a:class?\nMethod HasParent(class)                 Has object a parent of type a:class?\nMethod HasAncestor(class)               Has object an ancestor of type a:class?\n\nAny script using vim++ should be saved in file with extension .vim++ and placed somewhere in &runtimepath as usual Vim plugin. Though usual Vim plugin can use vim++ and libraries written on vim++ too, it should call function vimpp#Load() first.\n\nHead of vim++ script usually looks like this:\n\nPackage 1.2\nImport vim++ 0.1\nImport Library1\nImport Library2 1.3\nImport Library2 ver > 0.5\nImport LibraryN ver > 0.6.1 && ver < 0.7.4\n\nInstead Package you may use Library. The difference is that a package is loaded always and a library is loaded only if it have been imported.\n\nCommand Import imports some library. It may accept version of library as dot-separated list of numbers or some expression evaluated to integer. In the first case library loaded if and only if its version coincides with import argument. In the second case library is loaded only if expression evaluated to true(i.e. non-zero). Expression in Import argument may use 'ver' variable which contains actual version of library. Versions can be compared using usual comparison operators.\n\nVim++ scripts should import 'vim++' library first. This will prevent script to be loaded by improper version of vim++. Current vim++ version is 0.1.0. The last zero can be omited(but it is not allowed to omit zero in expression ver == 0.1.0).\n\nVim++ contains one built-in library, Reflection. It defines classes Type, FuncType and Method. Constructor g:Type.New(var)\nconstructs Type object for any variable var. Class Type has methods:\n\nMethod IsVimPPObject()                  True, if var is vim++ object, false otherwise.\nMethod GetMembers()                     Returns list which contains members names\nMethod GetMethods(...)                  Returns a dictionary having method names as keys and objects of type Method as values.\nMethod GetConstructors(...)             Returns a dictionary having constructor names as keys and objects of type Method as values.\n\nClass Method represents methods of some class. It is derived from FuncType class which is Type subclass to represent type of function reference.\n\nFuncType has methods: \n\nMethod GetArgList()                     Returns list of names of function arguments.\nMethod Definition()                     Returns definition of the function as list of lines.\n\nVim++ contains syntax and indentation file for .vim++ files.\n"}, {:name=>"LustyJuggler", :summary=>"Switch very quickly between your active buffers", :description=>"LustyJuggler is a high speed buffer juggler.  Having to consciously think about which buffer you need to switch to sucks, so use this instead.\n\nSomeone made a screen cast showing it in action (jump to 6:20):\n\n      http://lococast.net/archives/185\n\n      Some older stuff:\n      http://viewglob.sourceforge.net/lusty-juggler-animated.gif\n      http://viewglob.sourceforge.net/lusty-juggler-annotated.png\n\nLaunch the juggler with this key combo:\n\n      <Leader>lj\n\nThe command bar at bottom is replaced with a new bar showing the names of your currently opened buffers in most-recently-used order.\n\nThe buffer names are mapped to these keys:\n\n      1st --> a or 1\n      2nd --> s or 2\n      3rd --> d or 3\n      4th --> f or 4\n      5th --> g or 5\n      6th --> h or 6\n      7th --> j or 7\n      8th --> k or 8\n      9th --> l or 9\n      10th --> ; or 0\n\nSo if you type \"f\" or \"4\", the fourth buffer name will be highlighted and the bar will shift to center it as necessary (and show more of the buffer names on the right).\n\nIf you want to switch to that buffer, press \"f\" or \"4\" again or press \"<ENTER>\".  Alternatively, press one of the other mapped keys to highlight another buffer.\n\nIf you changed your mind, cancel the juggler with any of \"q\", \"<ESC>\", \"<C-c\", \"<BS>\", \"<Del>\", or \"<C-h>\".\n\nIf you like LustyJuggler, you may also like LustyExplorer: vimscript #1890\n\nDevelopment repository: http://github.com/sjbach/lusty"}, {:name=>"enscript-highlight", :summary=>"EnScript Syntax HighLighting", :description=>"This plugin adds syntax highlighting for Encase Scripts (aka enscript files).\n\nActually it is a modified version of the cpp.vim module, but I'm planning to add autocompletion and more fixups.\n\nPlease. Feel free to send me patches and bug reports to: g??cnapnxr@lbhgrez.pbz"}, {:name=>"idlang.vim", :summary=>"Vim syntax file for IDL 7.0", :description=>"idlang.vim provides basic syntax support for IDL 7.0, it is based on the syntax file  included in vim-7.1.tar.bz2."}, {:name=>"asmc54xx", :summary=>"TI DSP Assembler for the C54xx family", :description=>"Basic assembler support for the C54xx DSP chip family from TI."}, {:name=>"TranslateIt", :summary=>"Translate a word under cursor using custom dictionary utility", :description=>"This script looks up a word under cursor in a dictionary using custom utility such as sdcv (console version of StarDict program)\n"}, {:name=>"ttagecho", :summary=>"Show current tag information", :description=>"This plugin is similar to echofunc (vimscript #1735) to which it owes \nmuch inspiration and two lines of code. echofunc is probably also better \ntested.\n\nIt displays some information about the tag under the cursor or mouse \npointer either in the echo area or as balloon help (see \n|g:ttagecho_balloon_patterns|). If there are more than one tags that \nmatch, you can loop through the tags by invoking the respective commands \nrepeatedly.\n\nIf hookcursormoved (vimscript #2037, version >= 0.4) is installed, for \ncertain filetypes (see |g:ttagecho_parentheses_patterns|) it will \ndisplay the information in the echo area also if the cursor moves over a \nround parenthesis.\n\nIf you don't like the default format for the tags, you can define the \nfunction TTagechoFormat_{&filetype}(a:tag) that should return some nicely \nformatted information.\n"}, {:name=>"soso.vim", :summary=>"Color scheme with light-gray background that supports Vim7 highlight groups", :description=>"This is a color scheme with light-gray background ideal for programming. Highlighted items have dark colors to please the eyes but provide enough contrast to distinguish between them.\nVim7 highlight groups are supported, e.g. tab line, completion menu, spelling, and paren matching.\nTogether with the ShowPairs plugin (vimscript #626) this color scheme provides highlighting for being inside matching parens (light green background) or exactly on a paren (emphasized light green background).\nWorks for GUI and CTerm."}, {:name=>"PropBank-Semantic-Role-Annotations", :summary=>"Syntax highlighting for PropBank Semantic Role Annotations", :description=>"Syntax highlighting for PropBank Semantic Role Annotations. \n[http://www.cs.rochester.edu/~gildea/PropBank/Sort/]\n\nThe highlighting patterns are based on the following css:\n[http://www.cs.rochester.edu/~gildea/pb_style.css]\n\nScreenshot: [http://wuzhaojun.googlepages.com/propbank.png]"}, {:name=>"matchparenpp", :summary=>"Improvement over standard matchparen plugin", :description=>"Improves over standard matchparen.vim plugin by echoing line containing matching bracket in the status line so you can quickly see which block is terminated by this paren.  Also scans for braces/parens which are off-screen.\n\nIf you write functions or blocks like this:\nif (condition)\n{\n    ...\n}\nthe plugin will echo the line \"if (condition)\" and not the lone \"{\".\nBy default, the plugin scans the line containing the opening brace and the two lines above that, looking for the statement that begins the block, be it a loop or function definition.  If you want more or less, set it in the variable g:MP_stmt_thresh.\n"}, {:name=>"winwkspaceexplorer", :summary=>"IDE like Project explorer ( plugin for winmanager )", :description=>"Many IDEs make it easy to organise source files into projects. Some IDEs then make it easy to organise projects into workspaces which can be explored. This is very useful for related projects where one may be an executable and another a required library. Code::Blocks is a very good examples of such an IDE. This is a feature that this plugin attempts to mimic inside the vim plugin winmanager. winmanager makes it incredibly easy to write such plugins (although the availability of an  example would be much appreciated).\n\nThere are however major differences between what this plugin attempts to achieve and what the workspace/solution explorers in other IDEs give you. Classic IDE project explorers also give you access to build options and 'project settings', essentially configurations that would normally be within the scope of a makefile. winworkspaceexlporer does not attempt to do the this. It would not be appropriate. Most people coding with vim would probably be using 'make' or one of its many variants or replacements ( I use Scons ). It is more natural to edit the equivalent of the makefile directly in vim. Adding, deleting files to a project does not need to be supported in a plugin like this as these changes would be carried out directly in the makefile-like file. Whilst I do not require IDE workspace-explorer capabilities to set project options, compiler flags , link flags etc, I did have a need for a workspace-explorer-like plugin for vim that would simply let me explore the project files and organise them conveniently, hence winwkspaceexplorer.\n\nThe preferred way to generate the winwkspaceexplorer PROJECT files would be as additional targets in the makefile. I use SCons ( replacement for make)  and on Windows the project file for a popular  IDE gets created on the fly during the build process by code in the sconscript file ( Scons version of a makefile)(Scons actualy has this feature builtin). Similarly on Linux and Cygwin a winwkspaceexplorer project file is generated on the fly by the same sconscript file.\n\nThere are alternatives such as the script found at  http://www.vim.org/scripts/script.php?script_id=69. This is a very good plugin and definitely worth trying out. However I needed something that I could use with the winmanager, which is my first choice for the foundation of a very good IDE.  \n\nThis plugin is in early stages but, for me very useable. There are many more things that can be added easily. I am however keen to keep the plugin minimalist and most importantly do not want to duplicate any functionality  between winwkspaceexplorer and the makefile. \n\n\n\nPlease send any comments, suggestions,  or bugs to narinder_claireATyahoo.co.uk\n\n[NOTE]:  There are 2 entries for the winmanager plugin on vim.org. The original :\n                              http://www.vim.org/scripts/script.php?script_id=95\n               and its descendant \n                              http://www.vim.org/scripts/script.php?script_id=1440\n               I use the latter as its a continuation of the first and contains bugfixes.\n               To understand why there are two entries read the notes for the latter.\n\n \n\n================================================\nCHANGE LOG\n================================================\n02/11/2007 initial upload\n------------------------------------------------------------------------------------------------------------------\n03/11/2007 Feature: Added folding for Workspace explorer window. Syntax highlighting added to make the Workspace Explorer window nicer to use.\n------------------------------------------------------------------------------------------------------------------\n04/11/2007 Bug Fix: While you had a workspace loaded  then a change to any of the project files\nwould NOT force an update of the workspace explorer on the next window refresh. This has now been fixed. What hasn't been 'fixed' is that you need to press CTRL-W a few times  to force the workspace window to refresh.\n---------------------------------------------------------------------------------------------------------------------\n05/11/2007 Feature Tweak: Selecting a file in the workspace explorer and pressing <CR>,<TAB> or double-clicking to edit the file only worked in normal mode, now it also works in insert mode too. \nI just don't want to keep pressing <Esc> and THEN select a new file to edit , I prefer to just select and edit. \n----------------------------------------------------------------------------------------------------------------------\n10/11/2007 Feature Tweak (v0.32): It was a bit annoying that files displayed in the workspace were displayed in a random order. This has been fixed, now they are displayed in alphabetic order ( almost , uppercase takes precendant over lower case so 'Z' before 'a').            \nBug Fix (v0.33):Every time there was a change to any of the modification times of any of the projects in the workspace, everything in the workspace window would get folded up. This was really annoying as my makefile creates a project file on the fly and every time make was run everything would get folded up. This has now been fixed.                                                         \n----------------------------------------------------------------------------------------------------------------------- \n12/11/07 Bug FIx : Files failed to open for edit if they were in the same directory as the workspace file and project file , and the the cwd was not the directory containing the workspace file.\n-----------------------------------------------------------------------------------------------------------------------  \n24/04/08 v0.33.2 Minor Bug fix. Thanks to Wang Danqi for the bug report \n         and bug fix. The following is an extract from the report.\n         \"..when I installed the script in my vim plugin directory and\n         launch winmanager, I got a error report. Finally I found the\n         error was occured by line 90 in winwkspaceexplorer.vim, in \n             function! WKSpaceExplorer_Start():\n               call s:EditWKS(getcwd().\"/\".fnamemodify(getcwd(),\":t:r\")i.g:wksExtension)\n         I changed it to \n               call s:EditWKS(getcwd().\"/\".fnamemodify(getcwd(),\":t:r\").g:wksExtension)\n         by delete the character 'i' and it now works smothly.\" - Wang Danqi\n\n-----------------------------------------------------------------------------------------------------------------------  \n\n\n"}, {:name=>"Warm-grey", :summary=>"A monochromish, light slightly warm theme", :description=>"Tries to look as clear as pyte but a little less saturated with a slight \"warm\" touch.\n\nEdit: I removed the screenshot as I won't continue to work on this theme anymore. If you really like it and want to see it developed further, contact me (e.g. via http://leetless.de), if I see theres still a bunch of people wo like to see me working on this theme, I might decide to do so."}, {:name=>"haskell.vim", :summary=>"Syntax file for Haskell", :description=>"This script provides syntax highlight for Haskell.\nIt will highlight all standard prelude functions, types and constants.\n\nDownload at http://rcg-pt.net/programacao/haskell.vim.gz\n\nPS: This script is an improvement on the vim default haskell script."}, {:name=>"coq-syntax", :summary=>"syntax colouring for coq files", :description=>"All is in the title: syntax colouring for the coq proof assistant files (*.v).\n\nAlso check http://www.vim.org/scripts/script.php?script_id=2079 for indentation.\n\nSome people asked me if I planned to do something to interact between vim and coq. I answered that yes and that I had started it. The plugin is usable but not \u0093publishable\" :) However I now have many other things to do and am not using Coq at that time. So if I publish such a thing some day it may be in quite a long time. Apologies."}, {:name=>"xemacs-mouse-drag-copy", :summary=>"(x)emacs style quick copy and paste", :description=>"In xemacs and emacs if it is enabled, there is a very handy way to copy and paste  without repositioning the cursor.  You press the control key, drag the mouse over some text, and when you release the mouse button the text will be inserted in the original position.  There is no need to move the position of the cursor.  Doing the same while pressing the shift key instead of the control key will move text instead of copying.  This script does these things in vim, for insert mode."}, {:name=>"checksum.vim", :summary=>"Compute checksums on files or lines", :description=>"Compute MD5 or SHA1 checksum of entire file or range of lines.\nStore checksum in buffer variable or in user-specified\nregister.  Uses external programs to compute checksums;\ncurrently supports GNU md5sum, GNU sha1sum, and OpenSSL.\nIf you are a Windows user, you should install GNU CoreUtils\nfor Windows\n(http://gnuwin32.sourceforge.net/downlinks/coreutils.php)\nor Win32 OpenSSL\n(http://www.slproweb.com/products/Win32OpenSSL.html)\n\nUsage:\n:{range}Md5 [register] - displays MD5 checksum for given range\nof lines (default is entire file) and stores in b:md5sum and\nthe register named as an argument.\n:{range}Sha1 [register] - displays SHA1 checksum for given\nrange of lines (default is entire file) and stores in\nb:sha1sum and the register named as an argument.\n<Leader>md - displays MD5 checksum for entire file or visual\nselection and stores in b:md5sum\n<Leader>sh - displays SHA1 checksum for entire file or visual\nselection and stores in b:sha1sum\n\n"}, {:name=>"executevimscript", :summary=>"Execute selected vimscript lines", :description=>"This package allows you to:\n- Execute some selected vimscript lines\n- Create a vimscript sandbox where you can type & test vimscript fast\n\nThis is a very rough version, with no checks. It currently works only on lines, but in later versions hopefully it will work with any selection, including rectangular selection.\n\nThe goal of this package is to provide a Vim equivalent of Smalltalk&#039s \\\"do it\\\" and \\\"print it\\\".\n"}, {:name=>"newlisp", :summary=>"newLISP syntax file", :description=>"Syntax file for the newLISP language (http://www.newlisp.org). Another location is http://slobin.pp.ru/vim/syntax/newlisp.vim\n"}, {:name=>"yate", :summary=>"This plugin makes search in tags more convenient.", :description=>"This plugin makes search in tags more convenient. It holds query and search result in one buffer for faster jump to desired tag.\n\nUsage:\nCommand :YATE toggles visibility of search buffer.\nParameter g:YATE_window_height sets height of search buffer. Default = 15\nParameter g:YATE_strip_long_paths enables(1)/disables(0) cutting of long file paths. Default = 1.\nParameter g:YATE_enable_real_time_search enables(1)/disables(0) as-you-type search. Default = 1.\nParameter g:YATE_min_symbols_to_search sets search string length threshold after which as-you-type search will start. Default = 4.\nParameter g:YATE_max_matches_to_show sets the maximum number of matches to display. If it's negative than all lines will be shown. Default = -1.\nParameter g:YATE_history_size sets the maximum number of stored search queries in history. Default = 10.\n\nTo get list of matching tags set cursor on string containing expression\nto search (in YATE buffer) then press <Tab> or <Enter>, never mind if \nyou are in normal or insert mode.\n\nTo open tag location set cursor on string with desired tag and\npress <Enter> or double click left mouse button on this string, \nnever mind if you are in normal or insert mode.\n\nTo open tag in new tab press <Ctrl-Enter>, in new horizontal\nsplitted buffer <Shift-Enter>, in new vertical splitted buffer <Ctrl-Shift-Enter>.\n\nTo get queries history press <Ctrl-H> in insert or normal mode in\nsearch string. Autocompletion using history also works by <Ctrl-X><Ctrl-U>."}, {:name=>"ttagcomplete", :summary=>"Context-sensitive tags-based completion and code skeletons", :description=>"In theory, this plugin provides a framework for context-sensitive \ntags-based completion and code skeletons (requires tSkeleton vimscript \n#1160). I.e. the completion function checks the context and filters the \navailable tags accordingly. You should thus get only those tags included \nin the list that are actually useful in a given context (eg because the \nare valid methods of a certain class).\n\nIn practice, the context sensitivity is currently only implemented for \nJava and requires a tags file for the JDK sources to be created (see the \nnotes on |tlib#tag#Retrieve()| for details). It also makes certain \nassumption about how variable declarations look like, e.g. the \nclass/type name should be in the same line as the variable name; class \nnames start with an upper-case letter etc.\n\nLimitation: you have to type g:ttagecho_min_chars = 1 chars before\ncompletion is allowed.\n\nIt shouldn't be too difficult to adapt this for other statically typed \nlanguages with formal variable declarations. As the source code isn't \nactually parsed or anything, there is little chance to use this \nefficiently with dynamically typed languages like ruby where the \ntype/class is only known at run-time.\n"}, {:name=>"bbcode", :summary=>"bbcode syntax and code templates", :description=>"This plugin includes a syntax highlighting for bbcode and some code \nskeletons for use with tSkeleton (vimscript #1160).\n\nIf viki (vimscript #861) >= 304 is installed, tex regions will be \nproperly highlighted too.\n\nIf you use tSkeleton < 403, you might also want to set these variables:\n\n    let g:tskelKeyword_bbcode = '\\(\\[\\*\\|[\\[\\\\][*[:alnum:]]\\{-}\\)'\n    let g:tskelBitGroup_bbcode = ['bbcode', 'tex']\n\nThe basic syntax file can also be used without any of these add-ons.\n\n"}, {:name=>"yet-another-svn-script", :summary=>"makes svn add /commit much easier from vim", :description=>"Probably you want to try http://www.vim.org/scripts/script.php?script_id=90 instead. It's much more powerful\n\nDefault mapping are provided by\n\nvl#dev#versioncontrolsystem#manager#VCSUI()\n(and see the tagging UI function below)\n\nEg when committing you'll get a new window like this:\n=============  =======================================================\n\nVCCommit\n\n  press <m-h> for a short help, <m-f> when you have finished\n\n@\#@ /pr/svnnix/trace/nixpkgs/trunk/ :\n@\#@ /pr/svnnix/trace/nixpkgs/trunk/pkgs/top-level/all-packages.nix :\n@\#@ comment for all (additional comments will be added below this) :\n=============  =======================================================\n\nEither place you comment below the last line (comment for all)\nOr add individual comments for each file (a svn commit will then be executed for each of them)\nThe comment for all will be added as well in this case\n\nIf a file hasn't been added it will be added automatically.\n\nSee the **tagging.vim file (defining b:tagged) which tells the script which\nfiles to add / commit\n\nIt does also define the command UntagAll\n\nYou want to call vl#lib#ui#tagging#TaggingUI() to add the <m-t><m-g> mapping\ntoggling the tagged status.\n\nI've been using this script for quite while now.\nIt's not finished but it does all I need most of the time.\n\nIf you have trouble (errors) then try\n:echo g:systemResult\nwhich shows the last command output much nicer then the exception\n\nFeel free to sent me a mail with any questions/ enhancements etc.\n"}, {:name=>"switch-files", :summary=>"switch between .c and .h files or different path and same filename easily", :description=>"Call \nfunction! vl#lib#files#switch_files#SwitchFileUI()\n  map <m-s><m-b> :call vl#lib#files#switch_files#SwitchFile()<cr>\nendfunction\nsomewhere to get the default mapping.\n\nThen use lines like this\ncall vl#lib#files#switch_files#SwitchFileRegisterLocalRegexSwap('.h$', ['.cpp', '.cc' ])\nautocmd BufRead,BufNewFile /pr/*nix,/pr/*nix/*.sh call vl#lib#files#switch_files#SwitchFileRegisterLocalRegexSwap('/pr/mynix/','/pr/svnnix/')\n\nfor each buffer to tell the script how to find alternates.\n\nThere is also some support to add custom functions. Drop me an email if you want to know more"}, {:name=>"rcg_gui", :summary=>"A dark background color scheme for GUI", :description=>"A simple dark background color scheme for GUI\n\nDownload at http://rcg-pt.net/programacao/rcg_gui.vim.gz"}, {:name=>"rcg_term", :summary=>"A dark background color scheme for Terminal", :description=>"A simple dark background color scheme for Vim.\n\nDownload at http://rcg-pt.net/programacao/rcg_term.vim.gz"}, {:name=>"indenthtml.vim", :summary=>"alternative html indent script", :description=>"This script is based on the distributed indent scripts for HTML (and CSS).  The original script becomes very slow when indenting more than a few lines, thus here is an improvement.\n\n\nCustomization:  Variables you can set in the vimrc.  Given values are examples to change the defaults.\n\n  Note: This applies to v0.6 (!).  Earlier version used :IndHtmlLocal for customization.  Details can always be found in the script header.\n\n  You can set the indent for the first line after <script> and <style> \"block tags\" (default \"zero\"):\n\n      :let g:html_indent_script1 = \"inc\"\n      :let g:html_indent_style1 = \"inc\"\n\n      VALUE\tMEANING\n      \"zero\"\tzero indent\n      \"auto\"\tauto indent (same indent as the blocktag)\n      \"inc\"\tauto indent + one indent step\n\n  The following <tags> increase the indent (for what follows) per default (taken from the original script, but slightly modified):\n      a, abbr, acronym, address, b, bdo, big, blockquote, button, caption, center, cite, code, colgroup, del, dfn, dir, div, dl, em, fieldset, font, form, frameset, h1, h2, h3, h4, h5, h6, i, iframe, ins, kbd, label, legend, map, menu, noframes, noscript, object, ol, optgroup, q, s, samp, select, small, span, strong, sub, sup, table, textarea, title, tt, u, ul, var, th, td, tr, tfoot, thead\n\n  You can add further tags with\n\n      :let g:html_indent_inctags = \"html,body,head,tbody\"\n\n      \" the original script uses the g:html_indent_strict variable to include these tags\n\n  You can remove tags with\n\n      :let g:html_indent_autotags = \"th,td,tr,tfoot,thead\"\n\n      \" the original script uses the g:html_indent_strict_table variable to include these tags\n\n  Default value is empty for both variables.  The default tags that increase indent are defined once per session only.\n\n\nProblems and Bugs:\n\n  - still no indent rules for attributes spanning several lines\n  - sometimes cindent() thinks it is better to use zero indent for what follows ...\n  - some tags increase indent per default, but their closing tag is optional, e.g. <td> -- the script cannot detect missing closing tags\n\n\nSuggestions, bug reports welcome (I'm not writing HTML regularly)."}, {:name=>"setsyntax", :summary=>"Set options specific for the syntax group under cursor", :description=>"This plugin sets options/variables according to the syntax under the \ncursor. It was originally created in response to \nhttp://groups.google.com/group/vim_use/browse_frm/thread/ff624d5a68f0a562 \nand to solve a similar problem. While this plugin solves that other \nrelated problem it doesn't seem to work properly for tex files.\n\nConfiguration:\n\ng:setsyntax_options            (default: {})\n    This variable is a dictionary of dictionaries of dictionaries.\n    {FILETYPE => {SYNREGEXP => {OPTION/VARIABLE: VALUE}}}\n    \n    Example:\n      let g:setsyntax_options['tex'] = {'^texMathZone': {'&l:tw': 0}}\n\n\n:SetSyntax SYNTAX,... VAR VALUE ...\n:SetSyntax /REGEXP/ VAR VALUE ...\n    Set syntax-specific options for the current buffer. When using a \n    REGEXP, the syntax names have to be already defined, i.e. you can use \n    the REGEXP only after the syntax file was loaded.\n    \n    VAR must be a variable name (see |:let| and |:let-&| for details). \n    I.e., if you want to set a option, e.g. spelllang, don't use\n\n        SetSyntax /^texMath/ spelllang \"\"\n\n    but instead use:\n\n      SetSyntax /^texMath/ &l:spelllang \"\"\n    \n    VALUE actually is an expression that will be evaluated when setting \n    the variable.\n    \n    NOTE: Blanks in VALUE must be escaped with a backslash. See the help \n    page on <f-args> for details.\n\n"}, {:name=>"phtml.vim", :summary=>"A syntax file to php templates.", :description=>"Use this script to enable syntax coloring when using a mix of html and php or with template engines like those used by CakePHP, Symfony, SolarPHP and others\n\nTo use xmledit (vimscript #301) with phtml files change line 105 to:\n\nif &filetype == 'xml' || (!exists (\"g:did_xhtmlcf_inits\") && exists (\"g:xml_use_xhtml\") && (&filetype == 'html' || &filetype == 'xhtml' || &filetype == 'php' || &filetype == 'phtml' || &filetype == 'rhtml'))\n\nAnd line 168 to:\n\nif (&filetype == 'html' || &filetype == 'php' || &filetype == 'phtml') && (!exists (\"g:xml_no_html\"))\n\nAnd symlink:\n\ncd $HOME/.vim/ftplugin\nln -s xml.vim phtml.vim"}, {:name=>"industrial", :summary=>"A Darkgrey with blue and green colorscheme.", :description=>"I took the colorscheme \"jocafa\" and edited the colors.\n\nIt has a darkgrey background with blue and green highlights.\n\nSearch highlights are yellow.\n\nscreenshot: http://img182.imageshack.us/img182/9925/gvimindustrial10pn6.png"}, {:name=>"Coq-indent", :summary=>"Indentation for coq files", :description=>"Pretty clear, no ?"}, {:name=>"autoresize.vim", :summary=>"Automatically Resizing Splitted Current Window Size Larger.", :description=>"Overview\n--------\nThis plugin updates vim splitted window size automatically large.\nCurrent window size will be large, and the other window size will be\nsmall.\n\nInstallation\n------------\n1. Copy the autoresize.vim script to the $HOME/.vim/plugin or\n   the $HOME/vimfiles/plugin. Refer to the ':help add-plugin',\n   ':help add-global-plugin' and ':help runtimepath' topics for\n   more details about Vim plugins.\n2. Restart Vim.\n\nUsage\n-----\n1. Split vim window, and so current window height or width is automatically\n   updated with large value. \n2. You move cursor to the other window from one, the other window size is\n   automatically updated.\n3. If you check this script,\n   split vim window with \":split\" or \":vsplit\",\n   and push <C-W><C-W><C-W><C-W><C-W><C-W>....\n\nConfiguration\n-------------\n1. Minimum window size.\n   Script use \"g:AUTORESIZE_ANOTHER_WINDOW_HEIGHT\" variables when you split window\n   horizontally.  If you split window vertically then, script use\n   \"g:AUTORESIZE_ANOTHER_WINDOW_WIDTH\" variables.\n   These variables are used as the other window size parameter. (not a current)\n\n   example.\n       :let g:AUTORESIZE_ANOTHER_WINDOW_HEIGHT = 5\n       :let g:AUTORESIZE_ANOTHER_WINDOW_WIDTH = 12\n\n2. Disable script defined autocommands.\n   Script add 1 autocommand to your vim environment.\n   If you want make this autocommand disable,\n   set \"g:AUTORESIZE_AUTOCMD_DISABLE\" variables to \"1\".\n\n   example.\n       :let g:AUTORESIZE_AUTOCMD_DISABLE = 1\n\n3. Run autocommand in specific filetype.\n   If you use this script only in some filetype, add this autocommand to your vimrc.\n\n   example.\n       :let g:AUTORESIZE_AUTOCMD_DISABLE = 1\n       :autocmd WinEnter *.txt :AutoWindowResize\n\n4. Run script on your action\n   If you run this script with some your action (for example, push F4),\n   add this configuration to your vimrc.\n\n   example.\n       :let g:AUTORESIZE_AUTOCMD_DISABLE = 1\n       :nmap <F4> :AutoWindowResize<CR>\n\nLimitation\n----------\n1. This script will run only on 2 window. Vim run on 3 splitted window,\n   on 4 splitted window, or on 1 window then, this script is not running.\n"}, {:name=>"mysqlquery", :summary=>"Simple and Easy to use utility for executing MySQL queries", :description=>"Simple and Easy to use utility for executing MySQL queries.\n\nWith this script comes only one function ExecMySQL(), so you need to bind a key to this function, for executing queries. For example:\n\n:vmap <F9> :call ExecMySQL()<CR>\n:nmap <F9> V:call ExecMySQL()<CR>\n\nAfter that you need to write a SQL query, then select it (or if query consist only of one line, point cursor to it) ant press <F9>.\n\nQuery will be executed and in new buffer you will see result of that query. Results are shown in beautifully aligned table.\n\nBest way to work with this plug-in is separate file for queries. At the beginning of that file, in one of 10 first lines you need to add connection string:\n\n -- mysql://username:password@hostname/dbname\n\nYou can add many connection strings, but only first found string will be used. So if you want to change database, just move connection string at the very top of file.\n\n\nAlso I suggesting you to use this mapping for better usage:\n\nmap <F5> :b#<CR>\n\nWith this mapping, after executing a query, you can easily switch back to query editing, just by pressing <F5>."}, {:name=>"comments.vim--Plt", :summary=>"Simple, flexible commenting script", :description=>"This is yet another script to do some code commenting/uncommenting. It is simple and easy to use, and should work for almost any filetype.\n\nIt defines a command :CommentStyle which takes one argument, which can be either a comment prefix (\"# \" for shell) or a comment string (\"/* @ */\" for C) with a @ as a placeholder.\nIt also defines three mappings: >c to comment, <c to uncomment, and =c to change the CommentStyle.\n\nNested comments are handled correctly (this means that if you comment the following C code line:\nx /* comment */ ++;\nthen the inner comment will be protected)."}, {:name=>"javascript.vim--welshare", :summary=>"powerful javascript syntax", :description=>"powerful javascript syntax support color and indent."}, {:name=>"gen_vimoptrc.vim", :summary=>"Generate vim option configuration file from option-window.", :description=>"Overview\n--------\nGenerate \"_vimoptrc\" file that contains your all vim optin settings.\nNew command \":GenVimOptrc\", this script added, parse \"option-window\" and\ngenerate configuration file to your home directory.\nThis script support your easily update configuration file.\n\nInstallation\n------------\n1. Copy the autoresize.vim script to the $HOME/.vim/plugin or\n   the $HOME/vimfiles/plugin. Refer to the ':help add-plugin',\n   ':help add-global-plugin' and ':help runtimepath' topics for\n   more details about Vim plugins.\n2. Restart Vim.\n\nUsage\n-----\n1. Run \":options\" command.\n2. Update your vim options.\n3. Run \":GenVimOptrc\" command in \"option-window\",\n   this command generate \"_gvimoptrc\" in your $HOME directory.\n4. Source \"_gvimoptrc\" in your gvimrc,\n   for example\n\n   :if has(\"gui_running\")\n     :source $HOME/_gvimoptrc\n   :endif\n\nConfiguration\n-------------\n1. You want use \".gvimoptrc\" instead of \"_gvimoptrc\",\n   set your _gvimrc this code.\n   \n   example.\n       :let g:GEN_VIMOPTRC_USE_DOT = 1\n\nLimitation\n----------\n1. Currently only GUI version of vim is supported.\n\nNote\n----\n1. see also \":help save-settings\".\n"}, {:name=>"TI-Basic-Syntax", :summary=>"Syntax for TI-99/4+ Basic and Extended Basic", :description=>"Syntax file covering TI-BASIC and TI Extended Basic from the TI-99/4 Extended Basic manual circa 1981."}, {:name=>"code-snippet", :summary=>"Simple input assistance of code snippets", :description=>"FILE COMPOSITION:\n\nplugin/code-snippet.vim : a script file.\ndoc/code-snippet.txt : an English help file.\ndoc/code-snippet.jax : a Japanese help file.\n\nSUMMARY:\n\nThis plugin provides a simple input assistance of code snippets.  A code snippet is an idiom much used in source codes or markuped texts.  Here are the basic steps to use (and they are almost all).\n\n        1. Register snippets (generally in filetype plugins).\n        2. Type a trigger string in the insert mode.\n        3. Press <S-CR> or <C-CR> to expand a snippet, and jump to each next/previous placeholder.\n        4. Press <CR> to fill in a placeholder.\n\nSnippets are registered as abbreviations.  You can therefore expand them by pressing <Esc> like mere abbreviations.\n\nPlaceholders can contain default strings.\n\nThis plugin is well configurable.  You can configure these points.\n\n        * Map commands to other keys.\n        * Use the select mode instead of the visual mode.\n        * Change the format of placeholders in general or buffer-local.\n\nEXAMPLE:\n\nType like this in the commandline mode.\n\n        :StringAbbrLocal fputs() \"fputs([~str~], [~fp:stderr~])[~~]\"\n\nThen type like this in the insert mode.\n\n        fputs()\n\nAnd press <S-CR>.\n\n        fputs([~str~], [~fp:stderr~])[~~]\n\nThe line is expanded like above and \"[~str~]\" is selected in the visual mode.  \"[~ ... ~]\" is a placeholder.  Each time you press <S-CR>, the cursor jumps to the next placeholder.  Press <C-CR> to jump back to the previous placeholder.\n\nWhen you press <CR>, the placeholder under the cursor is cut and Vim switches to the insert mode.  So that you can fill in the place.  Pressing <CR> at the second placeholder \"[~fp:stderr~]\", the default string \"stderr\" is inserted.  If you want to insert another word, it can be deleted by pressing <C-U> (see :help i_Ctrl-U).\n\nThe last empty placeholder \"[~~]\" is not selected by <S-CR>, but simply deleted so that you can insert a semicolon and so on."}, {:name=>"refactor", :summary=>"C/C++ refactoring tool", :description=>"This plugin contains some basic refactoring commands for C/C++.\nFor the complexity of C++, instead of really parse the source code, I used \nregular expression matches. But it works well as I tested. \n\nNOTE: It doesn't work for old style parameter declaratoins! And I admit that it may mess up your code sometime if you occasionally forget the rules. Thanks for the kind man who point out this.\n\n\nThe refactor commands and their default key map currently are:\n\t1. <A-r>e \tExtract method\n\t2. <A-r>p \tlocal variable to Parameter\n\t3. <A-r>r \t Rename local variable\n\t4. <A-r>d \tDelete parameter\n\t5. <A-r>o \treOrder parameters\n\t6. <A-r>c \tintroduce Constant\n\nBiDongliang \tbidongliang_2000@126.com 2007/12/4"}, {:name=>"WuYe", :summary=>"A dark background color scheme", :description=>"A dark colorscheme which works in the GUI and in 8/16 colour terminals .\n\nScreenshot: http://i30.tinypic.com/29ghbnd.png\n\n\"WuYe\"=\"午夜\""}, {:name=>"Acpp", :summary=>"Does a better job than A script", :description=>"If we call \":Acpp\" when editing \"/path/to/file/src/ae/cmd/File.cpp\", VIM opens complementary \"/path/to/file/include/ae/cmd/File.h\" file, and vice versa. That is, it searches for the last occurrence of \"/src/\" or \"/include/\" and changes this along with the file extension (h to cpp, and cpp to h).\nNOTE: This works with ONLY single occurrence of \"/src/\" or \"/include/\"\nIf current full path doesn't contain \"/src/\" or \"/include/\" and/or does not end with \"h\" or \"cpp\" then \"Acpp\" opens a file named \"0\"\n\nIt does not strictly depend on Vim 7, it's just the version I have, the script should work fine with previous versions too."}, {:name=>"view_diff", :summary=>"view diff file in an eaiser way by vimdiff", :description=>"Tags: vimdiff svn subversion diff \n\nWHY I WRITE IT:\n  During daily work, I often need to read the result of \"svn diff\" before I commit my work into subversion repository. But only reading the diff result is tedious: sometimes I want to read more context lines; sometimes, when I find some mistake I made in my work, I have to open the file and modify the codes there. On the other hand, vim provide a very good way to view the diff of two versions of file, that is vimdiff, I like it! So f we can use it here that will be very useful. But after some web searching, I did not find anything that can help me here. So the script comes out.\n\nHOW TO USE IT:\n  Normally I use this script in the following way: \n    1. piped svn diff result to vim, for example: \"svn diff | vim - \"\n    2. use shortcuts to open vimdiff modes on current diff file\n    shortcuts: \n        <leader>dv   :   open two versions of file in vimdiff mode\n        <leader>df    :   open  the old/new file \n        <leader>dn   :   open next two versions of file in vimdiff mode in svn diff result file\n        <leader>dp   :   open previous two versions of file in vimdiff mode in svn diff result file\n        <leader>dz   :    fold svn diff result file\n    This script work both for svn diff result and normal diff result. \n\n    There is not more docs till now(maybe more in future), but you can learn this script by trying it :)    \n\n  I need to point out that I am not an experienced vim script programmer and I just want to work out a script that can fulfill my needs. So the codes of script may not be beautiful, but I have used it for several months and it works fine. \n\n  If you have any comment, bug report, patch, please email it to me(linsong DOT qizi AT gmail DOT com), Thanks. \n\n  Happy Vimming! \n\n"}, {:name=>"verilog.vim", :summary=>"Verilog HDL/SystemVerilog HDVL indent file", :description=>"\" Title:        Verilog HDL/SystemVerilog HDVL indent file\n\" Maintainer:\tMingzhi Li <limingzhi05@mail.nankai.edu.cn>\n\" Last Change:\t2007-12-16 20:10:57 CST\n\"\n\" Buffer Variables:\n\"     b:verilog_indent_width   : indenting width(default value: shiftwidth)\n\"\n\" Install:\n\"     Drop it to ~/.vim/indent \n\"\n\" URL:\n\"    http://www.vim.org/scripts/script.php?script_id=2091\n\"\n\" Revision Comments:\n\"     Mingzhi Li  2007-12-16 20:09:39 CST Version 1.2      \n\"        Bug fixes\n\"     Mingzhi Li  2007-12-13 23:47:54 CST Version 1.1      \n\"        Bug fix, improve performance and add introductions\n\"     Mingzhi Li  2007-12-7  22:16:41 CST Version 1.0  \n\"        Initial version\n\"       \n\" Known Limited:\n\"     This indent file can not work well, when you break the long line into\n\"     multi-line manually, such as:\n\"      always @(posedge a or posedge b \n\"          or posedge c ) begin\n\"         //...\n\"      end \n\"     Recommend to use the coding style(wraped by vim automatically) as following:\n\"       always @(posedge a or posedge b or posedge c ) begin\n\"         //...\n\"       end "}, {:name=>"reloaded.vim", :summary=>"Simplified Matrix theme for console/gui", :description=>"This is a simplified version of the Matrix theme using colors that work in the console as well as the GUI (Should look about the same in both)"}, {:name=>"complval.vim", :summary=>"complete a variable's value after :let in the command line", :description=>"Usage Example:\n    :let foo = \"bar\"\n    :let foo = <C-G>\n\nCompletable values are numbers, strings, lists and dicts.\n\nGood for changing customization variables."}, {:name=>"Puppet-Syntax-Highlighting", :summary=>"Syntax Highlighting for Puppet (Conf Mang.)", :description=>"Syntax highlighting for Puppet, http://reductivelabs.com/trac/puppet, the distributed configuration management system. Based on the initial work by Luke Kanies.\n\n"}, {:name=>"Smartput", :summary=>"Adjust spaces and commas when putting text.", :description=>"Smartput tries to reduce the need of fine-tuning spaces after a put.  Under certain conditions, it also moves a comma to the other side of the register before putting.\n\nThe following keys are remapped: p, P, gp and gP.\n\nPress  <Leader>st  to toggle Smartput on and off.\n\nSee also:\n    :help todo| /Smart cut.paste\n\nThere is a wealth of customization options -- the help file has the details.\n\n\nExamples:\n\n    Hello World!\nType  dwep  on \"Hello\"\n    World Hello!\n\n    Hello World!\nType  dawbP  on \"World\"\n    World Hello!\n\n    Hello\n    ()\nType  dww3p  on \"Hello\"\n    (Hello Hello Hello)\n\n    (Hello, World)\nType  dWep  on \"Hello\"\n    (World, Hello)\n"}, {:name=>"Tab-Menu", :summary=>"Tab Menu for all the tabs in VIM", :description=>"This plugin adds a menu with the list of all the tabs in GVIM. Clicking on a file name in the menu takes to the corresponding tab. This would be very useful when working with many files in different tabs. This would simulate the tab behaviour in other editors. \n\n\nKnown Problems:\nImmediately after opening a new tab, the tab list will not reflect with the actual tab details. Once you move to another tab, the tab list would be refreshed. "}, {:name=>"narrow", :summary=>"Emulate Emacs' narrowing feature", :description=>"*narrow* is a Vim plugin to emulate Emacs' narrowing feature.\nFrom GNU Emacs Manual:\n\n\tNarrowing means focusing in on some portion of the buffer, making the\n\trest temporarily inaccessible. The portion which you can still get to\n\tis called the accessible portion. Canceling the narrowing, which makes\n\tthe entire buffer once again accessible, is called widening. The\n\tbounds of narrowing in effect in a buffer are called the buffer's\n\trestriction.\n\n\tNarrowing can make it easier to concentrate on a single subroutine or\n\tparagraph by eliminating clutter. It can also be used to limit the\n\trange of operation of a replace command or repeating keyboard macro.\n\nNote that there are some differences from the original behavior.\nSee |narrow-bugs| for the detail.\n\n\nRequirements:\n- Vim 7.0 or later\n\nLatest version:\nhttp://github.com/kana/vim-narrow\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/narrow.html"}, {:name=>"fakeclip", :summary=>"pseudo clipboard register for non-GUI version of Vim", :description=>"*fakeclip* is a Vim plugin to provide a pseudo |clipboard| register for\nseveral versions of Vim without |+clipboard| support, especially for non-GUI\nversion of Vim on the following platforms:\n\n- Cygwin\n- Mac OS X\n- X Window System (by xclip <http://sourceforge.net/projects/xclip/&gt;)\n\n\nfakeclip also provides a pseudo register to access a \"paste buffer\" if one of\nthe following applications is available:\n\n- GNU screen\n- tmux\n\n\nFAQ: If you can't copy/paste multibyte characters with the clipboard\n     on Mac OS X, see |fakeclip-multibyte-on-mac|.\n\nNote for Mac OS users: Though Vim supports clipboard for the console version\nsince version 7.3, fakeclip is still useful to access a \"paste buffer\".\n\n\nRequirements:\n- Vim 7.0 or later\n\nLatest version:\nhttp://github.com/kana/vim-fakeclip\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/fakeclip.html"}, {:name=>"xml_autons", :summary=>"auto :XMLns by the current content", :description=>"*xml_autons* is an additional Vim filetype plugin for XML to execute |:XMLns|\naccording to the content of the current buffer.  This supports to use omni\ncompletion for XML (|ft-xml-omni|), because it requires to execute |:XMLns|.\n\n\nRequirements:\n- Vim 7.0 or later\n\nLatest version:\nhttp://github.com/kana/vim-xml-autons\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/xml_autons.html"}, {:name=>"textobj-user", :summary=>"Support for user-defined text objects", :description=>"*textobj-user* is a Vim plugin to SUPPORT writing user-defined text objects,\nespecially, simple text objects which can be defined by regular expression.\n\nNote that this plugin only provides functions to support writing user-defined\ntext objects, and this plugin does not provide any useful text objects.  That\nis your work.\n\n\nRequirements:\n- Vim 7.0 or later\n\nLatest version:\nhttp://github.com/kana/vim-textobj-user\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-user.html"}, {:name=>"textobj-datetime", :summary=>"Text objects for date and time", :description=>"*textobj-datetime* is a Vim plugin to provide text objects for date and time.\n\n\nRequirements:\n- Vim 7.0 or later\n- |textobj-user| 0.3.3 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-datetime\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-datetime.html"}, {:name=>"EnvEdit.vim", :summary=>"Intelligently edit environment variable values", :description=>"Please send comments, suggestions, flames, etc. to NewOfalSor at gPmaAilM dot com, minus NOSPAM\n\nChanging environment variables in Windows' \"Environment\nVariables\" dialog is just WAY too tedious.  This plugin\nprovides the following benefits: \n    1. Vim's editing keystrokes.\n    2. You can resize the window so that the entire value\n       fits on the screen.\n    3. You can easily use the value of a different variable\n       in the definition of another.\n    4. Vim shows up in the taskbar, so you don't have to\n       minimize all of your other windows to find the\n       misplaced \"Environment Variables\" dialog after looking\n       up the correct value for a variable in the\n       documentation.\n    5. Command-line completion is an easier way to locate\n       a variable than hunting for it in two different\n       five-line high lists.\n\nAt the command-line type this command: :EnvEdit {VARIABLE}\nThis will open a new buffer named $VARIABLE and containing the\nvalue of that environment variable.  If there exists no such\nenvironment variable, you'll be greeted with an empty buffer.\n\nWhen the buffer is saved, the new text is stored in the\ndefault register \"\", exported to the clipboard via the \"+ and \"*\nregisters, and exported to Vim's own environment.  This means\nthat any child processes of that instance of Vim inherit the\nnew environment variable.\n\nIf the environment variable contains your system's path\nseparator character (':' on UNIX and ';' on Windows), the\nvariable's text is split on this character and each component\nis presented on its own line.  When you save the buffer, all\nlines are joined and delimited by this same character.  Empty\nlines are filtered out to prevent consecutive path separators\nfrom appearing.\n"}, {:name=>"kwbdi.vim", :summary=>"Keep Window on Buffer Delete - Improved", :description=>"This is an improved version of kwbd.vim. It allows you to delete a buffer without closing the window. It meets the following criteria:\n\n\n    * The window layout must be kept in all circumstances.\n    * If there is an alternate buffer must be showing that.\n    * If there is not alternate buffer then must be showing the preious buffer.\n    * If there is no alternate nor previous buffer (it is the only buffer) must show an empty buffer. \n\nIf there are two windows with the same buffer open, both windows will remain open, and the buffer will be deleted\n\nTo delete a buffer while keeping the window open, just type \\bd\n\nThanks to the authors of kwbd.vim and minibufexpl.vim!"}, {:name=>"R.vim--Nijs", :summary=>"Execute R-code from vim on Mac OS X", :description=>"This script is a related to vimscript#1048. However, it only works only on Mac OS X and does not require funnel.pl (vimscript#221) or any other code. It uses AppleScript embedded in the R.vim file to send selected lines of code to an R buffer (press <F3>). It is also possible to have all code in a buffer run using R to get the output back as an output buffer in vim (press <F4> or <F5>). In addition you can comment in/out lines of code with 'mc'."}, {:name=>"oberon2", :summary=>"Syntax file for Oberon-2.", :description=>"Syntax file for Oberon-2.\nIt was derived from syntax file for Modula-2 by Peter Funk.\nThe main idea was to let type Oberon-2 keywords in lower case, using abbr to capitalize them."}, {:name=>"hiveminder.vim", :summary=>"Syntax for Hiveminder exported tasks (tasks.txt) files", :description=>"Provides filetype='hiveminder' for use with text file export from Hiveminder (http://hiveminder.com/)\n\ntasks.txt is a formatted todo list which can be edited in place and sent back to Hiveminder to propagate changes.\n\nThe file can be generated by clicking on the text file export link on your Hiveminder page, or by using their todo.pl script with the download option.  Nothing is provided to detect these files if an alternate filename is selected.\n\nThe syntax will also work with the 'braindump' format temporary files generated when you run todo.pl with the 'braindump' option.  There's no easy way to detect these, but I've hacked my todo.pl to inform vim.  See doc/hiveminder.txt for more information."}, {:name=>"scratch", :summary=>"Emacs like scratch buffer", :description=>"*scratch* is a Vim plugin to provide Emacs-like scratch buffer.  You can write\nanything in it, and you can also evaluate a part of the buffer as Vim script.\nIt is a temporary buffer and it is not related to a real file, so the content\nof the buffer will be discarded when you quit Vim.  This buffer is useful when\nyou test a bit of script or other use.\n\n\nRequirements:\n- Vim 7.0 or later\n\nLatest version:\nhttp://github.com/kana/vim-scratch\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/scratch.html"}, {:name=>"csv-reader", :summary=>"Read csv file (comma or tab, choosable), easy to move to every column in color.", :description=>"When you open a .csv file, you can read it more easy, this script make the current column\nhighlighting, and you can jump to the field that you want or select the comma or tab as the split symbol.\n[ Some code come from network, and I like to share this with you. Thanks, every body. ]\n\nF9: move to ahead column\nF10: move to next column\nF11:jump to field\nF12: select the split symbol, you can directly push the enter as input comma, or type comma or tab."}, {:name=>"BBCode--Dahn", :summary=>"Syntax highlighting for BBCode", :description=>"This script adds syntax highlighting for BBCode, which is an abbreviation for Bulletin Board Code, the markup language used to format posts in many message boards. At the moment it highlights all tags and links defined by the URL-tag, but also the text between B-tags, I-tags, and U-tags (nesting is allowed), too.\n\nTODO: I intended to highlight the text between QUOTE-Tags, too, but found no solution yet which worked for nested quotes.\n"}, {:name=>"chords", :summary=>"(Guitar) chords and tabs", :description=>"Allows to hilite chords and tabs stored in text files.\nScreenshot: http://ro-che.info/docs/img/chords.png"}, {:name=>"robocom", :summary=>"Hiliting for Robocom scripts.", :description=>"See http://www.cyty.com/robocom/ for details on Robocom game."}, {:name=>"autohotkey-ahk", :summary=>"autohotkey syntax highlighting", :description=>"autohotkey (ahk) syntax file.\nBest in combination with color scheme pspad.\n\nExamples:\nIsense script\nhttp://academicproductivity.com/software/ISense.ahk.html\n\nactiveGoto script\nhttp://academicproductivity.com/software/activegoto.ahk.html\n\nIn a Nutshell:\nBuilt-in finctions are blue\nUser defined functions are green\nAutohotkey variables are orange\nLabels are red (return too; makes it easy to find subs scopes)\nGUI commands, others, are brown\n"}, {:name=>"pspad-colors-scheme", :summary=>"soft blue colors, similar to &#039rajat&#039 scheme in pspad", :description=>"Examples:\nhttp://academicproductivity.com/software/ISense.ahk.html\nhttp://academicproductivity.com/softwareactivegoto.ahk.html\n\n"}, {:name=>"Torquescript-syntax-highlighting", :summary=>"Syntax highlighting for scripting in the Torque game engines", :description=>"This script allows for full syntax highlighting of TorqueScript, the scripting language for the family of Torque Game Engines."}, {:name=>"Processing", :summary=>"Syntax highlighting for the Processing language", :description=>"This is a syntax highlighting file and ftplugin for Processing.  \n\nProcessing is a system for programmatically creating images and animations.  See http://www.processing.org/ for more info.  The syntax highlighting file was made using lib/keywords.txt from the Processing 0135 BETA distribution.\n\nIntegration with the documentation:\n\nIf you have a Vim built with Python, the K key can be used to look up functions and variables in the documentation.  Note that words followed\nby an opening paren \"(\" are treated as functions, thus K pressed on frameRate() and frameRate goes to different documentation pages.\n\nIf there are highlighting errors while scrolling backwards, set the processing_minlines variable to a higher value."}, {:name=>"Io-programming-language-syntax", :summary=>"Io language syntax support", :description=>"vim syntax syntax for the Io programming language <http://www.iolanguage.com/&gt;\n\nCreator:  Scott Dunlop <swdunlop@verizon.net>\nFixes:-\n- Manpreet Singh <junkblocker@yahoo.com>\n- Jonathan Wright <quaggy@gmail.com>\n- Erik Garrison <erik.garrison@gmail.com>\n"}, {:name=>"GCov-plugin", :summary=>"Simple plugin for easy access to .gcov files", :description=>"GCov is a profiler that comes with GCC. It is used to combine source code with profiling information and write the result into a gcov file. Switching between gcov and source file can easily become inefficient. This little plugin makes it easy to access current source line in the corresponding .gcov file. Just compile your application with -fprofile-aprc and -ftest-coverage, run it once to create the coverage files and press F11 in any source file to jump to the corresponding line in gcov file. "}, {:name=>"gcov.vim", :summary=>"Highlighting for gcov files (gcc coverage)", :description=>"Syntax highlighting for runtime code coverage output generated by GCC&#039s coverage testing tool.\n\nSimply compile your code with: \n    -fprofile-arcs -ftest-coverage\n\nAnd run \n    gcov *.gcda\n\nOpen the resulting .gcov files to see which lines of code were executed how many times."}, {:name=>"webpreview", :summary=>"make previewing pages  in web browsers easily", :description=>"support preview edit pages in outer web browser, included file types like php,html,jsp and so on.\nYou can just give a  browser, web server  in .vimrc like :\n\" let g:Default_WebBrowser='c:\\Program Files\\Maxthon2\\Maxthon.exe'\n\" let g:Second_WebBrowser=''\n\" let g:Default_WebDomain='http://weiye.cn'\n\" let g:Default_WebRoot='D:/www' \n\nOr give a server list  and browser list like:\n\" let g:WebList = [\n\"            \\ {'domain' : 'http:// * .blog.weiye.cn','rootdir' : 'D:/www/blog/ * '},\n\"            \\ {'domain' : 'http://blog.weiye.cn','rootdir' : 'D:/www/blog'},\n\"            \\ {'domain' : 'http://weiye.cn','rootdir' : 'D:/www'},\n\"            \\ {'domain' : 'http://aa.bb.cn','rootdir' : 'ftp://user@192.168.202.110/www/xx'}\n\"            \\ ]\n\n\" let g:BrowserList = {\n\"            &#039default' : 'c:\\Program Files\\Maxthonsecond\\Maxthon.exe' ,\n\"            &#039second'  : 'c:\\Program Files\\Mozilla Firefox\\firefox.exe' ,\n\"            &#039ie'      : 'c:\\Program Files\\Internet Explorer\\iexplore.exe' ,\n\"            &#039ff'      : 'c:\\Program Files\\Mozilla Firefox\\firefox.exe' \n\"            \\}\n\nsupport wildcard * in server list.support remote ftp server.\nIn default, use \",bd\" to preview the current edited page in the default web browsers and \",bs\" in the second web \nserver.\nRead the webpreview.vim document for more details \n"}, {:name=>"speeddating.vim", :summary=>"Use CTRL-A/X to increment dates, times, and more", :description=>"Take the following date:\n\n1999-12-31\n\nBecause Vim treats the hyphen as a negative sign, pressing CTRL-A on the 31 would normally increment it to\n\n1999-12-30\n\nCompare this with what happens when speeddating.vim is installed:\n\n2000-01-01\n\nPressing 5<C-X> on the 03 in the first line below transforms it into the second:\n\nSat, 01 Jan 2000 00:00:03 +0000\nFri, 31 Dec 1999 23:59:58 +0000\n\nSeveral date, time, and datetime formats are included.  Additional formats can be defined in a strftime-like syntax with the :SpeedDatingFormat command.\n\nExisting VIm semantics are preserved.  CTRL-A and CTRL-X accept a count, and plain number incrementing is used if no date format is matched.\n\nUse of CTRL-A/X in visual mode enables incrementing several lines at once.  Blank spots are filled by incrementing the match from the previous line, allowing for creation of sequences (1, 2, 3; 2000-10-30, 2000-10-31, 2000-11-01).\n\nCan also increment roman numerals and ordinals (1st, 2nd, 3rd, ...).  In visual mode, letters of the alphabet are supported.\n\nd<C-X> sets the timestamp under the cursor to the current time.  d<C-A> does the same, but uses UTC rather than the local time.\n\nThe \".\" command will work as expected if you install repeat.vim, vimscript #2136.\n\nFeedback wanted: speeddating currently supports locale dependent day/month names/abbrevations, but also includes English abbreviation support.  However, most of the built-in formats just use the English version, because it is either mandated by a standard (like RFC 822) or because they are typically used in an international context (like the Last Change: header in Vim scripts).  Is it even worth supporting the locale dependent names at all?  Is anyone actively using them?\n\nhttp://github.com/tpope/vim-speeddating"}, {:name=>"HeaderCVS", :summary=>"Auto generate CVS Header before current cursor", :description=>"\"\n\" This plugin adds CVS Header before current cursor.\n\"\n\" The CVS Header will automatically reflect current file name, current date and\n\" your description beside a standard CVS Header.\n\"\n\" (Note: This plugin is only tested on **Linux**.)\n\nFor example:\nIf you type \":HeaderCVS This is my file description.\" when editing file \"Demo.sh\",\nthis plugin will add the following CVS Header before current cursor.\n\n########################################################################\n#  Copyright MyCompany Inc.  All Rights reserved\n########################################################################\n#\n#  File                :  Demo.sh\n#  Creator           :  AyuanX ( ayuanx#163.com )\n#  Creation Date  :  2008-01-11\n#  Description      :  This is my file description.\n#\n########################################################################\n#    $Author$\n#    $Source$\n#    $Revision$\n#    $Date$\n#    $Id$\n########################################################################\n#    $Log$\n########################################################################\n\nTIP:\nCompany Name and Creator are customizable, File Name and Date are auto generated.\n\nWARNING:\nThis script is written with shell comment character '#' by default, you may need some workarounds manually to comment out the added header with other corresponding comment character."}, {:name=>"bg.py", :summary=>"Post to your blog at blogger.com from gVIM.", :description=>"Tested on windows only.\nRequirements:  \n 1. python \"http://python.org&quot; installed.\n 2. Google Data APIs -  \"http://code.google.com/p/gdata-python-client/\" &nbsp; gdata-python-client\n  can be downloaded from here : \"http://gdata-python-client.googlecode.com/files/gdata.py-1.0.10.latest.zip&quot;\n"}, {:name=>"basic-colors", :summary=>"a simple color scheme that only highlights strings, comments, and errors", :description=>"I got sick of color schemes that used every color and highlighted every possible item.\n\nThis basic color scheme gets rid of syntax highlighting for numbers, variables, and function names.  It keeps the colors for comments, strings, errors, and special information that's not actually in the document like line numbers.\n\nThis allows you to easily see if you've forgotten to terminate a string or comment, without being overwhelmed by the colors of everything else."}, {:name=>"Twitter--Jeffery", :summary=>"Post to Twitter from Vim", :description=>"This is a very simple Vim Script that allows you to post to Twitter straight from Vim.\n\nUsage: Do the command :PosttoTwitter it will ask you for your Twitter in the command-line, type it in and hit enter to send it off. Or in a buffer; type the text you want to Twitter and in normal mode do :BPosttoTwitter to try and send the whole buffer, or :CPosttoTwitter to send the current line, or T to send the visualized text. \n\nFor anyone who wants to follow me: http://twitter.com/travisjeffery\n\nGet the new and improved version by Po Shan Cheah at http://www.vim.org/scripts/script.php?script_id=2204 in the future."}, {:name=>"SDL-library-syntax-for-C", :summary=>"SDL library syntax for C", :description=>"SDL library syntax for C"}, {:name=>"accurev", :summary=>"AccuRev SCM Integration for Vim", :description=>"This is the AccuRev SCM Integration for Vim.  \n\nAccuRev is a leading Software Configuration Management (SCM) application that enables massive, parallel software development across local and distributed geographic boundaries.  If you develop software in large teams with multiple releases or product variants... AccuRev is for you. See more at http://www.accurev.com.\n\nThis plugin provides the ability to perform 20+ AccuRev commands (keep, promote, update, merge, etc) directly within Vim.  \n\nThe plugin requires Vim 7.x and supports AccuRev 4.5/4.6/4.7.  Developed on linux (Ubuntu 8.04), it has also been tested on Windows (XPsp2).\n\nThe plugin homepage is http://vim.tools4accurev.com"}, {:name=>"Wikidoc-syntax-highlighting", :summary=>"Wikidoc format syntax highlighting", :description=>"Syntax highlighting for Wikidoc format in vim.\nI don't know if anybody uses the wikidoc format...\nI hope it will be useful to you.\nIt's pretty stupid now...\n"}, {:name=>"symfony.vim", :summary=>"Useful editing tip for Symfony PHP Framework", :description=>"DESCRIPTION\n\nUsefull commands for symfony projects editing\n\n* Switch between template view / module view ( <F8> key )\n\n  While editing a module method, press <F8>. It will switch to the appropriate template view\n  Press <F8> again to go back to the module method .\n\n  It works with Actions and Components :\n\n    function executeMyAction() < > myActionSuccess.php\n    function executeMyComponent() < > _myComponent.php \n\nTODO \n\n* Support for xxxError, handleXXX, validateXXX\n* Shortcuts to the layout template of an action/view\n* Support for empty action files and missing templates\n\nFeedbacks mostly appreciated : email.de.nicolas.martin@gmail.com\n"}, {:name=>"Noweb", :summary=>"A hacked-up noweb syntax file", :description=>"The original nw.vim file isn't working with new environments. I had made a few irrelevant hacks, and changed the name of the script out of no reason."}, {:name=>"XmlPretty", :summary=>"Pretty-print an xml file", :description=>"Simple script that treats your buffer as an xml file and indents it for easy reading"}, {:name=>"Socialtext-wiki-syntax-highlighting", :summary=>"Syntax highlighting and an ftplugin for Socialtext wiki", :description=>"Syntax highlighting for the Socialtext wiki, http://www.socialtext.net/. Also a filetype detection script which sets appropriate buffer-local options for editing long lines, etc.\n\nLatest copy can be found at http://www.georgevreilly.com/vim/stwiki/"}, {:name=>"byter", :summary=>"byter syntax support", :description=>"Support for byter esoteric programming language."}, {:name=>"tintin.vim", :summary=>"Syntax Highlighting for Tintin++", :description=>"TinTin++ is a free mud client that runs on the Windows, Linux, and Mac OSX platforms.\n\nif can be found here: http://tintin.sourceforge.net/ \n\ncontains syntax for commands, color codes, comments, braces, quotes, and variables cmd separators, although this is pretty average, and doesnt do nearly as much as i want it to do. \n\nfor a better version, check this out http://www.vim.org/scripts/script.php?script_id=2135"}, {:name=>"tabpage_sort.vim", :summary=>"Sort vim7 tab page in 'buffer number' order.", :description=>"sort vim7 tab page in 'buffer number' order.\n\nInstallation\n------------\n1. Copy the tabpage_sort.vim script to the $HOME/.vim/plugin or\n   the $HOME/vimfiles/plugin. Refer to the ':help add-plugin',\n   ':help add-global-plugin' and ':help runtimepath' topics for\n   more details about Vim plugins.\n2. Restart Vim.\n\nUsage\n-----\n1. Run command ':TabpageSort', ':TabpageSort asc', ':TabpageSort desc',\n   ':TabpageSortAsc' or ':TabpageSortDesc'.\n\n   :TabpageSort           sort vim7 tab page in buffer number ascending order.\n   :TabpageSort asc       sort vim7 tab page in buffer number ascending order.\n   :TabpageSort desc      sort vim7 tab page in buffer number descending order.\n   :TabpageSortAsc        sort vim7 tab page in buffer number ascending order.\n   :TabpageSortDesc       sort vim7 tab page in buffer number descending order.\n\nNote\n----\n1. If current buffer size is over current 'tabpagemax' option setting,\n   'tabpagemax' option size is automatically expanded.\n   see \":help tabpagemax\".\n"}, {:name=>"syntax-highlighting-for-tintinttpp", :summary=>"great little syntax file for all you mudders!", :description=>"cool vim syntax file for tt++ / tintin...http://tintin.sourceforge.net/\nonly the best mud client available to man!\n\nnote***this file is in a linux format, it probably won't work straightaway on a windows box...you'll have to go reset the cr / crlf's i believe.\n\n-=Todo=-\nExpand keyword selection to include caps...right now #alias / #action and all other keywords are on highlighted if they are in lowercase.\nIf you have any suggestions please feel free to mail me at \ncheshire.in.darkness ::at:: gmail ::dot:: com\n\nthanks!"}, {:name=>"repeat.vim", :summary=>"Use the repeat command (.) with supported plugins", :description=>"If you've ever tried using the \".\" command after a plugin map you were likely disappointed to discover it only repeated the last native command inside that app, rather than the map as a whole.  That disappointment ends today.  Repeat.vim remaps \".\" in a way that plugins can tap into it.\n\nSupport is already present in the following plugins:\n\nsurround.vim (vimscript #1697)\nspeeddating.vim (vimscript #2120)\nabolish.vim (vimscript #1545)\nunimpaired.vim (vimscript #1590)\n\nAdding support to a plugin is generally as simple as the following command at the end of your map functions.\n\n  silent! call repeat#set(\"\\<Plug>MyWonderfulMap\",v:count)\n\nDetails are at the top of the file.  Let me know if you add support to a script on vim.org and I will link it here.\n\nhttp://github.com/tpope/vim-repeat"}, {:name=>"Css-Pretty", :summary=>"Pretty-print a css file", :description=>"Simple script to format text as CSS in readable format"}, {:name=>"PBwiki-syntax-highlighting", :summary=>"Syntax highlighting and an ftplugin for PBwiki", :description=>"Syntax highlighting for PBwiki, http://pbwiki.com/. Also a filetype detection script which sets appropriate buffer-local options for editing long lines, etc.\n\nLatest copy can be found at http://www.georgevreilly.com/vim/pbwiki/"}, {:name=>"sgf.vim", :summary=>"SFG - Smart Game Fomat (Go savegames)", :description=>"Syntax highlighting for the Smart Game Format, which is the default savegame format for the two-player Go game.\nIt is not very complete yet, as I'll work on it as the need arises. But it makes it a lot easier to dig through the SGF information already than just having everything white on black."}, {:name=>"xoria256.vim", :summary=>"Finely tuned soft gamma, 256 colors, dark background, gvim == vim", :description=>"Shots (pretty much obsolete + this \"piccy.info\" image hosting can be really slow):\n * GUI, C code with a :split and foldings: http://i.piccy.info/i3/2f/32/04d9c2b4095038a9ee591e9ef6a3.png\n * Console, C code: http://i.piccy.info/i3/e8/cd/9d32e1fd38e9c8b54848a3f59794.png\n * GUI, Python: http://i.piccy.info/i3/4b/63/8815c1fbed0dfdf2a3a6af1bc83c.png\n * Console, Bash: http://i.piccy.info/i3/6d/fc/f8c24fb713f396dae0127ec2339c.png\n\nNotes:\nI find this colorscheme to be IDE-compliant with its blue statements, gray comments and yelowish strings, constants and numbers. Colors should look almost similar in vim, running in any modern terminal emulator (like recent versions of xterm or konsole), and in GTK2 GUI."}, {:name=>"undobranche_viewer.vim", :summary=>"Undo Branches Explorer", :description=>"Overview\n--------\nVim7 Undo Branches Explorer.\nSee ':help undo-branches', also.\n\nInstallation\n------------\n1. Copy the undobranch_viewer.vim script to the $HOME/.vim/plugin or\n   the $HOME/vimfiles/plugin. Refer to the ':help add-plugin',\n   ':help add-global-plugin' and ':help runtimepath' topics for\n   more details about Vim plugins.\n\n2. Restart Vim.\n\n3. This script requires tlib (vimscript #1863) to be installed. \n\nUsage\n-----\n1. Open Undo Branches Explorer with command ':UndoBranchViewer'.\n2.\n      <c-p> undo selected branche.\n      <c-u> undo selected branche, and close undo branches list.\n"}, {:name=>"showmarks--Politz", :summary=>"Display marks as signs (needs +sign feat )", :description=>" ShowMarks                                                        \n                                                                  \n Give a visual aid to navigate marks, by displaying them as signs \n (obviously needs the +signs feature).                            \n                                                                  \n commands                                                         \n --------                                                         \n                                                                  \n :DoShowMarks                                                     \n   show marks for current buffer                                  \n :DoShowMarks!                                                    \n   show marks for all buffers                                     \n :NoShowMarks                                                     \n   disable it for current buffer                                  \n :NoShowMarks!                                                    \n   disable it for all buffers                                     \n                                                                  \n :[count]ShowMarksOnce                                            \n   Display marks for [count] Cursorhold                           \n   events. Mostly for mapping it like :                           \n   nnoremap ` :ShowMarksOnce<cr>`                                 \n                                                                  \n :[count]PreviewMarks                                             \n   Display marks of current buffer in pvw.                        \n   Like ':marks', but at the top of the window ;-).               \n   [count] is the same as above.                                  \n                                                                  \n variables                                                        \n --------                                                         \n                                                                  \n let g:showmarks_marks = \"abcdef....\"                             \n   the marks you want to have displayed.                          \n hlShowMarks                                                      \n   the highlight color                                            \n                                                                  \n I suggest you lower the value of 'updatetime'.                    \n"}, {:name=>"unibasic.vim", :summary=>"Programming language for the UniVerse Database", :description=>"The UniVerse BASIC syntax file highlights the programming language used in IBM's UniVerse multivalue database application.  This file is extracted from Lubomir Husar's DataStage syntax file (vimscript #1310) and focuses on only the data related to UniVerse BASIC.  All the DataStage-specific items remain in the previous script."}, {:name=>"nice-vim", :summary=>"Syntax highlighting for Nice programming language", :description=>"This script provides syntax highlight and file type detection for Nice programming language.\n"}, {:name=>"GOBject-Builder-gob2", :summary=>"Syntax and indent for GObject Builder (gob2)", :description=>"Vim syntax and indent files for GObject Builder (gob2)\n\nIt works well with gtk-vim-syntax (vimscript #1000) package. \n\nBasically, it depends on c.vim, so change in c.vim will also affect it.\n"}, {:name=>"prmths", :summary=>"Nice dark clean easy to look at color theme", :description=>"Dark theme with mostly blues and cyans, a little red and some yellow.... very easy to look at. enough contrast to be useful, not so much that it's an eye-strain. I stare at my screen for hours with this theme and don't get fatigued."}, {:name=>"VimTrac", :summary=>"A vim client for the Trac wiki and ticketing system", :description=>"[NOTE: The most recent version requires the Align.vim (vimscript #294) plugin if you want to use the summary ticket view. (The default and most readable view)\nhttp://www.ascetinteractive.com.au/vimtrac/attachment/wiki/Screenshots/summary.jpg]\n\n\nThis is a client for the open source trac source code manager and ticketing system. (http://trac.edgewall.org/) It will enable you to \n\n- do browsing and editing  of a trac sites wiki pages\n- create and edit tickets \n- add attachments \n- view project timelines changesets as unified diffs.\n- perform trac site searches\n- browser previews and text dumps of wikis.\n\n\nVimTrac's wiki is here http://www.ascetinteractive.com.au/vimtrac \nThe Repo is now on github here http://github.com/mjbrownie/Trac.vim\n\nIf you have any issues/requests create a ticket there using the login details in the trac.vim script or email me.\n\n"}, {:name=>"quiltdiff", :summary=>"Shows changes of the current patch on the left as signs", :description=>"When using quilt, this plugin shows the changes in the current patch on the left. This script is the quilt port of svndiff (http://www.vim.org/scripts/script.php?script_id=1881)."}, {:name=>"ncss.vim", :summary=>"Syntax File for NCSS", :description=>"This is the syntax file vor NCSS (Nested CSS), also known as CSS DRYer.\n\nIt is used as an optional plugin for the Ruby on Rails to write CSS without repeating yourself. \n\nPlease see http://opensource.airbladesoftware.com/trunk/plugins/css_dryer"}, {:name=>"css_color.vim", :summary=>"CSS color preview", :description=>"This Script underlays the hexadecimal CSS colorcodes with their real color. The foreground color is selected appositely. So #FF0000 will look as hot as a fire engine!\n\nAn image for those who do not get my prose:\nhttp://lanpartei.de/~niklas/vim/after/syntax/css-color-vim.png"}, {:name=>"sessions.vim--Boland", :summary=>"Easy session management for gvim.", :description=>"This is a very simple script.  It adds a Sessions menu to gvim. Using the menu you can save and restore sessions. Sessions are saved in ~/.vim/sessions by default. In case you need further clarification, see the screenshot:\n\nhttp://chargedsoftware.com/~charged2885/files/sessions.vim.png\n\nFor those who don't know, sessions allow you to save the state of your current Vim session to a file. You can then :source the session file to resume state. see :h mks for more information."}, {:name=>"snippets.vim", :summary=>"Simple snippet storage and retrieval separated by filetype.", :description=>"Simple utility for managing snippets of text within vim. Users can add, edit, and delete snippets within vim. Command completion is supported in all places that make sense. A menu is also added at \"Plugin/Snippets\".\n\nCOMMANDS\nAddSnippet -- adds new snippet that contain a range of lines\nEditSnippet -- edits a snippet in a new tab\nDeleteSnippet -- deletes a snippet (with confirmation)\nInsertSnippet -- inserts a snippet before the current line\nAppendSnippet -- inserts a snippet after the current line\nListSnippets -- lists snippets\n\nMAPPINGS (<leader> is set to '\\&#039, by default)\n<leader>ssa -- AddSnippet with current buffer (normal mode)\n<leader>ssa -- AddSnippet with range of lines (visual mode)\n<leader>sse -- EditSnippet\n<leader>ssd -- DeleteSnippet\n<leader>ssp -- AppendSnippet\n<leader>ssP -- InsertSnippet\n<leader>ssl -- ListSnippets"}, {:name=>"RecentFiles", :summary=>"Plugin that allows you to easily access recently opened files.", :description=>"This script allows you to easily access recently opened files.\nFunction RecentFilesList() (with default key binding ',f') displays list of files, and allow you to open one by entering its number.\nThe list is empty at the begining, it's updated when you open/write files.\n\nScreenshot:\nhttp://s258.photobucket.com/albums/hh246/otokan/?action=view&current=vim-RecentFilesList-plugin.png\n\nScript sets (by default) following key bindings and autocommands:\n nmap ,f :call RecentFilesList()<cr>\n au BufReadPost,BufWritePost * call RecentFilesAdd()\n\nEnjoy!\n"}, {:name=>"marvim", :summary=>"Macro Persistent Storage and Shareable Repository for VIM", :description=>"MARVIM - MAcro Repository for VIM\n\n\"Give your most complex macros a name and store it for future recall and use\"\n\nProblem statement(s): \n-------------------------------\n   * Can not remember those complex VIM macro sequences you use frequently?\n   * Wish you could save those macros beyond your immediate session? \n   * Wish you could share your VIM macros with each other?\n   * Why not templates as well in the same script?\n\nFeatures\n------------\n    * Recording of VIM macros into persistent storage for future use\n    * Auto-complete based recursive search and load of stored VIM macros\n    * Visually select and save templates into persistent storage\n    * Macro namespaces, to permit organization of macros \n    * Support for a default namespace based on filetype\n    * Supports a shared macro repository for a team on a shared directory\n    * Macro menu items in GVIM version for all main actions\n\nHotkeys \n-----------\n<F2>            - Find and execute a macro or insert template from repository\nVisual <F2> - Replays last macro for each line selected\n<F3>             - Save default macro register by name to the macro repository \nVisual <F3>  - Save selection as template by name to the macro repository \n<Tab>            - On the Macro command line for cycling through autocomplete\n<Control>+D - On the Macro command line for listing autocomplete options\n\nUsage:\n----------\no Store a new macro to the repository\n\n1)  record macro as usual into q register \n    (i.e. qq..<macro keystrokes>..q)\n2)  press save macro key <F3> (default) in normal mode\n3)  enter the macro name when prompted after the prefix \n    (a prefix will be provided based on the filetype)\n4)  macro is now store in the repository\n\no Save template into repository\n\n1)  select area you want to save in visual mode\n2)  press the macro save button <F3> (default) in visual mode\n3)  enter the template name when prompted\n    (a prefix will be provided based on the filetype)\n4)  template is now saved in repository\n\no Recall macro/template through a search\n\n1)  press the macro find key <F2> (default) in normal mode\n2)  enter a search string when prompted \n    (a prefix will be put by default, which can be deleted)\n3)  press <Tab> or <Control-D> to auto-complete until you find the macro\n4)  macro is now run and also loaded for further use into the q register\n\no Replay last loaded macro on multiple lines for each line\n\n1)  select the area you want the macro to run on in visual mode\n2)  press the macro find key <F3> (default) in visual mode\n3)  macro in q register is replayed for every line\n\nBugs, Patches, Help and Suggestions\n-----------------------------------------------------\nIf you have some feedback, find any bugs or need some help, please send\nand email to chamindra [at] gmail.com and put the word marvim in the\nsubject line. \n\nFurther information\n--------------------------\nRead the README file or goto http://chamindra.googlepages.com/marvim\n\n"}, {:name=>"greenvision", :summary=>"green colorscheme for GUI, 256 and 88 color terminals", :description=>"A ultra low contrast dark colorscheme.\n"}, {:name=>"leo256", :summary=>"A pleasant high contrasted dark theme (256 colors, gui + term, dark bg)", :description=>"This is my multipurpose everyday theme I use for coding (and everything else :-).\n\nIt focuses on high readability and colors harmony.\n\nGood results with most programming languages:\n  - Ruby\n  - Lua\n  - Scala\n  - Clojure\n  - PHP\n  - HTML\n  - ...\n\nHave a look:\n\nhttp://www.leonini.net/vim_leo_theme_0.94.png \nhttp://www.leonini.net/vim_leo_theme_0.93.png\nhttp://www.leonini.net/vim_leo_theme_0.9.png\n\nold:\n\nhttp://www.leonini.net/vim_leo_theme.0.2.png\nhttp://www.leonini.net/vim_leo_theme.0.32.png\nhttp://www.leonini.net/vim_leo_theme.0.40.png\nhttp://www.leonini.net/vim_leo_theme2.0.40.png\nhttp://www.leonini.net/vim_leo_theme_0.8.png\nhttp://www.leonini.net/vim_leo_theme_0.82.png\n"}, {:name=>"altfile", :summary=>"easy switching between related files", :description=>"Screenshot: http://altfile.googlecode.com/files/shot1.png\nProject site: http://code.google.com/p/altfile/\n\n-----\n\nSuppose we have a project which resides in a \"proj\" directory. Content of that directory might look like this:\n\n  proj/classes/Class1.php\n  proj/classes/Class2.php\n  proj/classes/Namespace/Class3.php\n  proj/tpl/Class1.html\n  proj/tpl/Class2.html\n  proj/tpl/Namespace/Class3.html\n  proj/tests/Class1.phpt\n  proj/tests/Class2.phpt\n  proj/tests/Namespace/Class3.phpt\n\nCreate \"proj/.altfile\" and put these lines inside:\n\n  class: classes/{MATCH}.php\n  template: tpl/{MATCH}.html\n  test: tests/{MATCH}.phpt\n\nNow load \"proj/classes/Class1.php\" and hit the hot key. Menu will\nappear:\n\n  class  [template]  test\n\nNow you can use it as any other wild menu: cursor keys, <CR>, <Esc>.\n\nBy default previously active item is highilighted (works like Alt-Tab for Windows or Cmd-Tab for Mac OS X). So, to quickly switch between two files all you have to do is <M-Tab><CR>.\n\nNow load \"proj/tpl/Class4.html\" - it does not exist, and you'll get empty window. Hit <M-Tab>, select \"class\" and hit <CR> - VIM will create new buffer for (still non-existing) \"proj/classes/Class4.php\". Ta-dah! Actually, this is my main reason for creating this plugin.\n\nNote that it DOES NOT matter what is your current directory: you can cd to whatever place you want. But it DOES matter where \".altfile\" is, becase patterns inside it are relative to its placement.\n\nTo show visual file selector hit <F3>. Use movement/cursor keys to highlight a file; <CR> loads file; <Tab> switches between labels.\n"}, {:name=>"diffchanges.vim", :summary=>"Show changes made to current buffer since the last save", :description=>"Show changes made to current buffer since the last save. This plugin is based from an example in the Hacking Vim book. The differences are that this functionality is in the form of a plugin, is a bit more robust, and can be toggled.\n\nCOMMANDS\nDiffChangesDiffToggle -- toggles the side-by-side diff view\nDiffChangesPatchToggle -- toggles the patch view\n\nMAPPINGS (<leader> is set to '\\&#039, by default)\n<leader>dcd -- DiffChangesDiffToggle\n<leader>dcp -- DiffChangesPatchToggle\n\nYou can override the default mappings by creating mappings like this:\n\nnmap <F6> <Plug>DiffChangesDiffToggle\nnmap <F7> <Plug>DiffChangesPatchToggle\n\nOPTIONS\ng:diffchanges_patch_cmd -- The command that's used to generate the patch (default: 'diff -u')."}, {:name=>"timestamp", :summary=>"Add a timestamp to your source file", :description=>"This SCRIPT will add/update the timestamp when you close the source file.\nC++, C, Java, Makefile, rb, py, vim script is supported."}, {:name=>"VFT--VIM-Form-Toolkit", :summary=>"console-based forms with checkboxes, comboboxes, etc. (screenshot included)", :description=>"The package includes:\n\n    vft.vim - the library\n    vft-test.vim - simple plugin the utilizes the library\n\nScreenshot of vft-test in action can be found here:\n\n   http://javascript.cooldev.com/alx/vft.png\n\nLots of work yet to be done, but the library has minimal yet complete set of features that should simplify creation of simple forms."}, {:name=>"DataStage-Server-and-Parallel", :summary=>"Syntax file for DataStage. Includes Universe Basic, DSX and Parallel functions.", :description=>"This script replaces old script vimscript #1310.\n\nIt includes vimscript #2143 for Universe Basic by Dan Sharp therefore you need that script too."}, {:name=>"sharp-Syntax--Rim", :summary=>"initial file based on ocaml and cs syntax files.", :description=>"Syntax highlighting for the F# programming language. http://research.microsoft.com/fsharp/fsharp.aspx"}, {:name=>"GNU-R", :summary=>"facilitates work with GNU R statistical package", :description=>"A. What it does:\npress F4 to process R files, press F5 to see the results saved in separate file ROutPut)\n\nB. Install:\nsimply copy the files from archive as follows:\n\n1) .vimrc goes to ~/\n2) RVim.bat goes to ~/.vim/ REMEMBER to make it executable (chmod +x FILE)\n3) myfiletypes.vim goes to ~/.vim\n4) myfunctions.vim goes to ~/.vim\n5) r.vim goes to /usr/share/vim/**CURRENT VERSION**/syntax/\n6) vimSwap (and ROutput inside) goes to ~/\n7) gpl.txt is for you to read.\n\nC. Licensing\nThis is released under GNU, copy attached.\n\nD. Acknowledgements\n\nThose files were inspired, and share some code with VimFiles for Ox by Vincent Nijs (originally posted http://www.jiscmail.ac.uk/cgi-bin/webadmin?A2=ind0112&L=ox-users&T=0&F=&amp; S=&P=900). Credit when credit's due. Good job Mr Nijs\n"}, {:name=>"renamec.vim", :summary=>"Renaming refactoring for C symbols using cscope", :description=>"I have not used or modified this script in a long time. Christophe-Marie Duquesne has published a script that is based on this script here, you will probably want to have a look at http://www.vim.org/scripts/script.php?script_id=3028\n\nOriginal description:\nA simple function to rename a C (and possibly C++) symbols (functions/variables) in multiple files using cscope information. Maybe just a starting point to adapt to your own needs, but at least works for me. \n\nWith the mapping below, one can start the renaming with \\r, enter the new name and it will be renamed (using a simple substitution on the lines returned by cscope) in all files. Needs an up to date cscope reference file (see below). \n\n"}, {:name=>"ukrainian-enhanced.vim", :summary=>"Ukrainian enhanced keymap", :description=>"A keymap for Ukrainian (UTF-8).\n\nThe \"Ukrainian enhanced keymap\" simply allows you typing Ukrainian in Vim using jcuken Windows layout.\nThere is another ukrainian layout already in Vim. See keymap\\ukrainian-jcuken.vim script by Anatoli Sakhnik. But this one differs in way it maps numeric keys. It uses values usual for Windows users.\n\nSee also:\n\t:help keymap\n\t:help i_Ctrl-^\n\nI use this in my vimrc file:\n\" Ukrainian support\n\"set keymap=ukrainian-enhanced\n\" Default - latin layout\n\"set iminsert=0\n\" Default - latin layout in search mode\n\"set imsearch=0\n"}, {:name=>"patran.vim", :summary=>"Syntax highlight file for MSC Patran", :description=>"Syntax highlight file for MSC Patran"}, {:name=>"dakota.vim", :summary=>"Syntax highlight file for DAKOTA Toolkit", :description=>"Syntax highlight file for DAKOTA Toolkit"}, {:name=>"Doxygen-via-Doxygen", :summary=>"Generate Doxygen documentation", :description=>"This script allows one to easily generate Doxygen documentation for C and C++ functions. Java could work, I haven\\\\&#039t tested.\n\nThere are many of these scripts available, but I\\\\&#039ve found most are commonly severely restricted by the fact that they parse the C/C++ code themselves. Parsing C++ is hard. Very hard even. I wouldn\\\\&#039t consider parsing code myself, and especially not in VimScript.\n\nSo the trick is this: use Doxygen itself to parse the code, and then parse that output instead. Doxygen can output to XML, which is easily processed further. In this case by applying an XSL transformation. VimScript is used to glue all this together, e.g. move to the correct line number, hightlight/remove the old tag.\n\nAs a result this script has the following nice features:\n- Parses C++ code correctly, regardless of layout, interspersed comments, etc. If Doxygen cannot parse it there\\\\&#039s little need to add a Doxygen tag. See www.doxygen.org for further details if you think you\\\\&#039ve found a bug.\n- Re-uses old Doxygen tags, i.e. generates new tags dropping old items and inserting new ones.\n\nThe maintenance bottleneck is the XSLT file, which should be kept up-to-date to the XML Doxygen outputs. Also, not all markup is kept intact. It is not my intention to make the XSLT file complete, I\\\\&#039m very pragmatic in that sense and I\\\\&#039ll only add what\\\\&#039s actually needed (at the moment: bold, italics, typewriter, (un)ordered lists).\n\nAt the moment I\\\\&#039m looking for developers proficient with both Vim and XSLT who want to give this a spin. This is *alpha* software. I\\\\&#039m releasing it purely in the spirit of Bazaar development. I have not thoroughly tested this script yet. Since I\\\\&#039m more than likely to use my own creation I\\\\&#039ll probably fix bugs and update new versions.\n\nFor all other users: feel free to download and use this. In my humble opinion it\\\\&#039ll serve you at least as good as the scripts already out there. But some hacking may be required.\n\nSources are licensed under the liberal MIT license."}, {:name=>"jammy.vim", :summary=>"a great color scheme", :description=>"Working with it every day,and having fun~~~\nsend me email , if you want to say anything"}, {:name=>"osx_like", :summary=>"Color scheme that uses MacOS X like colors", :description=>"This color scheme is derived from the excellent sienna color scheme with some adjustments: There is only one color set for light background, and it looks best under gvim.\nI adjusted almost only the colors for line numbers, folding and status bar. A screen shot can be found at http://img443.imageshack.us/my.php?image=osxlikejx7.gif\n\n(I am using GTK and Metacity themes from the Mac4Lin project. See http://sourceforge.net/projects/mac4lin )\n"}, {:name=>"PERLDOC2", :summary=>"Perldoc with sytnax highlighting in vim", :description=>"This is PERLDOC2 for Vim. This plugin provides colouful experience for viewing perl documentation. The following pod items receive special highlighting treatment: verbatim text, headings and lists. The generated pod documents are kept in a cache directory, which allows browsing back and forth in your pod history.\n\nFor more information and some screenshots, see http://mechanicalrevolution.com/blog/perldoc_vim.html"}, {:name=>"head.vim", :summary=>"easy reading file head or tail, with file prefix 'head:', 'tail:'.", :description=>"Overview\n--------\nOpen file with file prefix 'head:','tail:',\nvim editor read file 10 rows from top, or bottom.\n(for example, head:sample.pl, tail:somedir/app.conf)\n\ncommand example,\n  - Windows\n  (within vim)  : :e head;TEST.txt\n                : :e tail;TEST.txt\n\n  - Mac OSX, Unix, Liux\n  (command line): vim head:TEST.txt\n                : vim tail:TEST.txt\n\n  (within vim)  : :e head:TEST.txt\n                : :e tail:TEST.txt\n\n\nInstallation\n------------\n1. Copy the head.vim script to the $HOME/.vim/plugin or\n   the $HOME/vimfiles/plugin. Refer to the ':help add-plugin',\n   ':help add-global-plugin' and ':help runtimepath' topics for\n   more details about Vim plugins.\n2. Restart Vim.\n\n\nUsage\n-----\n(Windows)\n:e head;TEST.TXT  |  display 'TEST.TXT' head. (default 10 rows read.)\n:r head;TEST.TXT  |  read 'TEST.TXT' head, and insert at cursor position. (default 10 rows read.)\n:w head;TEST.TXT  |  update 'TEST.TXT' head with current buffer. (default 10 rows replaced.)\n\n:e tail;TEST.TXT  |  display 'TEST.TXT' tail. (default 10 rows read.)\n:r tail;TEST.TXT  |  read 'TEST.TXT' tail, and insert at cursor position. (default 10 rows read.)\n:w tail;TEST.TXT  |  update 'TEST.TXT' tail with current buffer. (default 10 rows replaced.)\n\n(OSX, Unix, Linux)\n:e head:TEST.TXT  |  display 'TEST.TXT' head. (default 10 rows read.)\n:r head:TEST.TXT  |  read 'TEST.TXT' head, and insert at cursor position. (default 10 rows read.)\n:w head:TEST.TXT  |  update 'TEST.TXT' head with current buffer. (default 10 rows replaced.)\n\n:e tail:TEST.TXT  |  display 'TEST.TXT' tail. (default 10 rows read.)\n:r tail:TEST.TXT  |  read 'TEST.TXT' tail, and insert at cursor position. (default 10 rows read.)\n:w tail:TEST.TXT  |  update 'TEST.TXT' tail with current buffer. (default 10 rows replaced.)\n\n\nPlugin Options\n--------------\ng:head_display_lines\n  customize number of lines of file reading.\n  below is setting example.\n\n      :let g:head_display_lines = 30\n\n  you will update this parameter by command 'Head',\n  for example,\n\n      :Head 30\n\n"}, {:name=>"repmo.vim", :summary=>"repeat motions for which a count was given", :description=>"Usage by example:\n\n  Type \"5j\" (without quotes) and then \";\" to repeat \"5j\".\n  Type \"hjkl\" and then \";\", it still repeats \"5j\".\n  Type \",\" to do \"5k\" (go in reverse direction).\n  Type \"4k\" and then \";\" to repeat \"4k\".\n\n  The following motions (and scroll commands) are mapped per default:\n      j,k, h,l, Ctrl-E,Ctrl-Y, zh,zl\n\nCheck out:\n\n  Visual mode, e.g. \"V5j;;;;\"\n  \"f{char}\" followed by \";,\" -- it should still work\n  Operator pending mode with \";\" and \",\"\n\nCommands:\n\n  :RepmoMap {motion}|{reverse-motion} ...\n\n      Map {motion} to be repeatable with \";\".  Use {reverse-motion} for \",\".  Key notation is like in mappings.\n\nOptions, with defaults:\n\n  \" keys to be used for repeating (notation like in mappings), checked frequently:\n  :let repmo_key = \";\"\n  :let repmo_revkey = \",\"\n\n  \" map some default motions (argument string for :RepmoMap):\n  :let g:repmo_mapmotions = \"j|k h|l <C-E>|<C-Y> zh|zl\"\n\nNotes:\n\n  Your own remapping of a motion is silently discarded.\n  Your own remappings for \"f\", \"F\", \"t\" and \"T\" are kept.\n\n2009 Jun 03"}, {:name=>"Railscasts-Theme-GUIand256color", :summary=>"A railscasts color theme that works in 256color terminals as well as gui", :description=>"This theme is based on Josh O'Rourke's Vim clone of the railscast\ntextmate theme ( vimscript #1995 ).  The key thing I have done here is\nsupply 256-color terminal equivalents for as many of the colors as\npossible, and fixed up a few of the funny tags for editing e-mails and\nsuch.\n\nYou can see a side-by-side comparison at http://zork.net/~nick/screenshots/colorcomparison.png\n"}, {:name=>"cwiki", :summary=>"single file wiki with unobtrusive syntax", :description=>"The plugin enhances syntax/folding/mappings of the current buffer, converting it to simple yet useful single-file wiki. Name stands for something like \"compact wiki\".\n\nScreenshot can be downloaded here: http://a-hw.narod.ru/cwiki.png\n\nFeatures:\n=========================\n\n * single file storage (readable textual format; built-in VIM encryption can be applied)\n * unobtrusive wikiwords (no special symbols like brackets)\n * synonyms (you can define them, so \"Bill\", \"William\", and \"Mr. W. Smith\" point to the same article)\n * folding (separates articles; shows number of meaningful article lines)\n * syntax highlighting\n * visual wikiword selector\n\nSyntax:\n=========================\n\nFirst level article title: +++ Wiki word\nSecond level article title: ++++ Wiki word\nThird level article title: +++++ Wiki word\n\nLevel affects folding only, no other side effects.\n\nOptional metadata is expected to be the first non-blank line after the title:\n\n\tSynonyms: a, b, {C,c}def\n\nWhitespace before \"Synonyms\" and after comma is mandatory. Curly braces are expanded like shell patterns, i.e. the line above is equivalent to the following:\n\n\tSynonyms: a, b, Cdef, cdef\n\nActually \"Synonyms\" is the only metadata currently supported.\n\nKey mappings:\n=========================\n\nn_Ctrl-]: follow wikiword under cursor\nv_Ctrl-]: add new article; currently selected text is used as title\nn_F5: refresh the wiki (you need this if you altered synonyms)\nn_F3: show wikiword selector (current wikiword will be highlighted; move cursor to the desired wikiword and press <CR> to select it, or press <F3> to close the selector)\n\nNo other special bindings so far. You can move text around at will. Specifically it is really handy to move whole articles by doing DD and p with folded blocks.\n\nHighlighting groups:\n=========================\n\n * CWikiTitle1, CWikiTitle2, CWikiTitle3: article titles (linked to Title by default).\n * CWikiTitleMark: \"+\" signs in the title (linked to Title by default)\n * CWikiWord: any detected wikiword (linked to Underlined by default)\n\nNotes:\n=========================\n\nAFAIK on Win32 by default Underlined looks like Normal, so you won't be able to see any wikiwords. The following might help:\n\n\t:highlight Underlined gui=underlined\n\nI didn't experience any problems with the plugin yet. But maybe it is a good idea to make backups every now and then (if you do something useful, of course):\n\n\tset backup\n\tset writebackup\n\tau BufWritePre <buffer> let &bex = '-' . strftime(\"%Y%b%d%X\") . '~'\n\nSample:\n=========================\n\nHere is minimal yet complete sample of the wikifile. Just paste it into new buffer and type :set ft=cwiki (after installing the plugin, of course).\n\n--8<------------------------------\n+++ First article\n\n    Synonyms: 1st article, {A,a}rticle #1\n\nHere we have some text. I'd like to mention Mr. W.\nSmith (note that his name is wrapped with <CR>).\n\n+++ Mr. W. Smith\n\n    Synonyms: William, Bill, dad\n\nThis article is about Mr. W. Smith, also known as\nWilliam, Bill. He has two doughters: Jane and Kim.\n\nArticle #1 mentions Bill. Though, that 1st article\nis rather short.\n\n++++ Jane Smith\n\n    Synonyms: Jane\n\nMs. Jane's dad is Bill.\n\n++++ Kim\n\nKim is too young, so we refer to her without the last\nname, e.g. no synonyms yet. She loves her dad.\n--8<------------------------------"}, {:name=>"rdhelp.txt", :summary=>"Help to Rd files (R documentation) in vimhelp format", :description=>"This is an excerpt from R manual \"Writing R Extensions\" which is limited to section 3. \"Writing R Documentation Files\". It is a specification of the Rd format, available commands etc. For a full document look here: http://cran.r-project.org/doc/manuals/R-exts.html. The project's website is http://www.r-project.org/."}, {:name=>"cqml.vim", :summary=>"Syntax definitions for the Component Quality Modelling Language", :description=>"Highlights keywords from CQML which is a formal language to define component quality aspects and templates for service level agreements in software engineering."}, {:name=>"Source-Explorer-srcexpl.vim", :summary=>"A Source code Explorer based on tags works like context window in Source Insight", :description=>"[Introduction]\n\nThe plugin (srcexpl.vim) is a source code explorer based on tags and it provides an overview of the function and type definitions.It has such a mechannism that works like the context window component of \"Source Insight\" software.\n\nIf you have used Source Insight for browseing C/C++/Java project before, you may find that you can browse the definitions with the Source Explorer as well as the context window of \"Source Insight\".\n\nFor example, you put the cursor on a function name in the Normal mode, its definition will show on the Source Explorer window a moment later. As soon as you do the 'double-click' operation using your mouse onto the Source Explorer window which had appeared on the bottom of (G)Vim, the definition and its context will be shown on the editor window.(Just like Source Insight does). Besides, multi-definitions' listing and jumping works like the Source Insight too. In srcexpl v1.2 and above, the function key which users mapped will play a important role that you can not only use mouse but also use keyboard in order to exploring source code in both GUI and cterm VIM.\n\nThe Source Explorer can work with 'Taglist' and 'NERD tree' very well. Both of them make (G)Vim looks like the \"Source Insight\" in Unix/Windows/Mac enviroment.\n\n[Features]\n\n1\\ Go insight the definitions of functions and various types of C/C++/Java language project, including function, marcos, structure, array, method, class, global variable, local variable etc.\n2\\ Double click using left mouse and your own map key (such as: <ENTER>) onto the  Source Explorer window can go forward to the preview context.\n3\\ Popup menu and Your own map key (such as <A-,> in Source Insight) to go back from the preview context.\n4\\ Auto create and update the 'tags' file intelligently.\n\n[Tips]\n\n1\\ Ensure that there is only one 'tags' file in your project PATH, or it would make VIM load all of them on the same time. For example: There are two tags file in the 'your_project' directory, so we will delete the excess 'tags' file in the 'sub_directory'.\n\n... ...\n\n[chewenlong@localhost ~]$ cd your_project/\n[chewenlong@localhost your_project]$ pwd\n/home/chewenlong/your_project\n[chewenlong@localhost your_project]$ ls\nbar.c  sub_directory  tags\n[chewenlong@localhost your_project]$ cd sub_directory/\n[chewenlong@localhost sub_directory]$ ls\nfoo.c  tags\n[chewenlong@localhost sub_directory]$ rm -rf tags\n[chewenlong@localhost sub_directory]$ ls\nfoo.c\n[chewenlong@localhost sub_directory]$ cd ..\n[chewenlong@localhost your_project]$ ls\nbar.c  sub_directory  tags\n[chewenlong@localhost your_project]$ vim bar.c\n\n... ...\n\n2\\ Make sure the files you are exploring is unix-format, that is, there is no '\\r'(displayed as '^M') at the end of each line. Because the plugin would make a jump mistake when executing EX-commands.\n\n3\\ If you want your VIM works like the Source Insight, just try a VIM plugin named 'Trinity (trinity.vim)': \n\nhttp://www.vim.org/scripts/script.php?script_id=2347\n\nThis simple plugin can manage 'Source Explorer', 'Taglist' and 'NERD Tree' work together very well.\n\nIf you want to use VIM with Source Explorer in the UNIXs-console, I suggest map the keys below to jump from one window to another:\n\nnmap <C-H> <C-W>h\nnmap <C-J> <C-W>j\nnmap <C-K> <C-W>k\nnmap <C-L> <C-W>l\n\nThe typical actions using srcexpl.vim are: \n\na\\ Move the cursor onto a symbol word.\nb\\ As soon as the definition of the word is displayed on the preview window, we type <Ctrl-j> to jump into the previw window.\nc\\ Type the SrcExpl_jumpKey(<ENTER> as default) to jump to the exact context of its definition.\nd\\ Type the SrcExpl_gobackKey(<SPACE> as default) to go back to the previous position of the symbol word.\n\nThere are some screenshots on the website: http://srcexpl.blogspot.com/\n"}, {:name=>"ColorSchemeEditor", :summary=>"PyGTK GUI to more easily create colorschemes (keywords: color scheme editor)", :description=>"This plugin provides a GUI tool which simplifies creating/editing Vim\ncolorscheme files.  It consists of a Vim plugin as well as a Python program,\nand utilizes Vim's command server interface |clientserver| for communications.\n\nNew in version 1.1:\nThe list of highlight groups now displays a swatch of the current foreground/\nbackground colors.  You can see right away which colors are used for each\nhighlight group.  \nAfter getting some negative feedback over my last few colorscheme contributions,\nI have added a readability column to this tool that analyses the color contrast \nbetween foreground and background colors.  I hope that this will lead to \ncolorschemes that are easy on the eyes for all Vim users.\n\nSee the screenshots:\n\nhttp://i49.servimg.com/u/f49/12/09/64/12/metada10.jpg\nhttp://i49.servimg.com/u/f49/12/09/64/12/colors10.png\n\nThe goals that I hope to achieve through this plugin are to improve the\nquality of existing colorschemes by allowing the authors the freedom to create\ncolorschemes in a natural WYSIWYG fashion.  Immediate visual feedback lets the\nauthor quickly assess the effects of their changes, and allows them to easily\nchoose just the right color for a highlight element.  By displaying all of the\n\"preferred\" highlight groups in a treeview, colorscheme authors can ensure\nthat all of the important highlights have been changed to fit in with the\noverall scheme.  Users of colorschemes can use this plugin to tweak their\nfavorite colorschemes more to their liking.\n\nColorschemes generated with this plugin are backwards-compatible with earlier\nversions of Gvim that do not use such highlight groups as CursorLine or Pmenu.\n\nYour palette of custom colors is saved in the colorscheme file, so that your\nchoices persist between editing sessions.  This helps you maintain\na consistent look-and-feel while you are in the process of creating the\ncolorscheme.  Other metadata related to the colorscheme, such as licensing\ninformation and your contact information are accessible from within the editor\nas well.\n\nThis plugin makes a nice compliment to my earlier work, ColorSchemeMenuMaker.\n    http://www.vim.org/scripts/script.php?script_id=2004\n\nIf you have already installed ColorSchemeMenuMaker, the menu entry for\nColorSchemeEditor will appear at the bottom of the \"ColorSchemes\" menu item.\nAdditionally, you may invoke it via the :ColorSchemeEditor command.\n\nSend bugs, suggestions, flames, etc. to NOSPAMewfalor@NOSPAMgmail.com - NOSPAM.\n\n"}, {:name=>"reliable", :summary=>"A futuristic colorscheme with a bright, clean look", :description=>"Created with ColorSchemeEditor vimscript #2180\nSee also ColorSchemeMenuMaker vimscript #2004"}, {:name=>"vimlatex", :summary=>"Sanitizes LaTeX error messages for Vim-LaTeX.", :description=>"# vimlatex: Script wrapper for TeX/LaTeX/etc. that sanitizes output to\n#           be compatible with Vim-LaTeX's errorformat. Prevents Vim\n#           from opening the wrong file after some errors.\n#\n#           This script is inspired by\n#\n# http://hermitte.free.fr/vim/ressources/vimfiles/compiler/vim-tex_sh.html\n#\n# and\n#\n# http://www.unix.com/shell-programming-scripting/20218-pipelining.html\n#\n# Original author: Ted Pavlic\n#                  ted@tedpavlic.com\n#                  http://www.tedpavlic.com/\n#\n# Mercurial source code repository for original author's version:\n#                  http://hg.tedpavlic.com/vimlatex/\n#\n# Copyright (c) 2008 Theodore P. Pavlic under MIT license (http://www.opensource.org/licenses/mit-license.php)\n#\n# Usage: vimlatex %command [%arguments]\n#\n#        where the command line:\n#\n#        %command %arguments\n#\n#        would texify as normal. In other words, the \"vimlatex\" command\n#        can simply be added before a given working command line.\n#\n# For more information (and history), see:\n#\n# http://phaseportrait.blogspot.com/2008/03/fixing-vim-latex-compiler-error.html\n#"}, {:name=>"smoothPageScroll.vim", :summary=>"smooth page scroll", :description=>"Yet another smooth page scroll implementation.\nI found scrolling the number of winheight() is not always correct, because the file could have wrapped lines. Let's say if your window height is 40, but you only see 35 actual lines because you have 5 wrapped lines. Then by scrolling the number of winheight(), 5 lines would be over-scrolled. This script won't skip the extra lines for having wrapped lines.\n\nThis script also emualtes one of VIM's normal <PageDown> or <PageUp> behaviors: which is to display first or last 2 lines from the previous screen after scrolling, unless it reaches first or last line, or the current window is showing 3 lines or less. \n\nSee other implementation - vimscript #1601, :help scroll-smooth"}, {:name=>"file-line", :summary=>"Allows you to open file:line and it does the right thing :-)", :description=>"When you open a file:line, for instance when coping and pasting from an error from your compiler vim tries to open a file with a colon in its name. With this little script in your plugins folder if the stuff after the colon is a number and a file exists with the name especified before the colon vim will open this file and take you to the line you wished in the first place."}, {:name=>"git-file.vim", :summary=>"open any version of a file in git", :description=>"Allows for opening <branch>:<file> patters using a git repo.\n\nYou can open a file from the shell:\n\n    vim HEAD~10:filename\n\nor from inside vim:\n\n    :e branch:filename\n    :sp tag:filename\n\nyou could even check what changed between the current edits and another revision:\n\n    :diffthis\n    :vsp HEAD:%\n    :diffthis\n\nbut that's what gitdiff.vim (vimscript#1846) is for."}, {:name=>"pig.vim", :summary=>"Pig language syntax highlighting", :description=>"Pig is a powerful system for analysis of large data sets using MapReduce approach.\nhttp://incubator.apache.org/pig"}, {:name=>"Latex-Text-Formatter", :summary=>"This scripts makes it easier to format latex text", :description=>"The script allows to format a piece of latex text by splitting paragraphs according to latex keywords.\n\nThe main function, FormatLatexPar, formats the latex text to which the cursor belong, stopping above and below when a keyword is found, or when the vim paragraph ends. Then it moves at the end of the formatted section. If the current line is a comment, does the same thing, but searching for neighboring comments. The function is mapped to CTRL-j.\n\nNote: have a look also at a similar scrip (http://www.vim.org/scripts/script.php?script_id=2307).\n\nTodolist: merge multiple empty line into one.\n\nIf you have better solutions, improvements or suggestions, email me!\n\nHere is an example of text, and the resulting formatted text obtained by repeated calls of the function:\n\n<EXAMPLE BEGIN>\nThis is an example of the latex formatting script: the paragraphs are\nformatted\nby taking into account special latex ending keywords, as any\n\\begin{something}\n    or as,\n    for example\n\\end{something}\n\nAlso\nformulas\n$$\n    like this\n    one\n$$\nare kept separated\n\nOther separators are a line beginning\nwith\n{\n    as this one\n}   \nbut others can be easily added\n\nAlso,\ncomments\n% like this\n% or this\n% are merged\n\nbut not % if the comment is not at the beginning of the line\n% as in this case.\n\n\b\\begin{itemize}\n    \\item Some commands, as item, are delimiters,\n    but one may want\n    to format them with the text.\n    \\item These are treated differently\n    in the script\n\\end{itemize}\n\nYou can easily suit this script to your needs\nchanging SingleLineLatexParEndings and\nMultiLineLatexParEndings functions.\n<EXAMPLE END>\n\nis formatted, by subsequent calls, into\n\n<FORMATTED EXAMPLE BEGIN>\nThis is an example of the latex formatting script: the paragraphs \nare formatted by taking into account special latex ending keywords,\nas any\n\b\\begin{something}\n    or as, for example\n\\end{something}\n\nAlso formulas\n$$\n    like this one\n$$  \nare kept separated\n\nOther separators are a line beginning with\n{\n    as this one\n}   \nbut others can be easily added\n\nAlso, comments\n% like this or this are merged\n\nbut not % if the comment is not at the beginning of the line\n% as in this case.\n\n\\b\begin{itemize}\n    \\item Some commands, as item, are delimiters, but one may want\n    to format them with the text.\n    \\item These are treated differently in the script\n\\end{itemize}\n\nYou can easily suit this script to your needs changing\nSingleLineLatexParEndings and MultiLineLatexParEndings functions.\n<FORMATTED EXAMPLE END>"}, {:name=>"earendel", :summary=>"Light and cheerful color scheme with friendly colors, highly readable", :description=>"This color scheme is for GUI only, although it contains some tweaks for the console version of Vim, too. It is not too complicated and its highlights are supposed to be cheerful, friendly to your eyes, and easy to read. Though all niceties can only bee seen in Vim 7, this color scheme should work in Vim 6, too.\n\nSince version 1.1 it contains not only a light color scheme, but also a dark one. The correct scheme is being chosen according to the setting of the option 'background'.\n\nYou can switch between these styles by using the :Colo command, like \":Colo light\" or \":Colo dark\""}, {:name=>"Luinnar", :summary=>"Dark color scheme", :description=>"This is a dark color scheme with bright text colors. The background is absolutely black, so the color scheme would suit only the people who aren't afraid of darkness. The text colors are like road lights at night, it's magical from my point of view.\n\nBelow are some examples:\nhttp://luinnar.narod.ru/vim/qsort.png\nhttp://luinnar.narod.ru/vim/qsort-term.png (in terminal)\n\nhttp://luinnar.narod.ru/vim/pick.png\nhttp://luinnar.narod.ru/vim/pick-term.png (in terminal)\n\nhttp://luinnar.narod.ru/vim/dirent.png\nhttp://luinnar.narod.ru/vim/dirent-term.png (in terminal)\n\nDiff mode:\nhttp://luinnar.narod.ru/vim/vim-diff.png\nhttp://luinnar.narod.ru/vim/vim-diff-term.png (in terminal)"}, {:name=>"dtrace-syntax-file", :summary=>"This provides excessive highlighting of dtrace script files", :description=>"This file provides excessive syntax highlighting for files written in the D language that's used with dtrace. A description of the D file format can be found at http://docs.sun.com/app/docs/doc/817-6223.\n\nVersion 1.5 of this script is included in the official vim7.2 distribution."}, {:name=>"MountainDew.vim", :summary=>"Stay awake through those long hack sessions", :description=>"Do the Dew!  http://www.servimg.com/image_preview.php?i=5&u=12096412\nCreated with ColorSchemeEditor vimscript #2180"}, {:name=>"Syntax-for-Fasta", :summary=>"Highlighting for Fasta (Pearson) format", :description=>"Syntax highlighting for the Fasta format (Pearson) for biosequences.\nAlso available at http://bioinf.ibun.unal.edu.co/~miguel/?id=5"}, {:name=>"fpdf.vim", :summary=>"PDF writer", :description=>"fpdf.vim is a port of FPDF.\n\nAbout FPDF:\n  FPDF is a PHP class which allows to generate PDF files with pure PHP.\n  See http://www.fpdf.org/\n\n\nRequirement:\n  :set encoding=utf-8 and iconv() feature for non-ascii text.\n  xxd for image/font embedding.\n  xxd and gzip for compression.\n\n\nUsage:\n  :set runtimepath+=/path/to/fpdf-vim\n  :let FPDF = fpdf#import()\n  :let pdf = FPDF.new()\n  :call pdf.AddPage()\n  :call pdf.SetFont('Arial','B',16)\n  :call pdf.Cell(40,10,'Hello World!')\n  :let pdfout = pdf.Output()\n  :put =pdfout\n\n\nReference:\n  See FPDF site.\n"}, {:name=>"number-marks", :summary=>"showing marks using number array in color, easy to trace.", :description=>"You can show your marks using number array in color, and you can delete one or all marks(now, you can replace a mark to another place). The color depend on your color scheme setting. You easy to trace the marks using hot key, move to ahead or behind. The mark's number make you easy to understand where you are. And you also can save and reload these marks in a file.\n\n这个脚本显示用带颜色的数字标明的[标记]，你可以删除你不想用的某个[标记]，或者用F4键全部删掉所有的[标记](现在也可以把一个标记移动位置，而不改变他的数字标号)。带颜色的数字[标记]使你更容易了解当前行在代码中的位置，方便理解代码。[标记]的颜色依赖于你的颜色设定文件。不同的颜色风格可能又不同的[标记]颜色式样。你可以很方便的使用快捷键向前或者向后跟踪你的[标记]。你也可以保存你的[标记]到你指定的文件夹下面，然后以后再次打开所有的[标记]。\n\n# 两个重要更新，移动标记和在不同的tab页之间跳转, 如果你有两个以上的tab页的话。\n\" ##  You can set marks only less 100.  ##\n\" ##  If you have more than two tabpage, you can jump from one tabpage to another one.  ##\n\n这个脚本因为signs的显示的原因，所以只提供最大99个[标记]。\n\nscreenshot / 抓图\nhttp://wiki.ubuntu.org.cn/images/b/b6/Vim_marks.PNG\n\n USAGE:\n 1:make a mark, or delete it: \n  ctrl + F2\n  mm\n 2:move to ahead mark:          \n  shift + F2\n  mv\n 3:move to next mark:                           \n  F2\n  mb\n 4:delete all marks:\n  F4\n5:moving a mark:\n  m.\n  (press m. at the one mark, and move the cursor to another line, press m. again. )\n6:save marks\n  F6， input a name， press ENTER\n7:reload marks\n  F5， input a name， press ENTER\n\n用法：\n（下面所有的操作都是在非插入模式下，光标置于你要操作的行）\n1：设定一个[标记]，或者取消这个[标记]\n    按Ctrl+F2 或者 mm （快速连着按两下m字母键）\n2：向前移动\n   按 shift + F2 或者 mv （快速按字母m和字母v键）\n3：向后移动\n   按 F2 或者 mb\n4：取消所有的[标记]\n    按F4键    （按取消后，再次标记时候重新从01到99开始标数）\n5:移动一个[标记]\n    把光标移动到一个有标记的行，按m. 这时这个标记改变颜色，\n    然后把光标移到一个没有标记的行，再一次按m.  则把刚才的\n   标记移动到当前行。\n6:保存标记\n   按F6，输入一个名称，按回车。\n7：读入标记\n   按F5，输入一个以保存过的名称，按回车。\n"}, {:name=>"Unicode-Macro-Table", :summary=>"Macros to easily add mathematical symbols and operators to your document", :description=>"Provided under the GPLv3 (http://www.gnu.org/licenses/gpl.txt).\n\nThis script provides the needed functionality to easily register insert mode macros for useful Unicode characters as well as initial mapping tables for a mostly math oriented background.\n\nFor further information refer to: http://westhoffswelt.de/blog/vim_unicode_macros.html"}, {:name=>"antlr3.vim", :summary=>"ANTLR v3 error parsing for ANT", :description=>"ANTLR v3 has some strangely formatted error messages. With ANT you can use the errorformat of this script."}, {:name=>"beauty256", :summary=>"A beautiful theme specially designed for xterm with 256 color", :description=>"this is my first theme here. it uses natural and friendly colors. and convert your terminal vim to modern-looking IDE.\nscreenshots are here: \n\nhttp://b.imagehost.org/view/0306/beauty256.png\nhttp://b.imagehost.org/view/0309/beauty256_2.png\n\nthis is specially designed for xterm with 256 color like terminal of ubuntu systems.\n"}, {:name=>"rastafari.vim", :summary=>"color scheme for black terminal or GUI", :description=>"This is a dark color scheme (for GUI or black terminal).  I named it rastafari bacause its main colors: black, green, red, gold.\n\nIt should work equally well for color terminal and GUI.\n\nScreenshot:\n  http://dominique.pelle.free.fr/rastafari.vim.png\n\nSee also my ~/.vimrc highlighted with the rastafari colorscheme:\n  http://dominique.pelle.free.fr/.vimrc.html\n"}, {:name=>"gauref.vim", :summary=>"Look up a reference manual of Gauche", :description=>"Screenshot:\n  English: http://photozou.jp/photo/photo_only/175590/10747826\n  Japanese: http://photozou.jp/photo/photo_only/175590/10747824\n\nDescription in Japanese:\n  http://vim.g.hatena.ne.jp/keyword/gauref.vim \n\nDescription: ---------------------------------------------------------- {{{1\n  Gauref provides interfaces to look up a keyword in a reference manual of\n  Gauche which is an R5RS Scheme implementation.\n                                                                             \n  You can look up a keyword:\n    - command-line with completion.\n    - under the cursor in Normal mode.\n    - selected in Visual mode.\n                                                                             \n  In the buffer of reference manual, folds for every section/entry are\n  created and closed by default. You can open a closed fold by looking up\n  it.\n                                                                             \n  gauche-refe.txt and gauche-refj.txt are Gauche reference manuals of\n  English and Japanese version which are converted texi files inluded Gauche\n  package.\n                                                                             \nInstallation: --------------------------------------------------------- {{{1\n  - Drop this file in your plugin directory.\n  - Drop gauche-refe.txt in ~/.vim/. You can change location by\n    g:gauref_file option. (To see japanese manual, use gauche-refj.txt)\n                                                                             \nUsage: ---------------------------------------------------------------- {{{1\n  You can look up keywords by command/mapping.\n                                                                             \n  Command:\n    :Gauref {keyword}\n      looks up {keyword}. You can use command-line completion.\n                                                                             \n  Mapping:\n    \"K\"\n      looks up the keyword under the cursor in Normal mode, or selected\n      keyword in Visual mode.\n                                                                             \n  If there is more than one entry with the same name, you can jump to next\n  entry by using \"K\" on the keyword.\n                                                                             \n                                                                             \nOptions: -------------------------------------------------------------- {{{1\n  g:gauref_file:\n    The file name of Gauche reference manual.\n                                                                             \n  g:gauref_key_lookup:\n    The key which is mapped to look up the keyword under the cursor or\n    selected.\n"}, {:name=>"northland.vim", :summary=>"Blueish colorscheme with dominant dark blue/red", :description=>"Relatively dark colorscheme, with dominant dark blue and red. For gvim only."}, {:name=>"SCMDiff", :summary=>"Highlight changed lines in a file via SCM diff command", :description=>"This script is a modification of the script posted here:\nhttp://tekrat.com/2008/02/21/vim-diff/\n\nIt allows you to quickly toggle (through a keybinding, Ctrl-D by default) the highlighting of changed lines in a file through an SCM's diff command.\n\nIt also binds Ctrl-G to :set nodiff to quickly turn off the highlighting.\n\nThe original script was written for git, but this version works for (at least) Mercurial and Subversion as well.  CVS and Perforce likely work but have not been tested.\n\nIt likely only works on Unix systems, or at least systems with 'cat' and 'patch', in addition to the SCM's command.\n\nConfiguration consists of the variable g:SCMDiffCommand, which if not set will be set to 'svn', assuming Subversion.  If g:SCMDiffCommand is set to 'hg', it works for Mercurial, and likewise 'git' for git."}, {:name=>"Boost-Build-v2-BBv2-syntax", :summary=>"Syntax highlight for BBv2 build scripts (Jamfile, Jamroot)", :description=>"There\u0092s another build system that I personally prefer to use: http://boost.org/boost-build2/index.html\nThis scripts cover a small amount of the BBv2 syntax, but the work has just been started ;-) Welcome any contributions!"}, {:name=>"vimgen", :summary=>"vim inline generator / template expander", :description=>"Vimgen is a simple template system that works inside a VIM buffer. The \ninput is a region of text. Everything until the first empty line in this \nregion is considered the data section, everything below the first empty line\nis the template section. See included help file.\n\nThe data section of the input (everything until the first empty line) has to \nbe a valid VIM dictionary. Newlines (\"\\n\") but no empty lines can be inserted for \nbetter readability (they are ignored). The data section is evaluated using VIM's \neval function, hence it can include VIM functions, e.g. from the included range_date.vim.\n\nThe template section of the input (everything below the first empty line) is the\ndesired output (including newlines etc.) that has to be enriched/multiplied by the \ndata using vimgen tags.\n\nThere are only three types of tags:\n\n«-var»...«-»          \nthis tags loop over the variable 'var' which has to be \na list. Inside the loop «var» references the element of\nthe current iteration\n\n«!var»...«-»\nused inside a loop over 'var'. The test/tags that are surrounded\nby this tag are ignored in the first iteration of the loop. This\nis useful for enumerations (see |vimgen-examples|)\n\n«var»\nthis tag is replaced with the variable 'var', where 'var'\neither has only one value or the tag is surrounded by \na loop iterating over 'var'. In case of nested dictionaries,\na dot notation is used, e.g. a.b.c\n\nExample of a template for a partitioned oracle table:\n\n{'date':Range_month(\"200712\",\"200803\"), 'code':[['foo','0OF'',''OFF2'],['bar','RAB']]}\n\nCREATE TABLE test_table\n    (date_id  DATE NOT NULL, id1 NUMBER, id2 NUMBER) \nPARTITION BY RANGE (date_id) SUBPARTITION BY LIST (id1)\n(\n  «-date»«!date», \n  «!»PARTITION testpart_«date» VALUES LESS THAN (TO_DATE('«date»01', 'YYYYMMDD'))\n  ( \n    «-code»«!code»,\n    «!»SUBPARTITION testpart_«date»_«code[0]» VALUES ('«code[1]»')«-»\n  )«-»\n);\n\nOutput:\nCREATE TABLE test_table\n    (date_id  DATE NOT NULL, id1 NUMBER, id2 NUMBER) \nPARTITION BY RANGE (date_id) SUBPARTITION BY LIST (id1)\n(\n  PARTITION testpart_200712 VALUES LESS THAN (TO_DATE('20071201', 'YYYYMMDD'))\n  ( \n    SUBPARTITION testpart_200712_foo VALUES ('0OF','OFF2'),\n    SUBPARTITION testpart_200712_bar VALUES ('RAB')\n  ), \n  PARTITION testpart_200801 VALUES LESS THAN (TO_DATE('20080101', 'YYYYMMDD'))\n  ( \n    SUBPARTITION testpart_200801_foo VALUES ('0OF','OFF2'),\n    SUBPARTITION testpart_200801_bar VALUES ('RAB')\n  ), \n  PARTITION testpart_200802 VALUES LESS THAN (TO_DATE('20080201', 'YYYYMMDD'))\n  ( \n    SUBPARTITION testpart_200802_foo VALUES ('0OF','OFF2'),\n    SUBPARTITION testpart_200802_bar VALUES ('RAB')\n  ), \n  PARTITION testpart_200803 VALUES LESS THAN (TO_DATE('20080301', 'YYYYMMDD'))\n  ( \n    SUBPARTITION testpart_200803_foo VALUES ('0OF','OFF2'),\n    SUBPARTITION testpart_200803_bar VALUES ('RAB')\n  )\n);"}, {:name=>"TwitVim", :summary=>"Twitter client for Vim", :description=>"===========================================================\nNote: Twitter will phase out Basic authentication on August 16, 2010. At that time, TwitVim versions earlier than 0.5.0, which do not support OAuth, will gradually encounter lower rate limits until they stop working completely on August 31. Please upgrade prior to that date. However, TwitVim 0.4.x will continue to work with identi.ca, which will still support Basic authentication.\n\nTwitVim OAuth support requires a Vim binary compiled with either Perl or Python. See :help TwitVim-install for more details.\n===========================================================\n\nTwitVim is a Vim plugin that allows you to post to Twitter and view Twitter timelines. It is an enhancement of vimscript #2124 by Travis Jeffery. Credit goes to Travis for the original script concept and implementation.\n\nTwitVim supports most of the features of a typical Twitter client, including:\n - Friends, User, Direct Message, and Mentions timelines\n - Twitter Search\n - Replies and retweets\n - Hashtags (jump to search timeline)\n - In reply to (See which tweet an @-reply is for.)\n - Opening links in a browser\n - User profile display\n - Twitter Lists\n - URL shortening and expansion\n\nTwitVim uses cURL to communicate with Twitter. Alternatively, you can configure TwitVim to use Vim's Perl, Python, Ruby, or Tcl interfaces for faster network I/O.\n\nUsage:\n\n:PosttoTwitter - This command will prompt you for a message to send to Twitter.\n:CPosttoTwitter - This command posts the current line in the current buffer to Twitter.\n:BPosttoTwitter - This command posts the current buffer to Twitter.\n\nAlt-T - In Visual select mode, the Alt-T key posts the selected text to Twitter.\n  (use Ctrl-T instead if menu bar is enabled)\nNOTE: The T mapping was changed to Alt-T to avoid overriding the T search command.\n\nAlt-R - Starts a @-reply. (from timeline buffer)\nAlt-D - Starts a direct message. (from timeline buffer)\n\n:FriendsTwitter - View friends timeline.\n:UserTwitter - View your timeline.\n:RepliesTwitter - View @-replies.\n:PublicTwitter - View public timeline.\n:DMTwitter - View direct messages.\n\n:Tweetburner - Shorten a URL with Tweetburner and insert at cursor.\n:ATweetburner - Same as above but insert after cursor.\n:PTweetburner - Same as above but start tweet on cmdline with short URL.\n\nAnd similar commands for TinyURL, SnipURL, Metamark, bit.ly, is.gd, urlBorg, tr.im, Cligs, and zi.ma.\n\n:SearchTwitter - Use Twitter Search.\n\nMany more commands and mappings are available. See TwitVim's help documentation for full details.\n\nContact me on Twitter at http://twitter.com/mortonfox\nGet TwitVim announcements at http://twitter.com/twitvim\n"}, {:name=>"CoremoSearch", :summary=>"A simple simultaneous search script.", :description=>"  This script provides simultaneous search functionality.\n                                                                     \n  You can add a string that you want to search and remove a string.\n\n  (from 0.2) Color highlighting is available setting :set[l] nohlsearch.\n                                                                     \nUsage:\n  A. Adding a word (like asterisk(*) keystroke)\n      1. Place the cursor on the word that you want to search.\n      2. Press <C-@> or :CoremoSearchAdd\n                                                                     \n  B. Adding a selected string\n      1. In visual mode, select the string that you want to search.\n      2. Press <C-@> or :CoremoSearchAddV\n                                                                     \n  A'. Removing a word\n      1. Place the cursor on the word.\n      2. Press <Learder><C-@> or :CoremoSearchRemove\n          (in most cases, <Leader> equals to backslash(\\) keystroke)\n                                                                     \n  B'. Removing a selected string\n      1. In visual mode, select the string.\n      2. Press <Learder><C-@> or :CoremoSearchRemoveV\n          (in most cases, <Leader> equals to backslash(\\) keystroke)\n"}, {:name=>"runzip", :summary=>"edit zip files recursively (zip files inside zip files)", :description=>"this plugin improves vim runtime zip plugin, making it able to recursively read and write zip files : it allows editing zipfiles inside zipfiles inside zipfiles (on an arbitrary number of levels).\n\nWarning: this plugin needs python interface. it can be used only if vim is compiled with +python feature. To check this, type :version, and look for +python."}, {:name=>"Relativize", :summary=>"quickly make a full path name relative to an index.html or tags file", :description=>"               Project with a tags file example:\n\n               Open a long full path name from some error log\n\n                vi /some/full/path/to/project/current_project/lib/module/file.ext\n               ...\n\n               :Relativize tags<cr>\n\n               if you type :pwd you should get\n\n               /some/full/path/to/project/current_project\n\n               assuming a tags file has been created in the current_project\n               file in the past.\n\n               So hopefully this means tag jumps will work and relative\n               include paths can be accessed via gf.\n\n               This could also be useful for other landmark files on the\n               system (eg. index.html, tags, .project,build.xml,README...etc). \n               In the above example\n               using the actual file.ext as the argument will make the\n               working directory the module directory\n\n               The function will prioritise the deepest tags file.\n\n                I have this in my vimrc to give you some ideas\n                \n                nnoremap ,pp :split<cr>:enew<cr>:r! tail -n 1000 /var/log/php_errorlog<cr>:set buftype=nofile<cr>Gf/\n                nnoremap gft gf:Relativize tags<cr>\n                nnoremap gfi gf:Relativize index.php<cr>\n\n\n\n\n         Bugs:\n\n               - Will probably not work with MS windows paths in current form.\n               It will probably cause an infinite loop you will need to\n               Ctrl-C out of.\n   "}, {:name=>"Txtfmt-The-Vim-Highlighter", :summary=>"\"Rich text\" highlighting in Vim! (colors, underline, bold, italic, etc...)", :description=>"USER FEEDBACK NEEDED: I would greatly appreciate feedback email: \nbrettstahlman AT comcast DOT net\n\n=== !!! IMPORTANT NOTE TO NEW USERS !!! ===\nThe Txtfmt help file is large; for a quick (and gentle) introduction, please see the \"QUICK-START TUTORIAL\" further down on this page...\n\n=== SCREENSHOTS ===\nCheck out the following link for screenshots showing Txtfmt used...\n    -as a standalone filetype for journal entries, notes, documents, etc...\n    -in conjunction with the .otl filetype used by Ned Konz' TVO (The Vim\n     Outliner) plugin\n    -to spruce up a circuit diagram created with the aid of Dr. Charles\n     Campbell's drawit plugin\n    -to spruce up comments in various programming languages\n\n    http://www.txtfmt.webs.com\n\n=== MOTIVATION ===\nVim's syntax highlighting is very useful for editing files in a particular programming language such as C or Perl. But what if you are simply using Vim to edit text that doesn't fall into any particular language category: e.g., personal journal entries, miscellaneous notes or generic documents? In such cases, Vim's statically defined syntax regions are not very useful. What is really needed is a word processor's ability to apply highlighting to an arbitrary selection of text. \n\n=== OVERVIEW ===\nTxtfmt (The Vim Highlighter) is a combination syntax/filetype plugin that allows you to highlight plain text in Vim. The highlighting mechanism uses invisible tokens that are inserted into a Txtfmt buffer with the aid of easy to use mappings provided by the filetype plugin. Each token affects either the color or formatting of subsequent text. The plugin supports up to 8 configurable foreground colors, up to 8 configurable background colors, and all combinations of the following formatting attributes: bold, underline, italic, standout, reverse and undercurl.\n\nNearly everything in this plugin is configurable, with defaults that should work for most users \"right out of the box\". The following is a *partial* list of things that can be configured:\n    mappings\n    colors\n    range of character codes used as highlighting tokens\n\nEverything is documented in an extensive Vim help file. Additionally, there is a \"Quick-Start Tutorial\" at the bottom of this page, designed to help you get up and running quickly with Txtfmt.\n\n=== USAGE EXAMPLE ===\nSuppose you wish to enter some green text...\nYou execute one of Txtfmt's \"insert-token\" mappings and enter the following at the prompt:\n    cg\n(mnemonic: color green)\nNow, the text you type is green.\n\nWhile typing green text, you wish to emphasize a phrase by making it bold-italic. You execute another mapping and enter \"fbi\" or \"fib\" at the prompt.\n(mnemonic: format bold italic)\nNow, the text you type is green bold-italic.\nNote: Inserting the bold-italic token did not affect the text color, because the color and format regions are completely \"orthogonal\".\n\nNow you wish to switch to a blue background. Execute another mapping and enter \"kb\" at the prompt.\n(mnemonic: bac_k_ground blue)\nNow, the text you type is green bold-italic on a blue background. Notice that, as before, the preceding highight regions are unaffected by the start of the new one.\n\nAt some point, you may wish to return to default (unhighlighted) text. You can terminate the 3 active regions by executing the insert-token mapping one last time and entering the following at the prompt:\n    c-,f-,k-\n(mnemonic: remove color, remove format, remove bac_k_ground color)\nNow, the text you type should be plain, unhighlighted text. Notice how multiple format/color specifiers can be concatenated in a comma-separated list, thereby reducing the number of times you have to execute the mapping.\n\n=== FEEDBACK ===\nI would greatly appreciate your feedback on this plugin. Contact me either at...\n\nbrettstahlman AT comcast DOT net\n\n...or by posting to the Vim list with Txtfmt somewhere in the subject or body. \nAlso, please rate this plugin!\n\n=== SUGGESTED USES ===\nThe following applications represent a few of the many possible uses of the Txtfmt plugin:\n    -For taking notes\n     (e.g., notes taken while reviewing large programming projects)\n    -As part of a personal journaling system\n    -For highlighting .otl files created with Ned Konz' TVO (The Vim Outliner)\n     plugin\n    -For highlighting files created with 'Notes' (Hari Krishna Dara's\n     lightweight note management plugin)\n    -For highlighting text files created with Yongping Guo's TxtBrowser plugin\n    -For beautifying block diagrams created with Dr. Charles Campbell's drawit\n     plugin\n    -For sprucing up programming language comments\n     Don't laugh! You can embed Txtfmt formatting regions within other syntax\n     regions (e.g., C comments)\n     :help txtfmt-'nested'\n    -etc. etc...\nNote: If you wish to make your formatted documents available to non-Vim users, simply use the :TOhtml command distributed with Vim to output an HTML version of the Txtfmt buffer.\n\n\n====================\nQUICK-START TUTORIAL\n====================\nAfter you have installed the plugin, you may wish to generate a \"test page\", both to ensure that you have installed the plugin properly, and as a quick and easy way to create a Txtfmt buffer containing actual formatting regions that you can view and play around with. You may create a \"test page\" with default options by executing the MakeTestPage command at the command line:\n\n    :MakeTestPage<Enter>\n\nBe sure to scroll down and/or enlarge the window to view all sections. Although the primary purpose of the test page is to allow you to visualize the effects of a particular set of option values, the text of the page has been carefully chosen to give the new user an overview of some of the more important Txtfmt options. For information on how to use MakeTestPage to visualize different sets of options,\n\n    :help txtfmt-:MakeTestPage\n\nAfter you have viewed formatting regions in a test page, you will probably want to try creating your own formatting regions. The simplest way to begin is as follows:\n\n    :new<Enter>\n    :set ft=txtfmt<Enter>\n\nAssuming you have installed the plugin properly, you now have access to all the Txtfmt mappings for working with the special Txtfmt tokens discussed earlier. There are a large number of mappings provided for inserting and jumping to Txtfmt tokens. Note that while intuitive key-sequences are used by default, Txtfmt provides a way for you to customize the {lhs} of any or all mappings.\n\nFor a detailed description of mapping customization,\n    :help txtfmt-map-config\n\nFor a detailed description of the token insertion mappings,\n    :help txtfmt-ins-tok-maps\n\nFor a detailed description of the jump-to-token mappings,\n    :help txtfmt-jump-to-tok\n\nTo keep this \"quick-start tutorial\" quick, I'll demonstrate the use of only a few of the available mappings...\n\nIn your newly-created Txtfmt buffer, execute the following normal mode command:\n    \\i\n\nNote: The remainder of the tutorial assumes that your <LocalLeader> is at the default value (i.e., backslash). If you have set <LocalLeader> to something other than the default, replace the backslash in the examples with the appropriate character.\n    :help <LocalLeader>\n\nAt this point, you will be presented with the following prompt:\n    Enter a fmt / clr string. (Enter to cancel):\n\nAt the prompt, type the following string and hit <Enter>:\n    fbui\n\nNow, begin typing some text. The text should be highlighted with the bold, underline, and italic attributes. Note that the results would have been the same if you had typed fbiu, fibu, fubi, etc... As you have probably surmised, the letters 'b', 'u', and 'i' are flags indicating bold, underline, and italic, respectively. The leading 'f' indicates that the subsequent flags comprise a \"format specification\".\n    :help txtfmt-fmt-spec\n\nTo terminate the underline, bold, italic region, execute the following keystroke sequence while still in insert mode:\n    <CTRL-\\><CTRL-\\>\n\nHint: Hold the Control key down while hitting backslash twice in quick succession.\n\nOnce again, you should be presented with the prompt asking for a fmt / clr string. This time, enter the following:\n    f-\n\nThe dash character indicates \"no format\"; i.e., a return to the normal (unhighlighted) text. If you continue typing text, you will see that it no longer has any format attributes.\n\nNow let's see what happens when we bring color into the mix... If you're still in insert mode, hit <Esc> to return to normal mode. Now execute the following normal mode command to insert a token on the line below:\n    \\o\n\nAt the resulting prompt, enter the following:\n    cblue\n\nThe 'c' is analogous to the 'f' in the preceding \"format specifications\"; it\nindicates that the following text is a \"color specification\".\n    :help txtfmt-clr-spec\n\nSince in this case the color specified is \"blue\", the text you type after hitting <Enter> will be blue. Although I specified the color as \"blue\", I could just as well have abbreviated it to \"b\". As discussed in the Txtfmt help, color names are actually defined as regular expression patterns. The default patterns permit you to abbreviate color names to uniqueness. In practice, this means that for all colors but black, you needn't specify more than the first letter of the color name. (The single letter abbreviation for black is 'k', which permits it to be disambiguated with blue.) Txtfmt provides you with 8 distinct colors, each with its own default color name pattern and RGB value. You can view these definitions with the :ShowTokenMap command. Go ahead and try it now... After hitting <Esc> to return to normal mode, execute the following at the command line:\n    :ShowTokenMap<Enter>\n    \nYou may have to page down to see all of the output. The first section shows foreground color definitions, and the last section shows similar definitions for background colors. If you are not happy with either the color name or the RGB value of any of the 8 default colors, Txtfmt provides a very flexible mechanism for overriding the defaults with your own color preferences. The details may be found in the help, but if you're short on time, here's a quick example that shows how easy it is...\nNote: You don't need to try this now.\n\nSuppose the GUI's default red color (RGB: #FF0000) is too bright for your eyes. You wish to replace this color with a dark brown (RGB: #804000). You see from the output of :ShowTokenMap that red corresponds to index 5 in the default color array. Thus, you could make the desired change by overriding txtfmtColor{5} with the following line in your .vimrc:\n    :let txtfmtColor5='^br\\\\%[own]$,c:DarkRed,g:#804000'\n\nWith this definition, you could specify the new color with the abbreviation \"br\". Of course, you would no longer be able to use the color red in the GUI, and any red highlighting in your existing file(s) would change to dark brown when viewed in the GUI. (Since the \"c:DarkRed\" is unchanged, color #5 will still be red in a color terminal.)\n    :help txtfmt-color-config\n    :help txtfmt-:ShowTokenMap\n\nNow suppose you wish to continue typing blue text, but would like the text you are about to type to have the bold and italic attributes as well. Assuming you are in normal mode, hit \\a to bring up the familiar prompt. (Note that \\a differs from \\i in that the former will insert the Txtfmt token(s) *after* the cursor location instead of before it.) Now enter the following at the prompt:\n    fbi\n\nThe text you type after hitting <Enter> will be blue, bold-italic. Notice that it wasn't necessary to do anything special to ensure that the bold-italic text would also be blue. It is blue because the effects of the \"blue\" foreground color token you entered earlier are not affected in any way by the introduction of a format token. This behavior is a direct consequence of the orthogonality of Txtfmt's various token types. A format token supercedes the preceding format token, but has no effect upon any preceding color regions. Similarly, a foreground color token supercedes the preceding foreground color token, but has no effect upon any preceding format or background color regions.\n\nImportant Note: The fact that format/color tokens \"supercede\" preceding tokens of the same type means that the \"no format\"/\"no color\" tokens are required only when you wish to turn off format or colors completely for subsequent text. To change from one format to another format, or from one color to another color, simply insert the token for the new region.\n\nTo verify that we can supercede the blue foreground color token entered earlier, let's enter a red foreground color token by hitting <CTRL-\\><CTRL-\\> once more (still in insert mode) and entering the following at the prompt:\n    cr\n\nObserve that the text you type after hitting <Enter> still possesses the bold-italic attribute, though its color is red.\nNote: You may have noticed that I used the convenient single letter abbreviation for \"red\". I will use such abbreviations exclusively for the remainder of the tutorial.\n\nUp until now, you have been applying colors only to text; i.e., you have been working exclusively with foreground colors. Txtfmt 2.0 introduced support for background colors as well. For performance reasons, the default configuration enables only 4 background colors: red, green, blue and yellow. It is quite easy, however, to tailor the set of colors enabled via independent foreground and background color mask options.\n    :help txtfmt-'fgcolormask'\n    :help txtfmt-'bgcolormask'\n\nYou insert a background color token just as you would a foreground color token, except that the character introducing the color spec is 'k' instead of 'c' (since 'c' was already taken, and the word \"background\" contains a 'k'). You can try it out by hitting <CTRL-\\><CTRL-\\> (still in insert mode) and entering the following at the prompt:\n    kb\n\nHit <Enter> and type some text. As you might expect, the text you type now is red bold-italic on a blue background.\n\nTo revert to default format and color, hit <CTRL-\\><CTRL-\\> and enter the following at the prompt:\n    f-,c-,k-\n\nYou may recognize the \"f-\" as the special \"no format\" token we inserted earlier to end the first format region we created. Similarly, the \"c-\" and \"k-\" are the special \"no fg color\" and \"no bg color\" tokens, respectively . Note that it was not necessary to enter these three tokens with separate mappings and separate prompts. We simply concatenated the token specs together, separating them with a comma. This is an example of a format/color specification list.\n    :help txtfmt-fmt-clr-spec-list\n\nNote that such lists may contain any number of format/color specifications. Ordinarily, the cursor will be left at the end of the sequence of tokens inserted via such a list. You can, however, specify a different cursor position by replacing one of the commas in the list with a single dot ('.'). This is actually a very useful feature. Recall that in our previous example, we inserted the \"no format\" and \"no color\" tokens used to terminate our format/color regions only after we had finished typing all the text within them. In the common case, however, you know when you begin a region that you will eventually want to end it. Thus, you can save yourself a mapping invocation by entering both the start and end tokens at the same prompt.\n\nTo see how it works, hit <Esc> to return to normal mode, then hit \\o and enter the following at the prompt:\n    cr,fi.c-,f-\n\nThis format/color specification list comprises both the start and end tokens for a red, italic region. The advantage of using a dot to separate the \"italic\" format spec from the \"no color\" spec is that it allows you to begin typing red, italic text immediately after hitting <Enter>. (Go ahead and type a bit of text...) If a comma had been used instead, the cursor would have ended up after the \"no format\" token, which means you would have had to move the cursor back 2 character positions to get it inside the region before beginning to type the formatted text.\n\nNow suppose after typing some red, italic text, you decide that green, underline would have been a better choice. The change is accomplished fairly easily, and will give us an opportunity to introduce the \"jump-to-token\" mappings...\n\nAfter hitting <Esc> to return to normal mode, Execute the following \"jump-to-token\" command:\n    [c\n\nThis command positions the cursor on the previous color token (i.e., the red color token beginning the region). Note that there are many variations of the jump-to-token commands: the one to use depends upon desired search direction, the type of token sought, whether you wish to land \"on\" or \"next to\" the sought token, etc...\n    :help txtfmt-jump-to-tok\n\nIMPORTANT NOTE: As of Vim 7.3, the default configuration causes tokens to disappear completely as soon as they are inserted. The \"jump-to-token\" maps provide the best way to locate hidden tokens (for example, when you wish to remove one). If you prefer that tokens remain visible as long as the cursor is in their line, you can add the `i' and `n' flags to the txtfmt-'concealcursor' option.\n    :help txtfmt-'concealcursor'\n\nNow type the following (still in normal mode):\n    2\\s\n\nThis is the \"substitute\" variant of the insert-token command. The numeric argument indicates that we wish to replace 2 characters at the cursor (i.e., the red color and italic format tokens) with the tokens we are about to specify at the prompt:\n    fu,cg\n\nUpon hitting <Enter>, you should observe that the red, italic text has changed to green, underline.\n\nYou may have noticed a similarity between several of the normal mode insert-token mappings used above and the native Vim normal mode commands for entering insert mode. This similarity was not by chance, but by design. In addition to the \\i, \\a, \\o, and \\s commands that were demonstrated above, Txtfmt also provides the following:\n    \\I, \\O, \\A\n\nAlthough all these commands are described in the help, a regular Vim user can easily intuit where they will insert the Txtfmt tokens relative to the cursor, by analogy with the corresponding enter insert mode commands.\n\nAlso note that if you insert a 'v' between the backslash and the subsequent character (e.g., \\vI), Txtfmt will exit insert mode after inserting the Txtfmt tokens. This is useful when you are simply highlighting existing text.\n\nThis concludes the tutorial. No attempt was made to discuss all of the many Txtfmt options. Detailed information on all options may be found in the Txtfmt help file.\n    :help txtfmt\n"}, {:name=>"pyrex.vim", :summary=>"Updated Pyrex.vim with Cython support", :description=>"Vim 7.1 pyrex.vim file with support for Cython (http://www.cython.org/) additions."}, {:name=>"Shobogenzo", :summary=>"Medium contrast colorscheme that is easy on the eyes", :description=>"This colorscheme was inspired by other low/medium contrast colorschemes. None of them had the kind of colours that were easy on my eyes.\n\nI strove for a scheme that had a good contrast to make syntax highlighting help with establishing context as well as making sure the colours would not hurt your eyes over a longer period of time."}, {:name=>"seoul", :summary=>"Color scheme for use with the 88 color terminals (rxvt-unicode)", :description=>"A 88 color vim scheme intended for rxvt-unicode terminals. Will also work under xterm's 256 color mode. It uses special higlight groups for Ruby, but should function with other syntaxes as well. The name is inspired from the '88 summer olympics in Seoul, South Korea. The scheme is somewhat inspired by Justin Palmer's Vibrant Ink.\n\nThe latest version should be available at: http://redflavor.com/seoul.vim\n\nFor a it's appearance check out this screenshot:  http://redflavor.com/seoul.png"}, {:name=>"Obvious-Mode", :summary=>"Clearly indicate visually whether Vim is in insert mode", :description=>"Clearly indicate visually whether Vim is in insert mode via the StatusLine highlight group.\n\nWhen you go into insert mode, the status line color changes. When you leave insert mode, the status line color changes back."}, {:name=>"VimTAP", :summary=>"Test Anything Protocol for vim", :description=>"The Test Anything Protocol makes testing with different languages in the same project\neasy. It decouples the tests generating results from the harness interpreting the results.\nWith VimTAP we now have TAP for vim.\n\nFor now the following is implemented:\n - Plan\n - Ok\n - Is & Isnt\n - Like & Unlike\n - Diag\n\nDiag is probably not completely functional, yet. \\n, \\r and \\r\\n are all considered to\ndelimit lines.\n\nAlso a driver for running the tests from outside vim is provided. It can be used with\nPerl's TAP::Parser runtests utility.\n\nThis package is still work in progress!"}, {:name=>"Switch", :summary=>"Quick toggling of boolean options", :description=>"This plugin  enables you  to toggle  any Vim boolean  options between  'on' and 'off' using just one key mapping for each of tree possible vim modes.\n\nBasic usage:\n\n<C-Q> {optkey} Toggle an option.\n<C-Q> <Tab> Print the options list.\n<C-Q> <F1> Print help on usage, similar to this paragraph.\n<C-Q> <C-Q> {optkey} Print the current value of an option.\n<C-Q> <CR> {optkey} Invoke :help on an option.\n\n\n* This plugin is related to the Univrc project (http://univrc.org)"}, {:name=>"darkspectrum", :summary=>"a gvim color scheme based on the oblivion color scheme for gedit", :description=>"Screenshot:\nhttp://img387.imageshack.us/my.php?image=vimlh3.png\n\nFeaturing:\n- STL Highlighting (vimscript#1640 and vimscript#2224)\n- Autocomplete Menu\n- DiffSplit\n- Spelling\n\nThis color scheme is based on the oblivion color scheme for gedit, but with some language specific additions and a few more tweaks to provide a wider spectrum of colors.\n\nThanks to junkblocker for pointing out I forgot to make DiffText something useful."}, {:name=>"qfn", :summary=>"quickfixnotes: file annotation with quickfix", :description=>"QuickFixNotes, or QFN, is a quick hack that allows file annotation\nbased on |quickfix| functionality.  In particular, this plugin allows the user\nto tie comments to a specific source file, line number, and column number\nwithout modifying the file being reviewed.  The goal of the plugin is to\nprovide a simple and useful mechanism for tracking notes when reviewing any\nsort of text file -- from documents and book drafts to source code and\nconfiguration files.  Paired with xxd, you can even annotate binary formats\nwith it.  qfn is useful any place where inserting comments into the\nfile being reviewed is impractical.\n\nGiven its simplicity, this plugin only supplies a simple set of features:\n\n    * Add a comment for the given line and column number to the |quickfix| list\n    * Save the current |quickfix| list an expected format\n    * Provide all functionality without external scripting dependencies\n\nIn the future, QFN may support more advanced interfaces to the |quickfix|.\n\nTo use, just map <Plug>QuickFixNote and <Plug>QuickFixSave to keys.  \nWhen called, QuickFixNote will add an entry to the quickfix list with a user\nsupplied comment for the current cursor's line number, column, and buffer\nname. "}, {:name=>"groovy.vim--Ruley", :summary=>"Runs or compiles Groovy scripts.", :description=>"Runs or compiles Groovy scripts.  Indents code blocks.  Continues comments on adjacent lines.  Provides insert-mode abbreviations.  F2 for plugin help."}, {:name=>"debugger.py", :summary=>"remote PHP debugger : remote debugger interface to DBGp protocol w/ path mapping", :description=>"This is a small modification to Seung Woo Shin's XDebug remote debugger.  For further instructions, see here: http://www.vim.org/scripts/script.php?script_id=1152\n\nThe only thing I added is the ability to set path mapping in your .vimrc (or wherever)\n\nFor example:\nlet pathMap=\"/mnt/hgfs:/home/ethanm/vmfiles, /home/config:/home/ethanm/config\"\nwould adjust my xdebug paths so that I could now work with a local editor on files running in my VM."}, {:name=>"Limp", :summary=>"Lisp IDE", :description=>"Limp's goal is to provide a compelling alternative to Slime for Vim. It will let you send s-expressions to a running Lisp.\n\nIt will do this for you:\n\n* booting/attaching/detaching a Lisp (SBCL) from Vim or a command-line script, optionally specifying a core;\n* send code to the attached Lisp (and limited introspection, see Help Describe);\n* automatically close brackets;\n* ease s-exp navigation and (some) transposing;\n* highlight current form under the cursor;\n* lookup documentation from the HyperSpec;\n* complete (some) names.\n\nQuickstart (better version with screenshots in the documentation):\n\nIn a file with \"filetype=lisp\" set, hit <F12> to invoke Limp and start a Lisp or connect to an existing.\nWrite a piece of code, e.g.:\n\n  (defun hello-world (who)\n    (format t \"Hello, ~A!~%\" who))\n\nPlace the cursor at any location inside the code and type <Leader>et (Evaluate Top) to send your code to the running Lisp.\n\nHit <F12> again to see the results!  Then, by placing the cursor at hello-world and typing <Leader>hd (Help Describe) followed by <F12>, you'll see information about the symbol!\n\n(Full list of key bindings at http://mikael.jansson.be/hacking/limp/docs/#keyboard-reference )\n\nTo test it, type\n\n  :Eval (hello-world '|Limp User|)\n\nfollowed by <Enter> and <F12>.\n\nMore info in the documentation! \nUses code from ViLisp (vimscript #221), AutoClose (vimscript #1849), HiMtchBrkt (vimscript #1435)"}, {:name=>"bensday", :summary=>"Only slightly modified version of the evening color scheme.", :description=>"This color scheme is based upon the evening color scheme with only slight modifications.\nSo most (99%) of the credit for this color scheme belongs to the maintainer\nof the original work, Bram Moolenaar.\n\nThe main differences are: It does not use a black background for some keywords but uses a darker global background even for the cursor line. In gvim it also uses more bold fonts, and the statusline of inactive windows has a different background color than in the original scheme.\n\nThe name was inspired by a colleague of mine, who preferes dark themes for his desktop and likes to work in dark rooms... no, he does not crumble to dust in sunlight, but he is close to it... ;-)\n\nI have only tested it with Vim 7.1."}, {:name=>"Allegro-4.2-syntax-file", :summary=>"Provides syntax highlighting for Allegro 4.2 API", :description=>"Provides syntax highlighting for Allegro 4.2 API"}, {:name=>"CmdlineComplete", :summary=>"complete command-line (: / etc.) from the current file", :description=>"When editing the command-line (: / etc.), press Ctrl-P or Ctrl-N to complete the word before the cursor, using keywords in the current file. E.g: you want to search for \"elephant\" in the buffer, just type /ele and press Ctrl-P. So long as \"elephant\" is in the buffer, you will get \"ele\" completed into \"elephant\".\n\nThis script is functional similar with (but far more better than) SearchComplete vimscript #474 (version 1.1)."}, {:name=>"tinymode.vim", :summary=>"allows definition of tiny modes for Normal mode", :description=>"We cannot add new Vim modes using Vim script.  But we can map keys in a way\nthat comes close.  Example:\n\n    nmap          <C-W>+     <C-W>+<SID>ws\n    nmap          <C-W>-     <C-W>-<SID>ws\n    nn <script>   <SID>ws+   <C-W>+<SID>ws\n    nn <script>   <SID>ws-   <C-W>-<SID>ws\n    nmap          <SID>ws    <Nop>\n\nThese mappings make the builtin CTRL-W_+ and CTRL-W_- (in short ^W+, ^W-)\nkeys a little smarter: You can now type ^W++- instead of ^W+^W+^W- to change\nthe window size.  It's like ^W+ enters a \"Vim mode\" with the new keys + and - .\n\ntinymode.vim is not needed to create such mappings, but it adds some\nbenefits:\n\n- tinymode-style notation of the above mappings:\n\n    call tinymode#EnterMap(\"winsize\", \"<C-W>+\", \"+\")\n    call tinymode#EnterMap(\"winsize\", \"<C-W>-\", \"-\")\n    call tinymode#Map(\"winsize\", \"+\", \"wincmd +\")\n    call tinymode#Map(\"winsize\", \"-\", \"wincmd -\")\n\nOk, no benefits yet, but read on:\n\n- you can enable support for a count typed within a mode:\n\n    call tinymode#ModeArg(\"winsize\", \"owncount\", 1)\n\n  you need a literal [N] in the commands for the count to be recognized:\n\n    call tinymode#Map(\"winsize\", \"+\", \"[N]wincmd +\")\n    call tinymode#Map(\"winsize\", \"-\", \"[N]wincmd -\")\n\n- mode message\n\n    call tinymode#ModeMsg(\"winsize\", \"Change window size +/-\")\n\n  The mode message makes it easy to spot that a mode is active.  It is even\n  more useful when it shows the available keys.\n\n- different 'timeoutlen'\n\n    call tinymode#ModeArg(\"winsize\", \"timeoutlen\", 5000)\n\n  In most cases, the default 'timeoutlen' of 1000 ms is too short.  That's\n  why tinymode sets the default to 3000 ms throughout a mode.  If this is\n  not enough, another value can be given.\n\n- interruption recovery\n\n    LeaveMode\n\n  The \"tinymode technique\" has a backdraw: If a command \"beeps\" or you press\n  CTRL-C, the chain of mappings is interrupted, which means the necessary\n  clean up before leaving a mode is skipped.  \"Clean up\" means to set some\n  options back to previous values ('timeoutlen', 'cpo', 'showcmd').\n  Unfortunately, a beep cannot be catched like other errors.\n\n  If you detect this situation, you can start and leave a mode in a clean\n  way or execute :LeaveMode .\n\n- timeout warning\n\n  Sooner or later a tiny mode times out automatically.  As a visual hint\n  that a mode will time out soon the color of the mode message will be\n  changed from ModeMsg to Normal.\n\n(btw: this exact description is not part of the zip package)\n\n2008 Nov 14\n\nlooks as if a similar script has been added:\nvimscript #2467\n"}, {:name=>"STL-improved", :summary=>"Improved C++ STL syntax highlighting", :description=>"It's based on this syntax file :\nhttp://www.vim.org/scripts/script.php?script_id=1640\n\nI separated types and methods, and also added some missing things.\n"}, {:name=>"sort-python-imports", :summary=>"this script allows you to sort python imports alphabetically", :description=>"Keep your imports tidy!\nThis script allows you to sort python imports easlily.\n\nUse :PyFixImports, command to fix imports in the beginning of currently edited file.                                                 \nYou can also use visual mode to select range of lines and then use <C-i> to sort imports in those lines.\n\nNeeds vim compiled with python support!"}, {:name=>"vimwiki", :summary=>"Personal Wiki for Vim", :description=>"A Personal Wiki For Vim Plugin\n==============================================================================\nScreenshots are available on http://code.google.com/p/vimwiki/ \nThere are also zipped vimwiki files there in case you do not like vimball archives.\n\nVimwiki quick reference card http://habamax.ru/myvim/data/vimwikiqrc.pdf by J.A.J. Pater.\nThx Gager Jacob for the update.\n\n\nPrerequisites\n==============================================================================\nMake sure you have these settings in your vimrc file: \n\nset nocompatible\nfiletype plugin on\nsyntax on\n\nWithout them Vimwiki will not work properly.\n\n\nIntro\n==============================================================================\nVimwiki is a personal wiki for Vim -- a number of linked text files that have\ntheir own syntax highlighting.\n\nWith vimwiki you can\n    - organize notes and ideas\n    - manage todo-lists\n    - write documentation\n\nTo do a quick start press <Leader>ww (this is usually \\ww) to go to your index\nwiki file. By default it is located in:\n    ~/vimwiki/index.wiki\n\nFeed it with the following example:\n\n= My knowledge base =\n    * MyUrgentTasks -- things to be done _yesterday_!!!\n    * ProjectGutenberg -- good books are power.\n    * ScratchPad -- various temporary stuff.\n\n\nNotice that ProjectGutenberg, MyUrgentTasks and ScratchPad highlighted as\nerrors. These are links in CamelCase form that do not exists yet. (CamelCase\nform -- capitalized word connected with other capitalized words)\n\nPlace cursor on ProjectGutenberg and press <Enter>. Now you are in\nProjectGutenberg. Edit and save it, then press Backspace to return to parent\nwiki page. You should see the difference now -- ProjectGutenberg is\nhighlighted as a link.\n\n\nFor the various options see :h vimwiki-options.\n\n\nBasic Markup\n==============================================================================\nsee :h vimwiki-syntax\n\n*bold* -- bold \n_italic_ -- italic \nWikiWord -- link to WikiWord \n[[wiki link]] -- link with spaces\n[[wiki link][description]] -- link with description\n[[wiki link|description]] -- link with description\n\nLists:\n* bullet list item 1\n    - bullet list item 2\n    - bullet list item 3\n        * bullet list item 4\n        * bullet list item 5\n* bullet list item 6\n* bullet list item 7\n    - bullet list item 8\n    - bullet list item 9\n\n# numbered list item 1\n# numbered list item 2\n    # numbered list item 3\n    # numbered list item 4\n\n= Header1 =\n== Header2 ==\n=== Header3 ===\n\n\nKey bindings\n==============================================================================\nsee :h vimwiki-mappings\n\nnormal mode: \n<Leader>ww -- Open default wiki index file.\n<Leader>wt -- Open default wiki index file in a new tab.\n<Leader>ws -- Select and open wiki index file.\n<Leader>wd -- Delete wiki file you are in.\n<Leader>wr -- Rename wiki file you are in.\n<Enter> -- Folow/Create wiki link\n<Shift-Enter> -- Split and folow/create wiki link\n<Ctrl-Enter> -- Vertical split and folow/create wiki link\n<Backspace> -- Go back to parent(previous) wiki link\n<Tab> -- Find next wiki link\n<Shift-Tab> -- Find previous wiki link\n\n\nCommands\n==============================================================================\n:Vimwiki2HTML -- Convert current wiki link to HTML\n:VimwikiAll2HTML -- Convert all your wiki links to HTML\n"}, {:name=>"browser.vim--Brown", :summary=>"a lightweight web browser opening in a split window for wikipedia etc.", :description=>"               This plugin opens a website by making a lynx -dump call behind\n               the scenes and takes advantage of the dumps link references so\n               you can click on links and browse through a site.\n\n               It seems to work well on wikipedia and any text friendly sites\n               when all you want is a quick definition to settle a factual debate... etc. \n\n               Included are some 'K' keywordprg modifications to give you some ideas. \n                (If you have any file type specific suggestions please email them to me)\n\n               :WebBrowser www.vim.org\n               To open a web page\n\n               :Wikipedia the life of brian\n               Will open en.wikipedia.org/wiki/<search term> \n               :Google <search term>\n               Opens google to the search term\n\n               :GoogleLucky <search term>\n               Opens Lucky Google search \n\n               you can also create your own site specific googling eg.  \n               com! -nargs=+ GooglePythonDoc call OpenGoogle(<q-args>, 0 , 'docs.python.org')\n               (make the second arg 1 for lucky)\n               \n               Within the browser view the <tab> key cycles through links and\n               pressing <cr> will open a link. \n\n               the u key seems to work ok as a back button"}, {:name=>"autopreview", :summary=>"a light script to immediately preview definitions like source insight", :description=>"The \"autopreview\" plugin is a light script plugin for Vim that could automatically preview the definition of variables or functions in a preview window like source insight.\nI think this script should be helpful when you're insighting a lot of code files and wanna to see the definition of a new variable or function in the source codes immediately without having to input \"ptag\" each time.\nTaglist plugin is needed for this plugin which is alreasy integrated into the latest version of Gvim.\n\n#Usage\nIf you add \"let g:AutoPreview_enabled = 1\" into your vimrc file, the autopreview window will be open when vim is started; otherwise add \"let g:AutoPreview_enabled = 0\" (which is default if you do not set this value) into your vimrc file, the autopreview window will be open only after you press your mapped hotkey.\nAny time you press your mapped hotkey, you could enable or disable the autopreview window\n"}, {:name=>"pacific.vim", :summary=>"A dark, oceany/beachy color scheme", :description=>"This is a nice dark color scheme that is meant to be reminiscent of the ocean or the beach, and yet not at all like either the ocean or the beach.\n\nHere are some pictures so you can get an idea what it looks like:\nhttp://www.flickr.com/photos/26471999@N08/2477652644/\nhttp://www.flickr.com/photos/26471999@N08/2476840217/\nhttp://www.flickr.com/photos/26471999@N08/2477652478/"}, {:name=>"beachcomber.vim", :summary=>"A light, sandy, beachy color scheme", :description=>"This scheme has a light sand-colored background and a colors that might remind one of the beach. Here are some pictures:\n\nhttp://www.flickr.com/photos/26471999@N08/2477652354/\nhttp://www.flickr.com/photos/26471999@N08/2476839901/\nhttp://www.flickr.com/photos/26471999@N08/2477652186/"}, {:name=>"WriteRoom-for-Vim", :summary=>"A Vim emulation of the minimalistic WriteRoom editor", :description=>"As you probably know, WriteRoom (http://hogbaysoftware.com/products/writeroom) is a very minimalistic text editor, focusing on a clean appearance of just the edited document. This script creates &#039padding&#039 around the editing window in gVim and hides the vertical splits and other items to obtain this same effect, while keeping all of Vim&#039s extensive features available. \n\nUsing the file is simple, just issue a gvim -S ~/.vim/writeroom/writeroom.vim {filename} at the command line to open the file in a very clean, minimalist setup. Perfect for ADD-ers like myself ;-)\n\nThis file adds the following:\n\nCommands:\n=========\n\nWriteRoomBG {color} ; sets the background color\nWriteRoomFG {color} ; sets the foreground color\nWriteRoomFilename {color} ; sets the color for the filename just below the editing window\nWriteRoomNonText {color} ; sets the color for non-text characters\n\nFunctions:\n==========\n\nUpdateScreen() ; updates the screen size and colors\n\nMappings:\n=========\n\n<F5> toggles visibility of EOL, TAB and tilde lines\n\n\n"}, {:name=>"h80", :summary=>"Dark blue background with high-contrast text", :description=>"Green, blue, orange and magenta text."}, {:name=>"nc.vim", :summary=>"Neuron C (*.nc) Syntax/Filetype for Vim", :description=>"This adds the syntax for Echelon Neuron C files (.nc) (see PL3120/PL3150,PL31XX) chips "}, {:name=>"rtorrent-syntax-file", :summary=>"Syntax highlighting for rtorrent.rc files", :description=>"Highlighting for the rtorrent.rc file.   Simple and effective."}, {:name=>"previewtag", :summary=>"preview the definition and switch it to a new window", :description=>"The script opens the definition of functions and variables in the preview window on demand and provides operations to close the preview window, delete the buffer in the preview window and switch the buffer in the preview window to a new window. Quite simple, but useful.\n\nThe script provides four commands:\nPshow: open the definition of the current word in the preview window\nPdelete: delete the buffer showing in the preview window\nPshowORdelete: if the cursor is in preview window, delete the current buffer (like Pdelete); Otherwise open the definition of current word in preview window\nPswitch: if the preview window is open, close it and open the buffer in a new window \n\nVim also provides a \"pclose\" command to close the preview window, without deleting the buffer.\n\nIf you want to open the tag preview immediately when you put cursor on a word, please uncomment the last line of the script. However, I found automatically preview is kind of boresome, so I do not provide a switch of auto-preview in the script.\n\nYou can also refer to another tiny script autopreview at http://vim.sourceforge.net/scripts/script.php?script_id=2228.\n\nRelated vim docs:\n:help ptag\n:help previewwindow"}, {:name=>"WarzoneResourceFileSyntax", :summary=>"Syntax highlighting for Warzone2100 resource files", :description=>"This script provides syntax highlighting for Warzone 2100's ( http://wz2100.net/ ) resource files."}, {:name=>"useful-optistruct-functions", :summary=>"useful optistruct functions", :description=>"some useful functions for editing optistruct decks, see file comments for examples."}, {:name=>"StringComplete", :summary=>"Insert-completion for quoted strings", :description=>"This script allows you to auto-complete quoted strings (\"...\" and '...') in the same way that you can complete keywords or filenames.\n\nIf you have any trouble installing or using, email me toomuchphp-vim at yahoo.com."}, {:name=>"darkrobot.vim", :summary=>"A nice dark colorscheme", :description=>"This is a nice dark colorscheme designed for long code editing sessions.\n\nA screenshot can be found here:\nhttp://www.flickr.com/photos/26471999@N08/2488920242/"}, {:name=>"256-jungle", :summary=>"Dark-orange colorscheme for 256 color terminals (like xterm).", :description=>"Dark-orange colorscheme for 256 color terminals (like xterm).\n\n\nScreenshots:\nhttp://xs227.xs.to/xs227/08202/2008-05-13_12-05-24_screenshot_scrot222.png\nhttp://xs227.xs.to/xs227/08202/2008-05-13_12-08-36_screenshot_scrot333.png"}, {:name=>"vcsbzr.vim", :summary=>"Bazaar integration for VCSCommand", :description=>"This is a plugin for VCSCommand (vimscript #90) that integrates the Bazaar version control system (http://bazaar-vcs.org).  It allows the basic version control commands of VCSCommand to be applied to projects versioned using Bazaar.\n\nThis script is maintained at http://launchpad.net/bzr-vim"}, {:name=>"openser.vim", :summary=>"Openser configuration syntax", :description=>"Syntax file for Openser configuration. In version 1.00 it includes all core keywords as of version 1.3.X.\nWorks in Vim 7.1."}, {:name=>"RemoveDups.VIM", :summary=>"Removing duplicates", :description=>"After sorting a file (eg. with the very useful vissort.vim) you can mark an area (line- or blockwise) an remove any lines containing duplicate values within this mark, so making anything in the marked area uinique.\n\nThs most common use is:\nmark a block\n:Sort it\nRemark the same block using gv\n:call RemoveDups()"}, {:name=>"less.bat", :summary=>"Now less is more on Windows, too", :description=>"Makes Vim into a rewindable, syntax-highlighting, searchable pager on Windows.\n\nBased upon less.sh from the macros directory of the Vim distribution.\nRequires that macros/less.vim exist in the &runtimepath.\nWorks with pipes as well as file names."}, {:name=>"upf.vim", :summary=>"Syntax for Unified Power Format  files(UPF)", :description=>"UPF provides the ability for electronic systems to be designed with \npower as a key consideration early in the process.\nThe current Working Group\u0092s website address is  www.accellera.org/activities/upf\n\nThe latest version of the script is maintained at http://kher.org/blog/vim_syntax_for_UPF.html"}, {:name=>"darkroom", :summary=>"color scheme to mimic writeroom/darkroom editors", :description=>"This is my attempt to create a simple WriteRoom/DarkRoom like environment in Vim. \n\nIt is probably not ready for prime-time yet. \n\nIt will almost certainly interact badly with any other plugins/scripts that hack buffers as it uses two hidden buffers to get the column feel of DarkRoom.\n\nYou will want to \":set wrap lbr\" for it to work most effectively.\nYou will want to maximize vim before calling \":colorscheme darkroom\" for it to look reasonable.\nYou will also need to use :qa to exit (or :q several times in succession)\n\n\n"}, {:name=>"FFeedVim", :summary=>"Post to Friendfeed from Vim", :description=>"FFeedVim is a Vim plugin that allows you to post messages, links, and images to Friendfeed. Friendfeed is a social network aggregator at http://friendfeed.com\n\nSince this is an early release of the plugin, it comes with significant limitations: There is no support for viewing Friendfeed timelines yet. There is also no support for liking or commenting on Friendfeed items, although FFeedVim allows you to add an initial comment when posting an item.\n\nAfter installing FFeedVim, see :help FFeedVim-manual for a list of commands.\n\nI'm on Friendfeed at http://friendfeed.com/mortonfox if anyone wishes to follow my stream.\n"}, {:name=>"xml_taginsert", :summary=>"Insert xml tags by pressing <F7>", :description=>"This maps the <F7> key to an xml tag inserter. When you press <F7> while to cursor is on or directly after a word, the that word is transformed into an xml tag, complete with closing tag. When the cusor is not over a word, you will be prompted for a tag name. This works in insert and comment mode.\n\nThis plugin depends on the imaps plugin that comes with the vim latex-suite (vim-latex) or can be downloaded separately at http://www.vim.org/scripts/script.php?script_id=244"}, {:name=>"pac.vim", :summary=>"syntax highlighting for proxy .pac files", :description=>"This is a simple syntax file for highlighting http proxy .pac files.  The proxy auto-config file defines how web browsers and other user agents can automatically choose the appropriate proxy server (access method) for fetching a given URL.  This script will help to parse these proxy files.  A great example to test it out on is at http://www.schooner.com/~loverso/no-ads/. where you can find John LoVerso&#039s outstanding no-ads proxy config file.  Let me know what you think, and send comments to my email.  "}, {:name=>"common_vimrc", :summary=>"some setting for vimrc simple.", :description=>"some setting for vimrc simple."}, {:name=>"journal.vim", :summary=>"Encrypted journal based on calendar.vim and gnupg.vim", :description=>"An encrypted journal with calendar view.\n\nCOMMANDS\nJournalToggle -- Toggles the journal calendar view.\n\nMAPPINGS (<leader> is set to '\\&#039, by default)\n<leader>jj -- JournalToggle\n\nYou can override the default mappings by creating mappings like this:\n\nnmap <F6> <Plug>JournalToggle\n\nOPTIONS\ng:journal_directory -- The directory that stores the journal files (default: ~/journal)."}, {:name=>"publish.vim", :summary=>"Publish hyperlinked, highlighted source code using Vim, 2html.vim and rsync", :description=>"This plug-in uses the 2html.vim script included with Vim's runtime files to publish a collection of syntax highlighted files as HTML documents and then replaces identifiers such as function and variable names in the HTML output with hyper links (based on available tags as generated by Exuberant Ctags). The result is a directory (tree) of syntax highlighted, interlinked HTML documents. I've published the plug-in's source code as a demonstration at http://peterodding.com/code/vim/profile/plugin/publish.vim. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n\u0095 http://peterodding.com/code/vim/publish/\n\u0095 http://github.com/xolox/vim-publish\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!"}, {:name=>"railstab.vim", :summary=>"Retabbing hacks extracted from rails.vim", :description=>"This plugin contains the retabbing feature from rails.vim that will be removed in a forthcoming version.  I have provided this plugin as a courtesy to anyone actually relying on it and recommend that potential new users stay away."}, {:name=>"musicbox.vim", :summary=>"musicbox allow you to play music files in vim", :description=>"musicbox is a vim plugin allowing to play mp3,ogg,wma... files in vim. It's a python plugin requiring gstreamer installed (alpha version, code GPL)"}, {:name=>"buffergrep", :summary=>"Grep buffers, not files", :description=>"Searches for strings in open buffers.  Instead of supplying a filename wildcard to direct the search, the grep command will search in open buffers which may or may not be represented by a file on the disk.  Moreover, since buffers are searched, changes that have not been saved to disk are scanned.  Unlisted, quickfix, and help buffers are skipped.\n\nEach grep command uses the same syntax as the builtin :vimgrep and :lvimgrep commands.  Results are displayed in the quickfix list.\n\nThe following commands are defined:\n\nBgrep - searches all buffers listed with the :buffers command, skipping over unlisted, quickfix, and help buffers.  Analagous to :bufdo.\nAgrep - searches all buffers listed with the :args command.  Analagous to :argdo.\nWgrep - searches all buffers visible on the screen (current tab page only).  Analagous to :windo.\nTgrep - searches all buffers open on any tabpage.  Analagous to :tabdo.\n\nExample:\n\nBgrep /jhonka/  \"find string 'jhonka' in all loaded buffers.\nWgrep |foo|j  \"find string 'foo' in all buffers currently on the screen, but don't jump to first match.\nTgrep !bar!g  \"find string 'bar' in all buffers visible in all tabpages, and list each occurance of 'bar', not just the first one on a line.\nAgrep baz    \"find string 'baz' in all buffers from the args list; specifying the pattern this way means you can't use flags.\n\nOf course, the argument isn't just a literal string, it is a regular expression.  You man use any valid Vim regular expression atoms in your search."}, {:name=>"dark-ruby", :summary=>"A dark-background color scheme.", :description=>"A dark-background color scheme.\n\nPreview: http://priit.mx.ee/files/dark-ruby.png\n\nNB! It's REALLY alfa release and I'm going to improve it on the way (it might take ages :-). You are welcome to fork and improve it at gitorious.org: http://gitorious.com/vim-color-scheme-dark-ruby \n"}, {:name=>"bpel.vim", :summary=>"BPEL, the Business Process Execution Language", :description=>"Very simple syntax definition highlighting the BPEL structure and activities."}, {:name=>"Git-Branch-Info", :summary=>"A plugin for use on your status line to show info about Git branches", :description=>"This plugin show branches information on the status line.\nTo install, just put this file on ~/.vim/plugins and set your status line:\n\n:set statusline=%{GitBranchInfoString}\n\nOf course you can append this configuration to an existing one and make all \nthe customization you want on the status line, like:\n\n:set statusline=%#ErrorMsg#%{GitBranchInfoString}%#StatusLine#\n\nThe command above will show the Git branches info on the same color as the\nerror messages. You can choose any color scheme you want to. Use\n\n:help highlight-groups\n\nto check for some other options.\n\nThere are some customization on the result string based on existing variables \nlike:\n\nlet g:git_branch_status_head_current=1\nThis will show just the current head branch name \n\nlet g:git_branch_status_text=\"text\"\nThis will show 'text' before the branches. If not set ' Git ' (with a trailing\nleft space) will be displayed.\n\nlet g:git_branch_status_nogit=\"\"\nThe message when there is no Git repository on the current dir\n\nlet g:git_branch_status_around=\"\"\nCharacters to put around the branch strings. Need to be a pair or characters,\nthe first will be on the beginning of the branch string and the last on the\nend.\n\nlet g:git_branch_status_ignore_remotes=1\nIgnore the remote branches. If you don't want information about them, this can\nmake things works faster.\n\nIf you want to make your own customizations, you can use the GitBranchInfoTokens()\nfunction. It returns an array with the current branch as the first element and\nanother array with the other branches as the second element, like:\n\n:set statusline=%#ErrorMsg#%{GitBranchInfoTokens()[0]}%#StatusLine#\n\nor\n\n:set statusline=%#StatusLineNC#\\ Git\\ %#ErrorMsg#\\ %{GitBranchInfoTokens()[0]}\\ %#StatusLine#\n\nwill give you a nice custom formatted string.\n\nThis will show you the current branch only. No prefix text, no characters\naround it. You can also make another functions to use the returned array.\n\nGet the latest code on http://github.com/taq/vim-git-branch-info"}, {:name=>"Named-Buffers", :summary=>"Give names to buffers", :description=>"This plugin let's you assign names to buffers, which may later on be used to navigate to this buffer\nby the assigned name. This is not very sophisticated and there are a lot of other navigation plugins,\nbut maybe it fits your need.\n\n:NameBuffer resp. :NameThisBuffer let's you assign a name to a buffer.\n:GotoNamedBuffer navigates to a buffer by name.\n:UnnameBuffer remove a previously assigned buffer.\n:ListNamedBuffers to see what names you already assigned."}, {:name=>"Contrasty", :summary=>"Contrasty colour scheme", :description=>"Aiming to be high contrast, with significantly different hues, and usable in GUI as well as colour terminals. Should be used with a sans-serif font."}, {:name=>"nagios-syntax", :summary=>"Nagios template object configuration file", :description=>"Nagios <http://www.nagios.org/&gt; template object configuration file.\n\nInitially based on gentoo source http://dev.gentoo.org/~ramereth/vim/syntax/nagios.vim\nhttp://bugs.gentoo.org/show_bug.cgi?id=76712\nwhich instead based on http://katanalynx.dyndns.org/~ajar/code :)\n\nCurrent URL:\nhttp://cvs.pld-linux.org/cgi-bin/cvsweb.cgi/packages/vim-syntax-nagios/nagios.vim"}, {:name=>"occur.vim", :summary=>"Show all lines in the buffer containing word (grep buffer)", :description=>"This script looks like 'occur' of emacs script.\n\nCreate a quickfix list using all lines in the buffer containing a match for regexp.\nSearch for regexp in the current buffer or all buffers.\n\nSearch current buffer:\n(1) Search the word by '/' command.\n(2)  :Occur\n\nSearch all buffers:\n(1) Search the word by '/' command.\n(2)  :Moccur\n\nSeach all buffers for occurrence of the word nearest to the cursor:\n(1) move the cursor to the word\n(2) :StarOccur\n\nYou can use keymappings of\n  <Leader>oc   - Occur\n  <Leader>mo   - Moccur\n  <Leader>*   - StarOccur\n\n# The default <Leader> is backslash. (ex: \\* = StarOccur) \n# (see :help mapleader)\n\n[QUICKFIX KEY-MAPPING]\nThis plugin enhances quickfix key-mapping.\n(when this plugin opens the quickfix window.)\n\n<Space> : Set current window height to highest.\nx : Display the occurence the current line.\nq : Quit the quickfix window.\n\nIf you want to disable this, then you can set the variable in the \"vimrc\".\n\n  let g:occur_no_quickfix_map = 1\n"}, {:name=>"xtemplate", :summary=>"code template engine", :description=>"USAGE:                                                                         \n  1) vim test.js                                                               \n  2) type:                                                                     \n    for<C-S-j> or <M-space> or <M-S-j>                                                                 \n    to generate a for-loop template. then type and use TAB to navigate through \n    template                 \n  \nHow to DEFINE TEMPLATEs \n    edit ftplugin/*/*.template.vim                                                  \n\nFEATUREs:\n  *-> automatically replace all item with the same name\n  *-> user-defined template variable or function can be automatically inserted\n  *-> stop position(marked by 'cursor') can be defined to indicate where the cursor stands after template rendering\n  *-> completion popup menu hint (NEW!!)\n\nSCREEN-SHOTs:\nhttp://sites.google.com/site/xptemplate/Home/screen-shoot\n\nFEATURE request / BUG report : \n    I will be so gald to know that this script helps. You can help me to improve.\n    drdr.xp@gmail.com"}, {:name=>"EZComment", :summary=>"Vim global plugin for manipulating comments", :description=>"EZComment is a Vim global plugin for manipulating comments\nin code.  It tries to both very flexible and very easy to\nuse.  EZComment provides mappings for two general kinds of\ntasks: inserting and editing text comments, and\ncommenting/uncommenting actual code.\n\nUse and customization of EZComment is discussed in detail in\nthe provided help file.  Here is the quick start information\n(from the documentation):\n\n-------------------------------------------------------------\nHere are some -very- brief hints about the mappings to get\nstarted quickly.  The mappings try to remind you of standard\nVim commands, so just try them!  If something is not\nobvious, then check the documentation for details.\n\nFrom normal mode:\nto make new comments |gca|, |gci|, |gco|, |gcO|\nto edit comments |gcA|, |gcC|\n\nFrom visual mode, or from normal mode followed by {motion}:\nto comment code |gcc|\nto uncomment code |gcuc|\n-------------------------------------------------------------\n\nPlease contact the author with comments, questions, or\nsuggestions!\n\n"}, {:name=>"vera.vim--Kher", :summary=>"Syntax for OpenVera language", :description=>"Vera is a Hardware Verification Language sold by Synopsys.\nThis syntax also contains RVM keywords and has been updated for vera 6.3.0 and RVM 8.6\nThe latest version of this package can always be found at http://kher.org/blog/technical_stuff/vim_syntax_for_vera.html\ncheers!\n "}, {:name=>"silent.vim", :summary=>"Vim, GVim light color scheme", :description=>"This is a new GUI light color scheme. \nSee screenshots at :\n\nlatest : http://img515.imageshack.us/my.php?image=c17cy9.png\nhttp://img405.imageshack.us/my.php?image=c13rf1.png\nhttp://img210.imageshack.us/my.php?image=c14lk3.png\n"}, {:name=>"colorful", :summary=>"Colorful scheme with light background", :description=>"- This is modification of the habiLight color scheme by Christian Habermann. habiLight happens to be one of my favorite schemes and this script has a few modifications of it. \n- Only works for gvim.\n"}, {:name=>"apachelogs.vim", :summary=>"Syntax highlight for apache log files", :description=>"Recognizes and differences IP address, referer, error type, date and hour and apache general error log constructions. Very useful for debugging perl via warn + CGI, php, for example, because you can easily identify  whether is and apache notice or a real error, which user agent IP produced it, with wich referer was called, etc... \n\nFor example a perl module that produces an error will break in the pm, but the caller that produces it is the perl script itself, that in apache is the referer. Both are highlighted differently with this syntax file."}, {:name=>"vim-rpcpaste", :summary=>"A ViM plugin to send code to a pastebin such as paste.debian.net using XML-RPC", :description=>"A ViM plugin to send code to a pastebin such as paste.debian.net using XML-RPC\n\nUse F2 in visual select mode to send it the selected text.\nUse :PasteFile to send the whole file.\nUse :PasteGajim to send the selected text and send the url to one of your gajim contact.\n\n\nThis is my first Vim plugin don't hesitate to send me comments about how I could make it better."}, {:name=>"pygdb", :summary=>"pygtk interface to gdb in connection with (g)vim", :description=>"pygdb is a pygtk interface to gdb. It offers two terminal windows, one for gdb, one for the process to be debugged. On the top it has standard buttons like run, continue, step in, step over, step out and quit. On a second window you can add watches and breakpoints. Furthermore, you can inspect the backtrace and launch gvim on the current executed line by pressing a button.\n\npygdb stays synchronized with gvim (by using gvim --servername calls). The package provides a pygdb.vim which enables the user to set (conditional) breakpoints and the current execution line is highlighted as well.\n\nDefault key mappings:\nF5: Run\nF8: Toggle breakpoint\nS-F8: Conditional breakpoint\nF9: Show breakpoints\nS-F9: Load config\n\nThe package is in a very young state but I guess it is more or less usable. You may want to give it a try or look for some screenshots at\nhttp://www.cosy.sbg.ac.at/~shuber/code-pygdb.php\nat first. This project is somehow similar to vdb (vimscript #1703). The main difference is that vdb tries to integrate gdb completely into vim, in contrast to pygdb. However, under some assumptions on the debugger, other debuggers can be integrated easily as well. (Just inherit the DbgTerminal python class)\n\nP.S. I don't have gvim-6 -- is anyone experiencing that the script works with vim-6 as well?"}, {:name=>"AutoInclude", :summary=>"Automatically add #include statements for c++ files", :description=>"This script allows you to automatically add the #include statements at the top of you *.{cc,hh} files.\nTo use it, place the cursor on the type you need to include, then press <;;> and the corresponding #include statement will be added.\nIn *.cc files, the correct #include is added, and in *.hh files, the forward declaration is added.\n\nExample:\nvoid myfunc (Foo* x);\n-> if you place the cursor on \"Foo\" and press <;;> (just the 2 semicolons), the #include \"foo.hh\" will be added at the top of the file. (The insertion location is specified by a variable, see Install Details).\n\nThe naming standard used is \"Foo\" and \"FooBar\", for the FooBar class the #include will be: #include \"foo-bar.hh\"."}, {:name=>"nightflight2.vim", :summary=>"A dark color scheme dedicated to Antoine de Saint-Exupéry", :description=>"A dark color scheme dedicated to Antoine de Saint-Exupéry"}, {:name=>"gladecompletion.vim", :summary=>"IDE-like completion for projects using the Glade UI designer", :description=>"WHAT IS IT?  Provides an Insert mode completion function which completes names\nfrom a .glade file as produced by the Glade UI designer.\nhttp://glade.gnome.org/\n\nHOW DOES IT WORK?  The plugin defines a function which scans .glade files in\ncurrent buffer's current directory.  The function adds Gtk objects and event\nhandlers to the insert mode completion menu\n\nThe menu is invoked by pressing <C-x><C-u> in insert mode.  Read all about it\nat |i_CTRL-X_CTRL-U|.\n\nEach time the completion function is invoked, it looks at the .glade files in\nthe current directory and compares the filesystem's modification timestamp\nwith the timestamp value from the previous invocation.  Thus, if you\nadd/change a widget in Glade and save the file, those changes are reflected\nimmediately in Vim.\n\n"}, {:name=>"flydiff", :summary=>"on-the-fly diff", :description=>"*flydiff* is a Vim plugin to perform on-the-fly diff on the current buffer\nwith some version control system and show the differences in another buffer.\n\n\nRequirements:\n- Vim 7.1.299 or later\n- Ordinary *nix shells such as bash and zsh\n\nSupported version control systems:\n- git\n\nLatest version:\nhttp://github.com/kana/vim-flydiff\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/flydiff.html"}, {:name=>"textobj-fold", :summary=>"Text objects for foldings", :description=>"*textobj-fold* is a Vim plugin to provide text objects for foldings.\n\n\nRequirements:\n- Vim 7.0 or later\n- |textobj-user| 0.3.5 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-fold\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-fold.html"}, {:name=>"textobj-jabraces", :summary=>"Text objects for Japanese braces", :description=>"*textobj-jabraces* is a Vim plugin to provide text objects for Japanese braces\nsuch as 「...」 and 【...】.\n\n\nRequirements:\n- Vim 7.0 or later\n- |textobj-user| 0.3.3 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-jabraces\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-jabraces.html"}, {:name=>"DevEiate-theme", :summary=>"A dark theme, mimicing the TextMate theme of the same name.", :description=>"This is a Gvim color definition file, based loosely on Michael Granger's\neye-pleasing theme for Textmate of the same name.\n\nMahlon E. Smith <mahlon@martini.nu>\nMichael Granger <ged@faeriemud.org>\n\nSample screenshot here:\nhttp://projects.martini.nu/vim-stuff/chrome/site/deveiate.png\n"}, {:name=>"jptemplate", :summary=>"A simple, yet powerful interactive template system for VIM", :description=>"You will find a lot of documentation and some demo videos on http://lunar-linux.org/~jannis/jptemplate/.\n\nYou can also download the script and its documentation directly from my git repository on http://git.gezeiten.org/?p=jptemplate.git.\n\nPlease send bugs and feature requests to the email address which you will find on my profile page. I especially appreciate ideas for new special variables!"}, {:name=>"cmdlinehelp", :summary=>"Display help on the command currently being edited in the command line", :description=>"Has this ever happened to you? You are typing a command and cannot remember \nwhether that particular option is an \"u\" or an \"o\". cmdlinehelp to the \nrescue!\n\nWhen editing a command line, press <c-o> (see also |g:cmdlinehelpMapView|) \nto display help on the command currently being edited.\n\nUse <c-pageup>/<c-pagedown> to scroll the help window.\n\nThis plugin was inspired by a post by Marcel Boon to vim_use:\nhttp://groups.google.com/group/vim_use/browse_frm/thread/aaa3d652d7b76d02\n"}, {:name=>"blackboard.vim", :summary=>"Clone of the Blackboard theme from textmate", :description=>"A dark theme with golds and oranges.  A port of the blackboard textmate theme.  Still some tweaks need to be made but overall it is acurate.\n\nOnly works in gui mode for now"}, {:name=>"pink", :summary=>"Pink colour scheme for 256 colour terminals", :description=>"Use this if you like tabedit, split/new, folding, netrw and PINK! It works in terminal and GUI mode. Be warned, your colleagues may take the mickey out of you if you use this.\n\nScreen shot: http://picasaweb.google.com/paddynewman/Vim/photo#5221682521676117730"}, {:name=>"brook.vim", :summary=>"Brook syntax highlighting", :description=>"Syntax highlighting for the Brook stream programming language, a C-like language with extensions for use with GPUs.  See graphics.stanford.edu/projects/brookgpu/ \n\nThe latest version can be found at http://github.com/rbonvall/vim-scripts/tree/master/syntax/brook.vim ; patches are welcome."}, {:name=>"huerotation.vim", :summary=>"rotate hue of current colorscheme (GUI only).", :description=>"Hue is one of component of HSV color model. \nYou can rotate hue of current colorscheme.\n\nThis plugin requires vim7.2 for Float feature.\n\nUsage:\n  :call RotateHue(60)\n\nReference:\n  EasyRGB - Color mathematics and conversion formulas.:\n    http://www.easyrgb.com/math.php\n  Wikipedia - HSL and HSV\n    http://en.wikipedia.org/wiki/HSL_and_HSV"}, {:name=>"cup.vim", :summary=>"CUP Syntax highlighting", :description=>"Syntax highlighting for the CUP parser generator, an LALR parser generator for JAVA. See http://www.cs.princeton.edu/~appel/modern/java/CUP/\n\nThe latest version can be found at http://www.trapdoor.org/projects/4\n\nPatches are welcome."}, {:name=>"vmv", :summary=>"group rename files from the command prompt with vim", :description=>"vmv - the vim version of the mv command. This script is in intent exactly the same as renamer.vim, rename a mass of files all at once using the full power of vim's editing capabilities.  Usage is much simpler to remember if you haven't used it in months, and the script itself is much shorter. Great for anybody who just ripped a CD to \"track 01.mp3\" through \"track 12.mp3\", or just inherited a collection of mp3's without proper case and with underscores instead of spaces. \n\nAlso notable is that this will deal with files that start with a - or -- just fine.\n\n\nUsage is simple:\n1. Give it a list of files to be renamed.\n2. Edit that list to reflect what you want the file names to be.\n3. \":wq\" and you're done\n\nHere's a few examples:\n\n#Rename all non-hidden files in the current directory\nlocalhost~$vmv\n\n#Rename all mp3 files below the current directory\nlocalhost~$find | grep  -i '\\.mp3$' | vmv\n\n#Rename all files listed in file \"list.txt\"\n#Note that the file list.txt will be saved as well as files on disk renamed.\nlocalhost~$vmv list.txt\n\nThere are two \"bugs\" that I know of:\n1. It remembers the previous name of the file via line number, so if you add or delete lines bad things may happen.\n2. It renames files directly to the destination filename, so trying to swap filenames will instead overwrite the second with the first, and rename the second as the first. Probably not what you wanted, but the fix is too complicated and the case rare enough that I didn't bother to implement it.\n3. It's fairly slow when writing large lists of files, even if only a few where modified. Some better way of storing the meta-data (i.e. original name) is needed.\n\nThere isn't really much error checking. If the original file name doesn't exist, that line will fail with a message, but it will merrily proceed with the rest of the file. If the destination file name already exists it will overwrite without warning. There is no lifeguard, swim at your own risk. I was going to write fixes for those, and also make it check if the file exists when it's first loaded for editing. I changed my mind because, after all, <sarcasm> I know what I'm doing. </sarcasm> Yes, the 0.1 version number is correct. It's functional, and does what I need it to do, and little else.\n\nIf you enjoy this script, and want it improved, your comments would be helpful."}, {:name=>"Specky", :summary=>"Functions to help make behavioral testing easy with ruby and rspec.", :description=>"Specky is a small collection of Vim functions to help make behavioral testing streamlined and easy when working with ruby and rspec.\n\nHere are some of the things you can do with Specky, with a single key stroke:\n\n    * Switch back and forth from code to testing spec\n    * Run the spec, with results going to a new, syntax highlighted buffer\n    * Jump quickly to spec failures and failure detail\n    * View rdoc of the word under the cursor\n    * Dynamically switch string types for the word under the cursor (double quoted, quoted, symbol)\n    * Create comment banners quickly \n\nSpecky also includes a couple of conveniences to make your everyday programming tasks smooooth and pleasurable, such as:\n\n    * File detection for spec files (that are named in the traditional *_spec.rb fashion.)\n    * Syntax highlighting for rspec and rdoc\n    * \"Snippets\" for rspec, using the Snipmate (vimscript #2540) plugin. \n\nYou can see a screencast of Specky here: http://projects.martini.nu/vim-stuff/wiki/SpeckyCast\n\nThis is my first official VIM plugin.  Advice/props/criticisms all equally appreciated, but please let me know if you're using it!  (mahlon@martini.nu)   \n"}, {:name=>"fgl.vim-syntax", :summary=>"Syntax folding for IBM Informix 4GL or 4J programs", :description=>"fgl.vim is Informix 4GL syntax file. \n\n"}, {:name=>"ctags.exe", :summary=>"Windows version of ctags for 4GL/4Js programs", :description=>"I compiled original Windows ctags source(http://ctags.sourceforge.net/) with a 4GL language extension to generate tags for functions(include report function), cursor IDs, prepared statement IDs, and global/module level variables. It works in XP and Vista according to my test. \n\nIt's even better when you use it with taglist.vim. It generate tags on the fly when you open 4gl programs in gvim/vim. For this add the following lines in taglist.vim. (Scroll down the plugin to a section where tag types are defined for different languages:)\n------------------------------------------------------------------------------------------------------------------\n\" fgl language\nlet s:tlist_def_fgl_settings = 'fgl;f:function;c:cursor;s:prepared;v:variable'\n------------------------------------------------------------------------------------------------------------------\n\nIf you want to compile yourself, here is how I compiled:\n1. Download and extract, if necessary, BCC55(free Boland compiler) and ctags source for Windows from the web and 4GL extentionfrom \n2. Create both bcc32.cfg and ilink.cfg in bin directory of BCC55 using Notepad. The contents of two files are the same as follows(of course, change the path if you have installed it in a different directory). Each file contains two lines.\n   -I\"C:\\Borland\\BCC55\\Include\" \n   -L\"C:\\Borland\\BCC55\\Lib;C:\\Borland\\BCC55\\Lib\\PSDK\"\n3. You will probably have to add a bin path to your system \n4. Download 4GL extenion from http://www.vim.org/scripts/script.php?script_id=587,and extract files(fgl.c ...) to your ctags source directory\n5. In ctags source directory, type \"make -f mk_bc5.mak\" to build ctags.exe\n"}, {:name=>"loremipsum", :summary=>"A dummy text generator", :description=>"Insert a dummy text of a certain length. Actually, the text isn't \ngenerated but selected from some text. By default, the following text is \nused, which is included in the archive:\nhttp://www.lorem-ipsum-dolor-sit-amet.com/lorem-ipsum-dolor-sit-amet.html\n\nNOTE: The webpage didn't contain any copyright message but there is a \nstatement that one is allowed to paste the text into \"your document\". \nI thus assume it's ok to include it in the archive. If not, please let me know.\n\nCommand:\n:Loremipsum[!] [WORDCOUNT] [PARAGRAPH_TEMPLATE] [PREFIX POSTFIX]\n    Insert some random text.\n\n:Loreplace [REPLACEMENT] [PREFIX] [POSTFIX]\n    Replace the random text with something else or simply remove it.\n"}, {:name=>"smartchr", :summary=>"Insert several candidates with a single key", :description=>"*smartchr* is a Vim plugin to support input several candidates with a single\nkey, like ess-smart-underscore in Emacs Speaks Statistics -- when user types\n\"_\" key, it inserts \" <- \" for the first time or it replaces \" <- \" by \"_\" for\nthe second time.  This plugin provides functions to support to define such\nkey bindings easily.  For example:\n\n\tinoremap <expr> _  smartchr#one_of(' <- ', '_')\n\n\n\nRequirements:\n- Vim 7.1 or later\n\nLatest version:\nhttp://github.com/kana/vim-smartchr\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/smartchr.html"}, {:name=>"skeleton", :summary=>"Skeleton for newly created buffers", :description=>"*skeleton* is a Vim plugin to set up a skeleton for a newly created buffer.\nOnce you put skeleton files into specific directories, appropriate ones will\nbe automatically expanded for newly created buffers.\n\n- Skeleton files must be put in a directory named \"xtr/skeleton/\" which is\n  under any directory listed in 'runtimepath'.\n\n  For example: ~/.vim/xtr/skeleton/\n\n- The name of a skeleton file should be \"{filetype}\" or \"{filetype}-{suffix}\",\n  where {filetype} is the 'filetype' for a newly created buffer and {suffix}\n  is an arbitrary string.\n\n  The former \"{filetype}\" is used as the default skeleton file for that\n  'filetype'.  The latter \"{filetype}-{suffix}\" is used to override the\n  default one for some cases which are speicifed by user.\n\n  For example: ~/.vim/xtr/skeleton/vim ~/.vim/xtr/skeleton/vim-plugin\n\n- Whenever user starts to edit a file that doesn't exists:\n\n  1) Skeleton publish a |User:plugin-skeleton-detect| event.  This event can\n     be used to |:SkeletonLoad| a special skeleton file other than the default\n     one.\n\n  2) If |:SkeletonLoad| is not done for the previous step, Skeleton executes\n     the following command:\n\n\texecute 'SkeletonLoad' &l:filetype\n\n     This means a skeleton file named \"{filetype}\" in a directory\n     \"xtr/skeleton/\" which is under any directory listed in 'runtimepath' is\n     loaded as a skeleton file.\n\n     If there is no such skeleton file, nothing will be happened.\n\n\nRequirements:\n- Vim 7.1 or later\n\nLatest version:\nhttp://github.com/kana/vim-skeleton\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/skeleton.html"}, {:name=>"linglang", :summary=>"Dynamically switch languages/settings in multi-lingual documents", :description=>"The command |:Linglang| installs a buffer-local autocommand that checks \nthe current line's language. I.e. enabling linglang for the current \nbuffer won't affect other buffers. If the language of the line under the \ncursor changes, a user-defined action (e.g., set spelllang) will be \nexecuted.\n\n:Linglang[!] [LANGS ...]\n    Toggle linglang support for the current buffer.\n    With [!], suppress message.\n\nCurrently supported:\n- English\n- German (latin1, utf8)\n\nIn order to add a new language, you'll have to come up with some good \nwords/regexps to identify it.\n\nLanguage data is stored in .../autoload/linglang/LANGUAGE.ENCODING\nThe fileformat is simple:\n\n- one word per line (these will be matched against word borders)\n- arbitrary regular expressions: /REGEXP/\n"}, {:name=>"Resolve", :summary=>"DNS resolver for domains or ips under the cursor", :description=>"Scripts resolves hostname / ip under cursor, using `host` command. It can either echo the result (<Leader>re / <Leader>rs), or substitute relevant part of the buffer (<Leader>rE / <Leader>rS). Currently resolving A / SRV / PTR is supported, but adding other types should be trivial if anyone needs them."}, {:name=>"SwapIt", :summary=>"Extensible keyword swapper (turn yes to no, True to False and more)", :description=>"swapit.vim is a vim plugin designed to make repetitive changes easier.\n\nOn a current word that is a member of a swap list use the\nincrementor/decrementor keys (:he ctrl-a,ctrl-x). The script\nwill cycle through a list of related options.\n\nA quick tty example is here http://ttyshare.com/rec/michael/76068689/\n\nSwapit now offers omnicomplete based swapping on css files!\nCss example plugging into omnicomplete http://ttyshare.com/rec/michael/76409608/\n\nThe repository is here http://github.com/mjbrownie/swapit/tree/master. Any list submissions would be appreciated. \n\nThe idea is to compile a list of common property swaps for various languages/frameworks \n\nNOTE: This has been done before in a simpler vimscript#1676 script. This script differs in it's ability to handle phrase swapping eg 'int' to 'unsigned int'\n\neg. 1. Boolean\n\nfoo=true\n\nin normal mode, pressing ctrl-a on the t will make it\n\nfoo=false\n\neg. 2. Multi Word Swaps.\n\nHello World! is a test multi word swap.\n\non 'Hello World!' go select in visual (vi'<ctrl-a>) to get\n\n'GoodBye Cruel World!'\n\neg 3. Defining custom swaps\n\nA custom list is defined as follows.\n\n:SwapList datatypes bool char int float double\n\nThe first argument is the list name and following args\nare members of the list.\n\nif there is no match then the regular incrementor decrementor\nfunction will work on numbers\n\nAt the bottom of the script I've added some generic stuff but\n\nYou can create a custom swap file for file types at\n\n~/.vim/after/ftplugins/<filetype>_swapit.vim\nwith custom execs eg.\nexec \"SwapList function_scope private protected public\"\n\nFor this alpha version multi word swap list is a bit trickier\nto to define. You can add to the swap list directly using\nvimscript within a after/ftplugin/<ft>_swap.vim file\n\n call extend(g:swap_lists, [{'name':'Multi Word Example',\n             \\&#039options': ['swap with spaces',\n             \\&#039swap with  @\#$@# chars in it' ,\n             \\&#039running out of ideas here...']}])\n\nFuture versions will make this cleaner with a :Command\n\nAlso if you have a spur of the moment Idea type\n:SwapIdea\nTo get to the current filetypes swapit file\n\nNote: This alpha version doesnt create the directory structure\n\nTo integrate with other incrementor scripts (such as\nspeeddating.vim vimscript #2120  or monday.vim vimscript #1046), \n:nmap <Plug>SwapItFallbackIncrement and <Plug>SwapItFallbackDecrement\nto the keys that should be invoked when swapit doesn't have a\nproper option. For example for speeddating.vim:\n\nnmap <Plug>SwapItFallbackIncrement <Plug>SpeedDatingUp\nnmap <Plug>SwapItFallbackDecrement <Plug>SpeedDatingDown\n"}, {:name=>"Glob-Edit", :summary=>"Open lots of files at once.", :description=>"This script is based on vimtip #146. It enables you to open any amount of files at once using the edit command. You can simply provide multiple parameters or use glob patterns.\n\nExamples:\n\n:edit foo.txt bar.txt\n:edit foo/**/*.txt\n\nUPDATE:\nI just found out that :args does just what this script tries to do."}, {:name=>"sipngrep", :summary=>"Syntax file for sip captures from ngrep (udp)", :description=>"Syntax includes:\n- coloring numbers / usernames\n- folding with first line of packet in summary\n- coloring 'important' and other headers\n- coloring for standard possible problems (lack of username or domain, incorrect method, private ips)\n- marking 4XX, 5XX, 6XX statuses\n\nDesigned looking at capture produced by `ngrep -q -tt -W byline udp and port 5060` or similar."}, {:name=>"sipngrep-helper", :summary=>"Helper functions for looking through sip packet captures", :description=>"Helper functions mapped to\n<Plug>SkipToMatchingRequest (standard <LocalLeader>sq)\n<Plug>SkipToMatchingResponse (standard <LocalLeader>sr)\nWhen used with cursor over a packet, they will find either following matching (by CSeq) response, or previous matching request.\n\nExpected format of sip capture is the same as produced by `ngrep -q -tt -W byline ....`\nWorks on the same captures as syntax sipngrep highlighter: vimscript #2296"}, {:name=>"codepad", :summary=>"Post the contents of your current buffer to the pastebin service at codepad.org", :description=>"The plugin adds two new commands:\n\n:CPPaste\n    to send the current buffer to http://codepad.org, open your pasted code\n    in your webbrowser, and copy the URL of the pasted snippet to the\n    clipboard.\n\n\n:CPRun\n    to send the current buffer to http://codepad.org, execute it on their server,\n    and open both the pasted source and the program output in your browser.\n    The URL of the pasted snippets is copied to the clipboard as well.\n\n\nThe correct filetype is automatically detected through the 'filetype' option."}, {:name=>"fortran.vim", :summary=>"Additional indentation rules for Fortran 95 and Fortran 90", :description=>"This script provides additional indentation rules (continued statements; preprocessor instructions; subroutine, function and forall statements) to Ajit J. Thakkar's Vim indent script for Fortran free source form."}, {:name=>"perl-mauke.vim", :summary=>"improved perl syntax highlighting", :description=>"This file is based on the perl.vim syntax definition that comes with vim, but with some heavy modifications intended to improve vim's perl highlighting.\n\nThe list of changes includes:\n* 'new' and 'croak' are not keywords and no longer highlighted as such\n* Special highlighting for pragmas (e.g. \"use warnings\") now applies to all pragmas coming with perl\n* Fixed number highlighting (\"0X\" is not a valid hex prefix, \"L\" is not a valid suffix)\n* Fixed escape sequence highlighting (\"\\X123\" is not a hex escape, \"\\123\" is limited to three octal digits)\n* Lots of improvements in the matching of quoted constructs:\n  - vim no longer thinks \"!\" is a quoting operator (so \"!!\" works right)\n  - support for arbitrary quoting delimiters (e.g. \"m%...%\" works)\n  - I've also tried to make nesting work (e.g. \"s[foo[bar]][b[a]z]g\")\n* Full support for subroutine definitions (parsing of prototypes and attributes)\n* Recognizes v-strings and statement labels\n* \"=>\" quotes its LHS, even if it's a keyword\n* Perl 5.10 support: new keywords ('given', 'when', 'default', 'state', 'break') and regexp control operators ('PRUNE', 'SKIP', 'COMMIT', etc.)\n"}, {:name=>"Gembase-dml-plugins", :summary=>"Syntax highlight, auto-indentation and omni-completion for Gembase dml file", :description=>"This package includes three scripts, a syntax script, an auto-indentation file and a ftplugin, which mainly provides omni-completion, suited declaration auto-completion and some accessorial functionalities.\n\n1. Syntax highlight\n-------------------------\n\nHighlighted language-elements listed as below:\n\n    (1) preprocessing statement;\n    (2) comment;\n    (3) six kinds of forms and its end_form keyword;\n    (4) six kinds of blocks and its end_block keyword;\n    (5) structure such as if, while and case statement, and highlighted their adjacent parenthesis;\n    (6) operator, constant and quote;\n    (7) system variable and user-defined variable;\n    (8) all qualifiers of form and block;\n    (9) most of metadata keywords.\n\n2. Auto-indentation\n--------------------------\n\nIn the insert mode, it will auto-indent form, block, structures and continuous lines marked with character \u0093&\u0094. In the normal mode, you can use it to check codes validity (hit keys: \"gg=G\"). Some mismatched keywords and abuse of character \"&\" were found in dml files when I run it.\n\nBy default, shiftwidth equals to 4 spaces (If you need a tab with 8 spaces, try to hit \"ctrl + v + tab\u0093), value of syntactic indent equals to shiftwidth, and continue line marked with character \"&\" indents 8 spaces (you can configure it by changing the variable \"s:slip\" in indent script). \n\n3. ftplugin\n-------------\n\nThis script provides several useful functionalities, the most useful two are:\n\n     (1) in the insert mode, it provide both omni-completion and known-word-completion functionality by a function \"SuperCleverTab()\". It is very convenient, when you hit key \"Tab\", vim will pop a balloon to lists all candidate keywords, use \"CTRL + N\" or \"CTRL + P\" to move focus, use \"CTRL + Y\" to pick up a candidate and \"CTRL + E\" to return original status. If you want to print a \"Tab\", just try \"CTRL + V + Tab\". You can also manually remap the hot-key, besides, an menu item also provides to execute it;\n     (2) in the insert mode, it will auto-complete suited declaration keywords after its beginning was inputed, for instance, if you input string \"BEGIN_BLOCK?\", NOTICE: the keyword must be followed by a question mark \"?\", then hit a space, system will auto-complete \"END_BLOCK\";\n\nOthers are some accessorial enhancements:\n\n     (3) set comments to format dashed line with leader character \"!\" when hitting <CR> or using \"o\";\n     (4) set hot-keys to support fast jumping among blocks by using \"]]\" (next \"BEGIN_BLOCK\"), \"[[\" (previous \"BEGIN_BLOCK\"), \"][\" (next \"END_BLOCK\"), \"[]\" (previous \"END_BLOCK\"), and among comments by using \"]!\" (next comment) and \"[!\" (previous comment);\n     (5) support \"matchit\" plugin to jump between keywords within a structure by hitting key \"%\" in normal mode. Such as \"IF\" -> \"ELSE_IF\" -> \"ELSE\" -> \"END_IF\", etc.\n     (6) also provides parenthesis auto-completion;\n     (7) if you runs in GUI, it provides a menu column, which lists some functional item;\n     (8) if you runs in GUI and made a folder, when cursor hangs over it, then system will display a help tip to show the less than 30 lines within folder;\n     (9) provide a quick approach to comment or uncomment selected lines by GUI menu.\n\n4. Upgrade\n---------------\n\nBy default, GetLatestVimScripts plugin is included in Vim installation package, whose version is higher than v7. So you can use it to auto-download the newest package. Add below line into file \"GetLatestVimScripts.dat\":\n\n                           2301 1 gembase-plugins\n\nand use this command \":GetLatestVimScripts\" to upgrade it.\n\n5. TODO\n------------\n\n     (1) when handling an ending statement, check its mate to decide whether indent;\n     (2) support fast jumping and matchit switching between six kinds of forms;\n     (3) normalize syntax format of current line before open a new line;\n     (4) assemble the results of keyword-completion and context-completion together.\n\n6. Acknowledgments\n----------------------------\n\nI would like to thank Kim Schulz, without his excellent book \"Hacking Vim\", I can't complete ftplugin script in a few days."}, {:name=>"foldsearch", :summary=>"fold away lines that don't match a given pattern", :description=>"This plugin provides commands that fold away lines that don't match a specific search pattern.  This pattern can be the word under the cursor, the last search pattern, a regular expression or spelling errors. There are also commands to change the context of the shown lines.\n\nCommands:\n\n:Fw [context*]\n  show lines which contain the word under the cursor. Default [context] is 0.\n \n:Fs [context*]\n  show lines which contain previous search pattern. Default [context] is 0.\n \n:Fp pattern\n  show the lines that contain the regular expression. Context is 0.\n\n:FS\n  show the lines that contain spelling errors.\n \n:Fl\n  fold again with the last used pattern\n\n:Fc [context*]\n  show context lines.\n \n:Fi\n  increment context by one line.\n \n:Fd\n  decrement context by one line.\n \n:Fe\n  set modified fold options to their previous value\n\n* context can consist of one or two numbers. A 'unsigned' number defines the context before and after the pattern. If a number has a '-' prefix, it defines only the context before the pattern. If it has a '+' prefix, it defines only the context after a pattern.\n\nMappings:\n\n<Leader>fs     FoldSearch()\n<Leader>fw     FoldCword()\n<Leader>fl     FoldLast()\n<Leader>fS     FoldSpell()\n<Leader>fi     FoldContextAdd(+1)\n<Leader>fd     FoldContextAdd(-1)\n<Leader>fe     FoldSearchEnd()"}, {:name=>"spring.vim", :summary=>"Make your VIM bright with colors, and avoid the eyestrain.", :description=>"The spring.vim is a color sheme file (only for GVIM), which make the VIM bright with colors. It just like the flowers are in blossom in Spring. Additionally, it is said that there is a kind of light green color (RGB code: #cce8cf) which can avoid the eyestrain, at least make your eyes more comfortable. So the spring.vim was born. \n\nThere are some screenshots on the website: \n\nhttp://srcexpl.blogspot.com/\n\n"}, {:name=>"vimdb.vim", :summary=>"Vim plugin to simulate a simple database Table", :description=>"Unfortunatly nobody likes this script; it would be kind of you to let me know why.\n\nThis plugin is useful to store information in a database-like design.\nWhilst opening a *.vimdb file, autocommands will be applied and open two windows. The left window gives a view on the table, the right window shows the record, the cursor is currently over (of course, after heaving created a new *.vimdb file, there will only be two empty windows shown). The first line of the table will become the header, which shows the names of the columns. For full instructions see readme, to have an idea, how a database will look like: look at example database shipped with the package.\n\nNote:\n1.) With the new improved (since version 0.5) TAB key mapping, editing the database will become a pleasure ;). \n2.) Cleared many bugs to make script a bit more compatible to Vim movement/delete commands (cw, dw, D, C),\n     which might be useful editing records (But still the mighty TAB key dwarfs them all;).\n3.) Im through with bug removal, but there is still one, you should know: The table needs at least two columns to let the TAB key\n     work\n\nBe Warned:\nThe development of the script has advanced, but  i would still not recommend to store important data to a *.vimdb file.\n\n\nQuestions/Suggestions/Bug reports?\nJust compose a mail! (I dont promise to do anything but to be pleased to receive your mail. But just have a try) \nbenjaminschnitzler_at_gmail_dot_com"}, {:name=>"Textile-for-VIM", :summary=>"Syntax Highlighting and Textile rendering / preview support", :description=>"*textile.txt*              Textile for Vim       Last Change: November 3, 2008\n\n===============================================================================\nREQUIREMENTS                                             *textile-requirements*\n\n- ruby - http://ruby-lang.org/ (seperate executable, not compiled in)\n- RedCloth - http://whytheluckystiff.net/ruby/redcloth/\n\nFiles with the extension *.textile will auto-detected.  If editing a new file,\nor otherwise, run \":setf textile\" to enable textile commands.\n\n\n==============================================================================\nCHANGELOG                                                  *textile-changelog*\n\n0.3     - Fixed keymappings in the documentation\n0.2     - Added multiple colors for headers, and alternating colors for list\n          items\n        - Fixed error in the vim script for TextileRenderBufferToFile\n        - Changed shortcut keys from \\tp to \\rp (render preview instead of\n          textile preview, since it's file-type specific anyways)\n0.1     - Initial Release\n\n==============================================================================\nCOMMANDS                                                    *textile-commands*\n\nh2. Commands\n\n:TextilePreview     - Render the current buffer to a temp file, and open it in\n                      your web browser (OSX only)\n\n                      <Leader>rp\n\n:TextileRenderTab   - ... to a new tab\n\n                      <Leader>rt\n\n:TextileRenderFile  - ... to a file\n\n                      <Leader>rf\n\n<Leader> is \\ by default, so <Leader>rp == \\rp\n\n==============================================================================\nCREDITS                                                      *textile-credits* \n\n- \"Dominic Mitchell\":http://happygiraffe.net/: initial syntax highlighting\n- \"Aaron Bieber\":http://blog.aaronbieber.com/: improved syntax highlighting \n- \"Tim Harper\":http://tim.theenchanter.com/ &nbsp;: improved syntax highlighting,\n                                                plugin\n\nvim:tw=78:noet:wrap:ts=2:expandtab:ft=help:norl:\n\n"}, {:name=>"Text-Especially-LaTeX-Formatter", :summary=>"Format text or LaTeX text so that lines have approximately equal lengths", :description=>"This script formats a paragraph of text so that lines have approximately equal length (set by textwidth). It has the following features:\n\n1. It restores logical cursor location (the number of non-space chars from the start of the formatted text). \n\n2. It merges multiple blank lines into one.\n\n3. It is LaTeX aware (many commands and the comments) are recognized (and ignored) so that the source file does not look bad after formatting. It yields better (according to the author :-) results than fmt, or the VIM internal formatter.\n\n4. It can be modified to adapted to your own likes (eg. more ignored code blocks) quite easily (see the functions s:CanJoin, s:BlockStart, s:BlockEnd). \n\n5. It merges multiple spaces into one. (neither fmt nor VIM internal formatter does this). \n\n6. For lines that start with a space/tab, they are not disturbed. \n\n7. It is written in VIM script, so no external programs (awk/fmt/perl) are necessary. This is probably against the UNIX principle. But now that VIM offers scripting capability, one can argue that a VIM script is \"simpler\" (less reading of disk :-). \n\n8. It can be quite easily extended to format a larger chunk of data (more than just a paragraph). Using the s:FormatLines function provided.\n\nComments/Suggestions/Improvements are welcomed. You can leave a comment at \nvim.wikia.com/wiki/User:Lpb612\n\nNote1:  Also take a look at a similar script, Script 2187 http://www.vim.org/scripts/script.php?script_id=2187\n"}, {:name=>"Clever-Tabs", :summary=>"Using tabs for indent only on start of line", :description=>"\" Script solving indentation problem. Main idea is\n\" have tabs (\"\\t\") at the beginning of line and \n\" after first another character like \"\\t\" use spaces (like expandtab).\n\" This is useful for code readability. I'm trying to join these two ways:\n\" * http://www.movement.uklinux.net/docs/whytabs/\n\" * http://www.derkarl.org/why_to_tabs.html\n\" with using the best ideas from both.\n\"\n\" main() {\n\"     printf(\"hello\");    //my comment\n\"     printf(\"world!\");   //my comment 2\n\" }\n\" \n\" Before printf are tabs (this is block) anda before comments\n\" are tabs converted into spaces. After you change \n\" tabstop (for tabelator size), part with comments will \n\" have still same format, becuase tabs are only on line beginnig.\n\"\n\" note:    parameter for CleverTabs is shiftwidth in spaces\n\" note2:   this is my first script in vim, please be patient\n\"\n\" special thanks to james pickard for useful advices"}, {:name=>"portablemsys", :summary=>"Use msys as Portable GVim's shell", :description=>"This plugin automatically sets the shell option to point to msys location.\nIt lets you have both Portable GVim and msys+MinGW on your portable usb stick, without needing to set the path every time you plug in the usb stick, thus giving you portable compiling powers :-)\n"}, {:name=>"GoogleSearchVIM", :summary=>"Search for keywords with the Google Desktop Search engine from inside VIM", :description=>" This plugin allows you to use Google Desktop Search engine to search text\n files on your hard drives (or network drives if configured in GDS) from within VIM. \n This requires python, pygoogledesktop script, python windows extensions, and Google Desktop Search engine installed.\n Right now, this is a Windows only program, until I find time to modify it\n for other OS's.\n\nThis might get you quicker results instead of using vimgrep or grep.\n"}, {:name=>"Indent-Highlight", :summary=>"Yet another indentation (scope) highlighting", :description=>"This plugin provides a function that will highlight (or remove\nhighlighting ) of the current scope and parent scope based on difference in\nindentation. It can be very usefull for languages that use indentation to\ndefine the scope ( python, rubby, etc. )\n\nI wrote this script so that I could quickly restore visual stack when\ncoding in python. So for python I created the following mapping in my vimrc:\n\nmap <silent> <Leader>ih :call IHighlight( 1, \"\\^[[:space:]]*\\\\(def\\\\\\\\|class\\\\)[[:space:]]\\\\+\" )<CR> \nmap <silent> <Leader>is :call IHighlight( 0, \"\\^[[:space:]]*\\\\(def\\\\\\\\|class\\\\)[[:space:]]\\\\+\" )<CR>\n\nwhich allows me by entering \\ih (or \\is) to highlihgt current scope along\nwith the parent scope and than by entering \\ih (or \\is) again remove the\nhighlighting\n\nthe difference between \\ih and \\is is that\nthe first one (\\ih) will turn off all syntax highlighting untill indentation highlighting is active\nthe syntax highlighting will be turned back on when you enter \\ih again turning the indentation highlighting off\nthe second one (\\is) will apply indentation highlighting on top of existing syntax highlighting\n\none can extend this functionality and provide bindings for movement keys so\nthat highlighting follows the cursor position"}, {:name=>"softlight.vim", :summary=>"it's a soft and easy-on-eyes colorscheme.", :description=>"a soft and easy-on-eyes colorscheme taken from Kate ( KDE Advanced Text Editor ).  I like Kate's colors so I thought I would make a similar one!! :)  hope you like it!"}, {:name=>"sofu.vim", :summary=>"Highlighting for sofu files", :description=>"Provides simple highlighting for sofu files, which are used in some projects:\nFor more information on sofu see http://sofu.sf.net\n\nNormaly these files get autodetected as \"conf\", which is o.k., but this script provides a better highlighting.\n\nBased somewhat on the included conf.vim"}, {:name=>"QuickName", :summary=>"The most convenient way navigating opened buffers, incremental search by name", :description=>"The most convenient way to navigate currently opened buffers.\n\nDefault hot key is F3.\n\nInitially, QuickName display the full list of opened buffers in a compact way (multi-column) inside command area. As you type, QuickName narrows the list to only buffers with matched name. Hit <Enter> to open selected buffer. Hit <Esc> or hot key (default F3) again to close QuickName.\n\nWhen QuickName is active, arrow keys and backspace function as expected.\n\nMatching rule: thefile.vim can be matched with any of thefil, thefi.vim, thfl.vm. Guess why!\n\nShould QuickName integrate with QuickBuf, and how?\nAny ideas and bug reports, please send to palnart@gmail.com.\n"}, {:name=>"thegoodluck", :summary=>"Contrast colourful light-background scheme", :description=>"tGL - the Good Luck\nMy personal light colorscheme for gvim.\nI prefere to decrease screen brightness at my worktime to the value, when the white color not tire my eyes. So the colorscheme is comfortable for long time working for me.\n\nScreenshot: http://img-fotki.yandex.ru/get/31/shvechikov.0/0_12c07_6929a9d3_orig.jpg"}, {:name=>"auto_wc.vim", :summary=>"update total character count of current editing file automatically.", :description=>"For writers.\n\nWrite your document \"WC:[0/5000]\",\nand so,\nleft number that is total char count of current editing file\nwill be updated when you are saving file.\n\nRight number is free number space.\nFor example,\nyou use right number space to write max char count.\n\n"}, {:name=>"zoom.vim", :summary=>"control gui font size with \"+\" or \"-\" keys.", :description=>"Control Vim editor font size with key \"+\", or key \"-\".\nPress \"+\" key, Vim editor gui font size will change bigger.\nAnd, press \"-\" key, Vim editor gui font size will change smaller.\n\nThis plugin is for GUI only.\n\n\nNormal Mode:\n    +                  ... change font size bigger\n    -                  ... change font size smaller\n\nCommand-line Mode:\n    :ZoomIn            ... change font size bigger\n    :ZoomOut           ... change font size smaller\n    :ZoomReset         ... reset font size changes.\n\n"}, {:name=>"zshr.vim", :summary=>"substitute and execute previous command.", :description=>"Substitute previous command string, and execute substituted command.\nThis plugin add \":R\" command to your vim environment.\n\n------------------------------------------------------------------------------\n[command syntax]\n\n:R {old}={new}\n:R {old1}={new1} [{old2}={new2} {old3}={new3} ...]\n\n------------------------------------------------------------------------------\n[command example - 1]\n1. Execute a command.\n\n    :%s/aaabbbccc/xxxyyyzzz/g\n\n\n2. Execute \":R\" command with replacement parameters.\n\n    :R a=m\n\n   (find \"a\" in last command, and replace \"a\" to \"m\".)\n\n\n3. Vim editor execute this command.\n\n    :%s/mmmbbbccc/xxxyyyzzz/g\n\n\n------------------------------------------------------------------------------\n[command example - 2]\n4. You want to use multiple replacement parameters,\n   you execute command this example.\n\n    :R a=m ccc=xyz bb=123\n\n   (find \"a\" in last command, and replace \"a\" to \"m\".\n    find \"ccc\" in last command, and replace \"ccc\" to \"xyz\".\n    find \"bb\" in last command, and replace \"bb\" to \"123\".)\n\n"}, {:name=>"TextFormat", :summary=>"Quickly align and format paragraphs and text areas: left, right, justify, center", :description=>"This plugin provides commands and key mappings to quickly align and format text. Text can be easily reformatted and aligned to either left or right margin or justified to both margins or centered. The text formatting commands provided by this plugin are a bit more automatic and more intelligent than those integrated to Vim. Together they make more powerful command set for formatting text.\n\nManual is included, just type\n\n    :help textformat.txt\n\nDefault keymappings:\n\n    \\al     Left-align and reformat\n    \\ar     Right-align\n    \\aj     Left-right justify and reformat\n    \\ac     Center lines\n\nThe prefix key is actually <Leader> key. It's backlash by default but it is configurable.\n"}, {:name=>"LaTeX-error-filter", :summary=>"Filters latex log file to get errors and warnings", :description=>"The script is a utility that can be used to glean warning/error information from a latex compile. It will format the output into a format that is easy to read by VIM in the quickfix mode. This utility is useful for people who use VIM to edit LaTeX files, and don't use the VIM-Latex suite (the suite has already the quickfix capability). I don't use it because I think it is making things more complicated rather than simplifying it.\n\nAn alternative to using this script is to setup the errorformat variable for latex (see \":help errorformat-latex\"), and use the vimlatex script available on this site too (to avoid the problem of broken numbers, and to help vim recognize filenames). But the messages are not as compact as those produced by this script.\n\nNote 1: The filter needs awk to run.\nNote 2: Even though the script is especially useful for people who don't use vim-latex, it is also useful for those who do -- It makes the messages more meaningful (e.g, 1 or 3, instead of 32 or 54, when there are actually only 3 messages on 54 lines). "}, {:name=>"batch.vim", :summary=>"execute vim script in selected area.", :description=>"Execute vim script in selected area (with Visual Mode).\nPlugin copy selected area text to a temporary file,\nand execute temporary file as vim script file.\n\nThis plugin will be used for\n    testing vim script file,\n    debuging vim script,\n    or loading selected vim editor options,,,,\n\n------------------------------------------------------------------------------\n\n[command format]\n\n:'<,'>Batch\n\n"}, {:name=>"catn.vim", :summary=>"insert formatted numbering text.", :description=>"Insert formatted text with number at selected area.\nYou can select \"text format\", \"starting number\", and \"insert area\".\n\nDefault value of option are\ntext format     : \"%d \"\nstarting number : 1\ninsert area     : current line only\n\n------------------------------------------------------------------------------\n\n[command format]\n\n:'<,'>Catn {text format} {starting number}\n\n:'<,'>Catn [{starting number}]\n\n({text format} ... see \":help printf()\", available format is written there.)\n\n------------------------------------------------------------------------------\n\n[command example]\n\n(Insert number at selected area. 1, 2, 3, ....)\n:'<,'>Catn\n\n(Insert number at selected area. 1000, 1001, 1002, ....)\n:'<,'>Catn 1000\n\n(Insert formatted number text at selected area. 0000500, 0000501, 0000502, ....)\n:'<,'>Catn %08d\\  500\n\n"}, {:name=>"nopaste.vim", :summary=>"Nopaste interface to http://www.rafb.net/ from inside vim", :description=>"This is a simple interface to http://www.rafb.net/ which need vim's python interface as a dependency. Edit a file, then issue the command \n:Paste \nand it will post the whole file on rafb. The link will come in your clipboard(* and +) as default, so you can post it with Ctrl + v or middle mouse button somewhere on IRC, browsers, etc. I also have that map in my ~/.vimrc\nvnoremap <leader>paste y:call Paste('<C-R>\"')<cr><cr>\nwith which you can paste just a snippet from the file. Just select the block/text in VISUAL mode and hit <leader>paste this will copy the text to the site, note <leader> is \\ as default in vim.\n"}, {:name=>"Tumblr", :summary=>"Post to Tumblr", :description=>"Script that allows you to post regular type posts to Tumblr.\n\nBegin a new post by opening a buffer and using the :TumblrNew command, when finished use the :TumblrPost command.\n"}, {:name=>"log.vim--Nakadaira", :summary=>"logging library", :description=>"Usage:\n  \" in .vimrc\n  call log#init('ALL', ['/dev/stdout', '~/.vim/log.txt'])\n\n  \" in script\n  let s:log = log#getLogger(expand('<sfile>:t'))\n\n  function s:func()\n    call s:log.trace('start of func()')\n    if s:log.isDebugEnabled()\n      call s:log.debug('debug information')\n    endif\n    call s:log.trace('end of func()')\n  endfunction\n\n  \" If you want to distribute your script without log.vim, use :silent! or\n  \" exists().\n  silent! let s:log = log#getLogger(expand('<sfile>:t'))\n  function s:func()\n    silent! call s:log.info('aaa')\n    if exists('s:log')\n      call s:log.info('bbb')\n    endif\n  endfunction\n\nReference:\n\n  function log#init(level, targets [, format [, filter]])\n  @param level [String]\n    Log level.  One of 'ALL|TRACE|DEBUG|INFO|WARN|ERROR|FATAL|NONE'.\n    For example, when level is 'WARN', output of log.warn(), log.error() and\n    log.fatal() will appear in log.\n  @param targets [mixed]\n    Output target.  Filename or Function or Dictionary or List of these\n    values.\n    Filename:\n      Log is appended to the file.\n    Function:\n      function Log(str)\n        echo a:str\n      endfunction\n    Dictionary:\n      let Log = {}\n      function Log.__call__(str)\n        echohl Error\n        echo a:str\n        echohl None\n      endfunction\n  @param format [String]\n    Log format.  {expr} is replaced by eval(expr).  For example, {getpid()}\n    is useful to detect session.  Following special variables are available.\n    {level}   log level like DEBUG, INFO, etc...\n    {name}    log name specified by log#getLogger(name)\n    {msg}     log message\n    If this is 0, '', [] or {} (empty(format) is true), default is used.\n    default:  [{level}][{strftime(\"%Y-%m-%d %H:%M:%S\")}][{name}] {msg}\n  @param filter [mixed]\n    Pattern (String) or Function or Dictionary to filter log session.\n    Filter is applied to name that specified by log#getLogger(name).  If\n    result is false, logging session do not output any text.\n    Pattern (String):\n      name =~ Pattern\n    Function:\n      function Filter(name)\n        return a:name == 'mylib'\n      endfunction\n    Dictionary:\n      let Filter = {}\n      let Filter.filter = ['alib', 'blib', 'clib']\n      function Filter.__call__(name)\n        return index(self.filter, a:name) != -1\n      endfunction\n  @return void\n\n  function log#getLogger(name)\n  @param name [String] Log name\n  @return Logger object"}, {:name=>"chlordane.vim", :summary=>"GHOST IN THE SHELL like colorscheme", :description=>"GHOST IN THE SHELL like colorscheme for the GUI.\nIt is inspired by the matrix colorscheme(vimscript#669).\n\nScreenshot at http://jstap.web.fc2.com/chlordane.html"}, {:name=>"pathogen.vim", :summary=>"Easy manipulation of 'runtimepath', 'path', 'tags', etc", :description=>"Pathogen is a simple library for manipulating comma delimited path options. Add this to your vimrc:\n\n  call pathogen#runtime_append_all_bundles()\n\nAfter adding this, you can take any plugin, unzip/untar/svn-checkout/git-clone it to its own private directory in .vim/bundle, and it will be added to the runtime path.  This makes it easy to remove or update each plugin individually.\n\nThe full list of functions includes:\n\npathogen#split: convert a comma delimited option to an array\npathogen#join: convert an array to a comma delimited option\npathogen#glob: wrapper around glob() that returns an array\npathogen#runtime_prepend_subdirectories: prepend all subdirectories of a path to the runtimepath and append all after subsubdirectories\npathogen#runtime_append_all_bundles: for each directory in the runtime path, look for a \"bundle\" entry and add the subdirectories of it to the path, as with runtime_prepend_subdirectories\n\nhttp://github.com/tpope/vim-pathogen"}, {:name=>"session.vim", :summary=>"A simple, automatic, no-nonsense, out of your way session manager", :description=>"session.vim is the easy way to do vim sessions.  A session is automatically started or restored whenever you open vim with a single file, or no files.\n\nTo delete a session, type :Sdelete, and the session will be deleted upon exiting vim.\n\nTo prevent a session from starting, use the g:session_blacklist variable:\nlet g:session_blacklist = ['\\.swp$','\\.tmp$','^\\.']\n\nThere is also a g:session_whitelist variable for easy refinement.\nlet g:session_whitelist = ['^\\.vimrc$']"}, {:name=>"backup.vim", :summary=>"Puts backups where they belong: out of the way", :description=>"backup.vim stores backups out of the way in the ~/.vim_plugins/vim_backup directory.\n\nEach file is split into it&#039s file name and path, the md5sum of the path is used to create a unique subfolder in ~/.vim_plugins/vim_backup, and the files are backed up into that folder.  This ensures that your files are backed up, that your directories are not cluttered with *~ files, and that each file that you edit has it&#039s own unique backup.\n"}, {:name=>"metarw", :summary=>"a framework to read/write a fake:path", :description=>"*metarw* is a Vim plugin to provide a framework to read/write a file-like\nargument of which name is written in URI-like notation such as\n\"git:master:src/ui.c\".  metarw also provides content browser like |netrw|'s\none for some sorts of argumetns if they are given to :edit or other command.\n\n\nRequirements:\n- Vim 7.1.299 or later\n\nOptionals:\n- |metarw-scheme-script| such as |metarw-git| (vimscript#2336)\n- |ku| (vimscript#2337) and |ku-metarw| (vimscript#2344)\n\nDemo:\n- http://www.screencast.com/t/fCc8cFaiQj\n\nLatest version:\nhttp://github.com/kana/vim-metarw\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/metarw.html"}, {:name=>"metarw-git", :summary=>"metarw scheme: git", :description=>"*metarw-git* is a scheme for |metarw| to read or to browse various objects in\na git repository with fakepaths like \"git:HEAD~3:src/ui.c\".\n\nNote that this scheme just supports reading from an object.  Writing to an\nobject is not supported.\n\n\nRequirements:\n- Vim 7.1.299 or later\n- metarw 0.0.0 or later (vimscript#2335)\n\nLatest version:\nhttp://github.com/kana/vim-metarw-git\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/metarw-git.html"}, {:name=>"ku", :summary=>"An interface for anything", :description=>"*ku* is a Vim plugin to provide new interface for Vim.  With ku,\n\n- You can choose many items from various sources such as buffers, files and\n  others.  This selection is very efficient, because ku supports it by\n  automatic and elegant completion, so that you don't have to type much.\n\n- Then you can take an action on the selected item.  Various actions are\n  available for each kind of items.\n\n\nTo start a selection, execute |:Ku| or |ku#start()|.  |the-ku-window| will be\nopened at the top of the current tabpage.  The window is to select items and\nto do an action on a selected item.  In the window,\n\n- |ins-completion-menu| is automatically appeared to show available items.\n  As you input a character, the menu is updated to show more proper items for\n  the given input.\n\n  If you want to know how ku interpret what you input,\n  see |ku-pattern|, |ku-auto-component-completion| and |ku-prefix-expansion|.\n\n- If you find what you want in the menu, select it with <C-n> or <C-p>.  If\n  the first item in the menu is what you want, you don't have to select it.\n\n- Then you can take an action on the selected item with <Enter> or <Tab>.\n\n  - With <Enter>, ku executes the default action for the item.\n\n  - With <Tab>, ku shows a list of available actions for the item.  Each\n    action is labeled with a key to execute it.  If you type one of the keys,\n    the corresponding action will be executed.\n\n  <Enter> and <Tab> are just the default key bindings.  You can customize\n  them, of course.  See |ku-key-mappings| and |ku#default_key_mappings()|.\n  If you want to customize key bindings in a list of actions by <Tab>, see\n  |ku#custom_key()|, |ku-default-key-table| and |ku-key-table|.\n\n- If you don't want to take any action and stop to select, type <C-c> in any\n  mode.  The window is closed and the current tabpage is restored to the\n  previous state.\n\n\nIn ku, a kind of items is called \"source\".  Some sources are available by\ndefault.  See |ku-default-sources| for the details.  You can write your own\nsources if you want to select and to take action on something which is not\nprovided by the default sources.  To add sources, put the corresponding\nscripts into \"autoload/ku/\" directories in 'runtimepath'.  As scripts are put,\nku recognizes them automatically, so that you don't have to reboot Vim.  See\nalsso |ku-sources| for the details.\n\n\nScreenshots:\nhttp://www.flickr.com/photos/whileimautomaton/tags/vim-ku/\n\nDemonstration movie:\nhttp://www.screencast.com/t/P6nJkJ0DE\n\n\nRequirements:\n- Vim 7.1.299 or later\n\nSources and related scripts:\nhttp://www.vim.org/scripts/script_search_results.php?keywords=ku\n\nLatest version:\nhttp://github.com/kana/vim-ku\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/ku.html"}, {:name=>"bundle", :summary=>"Load a series of files easily", :description=>"*bundle* is a Vim plugin to easily load a series of files which is called as\n\"bundle\".  For example, if you often edit files foo.c, bar.txt and baz.vim in\nproject named \"qux\", you can use \"|:LoadBundle| qux\" to load the files.\n\nThe correspondence of bundle names and lists of files can be configured by\nstatic way (|g:bundle_dictionary|) and dynamic way (|bundle-events|).\n\n\nRequirements:\n- Vim 7.1.299 or later\n\nLatest version:\nhttp://github.com/kana/vim-bundle\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/bundle.html"}, {:name=>"simple-pairs", :summary=>"TextMate-like insert closing pair for brackets, parens, quotes (needs python)", :description=>"This is my first attempt at writing a vim script. It needs python support, and it's tested only in >7.1, but it should work in earlier versions as well. Drop me a line if it does and I'll update this description!\n\nIt will insert a closing pair when you type a quote (single and double), bracket, parenthesis, brace. It will also move over when you type the closing pair, and it will delete empty pairs when you hit backspace. This broadly mimics TextMate's behaviour for pairs of characters.\n\nIts main difference from all the others is that it is it not aggressive at all! It will try to do so only when it makes sense, that is:\n\n* at the end of the line\n* when the next character is one of: <space>,.: \n\nThat, simple as it looks, means that it will do its job when you're writing new code, but it will not mess up when you are editing code. \n\nIt's heavily biased towards Python, so if anybody has other use cases please send me an email!"}, {:name=>"molokai", :summary=>"A port of the monokai scheme for TextMate", :description=>"Molokai is a Vim port of the monokai theme for TextMate originally created by Wimer Hazenberg.\n\nBy default, it has a dark gray background based on the version created by Hamish Stuart Macpherson for the E editor.\n\nYou can see screenshots of the scheme at http://www.winterdom.com/weblog/2008/08/12/MolokaiForVim.aspx\n\n256-Color terminals are also supported, though there are some differences with the Gui version. Only the dark gray background style is supported on terminal vim at this time.\n"}, {:name=>"postmail.vim", :summary=>"mail message posting plugin. (python required)", :description=>"Send 'current editing buffer', or 'selected area of text' with email.\nMost simplest usage is to execute :Mail command.\n\nSupported Mail Auth type is\n    - basic SMTP password Auth\n    - POP before STMP Auth\n    - Outbound Port 25 Blocking\n    - GMail\n\nThis plugin needs '+python', '+iconv', '+multi_byte' and\nPython is installed, and $PATH is appropriately set.\n\nUSAGE\nYou can use :Mail command to send email.\nSee also postmail-example .\n\n:[range]Mail\n        send mail message.\n        if [range] is selected, send selected text.\n        if [range] is not selected, send current buffer.\n\n:[range]Mail {to_mailaddress}\n        send mail message to {to_mailaddress}.\n        if [range] is selected, send selected text.\n        if [range] is not selected, send current buffer.\n\n:[range]Mail {to_mailaddress1} {to_mailaddress2}, {to_mailaddress3}\n        send mail message to {to_mailaddress1}, {to_mailaddress2}, and\n        {to_mailaddress2}.\n        if [range] is selected, send selected text.\n        if [range] is not selected, send current buffer.\n\nCOMMAND USAGE EXAMPLE\n:Mail\n        send mail message.\n        message is current buffer text.\n\n:Mail mail@nanasi.jp\n        send current buffer text to 'mail@nanasi.jp' address.\n\n:6,20Mail mail@nanasi.jp\n        send from line 6 to line 20 text to 'mail@nanasi.jp' address.\n"}, {:name=>"dictview.vim", :summary=>"print the contents of a variable", :description=>"Print the contents of a variable (or any expression), useful for lists and dictionaries.\n\nAdds the command\n    :DictView {expr}\n\nExamples:\n:let mylist = [\"foo\",\"bar\"]\n:DictView mylist\n* [\n    'foo'\n    'bar'\n* ]\n:DictView {1: mylist}\n* {\n*   1:\n    [\n      'foo'\n      'bar'\n    ]\n* }\n\nCustom variables:\ng:dictview_shiftwidth (default 2)\ng:dictview_maxlevel (default 10)\n\nGlobal functions:\nfunc! DictView_PrintList(value, ...)\nfunc! DictView_Print(value)\n\n2009 Nov 21 also check out: PrettyPrint  vimscript #2860, it is much better"}, {:name=>"ku-bundle", :summary=>"ku source: bundle", :description=>"*ku-bundle* is a source for |ku| to deal with bundles for a Vim plugin\n|bundle|.  You can choose one from many bundles and do some action to it.\n\n\nRequirements:\n- Vim 7.1 or later\n- |bundle| 0.0.2 or later (vimscript#2338)\n- |ku| 0.2.0 or later (vimscript#2337)\n\nLatest version:\nhttp://github.com/kana/vim-ku-bundle\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/ku-bundle.html"}, {:name=>"ku-metarw", :summary=>"ku source: metarw", :description=>"*ku-metarw* is a source for |ku| to deal with |metarw-fakepath|.  You can\nchoose one from many fakepaths and do some action to it.\n\n\nRequirements:\n- Vim 7.1 or later\n- |ku| 0.2.2 or later (vimscript#2337)\n- |metarw| 0.0.1 or later (vimscript#2335)\n- |metarw-scheme-script| such as |metarw-git| (vimscript#2336)\n\nLatest version:\nhttp://github.com/kana/vim-ku-metarw\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/ku-metarw.html"}, {:name=>"Vimchant", :summary=>"Fast on-the-fly spell-checker based on Enchant", :description=>"Vim 7.0 introduced excellent spell-checking features which made external spell-checker plugins pretty much obsolete. Unfortunately not all languages can be supported through Vim\u0092s dictionary format. Either the language is morphologically too complex or better custom solutions exist already for some languages\u0097solutions which are not compatible with Vim\u0092s spelling checker. Finnish, for example, is a language which doesn\u0092t currently benefit from Vim\u0092s spell-checking features.\n\nThis plugin (Vimchant) provides a simple but fast on-the-fly spelling checker which uses Enchant as its back-end program. Enchant is a spell-checker library and utility included in modern GNU/Linux systems. Enchant itself is only a front-end for many different spell-checkers, including Voikko, Zemberek, Hunspell, Hspell, Uspell, Myspell, Aspell and Ispell. All the spell-checkers and languages which can be supported through Enchant are available to Vim through this plugin.\n\nManual for Vimchant is included, just type\n\n    :help vimchant.txt\n\nThe most interesting commands are \\ss (spell-checker on/off) and \\sl (change language). The default interval period before running the spell-check is rather long (4 seconds). To make the spell-checker respond faster (1 second, for example) add the following line to your .vimrc file:\n\n    set updatetime=1000\n\nSee the manual for more info. See also the Enchant homepage:\n\n    http://www.abisource.com/projects/enchant/\n"}, {:name=>"bufmru.vim", :summary=>"switch to a most recently used buffer quickly", :description=>"Switch between MRU buffers from the current session. Like CTRL-^, but reach\nmore buffers (and maintain only one global list, not one list per window).\n\nUsage:\n\n  Press  <Space>  to show the most recently used buffer and enter Bufmru mode.\n\n  In Bufmru mode:\n  Press  f  or  b  (forward/backward) to reach more MRU buffers.\n  Press  e  or  <Enter>  to accept the current choice.\n  Press  q  or  <Esc>  to quit the mode and to go back to the start buffer\n  Press  y  to copy a file name\n\nConfiguration:\n  :let g:bufmru_switchkey = \"<Space>\"\n      (checked once) Key to enter Bufmru mode.\n\n  :let g:bufmru_confclose = 0\n      (always) Use :confirm (1) when abandoning a modified buffer.\n      Otherwise (0, default) you'll get an error message, unless 'hidden'\n      is set.\n\n  :let g:bufmru_bnrs = []\n      (always) The internal stack of buffer numbers.  Normally, you'll\n      leave this alone, but you can manually add or remove buffer numbers\n      or initialize the list.  Don't worry about wrong numbers.\n\n  :let g:bufmru_read_nummarks = 0\n      (once) Put the number mark '0 ... '9 buffers in g:bufmru_bnrs.  This adds\n      buffers to the buffer list!\n\nwildmenu version only:\n\n  g:bufmru_wildmenu   (dictionary, initially not defined)\n      (always) Instance of autoload/wildmenu.vim to show buffer names in a\n      wildmenu-like list.  If not defined, bufmru tries to load the autoload\n      script.  If that fails the value becomes empty ({}) -- and bufmru\n      quite unusable.\n\n  :let g:bufmru_wilditems = \"bufnr,shortpath\"\n      (always) How to display entries in the \"wildmenu\":\n      \"bufnr\"         with prepended buffer number\n      \"shortpath\"     with pathshorten() applied to the bufname()\n      There is no error message for wrong items.\n\nsplashbufs version only:\n\n  :let g:bufmru_lazy_filetype = 0\n      (checked always) If 1, do lazy filetype detection when going through\n      the buffers with f and b.  Not used if 'hidden' is set.\n\n\nspecial buffer: 'buftype' not empty or 'previewwindow' set\n\nRelated:\nhttp://vim.wikia.com/wiki/Easier_buffer_switching\nhttp://groups.google.com/group/vim_use/msg/adb4f35772ecbcbe\n\nAnother MRU buffers script!  But it requires Ruby (that I haven't installed):\nLustyJuggler Vimscript #2050\n\nCreated after a mailing list request from a Visual Studio user ;-)\n"}, {:name=>"trinity.vim", :summary=>"Build the trinity of srcexpl, taglist, NERD_tree to be a good IDE", :description=>"[Introduction]\n\nThis small plugin is just an IDE manager to control the three plugins open and close, and build them into a great IDE which works like the Source Insignt.\nI will just update trinity.vim file only since V1.3 and above.\n\n[Features]\n\n1\\ Automatic Display of Declarations in the Context Window on the bottom in the (G)VIM window using the script named 'Source Explorer(srcexpl.vim)' :\nhttp://www.vim.org/scripts/script.php?script_id=2179\n\n2\\ Symbol Windows For Each File on the left in the (G)VIM window (G)VIM using the script named 'taglist.vim':\nhttp://www.vim.org/scripts/script.php?script_id=273\n\n3\\ Quick Access to All Files on the right in the (G)VIM window using the script named 'The NERD tree(NERD_tree.vim)':\nhttp://www.vim.org/scripts/script.php?script_id=1658\n\n4\\ You can change various options of each plugin in trinity.vim according to you request.\n\n[Declaration]\n\nIn order to build such an IDE that implement the main functions(function list, definition and context explorer, file brower), I had modified the source code of 'NERD_tree.zip 2.13.0'. You would note the tag named 'CHE Wenlong delete/add  for trinity.vim' in the NERD_tree.vim.\n"}, {:name=>"Chimp", :summary=>"Chimp talks to external interpreters from inside Vim", :description=>"Chimp uses screen to talk to external interpreters. The basic screen driver\nis language agnostic and is intended to be used as backend for filetype\nplugins, which comprise the intelligence of the system.\n\nAn example filetype plugin for Clojure is included. There are several ways\nto extract code and send it to a running Clojure in a screen.\n\nThe coupling is very loose on purpose! Eg. one can send from several Vims\nto the same screen. However this leads to a certain fragileness. The Clojure\nplugin takes care of automatically switching namespaces for the different\nfiles being edited. However, nothing prevents the user from interacting\nwith the REPL directly messing up the namespace sync between Chimp in Vim\nand Clojure.\n\nChimp should also work on Windows with Cygwin.\n\nYou will also need the VimClojure filetype plugin for\nthe Clojure frontend.\n\nhttp://kotka.de/projects/clojure/vimclojure.html\n\nSimilar scripts:\n - VILisp (vimscript #221)\n - Limp (vimscript #2219)\n - http://technotales.wordpress.com/2007/10/03/like-slime-for-vim/\n\n"}, {:name=>"indentgenie.vim", :summary=>"Indent script for the genie (vala flavour) language", :description=>"A vim indent script for the genie programming language. http://live.gnome.org/Genie \n\nThe script is derived from the python indent script."}, {:name=>"rootwater.vim", :summary=>"A dark color scheme", :description=>"A dark color scheme for the GUI.\n\nScreenshot at http://jstap.web.fc2.com/rootwater.html\n"}, {:name=>"RltvNmbr.vim", :summary=>"Display relative line numbers", :description=>"The RltvNmbr plugin uses the signs feature to display the line numbering relative to the current line.  A number of commands take [count] arguments for which this is helpful.\n\n:RltvNmbr\n    This command turns relative line numbering on.\n\n:RltvNmbr!\n    This command turns relative line numbering off.\n\nCAVEAT:\n    Your vim must have the signs feature compiled in!  This typically means that your vim has been configured and compiled to be \"huge\":\n        configure --with-features=huge\n        compile\n        install\n\n\tTo check this:\n\t\t:echo has(\"signs\")\n\tshould show a \"1\".  Alternatively, look at the output of  :version  and see if you have +signs listed.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#RLTVNMBR)\n"}, {:name=>"stlrefvim", :summary=>"A C++ Standard Template Library reference manual", :description=>"This plugin aims to provide a reference manual for the C++ standard template library (STL).  Based heavily off of the well-regarded SGI-STL documentation, this script puts the power of this documentation into your vim workflow.  Lookups can easily be done with user-configurable key mappings.\n\nFor example, in the expression:\n    std::for_each(start, end, PrintFunc)\nplace the cursor over for_each and type <Leader>tr to go to documentation for this function.  Type <Leader>te to go to an example that uses this function.\n\nMany thanks must go to Christian Habermann's for his crefvim plugin (http://www.vim.org/scripts/script.php?script_id=614) that formed the basis of and was the inspiration for this plugin."}, {:name=>"FastGrep", :summary=>"FastGrep for a string using native linux commands in Ruby on Rails projects.", :description=>"Usage:\n  Define a hotkey to call FastGrep() function to search for a string in your project like this:\n\n  map <F12> :call FastGrep()<CR>\n\n  The search result will come back in a window that can be customized to be vertical or horizontal\n  using this flag:\n\n  let g:fgVertSplit = 1\n\n  If is defined, the result window will be vertical, horizontal if not.\n\n  In the result window can use 'e' and 'r' keys to cycle between results lines and 'q' to close the window.\n  If put the cursor over the filename in the result window, can use gF to go to the file and line number.\n\n  This script used some code burrowed from Specky! [1] and a TextMate bundle [2]\n\n  Happy coding !\n\n  [1] http://vim.sourceforge.net/scripts/script.php?script_id=2286\n  [2] http://gist.github.com/4291/\n"}, {:name=>"textobj-lastpat", :summary=>"Text objects for the last searched pattern", :description=>"*textobj-lastpat* is a Vim plugin to provide text objects to select an area\n which is matched to |last-pattern|.\n\n\nRequirements:\n- Vim 7.2 or later\n- |textobj-user| 0.3.5 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-lastpat\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-lastpat.html"}, {:name=>"Superior-Haskell-Interaction-Mode-SHIM", :summary=>"GHCi integration for VIM", :description=>"Superior Haskell Interaction Mode (SHIM) integrates GHCi with VIM, allowing you to quickly load files or individual lines into the interpreter, interact with the interpreter like you would in a normal terminal, and quickly pinpoint error locations. It was inspired by Emacs' Haskell mode.\n\nThe script uses Ruby to spawn a GHCi process and communicate with it through pipes, reading from VIM and writing the output into a dedicated GHCi window. It is integrated with quickfix to allow you to maintain a list of errors and move among them.\n\nRequires VIM with Ruby support, Ruby with pty extension (Unix), and GHCi."}, {:name=>"Nekthuth", :summary=>"Connection with a Lisp", :description=>"Nekthuth is simultaneously a plugin for vim and library for Comon Lisp that allows developers to interact with a running interpreter from inside their editor.\n\nFeatures include:\n\n    * Form evaluation\n    * Tab completion\n    * Quick macroexpansion\n    * Extension to syntax highlighting\n    * Basic Debugger\n    * On the fly hyperspec rendering inside the vim window\n    * Extensible plugin architecture\n    * Connect to a remote lisp or boot one from inside vim\n    * Find and open source location of symbols under cursor\n\nCurrent limitations include:\n\n    * Requires SBCL with threads\n    * Requires vim > 7.0 with +python\n    * Requires asdf\n\nSee http://nekthuth.com for more information"}, {:name=>"tags-for-std-cpp-STL-streams-...", :summary=>"Modified libstdc++ headers for use with ctags", :description=>"This is a slightly modified version of the libstdc++ headers which can be used with ctags. STL, streams and other standard cpp stuff can now be completed with omnicpp complete:\nhttp://www.vim.org/scripts/script.php?script_id=1520"}, {:name=>"clue", :summary=>"a colour scheme with a blue background", :description=>"Clue is a redesign of the \"blue\" colour scheme -- hence the name ;) -- with many colours changed and several new syntax categories added.\nThe cterm version has a black background.\nScreenshots of Vim in vimdiff mode, with gui and cterm:\nhttp://www.math.bas.bg/bantchev/vim/gvimdiff-clue.png\nhttp://www.math.bas.bg/bantchev/vim/vimdiff-clue.png\n"}, {:name=>"louver.vim", :summary=>"A light background color scheme", :description=>"A light background color scheme for the GUI. .\nScreenshot at http://jstap.web.fc2.com/louver.html"}, {:name=>"diff_navigator", :summary=>"Helps navigation in unified diffs", :description=>"Simple script that helps navigation in unified diffs (patches).\n\nTogether with external utility filterdiff (part of patchutils) it provides DiffAnnotate command that tags all hunks with their number and name of the changed file.\n\nDiffShowHunk command displays annotation of the current hunk (useful when inside a big hunk).\n\nDiffNextFile and DiffPrevFile command can be used to quickly skip to next/previous changed file.\n\nDiffNextHunk and DiffPrevHunk quickly skips to next/previous hunk.\n\nSince the default (,),{ and } mappings are not much useful in diffs, the plugin remaps these in the following way:\n}  => DiffNextFile\n{  => DiffPrevFile\n)  => DiffNextHunk\n(  => DiffPrevHunk\n\n"}, {:name=>"simplewhite.vim", :summary=>"A light background color scheme", :description=>"This is a color scheme for light background for the GUI.\nIt is based on the louver color scheme(vimscript#2360).\n\nScreenshot at http://jstap.web.fc2.com/simplewhite.html"}, {:name=>"vimxmms2", :summary=>"An XMMS2 client for Vim.", :description=>"This script will not be updated anymore. Please see vimscript #2369.\n\nRequire:\n    vim with +python support.\n    xmms2 with the python interface.\n\nUsage:\n    Using <leader>x to toogle the play window.\n\n    Also the following keyshorts are avaiable. Most key maps start with\n    c(Contrl) or l(playList).\n\n      <space>    Play the song under cursor.\n      <cr>       Same as <space>.\n      cs         Stop.\n      cp         Pause.\n      cr         Select a repeat mode, repeat one track or all.\n      -          Decrease volume.\n      =          Increase volume.\n      r          Refresh window manually.\n      la         Add a file or directory to playlist.\n      lc         Clear the playlist.\n      ld         Remove the song under cursor from current playlist.\n      lf         Shuffer the list.\n      ll         Load a playlist.\n      ln         Create a new playlist, and save current contents to it.\n      ls         Sort the playlist, by artist, title or filename.\n\nCustomize:\n    Specify the id3's encoding. For example:\n        let g:xmms_id3_encoding=\"gbk\"\n\n    Specify the play window's width:\n        let g:xmms_window_width=30\n\n    Specify the playlist format, default is \"%artist - %title\", %album is also avaiable.\n        let g:xmms_playlist_format=\"%title\"\n\nTips:\n    When adding music file or directory, you can use Ctrl-D to show all \n    candidates. Also, you can use arrow keys to navigate the historys.\n\nLeave your comments in following link, or just mail me. :)\nhttp://danran.72pines.com/vimxmms2\n"}, {:name=>"autoincludex.vim", :summary=>"This script allows automatically insert statements like #include or import", :description=>"Place the cursor on the type you need to include. If it is your class,\nfor example MyClass, enter in Normal mode:\n       :call AutoIncludeCC()\nThe string #include \"myclass.h\" will be inserted in file.\nFor type from library, for example STL, enter:\n       :call AutoIncludeLib(\"stl\")\n At first time you well be prompted to enter the correct header. You\nshould enter full text for include statement, i.e. with < >. In next\ntime this header will be inserted automatically even after reloading of   vim.\nYou can also place the special marks into file. For you types this is\nthe \"project headers\". In this case #include will be inserted after\nline with this text:\n   //project headers\n   #include \"myclass.h\"\nFor type from the libraries this text is the \"libname headers\", where libname\nis name of library:\n   //stl headers\n   #include <vector>\n\n   //wx headers\n   #include <wx/menu.h>\n\n Of course, you can create map for calling of this function:\nmap ;; :call AutoIncludeCC()<cr>\nmap ;;w :call AutoIncludeLib(\"wx\")<cr>"}, {:name=>"ScopeVerilog", :summary=>"allows you to know the curent scope from the info.txt file created by veratags", :description=>"Veratags is a cool utility(available at http://webpages.charter.net/jeffkoehler/jeffkoehler_com/tools/veratags/veratags.html)\nIt can create an ascii hierachy of ur design and creates tag for the verilog files as well.\nUse this script(hierarchy.vim) to know the current scope (based on where ur cursor is) in the \ninfo.txt file\n\nYou may want set ur status line to\nset statusline=%{Verilog_get_hierarchy()}\n\nPlease update the file as per ur convenience, I am new to vim programming so might have done a buggy coding"}, {:name=>"vcsc.py", :summary=>"Convert a GUI only vim colorscheme file to a gui/256xterm compatible version", :description=>"There are may existing colorscheme is GUI only.\n\nThis script can convert a GUI only colorscheme to a 256xterm compatible version."}, {:name=>"darkbone.vim", :summary=>"This is a dark background color scheme for the GUI.", :description=>"This is a dark background color scheme for the GUI.\nScreenshot at http://jstap.web.fc2.com/darkbone.html"}, {:name=>"CCTree", :summary=>"C Call-Tree Explorer - Source-code analysis, real-time display of code flow", :description=>"Project details/Screenshots:\n                 http://sites.google.com/site/vimcctree/\n \n  Description:\n       Plugin generates call-trees for any function or macro in real-time inside  Vim. (Functionality similar to that seen in other IDEs like\nKscope, Source navigator, Eclipse)\n\n  Requirements: 1) Cscope          2) Vim 7.xx \n\n \n "}, {:name=>"vimmp", :summary=>"An XMMS2 and MPD client for Vim", :description=>"This plugin is based on vimscript #2363, and add MPD support.\n\nRequirements\n============\n    Vim with +python support.\n    FOR XMMS2: XMMS2 with the Python interface.\n    FOR MPD: MPD and python-mpd.\n\nUsage\n=====\n    Using <leader>x to toggle the play window.\n\n    Also the following key shorts are available. Most key maps start with\n    c(Control) or l(playList).\n\n      <space>    Play the song under cursor.\n      <cr>       Same as <space>.\n      cs         Stop.\n      cp         Pause.\n      cr         Select a repeat mode.\n                 There are three modes for XMMS2: one, all, off.\n                 For MPD, there are two: off, all. So there command just toggle.\n      -          Decrease volume.\n      =          Increase volume.\n      r          Refresh window manually.\n      la         Add a file or directory to playlist.\n      lc         Clear the playlist.\n      ld         Remove the song under cursor from current playlist.\n      lf         Shuffer the list.\n      ll         Load a playlist.\n      ln         Create a new playlist, and save current contents to it.\n      ls         Sort the playlist, by artist, title or filename.\n                 Only available for XMMS2.\n\n\nCustomization\n=============\n    Specify the id3's encoding. This option is only for XMMS2, i.e\n        let g:xmms_id3_encoding=\"gbk\"\n\n    Specify the play window's width:\n        let g:xmms_window_width=30\n\n    Specify the playlist format, default is \"%artist - %title\", %album\n    is also avaiable.\n        let g:xmms_playlist_format=\"%title\"\n\n\nNotes for MPD users\n===================\n    - There's only one playlist which MPD uses to play, users can only load\n      other playlists' contents to that list. So the playlist name displayed\n      in the status line is just the playlist's version number.\n    - Currently, this plugin only support localhost mpd server.\n\n\nTips\n====\n    When adding music file or directory, you can use Ctrl-D to show all \n    candidates. Also, you can use arrow keys to navigate the history.\n\nLeave your comments in following link, or just mail me.\nhttp://danran.72pines.com/vimmp"}, {:name=>"Duplicated", :summary=>"Sorry. Duplicated. Please remove.", :description=>"Duplicated"}, {:name=>"sqloracle.vim", :summary=>"color codes SQL keywords from Oracle 11g", :description=>"An earlier version of this script (valid for Oracle keywords from Oracle 8i) is included in the Vim 7.2 release. This version has been upgraded to include Oracle functions, and keywords from Oracle 11g."}, {:name=>"automatic-for-Verilog", :summary=>"Automatic generator for Verilog HDL", :description=>"Support Automatic functions like Emacs for Verilog HDL\nFeature list:\n1) Auto Argument (the same as Emacs)\n2) Auto Instance (power than Emacs)\n3) Auto Define Signals\n4) Auto unit delay \"<=\" to \"<= #`FFD\"\n5) Auto always block\n6) Auto header\n7) Auto comment\nMy blog: http://blog.sina.com.cn/arrowroothover\nMy E-mail: arrowroothover@hotmail.com"}, {:name=>"ClosePairs", :summary=>"Auto closes pairs of characters", :description=>"Autocloses pairs of chararacters as seen in TextMate or Scribes.\n\nI couldn't find a script that worked as I liked, so here's my very simple attempt :)\n\nPairs are (), [], {}, '', \"\"\n\nFeatures\n=======\n\n1) in INSERT mode, typing the closing character let the cursor \"escape\" the pair \n\ne.g.: (cursor represented with a pipe, on the left what you type, on the right what you get)\n\" -> \"|\"\nsome text -> \"some text|\"\n\" -> \"some text\"|\n\n* useful when typing an open/close bracket pair as in foo()\n\n* works with already existing text\ne.g.:\n(move cursor) -> \"this is a string|\"\n\" -> \"this is a string\"|\n\n\n2) \"atomic\" deletion of a pair\n()|<bs> -> |\n(|)<bs> -> |\n* won't work with <del> (use <del> when you don't want the closing bracket/quote)\n\n3) experimental support for visual mode\n\nselect abc \ntype <leader>\" -> \"abc\"\n\n\ntested with vim 7; might work with earlier versions, though\nhope you'll like it, let me know!\nyou can comment here: http://www.flatpress.org/home/?entry=entry080910-135006\n\n\nUPDATE: since you made me notice, here's the other scripts dealing with the same problem\n\n* vimscript #1849 - AutoClose by Karl Guertin\n* vimscript #2009 - AutoClose by Thiago Alvares\n\nthey all differs for little, the first is a bit simpler; the latter is probably the most configurable.\n\nPick your favorite :)\n\n\n"}, {:name=>"dokuwiki.vim", :summary=>"A simple syntax file for DokuWiki.", :description=>"A simple syntax file for DokuWiki.\n\nThis consists completely of slight modifications to wikipedia.vim, vimscript #1787, so you'll need to get\nthat script too, or not much will happen.\n\nI'm no expert, so do let me know if you find any mistakes. My email is in both files. Thanks. :)\n\nThis file also provides a few mappings for doing those pesky headers.\n\n,,h1 through ,,h6 will give you a header. This should allow you to press \",,h1\" in INSERT mode, then type your header, then press <C-j> to \njump to the next line. \n\n(If <C-j> doesn't jump for you, let me know; this may require latex-suite\n(http://vim-latex.sf.net), but that would be a hefty thing to download just for this.)\n\nYou can also use ,,hd to demote a header, and ,,hp to promote it."}, {:name=>"if_v8", :summary=>"V8 interface to Vim", :description=>"V8 is Google's open source JavaScript engine.\n\nRequirements:\n  linux or windows.\n  Vim executable file with some exported symbol that if_v8 requires.\n    On linux:\n      Compile with gcc's -rdynamic option.\n    On windows (msvc):\n      Use vim_export.def and add linker flag \"/DEF:vim_export.def\".\n      nmake -f Make_mvc.mak linkdebug=/DEF:vim_export.def\n\nUsage:\n  :source /path/to/if_v8/init.vim\n  :V8 print('hello, world')\n  => hello, world\n  :V8 3 + 4\n  => 7\n  :V8 vim.execute('version')\n  => ... version message\n  :V8 var tw = vim.eval('&tw')\n  :V8 tw\n  => 78\n  :V8 vim.let('&tw', '40')\n  :echo &tw\n  => 40\n  :V8 load('foo.js')"}, {:name=>"vim-addon-sql", :summary=>"alias sensitive SQL completion (MySQL, Postgresql, SQLite)", :description=>"KISS implementation of SQL completion for Vim:\n\nFirst you have to connect to a database. Examples:\n\n  MySQL:\n  call tovl#ft#sql#Connect('mysql',{'host':'127.0.0.1','database':'DATABASE', 'user':'USER', 'password' : 'PASSWORT'})\n\n  SQLITE:\n  call tovl#ft#sql#Connect('mysql',{'database':'filepath'})\n\n  Postgresql (see code)\n\nA connection only initializes b:db_conn which is a Vim object providing\nfunctions for querying the database.\n\nSetup mappings by calling this function:\n  call vim_addon_sql#UI()\n\nIn non visual mode the query start / end is determined by either ; or empty lines.\nIn visual mode the selection will be executed\n\nExecution is done by command line tools (psql, mysql, sqlite(3))\nThe result of those queries is parsed by Vim to fill alias aware completion.\n\nExample:\n\n1)\n  SELECT *, CURSOR FROM table1, table2\n  Now CURSOR will only contain fields found in either table1 or table2\n\n2)\n  SELECT *, a.CURSOR FROM table1 as a, table2\n  Now the completion will only contain fields of table1\n\nExpect some minor bugs - however this it works quite nicely in practise.\n\ncamel case like completion is also supported. eg d_u -> db_users\n\nIf you have any questions contact me.\n"}, {:name=>"htmlspecialchars", :summary=>"Convert special characters to HTML entities.", :description=>"This plugin provides commands to convert special characters of HTML to entities.\n\nUsage:\n\t:[range]HTMLSpecialChars\n\t:[range]HTMLSpecialCharsDecode\n\nManual:\n\t:help htmlspecialchars.txt\n"}, {:name=>"mlint.vim--Ibbotson", :summary=>"Runs Matlab's mlint program and highlights the code appropriately", :description=>"This is a filetype plugin for Matlab .m files. It runs Matlab's mlint function at appropriate times, parses the output and highlights the code in a similar fashion to the Matlab editor.\n\nThe script maps <LocalLeader>l to its RunLint() function, so you can run the mlint tool at other times other than the automatic ones.\n\nAlso <LocalLeader>m gives the messages from mlint on the status line for the line that the cursor is on.\n\nOn windows the automatic updating can get quite annoying because it pops up a command window everytime it runs mlint, even if only briefly. I would like to call mlint using \"start /b mlint\" which should prevent this, however there is a bug in Vim which stops me being able to do this. So as a workaround you can optionally disable running mlint on hover by putting this line in your .vimrc:\nlet mlint_hover = 0"}, {:name=>"win9xblueback.vim", :summary=>"Windows9x blue back screen like colorscheme", :description=>"Windows9x blue back screen like colorscheme for the GUI.\nScreenshot at http://jstap.web.fc2.com/win9xblueback.html"}, {:name=>"Verilog-constructs-plugin", :summary=>"Plugin to insert Verilog Constructs", :description=>"This plugin is for those guys who forget the syntax of different constructs in Verilog.This plugin will add a new menu to GVIM. The sub menus when clicked insert appropriate templates.\nThis is developed only for GVIM and has key mappings to use with plain VIM. Also its written with windows in mind, so unix user excuse me.\n"}, {:name=>"RemoveIfdef", :summary=>"remove ifdef macro of C/C++ program", :description=>"Description:\n  This script finds #ifdef/#else/#endif keyword, and removes undefined area.\n  And display the defined macros in your source code after executing.\n\n  When we analysis the source code written by another person, a lot of\n  #ifdef are troublesome very much.  This script helps you to analysis it by\n  removing undefined area.\n  Please see the example. It helps you to understand this script work.\n\nInstructions:\n  1 - Put in your plugin directory, and open the C/C++ file\n  2 - Type :RemoveIfdef\n  3 - This script finds ifdef macro and remove undefined area\n  If you want to add the macros, add them to this script' argument.\n\nFeature:\n  - support the comment (// and /* ... */)\n  - decide macro keyword from file extension (support C/C++ and Verilog)\n\nArgument:\n  <None> : Remove undefined area by the macro defined in just source file.\n  [-n]   : Print code with original source code line. This argument should\n           be specified at first.\n           ex) #define AAA\n               #ifdef AAA\n               // comment\n               #endif\n                 ===>\n               1 #define AAA\n               3 // comment\n  String : Add these strings into macro list\n\nNote:\n 1. This script changes the C/C++ source code directly. If you want to\n    cancel, please undo (u).\n 2. If some macro are defined in the include files, this script doesn't\n    work exactly.\n\nExamples:\n  - example source code\n      #define AAA\n      // comment 1\n      #ifdef BBB\n      #ifdef AAA\n      // comment 2\n      #else // AAA\n      // comment 3\n      #endif // AAA\n      #else // BBB\n      #ifdef AAA\n      // comment 4\n      #else // AAA\n      // comment 5\n      #endif // AAA\n      #endif // BBB\n\n  - Type RemoveIfdef\n      -> // comment 1\n         // comment 4\n\n  - Type RemoveIfdef BBB\n      -> // comment 1\n         // comment 2\n\nKnown Bug:\n - Does not support include\n - There are some bugs about /* ... */ comment analysis"}, {:name=>"Note-Maker", :summary=>"Syntax highlighter for personal notes", :description=>"This syntax file will allow text regions to be coloured differently in case of section/subsection headings, italicize text or make it bold, highlight text regions, and more depending on the structure. For those who make notes in vim, refering to them later will become faster and more efficient.\n\nScreenshots:\nThe plain file:\nhttp://www.cse.iitb.ac.in/~samhita/vim/noteMakerDemoPlain.html\nWith the syntax file:\nhttp://www.cse.iitb.ac.in/~samhita/vim/noteMakerDemo.html"}, {:name=>"winter.vim", :summary=>"VIM with color of light gray", :description=>"The winter.vim is a color sheme file (only for GVIM) which uses a light grey background makes the VIM look like the scenes of winter."}, {:name=>"buf2html.vim", :summary=>"beta** - generate HTML/XHTML+CSS from a Vim buffer", :description=>"This is the next evolution of the script formerly known as \"code2html.vim\" and before that \"2html.vim\" (the latter being still a part of the standard Vim release runtime collection). See http://www.vim.org/scripts/script.php?script_id=330.\n\nThis is considered beta-quality code at this time.\n\nAccomplished goals (so far) for this release include:\n\n  * Let it produce correct output for all option variants including with/out-line-numbering, with/out-using-css, etc.\n\n * Try to create an HTML comment line that records the SHA1 sum for the buffer data input. Could be useful in future scenarios.\n\n * Clean up the markup so that interstitial spaces in code (not being purposely verbose here, I don't know what else to call them right now) between highlighted identifiers is *not* marked up with redundant default bg/fg color specifiers. This is a huge weakness of the original script.\n\n * Create a visible symbolic (and easily understood) markup in the output when the source is a Makefile, to display where each TAB (ascii \\011) was.\n\nLeft to do is more debugging; at least 1 known bug exists in that an occasional character will disappear from the output ;-(. And optimization.  And restoring the functionality that was once working in the script in its previous incarnation as code2html.vim, working out a list of system-installed mono fonts and including those in the CSS style declaration.\n\nThis script was developed to meet the author's needs. It might not meet yours. If you can improve on it without clobbering the author's needs, however, your patches are welcome. In any event, the customary legalese-ish disclaimer about \"FITNESS FOR ANY PURPOSE\" applies.\n\nThe result of running this script on itself can be viewed at http://intrepid.perlmonk.org/apropos.vim/buf2html/current/myself.html\n\nAs always, credit to Bram Moolenaar and David Nečas (Yeti) for the original script and Christian Hujer for his later contribution."}, {:name=>"sqlite_c", :summary=>"SQLite C interface Vim syntax file.", :description=>"This script provides SQLite C/C++ interface syntax highlighting."}, {:name=>"endwise.vim", :summary=>"Wisely add \"end\" in ruby, endfunction/endif/more in vim script, etc", :description=>"This is a simple plugin that helps to end certain structures automatically.  In Ruby, this means adding \"end\" after \"if\", \"do\", \"def\" and several other keywords. In Vim Script, this amounts to appropriately adding \"endfunction\", \"endif\", etc.  There's also VB support (don't ask).\n\nA primary guiding principle in designing this plugin was that an erroneous insertion is never acceptable.  The behavior is only triggered once pressing enter on the end of the line.  When this happens, endwise searches for a matching end structure and only adds one if none is found.\n\nWhile the goal was to make it customizable, this turned out to be a tall order.  Every language has vastly different requirements.  Nonetheless, for those bold enough to attempt it, you can follow the model of the autocmds in the plugin to set the three magic variables governing endwise's behavior."}, {:name=>"cern_root.vim", :summary=>"Basic syntax highlighting for ROOT", :description=>"Basic syntax highlighting for the ROOT Data Analysis Framework\nhttp://root.cern.ch"}, {:name=>"conomode.vim", :summary=>"Vi-style editing for the command line", :description=>"Implements a kind of Normal mode ( \"Cmdline-Normal mode\" ) on top of the Command line.  Purpose is similar to the cmdline-window (q:), but navigation and editing can be done in-place.  Of course the cmdline-window is much more powerful.\n\n- enter with c_<F4>   (press <F4> while in Command-line mode)\n- mode indicator is a colon \":\", moved along with the cursor, hiding the char under it\n- quit to Cmdline-mode with <Esc>, o, O, \":\" or any unmapped key (which then executes or inserts itself), or wait 60 seconds.\n\nFeatures So Far:\n- Motions: h l w b e W B E 0 ^ $ f{char} F{char} ; ,    also in Operator pending mode\n- More Motions: j k\n- Operators: d y c    these write to the unnamed register; c prompts for input()\n- Insert: I i a A     these commands prompt for input()\n- Shortcuts: yy D x X s C dd    yy -> 0y$, D -> d$, x -> dl, X -> dh, s -> cl, C -> c$, dd -> 0d$\n- Simple Changes: r{char} ~\n- Putting: P p      put the unnamed register\n- Repeating: .      repeatable commands: d r c ~ I i a A\n- Macros: q @       q starts[/stops] recording, @ executes, no register involved\n- Mode Switching: <Esc> o O - back to Cmdline, <CR> - execute Cmdline\n- Undo: u U         redo with \"U\" (to keep c_CTRL-R working); undo information survives mode switching; undo is unlimited\n- Count: can be given for most commands\n- Misc: <C-L> - redraw the Cmdline\n\nNotes:\n- the mode indicator may make UTF-8 characters look garbled; press Ctrl-L to redraw the Cmdline\n\nHave fun!"}, {:name=>"pdc.vim", :summary=>"Syntax file for Pandoc ", :description=>"Syntax file for Pandoc, file structure is similar to markdown, but it allows for LaTeX and other features. \n\nIt can read markdown and (subsets of) reStructuredText, HTML, and LaTeX, and it can write markdown, reStructuredText, HTML, LaTeX, ConTeXt, PDF, RTF, DocBook XML, OpenDocument XML, ODT, GNU Texinfo, MediaWiki markup, groff man pages, and S5 HTML slide shows.\n\nSee http://johnmacfarlane.net/pandoc/"}, {:name=>"CSApprox", :summary=>"Make gvim-only colorschemes work transparently in terminal vim", :description=>"CSApprox.vim\n\n============\nDESCRIPTION\n============\n\nIt's hard to find colorschemes for terminal Vim.  Most colorschemes are\nwritten to only support GVim, and don't work at all in terminal Vim.\n\nThis plugin makes GVim-only colorschemes Just Work in terminal Vim, as long\nas the terminal supports 88 or 256 colors - and most do these days.  This\nusually requires no user interaction (but see the help for what to do if\nthings don't Just Work).  After getting this plugin happily installed, any\ntime you use :colorscheme it will do its magic and make the colorscheme Just\nWork.\n\nWhenever you change colorschemes using the :colorscheme command this script\nwill be executed.  It will take the colors that the scheme specified for use\nin the GUI and use an approximation algorithm to try to gracefully degrade\nthem to the closest color available in your terminal.  If you are running in\na GUI or if your terminal doesn't support 88 or 256 colors, no changes are\nmade.  Also, no changes will be made if the colorscheme seems to have been\nhigh color already.\n\nIf for some reason this transparent method isn't suitable to you (for instance\nif your environment can't be configured to meet the |csapprox-requirements|,\nor you need to work in Vim 6), another option is also available: using the\n|:CSApproxSnapshot| command to create a new GUI/88-/256-color terminal\ncolorscheme.  To use this command, a user would generally start GVim, choose a\ncolorscheme that sets up the desired colors, and then use |:CSApproxSnapshot|\nto create a new colorscheme based on those colors that works in high color\nterminals.  This method is more flexible than the transparent mode and works\nin more places, but also requires more user intervention, and makes it harder\nto deal with colorschemes being updated and such.\n\n======\nNOTES\n======\n\nIdeally, this plugin should require absolutely no configuration, but you may\nneed some tweaking to make sure vim realizes that your terminal supports more\nthan 16 colors.  Also, konsole and Eterm users will want to make sure that\nthis plugin realizes that the terminal does not use colors that are exactly\nxterm-compatible; they will want to skim through the help articles\n|csapprox-palettes| and |csapprox-configuration| for a better end result.\n\n==============\nSCREENSHOTS\n==============\n\nSome quick side-by-side screenshots can be found at\nhttp://www.cs.drexel.edu/~mjw452/CSApprox/"}, {:name=>"MPC-syntax", :summary=>"Syntax Highlight for MakeProjectCreator files", :description=>"Syntax Highlight for Makefile, Project, and Workspace Creator (http://www.ociweb.com/products/mpc).\n"}, {:name=>"Django-Projects", :summary=>"Allows you to use django management commands from within vim", :description=>"Author: Gregor Müllegger <gregor@muellegger.de>\nVersion: 0.1.0\n\nDescription:\n  Use the script to run simple django specific tasks. You can run management\n  commands from in vim.\n\nUsage:\n  When you have specified all your django projects you can now tell the script\n  that you want now to work with one of them. Let's expect you want to work\n  with your 'fancyblog' project.\n  \n  At first you have to initalize this project:\n    :DjangoInit fancyblog\n\n  Now you can use all the cool commands to work with your project. Use\n  `:DjangoManage <command>` to execute a command with your manage.py file.\n\n    :DjangoManage syncdb\n\n  Use the `:DjangoTerminalManage <command>` command to execute a manage.py\n  command in an external terminal to free the vim command line for new\n  commands. This can be used to run django's development server from within\n  vim.\n\nConfiguration:\n  There are a few global variables you can change to fit the script your\n  preferences:\n\n  g:django_terminal_program\n    Set this variable to a terminal programm which shall execute the commands\n    in :DjangoTerminalManage. Default is 'xterm -e'.\n\nShortcuts:\n  There are already shortcuts for every builtin command to prevent you from\n  performing too many keystrokes:\n\n    :DjangoAdminindex\n    :DjangoCleanup\n    :DjangoCompileMessages\n    :DjangoCreateCachetable\n    :DjangoCreateSuperuser\n    :DjangoDBShell\n    :DjangoDiffsettings\n    :DjangoDumpdata\n    :DjangoFlush\n    :DjangoHelp command\n    :DjangoInspectDB\n    :DjangoLoaddata\n    :DjangoMakeMessages\n    :DjangoReset appname\n    :DjangoRunfcgi\n    :DjangoRunserver\n    :DjangoShell\n    :DjangoSql\n    :DjangoSqlall\n    :DjangoSqlclear\n    :DjangoSqlcustom\n    :DjangoSqlflush\n    :DjangoSqlindexes\n    :DjangoSqlinitialdata\n    :DjangoSqlreset\n    :DjangoSqlsequencereset\n    :DjangoStartapp newappname\n    :DjangoSyncdb\n    :DjangoTest [appnames]\n    :DjangoTestserver\n    :DjangoValidate\n\n  You can also use the commands from the django-commands-extension app if you\n  have installed it.\n\n    :DjangoCreateapp\n    :DjangoCreatecommand\n    :DjangoCreatejobs\n    :DjangoDescribeform\n    :DjangoDumpscript\n    :DjangoExportemails\n    :DjangoGenerateSecretKey\n    :DjangoGraphmodels\n    :DjangoPasswd\n    :DjangoPrintUserForSession\n    :DjangoResetDB\n    :DjangoRunjob\n    :DjangoRunjobs\n    :DjangoRunprofile\n    :DjangoRunscript\n    :DjangoRunserverPlus\n    :DjangoSetfakepasswords\n    :DjangoShellPlus\n    :DjangoShowurls\n    :DjangoSqldiff"}, {:name=>"QuickTemplate", :summary=>"create new files from existing templates on-the-fly", :description=>"create new files from existing templates on-the-fly"}, {:name=>"darkeclipse.vim", :summary=>"A dark color scheme for the GUI", :description=>"A dark color scheme for the GUI.\nScreenshot at http://jstap.web.fc2.com/darkeclipse.html"}, {:name=>"Fly-Between-Projects", :summary=>"Quick Selection Between projects", :description=>"Unzip both files in plugin directory of VIM, modify \"selfreqfiles.txt\" to meet your need. PRJ1/PRJ2 is menu selection will pop up when F1 or Sft-F1 pressed on key board, Default file name will be opened in respective directory upon selection so dont forget to modify it according to your need, \n(This is first version it does not like if there is more then one space between names)\n\nPRJ1 c:\\PRJ1DIR1 DEFFILEPRJ1.C\nPRJ2 c:\\PRJ1DIR2 DEFFILEPRJ2.C"}, {:name=>"Cutting-and-pasting-txt-file-in-middle", :summary=>"Cut and Paste vertical", :description=>"Some times you want to cut text file from A colomn to B colomn for N number of rows, rather then making a awk/sed secript try this script for vertical copy and paster,\n\n  Move curser where you want to perform rectangle copy press Ctrl-C and move again your curser to place where to you want to copy to buffer Press Ctrl-C again.\n\n  Now you take curser to line where you want to paste it vertically and press Ctrl-Y."}, {:name=>"Fly-Between-Projects-B", :summary=>"Quick Selection Between projects", :description=>"Quickly interchange between different projects,Modify file according to your need selfreqfiles.txt\n\nMenu selection Hl Word <> Def project dir <> Default file to be opend\n(Single space between fields\n\nPRJ1 c:\\PRJ1DIR1 DEFFILEPRJ1.C\nPRJ2 c:\\PRJ1DIR2 DEFFILEPRJ2.C"}, {:name=>"hfile", :summary=>"Boilerplate code for .h files", :description=>"It includes the boiler plate #ifndef/#define code into new .h files. "}, {:name=>"cheat", :summary=>"Yac (Yet Another Cheat)", :description=>"== What's Yac\n Yet Another Cheet (Powered By Ruby)\n== What's the script\n the Syntax Highlight\n== How To Use The Yac\n\n=== To initialize repositories:\n    $ yac init\n=== To get a cheat sheet:\n    $ yac [cheatsheet]\n=== To edit a cheat sheet\n    $ yac edit [cheatsheet]\n=== To add a cheat sheet\n    $ yac add [cheatsheet]\n=== To rm a cheat sheet\n    $ yac rm [cheatsheet]\n=== Search according the sheets name\n    $ yac name [keyword]\n=== Search according the sheets content\n    $ yac content [keyword]\n=== Update repositories\n    $ yac update main  => Update main repository\n    $ yac update private => Update private repository\n    $ yac update => Update All\n=== Help\n    $ yac help\n=== Shell\n    $ yac shell main => Open the main repository's shell\n    $ yac shell => Open the private repository's shell\n=== Documents format\n   Use .ch as the suffix ,At the beginning of the row,plus N = for the N-class title\n   Use '#' at the beginning of a row to comment the line,You can use '\\#' to get '#'\n   Use three @ wrap some words to highlight it,for example: @@\\@ HI @@\\@ (remove the \\) will highlight HI\n=== Set the color of highlight\n   Default use .yacrc under home directory to set,, details, see the example file under the resources directory\n=== Others\n   Add @ before [cheatsheet]/[keyword] will only search the main depot\n   See also the source code to get more sexy ways\n\n== Author: Jinzhu Zhang : http://www.zhangjinzhu.com /  wosmvp (no-spam) gmail (no-spam) com\n\n"}, {:name=>"sqlplsql", :summary=>"Good for sql and pl/sql coding", :description=>"I have been using this vimrc file  for  coding sql/plsql "}, {:name=>"Russian-PLansliterated", :summary=>"Transliterated Russian without breaking normal-mode", :description=>"Check out translit.vim (vimscript #2469), which should be considered as a successor of this plugin.\n\n-------------------------------\n\nThis plug-in allows you to write transliterated Russian (Cyrillic alphabet)\nin insert and replace mode. Other modes are unaffected and just work (which\nmakes it superior to relying on GTK's input methods).\n                                                                                      \nTransliteration is heavily biased towards Polish orthography and phonetics,\neg. \"ч\" is spelled as \"cz\" (not \"ch\"), \"Я\" is \"Ja\", not 'Ya', etc. This is\nwhy it's called PLansliterated :) It's quite trivial to turn this plug-in\ninto english transliteration, CZransliteration, FRansliteration, etc. If\nyou do so for your 'source' language of choice, feel free to post your work\non vim.org or just drop me a line.\n                                                                                      \nUsage:\nTurn transliteration on and off by :RussianOn, :RussianOff or :ToggleRussian\ncommands. You can also use CTRL+q (both in insert and normal mode) for\ntoggling.\n                                                                                      \nMost of characters should be quite intuitive (at least if you're Polish).\nI decided to make both \"e\" and \"je\" represent Cyrillic \"е\".\nUse \"e'\" to get 'э'. \"'\" stands for \"ь\" and \"`\" is for \"ъ\". Prefix with\ntilde to get uppercase variants of твердый and мягкий знак, eg. \"~`\" for \"Ъ\".\n\nIf you need several Latin letters for one uppercase Cyrillic, you can use\nboth all-uppercase, or only the first one capitalised, like \"SZCZ\" or \"Szcz\" for \"Щ\".\n                                                                                      \nSet g:cursor_follows_alphabet to make cursor color change when alphabet is\nswitched.\n                                                                                      \nUse the source when in doubt.\n                                                                                      \nBlablabla:\nHave fun using this plug-in!\nComments are welcome."}, {:name=>"advice", :summary=>"alter the behavior of a command in modular way", :description=>"*advice* is a library for Vim scripts to provide a modular way to alter the\nbehavior of a command.\n\nFor example, if you want to change the default register for the command |C| to\n\"_ (|quote_|), you have to write a new operator then map |C| to execute the\noperator, i.e., redefine the whole command.  But how about if you also want to\nchange |C| in Visual mode to always behave as same as the default |C| in\n|blockwise-visual| mode?  How about if you want to disable one of the altered\nbehaviors afterwards?  Therefore, redefining the whole command is not elegant\nway.\n\nADVICE provides useful API to do such customization.\n\nThe concept of ADVICE is derived from the one of Emacs.  See also:\nhttp://www.gnu.org/software/emacs/elisp/html_node/Advising-Functions.html .\nNote that there are some differences from the one of Emacs, especially: there\nis no activation and ADVICE supports \"usual\" commands only (see\n|advice-Normal-command|).  Because Ex commands and functions cannot be\nsupported only by Vim script.\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-advice"}, {:name=>"stackreg", :summary=>"Vz-like stackable registers", :description=>"*stackreg* is a Vim plugin to provide stackable registers.  If you delete or\nyank a text without specifying a register, the text will be pushed into\na stack.  If you put without specifying a register, a text will be popped from\nthe stack then it will be put.\n\nThe concept of stackable registers is derived from Vz which is an editor for\nMS-DOS and it was widely used in Japan since 1989.\n\nRequirements:\n- Vim 7.2 or later\n- |advice| 0.0.0 or later (vimscript#2402)\n\nLatest version:\nhttp://github.com/kana/vim-stackreg"}, {:name=>"Pit-Configuration", :summary=>"pit configuration library for vim", :description=>"pitconfig.vim can load vim's variables from pit configurations. you can hide secret variables(ex: password) in your vimrc. pitconfig.vim set variable into vim's global scope.\n\nex)\n# vim\n:echo mypassword\nxxxxxx\n:PitAdd mypassword\n:e ~/.vimrc\n\" remove mypassword setting in your vimrc\n:wq!\n\n# vim\n:echo mypassword\nxxxxxx\n\n\n---------------------------------\n:PitReload\n  reload pit config named as g:pitconfig_default\n\n:PitLoad profile\n  load pit config named as 'profile'\n\n:PitShow\n  show current pit config named as g:pitconfig_default\n:PitShow profile\n  show current pit config named as 'profile'\n\n:PitSave\n  save current variables to pit config which named as g:pitconfig_default\n:PitSave profile\n  save current variables to pit config which named as 'profile'\n\n:PitAdd varname\n  add variable to current pit config.\n\n:PitDel varname\n  delete variable from current pit config.\n"}, {:name=>"Robotbattle-Scripting-Language", :summary=>"Syntax highlight for Robotbattle Scripting Language", :description=>"Syntax highlight for Robotbattle Scripting Language"}, {:name=>"Lissard-syntax", :summary=>"Adds Lissard syntax support to Vim.", :description=>"This script adds syntax for Lissard to Vim.\nLissard templating system: http://tweekedideas.com/pages/lissard"}, {:name=>"MatlabFilesEdition", :summary=>"A set of files useful to edit Matlab files (indent, syntax,tags , mlint use...)", :description=>"Contains a set of files useful to edit Matlab files.\n\nIncluded is :\n1) Syntax highlighting\n2) Correct setting to use the matchit.vim script (extension of the % command to match if/end, for/end,... blocks)\n3) Correct indentation\n4) Integration of mlint (Matlab code checker) with the :make command\n5)Tag support\n6) Help file\n\n\n\n1) Syntax highlighting\n\nsyntax/matlab.vim : Updates the matlab.vim syntax file provided in the vim distribution :\n- highlights keywords dealing with exceptions : try / catch / rethrow\n- highlights keywords dealing with class definitions : classdef / properties / methods / events\n- highlights most Matlab functions\n\n2) Correct settings in order to use the matchit.vim script \n\nThe matchit.vim extends the % matching and enables to jump through matching groups such as \"if/end\" or \"swicth/end\" blocks (see :help matchit in vim)\n\nftplugin/matlab.m provides the suitable definition for b:match_words in order to jump between if/end, classdef/end, methods/end, events/end, properties/end, while/end, for/end, switch/end, try/end, function/end blocks\n\n3) Correct indentation\nindent/matlab.vim : Updates the matlab.vim indention file provided in the vim distribution.\nThis script provides a correct indentation for :\n- switch / end, try / catch blocks\n- classdef / methods / properties / events\n- mutli-line (lines with line continuation operator (...))\n\nThis script has been tested with the Matlab R2008a release on many files and the result of indentation compared to the one provided by the Matlab Editor (with 'indent all functions' option set)\n\nNOTE : to work correctly, this script need the matchit.vim (vimscript#39) to be installed.\n\n4) Integration of mlint (Matlab code checker) with the :make command\n\ncompiler/mlint.m provides the settings to use mlint (Matlab code ckecker) and puts the messages reported in the quickfix buffer.\n\nWhenever you want to check your code, just type :make and then :copen and vim opens a quickfix buffer which enables to jump to errors (using :cn, :cp or Enter to jump to the error under the cursor : see :help quickfix in vim)\n\n5)Tag support\nThe .ctags file (in the matlab.tar.gz) defines the Matlab language so that the exuberant ctags (http://ctags.sourceforge.net ) can construct the tag file : you can now jump to tags (using CTRL-] (or CTRL-$ if using Windows) and go back again (CTRL-T)\nSee also :help tags in vim.\n\n\nThese scipts have been tested using gvim 7.2 and Matlab R2008a on Windows.\n\n\n\n"}, {:name=>"Refactor-Color-Scheme", :summary=>"Refactor Color Scheme", :description=>"A simple colorscheme made with the help of http://yukihiro.nakadaira.googlepages.com/vim-color.html\nand based on the color scheme used in the snippet code of http://refactormycode.com/\n\nEnjoy!"}, {:name=>"sql_iabbr-2", :summary=>"convert SQL keywords uppercase automatically. ", :description=>"With this ftplugin you can type \"create table foo (foo_id int);\" and get \"CREATE TABLE foo (foo_id INT);\".  It is based on both sql.vim and the output from postgresql's \\dT command while in psql.  That makes it a tad bit tailored to postgresql, but it will work with any SQL compliant dbms. \n\nI probably won't upload every update I make immediately so the most current version may be found on github.\nhttp://github.com/xenoterracide/sql_iabbr/tree/master\ngit://github.com/xenoterracide/sql_iabbr.git\n\nearlier versions of this plugin are here http://www.vim.org/scripts/script.php?script_id=305 I am unable to contact Michael Brailsford so have forked the script with my changes. Changes have currently amounted to adding reserved words that weren't present."}, {:name=>"ku-args", :summary=>"ku source: args", :description=>"*ku-args* is a source for |ku| to deal with |argument-list|.  You can choose\none from many files in the argument list and do some action on it.\n\n\nRequirements:\n- Vim 7.2 or later\n- |ku| 0.2.0 or later (vimscript#2337)\n\nLatest version:\nhttp://github.com/kana/vim-ku-args\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/ku-args.html"}, {:name=>"Yow", :summary=>"Random Zippy The Pinhead quotes.  A port of Emacs' M-x yow.", :description=>"A port of the M-x yow feature in Emacs.  Entering the command :Yow earns you a random Zippy The Pinhead quote.\n\nThe quotes are stored in the file \"yow.lines\", which i borrowed from Emacs.\n\nDefining your own quotes is possible by changing yow.lines.  The format is explained in the yow.lines file."}, {:name=>"lastchange", :summary=>"Auto write last change time", :description=>"example:\n    before script run:\n        /*\n         *       Filename: example.h\n         *           Create: 2008-8-8, 00:00:00\n         * Last Change: \n         */\n     after script run:\n        /*\n         *       Filename: example.h\n         *           Create: 2008-8-8, 00:00:00\n         * Last Change: 2008-8-8, 11:11:11\n         */\n\ng:lastChangeName: default is 'Last Change:'\n    script will search this and put now time behind this.\n\ng:lastChangeSearchStart: default is 1\n    search range.\ng:lastChangeSearchEnd: default is 5\n    search range.\n\ng:lastChangeAutoWrite: default is 0 (false)\n    if this is true(1),script will run when you are saving and file is matching of g:lastChangeAutoWriteFile.\n\ng:lastChangeAutoWriteFile: default is '*.c,*.C,*.cpp,*.cxx,*.h,*.hpp,*.hxx,*.java,*.py'"}, {:name=>"Miranda-syntax-highlighting", :summary=>"Miranda syntax highlighting", :description=>"This file is very beta, if there any mistakes, welcome to point out."}, {:name=>"Tango2", :summary=>"A Tango based colour theme for Vim (ported from gedit)", :description=>"This is a colour scheme based on the tango colour palette. \n\nA screenshot can be found at\n   http://www.cse.iitm.ac.in/~spranesh/tango2/vim.html\n\n"}, {:name=>"textobj-diff", :summary=>"Text objects for ouputs of diff(1)", :description=>"*textobj-diff* is a Vim plugin to provide text objects for outputs of diff(1).\nCurrently it supports the following formats:\n- diff --context\n- diff --unified\n- git diff\n\n\nRequirements:\n- Vim 7.2 or later\n- |textobj-user| 0.3.7 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-diff\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-diff.html"}, {:name=>"jQuery", :summary=>"Syntax file for jQuery", :description=>"jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development. jQuery is designed to change the way that you write JavaScript. See http://jquery.com/ for more details.\n\nThe syntax file for Vim add some colorations for jQuery keywords (empty clone hasClass hide show animate ...) and for CSS selectors (:empty :hidden :selected :first ...)."}, {:name=>"Merb-and-Datamapper", :summary=>"Syntax files for Merb and Datamapper", :description=>"This is a set of vim plugins for Merb, including Datamapper, jQuery and features.\nCurrently, it's mostly composed of syntax files for Vim coloration.\n\nAdditional links\n\n * The syntax file for HAML can be found here: http://www.vim.org/scripts/script.php?script_id=1773\n * If you prefer Rspec stories to cucumber feature, you can use the vim-story plugin: http://github.com/agile/vim-story/tree\n * Thanks to Tim Pope for its incredible Rails.vim: http://rails.vim.tpope.net/\n\nIf you want to follow this plugin, you can do it on http://github.com/nono/merb.vim/tree/master."}, {:name=>"Format-Helper", :summary=>"format functions: count doc-infor, add & del list and block, etc.", :description=>"    This script provides some format functions, such as, document information statistics, list addition and deletion, text block addition and deletion, head line and foot line addition, matched parenthesis auto-completion and omni-completion enhancement. Both this functions can be used for plain text, or process comment for programming file.\n\n\nMAINPAGE\n=========\n\n    http://franksun.blogbus.com/logs/30678478.html\n\n    Most of these functionss are illustrated by some screenshots in above page.\n\n\nFUNCTIONS OUTLINE\n==================\n\n1. Doc-info statistics\n----------------------------\n\n    A command is provided to calculate doc-info, such as, number of characters (both with space and no-space), words, and lines (both empty and nonempty) within your selected area.\n\n        ++++++++++++++++++++\n        +      :[range]Statistics      +\n        ++++++++++++++++++++\n\n* Detail:\n\n    [range] - same usage as in command line, such as, '%' (or \"0,$\") means whole file, '.' means current line, etc. If range field is empty, then it counts current line's information by default.\n\n* NOTE: \n\n    (1) It can handle wide (2 or 3 bytes) character languages (for instance, Chinese, Japanese, Korean, etc.). If &encoding=='utf-8', width of wide character is set to 3, otherwise 2.\n    (2) As my tests show, precision of this function is better than Win-Word's \"word count\" tool, which only identifies space as word-delimiter, meanwhile, this script takes all non-word characters ('\\W') into account. Unfortunately, it is not as efficient as win-word when handles large files (to handle a file with 30,000 lines, win-word costs about 3.5 seconds, and this script costs about 9 seconds).\n\n2. Number list addition and deletion\n-------------------------------------------------\n\n    This is a cute function:\n\n    (1) You can set the format of item head to any style as you wish, such as, (1), [1], {1}, 1., -1-, etc. And them can also be deleted by this script.\n    (2) It will acquire the head of the last item in previous number list, and make the first index of current list continue with the previous list's last index.\n\n    Two command are provided:\n\n        ++++++++++++++++++++++++++++++++\n        +      :[range]AddNumberList {format}      +\n        +      :[range]DelNumberList {format}       +\n        ++++++++++++++++++++++++++++++++\n\n* Detail:\n\n    [range] - same usage as Statistics.\n    {format} - includes three segments: a presegment, a number or a question mark ('?'), and a postsegment. You can set presegment and postsegment to any style you like. If a number is located in between presegment and postsegment, then the first index of number list is set to the number. Otherwise, if a qusetion mark is located there, script will automatically acquire the last index of previous number list and continue with it.\n\n* NOTE:\n\n    (1) If a question mark is neighboring with numbers in a style, the index will be continued with previous list.\n\n* Control parameters: some global variables to control format function\n\n    g:format_list_ceil (default 0): empty lines from above content to the first line of list.\n    g:format_list_floor (default 0): empty lines form the last line of list to below content.\n    g:format_list_indent (default 0): indent spaces from beginning of current line to the item head.\n    g:format_list_max_scope (default 100): max lines to search the last index of previous number list from assigned line number.\n\n* Example:\n\n    Here are selected lines:\n\n#line\n          ##############\n    1    #   this is line1    #\n    2    #   this is line2    #\n          #   ......                  #\n   10   #   this is line10  #\n          ##############\n\nIf you input a command:\n\n    :1,5 AddNumberList (1)\n\nthey will be changed to:\n\n#line\n         ################\n    1   #   (1) this is line1   #\n         #    ......                     #\n    5   #   (5) this is line2   #\n    6   #   this is line6         #\n         #    ......                     #\n   10  #   this is line10      #\n         ################\n\nIf you want to continue this list across 3 lines, add line 9 and line 10 to the number list, you have two approaches--first one, you can assign the index of new head manually, for instance, you've already remembered the last index of previous number list was '5', then you should input:\n\n    :9,10 AddNumberList (6)\n\nthe other one is to call script to automatically acquire a continuous index, here, you should use question mark '?':\n\n    :9,10 AddNumberList (?)\n\nboth of these two approaches will change file to below:\n\n#line\n         ################\n    1   #   (1) this is line1    #\n         #    ......                      #\n    5   #   (5) this is line2    #\n    6   #   this is line6          #\n    7   #   this is line7          #\n    8   #   this is line8          #\n    9   #   (6) this is line9    #\n   10  #   (7) this is line10  #\n         #################\n\nIf you want to cancel this number list, just input a command:\n\n    :1,10 DelNumberList (?)\n\n3. Auto-fit alignation\n---------------------------\n\n    Vim provide three command to align line, :left, :center and :right, but these command cannot align line to correct position. It is caused by some factors, such as, different size of users' screen, different size of gvim's window, and the most important factor--the 'textwidth' is equal to 80 by default. \n    Here provide three new commands that auto-fit different size of screen or window, and handle alignations correctly.\n\n        ++++++++++++++++++\n        +      :[range]Left           +\n        +      :[range]Center      +\n        +      :[range]Right         +\n        ++++++++++++++++++\n\n4. Enumerate list addition and deletion\n-----------------------------------------------------\n\n    Same usage as :AddNumberList and :DelNumberList, but I think these commands will be more useful than number list, as you can set comments for any programming language, means, set the head style to comment leader.\n\n        ++++++++++++++++++++++++++++++++\n        +      :[range]AddEnumerateList {style}      +\n        +      :[range]DelEnumerateList {style}       +\n        ++++++++++++++++++++++++++++++++\n\n* NOTE: \n\n    (1) This fucntion can be used to add or delete comments for any programming languages\n\n* Control parameters: some global variables to control format function\n\n    g:format_list_ceil (default 0): empty lines from above content to the first line of list.\n    g:format_list_floor (default 0): empty lines form the last line of list to below content.\n    g:format_list_indent (default 0): indent spaces from beginning of current line to the item head.\n \n* Example:\n\n    If you want to comment lines from line 19 to line 82 in a C++ file, just input:\n    \n    :19,82 AddEnumerateList //\n\ninput below command to cancel this enumerate list:\n\n    :19,82 DelEnumerateList //\n\n5. Text block addition and deletion\n-----------------------------------------------\n\n    Two commands are provided to add text block with selected lines and delete this block.\n\n        +++++++++++++++++++++++++++++++\n        +      :[range]AddTextBlock {symbol}      +\n        +      :[range]DelTextBlock {symbol}        +\n        +++++++++++++++++++++++++++++++\n\n* Detail:\n\n    [range] - same usage as Statistics.\n    {symbol} - script will use this character to construct broader of boundary.\n\n* NOTE: \n\n    (1) This fucntion can be commbined with enumerate list to add or delete comment for any programming language.\n\n* Control parameters: some global variables to control format function\n\n    g:format_block_ceil (default 0): empty lines from above content to the boundary of block.\n    g:format_block_floor (default 0): empty lines form the boundary of block to below content.\n    g:format_block_indent (default 0): indent spaces from beginning of current line to left boundary of block.\n    g:format_block_internal_ceil (default 0): empty lines form ceiling boundary to the first line of block contents.\n    g:format_block_internal_floor (default 0):  empty line form the last line of block contents to floor boundary.\n\n* Example:\n\n    Here are lines to add in text block:\n\n####################\n#      (above contents)      #\n#                                         #\n#      block contents          #\n#                                         #\n#      (below contents)       #\n####################\n\nIf you input a command (all parameters by default values):\n\n    :'<,'> AddTextBlock *\n\nthen we have:\n\n#########################\n#      (above contents)                 #\n#                                                    #\n#      **************************       #\n#      *      block contents      *      #\n#      **************************       #\n#                                                    #\n#      (below contents)                  #\n#########################\n\nif you input:\n\n    :'<,'> DelTextBlock *\n\nwe have:\n\n####################\n#      (above contents)      #\n#                                         #\n#                                         #\n#      block contents          #\n#                                         #\n#                                         #\n#      (below contents)       #\n####################\n\n6. Auto-complete matched pair parenthesis\n------------------------------------------------------------\n\n    Here provides a function to auto-complete match parenthesis in your insert mode. It completes matched pairs of (), [], {}, and <>, and immediately move cursor leftwards to the middle of pairs. If you input anti-parenthesis, it will erase the extra one.\n    \n7. Headline and footline addition\n--------------------------------------------\n\n    Do you see previous line? Yeah, it was made by command \":footlilne-\". It will draw head line or foot line whose length is equal to current line.\n\n\n        ++++++++++++++++++++++++++++++++\n        +      :[line number] HeadLine {symbol}      +\n        +      :[line number] FootLine {symbol}        +\n        ++++++++++++++++++++++++++++++++\n\n* Detail:\n\n    {symbol} - head line or foot line are made with this character.\n\n8. Enhance completion function\n-------------------------------------------\n    \n    Here provides a function to binding completion with <Tab> key. When you hit <Tab> in the insert mode, it will complete your content by your omni-function if you set your own omni-function, otherwise, the nearest known words or keywords of the dictionary you set (control by option 'dictionary') will be completed.\n\n\nUPGRADE\n=========\n\nBy default, GetLatestVimScripts plugin is included in Vim installation package, whose version is higher than v7. So you can use it to auto-download the newest package. Add below line into file \"GetLatestVimScripts.dat\":\n\n                           2418 1 format-helper\n\nand use this command \":GetLatestVimScripts\" to upgrade it.\n\n\n********************\n*      NOTICE      *\n********************\n\n      When you want to hack this script, please make sure that the option 'Tlist_Show_Menu' is closed (set its value as 0) if \"Taglist\" plugin was installed in your Vim. Otherwise, it will popup an annoyed message \"E792: Empty menu name\"."}, {:name=>"quickrun", :summary=>"run a command and show its result quickly", :description=>"http://github.com/ujihisa/quickrun/\nrun a command and show its result quickly\n"}, {:name=>"gadgetxml.vim", :summary=>"opensocial gadget xml syntax", :description=>"Hightlights the contents of <Content type=\"html\"> as HTML."}, {:name=>"PySmell", :summary=>"A Python omnicompletion utility", :description=>"PySmell is an alternative omnicompletion library for Python.\n\nIt has two parts: The Python library that does the analyzing, and the Vim script that calls into the library. \n\nIt works by analyzing your codebase once, saving information in a TAGS file, and using that to provide context-aware completions. \n\nThere is more documentation in the README and in pysmell.vim\n\nThe project is hosted at http://code.google.com/p/pysmell\nThe code repo is at http://github.com/orestis/pysmell\nFollow news at http://orestis.gr"}, {:name=>"Wordnet.vim", :summary=>"wordnet.vim", :description=>"\" wordnet.vim\n\" By Tim Harper (http://tim.theenchanter.com/)\n\"\n\" OVERVIEW:\n\" Easily look up the definition of the word under your cursor via wordnet\n\" (http://wordnet.princeton.edu/). Definition is shown in a new region, with\n\" syntax highlighting for easier reading.\n\"\n\" INSTRUCTIONS:\n\" 1) Configure your wordnet path, if it's in a non-standard path (in your\n\" vimrc)\n\" let g:wordnet_path = \"/usr/local/WordNet-3.0/bin/\"\n\"\n\" 2) highlight or put your cursor over a word, and:\n\" <Leader>wnd - Define the word\n\" <Leader>wnb - Launch the wordnet browser for the word.\n\n"}, {:name=>"Gist.vim", :summary=>"vimscript for gist", :description=>"This is vimscript for gist (http://gist.github.com)\n\nUsage:\n\n  :Gist\n    post whole text to gist.\n\n  :'<,'>Gist\n    post selected text to gist.\n\n  :Gist -p\n    post whole text to gist with private.\n    if you got empty gist list, try :Gist --abandon \n\n  :Gist -a\n    post whole text to gist with anonymous.\n\n  :Gist -m\n    post multi buffer to gist.\n\n  :Gist -e\n    edit the gist. (shoud be work on gist buffer)\n    you can update the gist with :w command on gist buffer.\n\n  :Gist -e foo.js\n    edit the gist with name 'foo.js'. (shoud be work on gist buffer)\n\n  :Gist -d\n    delete the gist. (should be work on gist buffer)\n    password authentication is needed.\n\n  :Gist -f\n    fork the gist. (should be work on gist buffer)\n    password authentication is needed.\n\n  :Gist XXXXX\n    get gist XXXXX.\n\n  :Gist -c XXXXX.\n    get gist XXXXX and put to clipboard.\n\n  :Gist -l\n    list gists from mine.\n\n  :Gist -la\n    list gists from all.\n\nTips:\n  if set g:gist_clip_command, gist.vim will copy the gist code\n    with option '-c'.\n\n    # mac\n    let g:gist_clip_command = 'pbcopy'\n\n    # linux\n    let g:gist_clip_command = 'xclip -selection clipboard'\n\n    # others(cygwin?)\n    let g:gist_clip_command = 'putclip'\n\n  if you want to detect filetype from filename...\n\n    let g:gist_detect_filetype = 1\n\n  if you want to open browser after the post...\n\n    let g:gist_open_browser_after_post = 1\n\n  if you want to change the browser...\n\n    let g:gist_browser_command = 'w3m %URL%'\n\n      or\n\n    let g:gist_browser_command = 'opera %URL% &'\n\n    on windows, should work with your setting.\n\nRequire:\n  curl command (http://curl.haxx.se/)\n  and if you want to use profile of git, it require git command.\n"}, {:name=>"Transmit-FTP", :summary=>"Integrates Transmit FTP (Mac) with Vim", :description=>"This script allows you to upload the current file via Transmit directly from Vim. For it to work, you need to be working on a file that's tied to a Transmit connection, and this connection must have \"DockSend\" enabled.\n\nThe default key combination is Control + U to upload the active file.\n\nSource is at http://github.com/tmallen/transmit-vim, but for the most part I'll be quick to push updates to this page.\n\nProject Integration\n------------------------\nTake a look at proj.vim, which includes a \"docksend\" option that uploads files immediately on save: http://www.vim.org/scripts/script.php?script_id=2719"}, {:name=>"arpeggio", :summary=>"Key mappings for simultaneously pressed keys", :description=>"*arpeggio* is a Vim plugin to define another type of |key-mapping| called\n*arpeggio-key-mapping* -- it consists of 2 or more keys ({lhs}) and it will be\nexpanded to another key sequence ({rhs}) whenever all keys in {lhs} are\nsimultaneously pressed.  For example:\n\n\tArpeggio inoremap jk  <Esc>\n\t\" OR\n\tcall arpeggio#map('i', '', 0, 'jk', '<Esc>')\n\nWith the above definition, you can input <Esc> in Insert mode by pressing \"j\"\nand \"k\" simultaneously, while you can move the cursor by pressing \"j\" or \"k\"\nsolely.\n\nThe concept of this plugin is derived from Emacs' key-chord.el (*1), but there\nare the following differences:\n\n- Number of keys to be simultaneously pressed is unlimited.\n\n- Custom delay for each key is supported (see |g:arpeggio_timeoutlens|).\n  This is a generalization of space-chord.el (*2).\n\n(*1) http://www.emacswiki.org/emacs/key-chord.el\n(*2) http://www.emacswiki.org/emacs/space-chord.el\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-arpeggio\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/arpeggio.html"}, {:name=>"nour.vim", :summary=>"a set of highlights that extend dw_green for a better look", :description=>"I basically copy and pasted dw_green into the top of this colorscheme and added some custom highlights. Screenshot while it's still up can be seen at http://foo.quran.com/vim.png"}, {:name=>"code_complete-new-update", :summary=>"function parameter complete, code snippets, and much more. ", :description=>"see the origin script here:vimscript #1764\nand there is a screenshot: http://files.myopera.com/mbbill/files/code_complete.gif\n\nInstall:          1.  Put code_complete.vim and my_snippets.template\n                       to plugin directory.\n                     2.  Use the command below to create tags file\n                       including signature field.\n                       ctags -R --c-kinds=+p --fields=+S .\n\n Usage:\n                   hotkey:\n\n                       \"<A-d>\" (default value of g:CodeCompl_Hotkey)\n                       we DON'T use <tab>, because it comflict with\n                       superstab.vim, you will quickly find Alt-S\n                       will be a good choice.  Do all the jobs with\n                       this key, see example:\n                       press <A-d> after function name and (\n                           foo ( <A-d>\n                       becomes:\n                           foo ( `<first param>`,`<second param>` )\n                       press <A-D> after code template\n                           if <A-d>\n                       becomes:\n                           if( `<...>` )\n                           {\n                               `<...>`\n                           }\n\n\n                   variables:\n\n                       g:CodeCompl_Hotkey\n                           the key used to complete function\n                           parameters and key words. after you press\n                           ths key AFTER you input the complete-word,\n                           the word will be spreaded. you can see the\n                           paragraph above for detail features.\n\n                       g:CodeCompl_RegionStart g:CodeCompl_RegionEnd\n                           region start and stop you can change them\n                           as you like.  but you must be careful,\n                           because we use them to detemin marks in\n                           your template files(not complete file), so\n                           if you change it, maybe you must\n                           substitute all marks in your template\n                           files. after you change them, maybe you\n                           should update your template file, you can\n                           use this command:\n                           :UpdateTemplate<CR>\n\n                       g:CodeCompl_Template_Forechar\n                           you can use template file with\n                           template-forechar, you can create a file\n                           named 'complete-word.filetype',\n                           and drop it in\n                           g:CodeCompl_Template_Folder(default, it's\n                           'templates' in your runtimepath, e.g.\n                           D:\\Vim\\vimfiles\\templates in windows, or\n                           /root/.vim/templates in linux/unix.\n                           after you create file, you can input\n                           forechar + complete-word to include the\n                           whole file. e.g. '#stdc' to include stdc.c\n                           if your current filetype is 'c'.\n\n                       g:CodeCompl_Template_Folder\n                           see paragraph above. the folder default is\n                           'templates'.\n\n                       g:CodeCompl_Complete_File\n                           file name of users defined snippets.  now\n                           it named 'my_snippets.template', use this\n                           postfix to prevent Vim load it\n                           automatically\n\n                       g:CodeCompl_ClearWhenUpdate\n                           see the Option section\n\n                       g:CodeCompl_SaveListInBuffer\n                            Save complete list and template file list only in buffer\n\n\n                   global helper functions:\n                       \n                       MakeRegion\n                           same as g:CodeCompl_RegionStart . 'your\n                           text' . g:CodeCompl_RegionEnd, but input a\n                           little easily, but there are other helper\n                           function and variables in your complete\n\n                           file(defaults is my_snippets.template in\n                           your plugin folder)\n\n                   default complete-words:\n                           see \"my_snippets.template\" file.\n"}, {:name=>"LineCommenter", :summary=>"Toggle Comment state of line.(C/C++/Java/perl/python/ruby/awk/sh/104 languages)", :description=>"Toggle Comment state of line.(C/C++/Java/perl/python/ruby/awk/sh/104 languages)\n\n<Esc>cc     Toggle comment state of the current line\n<Esc>ncc   Toggle n straight lines.\n\nSupported file type:    Over 104 languages\n\n   //:        C, C++, java, javascript, etc.\n   #:        awk, makefile, perl, python, ruby, sed, sh, etc.\n   \":         vim\n   ':         asp, basic, vbscript\n   ;:         asm, ini, etc.\n   rem :  bat\n   --:       sql, etc.\n   %:      matlab, tex, etc.\n...\n"}, {:name=>"autocorrect.vim", :summary=>"Correct common typos and misspellings as you type", :description=>"Looking through the examples in Vim, there are examples of correcting typos and misspellings like:\n\niabbrev teh the\niabbrev het the\n...\n\nHowever, it is very time-consuming to create this list by hand.  You also have to enter the correct capitalization, which is a pain.  ('teh->the' is not equal to 'Teh->The')\n\nIt seems silly for everyone to create their own autocorrect file, so hopefully we can work together to make a sweet list.  I found a nice list from Wikipedia and cleaned it up a bit as a basis, and incorporated the typo fixes from Vim Cream.  I also added some words that I commonly misspelled or mistyped, and have taken additional contributions from users of the script.\n\nI'm sure there are some mistakes, or common mistakes that aren't in here yet, so if you find any, please contact me and I will gladly change things.  There are some additional details or thoughts as well as a shortcut to a word-processing mode at http://22ideastreet.com/blog/2008/11/06/vim-word-processing.\n\nI find this script invaluable when using Mozex to edit forms online (blog posts, web mail, etc.)\n\nThere is a GitHub repository that you can contribute to at http://github.com/panozzaj/vim-autocorrect/tree/master"}, {:name=>"literal_tango.vim", :summary=>"A Tango-based colorscheme with good contrast, yet easy on the eyes", :description=>"A color scheme with good contrast, yet easy on the eyes.\nLooks the same in the GUI as it does on a 16 color terminal.\nUses the Tango color palette (http://tango.freedesktop.org).\n\nhttp://img134.imageshack.us/img134/9471/literaltango.png\n\nTerminal users:\nIntended for display on a black (#000000) background with a text color\nof #d3d7cf. Also make sure your terminal is using the Tango color \npalette. GNOME Terminal uses it by default. Linux console users, see\nhttp://search.cpan.org/perldoc?conpalette\nAlso make sure that background=dark in vim."}, {:name=>"commentToggle", :summary=>"Yet another commenting script. Toggles comments on a per line basis.", :description=>"A little script for toggling commenting on a per line basis:\n\u0096 toggling means that commenting is turned on and off with one shortcut (\"\\;\" by default), and\n\u0096 per line basis means that it only uses single line comments (greater flexibility).\n\nIn theory, should work for all filetypes; in practice it probably won't. As of version 0.1, definitions are included for 56 languages, and for all the others, it attempts to guess the comment symbol."}, {:name=>"corporation", :summary=>"A dark grey, yellow and blue theme that doesn't hurt the eyes.", :description=>"A dark grey, yellow, blue and a little orange scheme that is easy on the eyes and quite readable imho.\n\nBased on julievonderropp's corporation available on kuler.adobe.com.\n\nI have a very strong feeling it reminds of the colours of some logo, but I can't remember which. I have the impression it had the head of an eagle in it but I'm not sure. If anybody knows what I'm thinking about, pleaeaease drop me a line!"}, {:name=>"W3AF-script-syntax-file", :summary=>"Script syntax file for  w3af (Web Application Attack and Audit Framework)", :description=>"Script syntax file for  w3af (Web Application Attack and Audit Framework)\nhttp://w3af.sourceforge.net/"}, {:name=>"Side-C", :summary=>"a simple IDE for C/C++", :description=>"Side-C is a small plug-in implementing basic IDE functionality for developing one-file C or C++ programs.  It automates the following actions.\n\n* Finding the program file among several open (so that to know what to compile or what and where to run).\n\n* Building a program from its source.  The error message ('quickfix') window is being shown or hidden as needed.\n\n* Running a program from wherever it resides.  Building it first if necessary.\n\n* Running a program with redirecting its standard input, output, or both.\n\n* Opening a browser for the directory of the currently edited file.\n\n* Running an o.s. command shell in the directory of the currently edited file.\n\nThe plug-in is designed and tested to work on Linux and MS DOS/MS Windows, using gcc on both (DJGPP in the case of MS Windows).  It should work on other Unix systems as well.  With small changes, it should be possible to tailor it to other operating systems and compilers.\n\nSee the comments in the plug-in itself for more details."}, {:name=>"Php-Doc--Jeffery", :summary=>"Open's PHP Documentation in Web Browser", :description=>"This script will open the current word/function underneath the cursor in your default Web Browser."}, {:name=>"fuzzyjump.vim", :summary=>"Jump to where you (almost) want", :description=>"FuzzyJump is a Vim plugin to jump the cursor where you want like a pointing\ndevice such as a mouse.  This plugin maps most of keys on a keyboard to\nrelative positions in the current buffer.  For example. if your screen looks\nlike:\n\nmapping image of buffer and keyboard:\nhttp://farm4.static.flickr.com/3253/3021764786_5cf2efe7d5_o.png\n\n\t+-----------------------------------------------------+\n\t|if where git &>/dev/null; then                       |\n\t|  function prompt-git-head-name() {                  |\n\t|    if ! [ -d .git ]; then                           |\n\t|      return 1                                       |\n\t|    fi                                               |\n\t|    local head_name                                  |\n\t|    head_name=\"$(git branch | sed -e 's/^\\* //;t;d')\"|\n\t|\"foo.sh\" [New file]                                  |\n\t+-----------------------------------------------------+\n\nthen the correspondences of keys and positions are as follow (where {X} means\nthat key \"X\" is corresponding to the position where it is written).\n\n\t+-----------------------------------------------------+\n\t|{1}wh{2} g{3}&>{4}v/{5}l;{6}en{7}  {8}  {9}  {0}  {-}|\n\t|  function prompt-git-head-name() {                  |\n\t|{q} i{w} [{e} .{r} ]{t}he{y}  {u}  {i}  {o}  {p}  {@}|\n\t|      return 1                                       |\n        |{a} f{s}  {d}  {f}  {g}  {h}  {j}  {k}  {l}  {;}  {:}|\n\t|    local head_name                                  |\n\t|{z} h{x}_n{c}=\"{v}it{b}an{n}| {m} -{,}s/{.} /{/};d{\\}|\n\t|\"foo.sh\" [New file]                                  |\n\t+-----------------------------------------------------+\n\nBy default, this plugin defined 2-stroke key mappings to jump to one of the\nabove positions.  The key mappings consist of the common prefix \";\" (which can\nbe customized to any key sequence; see |<Plug>(fuzzyjump-prefix)|) and one of\nthe above keys.  For example, if you type \";1\", the cursor will move to the\nposition near {1} in the above figure.  For some keys such as {9}, there is no\ntext and it's not possible to move the cursor to the position, if so, this\nplugin moves the cursor to one of the most useful positions near the specified\nposition.\n\nNote that the original author doesn't consider about keyboard layouts other\nthan JIS layout.  So the above figure and the default key mappings are\nsomewhat strange for non-Japanese users.\nhttp://en.wikipedia.org/wiki/Image:KB_Japanese.svg\n\n* I'm using japanese layout keyboard, so I don't know how does it work in other layout keyboard.\n\nBlog entry:\n[English] http://blog.endflow.net/?p=175〈=en\n[Japanese] http://blog.endflow.net/?p=175〈=ja\n\nRequirements:\n- Vim 7.1 or later\n\nSpecial thanks:\n-kana [http://whileimautomaton.net/]: bugfix & help file in 0.1.1\n\n"}, {:name=>"shymenu", :summary=>"Show the menu bar only when pressing an accelerator key", :description=>"shymenu will show the menu bar only when the user presses an accelerator \nkey. The menu will be hidden again after an item was selected.\nshymenu achieves this by defining key maps for those accelerator keys \n(see 'winaltkeys') that would normaly activate a menu.\n\nOn a terminal, shymenu will define accelerator keys for the |:emenu| \ncommand.\n\nSee also:\nhttp://groups.google.com/group/vim_use/browse_frm/thread/44c870c1e930bcc0\n"}, {:name=>"EasyGrep", :summary=>"Fast and Easy Find and Replace Across Multiple Files", :description=>"EasyGrep makes using vimgrep easier.  When using EasyGrep, searching for a word is as easy as typing <leader>vv (v v, not double-u) over the word for which you want to search.  This search can also be accomplished with the :Grep command.\n\nEasyGrep provides three modes in which you can do your searches:\n  All - all files will be searched  (default)\n  Buffers - all files currently open in vim will be searched\n  TrackExt - all files that match the extension of the currently opened file will be searched.  Additionally, this extension can be mapped to a user defined set of extensions that will also be searched (see EasyGrepFileAssociations).\n    For example: when test.cpp is open, files that match any one of *.cpp *.hpp *.cxx *.hxx *.cc *.c *.h will be searched when a search is initiated.\n\nSetting options is easy, simply type <leader>vo or :GrepOptions.  EasyGrep provides a great set of defaults but can also be configured to start up just how you like it; see the script for these options.  Most vimgrep (and grepprg) options are supported.  \n\nFor a screencast of the script in action go here: http://downloads.veryspeedy.net/vim/EasyGrep.gif\n\nFull keymappings and commands:\n\n\n    <Leader>vv  - Grep for the word under the cursor, match all occurences,\n                  like |gstar|\n    <Leader>vV  - Grep for the word under the cursor, match whole word, like \n                  |star|\n    <Leader>va  - Like vv, but add to existing list\n    <Leader>vA  - Like vV, but add to existing list\n\n    <Leader>vr  - Perform a global search search on the word under the cursor\n                  and prompt for a pattern with which to replace it.\n\nIn addition to grepping the word under the cursor, text may be visually\nselected and these mappings may be used analogously to as they are used above.\nVisual selections will automatically be escaped so as not to confuse the\nselection with a regular expression.\n\n    Each of the above commands will search files according to settings\n    controlled by:\n\n    <Leader>vo  - Select the files to search in and set grep options\n\n    :Grep [arg]\n        Search for the specified arg, like <Leader>vv.  When an ! is added,\n        search like <Leader>vV\n\n    :GrepAdd [arg]\n        Search for the specified arg, add to existing file list, as in\n        <Leader>va.  When an ! is added, search like <Leader>vA\n\n    :Replace [target] [replacement]\n        Perform a global search and replace.  The function searches\n        the same set of files a grep for the desired target and opens a dialog to\n        confirm replacement.\n    \n    :ReplaceUndo\n        Undoes the last :Replace operation.  Does not stack successive\n        searches; only the last replace may be undone.  This function may not\n        work well when edits are made between a call to Replace and a call to\n        ReplaceUndo.\n\n    :GrepOptions [arg]\n        Open a window to set grep options."}, {:name=>"Php-Doc--Jeffery-B", :summary=>"Open's PHP Documentation in Web Browser", :description=>"Open's your default Web Browser to the word/function under the cursor by hitting K."}, {:name=>"TagManager-BETA", :summary=>"Build, manage and keep tag databases up-to-date within Vim", :description=>"Screenshots: http://sites.google.com/site/vimcctree/other-plugins\n\n     Plugin provides an integrated environment within Vim for building, maintaining,\n     and using tag databases.\n                                                                                         \n     Features:\n         * Specify a list of files or regex file search patterns for inclusion\n           in tags database\n         * Support for multiple databases\n         * Build and track tag databases for freshness\n             + Tracks new file creations when using regex file patterns                 \n             + Update tag databases on every file save with\n               efficient incremental updates\n             + Tracks file changes outside of Vim\n                                                                                         \n     Limitations:\n         * Might slow-up with huge databases because of  Vim scripting\n           speed and API limitations\n             - Recommended method is to split multiple tag databases for \n               each sub-directory\n\n\n\nUsage:\n                                                                               \n     Commands:\n      :TagManagerAddDb  <tagDB name> <filelist/pattern> [directory]\n         Illustration:\n         :TagManagerAddDb tags *.[ch] \n         :TagManagerAddDb tags *.[ch] .\n         [Note that both commands do the same, the directory is optional;\n         if omitted, the current directory is used]\n                                                                               \n         :TagManagerAddDb tags **/*.[ch] \n           Recursively add all .c and .h files in the current directory and\n           directories under it. More complicated search patterns are\n           possible with the \"**\" operator. For more help, please see :help **\n                                                                               \n         :TagManagerAddDb tags **/*.[ch] ./dir1/,./dir2/,./dir3/\n           Selectively build individual tags in each of these directories\n           recusively. Paths are relative to current directory. It is also \n           possible to specify the absolute paths\n                                                                               \n         The sequence of commands has the same effect as the previous\n         command\n         :TagManagerAddDb tags **/*.[ch] ./dir1\n         :TagManagerAddDb tags **/*.[ch] ./dir2\n         :TagManagerAddDb tags **/*.[ch] ./dir3\n         :TagManagerAddDb tags  */*.[ch] ./dir4    [not recursive]\n                                                                               \n                                                                               \n         Using file lists\n         :TagManagerAddDb tags files.lst dir1\n             Uses the \"files.lst\" file in directory \"dir1\" for the database\n             creation. Instead of using regex patterns, file lists can also\n             specified. Note that these files must be created manually\n             before-hand.\n                     \n      :TagManagerShowDbs\n         Shows the current loaded Dbs and their internal index\n                                                                               \n      :TagManagerRemoveDb <index>\n          Use it to remove already loaded Tag Dbs. Index must be\n          obtained from the show command\n                                                                               \n      Debugging:\n                                                                               \n         :TagManagerShowDbDetail <index>\n             Show more details of the database: i.e., list of files tracked\n                \n         :TagManagerShowLog\n             Internal debug log; displays the sequence of\n             actions/events/system commands executed. In case of anomalous\n             behavior, please log this.\n                                                                               \n      Configuration:      \n          :let g:TagMgr_CtagsProgName = 'ctags'\n             Specify the executable for the tag generation application.\n             \n          :let g:TagMgr_CtagsProgDir = ''\n             Specify the directory in which the ctags app can be found. If\n             it is on the path, then it can be left empty.\n                 \n          :let g:TagMgr_CtagsExtraOpts = ''\n             Extra options for building the database. A better option is to\n             use the ~/.ctagsrc file to specify extra options; this will be\n             automatically used for every ctags run.\n                                                                               \n          :let g:TagMgr_AutoTrackDbs = 1\n             Disable (0) or enable (1). TagManager will automatically setup\n             the Vim 'tags' variable to reflect the current paths. (More to\n             come later for this feature)\n                                                                               \n          :let g:TagMgr_LogMaxLines = 30\n             Internal debug log. Sets the limit for the number of lines.\n                                                                               \n          :let g:TagMgr_SourceListFile = 'files.lst'\n             When using a regex for file specification, TagManager will\n             create a file list with this name and then pass it to ctags.\n"}, {:name=>"pyflakes.vim", :summary=>"PyFlakes on-the-fly Python code checking", :description=>"IMPORTANT: Your vim must have Python 2.5, at least. Enter \":python import sys; print sys.version\" to see which version you have.  The newest version of Vim, 7.3, comes bundled with Python 2.7 support.\n\npyflakes-vim highlights common Python errors like misspelling a variable name on the fly. It also warns about unused imports, redefined functions, etc.\n\nThis plugin is fast enough that it registers itself with vim hooks for leaving insert mode and saving a buffer, so that the warnings are always up to date. See pyflakes.vim if you want to change this behavior.\n\nNOTES:\n * an improved pyflakes module is INCLUDED with this plugin, so you don't need to install it separately\n * quickfix entries are created for each error, so you can use commands like :cc to jump to errors.\n * this plugin uses the SpellBad highlight to show errors. if you'd like to change the color or style of this highlight, you can do something like this in your .vimrc:\n\n      if has(\"gui_running\") \n          highlight SpellBad term=underline gui=undercurl guisp=Orange \n      endif \n\nTo stay up on development, you can watch the public repos at\n\nhttp://github.com/kevinw/pyflakes-vim\nhttp://github.com/kevinw/pyflakes\n\nKNOWN ISSUES\n\n- The highlighting for syntax errors is often way off, and results in no other errors being detected.\n- In Python 2.5, typing a with statement before you have from __future__ import with results in a vim error\n"}, {:name=>"VimLocalHistory", :summary=>"Automatic backup and poor man's revision control.", :description=>"VLH automatically saves buffers on write using git.  This provides a convenient, automatic backup system of, e.g. files in /etc that are modified, as well as a poor man's \"local history\" (a lá the eclipse feature with the same name).\n\nFeedback, bug reports and suggestions gratefully accepted at <vlh@hjdivad.com>.\n\n\nTo use, install, configure g:vlh_repository_dir and then use vim normally.  Every time you write a buffer whose path is on the local filesystem, a copy is saved in a git repository.\n\nYou can open, diff or restore older versions of files with the commands VLHOpen, VLHDiff and VLHReplace.\n\nsource code is available from github at http://github.com/hjdivad/vimlocalhistory/tree/master"}, {:name=>"Python-Documentation", :summary=>"Python Documentation in Vim", :description=>"Shows Python documentation inside Vim either use the function :Pyhelp module, OR select the module in visual mode and then either use the map pw or the function :PyHelp. \n\nCurrently only works for stuff like os.path.abspath (complete modules not as variables) for example doing g = os.path and then trying to find the documentation for g.abspath won't work. So in the future I'd like that to work. "}, {:name=>"Download-Vim-Scripts-as-Cron-Task", :summary=>"Similar as GetLatestVimScripts, but this bash script can run as a cron task", :description=>"Here is a simple bash script with similar function as \"GetLatestVimScripts\" plugin (vimscript#642):\n\n    (1) It will check whether a new version of local vim script are released, if it is available, automatically download it to assigned directory, otherwise, nothing will be done;\n    (2) It will update version information of the downloaded files into the list file.\n\n1. Why you need this script?\n --------------------------------------\nIn fact, core algorithm of this script is same with \"GetLatestVimScripts\". But the \"GetLatestVimScripts\" need to be run under vim platform, if you want it to be executed by some scheduler (for instance \"cron\" or \"at\") in background, it will not work!\n\nTry to launch a shell command as below:\n                               $ ex +\"GetLatestVimScripts\" &\nand what did you see? Yes, this background job cannot run, not even to run as a cron task.\n\nSo, if you are lazy to update your vim plugins manually, and need a program to execute it as a schedule, download and enjoy this script.\n\n2. Usage\n------------\nThis is a bash script:\n                         $ ./downloadvimscripts [-o restore_dir] scripts_list_file\n\nNOTE:\n    (1) use option \"-o\"  to assign a directory to restore your vim scripts. If it is absent, vim scripts will be downloaded to the same directory of \"scripts_list_file\";\n    (2) \"scripts_list_file\" has same format of \"GetLatestVimScripts.dat\";\n    (3) it will check whether the restore_dir is writable before downloading.\n\n3. Format of \"scripts_list_file\"\n----------------------------------------\nAs mentioned above, \"scripts_list_file\" has same format as \"GetLatestVimScripts.dat\", it has three fields:\n                                    ScriptID SourceID ScriptName.\n\nwhere,\n    (1) ScriptID: you'll see it on the top of your browser in its \"Location:\" box whenever you click on the script at http://vim.sf.net/;\n    (2) SourceID: start it off with a \"1\"; this script will download the file and keep this entry updated automatically;\n    (3) ScriptName: the name or title of the script (may have spaces, etc).\n\nI've provided an example of \"scripts_list_file\" in zip package, please research and reconfigure it for yourself.\n\n4. Dependency\n---------------------\nFor portability, assure these programs are installed in your system:\n    (1) bash (version >= 3.0)\n    (2) grep\n    (3) sed\n    (4) awk\n    (5) wget or curl"}, {:name=>"UpdateDNSSerial", :summary=>"Update automatically the serial of DNS Zone", :description=>"This script help you to update automatically the serial of SOA when editing a DNS zone with vim. It find the serial, increment or update with the current time as : YYYYMMDDNU where YYYY=year, MM: month, DD:day, NU:number version."}, {:name=>"narrow--Kramer", :summary=>"Another plugin that emulates emacs' narrowing feature.", :description=>"This plugin allows you to zoom into regions of a buffer by hiding everything outside the selection. Global operations like global search/replace etc. only apply to the selected region, until you widen the view again. This is useful when you have a very long function that doesn't fit the screen, and you end up in another function when searching whithout noticing (as an example). With this plugin you can zoom to that function and be sure that you keep inside it, no matter what you do.\n\nCommands:\n:Narrow (takes a region, zooms to it)\n:Widen (inserts the hidden parts again)\n\nNotes:\nAs the Narrow function actually deletes the hidden text from the buffer temporarily, this action can be undone manually by the user (using \"u\", \":undo\", \":earlier\", \"g-\", ...), which will break the :Widen function. For this reason, the 'u' key is remapped to a \"safe\" undo function. Still, there are other ways to undo the narrowing, so be careful!\nAlso, when in a narrowed buffer, the auto-command \"BufWriteCmd\" is set to a function that saves the whole file, so not only the narrowed region is saved on \".w\". Don't mess with this auto-command, or you'll probably lose data!"}, {:name=>"Pago", :summary=>"Powerful Screenplay Formatting", :description=>"Pago is probably the most powerful terminal-based screenwriting script available for any platform, and allows the use of vim as a fully-functional piece of screenwriting software such as Final Draft or Celtx.  While some elements of the script are unstable, it undergoes daily testing and revision, becoming more mature as I use it every day for my own screenwriting projects.\n\nPLEASE PROVIDE ME WITH FEEDBACK if you use or test this software -- any comments or requested features will be given full consideration.  (zazaian (at) gmail (dot) com).  Your thoughts are essential to developing this program into a piece of software that best serves the open source community.\n\nOverview\n========\n* Supports all major formatting elements of a screenplay, based on both logical and commonly accepted conventions of the screenplay form.\n* Automatically enforces all boundaries within each screenplay element, ensuring proper formatting to the exact specifications of a screenplay.\n* Allows access to all six available screenplay ELEMENTS without any complex keyboard shortcuts or commands, using only the keys <Backspace>, <Tab>, <Enter>, <Up>, <Down>, <Left>, <Right>.\n* Allows easy cycling through blank screenplay elements using both the <Tab> and <Backspace> keys.\n\n  Features\n  ========\n  * Pressing TAB cycles through empty screenplay elements in the order:\n\n    ACTION --> DIALOGUE --> PARENTHETICAL --> CHARACTER --> TRANSITION --> ACTION\n\n    * Pressing <Tab> from a blank TRANSITION element will cycle back to the\n      beginning of the line, triggering a blank ACTION element.\n\n    * Parentheses are automatically inserted when calling a blank PARENTHETICAL\n      element.  Pressing <Tab> from within blank parentheses will automatically\n      delete the parentheses and jump to a blank CHARACTER element.\n\n    * A colon (\":\") is automatically inserted at the end of the line when an\n      TRANSITION element is called.  The cursor remains at the spot of the colon\n      when text is either entered or deleted.\n      \n      * Text typed within a TRANSITION element is automatically RIGHT-JUSTIFIED.\n\n      * Pressing <Enter> from a TRANSITION element jumps two lines down the page\n        and prompts a blank SCENE HEADING element.\n\n  * Pressing <Backspace> on an empty line cycles through empty screenplay elements\n    in the reverse order:\n\n    TRANSITION --> CHARACTER --> PARENTHETICAL --> DIALOGUE --> ACTION\n    --> END OF PREVIOUS ELEMENT\n\n    * Pressing <Backspace> from a blank line jumps to the end of the previous\n      element or, if the above two lines are blank, will create a blank ACTION\n      element two lines above the previous cursorline.\n    \n    * Pressing <Backspace> on a line with text will delete the character to the\n      left of the cursor.\n\n  * All text typed with a SCENE HEADING, CHARACTER, or TRANSITION element will be\n    automatically CAPITALIZED.\n\n  * To create a SCENE HEADING element, press enter while in a blank ACTION element.\n    The Cursorline will be HIGHLIGHTED and all text typed within the element will\n    be CAPITALIZED.\n\n  * While in a blank SCENE HEADING element:\n    * Press the <Space> bar to cycle through the common prefixes INT., EXT., and\n      INT./EXT.\n    * Press <Enter> to jump down two lines to a new, blank ACTION element.\n\n  * Active screenplay element is displayed in CAPS in the status bar.\n\n  * Page number is displayed in the status bar.  This estimates the number of pages\n    within your screeplay using a 56-line-per-page standard.\n\n  * Pressing <Up> in either INSERT or NORMAL modes jumps to the beginning of the\n    line above the cursorline.\n\n  * Pressing <Down> in either INSERT or NORMAL modes jumps to the end of the\n    line above the cursorline.\n\n  * Holding <Left> in either INSERT or NORMAL modes scrolls through to the\n    beginning of the current element, then jumps to the end of the previous\n    element.\n\n  * Holding <Right> in either INSERT or NORMAL modes scrolls through to the\n    end of the current element, then jumps to the beginning of the next\n    element.\n\n  * Typing text within a screenplay element such as DIALOGUE or ACTION will\n    automatically reformat the paragraph if text exceeds the preset end of the\n    line.  This improves upon use of the :tw (text width) and :wrap commands by\n    formatting text that is typed within a paragraph, rather than simply at the end\n    of it.\n\n\nPlanned Features\n==============\n* Easily output text file to a fully-formatted .PDF file.\n* Drop-Down lists for previously used:\n  * Character Names\n  * Character Parentheticals (O.S., O.C., V.O., CONT'D)\n  * Scene Headings\n* Integrated version control using the Bazaar version control system.\n  * Allows the use of a single file for a screenplay, rather than keeping multiple copies.\n  * Easily discern the differences between various writing sessions.\n  * Retain deleted scenes, lines and actions from various writing sessions.\n* Command-line abbreviations will simplify both version control and other useful features.\n* Optional syntax highlighting\n* Character and scene reports"}, {:name=>"PylonsCommand", :summary=>"Run Pylons' commands from Vim", :description=>"Requirements: Linux(not tested on Windows), Pylons\nDescription:\nThis is plugin to invoke Pylons' commands from Vim\n\nA little theory now:\nDefault Pylons project looks like this:\n\n       MyProject/\n               myproject/\n               myproject.egg-info/\n               data/\n               docs/\n               developement.ini\n               MANIFEST.in\n               README.txt\n               setup.cfg\n               setup.py\n               test.ini\n\n      Now, what is what?\n       g:PylonsProjectDir = path/to/MyProject/\n       g:PylonsProjectName = myproject/\n\n      To start using this plugin you have to 'open' Pylon project with:\n               :PylonsOpen path/to/MyProject/myproject/\n       if everything goes well you should see:\n               Project set: /absolute/path/to/MyProject/myproject\n\n       Now you can use following functions:\n       PylonsOpen <dir> : open another project, current (if any) will be lost\n       PylonsServer [start|stop|restart] : start, stop, restart paster server\n       PylonsCreate [project|controller|template]:\n               project : Create new project TODO: not implemented yet\n               controller : Create new controler. It will as you for name.\n               template : Create new template. It will as you for name.\n               Note: you can use:\n                      PylonsCreate template\n                       'Template: path/to/template.mako'\n                       ['Template: path/to/template will' work the same]\n               This will create template.mako in\n                               /absolute/path/to/MyProject/myproject/tempates/path/to/\n       PylonsPreview : this will open localhost:5000 with default browser (set in g:PylonsBrowser)\n\n Notes:\nI know that code can be buggy. It's my first vim-script."}, {:name=>"sqlserver.vim", :summary=>"Syntax file for SQL Server 2005/2008", :description=>"This is a syntax file for SQL Server 2005/2008.  All TSQL and ODBC keywords are included, as well as a comprehensive list of functions, system variables, system stored procedures, server options, and future keywords (as defined by Microsoft).\n\nFor complete source history or to file a bug report/issue (please use Wiki tab for this), please visit:\nhttp://github.com/hoffstein/vim-tsql/tree/master"}, {:name=>"msdn_help.vim", :summary=>"Lookup MSDN help", :description=>"This plugin provide display help text on dexplorer(MSDN help).\n'dexplorer.exe' process must be started in advance.\n\nRequirements:\n- Vim7.1 or later.\n- Python\nhttp://www.python.org/download/\n- Python Win32 Extension\nhttp://sourceforge.net/project/showfiles.php?group_id=78018\n\nKey mapping:\nIn normal mode\n<space>h  Search the word under the cursor.\nIn visual mode\n<space>h Search the text selected in visual mode.\n\n"}, {:name=>"nightsky", :summary=>"Black background, good usability.", :description=>"Based on northsky from Sergey Khorev which was recommended to me by Bram. Changed a few things to make it more pleasant and usable."}, {:name=>"miko", :summary=>"Elegant blues and yellows on black", :description=>"Custom color scheme for 256 color terminals that I've personally used and tuned since I created it in February.  I'm a perfectionist when it comes to this kind of thing, and I've spent a LOT of time fine tuning the colors to be both functional and pleasing to the eye.\n\nDoes not currently support the gvim or instances of vim based in a GUI."}, {:name=>"eyapp", :summary=>"Syntax highlighting for Parse::Eyapp and Parse::Yapp", :description=>"Parse::Eyapp and Parse::Yapp (see http://search.cpan.org/dist/Parse-Eyapp/) are\nyacc-like parser generators for Perl. \nThe syntax file eyapp.vim provides syntax highlighting for the yapp and eyapp languages \n(see http://search.cpan.org/dist/Parse-Eyapp/)"}, {:name=>"google", :summary=>"A colour scheme based on Google's", :description=>"A colour scheme based on Google's. Much blue, a little green, all on a light background with high contrast."}, {:name=>"outputz", :summary=>"outputz interface for Vim", :description=>"*outputz* is a Vim plugin to provide the feature that the number of bytes you\ninputted will be automatically posted to outputz.com whenever a whole buffer\nis written to a file.\n\nNote that this is just a prototype.  The interface should be improved for the\nfuture.\n\nRequirements:\n- Vim 7.2 or later\n- curl - http://curl.haxx.se/\n\nLatest version:\nhttp://github.com/kana/vim-outputz"}, {:name=>"mtys-vimrc", :summary=>"just another vimrc", :description=>"It&#039s just my vimrc, it contains scripts I wrote, mostly, but also some stuff I found around the web..."}, {:name=>"unibox", :summary=>"Draws boxes in different line styles and in all languages", :description=>"The script draws line boxes in styles in various languages.\n\nYou can get all kinds of lines supported in your local system.  For Chinese, Japanese, and Korean (CJK), the program will be fully featured with various pre-defined lines.  Other encoding will have degraded lines.  For example, if you have not 3-dot line in your system, a solid line will be used.  In the worst case, characters (+,-,|) will be applied.\n\nIn case a visual selection cover an existing box, there are 2 modes for processing the intersection, unite mode and overwrite mode.  In unite mode, lines are joined at intersections. This is why the script is call unibox..\n\nKey mappings:\n\n    <leader>du    uses it after you change you encoding\n    <leader>d     the default draw mode, same as <leader>d1\n    <leader>d1    draws with thin lines\n    <leader>d2     with bold lines\n    <leader>d3     with 3-dot thin lines\n    <leader>d4     with 4-dot thin lines\n    <leader>d5     with double lines\n    <leader>d6     with 3-dot bold lines\n    <leader>dr     sam as <leader>dr1\n    <leader>dr1    with round corners and thin lines\n    <leader>dr3    with round corners and 3-dot thin lines\n    <leader>dr4    with round corners and 4-dot thin lines\n    <leader>d8     with round corners and 4-dot bold lines\n    <leader>dc    clear the box\n\n    <leader>dd    The followings correspond the above but in a overwrite mode\n    <leader>dd1   \n    <leader>dd2   \n    <leader>dd3   \n    <leader>dd4   \n    <leader>dd5   \n    <leader>dd6   \n    <leader>ddr   \n    <leader>ddr1  \n    <leader>ddr3  \n    <leader>ddr4  \n    <leader>dd8   \n    <leader>ddC  \n\nTips:\n\n1.Try the following if you encounter wierd lines:\n        set ambiwith=single\n  or   set ambiwith=double\n\n2.To change the encoding, use\n        set enc=...\n  and type\n        <leader>du\n  to reset the drawing system.\n"}, {:name=>"enzyme.vim", :summary=>"A color scheme optimized for viewing in Terminal.app", :description=>"After getting sick of unreadable color schemes because of OS X's Terminal.app color rendition I decided to make my own scheme. The focus is on providing readable combinations of colors.\n\nThis may also look okay in other terminals, but I haven't really tested it there so far.\n\nCurrently it does nothing special for Gvim.\n\nIf you would like to leave comments or make suggestions for this color scheme, please visit my blog: http://kamilkisiel.blogspot.com/2008/11/enzymevim-terminalapp-friendly-color.html"}, {:name=>"AutoTmpl", :summary=>"Plugin for using templates when editing new files", :description=>"The purpose of this script is to automatically load predefined template files\nwhen editing new files.\n\nThe templates can contain fields that are dynamically filled in order to customize\nthem at creation time (e.g. date of creation).\n\nCurrently, templates are provided for:\n - C\n - C++\n - C/C++ headers\n - Python\n - Shell scripts\n - Vim plugins\n\nThe plugins use some variables that can be defined in your .vimrc:\n - let g:author = \"your name\"\n - let g:email = \"your email\"\n - let g:footer = \"the footer you want vim to use for your files (e.g. tabstop=4 textwidth=100)\"\n\nPlease send me an email with any improvements you think are worth."}, {:name=>"AutoTmpl-B", :summary=>"Plugin for using templates when editing new files", :description=>"This plugin has been uploaded twice by error and might be outdated, please go to vimscript #2460 to get the maintained version."}, {:name=>"Python-Syntax-Folding", :summary=>"Python syntax file with support for folding functions/classes", :description=>"This python syntax file provides support for folding function/class definitions. "}, {:name=>"kellys", :summary=>"A colour scheme inspired by Kellys bicycles", :description=>"A colour scheme inspired by Kellys bicycles: a dark background with quite intense colours, mainly blue, orange and green. Pretty good contrast, but not so much as to hurt the eyes.\nA screenshot available at: http://img291.imageshack.us/my.php?image=vimkellys03fd0.png."}, {:name=>"session_dialog.vim", :summary=>"manage vim sessions using dialogs and the command line", :description=>"session_dialog.vim provides a simple dialog and command-line based\ninterface to Vim's :mksession feature. There are commands to save sessions\nand restore, delete, and list sessions from multiple locations. It works\nwell with the terminal as well as console dialogs in GVIM (set\nguioptions+=c), and provides command-line completion of session names.\n\nUsage:\n:SessionSave [SESSION]\n  With no arguments, displays the save dialog. Otherwise, saves a new\n  session with the given name in SessionSaveDirectory. The session file on\n  disk will have the SessionFilePrefix and SessionFileSuffix attached (see\n  \"Options\" below). Spaces are allowed in the sesison name.\n  e.g. :SessionSave foo bar creates the session \"foo bar\"\n\n:SessionRestore [GLOB_PATTERN]\n  With no arguments, displays the restore dialog. Otherwise searches for a\n  session to load in SessionPath. If more than one session was found (if\n  sessions with the same name were found in different paths or if the\n  given pattern matched multiple sessions), you will be prompted to choose\n  one.\n  e.g. :SessionRestore foo*\n\n:SessionDelete [SESSION|GLOB_PATTERN]...\n  Displays the delete session dialog if no arguments were given, otherwise\n  deletes all the sessions that match the arguments. Spaces need to be\n  escaped since they would otherwise separate the arguments.\n  e.g. :SessionDelete foo will delete the session named \"foo\". If more\n  than one session is named \"foo\", you will be prompted to select one. You\n  can also use a pattern (e.g. :SessionDelete foo*). This will delete all\n  sessions beginning with \"foo\".\n\n:SessionList [GLOB_PATTERN]...\n  Prints a list of all the sessions and their locations in SessionPath if\n  no arguments were given. Otherwise prints a list of sessions that match\n  the arguments.\n  e.g. :SessionList foo bar* *baz will show all the sessions named foo,\n  starting with bar, or ending with baz.\n\nZS ZR ZD ZL\n  The default normal mode mappings for :SessionSave, :SessionRestore,\n  :SessionDelete, and :SessionList, respectively. These can be disabled\n  with the option SessionCreateDefaultMaps. Note that these will time out,\n  unlike native commands such as ZZ. (see :help 'timeoutlen')\n\nYou can also map the commands yourself using:\n  <Plug>SessionSave\n  <Plug>SessionRestore\n  <Plug>SessionDelete\n  <Plug>SessionList\n\nOptions:\ng:SessionSaveDirectory\n  Default is \"$HOME\"\n  Where to save new sessions. This can be set in your vimrc or while Vim\n  is running. For example, to get the default behavior of :mksession,\n       let SessionSaveDirectory = \".\"\n\ng:SessionPath\n  Default is set to the initial value of SessionSaveDirectory\n  A comma-separated list of paths in which to look for session files to\n  restore or delete.\n  e.g. let SessionPath = \".,~,~/.vim/sessions\"\n\ng:SessionFilePrefix\n  Default is \".vimsession_\" (on Windows, \"_vimsession_\")\n\ng:SessionFileSuffix\n  Default is \"\" (on Windows, \".vim\")\n\n  Strings to prepend and append to session names when saving to\n  SessionSaveDirectory. All files found in SessionPath with these\n  attributes will be identified as sessions, so the combination of the two\n  should uniquely identify session files (unless all files found in\n  SessionPath will be Vim sessions).\n\ng:SessionDefault\n  Unset by default\n  The default session name to save to or restore from. This is overridden\n  by v:this_session. If both are unset, the Vim server name (v:servername)\n  will be used as the default.\n\ng:SessionConfirmOverwrite\n  0 or 1 (default)\n  Set this to 0 to save over an existing session file without asking for\n  confirmation.\n\ng:SessionQuitAfterSave\n  1 or 0 (default)\n  Whether to exit Vim after saving a new session.\n\ng:SessionCreateDefaultMaps\n  0 or 1 (default)\n  Whether to create the default normal mode mappings (ZS, ZR, ZD, and ZL).\n"}, {:name=>"wombat256.vim", :summary=>"Wombat for 256 color xterms", :description=>"This is a version of Wombat (vimscript #1778) by Lars Nielsen that also works on xterms with 256 colors.\n\nA customized version is also available, with additional highlighting groups for diff mode and search."}, {:name=>"cdargs", :summary=>"Directory bookmarking based on CDargs", :description=>"Reads your cdargs bookmark file (\"~/.cdargs\") and provides a couple commands:\n  Cdb - Change directory to bookmark\n  Eb - Edit file in bookmark directory\n  Tb - Edit file in a new tab\n\nHomepage: http://github.com/gaffneyc/vim-cdargs/\n\nCDargs: http://www.skamphausen.de/cgi-bin/ska/CDargs\n\n"}, {:name=>"submode", :summary=>"Create your own submodes", :description=>"*submode* is a Vim plugin to provide the way to define \"submodes\" to the\nbuilt-in |vim-modes|.  For example, whenever you type |g-| and/or |g+| to\nundo/redo many times, don't you want to type \"g++--++...\" instead\n\"g+g+g-g-g+g+...\"?  With this plugin, you can define such interface with the\nfollowing settings:\n\n\tcall submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')\n\tcall submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')\n\tcall submode#leave_with('undo/redo', 'n', '', '<Esc>')\n\tcall submode#map('undo/redo', 'n', '', '-', 'g-')\n\tcall submode#map('undo/redo', 'n', '', '+', 'g+')\n\nThe above settings mean:\n- Define a new submode named \"undo/redo\".\n- Define \"g-\" and \"g+\" as key sequences to enter the submode \"undo/redo\" from\n  Normal mode.  Aditionally, they does undo/redo before entering the submode\n  \"undo/redo\".\n- In the submode \"undo/redo\", \"-\" and \"+\" do undo/redo.\n- In the submode \"undo/redo\", \"<Esc>\" leaves the submode.\n\n\t\t\t\t\t\t*submode-leaving*\nBy default, <Esc> is automatically defined as a key to leave any submode.\nSo you don't have to explicitly define like the above example.\nThere are also 2 ways to leave submodes:\n- Type any key sequence which is not mapped in the submode.\n- Don't type any key for a long time.  See |submode-variables| to configure\n  the details of this time out.\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-submode\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/submode.html"}, {:name=>"sandbox", :summary=>"A vim script for managing subversion sandbox.", :description=>"After installing this plugin, ':Sandbox <sandbox_directory>' on the command line will create a new buffer\nwhich list the currnet status of the sandbox. In the buffer, a few handy mapping are available like diffing, commit, revert, etc. See the help at  the bottom of the buffer.\n\nScreenshot:\nhttp://files.myopera.com/wzhliang/albums/649613/sandbox.png\n\nLinux only!\n\nDepends on: svn, meld or tkdiff for GUI diffing.\n ---------- H E L P -----------\n c         Commit a single file or selected files.\n d         Diff the file specified in the current line.\n e         Open the file in question in a new tab.\n r         Revert a single file or selected files.\n t         Select/Unselect a single file.\n u, U    Update a single file or update all files.\n v        Resolved a single file or selected files.\n C-D     Reset selection.\n <F5>    Refresh the buffer.\n q       Quit\n"}, {:name=>"translit", :summary=>"Transliteration mode for Vim (russian, greek)", :description=>"http://github.com/einars/translit.vim\n\nThis plugin allows you to write texts in transliterated russian (or any other language you'll write a definition for). That means, you write \"Cheburashka\" and it gets automagically converted to \"Чебурашка\", or write \"Ellada\" and it converts to \"Ελλαδα\"\n\nThis plugin is loosely based on russian_plansliterated.vim plugin by Krzystof Goj (http://www.vim.org/scripts/script.php?script_id=2401) and was used as my playground for learning vimscript.\n\nBasic Usage:\nDrop plugin under ~/.vim/plugins and switch translit mode on/off with Ctrl-Shift-t.\n\nRead the file for more help on configuration and usage.\n"}, {:name=>"smartword", :summary=>"Smart motions on words", :description=>"*smartword* is a Vim plugin to provide {motion}s on |word|s which are smarter\nthan the built-in ones in some sense.  For example, |w| moves the cursor to\nthe next word as follows (here \"#\" means a position to which |w| moves the\ncursor for each time):\n\n\t<a href=\"http://www.vim.org/\">www.vim.org</a&gt;\n\t # #   # #   #  #  ##  ##  #  #  ##  ##  # #\n\nBecause there are two types of words and |w| moves to the next word which can\nbe the both types.  Let's call \"L\" for a type of words and \"P\" for another\ntype of words, where \"L\" means a word which consists of a sequence of letters\n(which are defined by 'iskeyword' option) and \"P\" means a word which consists\nof a sequence of other non-blank characters.\n\nIn many cases, you might want to move to the next \"L\", not \"P\".  This plugin\nprovides {motion}s to behave so.  For example, |<Plug>(smartword-w)| which is\ncorresponding to |w| moves the cursor as follows:\n\n\t<a href=\"http://www.vim.org/\">www.vim.org</a&gt;\n\t # #     #      #   #   #     #   #   #    #\n\nSee also |smartword-examples| for customization.\n\nSee also the following image if the above figures aren't correctly displayed:\nhttp://gyazo.com/bc7887d9bb0f6aa3eee1e67b0d756b2e.png\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-smartword\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/smartword.html"}, {:name=>"paintbox", :summary=>"A colourful, happy scheme with high contrast", :description=>"A colourful, happy scheme with high contrast.\nhttp://img176.imageshack.us/img176/8033/vimpaintboxcc4.png"}, {:name=>"Csound-compiler-plugin", :summary=>"Csound compiler plugin", :description=>"This ftplugin will compile 2 csound files (orchestra file and scores file ) or csd file and plays compiled sound\n\nWhen compiling orc or sco file it does not matter which of them you try to compile, but files must have\nthe same name and different extension\n"}, {:name=>"python_open_module", :summary=>"open the python module file below the cursor when coding python", :description=>"the python_open_module.vim is the script that allows you open the module file  below the cursor when coding python. It's easy to use. For example, you can create a new python file and input:\n\nimport string\n\nmove the cursor above \"string\" and press \"<LocalLeader>oo\"(\"\\oo\" in common in vim) in normal mode You could see the string.py file opened in current window. you can continue to input:\n\nstring.lower\n\ndo same above and you can see string.py file opened the cursor jump into lower function.\n\nthe open fail if the module is buildin such as 'sys' or is not available.\n\nThere are three options for mapping key, you can chang it to any other key:\n\npom_key_open='<LocalLeader>oo'              # open module file in the current window\npom_key_open_in_win='<LocalLeader>ow'             # open module file in a new window\npom_key_open_in_tab='<LocalLeader>ot'               # open module file in a tab\n\n\nWORNING: Required vim compiled with +python\n"}, {:name=>"Gentooish", :summary=>"Dark, moderately-saturated color scheme with greens and purples", :description=>"This is a dark color scheme vaguely inspired by the colors of Gentoo Linux, i.e. lots of purples and greens.  But lots of other colors too.  The colors are saturated and different enough to tell things apart at a glance, without being so bright that your eyes bleed.\n\nThe colors look OK in a GUI and 256 color terminal.  (Terminal version was dumped via  vimscript #2390, then cleaned up a bit.)\n\nScreenshot: http://briancarper.net/vim/gentooish.png"}, {:name=>"ini-syntax-definition", :summary=>"A syntax definition for ini files, including hgrc files.", :description=>"This is a syntax definition for configuration files in the ini format, common on Windows and for software written in Python. This includes the popular version-control system Mercurial, whose hgrc configuration files are ini files.\n\nMercurial repository for this syntax definition: http://bitbucket.org/boredzo/vim-ini-syntax/\n\n"}, {:name=>"cbackup.vim", :summary=>"Use VMS style versioned backup with centralized backup directory", :description=>"This is a modification of vimscript #1537 to make it work with centralized backup directories. Backups are saved by default in $HOME/.backups, with recursive subdirectories reflecting the original location of the file being saved, using the VMS versioning system.\n\nParts of the script running under VMS were not changed. Script was tested on Linux, and should work in other environments too (Windows, Mac)."}, {:name=>"Persistent-Abbreviations", :summary=>"Persistent abbreviations", :description=>"This was designed for Medical Transcription work. \n\nAbbreviations can be added dynamically as you go, and will persist. They are also case smart:\nIf you add an abbreviation such as   \n\twrt=with respect to\nthen a corresponding abbreviation \n\tWrt=With respect to\nis also created."}, {:name=>"ActionScript-3-Omnicomplete", :summary=>"Omnicompletion plug-in for ActionScript 3", :description=>"This plug-in will enable omnicompletion for ActionScript 3 files.\n\nIt covers the majority of classes in the &#039flash&#039 package but still lacks those found in &#039mx&#039, &#039air&#039, and &#039flashx&#039.\n\nObviously, a work in progress."}, {:name=>"grsecurity.vim", :summary=>"grsecurity policy syntax definition", :description=>"This is a syntax definition for the grsecurity policy (/etc/grsec/policy). Basic syntax highlighting of the policy file and folding works at the moment.\n\nScreenshot: http://picasaweb.google.com/lh/photo/Le_YL0dQt59AlPluaVUwNw\n\nMercurial Repository: http://www.bitbucket.org/lobo/grsecurityvim/\nYou can get the development version via mercurial: hg clone https://lobo@bitbucket.org/lobo/grsecurityvim/\n\nPolicy language documentation: http://www.grsecurity.net/~spender/newDoc.pdf"}, {:name=>"maroloccio", :summary=>"An easy-on-the-eyes dark background colour scheme. ", :description=>"An easy-on-the-eyes dark background colour scheme.\n\nNow with 256 colours support!\n\nScreenshots:\n\nGUI mode: http://picasaweb.google.com/lh/photo/InGod978VFzY144k3-ZrxA\ncterm (256 colours): http://picasaweb.google.com/lh/photo/E5Nb1dltZxIoCtrFZ-OlnA\ncterm (8 colours): http://picasaweb.google.com/lh/photo/j_VMoZ20KLJaTq2YYeAdfg\n\nDownload from:\n\nVim.org: http://www.vim.org/scripts/script.php?script_id=2480\nGoogle Docs: http://docs.google.com/View?id=dd6g79bh_13f4gjx4nt\nEasy-to-remember URL: http://bit.ly/maroloccio_vim\n\nPlease send feeback to the author! maroloccio[at]gmail.com\n\n--\nPS: Eclipse user? Check out this as well:\n\nEclipse colour scheme: http://docs.google.com/View?id=dd6g79bh_15f2jhs9f8\nScreenshot: http://picasaweb.google.com/lh/photo/o7mWcx9G8TMXoU80S--_uw"}, {:name=>"pygtk_syntax", :summary=>"Syntax Highlighting for pygtk and friends in python", :description=>"This script adds python syntax highlighting for:\n gtk gtk.gdk gtk.glade gobject rsvg atk cairo pango gnome\n\nAll highlighted items will only show up after a \".\" character. (e.g. threads_init() will not be highlighted but gtk.gdk.threads_init() will be)\n\ngtk functions and gtk objects can be set to have different highlight values by adding \nIncludedFunction\nIncludedFunction2\nhighlight groups in your colorscheme file.\n"}, {:name=>"Quagmire", :summary=>"Army style color scheme", :description=>"This is as close a port as I could manage of the camouflage-inspired (and inexplicably named) Glitterbomb theme for TextMate. Due to some fundamental differences in the way the two editors handle syntax highlighting, it's more or less impossible to make it a perfect match, but it's close enough to look fairly nice in most circumstances.\n\nBy the way, the original can be found on the TextMate wiki: http://wiki.macromates.com/Themes/UserSubmittedThemes\n\n"}, {:name=>"Gorilla", :summary=>"a SLIME like environment for the Clojure programming language", :description=>"Gorilla is now merged with VimClojure (vimscript #2501)."}, {:name=>"textobj-indent", :summary=>"Text objects for indented blocks of lines", :description=>"*textobj-indent* is a Vim plugin to provide text objects to select a block of\nlines which are similarly indented to the current line.\n\nFor example, if the content of a buffer as follows:\n(here \">\" means the current line under the cursor,\nand \"_\" means a space to indent)\n\n\t  if some_condition_is_satisfied\n\t> __if another_condition_is_satisfied\n\t  ____call s:do_x()\n\t  __endif\n\n\t  __...\n\t  __endif\n\t  else\n\t  __...\n\t  endif\n\n|<Plug>(textobj-indent-a)| will select lines as follows:\n(here \"|\" indicates the selected line)\n\n\t  if some_condition_is_satisfied\n\t>|__if another_condition_is_satisfied\n\t |____call s:do_x()\n\t |__endif\n\t |\n\t |__...\n\t |__endif\n\t  else\n\t  __...\n\t  endif\n\n|<Plug>(textobj-indent-i)| will select lines as follows:\n\n\t  if some_condition_is_satisfied\n\t>|__if another_condition_is_satisfied\n\t |____call s:do_x()\n\t |__endif\n\n\t  __...\n\t  __endif\n\t  else\n\t  __...\n\t  endif\n\nMore variants are also available.  See |textobj-indnet-mapping| for the\ndetails.\n\n\nRequirements:\n- Vim 7.2 or later\n- |textobj-user| 0.3.8 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-indent\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-indent.html"}, {:name=>"python_check_syntax.vim", :summary=>"a script that check the syntax of a python file by pyflakes", :description=>"You can check the syntax of a python file if you install pyflakes module in you system. It call pyflakes function to check the current python file and display error messages in quickfix window in vim. You can browse the error by usual quickfix command like 'cc' ,'cn' etc.\n\nThere are two global variant which you maybe want to define in your .vimrc\n\ng:pcs_hotkey      # run the checker, the default is  <localleader>cs\ng:pcs_check_when_saving   # when true, the checker automaticlly run while saving, the default is true\n\nWARNING: \n\n1. Vim compiled with +python\n2. Must install pyflakes in your system. The note is that the old version(<=0.2.1) is too old to identify the new syntax of python2.5, 2.6, so svn version is recomend."}, {:name=>"proc.vim--Giwer", :summary=>"a system task manager ", :description=>"This is a fronted for the *nix commands 'ps' and 'kill' and  a more comfortable replacement for 'top'.\n\nBy calling Ps() you get a view of the current system processes in a new buffer. \n\nKeybindings exist for sorting, marking and killing.\n"}, {:name=>"fortran_codecomplete.vim", :summary=>"Complete fortran constructs with <F7>", :description=>"This script allows you to complete Fortran 90 structures by pressing <F7>.\n\nThe plugin in written in python, so you need to have your vim compiled with python support in order to use it.\n\nThe intention is to complete \u0093program\u0094, \u0093type\u0094, \u0093interface\u0094, \u0093module\u0094, \u0093subroutine\u0094, \u0093function\u0094, \u0093do\u0094, and \u0093select\u0094 constructs. You write the first line of such a construct (e.g. \u0093subroutine foo(a, b)\u0094, then press <F7>, and the script will add the closing line \u0093end subroutine foo\u0094 and put the cursor between the two lines, indented by one level."}, {:name=>"Rack.Builder-syntax", :summary=>"Syntax file for the Rack::Builder DSL", :description=>"This provides syntax highlighting for the most basic Rack keywords.\n\nhttp://github.com/dasch/vim-rack"}, {:name=>"maroloccio2", :summary=>"Works only in GUI mode (gVim, mVim, etc.).", :description=>"A dark background, very easy-on-the-eyes colour scheme for Vim. GUI mode only. "}, {:name=>"eclm_wombat.vim", :summary=>"Colour scheme based on ECLM and wombat schemes", :description=>"This is based largely on the gorgeous ECLM textmate theme from eclips3.media and I used the wombat scheme file as a starting point. \n\nPreview:\nhttp://img78.imageshack.us/img78/279/eclmwombatre3.png\n\nEnjoy!"}, {:name=>"maroloccio3", :summary=>"A monochromatic colour scheme for Vim in GUI mode.", :description=>"A monochromatic colour scheme for Vim in GUI mode."}, {:name=>"ViBlip", :summary=>"ViBlip allows to use Blip! (polish microblogging service)", :description=>"Read and write to Blip! (polish microblogging service) with ViBlip!\nAfter installing, run vim, and type:\n:Blip some blip status\nor:\n:Blip >recipient: some message\n\nto create new status. If you want to read 20 last statuses from your dashboard, just type:\n:DBlip\nIf you rather want to read your friend statuses:\n:DBlip friend_name\nYou can specify how many statuses from dashboard want to download. From your dashboard:\n:DBlip 5\nFrom friend's dashboard:\nDBlip friend_name/5\n\nTo read private messages:\n:PBlip\n:PBlip 10\nDefault PBlip read 5 last Private Messages, second line will download 10 messages.\n\nTo read single status:\n:MBlip id\nWhere id is single status id. You can also specify what type of status want to read:\n:MBlip id/st\n:MBlip id/dm\n:MBlip id/pm\n\nFirst line read normal statuses, second - directed messages, and third - private messages.\n\nSometimes you may have some problems with network connection, and connection to Blip is lost - in this case you can now reconnect:\n:RBlip"}, {:name=>"pty.vim", :summary=>"Remote terminal support for vim thanks to python.  ", :description=>"Remote terminal support for vim thanks to python.\n\n\nYou need VIM with python support and urxvt (rxvt-unicode) to use this script.\n<http://software.schmorp.de/pkg/rxvt-unicode.html&gt;\n\nFurthermore this script only provides python functions, so some knowledge about\nthis (very fine) language is usefull, but not required to benefit from it.\n\nCalling the python function rxvtSend('text','cmd') the first time will spawn\na subprocesses given by the shell command 'cmd' in a new terminal window and\npass 'text' to it. Subsequent calls with the same 'cmd' argument will send further\ntext to the this subprocess. If you close the terminal window, the child\nprocess stays alive and the next call of 'rxvtSend' opens a new terminal and\nconnects to it again. If you want to kill the child, call 'rxvtKill()'. \n\n"}, {:name=>"Fruidle", :summary=>"White background, happy colors, good usability", :description=>"A light color scheme inspired by the Fruit color scheme and Python's Idle."}, {:name=>"Pimp", :summary=>"Pimp provides a python shell in order to support REPL style development", :description=>"Pimp (Python Chimp) is based on (blatantly copied from) the Chimp plugin\n(vimscript #2348).  It provides a very simple REPL mechanism by allowing you to\nevaluate the contents of the active vim buffer in a running python console and\ninteract with the results.\n\n=Screenshots=\nhttp://www.flickr.com/photos/nushoin/3121961021/sizes/o/\nhttp://www.flickr.com/photos/nushoin/3121961023/sizes/o/\n\nTo use the plugin you have to open a terminal (e.g. xterm) and run one of the\ntwo scripts provided in the 'bin' directory.  For a split screen configuration\nrun ~/.vim/bin/vimPython.bash. For a gvim session interacting with a python\ninterpreter running in another window run ~/.vim/bin/gvimPython.bash. Note that\nyou have to *execute* the scripts, not source them.\n\nNow open a python source file or set the filetype to python (:set ft=python).\nEnter some python code, then hit <Esc> for normal mode, followed by <Leader>pf.\nThe contents of the buffer should now be evaluated in the python console.\n\n*Note*\nThe launching scripts try to run gvim, either in the terminal version (gvim -v,\nin the vimPython.bash script) or the gui version (gvimPython.bash). It is\npossible to run pimp with the non-gui version of vim by changing vimPython.bash.\nHowever in this case evaluating marked text in visual mode will not work.\n\n=Default bindings=\nAssuming that your <Leader> key is '&#039:\n\\pf Evaluate the current buffer (normal mode)\n\\pb Evaluate the marked code (visual mode).\n\n=Tips=\n - To move between the windows in the split screen configuration hit <Ctrl>-a\n   <Tab> (<Ctrl>-a is the escape key of gnu screen). \n - To resize the window hit <Ctrl>-a followed by :resize N<Enter> where N is the\n   number of lines, E.g.  <Ctrl>-a:resize 10<Enter>. \n - To scroll back hit <Ctrl>-a<Esc>. That enters screen's copy mode (similar to\n   vim's visual mode). To exit that mode hit <Esc>.\n - *New* As of Pimp version 0.5, evaluation of code selected in visual mode\n   actually works! Try using the right-extended visual block mode (Ctrl-v $) to\n   mark indented code (e.g. inside a function) in order to evaluate it. Take\n   advantage of the visual block mode to mark the code without the indentation\n   of course.\n - The code is evaluated in IPython's namespace. That makes it possible to\n   access previously defined variables, functions etc. The reverse is true as\n   well - it's possible to switch to the IPython window and interact with the\n   results of the evaluated code, invoke functions etc.\n - IPython has an abundance of 'magic' commands. For example it's possible to\n   'cd', 'pwd' etc. from within IPython. Check the IPython documentation for\n   details.\n\nIt is advised to read the gnu screen manual (man screen) for additional\ninformation about gnu screen's options and capabilities.\n"}, {:name=>"Changed", :summary=>"Displays signs on changed lines.", :description=>"Description:\n  Displays signs on changed lines.\nRequirements:\n  * +signs (appears in :version)\n  * diff command\n  * setting &termencoding\nUsage:\n  [Settings]\n                                                                                                         \n  1. Setting &termencoding\n      Set &termencoding option according to your terminal encoding. \n      Its default value is same as &encoding.\n      example:\n          set termencoding=cp932\n                                                                                                         \n  2. Changing signs\n      To change signs, re-define signs after sourcing this script.\n      example (changing text):\n          sign define SIGN_CHANGED_DELETED_VIM text=D texthl=ChangedDefaultHl\n          sign define SIGN_CHANGED_ADDED_VIM   text=A texthl=ChangedDefaultHl\n          sign define SIGN_CHANGED_VIM         text=M texthl=ChangedDefaultHl\n      example (changin highlight @gvimrc):\n          highlight ChangedDefaultHl cterm=bold ctermbg=red ctermfg=white gui=bold guibg=red guifg=white\n                                                                                                         \n  [Usual]\n                                                                                                         \n  Edit a buffer and wait seconds or execute :Changed.\n  Then signs appear on changed lines.\n"}, {:name=>"shellinsidevim.vim", :summary=>"Let you execute the shell command without leaving vim", :description=>"New version has combined into http://www.vim.org/scripts/script.php?script_id=2793\n\n --Typing the Ex command \"Shell\" will also allow you to run a Shell which you\n   give and pass up to 20 parameters to that shell.\n\n   Sample syntax...\n       :Shell ps -e\n\n --Pressing \"F4\" will toggle the display of a buffer containing the output\n   produced when running the shell command.\n\n **************************Some special syntax format**************************\n\n --If a Shell command starts with \":\", this Shell will be executed as a vim Ex\n  command, this is convenience if you map this command to a shortcut such as:\n\n  map <CR> :Shell\n\n  Then you could use this script to execute all the normal command directly.\n\n  --If a Shell command starts with \">\", this Shell will be executed with inputs\n  which come from a file, which name is \".VIM_STD_IN\". If the input file dose\n not exsits, you could give the inputs line by line by typing directly.\n\n  --If a Shell command ends with \";\", this Shell will be executed as a program\n  development tool. You could use this script for your development, then you \n  could pass the compile or interpret command as the Shell parameters with \";\"\n  followed. When the command finished it will jump to the first error line if\n  there are some errors. Of caurse you should special a compiler first."}, {:name=>"blood", :summary=>"A dark red, still somewhat colorful colorscheme", :description=>"This colorscheme uses a dark background with a slight red tint.\nThe syntax elements have colors mostly different from red so its easy for the eye to catch different elements.\n\nI mostly use it for python/d code. As this theme is still very new, there might be some important highlighting groups missing atm, sorry for that.\n\nEdit: Support for this theme is discontinued. If you are really a fan of it, contact me via http://leetless.de, if I see some request for this theme I might continue to support it."}, {:name=>"toggle_unit_tests", :summary=>"plug-in for toggling between source and unit test files", :description=>"Usage:\n\nUse this plug-in when you are doing Test-Driven Development [TDD] in any\nlanguage to quickly switch between unit-test and production code. To make this\nreally fast bind the Toggle function to a function key in your .vimrc:\n\n    \"   [F3]    toggles between (header, ) source and test files.\n    nnoremap    <F3> :<C-U>TUT<CR>\n\nThis plug-in assumes source and unit test files are in the same directory, as\nI believe this to be best practice.\n\nMappings:\n\n<Leader>tut   or   <Plug>ToggleUnitTestsToggle\n    Toggles betwixt source and unit test file\n\nCommands:\n\n:TUT\n\tToggles betwixt source and unit test file\n\nSettings:\n\nBy default, unit_test filenames are deemed to begin with 't_'. \n\nTell toggle_unit_tests.vim your own prefix by setting the following global\nvariable, perhaps in your .vimrc:\n\n    let g:unit_test_prefix='test_'\n"}, {:name=>"VimClojure", :summary=>"A filetype, syntax and indent plugin for Clojure", :description=>"This package contains a filetype, a syntax and an indent plugin\nfor the Clojure (http://clojure.org) programming language.\n\nSince version 2.0, it also contains the interactive part formerly known as \"Gorilla\".\nThis includes:\n* docstring lookup\n* javadoc lookup\n* repl in a vim buffer\n* omni completion\n\n"}, {:name=>"fly.vim", :summary=>"An integrated code development environment (incl. Cscope, Web Search, Man Pages)", :description=>"User Guide: \n        http://www.scribd.com/doc/9662346/flyvim\n        Also included in the tar ball.\n\nSummary:\n\nfly.vim is a vim plugin that may enhance your vim experience (and productivity) with an integrated code development environment. The plugin facilitates rapid code-walkthrough (or flythrough as I call it), enables instant symbol searches and cross references in a large code base, manages stacks of multiple files, includes buffer and directory explorer and integrates code reviews and compilation, all within a simple and intuitive user interface.\n\nfly.vim integrates seamlessly with source code index databases (Cscope for now), web search engines (Google and Yahoo) and UNIX man pages. Most functions are mapped to shortcut keys, allowing you to fly through a large code base or web in a convenient manner. Using the shortcut mappings, you may search for symbols (or multi-word phrases) after visually highlighting them, or by typing them on vim command line or by taking the cursor to the symbol in a vim window.\n\nAlthough there are quite a few features to talk about as you will find in the User Guide, it is very easy to get started,\n\n\u0095\tDownload and place the fly.vim in your $HOME/.vim/plugin\n\u0095\tChange directory (cd) to the root of the source tree (or subtree)\n\u0095\tLaunch vim. Start using the plugin.\n\nThe plugin has been in use on Linux and FreeBSD with vim 6.x and 7.y."}, {:name=>"lightcolors", :summary=>"Another light colorscheme", :description=>"Edit: I dropped support of this theme. If you like it and want me to continue working on it, contact me via http://leetless.de"}, {:name=>"vanzan_color", :summary=>"A dark blue (nearly black) color scheme", :description=>"Edit: I stopped improving/caring about this theme. If you were a fan of it and  it hurts you to hear that, find my contact information on http://leetless.de and tell me so."}, {:name=>"tetragrammaton", :summary=>"dark gvim color scheme", :description=>"A dark gvim color scheme. Includes coloring for bufexplorer and taglist. Screenshot at http://tower.sourceforge.net/tetra.jpg"}, {:name=>"VimIM", :summary=>"Vim Input Method -- Vim 中文输入法", :description=>"The VimIM is a Vim plugin designed as an independent\nIM (Input Method) to support the input of Chinese at will.\n \nVimIM 是专为 vim 玩家开发的插件，可作为 vim 内嵌中文输入法。\n只要您的 vim 能显示中文，您就能用 vim 〖云〗输入中文。\nVimIM 把 vim 的中文编辑潜能，提升到一个全新的高度。\n\n错误报告：http://code.google.com/p/vimim/issues/entry\n民间词库：http://vimim-data.googlecode.com\n自己的云：http://pim-cloud.appspot.com\n新闻论坛：http://groups.google.com/group/vimim\n最新主页：http://vimim.googlecode.com/svn/vimim/vimim.html\n最新程式：http://vimim.googlecode.com/svn/vimim/vimim.vim.html"}, {:name=>"0scan", :summary=>"Tags based search for any things you might want to find(ctags, buffers,...).", :description=>"Scan the entities with one \"Tags Based\" common interface.\n\nScan:\nbuffers to switch to;\nfiles to open;\nwindows and tabs to switch to;\nfiles like c++, python, vim, sco, html and more ( on request ) to jump to things like \"constructors\", \"objects\", \"methods\", etc;\nyour ctags database to browse source code;\ndefinition and declaration of method;\nvim's registers to paste text;\ncurrent file changes to move to;\nvim marks to jump to;\n\nand more ( on request )\n\nCreate your own scans to browse things related to your work flow.\nTo look at sample how to create your own scan just select any file at ~/.vim/autoload/railmoon/oscan/extractor/\nfor example:  ~/.vim/autoload/railmoon/oscan/extractor/buffers.vim\n\nDetailed description:\nhttp://www.railmoon.com/vim_plugins/0scan/Entries/2009/9/26_Introduction.html\n\nDo not hesitate to email me problems or suggestions.\n "}, {:name=>"DBGp-Remote-Debugger-Interface", :summary=>"Debugging interface/client for DBGp protocol", :description=>"these are updates for Sam Ghods script\nhttp://www.vim.org/scripts/script.php?script_id=1929\n\nbased on Seung Woo Shin script\nhttp://www.vim.org/scripts/script.php?script_id=1152\n\nbasically just I add tab-page editing support to the original plugin which based on vim 6.0 below is list of changes made to the python script.\n\n- when multiple tab-page loaded, it will remember the initial tab-page \n  which start the debugging session. every debugging command will \n  make sure that you are debugging on that initial tab, \n  so debugging session wont mess other tab.\n- when debugging session ends on multi tab-page window, other \n  tab-page is no longer being duplicated, it will only restore debugging tab\n\nI've send sam a diff's for this plugin, it seems he's a bit busy, and can't reply my email (yet), it's ok anyway cause I'm planning to add more common feature to the script, \n\nplease if you find any bug, made a patch, diffs, etc, let me know...\n\n\n "}, {:name=>"Spiderhawk", :summary=>"Initial Upload", :description=>"This is the color scheme I use for coding.\n\nIt is very basic, but that is what I like. I will make additions and improvements as I find the need.\n\nI am also open to suggestions."}, {:name=>"proton", :summary=>"Another light colorscheme", :description=>"See http://www.leetless.de/vim.html for a screenshot.\n"}, {:name=>"RunView", :summary=>"Run scripts through filter and display output in separate window", :description=>"RunView runs user-selected lines, selected either via a range provided to the RunView command or by visual-line selection (V), through a filter.  By default, the filter is ksh; however, the runview-filtcmd can be set (let g:runview_filtcmd=\"someotherfilter\") in your <.vimrc> to override this.  The RunView command lets you specify the filter on the command line, too.\n\nThe output is placed in a separate window; it is horizontally or vertically placed.  Source code is left unchanged and visible.\n\nWithout the !, the RunView command uses horizontally adjacent windows.  With the !, the RunView command uses vertically stacked windows.\n\nAs an example, consider the file:\n\techo \"one\"\n\techo \"two\"\n\techo \"three\"\nUsing\n\t:%RunView! ksh\nthe source code window is left on top, but the results of filtering the three lines is shown below it: \n\techo \"one\"\n\techo \"two\"\n\techo \"three\"\n\t-------------\n\tRunView ksh Output Window\n\t=== 01/02/05 06:07:08 ===\n\tone\n\ttwo\n\tthree\nRunView provides a title and a separator.  Subsequent applications of RunView will append a new separator line plus the new filter output.\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#RUNVIEW)\n"}, {:name=>"guepardo.vim", :summary=>"Color scheme inspired by OSX Leopard with a little bit of Python", :description=>"This scheme was inspired by OSX Leopard colors. Is light, blue-greyish and very clean. Though designed for general use, some attention was paid to make it Pythonic.\n\nhttp://img258.imageshack.us/img258/4890/picture13vn4.png\n\nHope You like it.\n\nSince I can't update this file using this site (update doesn  work) you can have the latest version form:\n\nhttp://svn.pixagora.com/vim\n"}, {:name=>"charged-256.vim", :summary=>"256 color colorsheme to supplement dark colorschemes.", :description=>"There are a lot of good color schemes out there, but not many use good colors for vim itself (split, tabs, line numbers, etc...). This colorscheme is meant to be used in conjunction with an existing color scheme. It only highlights vim itself (not any code).\n\nScreenshot: http://chargedsoftware.com/~charged2885/files/charged-256.png"}, {:name=>"ctxabbr", :summary=>"Context-sensitive abbreviations", :description=>"*ctxabbr* is a Vim plugin to provide a convenient way to define a variant of\nnormal |abbreviations|, called as \"context-sensitive abbreviations\".\nNormal abbreviations are short words which will be replaced with the words\nthey stand for whenever you enter the short words.\nBut sometimes, it is useful to replace such abbreviations\nwith some text according to the context - text around the cursor.\n\nFor example,\n\n\tcall ctxabbr#define('sc', 'System.Collections', '<using')\n\nWith the above setting, whenever you enter \"sc\", it is replaced with\n\"System.Collections\" if it is entered after a word \"using\", or\n\"sc\" otherwise.  It is illustrated as follows:\n\n\tusing sc       ==>    using System.Collections\n\t// sc sc sc    ==>    // sc sc sc\n\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-ctxabbr"}, {:name=>"widower.vim", :summary=>"color scheme mostly red on black background", :description=>"Was having trouble finding a red based color scheme so i made a relatively simple one. This is the color scheme i use for programming. It is mostly red on a black background (which matches my computer's color scheme), with some oranges and other colors as well. Happy viming!"}, {:name=>"lilydjwg_green", :summary=>"A light-green background color scheme.", :description=>"Mainly light-blue and green on a light-green background.\nIt is my first vim color scheme, and I don't know much about colors, so it may be not so good as I have expected. But I wish it is useful. Any suggestion, please email me."}, {:name=>"norwaytoday", :summary=>"Norway Today Netbeans theme for Vim (GUI Only)", :description=>"A colorscheme based on the Netbeans Norway Today theme.  It has been tested with Vim 7.2 and Ruby.\n\nGitHub: http://github.com/jpo/vim-norwaytoday-theme/tree/master"}, {:name=>"WOIM.vim", :summary=>"Plugin for WOIM outliner (a system for describing any state or transition)", :description=>"WOIM is a methodology to describe anything - any state, item(s), pattern, action, process, transition, program, instruction set etc. So, you can use it as an outliner, a ToDo list handler, a process design tool, a data modeler, or any other way you want to describe something.\n\nThis plugin does both highlighting and various automatic handling of WOIM lists, like collapsing lists or parts of lists in a sophisticated way.\n\nFor information on WOIM, go to:\n\n http://www.isene.com/artweb.cgi?article=012-woim.txt"}, {:name=>"Dpaste.com-Plugin", :summary=>"A simple script to send your buffer or selection to Dpaste.com and returns a url", :description=>"dpaste.vim is a vim plugin for pasting to dpaste.com (#django's favourite paste bin!)\n\nThe core of the script was inspired by LodgeIt.vim, which is also for a paste bin site. \n\nThanks to Paul Bissex (or pbx on irc) for creating dpaste.\n\nUsage:\n- :Dpaste  (create a paste from the current buffer or selection)\n\nYou can also map paste to CTRL + P, just add this to your .vimrc:\nmap ^P :Dpaste<CR>\n(where ^P is entered using CTRL + V, CTRL + P in Vim)\n"}, {:name=>"reorder-tabs", :summary=>"Reorder your tabs in a simple way.", :description=>"Use <M-PageUp> and <M-PageDown> to move the current tab to the next position."}, {:name=>"searchfold.vim", :summary=>"Fold away lines not matching the last search pattern", :description=>"This script is an improved version of  f.vim  (vimscript #318).\n\nImprovements: folding depth is limited, previous fold settings can be restored, pattern is always the last search pattern.\n\nScript uses manual folds.  The user's manual folds are not preserved (unlike vimscript #2302 does it).\n\n\nUsage:\n\n<Leader>z\nfold away lines not matching the last search pattern.\nWith [count], change the initial foldlevel to ([count] minus one).  The setting will be stored in g:searchfold_foldlevel and will be used when [count] is omitted.\n\n<Leader>iz\nfold away lines that do match the last search pattern (inverse folding).\n\n<Leader>Z\ntry hard to restore the previous fold settings\n\n\n\nCustomization:\n\n:let g:searchfold_maxdepth = 7\n(number) maximum fold depth\n\n:let g:searchfold_usestep = 0\n(boolean)\nPer default, each \"zr\" (after \"\\z\") unfolds 1 more line above the cursor, but several (= step) lines below the cursor.  Set this var to 1 to get the same amount of lines above the cursor.\n\n:let g:searchfold_postZ_do_zv = 1\n(boolean)\nIf 1, execute \"zv\" (view cursor line) after <Leader>Z.\n\n:let g:searchfold_foldlevel = 0\n(number)\n'foldlevel' to set for <Leader>z and <Leader>iz\n\n:let g:searchfold_do_maps = 1\n(boolean)\nWhether to map the default keys or not.\n\n\n\nA few more links to check out:\n- http://www.noah.org/wiki/Vim#Folding\n- vimscript #158 (foldutil.vim)\n- vimscript #578 (allfold.tar.gz)\n\n2010 Sep 30"}, {:name=>"wokmarks.vim", :summary=>"local marks usage more similar to other editors", :description=>"Lets you set and toggle a mark on a line without specifying which mark to use exactly.  wokmarks will choose an unused mark from a pool of allowed marks.  The script is quite verbose: you will get info which mark was set, removed or jumped to.\n\n\nUsage: (default keys)\n\ntm\nset pool mark for current line (if no local mark exists)\n\ntt\ntoggle pool mark for current line\n\ntk\ntj\njump to the [count]th local mark above/below the cursor position (like [' and ]' which are less verbose).\nWithout count, the search for marks wraps around the buffer boundaries.\n\ntl\nlist local marks\n\ntD\nremove all pool marks from the buffer or pool marks in range\n\n\"t\" actually is a built-in command; see below if you want to map other keys in the vimrc.\nLocal marks = pool marks + user marks.  User marks will not be set or removed by the script.\n\nv0.3: The toggle hook will be executed whenever wokmarks adds or removes marks.  Purpose is to be able to update external marks highlighting etc.  Add a command to the hook:\n\n     :autocmd User WokmarksChange   :MyMarksHighlightingUpdate\n\nThis must not be wrapped in an augroup -- this way you can define the autocmd before wokmarks is loaded.\n\n\nCustomization:\n\n:let g:wokmarks_pool = \"abcdfghijklmnopqrtuvwxyz\"\n(string)\nPool of allowed marks.  The marks s and e excluded here (user marks), they are commonly used for start and end positions.\n\n:let g:wokmarks_do_maps = 1\n(number)\nValues:\n0    don't map any keys\n1    map the default keys\n2    map Ctrl-F2 to toggle a mark, and  F2 / Shift-F2 to jump to the next or previous mark\n\nThe default keys are being mapped this way:\n:map tk <Plug>PrevMarkWok\n:map tj <Plug>NextMarkWok\n:nmap tt <Plug>ToggleMarkWok\n:nmap tm <Plug>SetMarkWok\n:map tD <Plug>KillMarksWok\n:nnoremap <silent> tl :marks abcdefghijklmnopqrstuvwxyz<CR>\n\n\nCredits must go to vimscript #66\n\n2010 Mar 28"}, {:name=>"Jifty-syntax", :summary=>"syntax file for jifty web framework", :description=>"syntax support of jifty web framework ( http://search.cpan.org/~sartak/Jifty-0.80408/ )\n\n  * template syntax , folding\n  * model / action schema syntax , folding\n  * schema keywords\n  * functions keywords\n  * syntax highlight for sql, js , html embedded hereDoc\n\nto turn on the syntax folding to fold template and schema columns:\n\n  set fdm=syntax\n\noptions: you can choose what you want to fold, append following lines to your .vimrc\n\n   let jifty_fold_schema = 1\n   let jifty_fold_schema_column = 1\n   let jifty_fold_template = 1\n   let jifty_fold_tags = 1\n   let jifty_fold_dispatcher = 1\n\nSupports sql,javascript,html embedded hereDoc string:\n  you can add prefix to the identifier like SQL.. , HTML... , JS...\n  e.g.\n\n  $sql =<<SQL123\n    select * from books\nSQL123\n  \n  or \n\n  $html =<<HTML123\n  <html>\n      <h1>Jifty</h1>\n  </html>\nHTML123\n\n\npatches are welcome.  :)\n\ncornelius.howl+vim {at} gmail.com\n"}, {:name=>"Scratch--Palardy", :summary=>"Create and use scratch buffers in useful ways", :description=>"Short (< 50 lines) plugin to create scratch buffers.\n\nScratch buffers are used to create new commands:\n\n* ScratchDiff ... compare current buffer against new scratch\n* ScratchFind ... runs a \"find\" command and outputs result in a new scratch\n\nScratchFind is used to emulate most of the functionality of command-t in TextMate.\n\nConfigure ScratchFind's behavior with the g:scratch_find_command variable.\n\nReview the code: http://github.com/jpalardy/etc_config/blob/dce22368aacc842ef6db058280e5fdf3057c0b12/vim/plugin/scratch.vim"}, {:name=>"Thousand-separator", :summary=>"Vim script to put thousand separator in between numbers.", :description=>"Vim script to put thousand separator in between numbers to make them more readable. E.g. 125668899 => 125 668 899 \n"}, {:name=>"Perl-MooseX.Declare-Syntax", :summary=>"perl syntax with Moose and MooseX::Declare keywords", :description=>"hacked up mauke's perl syntax for Moose and MooseX::Declare keywords\n\nThe original is here:\n\nhttp://www.vim.org/scripts/script.php?script_id=2300\n\nOn GitHub: http://github.com/rkitover/perl-vim-mxd"}, {:name=>"jpythonfold.vim", :summary=>"A better python fold script", :description=>"This script allows automatically folding of Python code.\nIt completely rewritten from Jorrit Wiersma's script (vimscript #515; other competitors are vimscript#781 and vimscript#2002).\nThe folding and fold text are completely rewritten: the algorithm systematically set up, so it behaves as accurate as possible (at the cost of some speed).\nMain feature of this script is that it folds empty space, saving lots of screen space (although you can turn it off, see below).\nClasses and defs are folded, of course.\nIndent zero comments separating classes and defs are not folded, so you see the global divisions in your code.\nGlobal code is folded in blocks (separated by comments).\n\nThere are three options. To use them, check the script:\n- Keep empty lines out of a fold (giving more readable classes with folded functions, but using more screen space).\n- Ignore non-python files.\n- Allow for multiline class definitions (at the cost of folding comments starting with the word \"class\") or stricter def checking (missing multiline defs).\n\nKnown bug:\n- multiline strings that look like code are handled as such (basically unfixable, actually)\n\nExample: \n------------------------\n#unfolded comment\ndef foo:\n#folded comment\n    #also folded\n    bar = 5\n\n#unfolded, but the empty line above this one is folded with the function\n#code below will be folded\na = 5\nb = 6"}, {:name=>"Thesaurus", :summary=>"Thesaurus suggestion script", :description=>"Usage:\n   Use the Thesaurus normal mode command to find the synonyms for the word\n   under the cursor. The plugin requires vim to be build with python support,\n   and uses the nltk python module for stemming the words. You can obtain\n   nltk from http://www.nltk.org, or via easy_install.\n\n   The plugin defaults to using the en_US thesaurus files, usually installed\n   with Openoffice.org. These files can be located in\n   /usr/share/myspell/dicts. A different thesaurus file can be specified via\n   the g:thesaurus_file variable. It expects the full path to the files,\n   without the extension. If none is specified, a value of\n   '/usr/share/myspell/dicts/th_en_US_v2' is assumed."}, {:name=>"IndentCommentPrefix", :summary=>"Keep comment prefix in column 1 when indenting. ", :description=>"DESCRIPTION:\n  Indent commands like >>, << and <C-T>/<C-D> in insert mode indent the entire\n  line. For some kinds of comments, like the big boilerplate at the file\n  header etc., the comment prefix (e.g. # for Perl scripts) should remain at\n  the first column, though. \n  This plugin modifies these indent commands so that the comment prefix\n  remains in the first column, and the indenting takes place between the\n  comment prefix and the comment text. For that, it uses the comment\n  configuration provided by the buffer's 'comment' option, which is set by\n  most filetype plugins. \n\nUSAGE:\n  On a line like this:\n  # My comment. \n  The >> command now keeps the # prefix in column 1, and just indents the\n  comment text:\n  #       My comment. \n  This only works if there is at least one whitespace character after the\n  prefix (so that comments like ###### do not become #       ######). \n  Progressive de-indenting will remove all whitespace between prefix and\n  comment text, or leave a single space in between if the 'comments' setting\n  requires a blank after the comment prefix. \n\n  An optional [count] of lines can be supplied to the >> and << commands, as\n  before.\n  In visual mode, the optional [count] specifies how many 'shiftwidth's should\n  be indented; the > and < commands operate on all highlighted lines. \n\n  With the optional repeat.vim script, the commands can also be repeated via '.'. \n  \n  The same behavior is available in insert mode via the <C-T>/<C-D> mappings. \n\n  In case you want to indent lines including the comment prefix, the original\n  indent behavior is mapped to 'g>>' in normal mode and 'g>' in visual mode.\n  (There's no need for the corresponding g<< dedent mappings, just stop\n  dedenting when the comment prefix reaches column 1.)\n  Alternatively, you could also use the >{motion} command, as the > and <\n  operators aren't modified by this script. "}, {:name=>"po.vim--gray", :summary=>"This script is a fork version of Aleksandar Jelenak's script.", :description=>"This script is a fork version of Aleksandar Jelenak's script. It's a ftplugin for PO file (GNU gettext) editing. I fixed two bugs and add three other functions and remapped the keys. Thanks to Aleksandar Jelenak a lot. Detailed description can be found in the source file."}, {:name=>"slimv.vim", :summary=>"SLIME-like Lisp and Clojure REPL inside Vim with Profiling, Hyperspec, Paredit", :description=>"Slimv tries to mimic a subset of SLIME's (Superior Lisp Interaction Mode for Emacs) functionality inside Vim on Linux, Windows and Mac OS X. The script defines functions and keybindings to send s-expressions to a console mode Lisp or Clojure REPL (Read-Eval-Print Loop). Slimv runs its own REPL or connects to a running REPL started by a previous Slimv session, the connection is established when the first Slimv command is executed (e.g. an s-expression is evaluated).\n\nThe Lisp REPL buffer can also be opened inside Vim as a Vim buffer with syntax highlighting and autoindenting, Lisp commands may be entered in the command line, just as in a regular REPL. The script also has a basic support for Clojure REPL.\n\nSlimv supports the same profiling tool that comes with SLIME. The script also has a Common Lisp Hyperspec lookup feature and it is able to lookup symbols in the Clojure API, as well as in JavaDoc. Symbol name completion is supported via Vim's omni-completion based on the hyperspec symbol database.\n\nSlimv comes with Paredit Mode, which is similar to the functionality of paredit.el in Emacs. Paredit Mode tries to maintain the balanced state of matched characters (parenthesis marks, square brackets, double quotes). Matched characters are inserted and removed in pairs, also when working with a block of text (well, mostly). Slimv also implements many paredit.el s-expression handling functions, like Split/Join/Wrap/Splice. Slurpage and Barfage known from Emacs is also possible but in a different fashion: you don't move the list element in or out of the list, rather you move the opening or closing parenthesis over the element or sub-list.\n\nCheck out the screenshot of Slimv having a clisp REPL buffer:\nhttp://img6.imageshack.us/img6/5104/slimvscreenshotx.png\n\nAnother screenshot of Slimv running the Clojure Ants demo:\nhttp://img21.imageshack.us/img21/3949/slimvants.png\n\nAnd this is the symbol name completion in action (no, the pink background is not done by Slimv, this is Vim's default):\nhttp://img18.imageshack.us/img18/5859/slimvcompl.png\n\nHere follows a list of Slimv commands, any similarity with SLIME's menu is not coincidental. :)\nFor a more complete description with keybindings see the included documentation.\n\nEdit commands:\n    *  Close Form\n    *  Complete Symbol\n    *  Paredit Toggle\n\nEvaluation commands:\n    *  Eval Defun\n    *  Eval Last Expression\n    *  Pprint Eval Last Expression\n    *  Eval Region\n    *  Eval Buffer\n    *  Interactive Eval\n    *  Undefine Function\n\nDebug commands:\n    *  Macroexpand-1\n    *  Macroexpand\n    *  Trace\n    *  Untrace\n    *  Disassemble\n    *  Inspect\n\nCompile commands:\n    *  Compile Defun\n    *  Compile and Load File\n    *  Compile File\n    *  Compile Region\n\nProfile commands:\n    *  Load Profiler\n    *  Profile\n    *  Unprofile\n    *  Unprofile All\n    *  Show Profiled\n    *  Profile Report\n    *  Profile Reset\n\nDocumentation commands:\n    *  Describe Symbol\n    *  Apropos\n    *  Hyperspec\n    *  Generate Tags\n\nREPL commands:\n    *  Connect to Server\n    *  Send Input\n    *  Interrupt Lisp Process\n    *  Close and Send Input\n    *  Previous Input\n    *  Next Input\n\nMany Slimv commands operate on s-expressions or symbols, just like in SLIME. Place the cursor at any location inside the s-expression or on the symbol's name then invoke the command. This builds a command specific form and sends it to the running REPL for evaluation.\n\nFor more information see the documentation coupled with the script, please refer to section \"External Utilities\" for other useful Lisp editing tips not covered by Slimv."}, {:name=>"nxc.vim", :summary=>"Syntax highlighter for NXC language on Lego NXT System", :description=>"http://www.csupomona.edu/~almendez/research/robotics/nxc.html"}, {:name=>"muttaliasescomplete.vim", :summary=>"Omnicompletion for mutt aliases", :description=>"This script adds an omnicompletion function that gets completion entries from a mutt aliases file. I tested only on GNU/Linux with vim 7.2, but it should work on other systems.\n\nPlease send comments, suggestions and patches to \"dotfiles at kb dot ccchl dot de\"."}, {:name=>"d.vim--Suhoverhov", :summary=>"Filetype plugin for D", :description=>"Not much is done yet. It has the following features:\n- Autoimport. Searches the tags file for the symbol under the cursor and adds import to the module where it is declared. Default keybinding is <LocalLeader>i\n- OrganizeImports. Removes duplicates, groups imports by root packages and sorts them alphabetically. It won't break your selective and renamed imports and won't touch versioned imports. Default keybinding is <LocalLeader>o\n\nTo include libraries in import search put symlinks to them in your project directory so that ctags can find the sources."}, {:name=>"cca.vim", :summary=>"code_complete_again: a complete plugin mixed the code_complete and snippetsEmu", :description=>"homepage: http://code.google.com/p/vim-cca/\nnow you can use cca.vim and ctk.vim (http://vim-cca.googlecode.com/files/ctk.vim) implements all features of c.vim\n\nyou can add yourself compiler at snippets file, and all the compilers can invoked by ctk.vim.\n\nin windows, you can compile and run, but now in unix, you can only compile : i can find a way to execute a program in a true-terminal. next version will solve this problem.\n\nctk.vim is only in beta version now.\n\nif you have any good idea, please tell me at here: http://code.google.com/p/vim-cca/issues/list\n\n\nUseage:                                                                          \n                                                                                 \n    this is a re-code version of code_complete(new update)                       \n    (vimscript#2427) the                   \n    original version of code_complete is write by mingbai, at                    \n    (vimscript#1764)                       \n                                                                                 \n    this plugin mix the features of code_complete and snippetEmu,              \n    you can put the snippet file in the cca_snippets_folder (defaultly           \n    \"snippets\"), and put template file in cca_template_folder                    \n    (defaultly \"templates\"). then you can input a tigger word and a              \n    hotkey to complete. e.g: if the hotkey is <m-d> (Alt+d or Meta+d,            \n    i found this combine-key is easy to press :) ) and you has a                 \n    snippet named foo, when you input the \"foo<m-d>\", it maybe changed           \n    to: (which \"|\" is the position of your cursor)                               \n                                                                                 \n        foobar|                                                                  \n                                                                                 \n    cca support snippetsEmu-style named tag and command tag in your              \n    snippet (and template file). you can define the tag-mark youself,            \n    and it will be highlighted (if you open the built-in highlight               \n    function of Vim). this is a summary of the kinds of tag. (the tags           \n    will be highlighted special, if you open highlight. and suppose              \n    the cca_tagstart is \"<{\". the tagcommand is ':',  and the tagend             \n    is \"}>\")                                                                     \n                                                                                 \n        - cursor tag:   <{}> or <{:}> if you press hotkey, and next              \n                        tag is a empty tag, the cursor will move to              \n                        there.                                                   \n        - named tag:    <{foo}> after you press hotkey, the name of              \n                        the tag will selected, and if you input a text           \n                        to replace it, all tag has the same name with            \n                        current tag will be replaced to the same                 \n                        value.  e.g:  (the pipe is position of cursor)           \n                                                                                 \n                        |   <{foo:1}> is a <{foo:2}>.                            \n                                                                                 \n                        after you press <a-d> and input \"bar\"                    \n                        directly, it will changed to:                            \n                                                                                 \n                        bar| is a bar.                                           \n                                                                                 \n                        the :1 and :2 mark is for sign tags for                  \n                        regconize it when you make nest tags.                    \n                                                                                 \n        - identifier tag:                                                        \n                        cca must register tag's name and command for             \n                        replace nest tag correctlly.  if you can sure            \n                        the tag is only for name replace, user won't             \n                        make complete in it (that is, it will never be           \n                        a nest tag), and it didn't have any command,             \n                        you can just add a \"cmd\" mark after                      \n                        identifier.  e.g: <{i:}>. and cca won't                  \n                        register this tag.                                       \n                                                                                 \n        - command tag:  <{foo:1}>, or <{:1}> where \"1\" may be any                \n                        number. this is the command number in                    \n                        dictionary b:cca.tag_table. if this is a                 \n                        noname command tag, the command will calculate           \n                        immediately. and if it has a name, it will act           \n                        as a named tag, and calculate the command when           \n                        you leave the tag (goto the next tag).  the              \n                        \"xt\" snippet in common.vim is a noname command           \n                        tag, and \"printf\" in c_snippets.vim is a named           \n                        command tag.                                             \n                                                                                 \n                XXX:    you can complete at normal, select and insert            \n                        mode, but you must notice that the first char            \n                        of tag is not \"in\" the tag.  e.g: |<{A}> now             \n                        cursor is NOT in the tag A. so it is in normal           \n                        mode, so if you want to jump to next tag, you            \n                        should make sure the cursor is just in the tag           \n                                                                                 \nOptions:                                                                         \n                                                                                 \n        cca_hotkey      this defined the hotkey for complete                     \n                                                                                 \n        cca_submitkey   this defined the submitkey.(that is, jump over           \n                        a line, and leave all tags in this line into             \n                        its default value).                                      \n                                                                                 \n        cca_tagstart                                                             \n        cca_tagend                                                               \n        cca_tagcommand  this defined the tag mark. and you can                   \n                        define them as buffer-variables.                         \n                                                                                 \n        cca_search_range                                                         \n                        this define the search range for tag jump.               \n                        defaultly it is 100, it means just search the            \n                        tags in 100 line under current line. if it set           \n                        to zero, only search tags in screen.                     \n                                                                                 \n        cca_filetype_ext_var                                                     \n                        this define the filetype buffer variable name.           \n                        snippets support this name to show the ext               \n                        name for specific filetype. it defaultly                 \n                        \"ft_ext\", and b:ft_ext will be used as a                 \n                        ext-name specified variable name.                        \n                                                                                 \n        cca_locale_tag_var                                                       \n                        this is a dictionary name for snippets file              \n                        show its locale tag marks. it has three item:            \n                        start, end and cmd. it defined tagstart,                 \n                        tagend and tagcommand in specified snippets              \n                        file.                                                    \n                                                                                 \n                XXX:    to use cca_filetype_ext_var and                          \n                        cca_locale_tag_var, see the specified snippets           \n                        files.                                                   \n                                                                                 \n        cca_snippets_folder                                                      \n        cca_template_folder                                                      \n                        these define the default folder where cca to             \n                        find the snippets files and template files. it           \n                        must be found at 'runtimepath'.                          \n                                                                                 \n        cca_auto_indent no use in this version                                   \n                                                                                 \nCommand:                                                                         \n                                                                                 \n        StartComplete                                                            \n        StopComplete                                                             \n                        Start and stop the complete this will register           \n                        or unregister the key map and do some                    \n                        initialliztion or clean work.                            \n                                                                                 \n        DefineSnippet   define the snippets. each snippets file are              \n                        all combined with this command. the format is:           \n                        DefineSnippet {trigger word}: {complete text}            \n                        trigger word can be anything. it can have                \n                        space, can be a symbol. but if it have space             \n                        and have more than one symbol, when you input            \n                        it, you should add a \"#\" before it. e.g: now             \n                        we define a sinppet:                                     \n                                                                                 \n                DefineSnippet trigger with word: this is a trigger with <{}>word \n                                                                                 \n                        then we can input:                                       \n                        #trigger with word<m-d>                                  \n                                                                                 \n                        then it will change to:                                  \n                        this is a trigger with |word                             \n                                                                                 \n                        the cursor is before \"word\"                              \n                                                                                 \n        RefreshSnippets refresh the current snippets file. if no                 \n                        filetype is set, this command will load                  \n                        \"common.vim\" in snippets folder. the snippets            \n                        file is under \"filetype\" folder in snippets              \n                        folder, or named \"filetype_others.vim\", which            \n                        others can be any words. all of snippets file            \n                        will load in.                                            \n"}, {:name=>"Lucius", :summary=>"Composite dark color scheme (GUI and 256 color terminal)", :description=>"This started out by combining parts of several dark color schemes, including oceandeep (vimscript #368), peaksea (vimscript #760), wombat (vimscript #1778), moria (vimscript #1464), and zenburn (vimscript #415). Since then, it has been tweaked to what it is today and works well in both light and dark environments.\n\nFor the 256 color terminal support, guicolorscheme.vim (vimscript #1809) was used. The settings were further modified to match the GUI version as best possible.\n\nFor v3.5, colorsupport.vim (vimscript #2682) was applied to this color scheme. Some of the results from this were merged in with the other color choices from before to make the cterm version more like the gui."}, {:name=>"earthburn", :summary=>"light, earthy, low contrast colorscheme for ruby coding", :description=>"My other desktop apps have a light background and using a dark scheme for coding hurts the eyes when multiple apps are open.\n\nScreen\n  OSX: http://img18.imageshack.us/my.php?image=picture4xs5.png\n\nNOTE: This will NOT look good if you use a thin font like Terminus. In general, smaller, thinner fonts require schemes with higher contrast and color. Subtle schemes like earthburn work best with antialiasing and larger type---Bitstream Vera Sans Mono, Consolas and Monaco."}, {:name=>"ashen.vim", :summary=>"Grayish colorscheme for GVim", :description=>"This colorscheme is inspired by the syntax highlighting found on http://maemo.org/ training material."}, {:name=>"css-color-preview", :summary=>"the script made changes from the css.vim combined with css color preview", :description=>"使用vim写CSS代码，那些乱乱的颜色代码很难记忆吧。可以将6位或者3位的十六进制代码表示的颜色显示出来。从本站下载了css color preview，但是我发现这个东西在7.2上面不能用，于是把其中的代码复制到了css.vim中，整合成了这个，所有代码均是从css color preview当中剪切然后粘贴到css.vim中的。 \n如果不能显示的话，请使用:set t_Co=256，需要256色。\ncss color preview 原版见\nhttp://www.vim.org/scripts/script.php?script_id=2150"}, {:name=>"snipMate", :summary=>"TextMate-style snippets for Vim", :description=>"snipMate.vim aims to be an unobtrusive, concise vim script that implements some of TextMate's snippets features in Vim. A snippet is a piece of often-typed text that you can insert into your document using a trigger word followed by a <tab>.\n\nFor instance, in a C file using the default installation of snipMate.vim, if you type \"for<tab>\" in insert mode, it will expand a typical for loop in C:\n\n for (i = 0; i < count; i++) {\n\n }\n\nTo go to the next item in the loop, simply <tab> over to it; if there is repeated code, such as the \"i\" variable in this example, you can simply start typing once it's highlighted and all the matches specified in the snippet will be updated.\n\nRequires Vim 7 or higher.\nFor a quick introduction, see this screencast: http://vimeo.com/3535418\nFor more help see the documentation that comes with snipMate in ~/.vim/doc/snipMate.txt.\n\nsnipMate.vim has the following features among others:\n  - The syntax of snippets is very similar to TextMate's, allowing easy conversion.\n  - The position of the snippet is kept transparently (i.e., it does not use marks/placeholders inserted into the buffer), allowing you to escape out of an incomplete snippet, something particularly useful in Vim.\n  - Variables in snippets are updated as-you-type.\n  - Snippets can have multiple matches.\n  - Snippets can be out of order. For instance, in a do...while loop, the condition can be added before the code.\n\nBug reports, feature requests, etc. are welcome and can be emailed to me or submitted on the issue tracker: http://code.google.com/p/snipmate/issues/list\n\nIf you would like to watch the development of this plugin, you can also follow it on github: http://github.com/msanders/snipmate.vim\n\nEnjoy!"}, {:name=>"Mastermind-board-game", :summary=>"The board game ", :description=>"Mastermind, if you are not familiar, is a game of guesses. You have to guess a N-digit (N selectable from 1-9, 5 being the default) code based on clues. After you have entered a line, the clue is shown with characters 'X' and 'x'. X means the number (or color) and position is right. x means number is right but position is incorrect.\n\nPlease note that, the position of X/x in the clue area has no correspondence with the actual numbers. In other words a X in the clue box means one of the numbers you have guessed is right and in the correct position. It does not tell you which one; that is where the fun is!\n\nHere is some more info about the game.\nhttp://en.wikipedia.org/wiki/Mastermind_(board_game)"}, {:name=>"StarRange", :summary=>"Searches a string that you selected in visual mode with * or #.", :description=>"This plugin also runs on Vim 6.4.\n\nUsage:\n  [Settings]\n\n  Change mappings (source code).\n\n  [Usual]\n\n  Select a string in visual mode. Press * or # key.\n\nRepository:\n  https://bitbucket.org/shu/starrange/"}, {:name=>"SearchCols.vim", :summary=>"Search within fixed width data column-by-column, rather than row-by-row", :description=>"This script was inspired by a question on StackOverflow.com.  It's my first vim script, and is likely very bad, however I've made my best efforts to have it play nicely.\n\nCreates a command :SearchCols <string>, which can be used to search for the string in fixed-width columns so that the search looks in the first column first, then the second column, etc. rather than the row-by-row search which is standard for vim.  Repeat the command via @: and then @@ since it's a colon-command.\n\nRequirements:\n - This script requires the multvals.vim plugin: http://www.vim.org/scripts/script.php?script_id=171\n\nAssumptions:\n - Assumes that your file is formatted with whitespace-delimited fixed width columns, i.e. there are no spaces inside the data items, only in between them.\n - Assumes that the first line of your file is formatted so that the column widths can be deduced from it."}, {:name=>"EditSimilar", :summary=>"Commands to edit files with a similar filename. ", :description=>"DESCRIPTION\nFiles edited in Vim often relate to one another; maybe they just differ in\nfile extensions, are numbered sequentially, or contain common patterns. One\ncan use the built-in cmdline-completion or filename-modifiers like %:r to\nquickly edit a similar file, or even use special plugins, e.g. to alternate\nbetween source and header files (vimscript #31). \n\nThis script provides custom versions of the :edit, :view, :split, :vsplit,\n:sview, :file, :write and :saveas commands which facilitate quick and simple\nediting of similarly named files. To quickly edit another file based on the\ncurrent file, one can: \n- substitute {old} with {new}\n- go to previous/next numbered file or add any offset to the number\n- change the file extension\nTo open a set of similar files, it is possible to: \n- open all files matching a pattern in split windows\n\nUSAGE\nSubstitutions: Change all occurrences via {text}={replacement} in the\ncurrently edited file (modeled after the Korn shell's \"cd {old} {new}\"\ncommand). This can also be achieved with the built-in filename-modifiers: \n    :edit %:gs?pattern?replacement?\nbut the syntax is difficult to memorize (it's subtly different from :s) and\nharder to type (because one has to use regular expressions instead of the\nsimpler file wildcards). \n\n:EditSubstitute[!] {text}={replacement} [{text}={replacement} [...]]\n:ViewSubstitute[!] {text}={replacement} [{text}={replacement} [...]]\n:SplitSubstitute[!] {text}={replacement} [{text}={replacement} [...]]\n:VsplitSubstitute[!] {text}={replacement} [{text}={replacement} [...]]\n:SviewSubstitute[!] {text}={replacement} [{text}={replacement} [...]]\n:FileSubstitute {text}={replacement} [{text}={replacement} [...]] \n:WriteSubstitute[!] {text}={replacement} [{text}={replacement} [...]] \n:SaveSubstitute[!] {text}={replacement} [{text}={replacement} [...]] \n(+ shortcut commands like :Esubst[!] ...)\n\nNext / Previous: Add an offset to the last number in the currently edited file. \n:[N]EditNext[!] [N]\n:[N]EditPrevious[!] [N]\n:...\n\nRoot: Change the file extension in the currently edited file. \nThis is an enhanced version of the built-in :edit %:r.{extension}\n:EditRoot[!] {extension}\n:...\n\nPattern: Open all files matching the pattern in split windows, similar to how\n :argadd {name} adds all matching files to the argument list. \n\n:SplitPattern {file-pattern}\n:..."}, {:name=>"Buffer-grep", :summary=>"A :vimgrep for buffers.", :description=>"Use \n  Bgrep /expression/ \nto search all buffers for an expression and put it in a new quickfix list."}, {:name=>"repy.vim", :summary=>"Syntax Coloring for Restricted Python", :description=>"This is the syntax file for RePy - https://seattle.cs.washington.edu/wiki/RepyLibrary\n\nIt needs the python.vim from Dmitry Vasiliev found at http://www.vim.org/scripts/script.php?script_id=790\n"}, {:name=>"xsltassistant.vim", :summary=>"xsltassistant.vim helps you write the XSLT file", :description=>"A plugin works with the help of the xml.vim(http://www.vim.org/scripts/script.php?script_id=1397).\nXSLT keywords may be accessed by its short cut,for example,under insert mode,insert the \",sty\" will result in \n<?xml version=\"1.0\"?>\n<xsl:stylesheet\n\tversion=\"1.0\"\n\txmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n</xsl:stylesheet>\nFor more short cuts,check the head of the xsltassistant.vim."}, {:name=>"php.vim--Nicholson", :summary=>"phpDoc Syntax Highlighting for PHP", :description=>"Extends the PHP syntax highlighting, changing comments when using phpDoc tags to resemble the highlighting found in the Vim Java syntax."}, {:name=>"BusyBee", :summary=>"a dark color scheme (modification of Mustang.vim)", :description=>"I like Mustang.vim colour scheme (http://hcalves.deviantart.com/art/Mustang-Vim-Colorscheme-98974484).\n\nIt was still to vivid for my eyes, so I modified it slightly."}, {:name=>"wps.vim", :summary=>"Syntax for Rockbox WPS", :description=>"Syntax highlighting for Rockbox WPS (While Playing Screen) definitions. \n\nThe versions here are obsolete; the latest version can now be found in the Rockbox source tree under utils/editors.\n\nDirect links:\nSummary: http://svn.rockbox.org/viewvc.cgi/trunk/utils/editors/wps.vim?view=log\nLatest version: http://svn.rockbox.org/viewvc.cgi/trunk/utils/editors/wps.vim"}, {:name=>"Vicle", :summary=>"Vim - Interpreter Command Line Editor. Like Chimp or Slimv.", :description=>"Vim - Interpreter Command Line Editor. Use vim like a front-end for edit commands and send it to an interactive interpreter open in a GNU Screen session.\n\nFeatures:\n\n- Command History, just like a shell\n- History save/load\n- Can send only selected text or custom selection\n\nI have been using Python, Ruby, Common Lisp, Scheme, Clojure, Ksh, and others interpreters through Vim and Vicle (and GNU Screen, of course).\n\nUsage:\n\n- Load a Screen session and then load an interpreter (ipython, irb, shell,\n  sbcl, clisp, clojure,  etc.) in the shell:\n  % screen -S rubySession\n  % irb\n  >>\n\n- Open Vim with the vicle plugin and type a command (without press ENTER):\n  puts \"Ruby interpreter\"\n\n- Type <C-c><C-c>  or <C-CR> or :VicleSend  to send to the interpreter the\n  current line (that can be changed by setting other Selection String).\n\n- If the identifiers of the screen are not set, you are going be asked for\n  it (put the session name and window number where your interpreter are.\n  All the windows in a Screen session have a unique number.\n  You can use TAB key for completion in the Session name):\n\n  Session name: rubySession\n  Window number: 0\n\n  In the screen window you are going to see:\n  >> puts \"Ruby interpreter\"\n  Ruby interpreter\n  => nil\n\n  If you disable the Edition Mode by calling the command :VicleEditionToggle\n  the <C-CR> and the other shortcut are going to send all the content of the\n  screen and after that, the screen of Vim are going to be cleared, just\n  like a normal command line.\n\n- You scroll through the commands with the key <C-Up> and <C-Down>   just\n  like the history of the shell.\n\n- Edition Mode\n  This mode do not clear the screen after send the command. Also, it send a\n  command selected by a custom Selection String that is in the variable\n\n  w:vicle_selection_string\n\n  Edition Mode is 1 (ON) by default.\n\n  By default, vicle in Edition mode send the current line.\n  Toggle the Edition Mode using the command :VicleEditionToggle\n\n  The selection string is by default \"0v$y\": go to column 0, enter visual\n  mode, go to the end of line and yank. Always is necesary to end with the\n  yank command \"y\".\n  It can be set to \"{v}y\" to select the current paragraph\n\n- Sending selected text using Vim's Visual Mode\n  Just select the text and press <C-CR> or <C-c><C-c> to send the selected\n  text without clear the screen. It is the same in Vicle Edition Mode and\n  Vicle Not Edicion Mode (send command and clear vim screen)\n\n  Just select the text. Vicle are going to yank it.\n\n- Usefull commands for manage the history. Use absolute paths for history files:\n  :VicleHistoryToggle   \" activate or deactivate history\n  :VicleHistoryClear\n  :VicleHistorySize\n  :VicleHistorySave\n  :VicleHistoryLoad\n\n- To change the screen name and window name use the command\n  :VicleSession\n\n- Some global variables that you can define in your .vimrc:\n\n  let g:vicle_session_name    = 'normal_session_name'\n  let g:vicle_session_window  = 'normal_session_window'\n\n  let g:vicle_history_active   = 0 \" deactivate history\n  let g:vicle_edition_mode     = 1 \" active edition mode\n  let g:vicle_selection_string = \"0v$y\"  \" yank current line\n\n  let g:vicle_hcs             = '~~~your_command_separator~~~'\n\nTips:\n\n- If you want to send commands to a Ruby interpreter (irb), open a file like\n  work.rb or other with the extension .rb  or set the filetype manually\n  :set filetype=ruby\n\n This apply to other languages supported by vim.\n\n- For use Vicle with diferent languages\n\n  autocmd FileType python let w:vicle_selection_string = \"0v}y\"\n  autocmd FileType lisp let w:vicle_edition_mode = 1 | let w:vicle_history_active = 0 | let w:vicle_selection_string = \"v%y\"\n\n- Use of rlwrap to run the interpreter\n\n  It is known that by trying and testing that running the interpreter with rlwrap improves the performances of vicle.\n\n  Clojure with rlwrap:\n  screen -S clojure rlwrap java -cp clojure.jar clojure.main\n\n- About the limit of size for the buffers to send\n\n  Vicle call many times to Screen when the buffer to send its bigger than 1000 characters. This let vicle to send really big buffers.\n\n\nInspired On:\n\n  Slime for Vim from Jonathan Palardy\n  http://technotales.wordpress.com/2007/10/03/like-slime-for-vim/\n  and the work of Jerris Welt\n  http://www.jerri.de/blog/archives/2006/05/02/scripting_screen_for_fun_and_profit/\n"}, {:name=>"jam.vim", :summary=>"Jam (or Boost.Build) syntax", :description=>"I love Jam, but I hated staring at plain text.  I based this off of something by Matt Armstrong (see source).  This is best effort only.  Jam is also known as bjam and Boost.Jam."}, {:name=>"irssilog.vim", :summary=>"Syntax for viewing Irssi logs", :description=>"A syntax file for Irssi logs.  The script can also read your .irssi/saved_colors file (from nickcolor.pl) to colorize your friends' names."}, {:name=>"CommentAnyWay", :summary=>"THIS IS BUGGY DO NOT USE THIS", :description=>"this explanation is only about mappings and its action.\nif you get interested in this script and you want to know more,\ndetailed explanation is written in its script.\n\n\n\nMAPPING:\n\n  In normal mode:\n    If you typed digits string([1-9]) before typing these mappings,\n    behave like in visual mode.\n    so you want to see when you gave digits string, see \"In visual mode\".\n\n    gcc\n        if default. this is the same as |gct|.\n    gcI\n        add one-line comment to the beginning of line.\n    gci\n        add one-line comment to the beginning of non-space string(\\S).\n    gca\n        add one-line comment to the end of line.\n    gcu{type}\n        type is one of 'c I i a'.\n        remove one-line comment.\n    gcw\n        add one-line comment to wrap the line.\n    gct\n        toggle comment/uncomment.\n    gcv{wrap}{action}\n        add various comment.\n    gco\n        jump(o) before add comment.\n    gcO\n        jump(O) before add comment.\n    gcmm\n        add multi-comment.\n    gcmi\n        add if statement.\n    gcmw\n        add while statement.\n    gcmf\n        add for statement.\n    gcms\n        add switch statement.\n    gcmd\n        add do ~ while statement.\n    gcmt\n        add try ~ catch statement.\n\n\n  In visual mode:\n\n    gcc\n        if default. this is the same as |gct|.\n    gcI\n        add one-line comment to the beginning of line.\n    gci\n        add one-line comment to the beginning of non-space string(\\S).\n    gca\n        add one-line comment to the end of line.\n    gcu{type}\n        type is one of 'I i a w'.\n        remove one-line comment.\n    gcw\n        add one-line comment to wrap the line.\n    gct\n        toggle comment/uncomment.\n    gcv{string}\n        add various comments.\n    gcmm\n        add multi-comment.\n    gcmi\n        add if statement.\n    gcmw\n        add while statement.\n    gcmf\n        add for statement.\n    gcms\n        add switch statement.\n    gcmd\n        add do ~ while statement.\n    gcmt\n        add try ~ catch statement.\n\n    And these are default mappings.\n    you can define all mappings what you want.\n\n\n\nEXAMPLES:\n\n    If global variables are all default value...\n    \n    |gcI|\n      before:\n          '   testtesttest'\n      after:\n          '#    testtesttest'\n    \n    |gci|\n      before:\n          '   <- inserted here'\n      after:\n          '   # <- inserted here'\n    \n    |gca|\n      before:\n          'aaaaaaa'\n      after:\n          'aaaaaaa    # '\n    \n    |gcw|\n      before:\n          'aaaaaaa'\n      after:\n          '/* aaaaaaa */'\n    \n    |gcv|\n      before:\n          '   some code here'\n      after:\n          you type 'gcv', and '// XXX:<CR>i'\n          '   // XXX: some code here'\n    \n    |gco|\n      before:\n          '   func1();'\n      after:\n          you type 'gco', and 'func2();'\n          '   func1()'\n          '   // func2();'\n    \n    |gcO|\n      before:\n          '   func1();'\n      after:\n          you type 'gcO', and 'call func1()'\n          '   // call func1()'\n          '   func1();'\n    \n    multiline mappings(gcm*) insert the comments or the statements.\n    \n    global variables change detailed behavior.\n    and all these mappings are also available in visual mode.\n"}, {:name=>"jellybeans.vim", :summary=>"Colorful, dark color scheme", :description=>"A colorful, dark color scheme, inspired by ir_black (http://blog.infinitered.com/entries/show/6) and twilight (vimscript #1677).\n\nDesigned primarily for a graphical Vim, but includes support for 256, 88, 16, and 8 color terminals. On 16 or 8 color terminals, set the \"black\" color to a dark grey for best results.\n\nScreenshots: Ruby (http://nanotech.nanotechcorp.net/downloads/jellybeans-ruby.png), PHP (http://nanotech.nanotechcorp.net/downloads/jellybeans-php.png).\n\nFeel free to fork at http://github.com/nanotech/jellybeans.vim"}, {:name=>"myprojects", :summary=>"Organize/Navigate projects of files (like IDE/buffer explorer/project.vim) ", :description=>"You can use it to set up a list of frequently-accessed files for easy navigation.\nThe list of files will be displayed in a window on the left side of the Vim window.\nUnlike project.vim, myprojects.vim use indentation instead of mark to define folder.\nMain features are file exploration, tags generation, filtering, working directory definition, vim session management, F1 to F12 mapping definition, make definition, errorformat definition, buffers explorer and svn checkout/update/add/commit/revert/diff/blame/info/resolved/log support.\nPlease, report any bug to myprojects.vim[..at..]mageekbox.net.\nHelp for debug is welcome !"}, {:name=>"gitignore", :summary=>"Set 'wildignore' from ./.gitignore", :description=>"Another one from StackOverflow.\n\nIt will read your .gitignore file from the directory where you launch vim and parse it, transforming its format into one suitable for wildignore, and then set that option.  Thus, tab-completion won't present those files as options when using vim commands that expect a filename.\n\nLimitations:\n * This will read the .gitignore file from the directory where you launch vim. No effort is made to look for other .gitignore files and parse them. Alternatively, you could specify an absolute path to a file on the first line.\n * The wildignore option in vim doesn't support the notion of negating ignores like you can in a .gitignore file. That is, you can't say :set wildignore=*.html,!foo.html to have it ignore all html files except foo.html. Therefore, .gitignore lines that start with ! are simply ignored."}, {:name=>"Match-Bracket-for-Objective-C", :summary=>"Automatically inserts matching starting bracket when ] is pressed.", :description=>"This is essentially TextMate's \"Insert Matching Start Bracket\" feature implemented in vim script. Makes it a lot more pleasant to write Objective-C.\n\nJust type ] in insert mode after an object or method you want to wrap in brackets and this will wrap it appropriately; to escape out of it once you're finished, simply type ] again.\n\nFor instance, where | is the cursor:\n\n\"foo|\" becomes \"[foo |]\" after ] is pressed.\n\"foo bar|\" becomes \"[foo bar]|\"\n\"foo: bar|\" becomes \"foo: [bar |]\"\n\"foo bar: baz|\" becomes \"[foo bar: baz]|\"\n\nCertain useful keywords are also wrapped intelligently, for example:\n\"return foo|\" becomes \"return [foo ]|\"\n\"@selector: foo|\" becomes \"[@selector: foo]|\"\n\nHope you like it!"}, {:name=>"gams.vim", :summary=>"Simple syntax highlighting for GAMS modelling software (www.gams.com)", :description=>"As far as I know, there is no syntax highlighting for GAMS modeling language in vim. Here goes one, works with gvim. No other functionality, just the highlighting. "}, {:name=>"numbertotext", :summary=>"replace the numbers with the equivalent text to it", :description=>"When you want the number to be converted to its relevant text/string, it does that for you. Say 781 need to be converted to \"seven hundred eighty one\". \n\nJust type _781 which will be replaced by seven hundred eighty one.\n\nThis script can be used for making this kind of conversion for the numbers 1 to 10000.\n\nWARNING:\nAs this file contains 10000 abbreviation, it will take a couple of seconds to process when you open a file in vim editor.\n\nSUGGESTION:\nso disable this plugin whenever not needed.\n( comment the pasted line in .vimrc file )"}, {:name=>"NumberToEnglish", :summary=>"Converts Arabic numerals to English", :description=>"Converts a number (such as -1234) to English (negative one thousand two hundred thirty four); handles the biggest integer Vim can work with (billions).\n\nThis actually figures out the English value by crunching the numbers (not through abbreviations) and thus doesn't have any startup overhead.\n\nUsage: call the function NumberToEnglish and pass it the number; optionally, a second parameter can be passed in which, if not 1, will cause the return\nvalue's first letter to be capitalized (Two hundred thirty four vs. two hundred thirty four).\n\nTwo insert-mode mappings have been provided for convenience to make this happen on the currently typed number while typing.\n\n<Plug>NumberToEnglish: converts the (positive only) number to English\n\n<Plug>CNumberToEnglish: converts the (positive only) number to English, capitalizing the first letter\n\nTwo identical version of these mappings that start with a D (for \"Detailed\") will append the original number in parentheses after the expansion."}, {:name=>"ansi_blows.vim", :summary=>"Matching ANSI colorscheme for gVim and vim", :description=>"This is a color scheme that I use to make my gVim identical (other than spell highlighting) to Vim.  In order to do this, I set the variables in the ansi_blows.vim colorscheme to exactly match the colors that my terminal emulator uses.  I've tweaked these values in both places to be very readable, to me.  Of course I suggest tweaking them for your own needs, or to match the colors that you are used to in your terminal emulator.  For convenience, I've included in comments some common color sets that I'm aware of.\n\nNote, I made this on vim 7.2, it may not work on any prior versions, but it probably does."}, {:name=>"bufMenuToo", :summary=>"keeps buffer menu at constant length, for tearoff usage", :description=>"The BufMenuToo Plugin makes the Buffer Menu remain a constant size for\nuse as tearoff menu. Now it can permanently stay open to show your \nbuffers and still keeps a minimum size.\n\nversion: 0.0.1\n\nINCOMPATIBLE with MiniBufExplorer"}, {:name=>"simple_comments.vim", :summary=>"Add and remove comments from lines", :description=>"This is a plugin to comment out or remove comments from\nlines in sourcecode using the comments in the commentsring\nvariable. It is intended to be as simple as possible and can only\nhandle the commenting or removal of comments from whole \nlines.\n\nThere are much more sofisticated comment scripts on vim.org, but I wanted something simple, so this script was created."}, {:name=>"runVimTests", :summary=>"A testing framework for Vim. ", :description=>"Every script writer knows how tedious it is to update a published script. In\naddition to the basic functionality, many corner cases (empty line, last line,\netc.) and failures (invalid filename, nomodifiable buffer) need to be tested,\nand people use Vim on different platforms (Windows / Linux), UIs (Console /\nGUI), with different sets of settings (.vimrc) and other loaded plugins.\nThere already exist multiple unit test plugins and assertion facilities [1],\nwhich are good for checking invariants and verifying side effect-free\nimplementation functions, but it is still hard to verify the complete plugin\nfunctionality because custom commands and mappings typically change the buffer\ncontents, open additional windows, or produce other side effects. \n\nThis work aims to show that Vim, together with a shell script driver built\naround it, allows to write succinct, fully automated regression test suites\nthrough a combination of these verification methods:\n- Comparing buffer contents with a predefined nominal file. \n- Matching actual Vim message output with a set of expected messages. \n- Running unit tests or assertions inside Vim and evaluating the test results. \n\nWith this testing framework, Test-Driven Development can finally be practiced\nfor Vim plugins, too. If you have existing plugins, just add a couple of basic\ntest cases for a start. Soon, further updates and modifications can be done\nmuch more rapidly with reduced testing effort, and you can finally tackle that\nbig refactoring that you've been wanting to do all the time, but were too\nafraid of because of the testing effort. The author has been following both\napproaches with great success. \n\n[1]\n- vimUnit (by Staale Flock), vimscript #1125\n- tAssert (by Tom Link), vimscript #1730\n- VimTAP (by Meikel Brandmeyer), vimscript #2213\n- UT (by Luc Hermitte), http://code.google.com/p/lh-vim/wiki/UT\n\n\nEXAMPLE\nSpecify an expected output, e.g. in file 'test001.ok'\n    expected output\n    and more\n    expected output\nand/or specify expected messages in file 'test001.msgok'\n    /\\d\\+ lines changed/\nuse an input file 'test001.in'\n    ExPeCteD OuTpUt\n    AND MORE\n    ExPeCteD OuTpUt\nwrite a short test script 'test001.vim'\n    edit test001.in\n    normal! gg3gugu\n    write test001.out\n    quit!\ncall the test runner\n    $ runVimTests test001.vim\nand the framework invokes the test(s) [suites], compares the actual with the\nexpected output, checks that the messages match, and prints any failures and a\ntest summary:\n    1 file with 2 tests; 0 skipped, 2 run: 2 OK, 0 failures, 0 errors.\n\n\nDESCRIPTION\n\nrunVimTests implements a testing framework for Vim. \n\nSimilar to the tests that are part of Vim's source distribution, each test\nconsists of a testXXX.vim file which is executed in a a separate Vim instance.\nThe outcome of a test can be determined by a combination of the following\nmethods:\n\nSAVED BUFFER OUTPUT\nIf a testXXX.ok file is provided, the testXXX.vim should save a testXXX.out\nfile at the end of its execution. The contents of the testXXX.out test file\nmust be identical to the provided testXXX.ok file for the test to succeed. The\ntest can either generate the test output itself, or start by editing a\ntestXXX.in (or similar) file and doing modifications to it. \nUse this method to test commands or mappings that modify buffer contents. \n\nCAPTURED MESSAGES\nIf a testXXX.msgok file is provided, the testXXX.vim file should generate Vim\nmessages (from built-in Vim commands, or via :echo[msg]), which are captured\nduring test execution in a testXXX.msgout file. The testXXX.msgok file\ncontains multiple message assertions (separated by empty lines), each of which\nis compiled into a Vim regexp and then matched against the captured messages.\nEach assertion can match exactly once, and all assertions must match in the\nsame order in the captured Vim messages. (But there can be additional Vim\nmessages before, after and in between matches, so that you can omit irrelevant\nor platform-specific messages from the testXXX.msgok file.) \nThis method can verify that errors are reported correctly. Also use this\nmethod to test commands or mappings that print informational messages. \n\nTAP UNIT TESTS\t\nIf a testXXX.tap file exists at the end of a test execution, it is assumed to\nrepresent unit test output in the Test Anything Protocol [2], which is then\nparsed and incorporated into the test run. This method allows detailed\nverification of custom commands, mappings as well as internal functions; the\nentire determination of the test result is done in Vim script. Each TAP unit\ntest counts as one test, even though all those test results are produced by a\nsingle testXXX.vim file. If a plan announced more or less tests than what was\nfound in the test output, the test is assumed to be erroneous. \nUse this method to test the internal implementation functions, or to verify\nthings that can be checked easily with Vim script. \n\n[2]\nweb site: http://testanything.org,\noriginal implementation: http://search.cpan.org/~petdance/TAP-1.00/TAP.pm,\nTAP protocol for Vim: http://www.vim.org/scripts/script.php?script_id=2213\n\n\nUSAGE\n\nA test run is started through the \"runVimTests.(sh|cmd)\" script: \n    $ runVimTests [{options}] test001.vim|testsuite.txt|path/to/testdir/ [...]\n\nThe tests are specified through these three methods, which can be combined: \n- Directly specify the filespec of testXXX.vim test script file(s). \n- Specify a directory; all *.vim files inside this directory (except for an\n  optional special _setup.vim file) will be used as test scripts. \n- A test suite is a text file containing (relative or absolute) filespecs to\n  test scripts, directories or other test suites, one filespec per line.\n  (Commented lines start with #.) \n\nAfter test execution, a summary is printed like this:\n    20 files with 33 tests; 2 skipped, 27 run: 16 OK, 11 failures, 6 errors.\n    Tests with skips: test006\n    Skipped tests: test007\n        2 SKIP (tap): Need 'autochdir' option\n    Failed tests: test002, test012, test014, test022, test032, test033\n    Tests with errors: test003, test013, test023, test033"}, {:name=>"utf8-math", :summary=>"Keyboard shortcuts for math UTF-8 symbols", :description=>"This package provides keyboard shortcuts for various UTF-8 mathematical symbols. Some of this is based on LaTeX (e.g., \"\\ldots\" ↦ \"\", \"\\beta\" ↦ β, \"\\mapsto\" ↦ \"↦\"); then there are some other shortcuts (e.g., arrows, quotation marks, dashes.)"}, {:name=>"Vim-Rspec", :summary=>"Enable the use of the spec command inside Vim", :description=>"This plugin make easy to run the spec command inside Vim. You need Hpricot (http://wiki.github.com/why/hpricot)  OR xsltproc (http://www.xmlsoft.org/XSLT/xsltproc2.html) and grep (http://www.gnu.org/software/grep) to use it. Hpricot takes precedence over xsltproc. \nThere are four files on the package: the Vim script, the Ruby script, the XSL file and the syntax file.\n\nThere are two commands available: \n\nYou can run RunSpec and spec will run with the current file (if it's a *_spec.rb file) \nYou can run RunSpecs and spec will run with all the files inside the spec directory. \n\nAfter some of the commands above runs, it will open a new window with the result, where you can click on the error lines where there's a file path with the line number and it will open on a new window, moving the cursor to the line where the error is.\n\nOf course, you can create some mappings to make easier to call the commands.\n\nThe project is hosted at Github: http://github.com/taq/vim-rspec"}, {:name=>"Blazer", :summary=>"Awesome Color scheme", :description=>"Screenshot can be found here: http://mitkokostov.info/resources/images/blazer.png"}, {:name=>"LogMgr", :summary=>"A simple log viewing script", :description=>"Log Mgr is a very simple script to tail logs while editing files. It does the following:\n\n1. Sources a global variable to create key bindings to log files\n2. A user can use the key bindings to see a buffer of the log\n3. The user can refresh this buffer\n\nMore complex versions are planned for the future, until then any suggestions are welcome"}, {:name=>"vimdecdef", :summary=>"Switch between C++ declarations and definitions", :description=>"http://github.com/eddic/vimdecdef\n\nFirst off I would grab the vimdecdef.vim file from the above address\ninstead of the tarballed one as it may be out of date.\n\nvimdecdef is a simple vim script that facilitates transitioning between\ndeclarations and definitions in C++. The script can take a declaration and\neither find it's definition or create one if it doens't exist. The definitions\nwill take into account scope and template. All script actions will utilize one\nof two files. The header file and the source file. Initilially one should\nalways load a header file. If for example one executed ':e include/file.hpp'\nthen the script will automatically assume that the source file is located at\nsrc/file.cpp. The script has a single bindable command that preforms the\nfollowing functions based on it's situation:\n\n * If the cursor is on a normal function activating the script will search the\n   source file for it's definition. If the definition does not exist, it will\n   append one at the bottom of the source file and leave the cursor there.\n * If the cursor is on an inline or template function activating the script will\n   search the source file for it's definition. If it is found in the source\n   file, the cursor will be positioned there. If the definition is not found in\n   the source file the script will try to find it in the header file. If it is\n   found in the header file, the cursor will be positioned there. If it is not\n   found, one will be appended to the bottom of the header file insuring that it\n   stays within any closing #endif that may exist.\n * If the cursor is on a global object or static data member the script will\n   search the source file for it's definition. If the definition does not exist,\n   it will append one at the bottom of the source file and leave the cursor\n   there.\n * If the script's last action ended in a definition in the header file,\n   activating it again will move the cursor back to the original declaration\n   that caused the previous move regardless of the cursors current position.\n * Activating the script at any point in the header file that doesn't fall under\n   any of the above circumstances will result in switching to the source file at\n   it's last cursor position.\n * Activating the script while in the source file will always result in\n   switching back to the header file at it's last cursor position."}, {:name=>"apidock.vim", :summary=>"Plugin that searches http://apidock.com Rails/Ruby/RSpec docs", :description=>"This plugin allows you to browse APIdock's Ruby, Rails, and RSpec docs from within Vim. It will invoke Firefox from the command line, and open the query in a new tab.\n\nThe plugin uses the command 'firefox', which it expects to be in your path, and executable from your shell. See 'Customization' below if you need some other behavior. (In particular, all of you OSX users will have to make a small change.) This should work out of the box on Ubuntu, and most other Linux-based systems on which Firefox is installed.\n\nUsage\n\n    *  RR - Search the Rails docs for the word under the cursor.\n    *  RB - Search the Ruby docs for the word under the cursor.\n    *  RS - Search the RSpec docs for the word under the cursor.\n\nMore info, as well as the unstable, development version is available here: http://github.com/mileszs/apidock.vim/tree/master"}, {:name=>"ack.vim", :summary=>"Plugin for the Perl module / CLI script 'ack'", :description=>"This plugin is a front for the Perl module App::Ack. Ack can be used as a replacement for 99% of the uses of grep. This plugin will allow you to run ack from vim, and shows the results in a split window.\n\nSearch recursively in {directory} (which defaults to the current directory) for the {pattern}.\n\nFiles containing the search term will be listed in the split window, along with the line number of the occurrence, once for each occurrence. [Enter] on a line in this window will open the file, and place the cursor on the matching line.\n\nWhere you would use :grep, :grepadd, :lgrep, and :lgrepadd, you can use :Ack, :AckAdd, :LAck, and :LAckAdd respectively.\n\nFor more information, and to check out the unstable, development version of the plugin, go here: http://github.com/mileszs/ack.vim/tree/master\n\nThis Vim plugin is derived (and by derived, I mean copied, essentially) from Antoine Imbert's blog post Ack and Vim Integration (http://blog.ant0ine.com/2007/03/ack_and_vim_integration.html) (in particular, the function at the bottom of the post)."}, {:name=>"Darkdevel", :summary=>"Vim colorscheme", :description=>"Darkdevel Vim colorscheme."}, {:name=>"codeburn", :summary=>"light scheme optimized for ruby, haml", :description=>"http://img17.imageshack.us/my.php?image=picture1rhj.png"}, {:name=>"std-includes", :summary=>"Add std:: includes to your file according to what you have used.", :description=>"Add c++ std includes to your c++ file.\n\nexecute\n:StdIncludes\nto add includes.\n\nYour code should use std:: explicitly.\n\nScreen shots:\nhttp://www.railmoon.com/vim-std-includes/vim-std-includes\n\nPlease email me problems or suggestions."}, {:name=>"WinMove", :summary=>"Move your gVim", :description=>"Usage:\n  MAPPING:\n      <Up>        move your gVim up.\n      <Right>    move your gVim right.\n      <Down>   move your gVim down.\n      <Left>      move your gVim left.\n\n  GLOBAL VARIABLES:\n      g:wm_move_up (default:'<Up>')\n          if empty string, no mapping is defined.\n\n      g:wm_move_right (default:'<Right>')\n          if empty string, no mapping is defined.\n\n      g:wm_move_down (default:'<Down>')\n          if empty string, no mapping is defined.\n\n      g:wm_move_left (default:'<Left>')\n          if empty string, no mapping is defined.\n\n      g:wm_move_x (default:20)\n          gVim use this when move left or right.\n\n      g:wm_move_y (default:15)\n          gVim use this when move up or down.\n"}, {:name=>"summerfruit256.vim", :summary=>"summerfruit color scheme in 256 colors", :description=>"88/256 color version of Armin Ronacher's summerfruit color scheme (vimscript #1872).  Used Henry So Jr.'s color approximation (vimscript #1243) for the color conversion.\n\nYou can find a screenshot on http://www.mabae.de/2008/02/09/summerfruit-vim-color-scheme-in-256-colors/"}, {:name=>"javaScriptLint.vim", :summary=>"Displays JavaScript Lint warnings in the quickfix error window", :description=>"** also available on github: http://github.com/joestelmach/javaScriptLint.vim **\n\njavascriptLint.vim allows the JavaScript Lint (jsl) program from http://www.javascriptlint.com to be tightly integrated with Vim.  The contents of a javascript file will be passed through the jsl program after the file's buffer is saved.  Any lint warnings will be placed in the quickfix error window.  "}, {:name=>"Session-manager", :summary=>"Plugin for easy session management", :description=>"Usage:\n\n  :call SessionManagerToggle() - open session manager\n      \n <Return> - load selected session file\n        o - load selected session file\n        s - save current session\n        n - create new session\n        d - delete selected session\n        q - close session manager"}, {:name=>"spec.vim--Link", :summary=>"Behaviour-driven design/testing for VIM script", :description=>"This plugin provides a small set of commands to facilitate \nbehaviour-driven design of vim plugins. It basically consists of two \nparts:\n\n    spec   ... BDD-related commands\n    should ... Convenience functions for testing\n\nAccording to BDD theory, you are supposed to write a specification first \nand then make the code fulfill that specification. If you don't believe \nin BDD, you could also think of spec.vim as a more convenient approach \nto unit testing.\n\nAn example specification could look like this:\n\n    SpecBegin 'title': 'Foo', 'sfile': 'autoload/foo.vim'\n\n    It should add numbers.\n    Should be equal foo#Add(1, 2), 3\n    \n    It should not add values of incompatible types.\n    Should throw something 'foo#Add(\"1\", 2)'\n\nSpecification scripts basically are normal vim scripts but must be run \nby the |:Spec| command.\n\n    :Spec[!] [PATH]\n        Run one or more specification files.\n        PATH can be either a file or a directory.\n\nEach specification file should contain a :SpecBegin command that defines \nthe title, and optionally the script context, before/after commands, the \ncontents of a scratch buffer, option sets etc.\n\n    :SpecBegin [ARGUMENTS AS INNER DICTIONNARY]\n        Establish the environment for the current specification.\n        Known keys for ARGUMENTS:\n        \n          title   ... The test's title.\n          file    ... The script context.\n          before  ... Code to be run before each test\n          after   ... Code to be run after each test\n          scratch ... Run spec in scratch buffer\n          cleanup ... A list of function names that will be removed\n          options ... Run the spec against different option sets\n\nExamples:\nhttp://github.com/tomtom/vimtlib/tree/master/spec/\n"}, {:name=>"Fdgrep", :summary=>"Find a function declaration matching a given pattern", :description=>"This is a script that uses a grep-like regex to find a function declaration in the current file/buffer that matches a given regular expression.\n\nIf called like: Fdgrep(-1) the function will ask the user for a pattern to search for.  It will then search the current file buffer for function declarations that contain the given pattern.  If no pattern is given, it will prompt the user again.  If no pattern is given the second time, it will do a search that should match any function declaration.\n\nIf called like: Fdgrep(0) the function will ask search for the last-used pattern (like hitting n after a normal search). If there is no last-used pattern in memory it will prompt the user for a pattern, which can be ignored as stated above to match any function declaration.\n\nThis will work with most C, C++, Objective-C, and Python function declarations that I have seen in my own code or at my job (we have a _very_ large C codebase)."}, {:name=>"blogit.vim", :summary=>"A script to blog on wordpress", :description=>"This script allows you to list, edit, write and publish articles on Wordpress. It uses the XML-RPC API and provides the following commands:\n\n\":Blogit ls [blog_name]\"\n Lists all articles in the blog\n\":Blogit new [blog_name]\"\n Opens page to write new article\n\":Blogit edit <id> [blog_name]\"\n Opens the article <id> for edition\n\":Blogit page <id> [blog_name]\"\n  Edit a blog page\n\":Blogit commit\"\n Saves the article to the blog\n\":Blogit push\"\n Publish article\n\":Blogit unpush\"\n Unpublish article\n\":Blogit rm <id>\"\n Remove an article\n\":Blogit tags\"\n  Show tags and categories list\n\":Blogit this\"\n  Create a blog post from current buffer\n\":Blogit preview\"\n  Preview current post locally\n\":Blogit help\"\n Display help\n\nEdited articles are displayed like mails.\n\nWebsite: http://symlink.me/wiki/blogit"}, {:name=>"popup_it", :summary=>"a easy config auto complete popup", :description=>" a easy config auto complete popup plugin\n\n\"             You can put a user auto popup table in you .vimrc like this:\n\"             let useTable[filetype] = [[auto_exec_complete1, key_word], ...]\n\"\n\"             This is a example for c file.\n\"             let usrTable = {}\n\"             let usrTable[\"c\"] = [\n\"                         \\ [\"\\<c-x>\\<c-o>\",'\\k.','\\k->',\n\"                         \\ 'gtk_\\k\\{2,\\}','GTK_\\k\\{1,\\}','Gtk\\k\\{1,\\}',\n\"                         \\ 'g_\\k\\{2,\\}', 'G_\\k\\{1,\\}'],\n\"                         \\ [\"\\<c-n>\",'\\k\\{3,\\}'],\n\"                         \\]\n\"             When you type . -> gtk_(>2char) GTK_(>1char) Gtk_(>1char) \n\"             g_(>2char) G_(>1char) than <c-x><c-o> exec.\n\"             When you type >3char <c-n> exec.\n\nBlow is default auto popup table\n\"defTable: {{{1\nlet s:defTable = {}\nlet s:defTable[\"*\"]    = [\n            \\ [\"\\<c-n>\",'\\k\\{3,\\}']\n            \\]\nlet s:defTable[\"c\"]    = [\n            \\ [\"\\<c-x>\\<c-o>\",'\\k.','\\k->'],\n            \\ [\"\\<c-n>\",'\\k\\{3,\\}'],\n            \\]\nlet s:defTable[\"tex\"]  = [\n            \\ [\"\\<c-n>\",'\\\\\\k\\{2,\\}','\\([\\|{\\)\\.\\*\\k\\{2,\\}'],\n            \\]\nlet s:defTable[\"html\"] = [\n            \\ [\"\\<c-x>\\<c-o>\",'<','</','<\\.\\*\\s\\+\\k','<\\.\\*\\k\\+\\s\\*=\"\\k'],\n            \\]\n\n"}, {:name=>"quickfixsigns", :summary=>"Mark quickfix & location list items with signs", :description=>"http://github.com/tomtom/quickfixsigns_vim\n\nMark intersting lines with signs:\n\n    - items in the quickfix and location lists (e.g. compilation errors)\n    - marks a-zA-Z\n    - relative line numbers\n    - changes (with respect to the version in the VCS)\n\nOther lists can be configured via the |g:quickfixsigns_lists| variable.\n\nThe attached text is displayed in a balloon when hovering with the mouse \nover the sign.\n"}, {:name=>"lilydjwg_dark", :summary=>"A color scheme with dark background.", :description=>"This is a color scheme with dark background (mainly #222222), and colorful foreground colors.\nScreenshot:\nhttp://missyou11.blog.163.com/prevPhoto.do?photoId=3357662616&albumId=90019764\nterminal version:http://missyou11.blog.163.com/prevPhoto.do?photoId=3357662648&albumId=90019764"}, {:name=>"upAndDown", :summary=>"Swapping a line with the line directly above or below", :description=>"Swapping a line with the line directly above or below it is a common task when writing computer software.\nThis script provides some mappings for normal, insert and visual modes which make this more easily accomplished.\nUsing it allows you to move a line (or multiple lines) of text up or down within a document using the <S> and <Up>/<Down> arrow keys.\nThis is similar to the <Alt> and <Up>/<Down> arrow text movement feature in Eclipse.\nThanks to tips http://vim.wikia.com/wiki/VimTip191."}, {:name=>"PDV-revised", :summary=>"revised, fixed and more featured version of pdv", :description=>"originally the 2005 PDV phpDocumentor for VIM tool (http://www.vim.org/scripts/script.php?script_id=1355)\n\n- fixed bugs w/ parameters not finding booleans\n- added folding marker comment functionality\n"}, {:name=>"glimpse", :summary=>"Use Glimpse searching easily from Vim.", :description=>"Glimpse is a powerful indexing and query system, free for personal use.\n\thttp://www.webglimpse.net\n\nVimGlimpse is a basic Glimpse interface within Vim, based on a Vim Tip from\nJean-Rene David. \n\thttp://vim.wikia.com/wiki/Use_glimpse_from_within_Vim\n\nVimGlimpse retains normal Vim :grep functionality, and provides\nadditional Glimpse features outside of what :grepprg can allow.  By\ndefault, VimGlimpse only searches within your current working directory,\nmaking it ideal for near instantaneous searches across a project.\n\nExamples:\n\n    :Glimpse porksausage\n\n\t\tFind porksausage across all files in the current working directory.\n\n    :Glimpse needle haystack.h$\n\n\t\tFinds all needles in all haystack.h's files.\n\n\t:let g:glimpseFlags = \"-iny -2\"\n\t:Glimpse Anestesiology html \n\n\t\tOutputs all occurrences of  Anestesiology  with  two  errors  in\n\t\tfiles with html somewhere in their full name.\n\n\t:Glimpse windsurfing;Arizona mail;1993\n\n\t\tFinds  all lines containing windsurfing and Arizona in all files\n\t\thaving `mail' and '1993' somewhere in their full name.\n\nResults are placed into the |quickfix| window.  Additionally, the 'q' key is\nbound to the window so you can close it again quickly. \n\n"}, {:name=>"vylight", :summary=>"A color scheme that integrates well with OS X. Light background.", :description=>"This color scheme was designed to look good on an OS X desktop. It has a light background, and colors that fit in well with aqua.\n\nThis color scheme is meant for use with a gui version of Vim.\n\nPreview screenshots:\n\nhttp://www.node.mu/images/vy-color-schemes/vylight.png\nhttp://www.node.mu/images/vy-color-schemes/vylight_js.png\nhttp://www.node.mu/images/vy-color-schemes/vylight_ruby.png"}, {:name=>"FSwitch", :summary=>"Allows switching between companion source files (like a.vim)", :description=>"This script is designed to switch between companion files much like vimscript #31 (a.vim).\n\nOut of the box it will support C and C++ for most usages, unless you've got an interesting setup I haven't guessed.\n\nYou can:\n\n  - switch the file and keep it in the current window with :FSHere\n\n  - switch the file and put it in the window to the left with :FSLeft\n  - switch the file, split the window to the left and put it there with :FSSwitchLeft\n\n  - the same can be done with Right, Above and Below.\n\nThe switch function should be easy enough to call in different ways that give you more exotic behaviour.\n\nUsing the location directive, you can be quite specific about how the companion file is resolved and, more importantly how it's created when it doesn't exist.  This latter bit was apparently a sore point with a.vim and I hope that it's acceptable in FSwitch.\n\nYou can state locations as being the result of\n\n- a regular expression substitution\n- a globbed match\n- a relative path (either unconditionally or only if the current buffer's path matches a required pattern)\n- an absolute path (either unconditionally or only if the current buffer's path matches a required pattern)\n\nUsing an autocmd to set the buffer-local variables allows you great flexibility in specializing the behaviour of FSwitch.\n\nThere are also a couple of public functions you can use to retrieve the companion file for use in your own functions as well."}, {:name=>"HTML-AutoCloseTag", :summary=>"Automatically closes HTML tags once you finish typing them.", :description=>"Automatically closes HTML tag once you finish typing it with >. It is also smart enough to not autoclose tags when in a comment, when they are self-closing, or when they have already been closed.\n\nSo, <body id=\"foo\">, upon typing >, will become <body id=\"foo\">|</body>, where | is the cursor.\nBut, if you type <img src=\"bar.png\">, the script knows to keep it the same."}, {:name=>"Zmrok", :summary=>"Dark, warm color scheme", :description=>"This color scheme is somehow inspired by TextMate\\\\&#039s twilight.\nYou can see screenshot at http://krzysiek-goj.blogspot.com/2009/03/introducing-zmrok.html"}, {:name=>"LBufWin", :summary=>"List loaded buffers in a location list.", :description=>"This plugin contains one command:                                             \n                                                                              \n:Ls |pattern|                                                                 \n                                                                              \nThe command creates a location list containing all of the currently loaded    \nbuffers in vim.  It takes one (optional) argument.  If it is supplied, it is  \ntreated as a pattern, and only buffers matching that pattern will be          \ndisplayed.                                                                    \n                                                                              \nLocation lists are a feature of Vim 7 and up.  Please see :he location-list if\nyou are curious.                                                              \n\nA blog post with more information and a video demo are at http://blog.coryechols.net/2009/03/vim-script-buffer-select-in-window.html"}, {:name=>"tmarks", :summary=>"Browse, place, & delete marks", :description=>"Also available via git: http://github.com/tomtom/tmarks_vim\n\nThis plugin provides commands to browse and to manipulate (place & \ndelete) marks.\n\n:TMarks\n    Browse all marks.\n\n:{range}TMarksPlace\n    Place the next available a-z mark at the specified line.\n\n:{range}TMarksDelete\n    Delete all a-z marks in range.\n\n:TMarksDeleteAll\n    Delete all a-z marks in the current buffer.\n\nYou can use vimscript #2584 to display the marks as signs.\n"}, {:name=>"Skittles-Dark", :summary=>"Dark, colorful scheme", :description=>"Used the molokai color scheme as a template to build off then completely recolored almost everything to be a bit more colorful while still being quite readable.\n\nhttp://shawnbiddle.com/devblog/archive/skittles-dark-a-vim-colorscheme\nScreenshot (PHP): http://shawnbiddle.com/files/skittles_php.png\nScreenshot (C++): http://shawnbiddle.com/files/skittles_cpp.png\n\n(Note: PHP Docblock highlighting in screenshot from custom php.vim syntax modifications, it will not be enabled by the theme)"}, {:name=>"gvimfullscreen_win32", :summary=>"Put gvim in full screen on Windows", :description=>"Allows you to run gvim in full screen on Windows on a single monitor.\n\nThis is a copy of Yasuhiro Matsumoto's VimTweak's EnableMaximize functionality modified to deal with window borders and allowing the window to overlap the task bar.\n\nSource code included and also available on GitHub: http://github.com/derek/gvimfullscreen_win32/tree/master"}, {:name=>"lighttpd-syntax", :summary=>"syntax highlighting for lighttpd config files", :description=>"syntax highlighting for lighttpd config files.\n\nlighttpd (lighty) is lightweight open-source web server: http://www.lighttpd.net/\n\nalways recent version can be grabbed from: http://cvs.pld-linux.org/cgi-bin/cvsweb.cgi/packages/vim-syntax-lighttpd/lighttpd.vim"}, {:name=>"reorder.vim", :summary=>"Reorder the items in natural language lists", :description=>"Supposing you have a list \"foo, bar, and baz\" in English where all of the elements are separated by commas and there's the word \"and\" or \"or\" before the last item in the list.\n\nThe attached Reorder plugin works as follows: Select the list you want to reorder in visual mode (like \"foo, bar, and baz\") then run :Reorder 3,2,1 (or :'<,'>Reorder 3,2,1 --- the line numbers are ignored for your convenience, since Vim puts them in anyway), and watch Vim reorder your list to \"baz, bar, and foo\".\n\nRequires Ruby support, and the facets gem installed."}, {:name=>"todolist.vim--Talevich", :summary=>"Highlights a plain-text to-do list to keep it manageable", :description=>"I use my to-do list as a dumping ground for text and notes, so as long-term ideas pile up my lists will inevitably blow up into hundreds or thousands of lines. This is the natural order of things, and vim with proper highlighting and formatting makes it manageable. I also prefer my text lit up like a Christmas tree.\n\nHighlighted:\n -  lines ending with a colon (\":\")\n -  lines prefixed by an asterisk (\"*\")\n -  from a left curly brace (\"{\") to the end of the line\n -  numbers\n -  standard panic words: TODO, XXX, and others\n -  a few common words that merit emphasis (yes, no, not, ...)\n -  a personalized list of words, e.g. names of friends and co-workers (customizing this will be made easier in a later release)\n\nFollowing the GTD approach is possible:\n\n    project -- end the line with a colon, and indent the tasks\n\n    tasks -- plain text, or starting with a dash, it doesn't matter.\n            (copy and paste is expected to work without reformatting.)\n\n    note -- prefix the line with an asterisk to highlight it in the\n            same style as source code comments. (for 1-liners.)\n\n    contexts -- I keep project definitions small and group them under\n            categories that can be used as keywords. Specifically, I\n            start a new category with a line of underscores and a curly\n            brace before the category name(s) and tags. The }} and {{\n            vim keybindings then work as expected, and * and # work for\n            finding matching category tags within other text.\n"}, {:name=>"Symfony", :summary=>"Color scheme based on symfony php framework documentation", :description=>"I created this color scheme based on the Documenation of Symfony PHP Framework. This color scheme supports a 256 color terminal too, but it hasn\u0092t been heavily tested. \n\nCheck out some screen shots of what it looks like with Vim script, Java and PHP\nhttp://juan.axisym3.net/vim-color-schemes/#symfony\n "}, {:name=>"wargreycolorscheme", :summary=>"Dark color scheme for terminal with full options", :description=>"I like to use vim in the terminal rather than with GUI front-end. So this plugin is only used in terminal and all the GUI settings are the same as the cterm.\n\nBTW:Let the terminal background transparent. You will feel more comfortable.\n\nScreenshots：http://wargrey.yo2.cn/2009/04/05/25586/\n(Maybe you should save them to local to view the full version)"}, {:name=>"paster.vim", :summary=>"paster.vim - A configurable Vim plugin for posting text to a public pastebin", :description=>"Paste text from the current document onto a public pastebin or board.  This \nimplementation is written in vim to reduce external dependencies to Python or\nPerl.  The only external dependency is cURL (e.g. /usr/bin/curl in UNIX-like\nsystems) as an HTTP posting tool.  This posting tool, and all its command line\nparameters are configurable by the user.\n\nFeatures:\n\n* Pastes to any pastebin with a public API\n* The end-user's nick is configurable per use, or via .vimrc\n* Sends syntax highlighting information if the target supports it\n* Uses standard vim range commands for its use\n* Copies the URL where the text was pasted to the system clipboard and the\n  status line\n* Opens a web browser at the page where the paste was posted (v1.2)\n\nUsage\n\nInstall paster.vim to the appropriate default vim scripts directory for your\nconfiguration, normally $HOME/.vim/plugin \n\nOnce installed, the Paste[bin] command may be invoked in any of these patterns:\n\n- :.Paste -- paste the current line\n- :%Paste -- paste the entire document\n- :42,69Paste -- paste lines 42 through 69, inclusive\n\nThe Paste command will work with selections made in visual mode as well.\n\nPaste will prompt for a value if the user hasn't defined a /nick or ID prior\nto the command's first invocation. \n\nUpon successful completion, Paste will display the URL to the paste.  Paste will also copy it to the window manager's clipboard under\nMacVim and gvim.\n\nProject page:  http://eugeneciurana.com/paster.vim\n"}, {:name=>"Haskell-Cuteness", :summary=>"Unicode cuteness for Haskell source", :description=>"This script is inspired by emacs's haskell-unicode-cuteness and based on vimscript #284 by Jos van den Oever.\nConverts all lambdas, equality, non-equality, get, let and arrows (<-, ->) to correspoding unicode symbols. If you think that I should add more characters, please feel free to email me or post your wishes in comments.\n\nscreenshot http://braintrace.ru/media/haskell_cuteness.png"}, {:name=>"svk", :summary=>"syntax and a couple of useful commands for svk commit files", :description=>"Package includes syntax file for svk commit file and  two functions for adding files that are not under source control to commit (and vice-versa)"}, {:name=>"nextfile", :summary=>"open the next or previous file", :description=>"Usage:\n\n  COMMANDS:\n      :NFLoadGlob\n          load globbed files.\n          this command just load files to buffers, does not edit them.\n          options do NOT influence globbed file's list.\n              :NFLoadGlob *   \" to load all files in current directory.\n              :NFLoadGlob .*  \" to load all dotfiles in current directory.\n\n  MAPPING:\n      default:\n          <Leader>n - open the next file\n          <Leader>p - open the previous file\n\n  GLOBAL VARIABLES:\n      g:nf_map_next (default: '<Leader>n')\n          open the next file.\n\n      g:nf_map_previous (default: '<Leader>p')\n          open the previous file.\n\n      g:nf_include_dotfiles (default: 0)\n          if true, open the next dotfile.\n          if false, skip the next dotfile.\n\n      g:nf_open_command (default: 'edit')\n          open the (next|previous) file with this command.\n\n      g:nf_loop_files (default: 0)\n          if true, loop when reached the end.\n\n      g:nf_ignore_dir (default: 1)\n          if true, skip directory.\n\n      g:nf_ignore_ext (default: [])\n          ignore files of these extensions.\n          e.g.: \"o\", \"obj\", \"exe\"\n\n      g:nf_disable_if_empty_name (default: 0)\n          do not run mapping if current file name is empty.\n          behave like old version if this is true.\n\n      g:nf_commands (default: see below)\n          command's names.\n          if you do not want to define some commands,\n          please leave '' in command's value.\n              e.g.: let g:nf_commands = {'NFLoadGlob': ''}\n\n          default value:\n              let g:nf_commands = {\n              \\   'NFLoadGlob' : 'NFLoadGlob',\n              \\ }\n\n      g:nf_sort_funcref (default: '<SID>sort_compare')\n          function string or Funcref passed to sort().\n\n          default function's definition:\n              func! s:sort_compare(i, j)\n                  \" alphabetically\n                  return a:i > a:j\n              endfunc"}, {:name=>"vimuiex", :summary=>"Vim UI extensions: a pack of plugins that use an overlapping  popup list", :description=>"Vim user interface extension\n\nrequires: VxLib (vimscript#3061)\n\nThe plugin implements a popup listbox (an overlapping window). The listbox can display an array of stirng items and can be navigated with the usual Vim keys. The list can be narrowed by interactively applying a filter.\n\nThe listbox is available in console when Vim is built with \"+python\" and the Python curses library is available. For GVim a patch that adds the feature \"+python_screen\" is required (see below).\n\nScreenshots: http://vimuiex.sourceforge.net/screenshot/tvimmenu.png.html \n\nThe commands defined by the plugin are listed below. When a popup listbox appears, you can pres F1 to display the list of keys/commands that are active in the listbox. You can always close a listbox with Esc or q in default mode. The basic operation is described at:\nhttp://vimuiex.sourceforge.net/vimdoc/vimuiex.html#vimuiex-operation\n\nOpening files, selecting buffers:\n   * VxBufListSelect:\n     Buffer explorer/manager.\n     http://vimuiex.sourceforge.net/vimdoc/vimuiex_plugins.html#vimuiex-vxbuflistselect;\n   * VxOpenRecentFile:\n     Display a list of recent files, open selected file.\n   * VxFileBrowser:\n     Browse the local filesystem to open some files.  Recent directory list is available to find files faster.\n   * VxFileFilter:\n     Display a list of files in current directory and subdirectories to a certain depth to open some files.\n\nFinding text:\n   * VxOccurRegex:\n     Display all occurences of a string in the listbox. The search range can be a buffer, a directory or a directory with its subdirectories. Uses vimgrep or external grep for directory searches.\n     http://vimuiex.sourceforge.net/vimdoc/vimuiex_plugins.html#vimuiex-vxoccur;\n   * VxOccurCurrent:\n     Capture output from [I and show it in the listbox.\n   * VxOccurTags:\n     Process current file with ctags, show results in the listbox.\n   * VxOccurRutines:\n     Display the lines that match a predefined regular expression for current filetype. Example implementations for: Vim, Python, D, LaTeX, BibTex, Html, Slice.\n   * VxSourceTasks:\n     Display TODO/Task items in source files. The search range can be defined like with VxOccurRegex.\n   \n   Every command in this section stores its results in vxoccur history. A recent set of search results can be activated with :VxOccurSelectHist without running an expensive search command again.The commands :VxCPrev and :VxCNext select items while the list is closed. The command :VxOccurHist redisplays the active list.\n\n   A helper plugin VxMap enables a faster navigation through the list of results (and also the following: buffers, tabs, errorlist, locationlist).\n   http://vimuiex.sourceforge.net/vimdoc/vimuiex_plugins.html#vimuiex-vxmap;\n\nExtended builtin commands:\n   * VxTextMenu:\n     Display the Vim menu in the listbox, select items from menu.\n   * VxDisplay:\n     Display the output of :display, insert or execute selected register.\n   * VxMarks:\n     Display the output of :marks, jump to mark\n   * VxCmd:\n     Display the output of any command in a listbox\n   * The file vxcmdhist.vim:\n     Implements a function that displays the command line history in a listbox when PgUp is pressed\n\nMoving around:\n   Commands require \"+python_screen\" (download the patch below):\n   * VxLineJump:\n     Display lables in the line-number area and jump to selected label.\n   * VxWindowJump:\n     Display a label in the center of every window and jump to selected window.\n\nLinks:\n\nPatch and prebuilt binaries: http://sourceforge.net/projects/vimuiex/files/\nDetailed descriptions: http://vimuiex.sourceforge.net/plugins.html\nExample keymap: http://vimuiex.sourceforge.net/vimmapexmpl.html\n\n"}, {:name=>"TaskList.vim", :summary=>"Eclipse like task list", :description=>"This script is based on the eclipse Task List. It will search the file for FIXME, TODO, and XXX (or a custom list) and put them in a handy list for you to browse which at the same time will update the location in the document so you can see exactly where the tag is located. Something like an interactive 'cw'\n\nCheck out this page for a screen shot of the script in action.\nhttp://juan.axisym3.net/vim-plugins/#tasklist"}, {:name=>"send.vim", :summary=>"Send current range to STDIN of arbitrary program", :description=>"Send the current range to the STDIN of an arbitrary command line program. Special support for sending text to an ipython interpreter running inside screen (via my send2screen.py script)\nhttp://users.physik.fu-berlin.de/~goerz/blog/2008/09/integrating-vim-with-ipython/"}, {:name=>"PA_translator", :summary=>"Plugin for easily translating single word or sentences without leaving your Vim", :description=>"   So, you are working with any document in foreign language and some word is unknown to you. In normal mode, put cursor on this word and press ,tr (in previous versions: <A-Space>) buttons. The translation of the word will appear in command screan. If word can not be translated you will receive message: 'The `your_word` can not be translated'.\n   To translate range of the words (sentences), go to visual mode by pressing <Esc>,<v> buttons. Select desired text, for instance, by <Shift-V>, and after that press ,tr (in previous versions: <A-Space>).\n"}, {:name=>"textobj-entire", :summary=>"Text objects for entire buffer", :description=>"*textobj-entire* is a Vim plugin to provide text objects to select the entire\ncontent of a buffer.\n\n\nRequirements:\n- Vim 7.2 or later\n- |textobj-user| 0.3.7 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-entire"}, {:name=>"xptemplate", :summary=>"XP's Snippet Template engine for vim", :description=>"Code snippets engine for Vim, with snippets library.\nXPTemplate let you write codes in a smooth, quick and comfortable way.\n\n=======================   Usage   =======================\n\nvim xpt.c\n// Type  \"for<C-\\>\" :\nfor (i = 0; i < len; ++i) {\n   /* cursor */\n}\nPress <tab>,<tab>.. to navigate through \"i\", \"0\", \"len\". Cursor will finally stops at \"/* cursor */\".\n\n\n=======================   Features   =======================\n\n* Live update while typing\n* Navigate forward and backward. <Tab> and <S-Tab>\n* Embed language support like JAVASCRIPT in HTML. Or HTML in PHP\n* Wrapper\n* Smart indent\n* Spacing and line-break of snippet can be easily changed to fit your coding style\n* Pop up menu friendly\n\n\n=======================   Resources   =======================\n\nScreencast : 0.3.9 :  http://code.google.com/p/xptemplate/wiki/ScreenCasts;\n\nGet the latest trunk from svn : http://xptemplate.googlecode.com/svn/trunk/dist;\nProject Home : http://code.google.com/p/xptemplate;\nDiscuss, Bug report, Feature request : http://groups.google.com/group/xptemplate;\nFollow me: http://twitter.com/xptemplate;\n\n*** Troubleshoot / supertab support / bracket complete / other question ***\nhttp://code.google.com/p/xptemplate/wiki/FAQ\n\n\n=======================   Compatibilities   =======================\n\nSupported platform:  Linux, WinXP, // [g]vim 7.2\nSupported Language:  ada c cabal cpp cs css dot erlang gitconfig gnuplot haskell html java javascript lex lua make ocaml perl php ps1 python r ruby(eruby) scheme sh tcl tex vim xml xpt xslt yacc\n\n**Bundles: c_autoimplem cpp_autoimplem javascript_jquery\n\n\nSpecial Thanks to ^0^ : \nChristian.Coutinho  Vincent Berthoux  Fabio  Simon Ruderich"}, {:name=>"Rubytest.vim", :summary=>"Run ruby tests in vim", :description=>"Rubytest.vim will help you to run ruby test (including vanilla test, rspec, shoulda etc.) in vim.\n\nInstallation\n------------\n\nUnzip downloaded file and copy rubytest.vim to your ~/.vim/plugin directory.\n\nUsage\n-----\n\nAfter installation, press <Leader>t will run the test under your cursor if you are editing a ruby test file.\n\nexample:\n\n$ cd <your rails/merb root>\n$ vim test/unit/user_test.rb\n(move cursor into a test case, press <Leader>t)\n\n(<Leader> is mapping to '\\&#039 by default in vim)\n\nBy default, you will see the full result. You can change to use quickfix window by\n\n  let g:rubytest_in_quickfix = 1\n\nin your .vimrc. With this option, only test errors will be shown to you after a test run. You can quick jump to the place where the error raise in source file by moving cursor onto the error message and press return (or ctrl-w return to open a new window and jump).\n\nYou can customize the command which will be used to run the test case by settting these options in your vimrc file:\n\n  let g:rubytest_cmd_test = \"ruby %p\"\n  let g:rubytest_cmd_testcase = \"ruby %p -n '/%c/'\"\n  let g:rubytest_cmd_spec = \"spec -f specdoc %p\"\n  let g:rubytest_cmd_example = \"spec -f specdoc %p -e '%c'\"\n  let g:rubytest_cmd_feature = \"cucumber %p\"\n  let g:rubytest_cmd_story = \"cucumber %p -n '%c'\"\n\n(%p will be replaced by the path of test file, %c will be replaced by the name of test case under cursor)\n\nDefault Key Bindings\n--------------------\n\n<Leader>t: run test case under cursor\n<Leader>T: run all tests in file\n\nYou can change default key bindings:\n\n  map <Leader>\\ <Plug>RubyTestRun \" change from <Leader>t to <Leader>\\\n  map <Leader>] <Plug>RubyFileRun \" change from <Leader>T to <Leader>]\n\nThe latest code is hosted on http://github.com/janx/vim-rubytest/tree/master"}, {:name=>"vimstall", :summary=>"vimstall is a shell script to install vim plugins from vim.org automatically", :description=>"Vimstall is a script to install vim plugins automatically.\n\nSyntax:\n\tvimstall.sh <filename>|<dirname>\n\nIf you run the script on filename it is treated as vim plugin, if run on directory\nit will try to install all files from this directory like they all are vim plugins.\n\nVimstall supports vimballs (vim is run to install them), simple vim files\n(they are treated as sinlge plugin and are copied into ~/.vim/plugin/ directory\nand packed files (zips & tarballs) in which case archive must contain either\nvim/vimball file or packed installation of a plugin (i.e. directories to put into\n~/.vim like `doc', `plugin', `autoload' etc.)\n\nIf during installation process the script runs into some unknown file, it will\nreport this file's name into stderr.\n\nThis script can be used with `downloadvimscripts' script to update & install\nvim plugins automatically.\n\nPlease note: this script is *beta* and not well tested in all configurations.\nI tried to handle most package types met on vim.org, so it should work fine\nmost of time (and it works for me :), but it is strongly advised to backup\nyour ~/.vim directory before you run this script.\n\nBest used with downloadvimscripts (http://www.vim.org/scripts/script.php?script_id=2444).\n"}, {:name=>"sdticket", :summary=>"syntax support of sd (p2p bug tracking system)", :description=>"this supports sd (peer-to-peer bug tracking system) ticket syntax.\n\nhttp://syncwith.us/ \nhttp://github.com/obra/sd"}, {:name=>"vimtemplate", :summary=>"MRU-like simple template management plugin", :description=>"see latest version at http://github.com/tyru/vimtemplate.vim/\nand if you know more about template syntax, see my template files in .vim at http://github.com/tyru/dotfiles/\n\nMy .vimrc setting:\n  let g:vt_template_dir_path = expand(\"$HOME/.vim/template\")\n  let g:vt_command = \"\"\n  let g:vt_author = \"tyru\"\n  let g:vt_email = \"tyru.exe@gmail.com\"\n\n  let s:files_tmp = {\n      &#039cppsrc.cpp'    : \"cpp\",\n      &#039csharp.cs'     : \"cs\",\n      &#039csrc.c'        : \"c\",\n      &#039header.h'      : \"c\",\n      &#039hina.html'     : \"html\",\n      &#039javasrc.java'  : \"java\",\n      &#039perl.pl'       : \"perl\",\n      &#039perlmodule.pm' : \"perl\",\n      &#039python.py'     : \"python\",\n      &#039scala.scala'   : \"scala\",\n      &#039scheme.scm'    : \"scheme\",\n      &#039vimscript.vim' : \"vim\"\n  \\}\n  let g:vt_filetype_files = join(map(keys(s:files_tmp), 'v:val . \"=\" . s:files_tmp[v:val]'), ',')\n  unlet s:files_tmp\n\nUsage:\n  COMMANDS:\n      VimTemplate\n          open template files list.\n\n  MAPPING:\n      gt\n          open template files list.\n\n  GLOBAL VARIABLES:\n      g:vt_template_dir_path (default:\"$HOME/.vim/template\")\n          search files in this dir.\n          to specify multi-dirs, set paths joined with \",\".\n\n      g:vt_command (default:\"VimTemplate\")\n          command name.\n          if this is empty string, won't define the command.\n\n      g:vt_mapping (default:\"gt\")\n          mapping.\n          if this is empty string, won't define the mapping.\n\n      g:vt_list_buf_height (default:7)\n          height of list buffer.\n          buffer shows you list of template files.\n\n      g:vt_filetype_files (default: \"\")\n          when you load one of these files or exec :setlocal ft=<filetype>.\n          search these files in your g:vt_template_dir_path.\n          e.g.: \"java_template.java=java,cpp_template.cpp=cpp\"\n\n      g:vt_author\n          expand <%author%> to this value.\n\n      g:vt_email\n          expand <%email%> to this value.\n\n  TEMPLATE SYNTAX:\n      please open the list buffer\n      after naming current buffer by\n\n      :e[dit] filename\n      or\n      :f[ile] filename\n\n      if you didn't, this script uses template file path.\n      and you don't have to delete whitespace in <%%>.\n      this plugin also allows both <%filename%> and <% filename %>.\n\n\n      <%eval:code%>\n          will expand into result value of code.\n\n      <%path%>\n          will expand into current path.\n          same as <%eval:expand('%')%>.\n\n      <%filename%>\n          will expand into current file name.\n          same as <%eval:expand('%:t')%>.\n\n      <%filename_noext%>\n          will expand into current file name without extension.\n          same as <%eval:expand('%:t:r')%>.\n\n      <%filename_ext%>\n          will expand into current filename's extension.\n          same as <%eval:expand('%:e')%>.\n\n      <%filename_camel%>\n        will expand into camel case of expand('%:t:r').\n        so extension is not added to result.\n\n        e.g.:\n            foo-bar.baz => FooBar\n            foo_bar.baz => FooBar\n\n      <%filename_snake%>\n        will expand into snake case of expand('%:t:r').\n        so extension is not added to result.\n\n        e.g.: FooBar.baz => foo_bar\n\n      <%parent_dir%>\n          will expand into current file's dir.\n          same as <%eval:expand('%:p:h')%>.\n\n      <%author%>\n          same as <% eval: g:vt_author %>.\n\n      <%email%>\n          same as <% eval: g:vt_email %>.\n\n"}, {:name=>"graywh", :summary=>"My personal colorscheme", :description=>"This colorscheme defines gui and 16-color terminal settings.  For 88 or 256-color terminals, use CSApprox.vim (vimscript #2390)."}, {:name=>"SpamAssassin-syntax", :summary=>"Syntax highlighting for SpamAssassin config files", :description=>"* Regular expression highlighting (from perl)\n* COMPLETE recognition of all settings with a good understanding of syntax\n* Settings recognized include all plugins shipped with SA plus a few 3rd-party plugins.\n\nSpell-check is enabled on various pieces for which it is appropriate (vim 7+, you must turn it on first).\n\nThis has also been posted to the spamassassin users mailing list."}, {:name=>"ctk.vim", :summary=>"a fast compile and run plugin for Vim", :description=>"ctk is a fast compile and run plugin for Vim. \n\n-- you can add a modeline in your source code to modifie the behavior of ctk. \n-- you can press a hotkey to invoke compiler.\n-- you can press a key to compiler and run your program.\n-- you can add some trigger word to change your compiler's behavior. just like :CC debug\n\ninstall it, and press :h ctk to see details help"}, {:name=>"textobj-function", :summary=>"Text object for a function", :description=>"*textobj-function* is a Vim plugin to provide universal text objects for\nvarious kinds of functions.  For example, you can select any function with\n|<Plug>(textobj-function-a)| / |<Plug>(textobj-function-i)| (default key\nbindings: af / if).\n\nThe definition of a \"function\" is usually differed depending on what you are\nediting, so at first, you have to tell the definition of what kind of function\nyou want to select to textobj-function.  By default, textobj-function knows\nabout functions in the following languages:\n\t\t\t\t\t    *textobj-function-known-languages*\n- C language\t\t|textobj-function-c|\n- Vim script\t\t|textobj-function-vim|\n\nIf you want to tell about more functions in other languages, see\n|textobj-function-customizing| for how to tell and\nafter/ftplugin/*/textobj-function.vim for the samples.\n\nRequirements:\n- Vim 7.2 or later\n- |textobj-user| 0.3.7 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-function\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-function.html"}, {:name=>"neocomplcache", :summary=>"Ultimate auto completion system for Vim", :description=>"The latest version is in github.\nhttp://github.com/Shougo/neocomplcache/tree/master\n\nCaution:\nBecause all variable names are changed in neocomplcache Ver.5, there is not\nbackward compatibility. In the case of the upgrade, you should use the next\nscript which Mr.thinca made.\nhttp://gist.github.com/422503\n\nScreen shots:\nQuick match.\nhttp://3.bp.blogspot.com/_ci2yBnqzJgM/TD1PeahCmOI/AAAAAAAAADc/Rz_Pbpr92z4/s1600/quick_match.png\nSnippet completion like snipMate.\nhttp://3.bp.blogspot.com/_ci2yBnqzJgM/SfkgaHXLS0I/AAAAAAAAAA4/TmaylpFl_Uw/s1600-h/Screenshot2.PNG\nOriginal filename completion.\nhttp://1.bp.blogspot.com/_ci2yBnqzJgM/TD1O5_bOQ2I/AAAAAAAAADE/vHf9Xg_mrTI/s1600/filename_complete.png\nRegister completion.\nhttp://1.bp.blogspot.com/_ci2yBnqzJgM/TD1Pel4fomI/AAAAAAAAADk/YsAxF8i6r3w/s1600/register_complete.png\nOmni completion.\nhttp://2.bp.blogspot.com/_ci2yBnqzJgM/TD1PTolkTBI/AAAAAAAAADU/knJ3eniuHWI/s1600/omni_complete.png\nCompletion with vimshell(http://github.com/Shougo/vimshell).\nhttp://1.bp.blogspot.com/_ci2yBnqzJgM/TD1PLfdQrwI/AAAAAAAAADM/2pSFRTHwYOY/s1600/neocomplcache_with_vimshell.png\nVim completion.\nhttp://1.bp.blogspot.com/_ci2yBnqzJgM/TD1PfKTlwnI/AAAAAAAAADs/nOGWTRLuae8/s1600/vim_complete.png\n\nSetting examples:\n\" Disable AutoComplPop.\nlet g:acp_enableAtStartup = 0\n\" Use neocomplcache.\nlet g:neocomplcache_enable_at_startup = 1\n\" Use smartcase.\nlet g:neocomplcache_enable_smart_case = 1\n\" Use camel case completion.\nlet g:neocomplcache_enable_camel_case_completion = 1\n\" Use underbar completion.\nlet g:neocomplcache_enable_underbar_completion = 1\n\" Set minimum syntax keyword length.\nlet g:neocomplcache_min_syntax_length = 3\nlet g:neocomplcache_lock_buffer_name_pattern = '\\*ku\\*'\n\t\n\" Define dictionary.\nlet g:neocomplcache_dictionary_filetype_lists = {\n    \\ 'default' : '',\n    \\ 'vimshell' : $HOME.'/.vimshell_hist',\n   \\ 'scheme' : $HOME.'/.gosh_completions'\n    \\ }\n\n\" Define keyword.\nif !exists('g:neocomplcache_keyword_patterns')\n    let g:neocomplcache_keyword_patterns = {}\nendif\nlet g:neocomplcache_keyword_patterns['default'] = '\\h\\w*'\n\n\" Plugin key-mappings.\nimap <C-k>     <Plug>(neocomplcache_snippets_expand)\nsmap <C-k>     <Plug>(neocomplcache_snippets_expand)\ninoremap <expr><C-g>     neocomplcache#undo_completion()\ninoremap <expr><C-l>     neocomplcache#complete_common_string()\n\n\" SuperTab like snippets behavior.\n\"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? \"\\<Plug>(neocomplcache_snippets_expand)\" : pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\t\n\" Recommended key-mappings.\n\" <CR>: close popup and save indent.\ninoremap <expr><CR>  neocomplcache#smart_close_popup() .\"\\<CR>\"\n\" <TAB>: completion.\ninoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\"\n\" <C-h>, <BS>: close popup and delete backword char.\ninoremap <expr><C-h> neocomplcache#smart_close_popup().\"\\<C-h>\"\ninoremap <expr><BS> neocomplcache#smart_close_popup().\"\\<C-h>\"\ninoremap <expr><C-y>  neocomplcache#close_popup()\ninoremap <expr><C-e>  neocomplcache#cancel_popup()\n\n\" AutoComplPop like behavior.\n\"let g:neocomplcache_enable_auto_select = 1\n\n\" Enable omni completion.\nautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\nautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\nautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\nautocmd FileType python setlocal omnifunc=pythoncomplete#Complete\nautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\n\t\n\" Enable heavy omni completion.\nif !exists('g:neocomplcache_omni_patterns')\n\tlet g:neocomplcache_omni_patterns = {}\nendif\n\"let g:neocomplcache_omni_patterns.ruby = '[^. *\\t]\\.\\w*\\|\\h\\w*::'\n\"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete"}, {:name=>"up2picasaweb", :summary=>"upload image to picasaweb with vim", :description=>"upload a image file with vim form local to your picasaweb ablum using the Picasa Web Albums Data API and return the url of your upoad file which can be embed in html"}, {:name=>"ku-quickfix", :summary=>"ku source: quickfix", :description=>"*ku-quickfix* is a source for |ku| to deal with |quickfix|.  You can choose\none from many files in the current quickfix list and do some action on it.\n\n\nRequirements:\n- Vim 7.2 or later\n- |ku| 0.2.0 or later (vimscript#2337)\n\nLatest version:\nhttp://github.com/kana/vim-ku-quickfix\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/ku-quickfix.html"}, {:name=>"TODO-List", :summary=>"Syntax highlighting for a todo list", :description=>"Highlights a basic todo list  \n\nDates of the form dd/mm/yy are highlighted\n\nMajor comments are marked with ==> at the begining of the item\nMinor comments are marked with --> at the begining of the item\n\nTODO, INPROGRESS  and DONE are all highlighted differently and if comments are required with the status then these can be highlighted by writing in the form:\n\n**DONE this job is done and this is its comment**\n\nfor an example look at\nhttp://www.mth.kcl.ac.uk/~matturry/todo.png"}, {:name=>"ProtoDef", :summary=>"Tool to help create skeleton implementations of c++ function prototypes", :description=>"Requires:\n- ctags 5.7 or greater\n- PERL (just PERL, you don't need to have Vim compiled with PERL support)\n- FSwitch Vim utility (vimscript #2590)\n\nCheck out the video demo at: http://www.vimeo.com/4448265\n\nYou've got a C++ header file and you've got some prototypes declared in there.  Now you need to create some definitions in a C++ implementation file.  What do you do?  Yank and paste?  Naw :)  Use this plugin instead...\n\nThe concept is pretty simple: while in the implementation file, you hit a key and all of the currently undefined function prototypes in the header file are automatically pulled in to the implementation file and inserted at the current cursor position.\n\n- Pure virtual functions are ignored\n- Functions that are already defined in the header file are ignored\n- Free functions are brought in\n- Class name is automatically prefixed to member functions\n- Constructors and Destructors sort first\n- Only the missing items are pulled in so you can use this utility to bring the implementation file up to match the contents of the header file\n- However you format the prototype shouldn't really make a difference.  ProtoDef endeavours to reduce all declarations to a canonical form.\n\nProtoDef can now be found on GitHub: http://github.com/ewiplayer/vim-protodef"}, {:name=>"Cabal.vim", :summary=>"Cabal, haskell's build system syntax coloration", :description=>"Syntax for the cabal build system.\nAlso contain a ftdetect file to associate all *.cabal files with the syntax\nShould recognize all commands of the current version.\n\nCheckout http://www.vim.org/scripts/script.php?script_id=2611 for some cabal snippets"}, {:name=>"Vimya", :summary=>"Evaluate buffer content as Python or MEL script in Autodesk® Maya®", :description=>"Vimya can be used to execute the contents of a Vim buffer (or the current visual selection) in Autodesk Maya. The plugin will save the commands to be executed in a temporary file and tell Maya via the command port to source this file. Both MEL and Python scripts are supported, Maya's log can optionally be opened in a separate tab in Vim (requires the Tail Bundle plugin vimscript #1714).\n\nImportant: You need a Vim version with built-in Python support to run this plugin!\n\n* news about this plugin: http://ntworks.net/vimya/index.html\n* or as Atom feed: http://ntworks.net/vimya/index.atom\n* the source code is also available at Gitorious: http://gitorious.org/vimya\n* bug tracker: http://code.ntworks.net/Vimya"}, {:name=>"exVim", :summary=>"IDE all in vim. ", :description=>"= Sites =\n\nexVim official site:       http://www.ex-dev.com/projects/exvim/wiki\nexVim github:             http://github.com/jwu/exvim/\nexVim google code:    http://code.google.com/p/exvim/\n\n= Overview =\n\nhttp://www.ex-dev.com/projects/exvim/wiki/Overview\n\n= Introduction =\n\n-- What is exVim ? --\n\nexVim is a package intgerate ex-vim-plugins, 3rd-vim-plugins and external-tools for developing.\nBy solving the complex communication problem among plugins, external tools, the exVim make\nthe vim as an IDE like environment all in vimscript.\n\n-- What can exVim do ? --\n\nWith exVim you can:\n\n* use one single file ``your_project.vimentry`` to access your project.\n* update tags, IDs and other things you used in your project in one command.\n* browse project files in project window.\n* search files, tags, and words in source code by the builtin method.\n* a powful way to filter search result.\n* trace your code by jump stack.\n* reading code easily by word highlight and macro highlight.\n* view classes hierarchy pictures.\n* compile project in vc/gcc and get error results from them directly through vim.\n* enhanced quick-fix window.\n* communicate with visual studio --- get build errors, open files, add break point and send command make vs.net \ncompiling current file.\n\n-- Usage --\n\nThe exVim use ``your_project.vimentry`` file as the entry of a project. When you put this\nfile in the root directory of the project, and open it by vim, ex-vim-plugins will awared\nand do the rest of the work to help you generate tags, symbols, IDs and other things\ncould be used in your project.\n\nWhen edit a project, exVim provides several method to help you locate the code, get global\nseach results, also an easy and powerful way to filter the search result!\n\n-- Compatible --\n\nexVim is compatible with your original vim. The exVim is nothing but several vim-plugins,\nthere are not too much reasons make it unable to work in your vim.\n\n-- Small, Fast and Stable --\n\nThe principle for solving problem in exVim are:\n\n# try to interact with user dynamically.\n# if the dynamic interactive sufferred performance issue, go for static method.\n# try the best to fulfill a demand in vimscript.\n# if it can't, try the best to fulfill the demand by external tools.\n# if it still can't, try the best to preprocess the result and return to rule No.1\n\nexVim is designed to follow this principle which make it small, fast and stable.\n\n"}, {:name=>"Vim-R-plugin", :summary=>"Plugin to work with R", :description=>"This plugin improves Vim's support for editing R code and makes it possible to integrate Vim with R. The functionality is similar to what you can find in Tinn-R and ess mode of emacs. This filetype plugin uses either screen or Conque Shell plugin (Linux, OS X, or other Unix) or python (Microsoft Windows) to communicate with R. \n\nScreenshots and Debian package: http://sites.google.com/site/jalvesaq/vimrplugin\n\nMAIN FEATURES:\n\n  * Syntax highlighting for R syntax, including:\n      - Special characters in strings.\n      - Functions of all installed packages (must be updated manually).\n      - Special highlighting for R output (.Rout files).\n      - Spell check only strings and comments.\n      - Fold code when foldmethod=syntax.\n  * Smart indentation for R syntax.\n  * Integrated communication with R:\n      - Start/Close R.\n      - Send lines, selection, paragraphs, functions, blocks, entire file.\n      - Send commands with the object under cursor as argument: help, args, plot, print, str, summary, example, names.\n      - Send to R the Sweave and pdflatex commands.\n      - Run R inside a Vim's buffer (with Conque Shell plugin; currently available only on Unix -- Linux or OS X).\n  * Omni completion (auto-completion) for R objects (.GlobalEnv and installed\n    packages. The list of installed packages must be updated manually.\n  * Ability to see R's documentation in a Vim's buffer:\n      - Automatic calculation of the best layout of the R documentation buffer (split the window either horizontally\n        or vertically according to the available room).\n      - Automatic formating of the text to fit the panel width.\n      - Send code and commands to R (useful to run examples).\n      - Jump to another R documentation.\n      - Syntax highlighting of R documentation.\n  * Object browser (.GlobalEnv and loaded packages; must be updated manually):\n      - Send commands with the object under cursor as argument.\n      - Call R's help() with the object under cursor as argument.\n      - Syntax highlighting of the object browser.\n  * Most of the plugin's behavior is customizable.\n\n\nUSE: Please, read the plugin's documentation.\n\nFILES:\n\n   autoload/rcomplete.vim\n   autoload/rplugin.vim\n   bitmaps/RClearAll.bmp\n   bitmaps/RClearAll.png\n   bitmaps/RClear.bmp\n   bitmaps/RClear.png\n   bitmaps/RClose.bmp\n   bitmaps/RClose.png\n   bitmaps/ricon.png\n   bitmaps/ricon.xbm\n   bitmaps/RListSpace.bmp\n   bitmaps/RListSpace.png\n   bitmaps/RSendBlock.bmp\n   bitmaps/RSendBlock.png\n   bitmaps/RSendFile.bmp\n   bitmaps/RSendFile.png\n   bitmaps/RSendFunction.bmp\n   bitmaps/RSendFunction.png\n   bitmaps/RSendLine.bmp\n   bitmaps/RSendLine.png\n   bitmaps/RSendParagraph.bmp\n   bitmaps/RSendParagraph.png\n   bitmaps/RSendSelection.bmp\n   bitmaps/RSendSelection.png\n   bitmaps/RStart.bmp\n   bitmaps/RStart.png\n   doc/r-plugin.txt\n   ftdetect/r.vim\n   ftplugin/rhelp.vim\n   ftplugin/rnoweb.vim\n   ftplugin/r.vim\n   ftplugin/rbrowser.vim\n   indent/r.vim\n   indent/rnoweb.vim\n   r-plugin/build_omni_list.R\n   r-plugin/etags2ctags.R\n   r-plugin/functions.vim\n   r-plugin/omni_list\n   r-plugin/vimbrowser.R\n   r-plugin/vimhelp.R\n   r-plugin/r.snippets\n   r-plugin/rpager.sh\n   r-plugin/rpython.vim\n   r-plugin/rsyntax.vim\n   r-plugin/specialfuns.R\n   r-plugin/tex_indent.vim\n   r-plugin/vimActivate.js\n   syntax/rbrowser.vim\n   syntax/rout.vim\n   syntax/r.vim\n"}, {:name=>"explorer", :summary=>"Filesystem explorer", :description=>"This is the original explorer.vim plugin from Vim 6.4. As of Vim 7.0 this functionality is provided by the netrw.vim plugin but I prefer the original."}, {:name=>"compilerjsl.vim", :summary=>"Compiler plugin for JavaScript Lint. ", :description=>"Compiler plugin for JavaScript Lint (http://www.javascriptlint.com), an (open\nsource) checker for JavaScript syntax and coding techniques based on the Mozilla\nFirefox JavaScript engine. \n\nThis is similar to vimscript #2578 and vimscript #2729, but this script uses\nVim's compiler infrastructure (so checks are triggered by the :make command),\nmaking its use consistent with syntax checkers for other languages. "}, {:name=>"dosbatch-indent", :summary=>"Indenting for filetype dosbatch", :description=>"I couldn't find an indent script for DOS batch files so I wrote a simple one.  It just follows these rules:\n - generally keep the indent of the previous line \n - if previous line is not a comment and has ( and no matching ), increase indent\n - if this line starts with ), decrease indent\n\nI started by cutting down and modifying Erik Janssen's awk.vim."}, {:name=>"nimrod.vim", :summary=>"Nimrod syntax support", :description=>"Syntax file for Nimrod.\n\nThis file is basically a modified python.vim (http://www.vim.org/scripts/script.php?script_id=790) ... you might recognize it.\nI have no idea if it works because I haven't actually tried to code in Nimrod and have next to nothing to test it with :P"}, {:name=>"coding_style.vim", :summary=>"Coding style per project", :description=>"If you have many projects with different coding styles (indent settings), then use this plug-in"}, {:name=>"SearchPosition", :summary=>"Show relation to search pattern matches in range or buffer. ", :description=>"DESCRIPTION\nThe mappings, command and operator provided by this plugin search a range or\nthe entire buffer for a pattern (defaulting to the current search pattern),\nand print a summary of the number of occurrences above, below and on the\ncurrent line, e.g.: \n    1 match after cursor in this line, 8 following, 2 in previous lines; total 10 for /\\<SearchPosition\\>/ \n    5 matches in this fold, 9 before, 6 following; total 21 for /endif/ \n    On sole match in this line, 40 in following lines for /let/ \n    :144,172 7 matches in this fold for /let/ \n\nThis provides better orientation in a buffer without having to first jump from\nsearch result to search result. \n\nMOTIVATION\nIn its simplest implementation\n    :nnoremap <A-n> :%s///gn<CR>\n    41 matches on 17 lines\nprints the number of matches for the current search pattern. This plugin\nbuilds on top of this by providing more context with regards to the current\ncursor position plus additional information. \n\nThis plugin is similar to IndexedSearch.vim (vimscript#1682) by Yakov\nLerner. \n\nUSAGE\n:[range]SearchPosition [{pattern}]\n\t\t\tShow position of the search results for {pattern} (or\n\t\t\tthe current search pattern (@/) if {pattern} is\n\t\t\tomitted). All lines in [range] (or the entire buffer\n\t\t\tif omitted) are considered, and the number of matches\n\t\t\tin relation to the current cursor position is echoed\n\t\t\tto the command line. \n\n<Leader><A-n>{motion}\tShow position for the current search pattern in the\n\t\t\tlines covered by {motion}. \n[count]<A-n>\t\tShow position for the current search pattern in the\n\t\t\tentire buffer, or [count] following lines. \n{Visual}<A-n>\t\tShow position for the current search pattern in the\n\t\t\tselected lines. \n\n[count]<A-m>\t\tShow position for the whole word under the cursor in the\n\t\t\tentire buffer, or [count] following lines. \n\t\t\tOnly whole keywords are searched for, like with the\n\t\t\t|star| command. \n[count]g<A-m>\t\tShow position for the word under the cursor in the\n\t\t\tentire buffer, or [count] following lines. \n\t\t\tAlso finds contained matches, like |gstar|. \n{Visual}<A-m>\t\tShow position for the selected text in the entire\n\t\t\tbuffer. "}, {:name=>"smartmatcheol.vim", :summary=>"Smart matching of trailing whitespace", :description=>"If you don't want to highlight trailing whitespaces in all filetypes, then you can use the plug-in.\n\nNB: If you are using `textwidth' option, then plug-in will highlight all characters after `textwidth' length.\n\n"}, {:name=>"indentcpp.vim", :summary=>"Indent file for Google C++ Coding Style", :description=>"Inspired by Google C++ Coding Style (http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml)"}, {:name=>"ScmFrontEnd-former-name--MinSCM", :summary=>"An abstract front-end for Mercurial/Git/Bazaar", :description=>"Repository:\n  http://bitbucket.org/ns9tks/vim-scmfrontend/\n\nIssues:\n  http://bitbucket.org/ns9tks/vim-scmfrontend/issues/\n\nDownload latest(development) version\n  https://bitbucket.org/ns9tks/vim-scmfrontend/get/tip.zip\n\nScreenshots:\n  http://bitbucket.org/ns9tks/vim-scmfrontend/wiki/Screenshots\n\n==============================================================================\nINTRODUCTION                                             *minscm-introduction*\n\nMinSCM is a plugin to manage your repositories of various SCM system (VCS).\nMinSCM provides an abstract interface, so you can manage repositories without\nbeing aware of differences between SCM systems.\n\nFeatures:\n  - Mercurial support\n  - Git support\n  - Bazaar support\n  - Abstract interface\n  - Many commands\n  - Syntax highlighting for status and diff in commit buffer.\n  - Syntax highlighting for annotate buffer\n  - Completion of revision/branch names\n  - Completion of locations for pull/push\n  - Repositories report on status line\n  - Collaboration with Fuzzyfinder plugin\n\n\n==============================================================================\nINSTALLATION                                             *minscm-installation*\n\nPut all files into your runtime directory. If you have the zip file, extract\nit to your runtime directory.\n\nYou should place the files as follows:\n>\n        <your runtime directory>/plugin/minscm.vim\n        <your runtime directory>/autoload/minscm.vim\n        <your runtime directory>/autoload/minscm/mercurial.vim\n        ...\n<\nAnd then update your help tags files to enable MinSCM help. See\n|add-local-help| for details.\n\n==============================================================================\nUSAGE                                                           *minscm-usage*\n\nSee |minscm-commands|.\n\n                                                           *minscm-statusline*\n                                                        *g:minscm_getStatus()*\nTo Show Repositories Information In Status Line ~\n\nUse g:minscm_getStatus(). (see also: |'statusline'|)\n\n                                                          *minscm-fuzzyfinder*\nFuzzyfinder Plugin ~\n\nMinSCM uses APIs of fuzzyfinder.vim. Following commands are dependent on\nfuzzyfinder.vim:\n\n        :MinSCMFindFile\n\nfuzzyfinder.vim is available at\nhttp://www.vim.org/scripts/script.php?script_id=1984 .\n\n==============================================================================\nCOMMANDS                                                     *minscm-commands*\n\nAll commands is for a reposity including a file of current buffer.\n\nIf MinSCM command was executed with a ! modifier, the priority of SCM systems\nis reversed.\n\n                                                              *:MinSCMCommand*\n:MinSCMCommand[!]               (Default mapping: \\s:)\n\n        Executes any command you input.\n\n                                                           *:MinSCMCommitFile*\n:MinSCMCommitFile[!]            (Default mapping: \\sC)\n\n        Opens temporary buffer for you to enter commit message. Write the\n        commit buffer and a file whose buffer was current before is committed.\n\n\n                Used SCM commands ~\n                hg  : commit\n                git : commit\n                bzr : commit\n\n                                                        *:MinSCMCommitTracked*\n:MinSCMCommitTracked[!]         (Default mapping: \\s<C-c>)\n\n        Opens temporary buffer for you to enter commit message. Write the\n        commit buffer and all tracked files are committed.\n\n                Used SCM commands ~\n                hg  : commit\n                git : commit -a\n                bzr : commit\n\n                                                            *:MinSCMCommitAll*\n:MinSCMCommitAll[!]             (Default mapping: \\sc)\n\n        Opens temporary buffer for you to enter commit message. Write the\n        commit buffer and all files in a working directory of a current\n        repository are committed.\n\n        This command is different from |:MinSCMCommitTracked| in adding\n        untracked files to the current repository.\n\n                Used SCM commands ~\n                hg  : commit -A\n                git : add -a && commit -a\n                bzr : add && commit\n\n                                                             *:MinSCMCheckout*\n:MinSCMCheckout[!]              (Default mapping: \\so)\n\n        Checkouts specified revision.\n\n                Used SCM commands ~\n                hg  : update\n                git : checkout\n                bzr : (unavailable)\n\n                                                                *:MinSCMMerge*\n:MinSCMMerge[!]                 (Default mapping: \\sm)\n\n        Merges working directory of a current repository with specified\n        revision.\n\n                Used SCM commands ~\n                hg  : merge\n                git : merge\n                bzr : (unavailable)\n\n                                                               *:MinSCMBranch*\n:MinSCMBranch[!]                (Default mapping: \\sb)\n\n        Creates new branch.\n\n                Used SCM commands ~\n                hg  : branch\n                git : checkout -b\n                bzr : (unavailable)\n\n                                                         *:MinSCMBranchDelete*\n:MinSCMBranchDelete[!]          (Default mapping: \\sB)\n\n        Deletes a branch.\n\n                Used SCM commands ~\n                hg  : (unavailable)\n                git : branch -d\n                bzr : (unavailable)\n\n                                                               *:MinSCMRebase*\n:MinSCMRebase[!]                (Default mapping: \\sr)\n\n        Moves changeset onto specified revision.\n\n                Used SCM commands ~\n                hg  : rebase --keep -b\n                git : rebase\n                bzr : (unavailable)\n\n                                                                 *:MinSCMPull*\n:MinSCMPull[!]                  (Default mapping: \\s[)\n\n        Pulls changes from specified repository.\n\n                Used SCM commands ~\n                hg  : pull\n                git : pull\n                bzr : pull\n\n                                                                 *:MinSCMPush*\n:MinSCMPush[!]                  (Default mapping: \\s])\n\n        Pushes changes to specified repository.\n\n                Used SCM commands ~\n                hg  : push\n                git : push\n                bzr : push\n\n                                                             *:MinSCMDiffFile*\n:MinSCMDiffFile[!]              (Default mapping: \\sD)\n\n        Starts diff mode (like vimdiff) in new tabpage between a file of a\n        current buffer and its version of specified revision.\n\n                Used SCM commands ~\n                hg  : cat\n                git : cat-file -p\n                bzr : cat\n\n                                                              *:MinSCMDiffAll*\n:MinSCMDiffAll[!]               (Default mapping: \\sd)\n\n        Shows differences between all files in a working directory of a\n        current repository and specified revision.\n\n                Used SCM commands ~\n                hg  : diff\n                git : diff\n                bzr : diff\n\n                                                              *:MinSCMLogFile*\n:MinSCMLogFile[!]               (Default mapping: \\sL)\n\n        Shows revision history related to a file of a current buffer. (see\n        also: |g:minscm_hgLogOption| |g:minscm_gitLogOption|\n        |g:minscm_bzrLogOption|)\n\n                Used SCM commands ~\n                hg  : glog\n                git : log\n                bzr : log\n\n                                                               *:MinSCMLogAll*\n:MinSCMLogAll[!]                (Default mapping: \\sl)\n\n        Shows revision history. (see also: |g:minscm_hgLogOption|\n        |g:minscm_gitLogOption| |g:minscm_bzrLogOption|)\n\n                Used SCM commands ~\n                hg  : glog\n                git : log\n                bzr : log\n\n                                                         *:MinSCMAnnotateFile*\n:MinSCMAnnotateFile[!]          (Default mapping: \\sn)\n\n        Shows commit information per file line.\n\n        Lines which were modified at the commit of specified revision or added\n        at the initial commit are highlighted.\n\n                Used SCM commands ~\n                hg  : annotate -nudq\n                git : blame\n                bzr : annotate --all --long\n\n                                                               *:MinSCMStatus*\n:MinSCMStatus[!]                (Default mapping: \\ss)\n\n        Shows a list of changed files.\n\n                Used SCM commands ~\n                hg  : status\n                git : diff --name-status && ls-files --exclude-standard -o\n                bzr : status\n\n                                                                 *:MinSCMGrep*\n:MinSCMGrep[!]                  (Default mapping: \\sg)\n\n        Searches for specified pattern and creates a |quickfix| list.\n\n                Used SCM commands ~\n                hg  : grep -n\n                git : grep -n -e\n                bzr : (unavailable)\n\n                                                         *:MinSCMLoadModified*\n:MinSCMLoadModified[!]          (Default mapping: \\s!)\n\n        Loads all modified files with vim after unloading (by :bdelete)\n        buffers which are not modified files.\n\n                Used SCM commands ~\n                hg  : status -mn\n                git : ls-files -m\n                bzr : status -SV\n\n                                                              *:MinSCMLoadAll*\n:MinSCMLoadAll[!]               (Default mapping: \\s<CR>)\n\n        Loads all tracked files with vim after unloading (by :bdelete) buffers\n        which are not tracked files.\n\n                Used SCM commands ~\n                hg  : locate -f\n                git : ls-files\n                bzr : ls\n\n                                                             *:MinSCMFindFile*\n:MinSCMFindFile[!]              (Default mapping: \\sf)\n\n        Opens a selected file from all tracked files using Fuzzyfinder. \n        (see also: |minscm-fuzzyfinder|)\n\n                Used SCM commands ~\n                hg  : locate -f\n                git : ls-files\n                bzr : ls\n\n==============================================================================\n"}, {:name=>"blogger", :summary=>"The only one vim script which handles Blogger. Powered by Metarw.", :description=>"See http://github.com/ujihisa/blogger.vim"}, {:name=>"jlj.vim", :summary=>"Syntax for JLJ Post files", :description=>"A syntax file for the files used by JLJ (http://umlautllama.com/projects/perl/#jlj), a LiveJournal entry system for the terminal.\n\nEasily supports including either HTML or Markdown (see http://www.vim.org/scripts/script.php?script_id=1242) syntax, and adding your own should be easy as well."}, {:name=>"tango-morning.vim", :summary=>"Light Grey Tango color theme based on Morning", :description=>"\"tango-morning\" is a colorscheme inspired by the \"morning\" colorscheme by Bram.\nThe gui colors use the Tango Color palette, while the terminal colors are retained from the \"morning\" colorscheme.\nThe \"morning\" color scheme has problems in displaying diffs, which this theme tries to address, and uses elegant soft shades.\n\nSample Screenshot :http://img190.imageshack.us/img190/1848/vimtangomorningtheme.png"}, {:name=>"haskell.vim--Dusek", :summary=>"Updated with `for` in standalone deriving.", :description=>"Variation of the original `haskell.vim` that recognizes `for` as a keyword (due to its use in standalone deriving declarations)."}, {:name=>"PLI-Auto-Complete", :summary=>"Complete Member Variable For z/OS Enterprise Compiler PLI", :description=>"Complete member variable for PL/I filetype on mainframe, inlcude variables in copybooks.\nCurrently support 2 types of copybook, e.g. normal copybook and maps in diffrent folders.\n\nStep 1\nChange .vimrc:\nlet g:CpyCompleteInd     = 1            \"Enable complete for copybook, other value will disable\nlet g:CpyIdentification  = \"CPY\"        \"Copybook Include Method\nlet g:CpyDir             = \"Folder1\"    \"Folder Of Copybook, Include The Last /\nlet g:MapIdentification  = \"MAP\"        \"Maps Include Method\nlet g:MapDir             = \"Folder2\"    \"Folder Of Maps, Include The Last /\nif has(\"autocmd\")\n   au FileType pli setl cfu=plicomplete#Complete\nendif\n\nThe Include Method should be change base on yours, \nlike %INCLUDE CPY(COPYBOOK); it should be CPY\n\nStep 2\nPress <C-X><C-U> after type one dot,the variables should be poped up.\n\nScreen Shot:http://photo1.bababian.com/upload13/20090505/F9FC04A492D5138A202EA67F368AF38F.jpg"}, {:name=>"python_coverage.vim", :summary=>"syntax highlighting for python coverage files", :description=>"highlights `.cover` files as made by `coverage.py` and `figleaf`"}, {:name=>"Erlang_detectVariable", :summary=>"detect Erlang variables", :description=>"Erlang variables are formated in '[A-Z]\\+[a-zA-Z0-9]*'.\nbecause, enhace default erlang.vm.\n\nsee below:\n----------------------------------------------------------------------------\nsyn match   erlangVariable         /[A-Z]\\+[a-zA-Z0-9]*/\nhi erlangVariable guifg=#23BF73\n----------------------------------------------------------------------------"}, {:name=>"bandit.vim", :summary=>"Colour Scheme", :description=>"This is the colour scheme that I use for all editing tasks.  It is primarily designed for use with a dark background (as I find this easier on the eyes), but I'm gradually adding more support for light backgrounds as well.  It makes full use of the available colour palette, so looks better in gvim than in console vim (although I still like the console version).\n\nMore details (and screenshots) at https://sites.google.com/site/abudden/contents/Vim-Scripts/bandit-colour-scheme\n\nUnusual Features\n\nThe colour scheme has a few slightly unusual features as Vim colour schemes go:\n\nSupport for a lot more highlighting groups than most colour schemes (including the result of the ctags-based highlighter: vimscript#2646, and Dr Chip's rainbow.vim).\n\nRequires Vim 7 or above (I got irritated by the syntax for colour schemes, so I made my own) If you install the associated syntax file, it is self colouring, so you can see the colour scheme clearly when viewing the source file (the 'ColourAssignment' text is highlighted appropriately: see the screenshots on the website).\n\nSemi-automatic generation of light background colour choices (see website)"}, {:name=>"CTAGS-Highlighting", :summary=>"Extra highlighting of typedefs, enumerations etc (based on ctags)", :description=>"This set of scripts is designed to increase the number of highlighting groups used by Vim.  This makes it quicker and easier to spot errors in your code.  By using ctags and parsing the output, the typedefs, #defines, enumerated names etc are all clearly highlighted in different colours.\n\nThe idea was based on the comments in :help tag-highlight, but I wanted to take it a little further.\n\nThis is achieved through a little python script to interact with ctags and to parse the result and a small Vim script that makes Vim read the resulting files.  Finally, a new command (:UpdateTypesFile) is added (with optional ! for recursive operation) to keep the generated files up to date.\n\nAt present, the highlighter supports the following languages:\nC/C++\nJava\nPerl\nPHP (experimental)\nPython\nRuby (largely untested)\nVHDL\nAdding more languages is extremely simple.\n\nTo show the benefit of this plugin, there are some screenshots and a more detailed description at the following website:\n\nhttp://sites.google.com/site/abudden/contents/Vim-Scripts/ctags-highlighting"}, {:name=>"Templates-for-Files-and-Function-Groups", :summary=>"Yet another file template script.", :description=>"This script is a modified version of the template plugin documented here: http://lucumr.pocoo.org/cogitations/2007/08/03/vim-file-templates/.\n\nKey features:\n\nMultiple templates (optionally with a default) for any file type; for example, you can have a template for a given file type and for each project you're working on or company you're working for.\n\nSupport for automatic population of certain parameters, such as the file name, the year, the date or an upper case version of the basename etc etc (more can be added very easily).\n\nOther parameters can be included and a dialog box will pop up to ask for the value.  The last-used value (from this Vim session) will be remembered as the default.\nSupport for fixed-width entries.\n\nA template is just a source file stored in ~/.vim/templates or vimfiles/templates (depending on OS) with some identifiers inserted in appropriate places.  An identifier starts with \"<+\" and ends with \"+>\".  In the identifier, there can be:\n\nKeywords surrounded by '$' signs: these are automatically expanded.  Supported keywords are (examples shown for file Flash.c):\n\n$BASENAME$ (e.g. Flash)\n$UBASENAME$ (e.g. FLASH)\n$LBASENAME$ (e.g. flash)\n$FILENAME$ (e.g. Flash.c)\n$YEAR$ (e.g. 2008)\n$DATE$ (e.g. 3/9/2008)\n\nKeywords surrounded by '#' signs: the user will be asked what these mean (the same replacement will be used for all entries in the file).  For example, you may want to have:\n\n#MODULE_TITLE#\n#PROJECT_TITLE#\n\nA semicolon followed by an 'R' and then zero or more '+' signs.  This provides a fixed-width entry.  See the included examples for details.\n\nThere are example C source and header templates included in the distribution.\n\nAfter creating a new file and setting the file name, the template is loaded with the command\n\n:LoadFileTemplate <TemplateName>\n\nWhere <TemplateName> should be replaced by the name of your template (e.g. \":LoadFileTemplate Example\" for the example template).  If you're editing a '.c' file, example.c will be loaded and if you're editing a '.h' file, example.h will be loaded.  If you add an entry in .vimrc to set the global variable g:file_template_default, it is then possible to simply run \":LoadFileTemplate\" and the default will be used.\n\nIn addition, you can use the command:\n\n:AddTemplate <TemplateName>\n\nto add a template at the current location in the current file.  I use this (for example) to add a circular buffer to an existing module.  Again, it will differentiate by extension, so you can have a template for the code implementation and the header definitions.\n\n\nMore details available at:\n\nhttps://sites.google.com/site/abudden/contents/Vim-Scripts/file-templates\n"}, {:name=>"darkburn", :summary=>"Darkburn: A darker mod of Zenburn", :description=>"darkburn is a mod of zenburn vimscript#415 by Jani Nurminen. I added more contrast and brighter colors. \nI hope you will enjoy it."}, {:name=>"PBASIC-syntax", :summary=>"PBASIC syntax file", :description=>"Syntax file for PBASIC 2.5; should work for older versions."}, {:name=>"darkZ", :summary=>"★ i made this color scheme and use it in past 3 years.hope you like it too", :description=>"i made this color scheme and use it in past 3 years.\nhope you like it too^^"}, {:name=>"fitnesse.vim", :summary=>"Syntax coloring for FitNesse Wiki Pages", :description=>"fitnesse.vim is a syntax file (and eventually some filetype specific functions) \nfor editing FitNesse tests using Vim.  It was created to make it easier to work\nwith FitNesse files.  It works great in conjunction with \"It's All Text\" a \nplugin for FireFox (found at https://addons.mozilla.org/en-US/firefox/addon/4125). \n\nFitNesse is a collaborative testing tool that uses Wiki markup to create test \nscripts as web pages.  See http://fitnesse.org for more information.\n\nSyntax coloring supports:\n      * Numerous keywords in Slim and FitNesse are supported:\n         scenario, script, Query:, start, check, reject, show, Comment, comment, \n         !see, !include, !See, null, !define, !include\n      * Simple collapsible sections (with folding enabled)  !** *!, !**> *!\n      * Table cell delimiter \"|\"\n      * Cell contents\n      * Incomplete cell is error\n      * !style_(class) \n      * Strings in Quotes\n      * Scenario variables @parametername\n      * Symbols $symbolname\n      * Simple WikiWord support"}, {:name=>"bblean.vim", :summary=>"detect keyword in bblean resource file", :description=>"detect for\n  menu.rc\n  blackbox.rc\n  extensions.rc"}, {:name=>"cuteErrorMarker", :summary=>"Display error marks on line which contain errors after compilation", :description=>"Display a mark on lines which contain compilation errors listed on the quickfix window.\n\nScreenshots :\nhttp://img34.imageshack.us/gal.php?g=gvimsupercutennesswithk.png\n\nTested on :\n- Ubuntu 9.04 (GVim && vim)\n- Windows XP/Vista/7"}, {:name=>"Arduino-syntax-file", :summary=>"Syntax file for Arduino .PDE files", :description=>"This syntax file provides syntax highlighting like the Arduino IDE. That is, Arduino specific names like digitalWrite is highlighted in addition to C++ syntax.\n\nI've bascially just implemented Richard Bronosky's idea from the arduino mailing list: http://arduino.cc/pipermail/developers_arduino.cc/2009-January/000398.html"}, {:name=>"squirrel.vim", :summary=>"Squirrel Language syntax file", :description=>"syntax file for Squirrel (http://squirrel-lang.org/default.aspx) "}, {:name=>"Simple-R-Omni-Completion", :summary=>"Auto completes R identifiers from the current file and the included libraries", :description=>"Scans the current buffer for R identifiers and library() calls, offers autocompletion, first on the identifiers in the current file, than on the ones in the library.\nIdentifiers within the current file are ordered by distance to the current line, standoffs are resolved by first suggesting those before the current line.\n\nSee also vimscript #2628 for a different approach to this."}, {:name=>"VOoM", :summary=>"Vim Outliner of Markers -- two-pane outliner and related utilities", :description=>"VOoM (Vim Outliner of Markers) is a plugin for Vim that emulates a two-pane text outliner.\n\nScreenshots and an animation: http://vim-voom.webs.com/\n\nVOoM was originally written to work with start fold markers with level numbers, that is {{{1, {{{2, {{{3, etc. This is the most versatile outline markup -- it is suitable for organizing all kinds of files, including source code, and it allows features not possible with other markups. See :help fold-marker. Markers are specified by option 'foldmarker'. (End fold markers with levels, }}}3, }}}2, etc. are not supported.)\n\nCurrent VOoM version can also work with several other markup formats that have headlines and support an outline structure. (Headlines are also called headings, headers, section headers, titles.) The following markup modes are available:\n        wiki \u0097 MediaWiki, headlines are surrounded by '='\n        vimwiki \u0097 vimwiki plugin (script_id=2226)\n        viki \u0097 Viki/Deplate plugin (script_id=861), Emacs Org-mode\n        rest \u0097 reStructuredText section titles\n        html \u0097 HTML heading tags, single line only\n        thevimoutliner \u0097 The Vim Outliner plugin (script_id=517)\n        vimoutliner \u0097 VimOutliner plugin\n        python \u0097 Python code class browser\n\nMAIN FEATURES:\n        - Works with Vim buffers, not with files on disk as ctags-based tools.\n        - Automatic outline update on entering the Tree buffer.\n        - Not a 'filetype' plugin. Has (almost) no side effects on the buffer being outlined.\n        - Fast and efficient enough to handle MB-sized files with >1000 headlines. (Some modes can be slower.)\n        - Outline structure manipulation: move nodes Up/Down, Promote/Demote, Copy/Cut/Paste, Insert New Headline, Sort in various ways.\n\n\n=========================================\n    OVERVIEW\n=========================================\nThere are four main Ex commands: Voom, Voomhelp, Voomexec, Voomlog.\n\n:Voom\n        Create outline of the current buffer. Outline is constructed from lines with start fold markers with level numbers, which become headlines. Outline is displayed in a special buffer in separate window which emulates the tree pane of a two-pane outliner. Such buffers are referred to as Tree buffers. The current buffer becomes a Body buffer.\n\n:Voom {MarkupMode}\n        Create outline for headline markup other than start fold markers with levels. See above for available markup modes.\n\n:Voomhelp\n        Open help file voom.txt as outline in a new tabpage.\n\n:Voomexec [vim|py]\n        Execute text in the current node or fold as Vim script or Python script. This is useful for testing code snippets and for organizing scripts by segregating them into nodes or folds. This command can be used independently of the outlining functionality provided by the command :Voom.\n\n:Voomlog\n        Create scratch buffer __PyLog__ and redirect Python stdout and stderr to that buffer. This is useful when developing Python scripts and when scripting Vim with Python. This feature is completely independent from the rest of the plugin.\n\nNOTE: commands Voomexec and Voomlog attempt to emulate similar features of Leo outlining editor.\n\n\n=========================================\n    REQUIREMENTS\n=========================================\nThis plugin uses Python and requires Python-enabled Vim 7.x, that is Vim compiled with the Python interface. Your Vim is Python-enabled if it can do\n        :py print 2**0.5\n        :py import sys; print sys.version\n\nPython version should be 2.4-2.7. Python 3 is not supported.\n\nVim version 7.2 or above is preferred. Version 7.1 should also work. Versions 7.0 might work as well but has not been tested. Vim should be compiled using normal or bigger feature set.\n\n\n=========================================\n    QUICK DEMO (no installation needed)\n=========================================\nExtract VOoM archive to any folder. Open \"plugin/voom.vim\" in Vim and do\n        :so %\n        :Voom\nThis will create Tree buffer for voom.vim, which will become a Body buffer.\n\nAll VOoM mappings, except Return and Tab, are for Tree buffers only.\n\n<Up>, <Down>, <Left>, <Right> arrow keys move around the Tree and select new node (Normal mode).\n\n<Return> selects node the cursor is on and then cycles between Tree and Body. So, to select another node, move to it with h, j, etc. and hit Return.\n\n<Tab> cycles between Tree and Body windows without selecting node.\n\n<Space> expands/contracts node without selecting it. Standard Vim folding command (zo, zc, zR, zM, etc.) can be used as well.\n\nLeft mouse click in the Tree selects node. If the click is outside of headline text, the node's expanded/contracted status is toggled.\n\nEdit a headline (line with a numbered fold marker) in voom.vim and go back into the Tree: the outline will be updated.\n\n<C-Up>, <C-Down> move node or a range of sibling nodes Up/Down.\n<C-Left>, <C-Right> move nodes Left/Right (promote/demote).\n(If the above CTRL mappings are not recognized by your Vim, you can also move nodes Up/Down/Left/Right with <LocalLeader>u/d/l/r .)\n\nExecute the command :Voomhelp to see all commands and mappings.\n\n\nTo create outline for another buffer, execute the command :Voom for it\n        :tab h netrw\n        :Voom\nFolder \"voom_samples\" contains some outlines to experiment with. File \"calendar_outline.txt\" is a rather large outline for stress-testing purposes: 3.1 MB, 56527 lines, 4160 headlines.\n\n\nTo outline the most common Wiki format (headlines are marked by strings of = on both sides)\n        :Voom wiki\n\n\nTo try Python Log Buffer feature:\n        :Voomlog\n        :py assert 2==3\n        :py print u'\\u2248 \\u2260'\n        :py import this\n"}, {:name=>"Changing-color-script", :summary=>"Syntax highlight colors change gradually based on minutes of hour", :description=>"Tested and works well with Java, Javascript, HTML, CSS, PHP, ActionScript (with 'actionscript.vim', available elsewhere in Vim.org), AutoIt and AutoHotKey.  Gradually changes changing syntax colours over the hour. Works well with time script to speech script: http://www.vim.org/scripts/script.php?script_id=3257\n\nBenefits of script are:\n* reduce eye-strain and headaches caused by staring at code on-screen\n* reduce dis-orientation by keeping user informed of passing time\n* reduce boredom by stimulating right side of the brain\n\nOnly affects GVIM. Nothing happens in VIM."}, {:name=>"g15vim", :summary=>"Display on the Logitech G15 keyboard LCD screen.", :description=>"This script can display on the Logitech G15 keyboard LCD screen information about the current cursor position (line and col) and the current buffer name."}, {:name=>"clips.vim", :summary=>"Syntax highlighting for CLIPS", :description=>"Syntax file for CLIPS, C Language Integrated Production System"}, {:name=>"plumbing.vim", :summary=>"Syntax highlighting for Plan 9 plumbing files", :description=>"This script will color highlight Plan 9's plumber configuration files (plumbing).\n\nAll of the different elements of a plumbing file can be colored separately, per your own preference.  Here is an example:\n\nhttp://img194.imageshack.us/img194/4161/plumbingvimsyntax.png"}, {:name=>"ywvim", :summary=>"Another input method(IM) for VIM, supports all modes.", :description=>"======= Chinese version =======\n注意!!!\n=======\n如果你是 ywvim 的老用户, 在升级到新版本前, 请注意你的旧版本到新版本间*所有*的发布公告和已知 bugs, 然后查找对应设置的说明, 以免不兼容的改变给你带来不便.\n如果你在使用中发现了问题, 在报告之前, 请先查看下面的\"已知问题\"部分, 确定是否为已知 bug.\n\n下载最新脚本(1.20): http://www.vim.org/scripts/download_script.php?src_id=11117\n下载最新码表(1.13): http://www.vim.org/scripts/download_script.php?src_id=10786\n\n介绍:\n=====\nywvim 是一款不依赖外部输入法的, 在 vim 里输入中文的工具. 支持在 vim 的所有模式下输入中文. 它面向的对象主要为形码用户, 对于拼音用户, 你可以试试有更多功能的 vimim[http://www.vim.org/scripts/script.php?script_id=2506].\n坏消息: ywvim 和 vimim 的键绑定冲突, 你必须在两者中做出选择.\n\n.vimrc 里的设置:\n================\n把下面的几行放到你的 .vimrc 中:\n\n-----\nlet g:ywvim_ims=[\n            \\['cj', '仓颉', 'cangjie.ywvim'],\n            \\['wb', '五笔', 'wubi.ywvim'],\n            \\['wb98', '五笔98', 'wubi98.ywvim'],\n            \\['zm', '郑码', 'zhengma.ywvim'],\n            \\['zy', '注音', 'zhuyin.ywvim'],\n            \\['ar30', '行列', 'array30.ywvim'],\n            \\['py', '拼音', 'pinyin.ywvim'],\n            \\]\n\nlet g:ywvim_py = { 'helpim':'cj', 'gb':0 }\n\nlet g:ywvim_zhpunc = 1\nlet g:ywvim_listmax = 5\nlet g:ywvim_esc_autoff = 0\nlet g:ywvim_autoinput = 1\nlet g:ywvim_pagec = 1\nlet g:ywvim_helpim_on = 1\nlet g:ywvim_matchexact = 0\nlet g:ywvim_chinesecode = 1\nlet g:ywvim_gb = 0\nlet g:ywvim_preconv = 'g2b'\nlet g:ywvim_conv = ''\nlet g:ywvim_lockb = 0\n-----\n\n解释:\n\n所有变量中, 只有 g:ywvim_ims 是必须要设置的.\n\n1. g:ywvim_ims 是注册你的输入法的变量, 格式为:\n\n      \\['输入法的拼音简称', '输入法的中文名称', '码表文件']\n\n            \n比如 \\['cj', '仓颉', 'cangjie.ywvim'], 可以读为: 仓颉输入法, 简称为 cj, 码表文件为 cangjie.ywvim.\nywvim 会自动扫描 ywvim.vim 的同一目录及其子目录, 如果有同名文件, 以第一个优先.\n第一行的为默认输入法.\n你可以把你不需要的输入法的行删去.\n\n2. let g:ywvim_py = { 'helpim':'cj', 'gb':0 }\n\n单独设置每个码表的参数, 码表级别优先于全局级别. 码表级别的参数设置格式是:\n \n    g:ywvim_{输入法的简称} = {'参数':'参数设置'}\n\n目前有这几个参数支持局部设置:\nlistmax: 候选框数目.\nmaxelement: 最大词长.\nhelpim: 反查码表的简称.\nzhpunc: 中文标点开关.\nmatchexact: 精确匹配开关.\ngb: 只输入 gb2312 范围汉字.\n \n比如你可以这样设:\n\n    let g:ywvim_zy = {'listmax':6, 'maxelement':1, 'gb':0}\n\n意思是, 对于注音(zy)输入法, 候选框个数(listmax)为 6, 最大词长(maxelement)为 1, 只输入在 gb2312 范围的汉字('gb':0).\n\n你也可以全局设置某个变量, 格式是 let g:ywvim_listmax = 5, 这样就不用为每个码表都设相同的设置了. 下面都是全局变量.\n\n3. g:ywvim_zhpunc: 设置默认中文标点输入开关, 1 为开, 默认打开拼音输入, 2 为关.\n\n4. g:ywvim_listmax: 候选项个数.\n\n5. g:ywvim_esc_autoff: 设置离开插入模式时是否自动关闭 ywvim. 1 为自动, 0 为手动.\n(感谢在 #arch-cn@irc.oftc.net 的 snow 提的要求.)\n\n6. let g:ywvim_autoinput = 1: 支持两种程度的自动模式. 设为 2 为重度自动, 任何单码字都自动上屏. 2 为中度自动, 只在翻页时出现的单码字才上屏.\n(感谢在 #arch-cn@irc.oftc.net 上的 medicalwei 提供的建议)\n\n7. let g:ywvim_pagec = 1: 设为 1 表示可以在候选页中循环翻页.\n(感谢在 #arch-cn@irc.oftc.net 上的 medicalwei 提供的建议)\n\n8. let g:ywvim_helpim_on = 0: 设为 1 表示打开反查码表的功能.\n\n    警告: 对于大码表会导致其速度降低.\n\n9. let g:ywvim_matchexact = 0: 设为 1 表示只显示全码匹配的字.\n(感谢在 #arch-cn@irc.oftc.net 上的 medicalwei 提供的建议)\n\n10. let g:ywvim_chinesecode = 1: 对于有中文字母的输入法(比如注音, 仓颉),\n已键入的字母用中文字母来显示, 而不是英文字母. 比如在注音里, 你输入 ji3 后,\n显示的是 ㄨㄛˇ, 而不是 ji3\n(感谢在 #arch-cn@irc.oftc.net 上的 medicalwei 提供的建议)\n\n11. let g:ywvim_gb = 1, 设为 1 为只输入 gb2312 范围汉字.\n\n12. let g:ywvim_preconv = 'g2b', 默认简繁转换方向.\n\n13. let g:ywvim_conv = 'g2b', 設置簡繁轉換方向, 'g2b' 為簡軟繁, 'b2g' 為繁轉簡, ''(留空)為關閉\n(感谢在 www.newsmth.net 上的 vace 提供的建议)\n\n14. let g:ywvim_lockb = 0, 为 0 时, 在空码是不锁定键盘.\n\n使用:\n=====\n<C-\\> 输入法开关.\n\n;(分号) 临时英文.\n\nz 临时拼音.\n\n<C-^> 设置输入法:\n    码表切换.\n    中英标点切换.\n    最大词长: 你想输入的最长的词. 设为 1 为单字模试.\n    简繁转换开关.\n    gb2312开关: 让 ywvim 滤掉 gb2312 范围内的汉字.\n    反查码表开关.\n\n,.-=    上下翻页.\n\n空格或数字选字, 回车输英文.\n; 分号选择第二候选词. (感谢在 www.newsmth.net 的 vace 的建议.)\n\n注音用户注意!!!:\n两次空格为翻页.\n回车为输入默认汉字.\n默认没有绑任何键到临英和临拼(你可以更改).\n\n已知问题:\n=========\n1. 如果当前 buffer 的 ywvim 状态为开, 新开一个 buffer 后会显示 ywvim 为开启状态, 但实际不是, 此时只需按两次 <C-\\> 关闭和打开 ywvim 即可. 原因不明.\n临时解决方法: 开启 g:ywvim_esc_autoff: let g:ywvim_esc_autoff = 1, 保证在退出插入模式后自动退出 ywvim.\n\n2. 反查码表在非 utf-8 encoding 时工作无法正常工作. 临时解决方案: 在码表的主部分的每行最后加一个空格(官方的码表已经这样处理过了).\n\n3. 反查码表对于大码表反应速度过慢. 临时解决方案, 换词汇量较小的码表或者把 listmax 设小一点.\n\n4. enmode 和可变中文标点的冲突.\n当绑定 enmode 到可变中文标点如 \" 和 ' 时, 工作不正常. enmode 需要一个新的机制.\n\n回馈:\n=====\n请发回馈, 补丁或建议到我电子邮箱.\n\n待做:\n============\n\n常见问题:\n============\nQ: 增加模糊查找? 增加自动调频?\nA: 对于像作者一样的单字形码用户, 模糊查找是完全用不到的功能, 所以没有兴趣也没有时间开发. 如果你希望有该特性, 请发补丁给我.\n而自动调频对于形码来说, 简直就是灾难, 但对音码来说可能很有用. 如果你觉得有用, 你也可以发补丁给我. 谢谢.\n\n码表格式:\n=========\nywvim 用的码表是最简单的普通文本, 所以你可以很容易的定制出自己的码表. 请确保你的码表以 utf-8 的编码保存.\n\n分四部分:[Description], [CharDefinition], [Punctuation] 和 [Main]. 顺序不能颠倒:\n[Description]是输入法的一般参数.\n[CharDefinition] 是给像注音, 仓颉等有中文字母的输入法用的.\n[Punctuation]是标点, [Main]是主码表.\n\n[Description]\nName=倉頡五代   <== 码表名称.\nMaxCodes=5      <== 最大码长.\nMaxElement=1  <== 最大词长. 感谢在 www.newsmth.net 的 vace 的建议.\nUsedCodes=abcdefghijklmnopqrstuvwxyz <== 输入法所用到的键位\nEnChar=;    <= 临时输入英文的切换键.\nPyChar=z    <= 临时输入拼音键.\nInputZhSecKeys=; <= 输入第二重码键.\n下面选项均为注音用户所设, 其他输入法不必设置.\nEndCodes=  <= 结束字码的键位.\nInputZhKeys=  <= 输入中文的按键\nInputEnKeys=  <= 输入英文的按键\nPageUpExtraKeys= <= 额外上翻页键\nPageDnExtraKeys= <= 额外下翻页键\n\n[CharDefinition]\na 日  <== 中文字母的定义在这里定义. 如果没有, 留空即可.\n\n[Punctuation]\n{ 『\n\" “ ”\n\n[Main]\na 日 曰 <== 由字码和汉字组成一行. 如果想让反查码表在非 utf-8 下也能工作, 请在最后面加一个空格, 具体原因不明, 哪位帮我修复呢?\n\n======= English version =======\n=======\nNOTE!!!\n=======\nIf you are a ywvim's old user, before upgrade to the latest version, please have a look at *all* of the release notes and known bugs then look for the more details about the corresponding part of them in the description, because maybe some imcompatible changes have been made between your old version and the latest one.\nIf you find a bug when using, please look at the \"known bugs\" section to make sure whether it's a know bug before you report.\n\nDownload the lastest script(1.20): http://www.vim.org/scripts/download_script.php?src_id=11117\nDownload the lastest mabiao(1.13): http://www.vim.org/scripts/download_script.php?src_id=10786\n\nIntroduce:\n==========\nywvim is an input method for vim without the help of any external input method tools, it can input chinese in all modes of vim. Its target user is mainly of 形码, and lacks many fancy features for 拼音 users, for such a featureful IM, please have a look at vimim[http://www.vim.org/scripts/script.php?script_id=2506].\nBad news: ywvim's key mappings conflict with vimim, you have to make a choice between them.\n\nsettings in .vimrc:\n===================\nput some lines like the following into your ~/.vimrc:\n\n-----\nlet g:ywvim_ims=[\n            \\['cj', '仓颉', 'cangjie.ywvim'],\n            \\['wb', '五笔', 'wubi.ywvim'],\n            \\['wb98', '五笔98', 'wubi98.ywvim'],\n            \\['zm', '郑码', 'zhengma.ywvim'],\n            \\['zy', '注音', 'zhuyin.ywvim'],\n            \\['ar30', '行列', 'array30.ywvim'],\n            \\['py', '拼音', 'pinyin.ywvim'],\n            \\]\nlet g:ywvim_py = { 'helpim':'cj', 'gb':0 }\nlet g:ywvim_zhpunc = 1\nlet g:ywvim_listmax = 5\nlet g:ywvim_esc_autoff = 0\nlet g:ywvim_autoinput = 1\nlet g:ywvim_pagec = 1\nlet g:ywvim_helpim_on = 0\nlet g:ywvim_matchexact = 0\nlet g:ywvim_chinesecode = 1\nlet g:ywvim_gb = 0\nlet g:ywvim_preconv = 'g2b'\nlet g:ywvim_conv = ''\nlet g:ywvim_lockb = 0\n-----\n\nExplanation:\n\ng:ywvim_ims is a must-have variable among so many options.\n\n1. g:ywvim_ims is the variable that registers your input methods, the format is:\n\n      \\['English_abbreviation_for_IM', 'Chinese_name_of_IM', 'mabiao_file']\n\nFor example, \\['cj', '仓颉', 'cangjie.ywvim'], can be described as: cangjie input method, English abbreviation is cj, mabiao file is pinyin.ywvim.\nywvim will try to search the dir and subdirs under it, and use the first one if there are files shared with the same name..\nthe first one is the defaut one.\nYou can delete the lines of IM that you don't need at all.\n\n2. let g:ywvim_py = { 'helpim':'cj', 'gb':0 }\n\nYou can setup a parameter which only has effect on a particular IM, IM's has higher priority on global's. Its format is:\n \n    g:ywvim_{English_abbreviation_for_IM} = {'parameter':'setting'}\n\nThese parameters support local effect:\nlistmax: candidates max number.\nmaxelement: max length of phrase.\nhelpim: help IM's English abbreviation.\nzhpunc: Input Chinese punctuations.\nmatchexact: show only the exact matched.\ngb: set it to 1 means only input Chinese in gb2312.\n \nFor instance you can setup like this:\n\n    let g:ywvim_zy = {'listmax':6, 'maxelement':1, 'gb':0}\n\nit means, for zhuyin(zy) IM, candidates max rumber(maxlist) is 6, max phrase(maxelement) is 1, only input Chinese in gb2312('gb':0).\n\nYou also can setup a parameter globally, format is let g:ywvim_listmax = 5, so you can setup a parameter easily for every IM.\n\n3. g:ywvim_zhpunc: toggle the default Chinese punctuation on(1) or off(0).\n\n4. g:ywvim_listmax: maxmum number of candidates.\n\n5. g:ywvim_esc_autoff: whether auto toggle ywvim to be off when escaping from insertmode, 1 means yes, 0 no.\n(Thanks to snow on #arch-cn@irc.oftc.net who gave this feature request.)\n\n6. let g:ywvim_autoinput = 1:  supports two extends of auto input, set it to 2 is high auto, every singe candiate is auto inputted, 1 is media auto, just auto input when pageup/down.\n(Thanks for medicalwei on #arch-cn@irc.oftc.net's suggestion.)\n\n7. let g:ywvim_pagec = 1: set to 1 means circle pages when reaching the end.\n(Thanks for medicalwei on #arch-cn@irc.oftc.net's suggestion.)\n\n8. let g:ywvim_helpim_on = 0: set it to 1 means support of help mabiao.\n\n    Warn: The speed is terrible slow for extremly large mabiao.\n\n9. let g:ywvim_matchexact = 0: set to 1 means only show the exact matched Chinese.\n(Thanks for medicalwei on #arch-cn@irc.oftc.net's suggestion.)\n\n10. let g:ywvim_chinesecode = 1: when set, show the Chinese alphabets instead of English.\n(Thanks for medicalwei on #arch-cn@irc.oftc.net's suggestion.)\n\n11. let g:ywvim_gb = 1, set it to 1 means only input Chinese in gb2312.\n\n12. let g:ywvim_preconv = 'g2b', define the preferred simplified-traditional conversion direction.\n\n13. let g:ywvim_conv = 'g2b', direction of auto convertion bwtween Simplified and Traditional Chinese. 'g2b' Simplified -> Traditional, 'b2g' Traditional -> Simplified, '' (Leave it blank) disables feature.\n(Thanks for vace on www.newsmth.net's suggestion.)\n\n14. let g:ywvim_lockb = 0, 0 means not to lock up the keyboard when there's no charactor matched with.\n\nUsage:\n======\n<C-\\>       Toggle ywvim between on and off.\n\n;(semicolon) occasional English key.\n\nz           occasional English key.\n\n<C-^> setup ywvim:\n    码表切换.\n    中英标点切换.\n    最大词长: 你想输入的最长的词. 设为 1 为单字模试.\n    简繁转换开关.\n    gb2312开关: 让 ywvim 滤掉 gb2312 范围内的汉字.\n    反查码表开关.\n\n,.-=        Pageup/pagedown.\n\nspace or num key for input Chinese, Enter inputs English.\n; Select the second candiate. Thanks for vace on www.newsmth.net's suggestion.)\n\nNOTE for zhuyin users!!!:\ntwo continual space is pagedown.\nEnter is to select the defaut Chinese charator.\nEnglish key and Pinyin key don't be bond to any keys by default(you can configure it).\n\nKnown Bugs:\n===========\n1. If ywvim is on in current buffer, and if you edit a new buffer, the status of ywvim seems to be on, but it isn't actual, you need to hit two <C-\\>s to toggle ywvim off and on to make it work again. I have no idea why it happens.\nWorkaround: switch on g:ywvim_esc_autoff: let g:ywvim_esc_autoff = 1, to make sure quit ywvim after escape from insert mode always.\n\n2. help mabiao can't work correctly on non-utf-8 encoding. Workaround: append an extra space at every line in the main part of mabiao file(Offical mabiao has done it.)\n\n3. Slow issue on big help mabiao. Workaround: use a relative small mabiao, or set the listmax to a smaller value.\n\n4. enmode conflicts with paticular Chinese punctuations.\nSuch as \" and '. Enmode needs a new mechanism to implement.\n\nFeedback:\n=========\nPlease send the feedback, patch or advice to my email.\n\nTODOes:\n======\n\nFAQ:\n============\nQ: Supports fuzzy searching? Supports auto frequency?\nA: Author doesn't use fuzzy searching at all, but if you have patch, please send\nit to me.\nAbout auto frequency, it's a hell for shape input method, but maybe useful for pinyin users. If you can patch it, please do it and send the patch to the author. Thanks.\n\nMabiao file format:\n===================\nThe mabiao which ywvim uses is just plaintext, so everyone can create his own mabiao easily. Please make sure the mabiao is in utf-8 fileencoding.\n\nContains four fields: [Description], [CharDefinition], [Punctuation] and [Main]. They must be appeared in fire in sequences:\n[Description] general parameter of a input method.\n[CharDefinition] For the IM like zhuyin and cangjie that have Chinese alphabets.\n[Punctuation] contains punctuations, [Main] is the main part.\n\n[Description]\nName=倉頡五代   <== mabiao's name.\nMaxCodes=5      <== Max code number.\nMaxElement=1  <== max phase length. Thanks for vace on www.newsmth.net's suggestion.\nUsedCodes=abcdefghijklmnopqrstuvwxyz <== All keys that needs to triggle IM input.\nEnChar=;    <= occasional English key.\nPyChar=z    <= occasional PinYin key.\nInputZhSecKeys=; <= Key for input the second candidate.\nFollowing is for ZhuYin alike IM, other IM don't need to set them at all.\nEndCodes=  <= Why keys mean input Chinese has ended.\nInputZhKeys=  <= Input Chinese's key.\nInputEnKeys=  <= Input English's key.\nPageUpExtraKeys= <= Extra keys for pageup.\nPageDnExtraKeys= <= Extra keys for pagedown.\n\n[CharDefinition]\na 日  <== Definition of Chinese alphabets. If hasn't, leave it blank.\n\n[Punctuation]\n{ 『\n\" “ ”\n\n[Main]\na 日 曰 <== Char code and Chinese Charactors. Leave a space at the end of a line\nif help mabiao can't work correctly when on utf-8's encoding. I don't know the\nreason, could someone help me for fixing it please?\n"}, {:name=>"mako.vim--Torborg", :summary=>"Adds indenting support for Mako HTML templates", :description=>"Adds indenting support for the mako python template engine to vim. Indents inside of Mako control blocks, which improves the readability of the source template (although at the possible expense of the readability of the output code).\n\nFor best results, use in conjunction with mako syntax highlighting: vimscript #1858.\n\nMako: http://www.makotemplates.org/"}, {:name=>"HtmlHelper", :summary=>"Html macros and mappings", :description=>"\" Html macros and mappings for:\n\" ------------------------------------------\n\"\n\"    *  Closing        an opening tag\n\"    *  Wrapping     text with tags\n\"    *  Increasing    the weight of header tags (<h1>...)\n\"    *  Formatting    text inside a pair of tags\n\"    *  Rearranging  <tag> content </tag> vertically\n\"    *  Stripping       outer tags\n\"    *  'Spacing'       vertically the content of a pair of tags\n\"\n\" 1. Close an opening tag\n\" -----------------------\n\"\n\"     >> : <tag> newline </tag> (write quickly a second > after the first one)\n\"     >/ : <tag>         </tag>\n\"     <? : <?php             ?>\n\"\n\" 2. Wrapping:\n\" ------------\n\"\n\"         +-----------+-------------------+\n\"         | paragraph | WORD or selection |\n\" +-------+-----------+-------------------+\n\" | <ul>  |    @u     |        \\u         |\n\" | <ol>  |    @o     |        \\o         |\n\" | <p>   |    @p     |        \\p         |\n\" | <div> |    @d     |        \\d         |\n\" +-------+-----------+-------------------+\n\"\n\" Note: \\u and \\o work on fully selected lines only\n\"\n\" Note: mnemo for paragraphs and lines: wrap @ll\n\"\n\" Note: You can use a count with the \\ mappings\n\"\n\"              +------+-------------------+\n\"              | line | WORD or selection |\n\" +------------+------+-------------------+\n\" | <td>       |  @t  |        \\t         |\n\" | <a>        |  @a  |        \\a         |\n\" | <span>     |  @s  |        \\s         |\n\" | <h1>       |  @h  |        \\h         |\n\" | <li>       |  @l  |        \\l         |\n\" | <!-- -->   |  @c  |        \\c         |\n\" | <em>       |  @e  |        \\e         |\n\" | <strong>   |  @b  |        \\b         |\n\" +------------+------+-------------------+\n\"\n\" 3. Insert an image\n\" ------------------\n\"\n\"     @i (<img src='X' alt='' title='' />)\n\"\n\" 4. Set the class of a tag\n\" -------------------------\n\"\n\"     :Class ul         -> <ul>                 (default)\n\"     :Class ul bg_blue -> <ul class='bg_blue'>\n\"\n\" Note: Try using :C or :Cl or... instead of :Class. Depending on the\n\"       installed plugins, a shorter or longer abbreviation might work.\n\"\n\" Shortcuts: (:C shortcut)\n\"     d,   s,    u,  o,  h,  l,  t,  i,   e,  b\n\"     div, span, ul, ol, h1, li, td, img, em, strong\n\"\n\" Note: If you don't want to write a tag manually, you can use <tab>\n\"       after :Class to autocomplete your tag.\n\"       (put a space after :Class before hitting <tab>)\n\"\n\" 5. <hn -> <hn+1 (Use after a @h or \\h)\n\" --------------------------------------\n\"\n\"     @j (mnemo: j is just besides h on the keyboard)\n\"\n\" 6. gq inside a pair of tags\n\" ---------------------------\n\"\n\"     @g for standard tags\n\"     \\g for <!-- --> or <?php ?>\n\"\n\" 7. Rearrange <tag> content </tag> vertically\n\" --------------------------------------------\n\"\n\"     @r for standard tags\n\"     \\r for <!-- --> or <?php ?>\n\"\n\" 8. Strip outer tags\n\" -------------------\n\"\n\"     @x for standard tags\n\"     \\x for <!-- --> or <?php ?>\n\"\n\" 9. 'Space' vertically the content of a pair of tags\n\" ---------------------------------------------------\n\"\n\"     @m for standard tags        (mnemo: \n)\n\"     \\m for <!-- --> or <?php ?>\n\"\n\" A detailed help is in the comments of the file itself!"}, {:name=>"Mark--Karkat", :summary=>"Highlight several words in different colors simultaneously. (#1238 continued)", :description=>"DESCRIPTION\nThis script adds mappings and a :Mark command to highlight several words in\ndifferent colors simultaneously, similar to the built-in 'hlsearch'\nhighlighting of search results and the * star command. For example, when you\nare browsing a big program file, you could highlight multiple identifiers in\nparallel. This will make it easier to trace the source code.\n\nThis is a continuation of vimscript #1238 by Yuheng Xie, who apparently\ndoesn't maintain his original version anymore and cannot be reached via the\nemail address in his profile. This script offers the following advantages over\nthe original:\n- Much faster, all colored words can now be highlighted, no more clashes with\n  syntax highlighting (due to use of matchadd()). \n- Many bug fixes. \n- Jumps behave like the built-in search, including wrap and error messages. \n- Like the built-in commands, jumps take an optional [count] to quickly skip\n  over some marks. \n\nRELATED WORKS\n- MultipleSearch (vimscript #479) can highlight in a single window and in all\n  buffers, but still relies on the :syntax highlighting method, which is\n  slower and less reliable. \n- http://vim.wikia.com/wiki/Highlight_multiple_words offers control over the\n  color used by mapping the 1-9 keys on the numeric keypad, persistence, and\n  highlights only a single window. \n\nUSAGE\nHighlighting:\n<Leader>m\t\tMark or unmark the word under the cursor, similar to\n\t\t\tthe |star| command. \n\t\t\tLikewise, 'ignorecase' is used, 'smartcase' is not.\n{Visual}<Leader>m\tMark or unmark the visual selection. \n<Leader>r\t\tManually input a regular expression to highlight. \n{Visual}<Leader>r\t(Based on the visual selection.) \n<Leader>n\t\tClear the mark under the cursor / all marks. \n\n:Mark {regexp}\t\tMark or unmark {regexp}. \n:Mark\t\t\tClear all marks. \n\nSearching:\n\n[count]*         [count]#\n[count]<Leader>* [count]<Leader>#\n[count]<Leader>/ [count]<Leader>?\n\t\t\tUse these six keys to jump to the [count]'th next /\n\t\t\tprevious occurrence of a mark. \n\t\t\tYou could also use Vim's / and ? to search, since the\n\t\t\tmark patterns are (optionally, see configuration)\n\t\t\tadded to the search history, too. \n\n            Cursor over mark                    Cursor not over mark\n ---------------------------------------------------------------------------\n  <Leader>* Jump to the next occurrence of      Jump to the next occurrence of\n            current mark, and remember it       \"last mark\". \n            as \"last mark\". \n\n  <Leader>/ Jump to the next occurrence of      Same as left. \n            ANY mark. \n\n   *        If <Leader>* is the most recently   Do Vim's original * command. \n            used, do a <Leader>*; otherwise\n            (<Leader>/ is the most recently\n            used), do a <Leader>/. "}, {:name=>"setget", :summary=>"setter and getter for php", :description=>"This script automatically inserts setter, getter or both for php files.\nJust type instance variable then :call PHP_setget() and choose from list if you want\nsetter, getter or both.\n\n- if you have any suggestions, bugs etc. drop me an email (it&#039s in the file)\n- I'd like to add more files, not just php, later\n"}, {:name=>"shell_it", :summary=>"No use No use", :description=>"No use No use"}, {:name=>"fastlane", :summary=>"a tool to help you quick edit and save abbreviation, snippets .etc", :description=>"what is ?\na tool to help you quick edit and save abbreviation, snippets .etc\n\nhow to install?\nmaybe you  want install snippetEmu first.\n\nunzip the file of you down, copy fastlane.vim to plugin directory, copy example_snippets.vim to you snippets directory if the file is not exist. write \"let g:iwn_snippet_dir = your snippets directory\"  to your  .vimrc file .  you are done!\n\noptions you can set the  .vimrc for a example:\nlet iwn_default_module = 'php'\nlet iwn_include_modules = {'php': ['javascript'], 'symfony': ['javascript', 'php']}\n\nhow to use?\n:IwnCreateModule test\ncreate a module named test\n\n:IwnUseModule test\nuse the  test module\n\n:IwnAddAbb hello hello, world\ncreate a abbreviation for \"hello, world\", try input \"hello<space>\" \n\ninput these text:\n  hello,world\n  yes\n  no <sni>hello</sni>\n  hello <sni></sni>  \nselect these text, and execute :IwnAddSnippet hello\nyou will create a snippet named hello, try input \"hello<tab>\"\n\nsome examples fo other command:\nIwnRemoveModule test\nIwnRemoveAbb hello\nIwnRemoveSnippet hello\n\nthat's all, fun happing!\n\n\n\n"}, {:name=>"TuttiColori-Colorscheme", :summary=>"A port of the Tutti Colori theme from the Espresso editor", :description=>"A light, candy colored theme, ported from the default theme shipped with the Espresso editor for OS X (http://macrabbit.com/espresso)\n\nThe canonical version is available on git-hub, with a screenshot at: http://github.com/lygaret/vimscripts"}, {:name=>"tango-desert.vim", :summary=>"Dark Color scheme based on tango palette and desert", :description=>"This dark color scheme is based on tango color palette ( http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette ) & desert color scheme by Hans Fugal.\n\nscreenshots : http://rand-tech.blogspot.com/2009/06/tango-desert-colorscheme-vim.html"}, {:name=>"Hoogle", :summary=>"Add commands to use Hoogle within vim", :description=>"This plugin query hoogle for you and display the results in a special window. Commands are provided to quickly open/close the window."}, {:name=>"smarttill", :summary=>"Smart motions, till before/after a punctuation", :description=>"*smarttill* is a Vim plugin to provide {motion}s like |t| and |T|, but they\nare smarter than the built-in ones in some sense.  For example, if you edit\nthe following text and you want to delete a partial text from the cursor till\nbefore a comma, you have to type \"dt,\" (here \"|\" means the cursor position):\n\n\t\t...|Yo DJ, pump this party! ...\n\t\t    ^^^^^\n\nBut it's somewhat annoying to type another character to specify where the\ncursor should be moved to explicitly.  It's useful if there is a motion to\nmove the cursor till before comma, period or other punctuations without\nspecifying a character.  smarttill provides the features as\n|<Plug>(smarttill-t)| and |<Plug>(smarttill-T)|.\n\nSee also |smarttill-examples| for customization.\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-smarttill\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/smarttill.html"}, {:name=>"cocoa.vim", :summary=>"Plugin for Cocoa/Objective-C development", :description=>"Cocoa.vim is a collection of scripts designed to make it easier to develop Cocoa/Objective-C applications. It includes enhanced syntax highlighting, code completion, documentation lookup, as well as a number of other features that can be used to integrate Vim with Xcode, allowing you to essentially replace Xcode's editor with Vim.\n\nThis plugin includes the following features:\n\t1. Enhanced syntax highlighting \u0097 Vim's syntax highlighting for Objective-C seemed incomplete to me, so I have added a few niceties, such as highlighting Cocoa keywords and differentiating the method name and passed objects in method calls and definitions. You can see a before & after screenshot here: http://imgur.com/AGpoL.png\n\t2. Xcode-like mappings (where convenient) \u0097 mappings such as ⌘R to build & run and ⌘0 to switch to the project window (provided you are using a GUI such as MacVim) as well as many others help to integrate Xcode and Vim.\n\t3. Methods, functions, and #pragma marks for the current file can be listed and navigated to with the :ListMethods command.\n\t4. A template of methods declared in a header file (.h) can be built in an implementation file (.m) with :BuildMethods.\n\t5. Cocoa and C Documentation can be looked up with the :CocoaDoc command, or with Vim's K.\n\t6. Code completion for classes, methods, functions, constants, types, and notifications can be invoked with <c-x><c-o>. Parameters for methods and functions are automatically converted to snippets to <tab> over if snipMate is installed.\n\nAlthough cocoa.vim is usable, it is still very much in the beta stage. In particular, code completion still needs much work to match Xcode's editor. Also, if anyone has suggestions as for how to add breakpoints or lookup header definitions from within Vim I would very much appreciate it.\n\nBug reports can be submitted on the issue tracker: http://code.google.com/p/cocoa-dot-vim/issues/list\nDevelopment can be followed on GitHub: http://github.com/msanders/cocoa.vim\n\nHope you find it useful!"}, {:name=>"altercmd", :summary=>"Alter built-in Ex commands by your own ones", :description=>"*altercmd* is a Vim plugin to provide an easy way to alternate built-in Ex\ncommands by user-defined Ex commands.  This plugin provides |:AlterCommand|\nfor this purpose.  For example, if you define :CD, a custom version of |:cd|,\nadd the following in your vimrc.\n\n\tAlterCommand cd  CD\n\nWith the above setting, you can use :cd as if it is :CD.  It means that :CD\nwill be automatically inserted if you type :cd as an Ex command, so you don't\nhave to type :CD to use :cd and you'll never encounter mistyping :cd and :CD.\n\n:AlterCommand also supports partial command names.  For example, |:help| can\nbe invoked with :h, :he, :hel or :help.\n\n\tAlterCommand h[elp]  HELP\n\nWith the above setting, you can use :h, :he, :hel and :help as if they are\n:HELP, your own version of :help.\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-altercmd\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/altercmd.html"}, {:name=>"supercat.vim", :summary=>"Syntax for supercat configuration files", :description=>"Add colors to your Supercat ( http://supercat.nosredna.net ) configuration files.\n\nHere's one example of the results:\n\nhttp://img146.imageshack.us/img146/6496/supercatsyntax.png\n\nOf course, you can set the colors to whatever you like."}, {:name=>"nature.vim", :summary=>"colorscheme with nature tones", :description=>"This is a very simple color scheme.\nFeatures:\n* Black background\n* Green and blue with a touch of yellow and magenta\n* Tango palette\n* Color difference between [Conditional] and [Repeat] statements\n* Dark gray comments\n* PINK ERRORS!!!!!!!!1!\n* Works with both GUI and console\n! Does not support transparency (intentional).\nScreenshots here: http://picasaweb.google.com/elfakyn/Vim\n\nI think I should get a job in advertising :).\nEnjoy!"}, {:name=>"GoogleReader.vim", :summary=>"vimscript for googlereader", :description=>"This is vimscript for googlereader (http://www.google.com/reader/)\n\nUsage:\n\n  :GoogleReader\n\nKeyBinding:\n  [LIST]\n  type <c-n> to goto next and open entry\n  type <c-p> to goto prev and open entry\n  type <cr> to show entry\n  type <c-a> to show all list\n  type <s-a> to show unread list\n  type +     to toggle read/unread mark\n  type *     to toggle star/unstar mark\n  type r to reload entries\n  type q to close window\n\n  [CONTENT]\n  type <c-n> to show next entry\n  type <c-p> to show previous entry\n  type <c-i> to open URL with browser\n  type q to close window\n\n  type ? to show help list\n\nRequire:\n  curl command (http://curl.haxx.se/)\n"}, {:name=>"textobj-verticalbar", :summary=>"Text objects for vertical bar", :description=>"textobj-verticalbar is a Vim plugin to provide text objects to select wiki's table cell.\n\nFor example, if the content of a buffer as follows:\n(here \"*\" means the cursor)\n\n\t|| Header 1*|| Header 2 || Header 3 ||\n\t|| Row1 || Cell1-2 || Cell1-3 ||\n\t|| Row2 || Cell2-2 || Cell2-3 ||\n\n\n|<Plug>(textobj-verticalbar-a)| will select columns as follows:\n(here \"<\" and \">\" indicates the selected range)\n\n\t||<Header 1>|| Header 2 || Header 3 ||\n\t|| Row1 || Cell1-2 || Cell1-3 ||\n\t|| Row2 || Cell2-2 || Cell2-3 ||\n\n|<Plug>(textobj-verticalbar-i)| will select columns as follows:\n(here \"<\" and \">\" indicates the selected range)\n\n\t|<| Header 1 |>| Header 2 || Header 3 ||\n\t\t--------- \n\t|| Row1 || Cell1-2 || Cell1-3 ||\n\t|| Row2 || Cell2-2 || Cell2-3 ||\n\nRequirements:\n- Vim 7.2 or later\n- textobj-user 0.3.7 or later (vimscript#2100)\n\n"}, {:name=>"cursoroverdictionary", :summary=>"Look up word or phrase in English-Japanese Dictionary", :description=>"cursoroverdictionary is a Vim plugin to look up word or idiom in English-Japanese Dictionary.\n(For a beginner of English such as me.)\n\nScreencast: http://www.youtube.com/watch?v=eb8khHL8I7Q\n\nRequirements:\n- Vim 7.0 or later\n- Python\nhttp://www.python.org/download/\n- Dictionary data(PDIC 1 line text format)\n"}, {:name=>"Colorzone", :summary=>"Colorscheme Use More Soft Colors", :description=>"Colorzone use more soft colors for read comfortably but isn't dazzling .\n\nBased on \"tango-morning\" and \"wargreycolorscheme\" color scheme.\n\nMaybe has display problem in other file types, can works with both GUI and console.\nYou can chose another color for pop up menu.\n\nI want change the colors to suitable for Tango Icon Theme Guidelines in the future.\nhttp://tango.freedesktop.org/Tango_Icon_Theme_Guidelines\n\nScreen Shots:\nhttp://farm5.static.flickr.com/4042/4686809567_b2972b033c_b.jpg\n\nIf your terminal can use RGB colors, use this escape sequence colors:\nff888a85,ffef2929,ff8ae234,ffe9b96e,ff00bfff,ffda70d6,ff87ceeb,ffeeeeec\ngray     red      green    yellow   blue     magenta  cyan     white\nThe Terminal colors and GUI colors are different."}, {:name=>"colorsupport.vim", :summary=>"Use colorschemes written for gvim in color terminals.", :description=>"colorsupport.vim\n================\nUse colorschemes written for gvim in color terminals.\nTested with many colorschemes including color sampler pack (vimscript #625)\n\nFor a 256-color terminal, see\n\n- http://www.frexx.de/xterm-256-notes/\n- http://www.nabble.com/screen%2C-256color-mode-and-ssh-td15098157.html\n- http://push.cx/2008/256-color-xterms-in-ubuntu\n\nAnd don't forget to rate ;^)\n\nComparison\n----------\nAt the time that I uploaded this script, I was unaware of other color conversion scripts.\nAnd I've tried them later.\n\nvimscript #2390. (Thank you marty)\n\nKey difference is that vimscript #2390 practically requires gvim installed.\nAnd major difficulty (and dirty tricks) of this script was to get gui \nattributes from colorschemes, which are not obtainable from series of \nsynIDxxx() functions without +gui feature.  \n\nvimscript #1809\n\nvimscript #1809 tries to extract hilight information by string match.\n(I assume that this approach is what most conversion script have took)\nBy contrast, colorsupport.vim actually run the original color scheme \nwith highlight command substituted with Highlight command.\nLater works better because many color schemes have highlights\nin conditional block, which should not be extracted.\n\nFurthermore, vimscript #1809 does not support color names.\n\nSimple usage\n------------\n- Drop 'colorsupport.vim' in '~/.vim/plugin'.\n\n  At next startup, colorscheme loaded by '.vimrc' will be reloaded with gui\n  colors mapped to terminal palette.  That is, if you already have gvim\n  colorscheme set in '~/.vimrc', then it'll work as soon as you install the\n  'colorsupport.vim' script.\n\n- Browse and preview colorschemes in your &runtimepath by\n  ':ColorSchemeBrowse'.  You can also manually try colorschemes using\n  ':ColorScheme', just like ':colorscheme'.\n\n- On slow systems, it can take long to convert colorscheme every time vim\n  starts up.  For faster start-up, save last colorscheme by ':ColorSchemeSave'.\n\n  By default, this saves last colorscheme loaded by ':ColorScheme' in the first \n  &runtimepath (usually, ~/.vim/colors on Unix).\n\n  If last colorscheme is already from '~/.vim/colors', error will occur,  and\n  you should use ':ColorSchemeSave <new-colorscheme-name>' instead.\n\nUpgrade\n-------\nWhen upgrading colorsupport.vim, additional color groups can be set, \nbut color schemes saved by :ColorSchemeSave passes conversion by :ColorScheme.\nDelete old (converted and saved) color schemes if you want re-convert.\n\nCustomization\n-------------\n- g:colorsupport_palette_name (one of \"tango\" (default), \"console\", \"xterm\", \"rxvt\")\n- g:colorsupport_palette (e.g., ['#000000',  ...]. (length better be =16))\n\n- g:colorsupport_cube_name (one of \"xterm256\", \"xterm88\", \"konsole\", \"eterm\")\n- g:colorsupport_cube (e.g. [0x00, 0x2A, 0x55, 0xAA, 0xD4])\n\n- g:colorsupport_grey (e.g., range(0x1C, 0xFF, 30))\n\n- g:colorsupport_rgbs (e.g., ['/usr/X11/share/X11'])\n\nKeep {len(g:colorsupport_palette) + len(g:colorsupport_cube)^3 + len(g:colorsupport_grey) == &t_Co}\n\nCommands\n--------\n- Highlight ... \n\n  Arguments are the same as :highlight\n  Set 'cterm', 'ctermfg', 'ctermbg' based on 'gui', 'guifg', 'guibg',\n  respectively.  Note that given 'cterm.*' settings are ignored.\n\n- ColorScheme <path-or-name>\n\n  Load a colorscheme using ':Highlight', instead of ':highlight'.\n  Unlike colorscheme, path is accepted as well as colorscheme name.\n\n- ColorSchemeBrowse [<path>]\n\n  Browse colorschemes in <path> (or &runtimepath, if no arguments given)\n\n- ColorSchemeSave [<name>]\n\n  Save last colorscheme loaded by ':ColorScheme' (or, equivalently, browsed by\n  ':ColorSchemeViewer') in the first &runtimepath.  If <name> is not given,\n  original name of last colorscheme is used."}, {:name=>"FastLadder.vim", :summary=>"vimscript for fastladder", :description=>"This is vimscript for fastladder (http://fastladder.com/)\n\nUsage:\n\n  :FastLadder\n\nKeyBinding:\n  [LIST]\n  type <c-n> to goto next and open entry\n  type <c-p> to goto prev and open entry\n  type <cr> to show entry\n  type <c-a> to show all list\n  type <s-a> to show unread list\n  type *     to toggle pin\n  type r to reload entries\n  type q to close window\n\n  [CONTENT]\n  type <c-n> to show next entry\n  type <c-p> to show previous entry\n  type <c-i> to open URL with browser\n  type q to close window\n\n  type ? to show help list\n\nRequire:\n  curl command (http://curl.haxx.se/)\n"}, {:name=>"herald.vim", :summary=>"A dark color scheme for Vim", :description=>"An easy-to-read dark color scheme. \n\nSee http://www.h3rald.com/herald-vim-color-scheme for a preview and more information."}, {:name=>"zOS-Enterprise-Compiler-PLI", :summary=>"z/OS Enterprise Compiler PLI Language Syntax File", :description=>"Updated for z/OS PLI Enterprise Compiler.\nBased on Ing. Michael Fitz's version: vimscript #1013\n\nMaybe you need another colorscheme: vimscript #2681\n\nScreen Shot:\nhttp://photo2.bababian.com/upload2/20090616/F49050FBC235DE77512F9B318D2FA6A8.jpg"}, {:name=>"cuteTodoList", :summary=>"Manage to-do lists within vim", :description=>"Manage automatically todo lists with priority and icons.\n\nscreenshot : http://img198.imageshack.us/gal.php?g=cutetodoclinux.png\n\nTested on :\n- Windows XP/Vista/7\n- Ubuntu 9.04 (GVim && Vim)"}, {:name=>"iabassist", :summary=>"some helpful commands for defining abbreviations which expand only when wanted", :description=>"There are a ton of existing abbreviation packages, but none were quite right.  This one provides some unique features:\n1. Doesn't expand the abbreviation in specified areas\n2. Doesn't expand the abbreviation unless a tab was pressed\n3. Placeholder will not compile in most languages\n4. Includes mappings to quickly select the next placeholder, accept defaults, or delete current placeholder.\n\nUsage:\n    Exports:\n        Eatchar() - removes any trailing spaces from abbreviations\n        ExpandIfSafe(from, to) - expands a:from to a:to if not in a specified block (strings, comments, character, doxygen, bibbrace currently)\n        Iab(ab, full) - define an abbreviation from a:ab to a:full which expands if safe\n        IabSelectNext - Finds the next placeholder and selects it\n        IabSelectDefault - Selects the default option\n    Maps:\n        ,, - Select the next placeholder\n        ,' - Select the default for the current placeholder\n        ,. - Delete the current placeholder\n    Example:\n        Iab('for', 'for(«$1:unsigned i = 0»; «$2:i < «$3»»; «$4:++i»)<CR>{<CR>«$5»<CR>}')\n        will define an abbreviation for for.  Now typing for<TAB> will expand to:\n        for(«$1:unsigned i = 0»; «$2:i < «$3»»; «$4:++i»)\n        {\n            «$5»\n        }\n        with «$1:unsigned i = 0» being selected.  Now typing ,' will change it to unsigned i = 0; and select the $2 branch (Note the numbers are not traversed in order, but instead are merely for marking placeholders.  In a future version this may change).  As it is in select mode typing any character will replace the placeholder.  If a placeholder is unwanted one can press ,., and to traverse use ,,.\n\n        Finally, note that abbreviations only expand if the last key was a tab, this ensures typing for<SPACE> will not expand.\n\nCustomization:\n    At the moment the only customization is via source modification.  The most likely lines to be modified are: 1) 89-96 to change the mappings, and 2) 44 to change what are the unsafe syntax and what character is used for expansion (currently this must be a non-control character).\n\nAlternatives:\n    snippetsEmu - vimscript #1318\n    snipMate - vimscript #2540\n    code-snippet - vimscript #2086\n    The first two do much more than this, and I had issues with both, e.g. they seemed to have troubles when inserting a snippet inside the middle of a snippet.  The latter is more like this, but differs in its behavior, namely they use the (very neat) trick of mapping a special key (<S-CR>) to execute the expansion, instead this script uses the (also hopefully neat) trick of checking the last character entered and only expanding when the last character is a tab."}, {:name=>"dual.vim", :summary=>"The Dual colorscheme that you've longing for.", :description=>"On VIM, it uses dark colors.\nOn GVIM, it uses bright colors without bold, italic nor \nunderline font styles (except for spell checking and \nsome GUI elements).\nOnly standard (for all languages) highlight-groups are set.\nThis colorscheme _should_ look nice everywhere."}, {:name=>"kalt.vim", :summary=>"A cold colorscheme.", :description=>"A cold colorscheme for GVIM/VIM without bold, italic nor\nunderline font styles (except for spell checking and some \nGUI elements). On VIM it uses a black background, because \nit was easier to do and *seems* to be the only way to make \na colorscheme look nice on any darn terminal.\nThis colorscheme _should_ look nice everywhere."}, {:name=>"kaltex.vim", :summary=>"A colder colorscheme...", :description=>"Same as the kalt.vim colorscheme, except that this one\nuses bold, italics and underlined font styles for syntax\nhighlighting."}, {:name=>"fbc.vim", :summary=>"Compiler plugin for FreeBASIC", :description=>"Vim compiler file\nSCRIPT FILE NAME:\n   fbc.vim\n\nCOMPILER:\n   FBC(FreeBASIC compiler)\n   http://www.freebasic.net/\n\nAUTHOR:\n   Caglar Toklu caglartoklu[aat]gmail.com\n   http://caglartoklu.blogspot.com/\n\nHISTORY:\n0.0.4, 2009-06-26\n- Added one more error format for the warnings.\n0.0.1, 2009-05-17\n- First, unreleased version.\n\nIf you want a syntax file for the FreeBASIC 0.21, see the syntax file at http://cubaxd.net/?en&p=syntaxfile"}, {:name=>"operator-user", :summary=>"Define your own operator easily", :description=>"*operator-user* is a Vim library plugin to provide an easy way to define your\nown |operator|.  Though there are several pitfalls to define operators, you\ndon't have to take care of them with |operator#user#define()| which are\nprovided by this library plugin.\n\nFor example, the following code defines operator \"_\" to adjust the height of\nthe current window to the same as the target range:\n\n\tmap _  <Plug>(operator-adjust)\n\tcall operator#user#define('adjust', 'Op_adjust_window_height')\n\tfunction! Op_adjust_window_height(motion_wiseness)\n\t  execute (line(\"']\") - line(\"'[\") + 1) 'wincmd' '_'\n\t  normal! `[zt\n\tendfunction\n\nYou can use this operator as follows:\n\n\t10__\tAdjust to 10 lines and show the current line at the top.\n\t_ip\tAdjust to the same height of the paragraph under the cursor.\n\nThis operator is useful to adjust the visible content in the current window.\n\nSee also |operator-user-exmaples| for more examples and explanations.\n\n\nRequirements:\n- Vim 7.2 or later\n\nOptionals:\n- |grex| (vimscript#2773)\n- |operator-replace| (vimscript#2782)\n- |wwwsearch| (vimscript#2785)\n\nLatest version:\nhttp://github.com/kana/vim-operator-user\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/operator-user.html"}, {:name=>"ats-lang-vim", :summary=>"syntax highlighting for ATS", :description=>"A (rather incomplete) syntax highlighting for ATS (see http://www.ats-lang.org)\n\nFuture improvements are planned."}, {:name=>"MediaWiki-folding-and-syntax-highlight", :summary=>"folding support for MediaWiki-style syntax", :description=>"This syntax file adds not only syntax highlight, but also folding for MediaWiki-style wikitext. (This is the syntax that Wikipedia uses, among many other sites.) I've been using it for 3 years now, and while it isn't bug-free, it's reasonably mature.\n\nNote: if folding seems broken (this does happen with long and complicated files), do \":syntax sync fromstart\". Also, you may find the \"It's All Text!\" Firefox-extension useful: https://addons.mozilla.org/en-US/firefox/addon/4125"}, {:name=>"EnhancedJumps", :summary=>"Enhanced jump list navigation commands. ", :description=>"DESCRIPTION\nThis plugin enhances the built-in CTRL-I / CTRL-O jump commands: \n- After a jump, the line, column and text of the next jump target are printed: \n    next: 3,9 ENHANCED JUMPS    by Ingo Karkat\n- An error message and the valid range for jumps in that direction is printed\n  if a jump outside the jump list is attempted: \n    Only 8 older jump positions.\n- In case the next jump would move to another buffer, only a warning is\n  printed at the first attempt:\n    next: EnhancedJumps.vim\n  The jump to another buffer is only done if the same jump command is repeated\n  once more immediately afterwards; like this: Pressing CTRL-O, noticing the\n  warning, then quickly pressing CTRL-O again to overcome the warning. \n  With this, you can eagerly jump around the current buffer. Because you will\n  be warned when a jump would move to another buffer, you're much less likely\n  to get lost. \n\nUSAGE\nSimply use the CTRL-O and CTRL-I commands to go to an older / newer cursor\nposition in the jump list. When a warning \"next: {file}\" is echoed, quickly\nrepeat the jump command to move to that buffer (a [count] need to not be\ntyped again; if you do include the [count], it must be the same as before). \nIf you do not want to move to that buffer, just ignore the warning, and\ncontinue browsing the current buffer. On the next jump attempt, the warning\nwill be repeated. "}, {:name=>"elise.vim", :summary=>"The colorscheme \"Für Elise\".", :description=>"A pinky-yellowy-greeny colorscheme inspired on a popular\nclassical composition of \"Ludwig van Beethoven\", called\n\"Für Elise\" (For Elise).\n\nIf you aren't scarred by _Pink_ comments, you'll LOVE this scheme.\n\nNote: \n      - Only standard (for all languages) highlight-groups are set.\n      - This colorscheme _should_ look nice everywhere.\n\n"}, {:name=>"elisex.vim", :summary=>"The colorscheme \"Für die Sexy Elise\".", :description=>"A pinky-yellowy-greeny colorscheme inspired on a popular\nclassical composition of \"Ludwig van Beethoven\", called\n\"Für Elise\" (For Elise). \n\nThis one uses bold and italic font styles to please your eyes.\n\nIf you aren't scarred by _Pink_ comments, you'll LOVE this scheme.\n\nNote: - Only standard (for all languages) highlight-groups are set.\n      - This colorscheme _should_ look nice everywhere."}, {:name=>"Dictionary-file-for-Luxology-Modo-Python", :summary=>"Dictionary file for Luxology ModoScripting", :description=>"This is just a dictionary file containing all(or most) of the internal functions-commands that Luxology Modo utilizes for external scripting languages like Perl, Python and Lua.\n\n\n\n"}, {:name=>"argtextobj.vim", :summary=>"Text-object like motion for arguments", :description=>"This plugin provides a text-object 'a' (argument). You can\nd(elete), c(hange), v(select)... an argument or inner argument in familiar ways.\nThat is, such as 'daa'(delete-an-argument) 'cia'(change-inner-argument) 'via'(select-inner-argument).\nWhat this script does is more than just typing\n  F,dt,\nbecause it recognizes inclusion relationship of parentheses.\n\nThere is an option to descide whether the motion should go out to toplevel function or not in nested function application.\n\nExamples:\n  case1) delete An argument\n      function(int arg1,    ch<press 'daa' here>ar* arg2=\"a,b,c(d,e)\")\n      function(int arg1<cursor here; and if you press 'daa' again..>)\n      function(<cursor>)\n\n  case2) change Inner argument\n      function(int arg1,    ch<press 'cia' here>ar* arg2=\"a,b,c(d,e)\")\n      function(int arg1,    <cursor here>)\n      \n  case 3) smart argument recognition (g:argumentobject_force_toplevel = 0)\n       function(1, (20<press 'cia' here>*30)+40, somefunc2(3, 4))\n       function(1, <cursor here>, somefunc2(3, 4))\n       \n       function(1, (20*30)+40, somefunc2(<press 'cia' here>3, 4))\n       function(1, (20*30)+40, somefunc2(<cursor here>4))\n\n  case 4) smart argument recognition (g:argumentobject_force_toplevel = 1)\n       function(1, (20<press 'cia' here>*30)+40, somefunc2(3, 4))\n       function(1, <cursor here>, somefunc2(3, 4)) \" note that this result is the same of above.\n       \n       function(1, (20*30)+40, somefunc2(<press 'cia' here>3, 4))\n       function(1, (20*30)+40, <cursor here>) \" sub-level function is deleted because it is a argument in terms of the outer function.\n"}, {:name=>"PKGBUILD", :summary=>"helps editing and working with PKGBUILD files", :description=>"."}, {:name=>"editsrec", :summary=>"Vim Global Plugin for Editing .srec Files", :description=>"Vim Global Plugin for Editing .srec Files"}, {:name=>"regreplop.vim", :summary=>"operator to replace motion/visual with a register", :description=>"This plugin provides a operator to replace something(motion/visual) with a\nspecified register.\nBy default, the operator is mapped at\n  <Plug>ReplaceMotion  \" for normal mode\n  <Plug>ReplaceLine    \" for normal mode (replace a line)\n  <Plug>ReplaceVisual  \" for visual mode\nand if there are no key mapping for <C-K>, <C-K> is mapped to these\noperators. (and <C-K><C-K> for ReplaceLine)\n\nIf you want to map them to another keys, add like below in your vimrc.\n  nmap YOURKEY <Plug>ReplaceMotion\n  nmap YOURKEY <Plug>ReplaceLine\n  vmap YOURKEY <Plug>ReplaceVisual\n\n----------------------------------------------------------------------------\nExamples:\n  in normal mode:\n     <C-K>iw     \" replace inner word with default register\n     \"a<C-K>iw   \" replace inner word with register a\n     <C-K>$      \" replace whole text right the cursor\n     <C-K><C-K>  \" replaces the line under cursor\n\n  in visual mode:\n     <C-K>       \" replace visual selection with default register\n     \"a<C-K>     \" replace visual selection with register a\n"}, {:name=>"ReplaceWithRegister", :summary=>"Replace text with the contents of a register. ", :description=>"DESCRIPTION:\nReplacing an existing text with the contents of a register is a very common\ntask during editing. One typically first deletes the existing text via the\nd, D or dd commands, then pastes the register with p or P. \nMost of the time, the unnamed register is involved, with the following\npitfall: If you forget to delete into the black-hole register (\"_), the\nreplacement text is overwritten! \n\nThis plugin offers a two-in-one command that replaces text covered by a\n{motion}, entire line(s) or the current selection with the contents of a\nregister; the old text is deleted into the black-hole register. \n\nThe replacement mode (characters or entire lines) is determined by the\nreplacement command / selection, not by the register contents. This avoids\nsurprises like when the replacement text was a linewise yank, but the\nreplacement is characterwise: In this case, no additional newline is\ninserted. \n\nUSAGE:\n[\"x][count]gr{motion}\n\t\t\tReplace {motion} text with the contents of register x. \n\t\t\tEspecially when using the unnamed register, this is\n\t\t\tquicker than \"_d{motion}P or \"_c{motion}<C-R>\"\n[\"x][count]grr\n\t\t\tReplace [count] lines with the contents of register x. \n\t\t\tTo replace from the cursor position to the end of the\n\t\t\tline use [\"x]gr$ \n{Visual}[\"x]gr\n\t\t\tReplace the selection with the contents of register x. "}, {:name=>"mrpink", :summary=>"dark not black colorscheme", :description=>"not that much pink. loved the movie.\n\nscreen\n\nhttp://yfrog.com/9fmrpinkp"}, {:name=>"tiddlywiki", :summary=>"TiddlyWiki syntax file", :description=>"For people who like the TiddlyWiki formatting syntax.\n\nhttp://tiddlywiki.org/wiki/TiddlyWiki_Markup"}, {:name=>"PA_ruby_ri", :summary=>"Plugin for getting `ri` documentation while you working with your ruby-like file", :description=>" So, you are working with any ruby-like document(.rb, .rhtml, .rjs, etc) and need get to know some information regarding any ruby entity.\n In normal mode, put cursor on the word and press ,ri buttons. The ruby ri documentation will appear in command screen.\n Or, in visual mode, select needed word and press ,ri buttons. The ruby ri documentation will appear in command screen.\n That's all.\n"}, {:name=>"EnumToCase", :summary=>"Convert enumerated lists to case statements", :description=>"This is a very simple plugin that converts a list of enumerated names (copied and pasted directly from an enum block) into a set of correctly indented case statements.\n\nThe command should be called as:\n\n:'<,'>EnumToCase\n\nMore details are available at http://sites.google.com/site/abudden/contents/Vim-Scripts/enumtocase"}, {:name=>"commentop.vim", :summary=>"commands and operators to comment/uncomment lines in many languages", :description=>"!!NOTICE!! NO BACKWARD COMPATIBILITY FOR 1.0.2 OR BEFORE !!\n\nDescription:\n  This plugin provides a set of commands and operators  to comment or\n  uncomment lines. Linewise comment token (such as double quote in vim\n  script) is detected automatically by looking up filetype of the file.\n  Filetypes working well by default:\n    vim, python, perl, ruby, haskell, sh, bash, zsh, java, javascript,\n    Makefile, tex\n  With definition in this script, these also work:\n    (c), cpp, csharp, php, matlab\n\n  You can also easily define your own comment token for filetype. Add below\n  in your .vimrc:\n    CommentopSetCommentType FILETYPE REMOVEPATTERN INSERTSTRING\n\n  plugin keymaps:\n    <Plug>CommentopToggleNV    \" (n/v) toggle comment [count] or visual lines\n    <Plug>CommentopAppendNV    \" (n/v) comment out [count] or visual lines\n    <Plug>CommentopRemoveNV    \" (n/v) uncomment [count] or visual lines\n\n    <Plug>CommentopToggleOP    \" (n op) toggle comment {motion}\n    <Plug>CommentopAppendOP    \" (n op) comment out {motion}\n    <Plug>CommentopRemoveOP    \" (n op) uncomment {motion}\n\n  default mapping:\n    co       <Plug>CommentopToggleNV\n    cO       <Plug>CommentopAppendNV\n    c<C-O>   <Plug>CommentopRemoveNV\n\n    go       <Plug>CommentopToggleOP\n    gO       <Plug>CommentopAppendOP\n    g<C-O>   <Plug>CommentopRemoveOP\n\nExamples:\n  in normal mode:\n     co          \" toggle comment for this line\n     3cO         \" comment out 3 lines\n\n  in normal mode (operator):\n     goip        \" toggle comment for this paragraph\n     gOa{        \" comment out this {} block\n\n  in visual mode:\n     c<C-O>      \" remove comments in visual selection\n"}, {:name=>"SudoEdit.vim", :summary=>"Edit Files using sudo or su or any other tool", :description=>"If you like this plugin, please rate it!\n\nThis plugin enables vim to read files, using sudo or su or any other tool that\ncan be used for changing the authentication of a user. Therefore it needs any\nof sudo or su installed and usable by the user. This means, you have to know\nthe credentials to authenticate yourself as somebody else.\n\nThis plugin is basically an extended version from sudo.vim \n(http://www.vim.org/scripts/script.php?script_id=729), which seems to be \nunmaintained now. For compatibility reasons, it also supports the sudo: protocol \nhandler, as sudo.vim provides. \n\nThat's why this plugin probably won't work on Windows, but you might be able\nto configure it to use a method that works on Windows (see :h SudoEdit-config)\n\nBy default SudoEdit will first try to use sudo and if sudo is not found it\nwill fall back and try to use su. Note, that you might have to configure these\ntools, before they can use them successfully.\n\nSudoEdit requires at least a Vim Version 7 with patch 111 installed. Patch 111\nintroduced the shellescape() functionality.\n\nThe Plugin provides the 2 Commands :SudoRead for reading a file and SudoWrite\nfor writing a file using the provided super user authentication mechanism. Both \ncommands have file completion enabled to ease the selection of files (if you are able \nto read the path as ordinary user).\n\nYou can optionally configure it to use any other tool, instead of sudo/su. So you could \nprobably adjust it to work on Windows or you can use ssh as authentication method."}, {:name=>"vimrc", :summary=>"Word Processing in Vim (_vimrc win32)", :description=>"Better than cream + menu for console version.\nCTRL+M makes a console menu pop up.\nWorks for GVim and Vim\nCan toggle between Word Processor Mode (word wrap/spell)"}, {:name=>"Screen-vim---gnu-screentmux", :summary=>"Simulate a split shell, using gnu screen or tmux, that you can send commands to.", :description=>"Screenshot:\nhttp://eclim.org/_images/screenshots/vim/gnu_screen_shell.png\n\nThis plugin aims to simulate an embedded shell in vim by allowing you to easily\nconvert your current vim session into one running in gnu screen (or tmux) with\na split gnu screen window containing a shell, and to quickly send statements /\ncode to whatever program is running in that shell (bash, python, irb, etc.).\nSpawning the shell in your favorite terminal emulator is also supported for\ngvim users or anyone else that just prefers an external shell.\n\nCurrently tested on Linux and Windows (win32 gvim and cygwin vim), but\nshould also work on any unix based platform where screen is supported\n(OSX, BSD, Solaris, etc.).\n\nWindows Users: Whether you are using gvim or not, you will need cygwin\ninstalled with cygwin's bin directory in your windows PATH.\n\nYou can also find this screen plugin in my vimfiles github repository:\nhttp://github.com/ervandew/screen\n\nCommands:\n  :ScreenShell [cmd] - Starts a screen hosted shell performing the\n    following steps depending on your environment.\n\n    When running a console vim on a unix based OS (Linux, BSD, OSX):\n      1. save a session file from your currently running vim instance\n         (current tab only)\n      2. start gnu screen with vim running in it\n      3. load your saved session file\n      4. create a lower gnu screen split window and start a shell, or if\n         g:ScreenShellExternal is set, start an external terminal with\n         screen running.\n      5. if a command was supplied to :ScreenShell, run it in the new\n         shell.\n         Ex. :ScreenShell ipython\n\n      Note: If you are already in a gnu screen session, then only steps\n            4 and 5 above will be run.\n\n    When running gvim:\n      1. start an external terminal with screen running.\n      2. if a command was supplied to :ScreenShell, run it in the new\n         shell.\n         Ex. :ScreenShell ipython\n\n  :ScreenSend - Send the visual selection or the entire buffer contents to\n    the running gnu screen shell window.\n\nAn example workflow may be:\n  Open a python file to work on:\n    $ vim something.py\n\n  Decide you want to run all or pieces of the code in an interactive\n  python shell:\n    :ScreenShell python\n\n  Send code from a vim buffer to the shell:\n    :ScreenSend\n\n  Quit the screen session and return to your original vim session:\n    :ScreenQuit\n      or\n    :qa\n"}, {:name=>"sign-diff", :summary=>"show the diff status at left sidebar", :description=>"now this plugin supports Windows though cmd.exe shows up at front most...\nhttp://tyru.yu-nagi.com/stash/screencast_vim_sign-diff.swf\n\ndiff program for windows here:\n  http://gnuwin32.sourceforge.net/packages/diffutils.htm\n  http://www.gfd-dennou.org/library/cc-env/diff-win/SIGEN.htm\nor see cygwin, mingw.\n\n\nUsage:\n  Commands:\n      SDAdd\n          add current file to diff list.\n          current buffer will be diffed with\n          the written file's buffer.\n          if you want to change that, see g:SD_comp_with.\n      SDUpdate\n          update signs.\n      SDEnable\n          start showing signs.\n      SDDisable\n          stop showing signs.\n      SDToggle\n          toggle showing signs.\n      SDList\n          list all signs in current file\n\n\n  Global Variables:\n      g:SD_backupdir (default:'~/.vim-sign-diff')\n          backup directory to save some backup of current file.\n          this dir will be mkdir-ed if doesn't exist.\n\n      g:SD_diffopt (default:&diffopt)\n          script local value of &diffopt.\n\n      g:SD_diffexpr (default:&diffexpr)\n          script local value of &diffopt.\n\n      g:SD_hl_diffadd (default:'DiffAdd')\n          highlight group of the added line(s).\n\n      g:SD_hl_diffchange (default:'DiffChange')\n          highlight group of the changed line(s).\n\n      g:SD_hl_diffdelete (default:'DiffDelete')\n          highlight group of the deleted line(s).\n\n      g:SD_hl_difftext (default:'DiffText')\n          highlight group of the one changed line.\n\n      g:SD_sign_add (default:'+')\n          sign of the added line(s).\n\n      g:SD_sign_change (default:'*')\n          sign of the changed line(s).\n\n      g:SD_sign_delete (default:'-')\n          sign of the changed line(s).\n\n      g:SD_sign_text (default:'@')\n          sign of the one changed line.\n          see :help hl-DiffText\n\n      g:SD_comp_with (default:['written', 'buffer'])\n          g:SD_comp_with is List of two items.\n          valid items are 'buffer'(same as 1), 'written',\n          or number of revisions to revert.\n          get diff output like the following.\n          (if this value is default)\n          $ diff written buffer > output\n\n      g:SD_autocmd_add (default:['BufReadPost'])\n          do autocmd for adding signs with these group\n\n      g:SD_autocmd_update (default:['CursorHold', 'InsertLeave'])\n          do autocmd for updating signs with these group\n\n      g:SD_delete_files_vimleave (default:1)\n          when starting VimLeave event,\n          delete all files under g:SD_backupdir.\n\n      g:SD_no_update_within_seconds (default:3)\n          won't update within this seconds.\n          0 to update each autocmd.\n          see g:SD_autocmd_add and g:SD_autocmd_update\n          about timing to throw event.\n\n\n  Tips:\n      I suggest the following map.\n          nnoremap <C-l>  :SDUpdate<CR><C-l>\n"}, {:name=>"nextCS", :summary=>"Change your color scheme easily", :description=>"nextCS (next Color Scheme) changes your theme in one shot. It's based on some other scripts I found who didn't work with some silly color schemes. This one will load *every* theme you got. If it's incorrect, you'll see the error, but you'll able to just press \"next\" (F12) and you'll see the next.\n\n<F12> Next\n<F11> Previous\n\nSimple enough :)"}, {:name=>"Tag-Signature-Balloons", :summary=>"Tag Signatures in Balloon Tooltips", :description=>"This is a very simple script that displays the 'signature' of a tag when you hover the mouse over that tag.  Only works if Vim has('balloon_eval') and if there is an available tag file.\n\nScreenshots are available here: http://sites.google.com/site/abudden/contents/Vim-Scripts/tag-balloons"}, {:name=>"UltiSnips", :summary=>"The ultimate snippet solution for python enabled Vim.", :description=>"This is the initial release of UltiSnips. It is the Ultimate solution for snippets under Vim. Snippets are intelligent text that spares you a lot of typing. Like many snippets solutions, this one ins heavily inspired by TextMates Snippet Syntax and offers all features that TextMate offers. But in Vim.\n\nThis release features the following features:\n\n- TextMates snippet syntax\n- Tabstops, Placeholders (also nested)\n- Mirrors and Transformations (also inside Placeholders)\n- ShellCode, VimCode and a very powerful PythonCode interpolation\n- Live update as you type\n- snippets for file types and snippets that are always defined\n- same name, multiple snippets\n- recursive snippets: snippet in snippet\n- forward and backward jumping to placeholders and tab stops\n- convert script to download and convert TM bundles\n- > 150 unit tests to guarantee that stuff works.\n- Tested on Linux and Mac OS X\n\nThere have been many attempts to do things right; I think, this one nails it. \n\nTry it:\nExample 1:\n- open /tmp/file.c\ntype for<tab>endcounter<c-j>mycounter<c-j><c-j>int a = 3;\nyields:\n------------------- SNIP -------------------\nfor(size_t mycounter = 0; mycounter < endcounter; ++mycounter)\n{\n\tint a = 3;\n}\n------------------- SNAP -------------------\n\nExample 2:\n- open /tmp/blah.help\n- :set ft=help\n- type sec<tab>MY COOL SECTION<c-h>blah\nyields:\n------------------- SNIP -------------------\n=============================================================================\nMY COOL SECTION                                        *blah-my-cool-section*\n\nblah\n------------------- SNAP -------------------\n\n\nIf you like the script, please contact me and vote for the script!"}, {:name=>"textobj-syntax", :summary=>"Text objects for syntax highlighted items", :description=>"*textobj-syntax* is a Vim plugin to provide |text-objects| to select one or\nmore items which are syntax highlighted.\n\nFor example, if you edit the following line in your vimrc, characters which\nare underlined with \"~\" are syntax highlighted.\n\n\tnnoremap <silent> ql  :<C-u>clist<Return>\n\t~~~~~~~~ ~~~~~~~~      ~~~~~     ~~~~~~~~\n\nSo |<Plug>(textobj-syntax-a)| and |<Plug>(textobj-syntax-i)| (which are mapped\nfrom  |ay| and |iy| by default) select one of the underlined items if the\ncursor is located at the one of them.\n\n\nRequirements:\n- Vim 7.2 or later\n- |textobj-user| 0.3.8 or later (vimscript#2100)\n\nLatest version:\nhttp://github.com/kana/vim-textobj-syntax\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-syntax.html"}, {:name=>"mutt-aliases", :summary=>"another script to read your mutt aliases file", :description=>"I either wasn't happy with or unable to operate the mutt aliases scripts I found on this site, so I wrote my own.  It reads your aliases from g:mutt_aliases_file (global var), or from the file indicated in ~/.muttrc, or from ~/.aliases.\n\nIt stores them in a complete function, which can be activated with either\n\n    i_CTRL-X-CTRL-U  (see :help i_CTRL-X-CTRL-U)\n\nor via an insert mode macro \"@@\"."}, {:name=>"mutt-canned", :summary=>"a utility to build and use canned responses in mutt (and indirectly in vim)", :description=>"I needed a utility to deal with canned responses.  I got really addicted to the canned response stuff in gmail and my mutt had gmail envy.\n\nThis is my first attempt to remedy that, but I suspect it will evolve over time.  Feedback welcome."}, {:name=>"Proj", :summary=>"Simple project tool", :description=>"Proj lets you save settings for your project in a simple file.\n\nhttp://github.com/tmallen/proj-vim\n\nCommands:\n    Note that the easiest way to use Proj is with the key mappings bound \n    to the commands below. <Leader>pt is the default mapping to open a \n    tab-specific project, for instance.\n\n    :ProjAdd\n     Prompts to add a new project in the current directory.\n\n    :ProjFile\n     Open the project file in a split.\n\n    :ProjInfo\n     Show all of the current project's settings in the status line.\n\n    :ProjMenu\n     Open a menu with all of these commands.\n\n    :ProjNotes\n     Open the project notes file in a split.\n\n    :ProjOpen\n     Prompt to open a project.\n\n    :ProjOpenTab\n     Prompt to open a project for the open tab. Projects opened this way will\n     only be active in the opened tab, so that each tab can contain a project.\n\n    :ProjRefresh\n     Reload the current project.\n\n    :ProjReload\n     Reload the project file.\n\n    :ProjVim\n     Open the project's vim settings file in a split.\n\nFile Syntax:\n    DOS .ini\n\nAvailable Settings:\n    browser - A custom command for the filebrowser\n    notes - Path to a text file with project notes\n    path - Path to the project root directory\n    vim - Path to a file with vim commands\n    docksend - Upload all files in the project on save if the TransmitFtp\n      plugin is available\n\nSample Project File:\n    ; This is a comment\n    [project]\n    path = /path/to/project\n    vim = /path/to/settings_file.vim\n    docksend ; boolean option\n\n    [path-with-spaces]\n    path = /path/to/my\\ project ; Escape spaces with \\\n\nGlobal Options:\n    * g:ProjDisableMappings (default: 0) - Set to 1 to turn off all\n        mappings defined by this plugin\n    * g:ProjFile (default: '~/.vimproj') - Path to the project file.\n    * g:ProjFileBrowser (default: 'NERDTree') - The filebrowser command.\n        Set to 'off' to not open a filebrowser.\n    * g:ProjMapLeader (default: '<Leader>p') - The prefix for default mappings\n    * g:ProjNoteFile (default: 'notes.txt') - Path to the project notes file\n    * g:ProjSplitMethod (default: 'vsp') - Command to use when opening a file\n        with a Proj command such as ProjFile.\n\n    Default maps: These are all prefixed with g:ProjMapLeader by default.\n        g:ProjAddMap (default: 'a') - Calls :ProjAdd\n        g:ProjFileMap (default: 'f') - Calls :ProjFile\n        g:ProjInfoMap (default: 'i') - Calls :ProjInfo\n        g:ProjMenuMap (default: 'm') - Calls :ProjMenu\n        g:ProjNotesMap (default: 'n') - Calls :ProjNotes\n        g:ProjOpenMap (default: 'o') - Calls :ProjOpen\n        g:ProjOpenTabMap (default: 't') - Calls :ProjOpenTab\n        g:ProjReloadMap (default: 'r') - Calls :ProjReload\n        g:ProjVim (default: 'v') - Calls :ProjVim"}, {:name=>"arc.vim", :summary=>"A syntax highlighter & filetype plugin for Paul Graham's Arc Lisp dialect.", :description=>"(Scroll down to see the install details.)\n\nNote: if you have a bug to report, please do so with the issue tracker at http://bitbucket.org/fallintothis/arc-vim/issues/ since I probably won't respond to emails.\n\nI've only tested this on Vim 7.2.  I have no idea (one way or the other) how backwards-compatible it is.\n\nSYNTAX:\n\nThe following options are available for customizing the Arc highlighter.  They work well in conjunction with the accompanying Arc ftplugin options (see below).\n\n- g:arc_rainbow\n\nIf this variable is nonzero, then matching pairs of parentheses will highlight in 10 different rainbow colors.  If this variable is 0, then rainbow colors are gone; it's just normal parentheses and quasiquoted parentheses.\n\n- g:arc_always_atstrings\n\nIn Arc 3, there is an option to enable string interpolation of arbitrary expressions using at-signs by saying\n  \n  (declare 'atstrings t)\n\nThen, for instance, \"1 + 2 = @(+ 1 2)\" is the same as \"1 + 2 = 3\".  If g:arc_always_atstrings is nonzero, then expressions after the @-symbol inside of strings will be highlighted like normal code, as though you had (declare 'atstrings t).  If this variable is 0, then atstrings will not highlight.\n\nIf you want more intelligent control over atstring highlighting, check out the accompanying ftplugin options below.\n\nEXAMPLE:\n\nYou could put\n\n  let g:arc_always_atstrings=1\n\nin your .vimrc, and whenever you were highlighting an Arc file, atstrings would highlight, but parentheses would be colored normally (non-rainbow), since you don't have to explicitly set either variable to 0.  If they don't exist, they'll do nothing anyways.\n\nFTPLUGIN:\n\nThe following options are available for customizing the Arc ftplugin.  They are meant to work in conjunction with the accompanying Arc syntax highlighter (see above).\n\n- g:arc_detect_atstrings\n\nIn Arc 3, there is an option to enable string interpolation of arbitrary expressions using at-signs by saying\n  \n  (declare 'atstrings t)\n\nThen, for instance, \"1 + 2 = @(+ 1 2)\" is the same as \"1 + 2 = 3\".  If g:arc_detect_atstrings is nonzero, then expressions after the @-symbol inside of strings will be highlighted like normal code according to the following cases:\n\n  - if a form that will enable atstrings, like\n      (declare 'atstrings t)\n    is in the source code, highlight expressions after @-symbols\n\n  - if a form that will disable atstrings, like\n      (declare 'atstrings nil)\n    is in the source code, do not highlight expressions after @-symbols\n\n  - if there are multiple forms that contradict each other (enabling\n    atstrings in one place while disabling them in another), then be safe and\n    do not highlight expressions after @-symbols.\n\nThis option can be used as an alternative to g:arc_always_atstrings, which is found in the Arc syntax highlighter (see above).  If, however, g:arc_always_atstrings is nonzero, it will take precedence over g:arc_detect_atstrings and always highlight atstrings.  When g:arc_always_atstrings is 0, behavior is dictated by g:arc_detect_atstrings.\n\nChanges in highlighting are triggered whenever you write to the file.  If you change, say\n\n  (declare 'atstrings t)\n\nto\n\n  (declare 'atstrings nil)\n\nthen :w, the atstring highlighting will be turned off.\n\n- g:arc_bodops\n\nIMPORTANT: This feature is currently available only if your Vim installation has +python support.  See :h python\n\nIf this variable is nonzero, then on every file write your source code is inspected in an attempt to find top-level macro definitions that have body parameters.  That is, \n\n  (mac foo (vars vals . body)\n    something)\n\nwill be detected, because it is a macro that takes a rest parameter named \"body\".  Whereas\n\n  (def foo (a b . body)\n    something)\n\nwill not, because it's not a macro definition, and\n\n  (def make-macro (name)\n    `(mac ,name body (pr \"stuff\")))\n\nwill not recognize the quasiquoted macro definition, even though it takes a body parameter.\n\nThe name of each macro found in this way will be added to the &lispwords variable.  Then, with auto-indentation, the macro\n\n  (mac foo body\n    bar)\n\nwill indent like\n\n  (foo a\n    b\n    c)\n\ninstead of\n\n  (foo a\n       b\n       c)\n\n(Sorry; that probably doesn't look right in a non-fixed-width font.)  This can be useful for macros that you define to be syntactic forms, much like how, say, looping constructs are defined in Arc itself.\n\n- g:arc_highlight_lispwords\n\nIf nonzero, every word in the &lispwords variable will highlight as though it were syntax.  The highlighting is updated every time you write to the file.  This can be useful in conjunction with g:arc_bodops, so that after you write the macro\n\n  (mac my-each (x xs . body)\n    ...do stuff...)\n\neach occurrence of \"my-each\" will be highlighted & indented just like the \"each\" macro.  You can even add words you want to be highlighted & indented by going\n\n  :setl lispwords+=foo\n\nThis lispword will then persist across file-writes, even if you've not defined a \"foo\" macro.\n\nMost of these extra features are useless without the accompanying Arc syntax highlighter, so you probably want to use it if you use these features.\n\nEXAMPLE:\n\nYou could put\n\n  let g:arc_detect_atstrings=1\n  let g:arc_bodops=1\n  let g:arc_highlight_lispwords=1\n\nin your .vimrc, and when using the Arc syntax highlighter you can test, say, news.arc and see that:\n\n  - atstrings are highlighted, as there is a positive declaration at the top of the source\n  \n  - macros like \"adop\" and \"edop\" are highlighted & auto-indented as lispwords\n\n  - but the macro \"newsop\" isn't highlighted or auto-indented, because its rest parameter is named \"args\".  So, you can :setl lw+=newsop and :w to see \"newsop\" become highlighted."}, {:name=>"AutoFenc.vim", :summary=>"Tries to automatically detect file encoding", :description=>"  This script tries to automatically detect and set file encoding when\n  opening a file in Vim. It does this in several possible ways (according\n  to the configuration) in this order (when a method fails, it tries\n  the following one):\n    (1) detection of BOM (byte-order-mark) at the beginning of the file,\n        only for some multibyte encodings\n    (2) HTML way of encoding detection (via <meta> tag), only for HTML based\n        file types\n    (3) XML way of encoding detection (via <?xml ... ?> declaration), only\n        for XML based file types\n    (4) CSS way of encoding detection (via @chardet 'at-rule'), only for\n        CSS files\n    (5) checks whether the encoding is specified in a comment (like\n        '# Encoding: latin2'), for all file types\n    (6) tries to detect the encoding via specified external program\n        (the default one is enca), for all file types\n\n  If the autodetection fails, it's up to Vim (and your configuration)\n  to set the encoding.\n\n  Configuration options for this plugin (you can set them in your $HOME/.vimrc):\n   - g:autofenc_enable (0 or 1, default 1)\n       Enables/disables this plugin.\n   - g:autofenc_max_file_size (number >= 0, default 10485760)\n       If the size of a file is higher than this value (in bytes), then\n       the autodetection will not be performed.\n   - g:autofenc_disable_for_files_matching (regular expression, see below)\n       If the file (with complete path) matches this regular expression,\n       then the autodetection will not be performed. It is by default set\n       to disable autodetection for non-local files (e.g. accessed via ftp,\n       scp etc., because the script can't handle some kind of autodetection\n       for these files). The regular expression is matched case-sensitively.\n   - g:autofenc_disable_for_file_types (list of strings, default [])\n       If the file type matches some of the filetypes specified in this list,\n       then the autodetection will not be performed. Comparison is done\n       case-sensitively.\n   - g:autofenc_autodetect_bom (0 or 1, default 1)\n       Enables/disables detection of encoding by BOM.\n   - g:autofenc_autodetect_html (0 or 1, default 1)\n       Enables/disables detection of encoding for HTML based documents.\n   - g:autofenc_autodetect_xml (0 or 1, default 1)\n       Enables/disables detection of encoding for XML based documents.\n   - g:autofenc_autodetect_css (0 or 1, default 1)\n       Enables/disables detection of encoding for CSS documents.\n   - g:autofenc_autodetect_comment (0 or 1, default 1)\n       Enables/disables detection of encoding in comments.\n   - g:autofenc_autodetect_comment_num_of_lines (number >= 0, default 5)\n       How many lines from the beginning and from the end of the file should\n       be searched for the possible encoding declaration\n   - g:autofenc_autodetect_ext_prog (0 or 1, default 1)\n       Enables/disables detection of encoding via external program\n       (see additional settings below).\n   - g:autofenc_ext_prog_path (string, default 'enca')\n       Path to the external program. It can be either relative or absolute.\n       The external program can take any number of arguments, but\n       the last one must be a path to the file for which the encoding\n       is to be detected (it will be supplied by this plugin).\n       Output of the program must be the name of encoding in which the file\n       is saved (string on a single line).\n   - g:autofenc_ext_prog_args (string, default '-i -L czech')\n       Additional program arguments (can be none, i.e. '').\n   - g:autofenc_ext_prog_unknown_fenc (string, default '???')\n       If the output of the external program is this string, then it means\n       that the file encoding was not detected successfully. The string must\n       be case-sensitive.\n\nRequirements:\n  - filetype plugin must be enabled (a line like 'filetype plugin on' must\n    be in your $HOME/.vimrc [*nix] or %UserProfile%\\_vimrc [MS Windows])\n\nInstallation Details:\n  Put this file into your $HOME/.vim/plugin directory [*nix]\n  or %UserProfile%\\vimfiles\\plugin folder [MS Windows].\n\nNotes:\n This script is by all means NOT perfect, but it works for me and suits my\n needs very well, so it might be also useful for you. Your feedback,\n opinion, suggestions, bug reports, patches, simply anything you have\n to say is welcomed!\n\n There are two similar plugins to this one, so if you don't like this one,\n you can test these:\n   - FencView.vim (http://www.vim.org/scripts/script.php?script_id=1708)\n       Mainly supports detection of encodings for asian languages.\n   - MultiEnc.vim (http://www.vim.org/scripts/script.php?script_id=1806)\n       Obsolete, merged with the previous one.\n Let me know if there are others and I'll add them here.\n\nChangelog:\n  1.1.1 (2009-10-03)\n    - Fixed the comment encoding detection function (the encoding was not\n      detected if there were some alphanumeric characters before\n      the \"encoding\" string, like in \"# vim:fileencoding=<encoding-name>\").\n\n  1.1 (2009-08-16)\n    - Added three configuration possibilites to disable autodetection for\n      specific files (based on file size, file type and file path).\n      See script description for more info.\n\n  1.0.2 (2009-08-11)\n    - Fixed the XML encoding detection function.\n    - Minor code and documentation fixes.\n\n  1.0.1 (2009-08-02)\n    - Encoding autodetection is now performed only if the opened file\n      exists (is stored somewhere). So, for example, the autodetection\n      is now not performed when a new file is opened.\n    - Correctly works with .viminfo, where the last cursor position\n      in the file is stored when exiting the file. In the previous version\n      of this script, this information was sometimes ignored and the cursor\n      was initially on the very last line in a file. If the user does not\n      use this .viminfo feature (or he does not use .viminfo at all),\n      then the cursor will be initially placed on the very first line.\n    - (Hopefully) fixed the implementation of the function which sets\n      the detected encoding.\n\n  1.0 (2009-07-26)\n    - Initial release version of this script.\n"}, {:name=>"cssvar", :summary=>"Use variables in CSS", :description=>"This plugin allows you to define and use variables in stylesheets and make simple calculations with them, like this:\n\n    [pagewidth = 1000]\n    #wrapper { \n        width: [pagewidth]px;\n        margin: [pagewidth/4]px}\n\nIn the target CSS file this will become:\n\n    #wrapper { \n        width: 1000px;\n        margin: 250px}\n\nYou can assign the value of a color to a variable and use it anywhere in the stylesheet. When you change the assignment, the value is updated in the whole stylesheet.\n\n    [textcolor = #09c]\n    h1 {color: [textcolor]}\n\nThe variables are surrounded by two delimiters which you can define in the plugin file (or anywhere in the stylesheet). In the examples above square brackets are used but any printable ascii character, not used in the CSS code, will do. \n\n    ^textcolor = #09c$\n\nIt's possible to define the same character as opening and closing delimiter.\n\n    |textcolor = #09c|\n\nHOW IT WORKS\nThe plugin uses two CSS files. One source file (in the current buffer) with the CSS code and variables and one target file with pure CSS and calculated variables. This last file is generated when the plugin is invoked and you should link to this file in the (X)HTML.\n"}, {:name=>"math", :summary=>"Math keymap and a menu for inserting math symbols", :description=>"This plugin has three parts, a keymap, a menu for inserting math symbols, and a few maps.  The characters produced are in utf-8.\n\nThe Keymap:\n\n  :set kmp=math\n\n  Uses vim's keymap support to define key sequences which elicit Greek\n  upper case and lower case symbols, superscripts, subscripts, \"vulgar\"\n  fractions, arrows, grouping symbols, operators, relational symbols,\n  set symbols, and of course the ever popular miscellaneous.\n\nThe Menu:\n  To enable the menu, use the mouse to select  [DrChip.MathKeys.Enable].\n  This menu operates in the insert/replace/ex mode; when in insert/replace/ex,\n  use the mouse to select a symbol from the various menus and it will be\n  inserted.\n\nThe Maps:\n  While in visual block mode, and if :MathStart has been run:\n  _  will make various symbols into subscript symbols (numbers, vowels)\n  ^ will make various symbols into superscript symbols\n  & will transform symbols into related math symbols (- into a division line, roman alphabet into Greek, etc)\n\n(alpha/beta version available at http://mysite.verizon.net/astronaut/vim/index.html#MATH)\n"}, {:name=>"Rename2", :summary=>"Rename the file you are currently editing and keep on editing", :description=>"This is really just a bugfix for the original Rename script by Christian J. Robinson (vimscript#1928) which suffered from the fact that it did not consider the possibility that the file in the current buffer might no reside in the current directory. \nIn my version, the new file will always end up in the directory of the original file."}, {:name=>"translit_converter", :summary=>"convert transliterated text (russian)", :description=>"This plugin creates commands for converting from and to Russian translit using utf-8 encoding. For example, to write \"Чебурашка\", write \"Cheburashka\" or \"CHeburashka\", select the word and execute command \":Torus v\" .\n\nSimilar plugins:\nhttp://www.vim.org/scripts/script.php?script_id=2401\nhttp://www.vim.org/scripts/script.php?script_id=2469\n\nUSAGE\n=====\nThis plugin creates two commands: Torussian and Fromrussian.\n\n:[range]Torussian [v]\n    convert from translit (latin alphabet) to Russian (utf-8)\n\n:[range]Fromrussian [v]\n    convert from Russian (utf-8) to translit\n\nThese can be used as follows (commands can be abbreviated):\n\n:Torus\n    Convert current line.\n\n:'<,'>Torus\n    Convert lines in Visual range. Any other range can be specified, for example :%Torus will convert entire buffer.\n\n:Torus v\n:'<,'>Torus v\n    Convert text in Visual area. If a range is specified, it is ignored.\n\nCUSTOMIZING\n===========\nIf you don't like my transliteration version, edit s:table_ru.\n\nIt is easy to add converters for other alphabets. First, create conversion table:\n    let s:table_greek = [ ..... ]\n\nAnd then add new commands:\n    com! -range -nargs=? Togreek   call s:Translit_Converter(<line1>,<line2>, 'table_greek', 0,1, <q-args>)\n    com! -range -nargs=? Fromgreek call s:Translit_Converter(<line1>,<line2>, 'table_greek', 1,0, <q-args>)\n"}, {:name=>"Syntax-Highlighting-for-db2diag.log", :summary=>"Syntax plug in for IBM DB2 diagnostic log file", :description=>"This syntax plug-in highlights the main fields in a db2diag.log file."}, {:name=>"jsbeautify", :summary=>"a javascript source code formatter", :description=>"a plugin to format your javascript souce code\n\nA js version can be found at:\nhttp://jsbeautifier.org/\n\nI just translated it into vimscript, it works at a low performance:)\n\nusage:\n  <leader>ff\nor \n  bind the g:Jsbeautify() function to any short key you like"}, {:name=>"tkl.vim", :summary=>"A syntax file to the script files used in the Tikle tool", :description=>"A syntax file to the script files used by the Tikle tool.\n\nMore info about Tikle at http://c2zlabs.com\n\nI've only tested this with Vim 7.1 and 7.2"}, {:name=>"jslint.vim", :summary=>"Check JavaScript files for errors with JSLint", :description=>"Vim plugin and command line tool for running JSLint (http://jslint.com/).\n\nJSLint is a handy tool that spots errors and common mistakes in JavaScript code.\n\nThe source code for jslint.vim is hosted at (http://github.com/hallettj/jslint.vim).\n\nThis is alpha software and is under heavy development.\n\n\n Usage\n -----------------------\n\n- This plugin automatically checks the JavaScript source and highlights the\n  lines with errors.\n\n  It also will display more information about the error in the commandline if the curser is\n  in the same line.\n\n- You also can call it manually via `:JSLintUpdate`\n\n- (optional) Add any valid JSLint options to `~/.jslintrc` file, they will be\n  used as global options for all JavaScript files.\n  For example:\n\n        /*jslint browser: true, regexp: true */\n        /*global jQuery, $ */\n\n        /* vim: set ft=javascript: */\n\nTo get a detailed report of any issues in your JavaScript file outside of Vim,\nrun the `bin/jslint` executable in a terminal. For example:\n\n    $ bin/jslint ftplugin/jslint/fulljslint.js\n\nYou can copy `bin/jslint` into for `PATH` for easier access. The executable\nrequires that the Vim plugin is installed and also requires Ruby.\n\nTo disable error highlighting altogether add this line to your `~/.vimrc` file:\n\n    let g:JSLintHighlightErrorLine = 0\n\n\nAlternative Plugins\n---------------------\n\nThere are other plugins for Vim that integrate JavaScript Lint (http://www.javascriptlint.com/).  JavaScript Lint is another JavaScript checker that is similar to JSLint.\n\njsl.vim (http://www.vim.org/scripts/script.php?script_id=2630) uses Vim's compiler infrastructure making its use consistent with syntax checkers for other languages.\n\njavaScriptLint.vim (http://www.vim.org/scripts/script.php?script_id=2578) runs the contents of a JavaScript file through JavaScript Lint after the file's buffer is saved and places any warnings in the quickfix error window.\n\n\nCredits\n---------\n\n- Jesse Hallett -- original author\n- Nathan Smith -- Windows compatibility, quickfix integration, better OS X\n  compatibility, support for node.js, and other improvements\n- Travis Jeffery -- Easy plugin installation with rake\n- Sam Goldstein -- Display of problem report for the current line and bug fixes\n- Bryan Chow -- Fixes for formatting issues and typos\n- Jeff Buttars -- Options to remove and to disable error highlighting\n- Rainux Luo -- Support for reading JSLint options from a `~/.jslintrc` file\n- Pascal Hartig -- Support for running jslint with rhino and other updates\n- Martin Schürrer -- Fixing path issues and error handling\n- Nik Graf -- Documentation updates\n- Ian McCracken -- Real-time error checking\n- Luke Smith -- Enhancement of OS X support\n- Michael Smith -- Feature to customize JavaScript executable that is used by\n  setting JS_CMD environment variable\n- Szilágyi Szilveszter -- Fixes for bugs when running in Windows\n\n\nLicense\n---------\n\nCopyright (c) 2008-2010 Jesse Hallett <hallettj@gmail.com>, except where\notherwise noted\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"}, {:name=>"donbass.vim", :summary=>"Finely tuned, 256 color, light-grey background colorscheme", :description=>"This is a light-background colorscheme for 256-color terminals and GUI. It was inspired by xoria256.vim colorscheme (vimscript #2140) by Dmitriy Y. Zotikov (xio) <xio@ungrund.org>, though you probably won't find anything in common. I wanted such beautiful colors as xoria but with light background.\n\nScreenshots:\nhttp://i.piccy.info/i4/d6/69/98d9f22ba6312262af3d909805ec.png\nhttp://i.piccy.info/i4/d3/8d/5e1f639a96a7345b7e0d21851823.png\n\nColor numbers (0-255) taken from Calmar's site:\nhttp://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html\n\nSuggestions and patches are welcome."}, {:name=>"sherlock.vim", :summary=>"Add completion in command line for '/', '?' and ':.../'", :description=>"sherlock.vim add completion from current buffer for command line mode ':' after a '/', and in command line mode '/' and '?'.\n\nBy default, it use <C-Tab> for forward completion, and <C-S-Tab> for backward completion.\n\nFor example:\n:%s/tes<C-Tab> list all word which begin with 'tes' after current cursor position;\n:%s/tes<C-S-Tab> list all word which begin with 'tes' before current cursor position;\n/tes<C-Tab> list all word which begin with 'tes' after current cursor position;\n/tes<C-S-Tab> list all word which begin with 'tes' before current cursor position;\n?tes<C-Tab> list all word which begin with 'tes' after current cursor position;\n?tes<C-S-Tab> list all word which begin with 'tes' before current cursor position;\n\nIn ':' mode, completion is available only after a '/'.\n\nWhen the right string is in command line, you can:\n1) Validate it with <Enter>, or type <Esc> to go away from command line if you are in '?' or '/' mode;\n2) Validate it with <Enter> or '/', or type <Esc> to go away from command line if you are in ':' mode.\n\nYou can override the default mapping with something like that in your .vimrc:\ncnoremap <Whatever you want here> <C-\\>esherlock#completeBackward()<CR>\ncnoremap <Whatever you want here> <C-\\>esherlock#completeForward()<CR>\n\nYou can disable this plugin with this line in your .vimrc:\nlet sherlock#disable = 1\n\nPlease, report any bug to sherlock.vim[..at..]mageekbox.net."}, {:name=>"Notes", :summary=>"Lightweight note taker plugin", :description=>"If you like to keep your notes in clear text files, Vim is of course the best editor you could use to edit. This plugin simply makes it easier to create, open, move, search etc. these notes using custom commands, all without having to leave the comfort of Vim.\n\nEach note is a separate text file that is saved under a common root configured using g:notesRoot. You can open these note files just like any other file or use the :Note command with command-line completion to make it easier.\n\nStarting to take a new note should be as simple as typing :Note. Enter your text and save to generate a name automatically based on the first line. You can also start typing in an unnamed buffer (created using <Ctrl-W>n) and later convert it as a note using :NoteAsNew command (again named automatically based on the first line).\n\nIf you prefer, you can organize the notes into subfolders using your favorite file browser (in or outside Vim) while the :NoteNewFolder, :NoteMove and :NoteRemove commands from the plugin simplify certain operations from within Vim.\n\nFeatures:\n- Start a new note with less number of keystrokes and less thinking\n- Automatic name generation\n- Ease of opening with command-line completion\n- Searching for patterns\n- Ease of organizing\n\nFor full documentation, refer to doc/notes.txt or generate helptags and type :help notes.txt.\n"}, {:name=>"Buffer-Reminder", :summary=>"open not closed buffers on vim entry ", :description=>"Attention, names of variables have changed ! \n\nthis plugin is destine to people, which would like to save list of opened files on vim exit, and open them on vim enter. \nTested on Win32 platform, but on Linux it's must work too. \n\nthere is three variable which you should config: \n\nlet g:BufferReminder_SaveOpenedFilesListBUFFER=1  (def)       - if you like buffer one variant \nlet g:BufferReminder_SaveOpenedFilesListBUFFER=0                 - if you like tabs open variant \n\nthis option work only in tabs mode:\nlet g:BufferReminder_removeNoNameBuffer=1    (def)            - if you hate NoName buffer, in this case it's satisfy you on 100% ! \nlet g:BufferReminder_removeNoNameBuffer=0                        - in this case, we will spare NoName buffer \n\nlet g:BufferReminder_openedFileBuffersList=\"pathToFileName\"   - if you dont like default path of file \n\n"}, {:name=>"PreviewDialog", :summary=>"Shows a GTK dialog with the color or image below the cursor", :description=>"PreviewDialog is written to show a GTK preview dialog with the color or image below the cursor.\nIt's very useful to edit css files, but can be used for anything.\n\nFor a quick introduction, see this screencast:\nhttp://blog.taylon.eti.br/files/preview_dialog.ogg\n\nOptions:\n   g:PreviewDialogKey:\n     Change shotcurt (Default is 'F8')\n    \n   g:PreviewDialogEnable:\n     Enable PreviewDialog (Default is '1')\n    \n   g:PreviewDialogAuto:\n     Shows the dialog automatically when hold cursor over a word (Default is '1')\n\n   g:PathPyFile:\n     Set the path of .py file (Default is '~/.vim/')\n    \n   g:DialogPosition:\n     Set default window position. Can you use 'center', 'right_top' or 'right_bottom' (Default is 'right_bottom')\n\nAny suggestion, bug report or feature request are welcome."}, {:name=>"Logcat-syntax-highlighter", :summary=>"Syntax highlighting for Android logcat files", :description=>"Highlights Android logcat files with extension *.logcat based on the log level\nPlease see http://developer.android.com/guide/developing/tools/adb.html#logcat for more information on Android logcat logs.\n"}, {:name=>"Syntastic", :summary=>"Automatic syntax checking ", :description=>"Grab the latest version from here: http://github.com/scrooloose/syntastic/\n\nSyntastic is a syntax checking plugin that runs buffers through external syntax\ncheckers as they are saved and opened. If syntax errors are detected, the user\nis notified and is happy because they didn't have to compile their code or\nexecute their script to find them.\n\nThe following functionality is provided and must be enabled/activated as\nindicated in the help file:\n    * A statusline flag appears when syntax errors are detected\n    * |signs| are placed beside lines with syntax errors, where a different\n      sign is used for errors and warnings.\n    * The :Errors command is provided to open a |location-list| for\n      the syntax errors in the current buffer\n\nSyntastic comes in two parts: the syntax checker plugins, and the core script\n(i.e. syntastic.vim). The syntax checker plugins are defined on a per-filetype\nbasis where each one wraps up an external syntax checking program. The core\nscript delegates off to these plugins and uses their output to provide the\nsyntastic functionality. Currently, syntax checking plugins exist for eruby,\nhaml, html, javascript, php, python, ruby and sass.\n\nIf your language is not supported then see |syntastic-syntax-checkers| for\ndetails on how to implement a syntax checking plugin, and be sure to send me a\npatch ;-)\n\nThis plugin is currently only recommended for *nix users. It is functional on\nWindows, but since the syntax checking plugins shell out, the command window\nbriefly appears whenever one is executed.\n"}, {:name=>"bib_autocomp.vim", :summary=>"Autocompletion of BibTeX entries", :description=>"  This filetype plugin does autocompletion of BibTeX entries in *.bib files.\n  When you type the beginning of a BibTeX entry (e.g. @article{), it will\n  try to complete it. The completed result might then look like this\n  (see configuration options for customization):\n    @article{<cursor position>,\n\t      author = {},\n        title = {},\n        journal = {},\n        year = {}\n    }\n\n  Configuration options for this plugin (you can set them in your $HOME/.vimrc):\n   - g:bib_autocomp_enable (0 or 1, default 1)\n       Enables/disables this plugin.\n   - g:bib_autocomp_tag_indent (string, default \"\\<Tab>\")\n       Indention of tags inside a BibTeX entry. So for example, if you want\n       each tag to be indented by four spaces, set this to \"    \". Or if\n       you want to indent by two tabs, set this to \"\\<Tab>\\<Tab>\".\n   - g:bib_autocomp_tag_content_enclosing (string, default '{}')\n       Enclosing of a tag content. If you prefer quotes to curly brackets,\n       set this to '\"\"' (the tag will then look like this: author = \"\").\n   - g:bib_autocomp_trim_last_comma (0 or 1, default 1)\n       When set to 1, it will omit the last comma in the tag list (so\n       the result will look as the @article one in the previous paragraph).\n       If you want to keep the comma after the last tag, set this to 0.\n   - g:bib_autocomp_special_entries (list of strings, default ['string',\n       'preamble', 'comment'])\n       List of entries, which are considered \"special\". A special entry\n       is not a type of a publication, so these entries will be completed\n       just with the enclosing curly brackets, e.g. @comment{}\n       (see http://www.bibtex.org/Format/ for more info).\n   - g:bib_autocomp_entry_mapping (dictionary, read on for info)\n       This dictionary defines a mapping between a BibTeX entry name\n       and the list of tags it should contain. It is by default initialized\n       to all standard entries (see http://en.wikipedia.org/wiki/Bibtex)\n       and all required tags for each entry are inserted.\n       If you want to add some entry or change the list of tags, set the\n       configuration variable in your configuration file as follows:\n         let g:bib_autocomp_entry_mapping = {\n           \\ 'entry-name': ['first-tag', 'second-tag', ...]\n           \\ }\n       So for example, if you want to change the list of tags for the\n       @misc entry, set the variable in this fashion:\n         let g:bib_autocomp_entry_mapping = {\n           \\ 'misc': ['author', 'title', 'howpublished', 'url']\n           \\ }\n       If you also want to add some custom entry, then use this template:\n         let g:bib_autocomp_entry_mapping = {\n           \\ 'misc': ['author', 'title', 'howpublished', 'url'],\n           \\ 'custom': ['author', 'title', 'url']\n           \\ }\n       As you can see, it is just a dictionary written in the Vimscript\n       language.\n\nRequirements:\n  - filetype plugin must be enabled (a line like 'filetype plugin on' must\n    be in your $HOME/.vimrc [*nix] or %UserProfile%\\_vimrc [MS Windows])\n\nInstallation Details:\n  Put this file into your $HOME/.vim/ftplugin directory [*nix]\n  or %UserProfile%\\vimfiles\\ftplugin folder [MS Windows].\n\nNotes:\n This script is by all means NOT perfect, but it works for me and suits my\n needs very well, so it might be also useful for you. Your feedback,\n opinion, suggestions, bug reports, patches, simply anything you have\n to say is welcomed!\n\nChangelog:\n  1.0 (2009-08-11)\n    - Initial release version of this script.\n"}, {:name=>"v2.vim", :summary=>"A syntax highligher for Adept/Staeubli V+ / V2 Robot sources", :description=>"A syntax highligher for Adept/Staeubli V+ / V2 Robot sourcecodes"}, {:name=>"bclear", :summary=>"A bright, white color scheme for gVim.", :description=>"A bright and relatively high-contrast GUI color scheme consisting of a white background and easy-to-read colors which are meant to be strong without being painfully vivid. Aside from undercurl and underline, all other attributes are removed (e.g. no bold or italic text). No language-specific highlighting is included: only the basics. \n\nScreenshot (Vim's highlight test): http://ompldr.org/vNXVkOQ"}, {:name=>"vimper", :summary=>"Yet another IDE using Vim...", :description=>"Vimper is a Vim based IDE, a set of plugins to enable creation of development projects. There are a lot of useful plugins available to aid development, but you need to run around to gather them. The goal is to gather a lot of these plugins into one single package and also extend them or add new plugins.\n\nCurrently it supports:\n * C++ IDE --  definition of C/C++ projects \n(projects can also be created for developing vim plugins, mainly for demo purpose). \n\nCurrent features include:\n\n* Tree based file explorer (VTreeExplore)\n* Auto generation of makefiles.\n* Integration and navigation of make errors/warnings.\n* Project Window (listing all defined projects)\n\nUpdate:\n* Browser to View/Navigate Class/Structure/Function definitions\n* Search files within project and navigate to search results.\n\nGoto http://vimper.sourceforge.net/ for more details and documentation. If you run into any issues or bugs it would be great if you could log them at the sourceforge project. Any feedback or suggestion also welcome.\n\nUse :helptags <install dir>/doc to add the vimdoc files and type :help Vimper to view the help documentation.\n\nNote: Currently this only works for GVim on Windows, need to fix some issue to make it work on (*)nix platform."}, {:name=>"blue.vim--Eurpedes", :summary=>"Blue programming language syntax", :description=>"A syntax file for the blue programming language."}, {:name=>"ruby.vim--IGREQUE", :summary=>"Ruby Indentation with IndentAnything", :description=>"This is a Ruby Indentation script.\nI don't like the default indent/ruby.vim ( vim-ruby from RubyGems ).\n\nNOTE:\n  This script requires IndentAnything version 1.2.2 or above.\n  See http://www.vim.org/scripts/script.php?script_id=1839 .\n"}, {:name=>"greek_polytonic.vim", :summary=>"Keymap for the typing of traditional multi-accented (polytonic) Greek", :description=>"This is a keyboard layout useful to native Greek speakers and Greek\nscholars (Hellenists) who wish to use Vim/gVim to type traditional Greek\n(often referred to as multi-accented or polytonic).\n\nThis layout allows the typing of multi-accented (polytonic) Greek\ntext in the manner of writing by hand.  Accents and breathings are typed\nafter the vowels in any order without dead keys. In other words, first we \ntype the letter and then we \"decorate\" it with the required accents.  This\nserves for a more comfortable typing of Greek.  Furthermore it allows easier\ncorrection of errors. A wrong accent (or no accent) can be replaced with\nwith the correct one without deleting the character.  We simply place the\ncursor to the right of the vowel and press the required accent.  If the\ncharacter can take the accent, it will be replaced by the accented version\nof the same character.\n--------------------------------------------------------------\nThe main accent keys are as follows:\n\n/              Oxia (acute)\n\\              Varia (grave)\n~ (or =)   Perispomeni (circumflex)\n]               Psili  (lenis)\n[               Dasia (asper)\n\"               Dialytika (diaeresis)\n|               Ypogegrammeni (Iota subscript)\n---------------------------------------------------------------\n\nExamples. \nTyping the sequence:    a/, will give Small Alpha with Oxia.\nTyping:  a/]  or  a]/   will give Small Alpha with Oxia and Psili.\nTyping:  a, followed by any combination of /,],|, will give \n              Small Alpha with Oxia and Psili and Ypogegrammeni.\n\nTyping of multi-accented Greek is easier this way because this method is \nsimilar to the way we write by hand.  Only a few accent keys are used \n(easier to memorize). See the included table. Also read the source file.\n\nYou can still use the dead keys of the modern Greek keymap. For example,\n Alpha with Tonos can be derived either with \"a/\" or with \";a\".\n\nInstallation:\n\n  Copy the file greek_polytonic.vim to your home .vim  keymap directory\n  (~/.vim/keymap/) If the directory does not exist, create it.\n\n\n\n\nUsage:\n\n  * Load the keymap:\n              set keymap=greek_polytonic\n  * Set encodings:  \n              set encoding=utf-8\n              set inputenc=utf-8\n              set fenc=utf-8\n \n  * Set vim to use a monospaced unicode font that includes all the \"Greek Extented\" characters and symbols.\n     Example: set guifont=Consolas\\ Regular\\ 16\n     Note: for m$ windows this should be:  set guifont=Consolas:h16\n\n  Examples of suitable fonts are:\n\n    Dejavu Sans mono\n    Courier New\n    Bitstream Vera Sans Mono\n    Consolas \n \n* Also switch the keyboard to Greek with ALT-SHIFT (or whatever)\n\n* To type any of the actual symbols of the accent keys (/, \\, ] , [, .. etc.,)  \n   you can toggle off the keymap with CTRL-^.\n\n\n\nNotes: \n\n   Consolas is a Microsoft font found in Windows 7 (The Consolas font\n   shipped with Windows Vista is not suitable - has no extended Greek\n   characters). It is a very good monospaced font for displaying\n   and for printing polytonic Greek text.  (Microsoft is very good to us\n   Greek scholars). Here is a screenshot of vim editing the text of \n   Ptolemy's Almagest displayed in 16 pt Consolas:\n   http://img9.imageshack.us/img9/3386/ptolemyalmagest.jpg\n   \n   If you have problems with printing greek utf-8 use\n   paps (http://paps.sourceforge.net/)\n   I use it from within vim by creating a command as folows:\n   :command Paps write !paps --font=Consolas\\ 10 | lpr\n\n"}, {:name=>"git-cheat", :summary=>"vim helpfile for git commands", :description=>"Adaption of the git cheat sheet at http://cheat.errtheblog.com/s/git to the vim help format."}, {:name=>"falcon.vim", :summary=>"Syntax file for Falcon Programming Language", :description=>"This is a syntax highlighting file for the Falcon programming language. It's based heavily off of the PLSQL and Ruby programming language files. \n\nSee also:\nIndent:    vimscript #2752\nFtplugin: vimscript #2762 \nFtdetect: vimscript #2763\n\nFor the latest version check my github site:\nhttp://github.com/steveno/falconpl-vim"}, {:name=>"nuweb-multi-language", :summary=>"Syntax highlight for NUWEB (Literate Programming), multi-language version", :description=>"Almost entirely derived from by Patricio Toledo's original syntax file (http://www.vim.org/scripts/script.php?script_id=543) which highlits NUWEB scraps without any language-dependent syntax highlighting. I modified it in the following ways:\n1) Scraps beginning with \"@{/* C */\" will be highlit as C\n2) Scraps beginning with \"@{# Python\" will be highlit as Python.\n3) For all other scraps, the opening \"@{\" must be followed by a newline.\n\nIt's very easy to extend this syntax file to handle other languages. If someone else could fix #3, so that \"@{anything@}\" scraps could work without a newline following \"@{\", I'd appreciate it. Also, other ideas on doing multi-language highlighting are welcome."}, {:name=>"d8g_01", :summary=>"simple quiet colorscheme", :description=>"Preview: http://martin.kopta.eu/vim/colorschemes/d8g_01.png"}, {:name=>"d8g_02", :summary=>"simple colorscheme for morning", :description=>"Preview: http://martin.kopta.eu/vim/colorschemes/d8g_02.png"}, {:name=>"d8g_03", :summary=>"simple colorscheme for everyday", :description=>"Preview: http://martin.kopta.eu/vim/colorschemes/d8g_03.png"}, {:name=>"d8g_04", :summary=>"simple red colorscheme", :description=>"Preview: http://martin.kopta.eu/vim/colorschemes/d8g_04.png"}, {:name=>"vimdiff-vcs", :summary=>"Drop-in replacement for vimdiff and gvimdiff featuring automatic CVS diff", :description=>"Full-blown support for CVS diffing.  Like vimscript #1209 (and unlike vimscript #90 ), this is a command-line program that merely figures out what to compare a file against.  Unlike both, this is a drop-in replacement that doesn't require getting used to a new command with different syntax.  it just works.\n\nIn addition to all vim flags, vimdiff+vcs supports the CVS revision denoting flags (-r, -D).  vimdiff+vcs also supports filesystem snapshots (e.g. those from a NetApp mountpoint), automatically parsing through the archives and comparing the specified file to the most recent version that differs.\n\nThe key useful feature here is that it's fully automatic; you just type \"gvimdiff mycode.c\" and it pops up the differences between mycode.c and the latest other copy available, be it the CVS HEAD or a more recent version from your snapshots.\n\nIf I ever do start using subversion with more regularity, this script will support that too.  It's even named \"vimdiff+vcs\" rather than \"vimdiff+cvs\" in anticipation of that (well, also for the .snapshot support)."}, {:name=>"falcon.vim-indent", :summary=>"Falcon indent file", :description=>"If you anyone has suggestions for updates or modifications I can certainly accommodate.\n\nSee Also:\nSyntax:  vimscript #2745\nFtplugin: vimscript #2762 \nFtdetect: vimscript #2763\n\n\nFor the latest version check:\nhttp://github.com/steveno/falconpl-vim"}, {:name=>"banned.vim", :summary=>"Microsoft SDL Banned API syntax highlighting plugin", :description=>"The banned.vim syntax plugin will hilight C function calls that have been banned by Microsoft's Security Development Lifecycle (SDL). Although many of these function calls are Windows-specific, there are quite a few that are available in UNIX and should be avoided. This syntax plugin adds functionality to the existing C and C++ vim syntax plugins. Details on the banned APIs can be found here: http://msdn.microsoft.com/en-us/library/bb288454.aspx\n"}, {:name=>"delimitMate.vim", :summary=>"Provides auto-balancing and some expansions for parens, quotes, etc.", :description=>"This plug-in provides automatic closing of quotes, parenthesis, brackets, etc., besides some other related features that should make your time in insert mode a little bit easier, like syntax awareness (will not insert the closing delimiter in comments and other configurable regions), visual wrapping, <CR> and <Space> expansions (off by default), and some more.\n\nMost of the features can be modified or disabled permanently, using global variables, or on a FileType basis, using :autocmd. With a couple of exceptions and limitations, this features don't brake undo, redo or history.\n\ni.e.: The following line in your vimrc would turn auto-completion off for the \"mail\" file type:\n\n        au FileType mail let b:delimitMate_autoclose = 0\n\nRead :help delimitMate for detailed information. You can also follow the \"Vim wiki\" link on the top to discuss about this script."}, {:name=>"evening_2", :summary=>"Few modifications on evening color scheme", :description=>"Made few modification on system's evening color scheme:\n1. Change the text color from white to grey\n2. Change the string and number's background color"}, {:name=>"color-chooser.vim", :summary=>"a graphical RGB/HSV color selector", :description=>"This plugin allows you to insert and edit colors using a graphical color selection window. It makes #rrggbb hex color codes; as input it detects both #rrggbb hexcodes and X11 color names.\n\nThe script supports three language locales: English, Spanish, Czech."}, {:name=>"forneus", :summary=>"Grey background and soft, eye pleasing foreground colours", :description=>"This is the colorsheme I've ended up after using vim for a while. I use it mostly for C/C++ and Ruby. It can be not so beautiful for other languages but I will update it if there is a need."}, {:name=>"Mustang2", :summary=>"a small edit of a beautifully picked color scheme", :description=>"this is a small edit of the Mustang Vim Colorscheme by hcalves. He deserves all the credit, find him and screenshots here: http://hcalves.deviantart.com/art/Mustang-Vim-Colorscheme-98974484 \n\nMy edits are basically only making the search highlighting look better.\n\nHonestly this theme was love at first sight for me, you should try it too. "}, {:name=>"Quich-Filter", :summary=>"Quickly filter all matches of a string, browse the list, and jump back quickly.", :description=>"This plug-in provides filtering/search functionality to Vim, similar to e.g.\nPSPad. This plug-in offers a number of additional features:\n\n- Further filtering/searching inside the filtered results.\n- Syntaxt highlighting in the filtered results.\n- Show context line around found matches. You can dynamically change the number of lines.\n- Easy jumping to and from the filter buffers.\n\nThe search results are presented in a seperate buffer (and window) and\nthe script offers a number of convenience key-mappings to navigate from one\nresult to the next.\n\nThe default key mappings are as follows:\n\n-------------------------------------------------------------------------------\n    KEY        Description\n-------------------------------------------------------------------------------\nAny buffer:\n    ,f         Filter the current buffer using the line pattern found in\n               register @/, that is the search buffer (your last search).\n    ,F         Ask for a line pattern and filters using that string.\n    ,g         Go to the newest filter window associated with the current\n               buffer. If the current buffer is also a filter window, go to\n               the next associated filter window that is the newest after the\n               current one.\n-------------------------------------------------------------------------------\nFilter buffer:\n    <Enter>    Go to the selected line in the original buffer and keep the filter\n               window open. \n    <S-Enter>  Same as <Enter> but also closes the filter buffer.\n    c/C        Increase/decrease the number of context lines around matches.\n    o          Jump to the currently selected line in the original buffer, but\n               keep the cursor in the filter window.\n    a          Toggle auto follow. If auto follow is on, the original buffer\n               will automatically jump to the line your cursor is on (i.e.\n               it's the same effect as pressing o each time you move the\n               cursor).\n    j/k        Jump to next/previous search result.\n-------------------------------------------------------------------------------\n\n"}, {:name=>"Tortoise", :summary=>"Automate TortoiseSVN from vim", :description=>"This lightweight plugin provides a Vim command-line interface to the TortoiseSVN, utilizing the automation commands provided by TortoiseProc.exe. \n\nIt also simplifies the interface such that the commands are shorter to type, and  you can make use of the Vim command-line completion on both the options as well as command names to make entering quicker. \n\nTortoiseSVN is only supported on windows, and so this plugin will work only on windows. I have been using this plugin for over a couple of years now, and refactored it recently to be more robust such that I can release it to the public. I currently use Vim 7.2 and TortoiseSVN 1.6.2 and the plugin works very well. It might work equally well on other versions, but YMMV.\n\nHere is the complete description from the script header:\nDescription:\n  The plugin essentially works as a wrapper on top of the TortoiseProc and\n  provides the following functionality:\n    - Simplify command-line syntax that TortoiseProc supports.\n      - Avoid specifying /command: and /path: prefixes and use less ambiguous\n        \"-\" as prefix instead of \"/\" (customizable).\n      - Allow multiple paths as space separated arguments, instead of having\n        to use the less convenient \"*\" as the separator.\n    - Add command-line completion to make it easier to type the commands.\n    - Allow filename special characters on command-line, such as % and #10.\n    - Make sure the paths are acceptable to TortoiseProc.\n      - Make sure paths have back-slashes, even if 'shellslash' is currently\n        set.\n      - Convert relative paths to absolute paths.\n    - Support some aliases to the commands, such as submit->commit,\n      filelog->log, browse->repobrowser, status->repostatus\n                                                                                  \nUsage:\n  General Syntax:\n    SVN [-option[:value] ...] <command> [-option[:value] ...] [path ...]\n                                                                                  \n  Ex:\n    SVN -startrev:11000 -endrev:10000 log %\n    SVN -log:just\\ testing commit % # #10\n    SVN update .\n    SVN diff % ../other/%\n                                                                                  \nCompletion:\n  Use command-line completion for <command> name, options and <paths>. The\n  completion also works for |cmdline-special| characters.\n                                                                                  \n  For command names and their options refer to:\n                                                                                  \n    http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-automation.html\n                                                                                  \nSettings:\n- Set g:Tortoise_Path to the location of TortoiseProc.exe (use dos short\n  names if the path has spaces).\n                                                                                  \n- You may use g:Tortoise_CloseOnEnd_Arg to set the \"closeonend\" value.\n  Defaults to \"2\".\n                                                                                  \n- You may set g:Tortoise_UseAbsolutePaths to 1 if you want to pass absolute\n  paths to TortoiseSVN.\n                                                                                  \n- Set g:Tortoise_OptionPrefix to \"/\" if you prefer the native TortoiseProc\n  command syntax.\n                                                                                  \n- Set g:Tortoise_OptionCompleteSuffixColon to \"0\" to avoid seeing \":\" at the\n  end of options.\n"}, {:name=>"qtmplsel.vim", :summary=>"quick template selector with expression expansion", :description=>"This plugin enables you to select a template on creating a new file.\nTemplates are typically placed in ~/.vim/template .\nOn creating a file, corresponding templates, if any, are listed up. You\ncan select one of them by k(up)/j(down). Press Enter to load the selected\ntemplate, or press 'q' to load no templates.\nYou can cancel the insertion of selected template by pressing 'u'(undo).\n\nThere is an optional global varialbe:\n  g:qts_templatedir : specifies the template dir\n                      (default: ~/.vim/template)\n\nTemplate search rules:\n  1) by filetype\n    filetype=python -> ~/.vim/template/python_*\n  2) by suffix\n    *.cpp           -> ~/.vim/template/*.cpp\n  3) by filename\n    Makefile        -> ~/.vim/template/Makefile_*\n\nNote that especially in case 3, 'Makefile_' is a legal template name\nbut 'Makefile' is not even if you have no other template file.\n\nNew in 1.1.0 - expression expansion:\n  String surrounded by '@{@' '@}@' in the template file is regarded as a vim\n  expression, and will be eval()ed on loading.\n  e.g.)\n    @{@expand('%:t')@}@          ->  newfile.py\n    @{@strftime('%Y-%m-%d')@}@   ->  2009-08-30"}, {:name=>"falcon.vim-ftplugin", :summary=>"Filetype detection script", :description=>"This file allow vim to detect your falcon source code.\n\nSyntax:   vimscript #2745 \nIndent:    vimscript #2752 \nFtdetect: vimscript #2763 \n\nFor the latest version check: \nhttp://github.com/steveno/falconpl-vim"}, {:name=>"falcon.vim-ftplugin-B", :summary=>"Filetype plugin script for Falcon", :description=>"This is the actual filetype plugin script for the falcon programming language.\n\nSyntax:  vimscript #2745 \nIndent:    vimscript #2752 \nFtplugin: vimscript #2762 \n\nFor the latest version check: \nhttp://github.com/steveno/falconpl-vim\n"}, {:name=>"dull", :summary=>"a very low saturation colour scheme", :description=>"This is a very low saturation version based on default and torte colour scheme.  It looks only little different from syntax turned off, and is good for long-time works.\n\nThis colour scheme can work for both 'light' and 'black' backgrounds.  Use \"set background=...\" to switch the different styles.\n\nBasically, it is designed for GUI, but it can fallback to a colourful mode in low-colour terminals.\n"}, {:name=>"Better-Javascript-Indentation", :summary=>"Vastly improved javascript indentation", :description=>"This is based off of the indentation script for ruby which is well written and fast. It is nearly perfect but will sometimes miss edge cases. It usually recovers those errors at the end of a block though, so overall even very long files will be largely correct. \n\nPlease fork this project at http://github.com/pangloss/vim-javascript to help make it even better.\n\nThis script includes Yi Zhao&#039s javascript syntax script v 0.7.7"}, {:name=>"Join.vim", :summary=>"Improved Algorithm for joining lines in large files", :description=>"ATTENTION: Vim 7.3 contains a bugfix, so this plugin isn't needed anymore!\n\nThis plugin tries to implement a different method for joining lines. This is,\nbecause the :join command from within vim suffers from a serious performance\nissue, if you are trying to join many lines (>1000).\n\nThis has been discussed on the vim development mailing list (see\nhttp://thread.gmane.org/gmane.editors.vim.devel/22065) as well as on the vim\nuser mailing list (see http://thread.gmane.org/gmane.editors.vim/80304).\n\nThere has also been a patch proposed, to improve the algorithm used by :join.\nThis patch is available at http://repo.or.cz/w/vim_extended.git, but this\nmeans, you'll have to build and patch your vim manually (you can't use it with\na prebuilt vim).\n\nUntil this patch is accepted and incorporated into mainline vim, this plugin\ntries to improve the joining algorithm by the method mentioned in the user\nmailinglist above. It basically works by breaking up the join algorithm into\nsmaller pieces and joining the smaller pieces together. This may have an\nimpact on memory usage, though.\n\n                                                              *Join-benchmark*\nFor reference I include some timings, joining many lines:\n\n      Lines joined      :%join      |      :%Join\n        25.000           3,305s     |      0,240s\n        50.000          13,667s     |      0,336s\n       100.000          64,140s     |      0,588s\n       200.000         331,410s     |      1,431s\n     1.000.000            -[1]      |      7,419s\n\n[1] benchmarking was aborted after 53 Minutes (after which only about 480.000\nlines have been joined).\n\nPlease also note, that using a substitute command does not prove to be faster.\nIt also suffers from the performance impact.\n\nAlso note, that really the best way to remove '\\n' on a file with millions\nof lines is using tr:\n\n~$ tr -d '\\n' <large_file >output_file\n\n2. Usage                                                          *Join-usage*\n\n:[range]J[oin][!]\n                        Join [range] lines.  Same as \"J\", except with [!]\n                        the join does not insert or delete any spaces.\n                        The default behavior is to join the current line\n                        with the line below it.\n\n:[range]J[oin][!] {count}\n                        Join {count} lines, starting with [range] (default:\n                        current line |cmdline-ranges|).  Same as \"J\", except\n                        with [!] the join does not insert or delete any\n                        spaces.\n\n\nYou should be able to use :Join as drop in replacement for :join. It behaves\nexactly like :join and understands it's syntax, with the exception of 1 point:\n\n1) :Join does not accept the use of [flags] as |:join| does.\n\nIf you want the J command to call :Join, you can use something like:\n:nmap J :Join<CR>\nto have J call :Join in normal mode and\n:vmap J :Join<CR>\n\n                                                            *Join-differences*\n3. Differences\n\nThis plugin has been made to make :Join and :join behave almost identically.\nIf there are further differences than those described at |Join-usage|, I am\ninterested at any bug describing exactly what went wrong, so I can fix this.\nPlease send any bug report to the mail address mentioned at the top of this\npage.\n\n"}, {:name=>"emv", :summary=>"emv - external utilitity invoking vim for mass renaming", :description=>"emv - editor mv - is a perl script for Unix to use the power of vim to mass rename files, with the renaming and logging done in perl, and vim used to edit the filenames with visual block commands, s///g. In contrast to the original shell script, sorting and deleting lines is permitted.\n\nYou can specify a command of your own instead of the default /bin/mv. Also some special commands can be specified, which are run before any renames, including e.g. link target editing.\n\nHelp is available with --help and also in the editor buffer.\n\n[small fix: should now work with older perls as well]\n\nThe current version is available from: \nhttp://jakobi.github.com/script-archive-doc/\nhttp://github.com/jakobi/script-archive/tree/master/cli.list.rename/\n"}, {:name=>"vimscript", :summary=>"use vim as an interpreter to write shell commands in vimscript like vimsh", :description=>"Experiment to enable vim being invoked as a script interpreter, even when the vimscript block in question is used within a  unix pipe.\n\nThis is basically my take on the original vimscript#1069 vimsh from 2004,  sufficiently mangled until it finally did mostly work again with unix pipes and using vim 7.2 (excluding the g//p issue, where the prints  get replicated all over the place - drop me a line if you have an idea). \n\nNote that vim still does some unnecessary screen redrawing if it is connected to a  tty, however I\nactually  managed  to run a vimscript even from a cronjob, much to  my surprise.\n\nFurther information and example vimscript blocks: see --help.\n\nI'll intend to keep this somewhat uptodate, at least until vim can be run non-interactively without the requirements for such a hack.\n\nThe current version is available from:\nhttp://jakobi.github.com/script-archive-doc/\nhttp://github.com/jakobi/script-archive/tree/master/vim/"}, {:name=>"pipe.vim", :summary=>"make vim part of a unix pipe and allow it to edit the pipe contents", :description=>"find | pipe.vim | nl\nfind | xargs pipe.vim\n\nSimplify invoking vim within Unix pipes for situations not covered by a simple *vi -*: I just too often forget to properly add all the required >/dev/tty </dev/tty and similar in pipes and xargs commands.\n\nAll input is collected into a temporary file, prefixed with a small help text. Vim then edits this file with its IO being redirected to the tty. After editing the file is printed to stdout and serves as input for the next pipeline stage. \n\nSome more information can be found in the comments in the script itself.\n\nNote that the  name is just my way of not cluttering ~/bin: pipe.vim is a perl script for use with pipes that is a helper for vim. It is NOT a vim macro.\n\nThe current version is available from:\nhttp://jakobi.github.com/script-archive-doc/\nhttp://github.com/jakobi/script-archive/tree/master/vim/"}, {:name=>"JumpInCode", :summary=>"more convenice way to use ctags and cscope in vim", :description=>"\"EN\"\nctags and cscope plugin, more convenice way to use ctags and cscope in vim \n\nCommand:\n\\jc   Generate tags and cscope database from current directory\n\\jst   tags config window\n\\jsc  cscope.out config window\n                   \nRequirement:\nctags and cscope\nwin32: $VIM\\vim7*\\ctags.exe\nwin32: $VIM\\vim7*\\cscope.exe\n\nYou can download ctags.exe and cscope.exe from： http://code.google.com/p/easy-vim/\n\nWho can tell me why I can't upload a new version?\n \nI don't know why I can't upload a new version, so I start a new branches at: http://www.vim.org/scripts/script.php?script_id=2943\n\n\"中文  ZH\"\n自动生成并使用ctags和cscope\n\n命令：\n\\jc    从当前目录生成tags和cscope.out \n\\jsc  cscope配置窗口\n\\jst   tags     配置窗口\n\n系统要求：\n预安装要求ctags和cscope: \nwin32: $VIM\\vim7*\\ctags.exe\nwin32: $VIM\\vim7*\\cscope.exe\nunix: ctags and cscope\n\nctags 和cscope Win32版： http://code.google.com/p/easy-vim/\n\n不知道为什么这个页面的我不能够提交新的版本，所以我开了新的分支页面：http://www.vim.org/scripts/script.php?script_id=2943\n"}, {:name=>"Conque-Shell", :summary=>"Run interactive commands inside a Vim buffer", :description=>"Conque is a Vim plugin allowing users to execute and interact with programs, typically a shell such as bash, inside a buffer window. The goal is always to keep the terminal behavior as close as possible to its native interface, while adding the additional features of Vim on top.\n\n== WEBSITE ==\n\nFor more information http://code.google.com/p/conque/\n\n== SCREENSHOTS ==\n\nhttp://Conque.googlecode.com/svn/wiki/screenshot/colors.jpg\nhttp://Conque.googlecode.com/svn/wiki/screenshot/mysql.jpg\nhttp://Conque.googlecode.com/svn/wiki/screenshot/send.jpg\nhttp://Conque.googlecode.com/svn/wiki/screenshot/shells.jpg\n\n== USAGE ==\n\nType :ConqueTerm <command> to run your command in vim, for example:\n\n:ConqueTerm bash\n:ConqueTerm mysql -h localhost -u joe -p sock_collection\n:ConqueTerm ipython\n\nTo open ConqueTerm in a new horizontal or vertical buffer use:\n\n:ConqueTermSplit <command>\n:ConqueTermVSplit <command>\n:ConqueTermTab <command>\n\nAll text typed in insert mode will be sent to your shell. Use the <F9> key to send a visual selection from any buffer to the shell.\n\nFor more help type :help ConqueTerm\n"}, {:name=>"Crazy-Home-Key", :summary=>"Better Home key experience for editing!", :description=>"Trigger <Home> key arbitrarily in vim or follow below steps:\n\n    a. Normal mode\n        1. Press <Home> key in the middle of a line\n        2. Press <Home> key again\n\n     b. Insert mode\n          do the same as above. It works well ^_^\n\nTake a look at demo film : http://vimeo.com/6433112"}, {:name=>"grex", :summary=>"Operate on lines matched to the last search pattern (:g/re/x)", :description=>"*grex* is a Vim plugin to provide useful commands to operate on lines matched\nto the last search pattern.  For example, suppose you edit the following\ncontent:\n\n\t#950 bugfix: jump behavior\n\t#923 bugfix: vs fold\n\t#930 enhancement: foldlevel adjustment\n\t#927 todo: release\n\t#926 enhancement: performance\n\t#924 enhancement: completion\n\t#931 bugfix: syntax highlighting\n\t#928 enhancement: key mappings\n\nOnce you search for a keyword such as \"bugfix:\", you can yank all lines\nmatched to the search pattern with |:Grey|.  After executing |:Grey|, you can\nput the following text:\n\n\t#950 bugfix: jump behavior\n\t#923 bugfix: vs fold\n\t#931 bugfix: syntax highlighting\n\nThere is another command |:Gred| which deletes matched lines instead.\n\nThis plugin also provides functions and operators to do the same processes as\n|:Gred| or |:Grey|.  See |grex-functions|, |grex-key-mappings| and\n|grex-commands| for the details.\n\n\nRequirements:\n- Vim 7.2 or later\n\nOptionals:\n- |operator-user| 0.0.5 or later (vimscript#2692)\n\nLatest version:\nhttp://github.com/kana/vim-grex\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/grex.html"}, {:name=>"whitebox.vim", :summary=>"Light colorscheme with bright colors.", :description=>"Whitebox is a scheme I made because I couldn't find any without dull colors. "}, {:name=>"logpad.vim", :summary=>"Vim plugin for emulating Windows Notepad's logging functionality", :description=>"logpad.vim emulates Windows Notepad's logging feature.\n\nCreate a new file, write .LOG as the first line and save it. Every time you reopen the file, a new line with the current timestamp is added, so you can easily maintain a chronologic log of your tasks.\n\nBy default, this plugin works the same way as the original Notepad. You can modify certain aspects of it by setting the following variables:\n\nlet LogpadEnabled = [ 0 / 1 ]\n* enables/disables logpad\n* default value: 1\n\nlet LogpadInsert = [ 0 / 1 ]\n* automatically enables &insertmode when a new log entry is created\n* default value: 0\n\nlet LogpadLineBreak = [ 0 / 1 ]\n* adds an empty line before a new log entry\n* default value: 0 (Windows Notepad behavior)\n\nlet LogpadIgnoreNotes = [ 0 / 1 ]\n* allows adding notes before the first log entry\n* default value: 0\n\nlet LogpadIgnoreReadOnly = [ 0 / 1 ]\n* allows logpad to ignore a file's read-only flag\n* default value: 0"}, {:name=>"vilight.vim", :summary=>"A more literal translation of Will Farrington's Twilight color theme", :description=>"A big fan of the gedit color theme 'Twilight' by Will Farrington, I made a pretty literal translation of it for vim here. Originally, the only changes from Farrington's scheme were that I did away with the 'dark maroon' guibg and added Pmenu colors, but it has slowly grown to incorporate even more 'Vim-isms'. \n\nScreenshots here => \"http://robrobbins.info/?page_id=2&quot;"}, {:name=>"tir_black", :summary=>"based on ir_black colorscheme, tweaked for 256 color terms", :description=>"Screenshot running in MacVim: http://www.jordansoyke.com-a.googlepages.com/tir_black_shot.jpg\nThis is a colorscheme based on ir_black (http://blog.infinitered.com/entries/show/8). I really like this scheme, but I wanted it to work in 256 color terminals."}, {:name=>"gui2term.py", :summary=>"script that converts GUI only colorschemes to support 256-color terminal", :description=>"This is a python2 script that converts GUI only colorschemes to support 256-color terminal.\n\nRequirement: python2.6 (other python2.x may also work)\n\nUsage:\ninvoke it like this in commandline.\n./gui2term.py sourcefile newfile\nor\npython gui2term.py sourcefile newfile\n\nNote:\nIt searches and processes lines in a vim colorscheme that matches the regular expression '^\\s*hi\\w*\\s+[A-Z]\\w+' (in Python or Perl, not Vim regex), so it does not work with all the colorscheme.\nApply it to *GUI only* colorscheme only.\nSome GUI only colorschemes may use the default scheme if it found itself under a terminal. You need to manually remove these lines."}, {:name=>"moss", :summary=>"Dark color scheme for low light conditions", :description=>"Moss is a dark scheme consisting primarily of green & blue.\n墨绿背景，以蓝绿为主色调，比较暗，适合晚上等弱光环境下用。\nscreenshots\n               perl: http://i33.tinypic.com/ipmuxh.png\n    shell script: http://i38.tinypic.com/f2ubyq.png\n\n(old) moss 1.0: http://i30.tinypic.com/209hsgz.png"}, {:name=>"python-tag-import", :summary=>"guesses the import path of a python tag", :description=>"repo: http://github.com/mjbrownie/Python-Tag-Import/tree/master. bugs/suggestions welcome\n\nvisual example here http://ttyshare.com/rec/michael/77604285/\n\nThis is for when you remember the name of a library function/class but not the module.path it is under\n\nEg. on a new line type. (control-b in insert mode is the default key but can be changed. see below)\n\nfuncname<c-b>\nto get complete import  options eg \n\nfrom foo.bar.module import funcname\nimport foo.bar.module as module\n\netc.\n\nIn normal mode <leader>i will create an import for the current word\n\nYou can customise the import statements to your style preferences in your .vimrc eg\n\nlet g:pythontagimport_from = 0\nturns off \nfrom  foo.bar.module import funcname\n\nlet g:pythontagimport_from_mod = 0\nturns off \nfrom foo.bar import module #module.funcname\n\nlet g:pythontagimport_as = 0\nturns off \nimport foo.bar.module as module #module.funcname\n\nlet g:pythontagimport_full  = 0\nturns off\nimport foo.bar.module #foo.bar.module.funcname\n\n\n\" Usage:\n\"\n\"           You need a ctags file with the --fields=+i\n\"           option set\n\"\n\"           on a new line type the function you want to import\n\"           then hit the complete key\n\"           \n\"           eg. type on a line\n\"           \n\"           some_func\n\"           hit <c-b>in insert mode and get\n\"           from some.app.module.path import some_func\n\"\n\"           hotkey:\n\"               insert mode map.\n\"               <c-b> is the current default.\n\"\n\"           variables:\n\"\n\"               g:pythontagimportkey\n\"                   the key used to complete function\n\"                   parameters and key words.\n\"\n\"Limitations:\n\"\n\"           This plugin is only as smart as your tags file.\n\"           Completion is created through inspecting the filename\n\"           in the tags file so functions that are rereferenced will not be\n\"           picked up. I put this out there in the hope someone can do \n\"           some fancy introspective alternative.\n\"\n\"Options:\n\"           Setting the path can keep options relevant. At tht moment\n\"           it defaults to sys.path. It can come up with some bad guesses\n\"           Eg.\n\"           let g:python_path = ['/usr/lib/python2.4/site-packages/']\n\n"}, {:name=>"Django-helper-utils", :summary=>"Url tag jump, template path import and html client dump", :description=>"repo here: http://github.com/mjbrownie/django_helper.vim/tree/master\n\n#note. This is only tested on linux with python support. in my ~/.bashrc I have the following line which allows django modules to be imported \n\nexport DJANGO_SETTINGS_MODULE=settings\n\nResolve a url to a tag \n\nUsage\n\nfor a given django url path\n\nurlpatterns(\n '/some/url/path', 'some.django.view.function_name'\n)\n\n:DUrlTag /some/relative/path/\n\nwill resolve the path to the function and then call\n:tag function_name\n\nYou need to have an up to date tags file and the command might choke on\ncomplicated views with lots of decorators etc.\n\n\n:DClient /some/relative/path/\n\nwill dump the html in a scratch window split\n\nif settings.py is in the root  of the path this script will :set path+= all template directories including INSTALLED_APPS, \n\nso you can 'gf' to template files"}, {:name=>"operator-replace", :summary=>"Operator to replace text with register content", :description=>"*operator-replace* is a Vim plugin to provide an operator to replace\na specified text with register content.  This is shortcut for several types of\noperations such as \"d{motion}P\" and \"c{motion}<C-r>{register}\".\n\n\nRequirements:\n- Vim 7.2 or later\n- |operator-user| 0.0.5 or later (vimscript#2692)\n\nLatest version:\nhttp://github.com/kana/vim-operator-replace\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/operator-replace.html"}, {:name=>"DumbBuf", :summary=>"simple buffer manager like QuickBuf.vim", :description=>"latest version at http://github.com/tyru/DumbBuf.vim/\nincluding missing versions, all versions are mirrored at http://github.com/tyru/DumbBuf.vim/downloads\nJapanese description is here: http://vim.g.hatena.ne.jp/tyru/20091030\nscreenshot is here: http://f.hatena.ne.jp/tyru/20091031002751\n\n\nMy .vimrc:\n  let dumbbuf_hotkey = '<Leader>b'\n  \" sometimes I put <Esc> to close dumbbuf buffer,\n  \" which was mapped to close QuickBuf's list :)\n  let dumbbuf_mappings = {\n      &#039n': {\n          &#039<Esc>': {'alias_to': 'q'},\n      \\}\n  \\}\n\n  let dumbbuf_wrap_cursor = 0\n  let dumbbuf_remove_marked_when_close = 1\n\n\nMappings:\n  please define g:dumbbuf_hotkey at first.\n  if that is not defined, this script is not loaded.\n\n  Visual Mode:\n      x\n          mark buffers on selected region.\n          see Normal Mode's xx for details.\n\n  Normal Mode:\n      q\n          :close dumbbuf buffer.\n      g:dumbbuf_hotkey\n          toggle dumbbuf buffer.\n      <CR>\n          :edit buffer.\n      u\n         open one by one. this is same as QuickBuf's u.\n      s\n         :split buffer.\n      v\n         :vspilt buffer.\n      t\n         :tabedit buffer.\n      d\n         :bdelete buffer.\n      w\n         :bwipeout buffer.\n      l\n         toggle listed buffers or unlisted buffers.\n      c\n         :close buffer.\n      x\n          mark buffer.\n          if one or more marked buffers exist,\n          's', 'v', 't', 'd', 'w', 'c'\n          get to be able to execute for that buffers at a time.\n\n  and, if you turn on 'g:dumbbuf_single_key',\n  you can use single key mappings like QuickBuf.vim.\n  see 'g:dumbbuf_single_key' at 'Global Variables' for details.\n\n\nGlobal Variables:\n  g:dumbbuf_hotkey (default: no default value)\n      a mapping which calls dumbbuf buffer.\n      if this variable is not defined, this plugin will be not loaded.\n\n  g:dumbbuf_open_with (default: 'botright')\n      open dumbbuf buffer with this command.\n\n  g:dumbbuf_vertical (default: 0)\n      if true, open dumbbuf buffer vertically.\n\n  g:dumbbuf_buffer_height (default: 10)\n      dumbbuf buffer's height.\n      this is used when only g:dumbbuf_vertical is false.\n\n  g:dumbbuf_buffer_width (default: 25)\n      dumbbuf buffer's width.\n      this is used when only g:dumbbuf_vertical is true.\n\n  g:dumbbuf_listed_buffer_name (default: '__buffers__')\n      dumbbuf buffer's filename.\n      set this filename when showing 'listed buffers'.\n      'listed buffers' are opposite of 'unlisted-buffers'.\n      see ':help unlisted-buffer'.\n\n      NOTE: DON'T assign string which includes whitespace, or any special\n      characters like \"*\", \"?\", \",\".\n      see :help file-pattern\n\n  g:dumbbuf_unlisted_buffer_name (default: '__unlisted_buffers__')\n      dumbbuf buffer's filename.\n      set this filename when showing 'unlisted buffers'.\n\n      NOTE: DON'T assign string which includes whitespace, or any special\n      characters like \"*\", \"?\", \",\".\n      see :help file-pattern\n\n  g:dumbbuf_cursor_pos (default: 'current')\n      jumps to this position when dumbbuf buffer opens.\n      this is useful for deleting some buffers continuaslly.\n\n      'current':\n          jump to the current buffer's line.\n      'keep':\n          keep the cursor pos.\n      'top':\n          always jump to the top line.\n      'bottom':\n          always jump to the bottom line\n\n  g:dumbbuf_shown_type (default: '')\n      show this type of buffers list.\n\n      '':\n          if current buffer is unlisted, show unlisted buffers list.\n          if current buffer is listed, show listed buffers list.\n      'unlisted':\n          show always unlisted buffers list.\n      'listed':\n          show always listed buffers list.\n      'project':\n          show buffers each project.\n\n  g:dumbbuf_close_when_exec (default: 0)\n      if true, close when execute local mapping from dumbbuf buffer.\n\n  g:dumbbuf_remove_marked_when_close (default: 0)\n      remove all marked buffers on closing dumbbuf buffer.\n      this default value is for only backward compatibility.\n      (if I could fix this variable name...\n       'dumbbuf_close_when_exec' => 'dumbbuf_close_on_exec')\n\n  g:dumbbuf_downward (default: 1)\n      if true, go downwardly when 'u' mapping.\n      if false, go upwardly.\n\n  g:dumbbuf_hl_cursorline (default: \"guibg=Red  guifg=White\")\n      local value of highlight 'CursorLine' in dumbbuf buffer.\n\n  g:dumbbuf_wrap_cursor (default: 1)\n      wrap the cursor at the top or bottom of dumbbuf buffer.\n\n  g:dumbbuf_all_shown_types (default: ['listed', 'unlisted', 'project'])\n      all available shown types.\n\n  g:dumbbuf_timeoutlen (default: 0)\n      local value of &timeoutlen in dumbbuf buffer.\n\n\n  For The Experienced User:\n      g:dumbbuf_disp_expr (default: see the definition)\n          this variable is for the experienced users.\n\n          'v:val' has buffer's info.\n          NOTE: 'val' does NOT work now.\n\n      g:dumbbuf_options (default: see the definition)\n          this variable is for the experienced users.\n          dumbbuf buffer will be set up with these options.\n\n      g:dumbbuf_mappings (default: see the definition)\n          this variable is for the experienced users.\n          these settings will override default value.\n\n          if your .vimrc setting is\n\n            let g:dumbbuf_mappings = {\n                &#039n': {\n                    &#039<Esc>': {'alias_to': 'q'}\n                \\}\n            \\}\n\n          you can type <Esc> to close dumbbuf buffer.\n          no influences for other default mappings.\n\n          and there are some special keys:\n              'alias_to': 'map'\n                  make an alias for 'map'.\n              'swap_with': 'map'\n"}, {:name=>"template-init.vim", :summary=>"provide more flexiable template", :description=>"template-init.vim let you to leave place holders in your template , then you can press <tab> key to jump to next placeholder (in insert mode)\n\nthe placeholder could be in vimscript , so that you can generate content by vim function or vim command , even in perl or ruby.\n\nlet g:skeleton_path = expand('~/.vim/skeleton')\nlet g:skeleton_placeholder_key = '<Tab>'\n\n to setup template:\n   au BufNewFile *.t   :call InitTemplate('template.t')\n   au BufNewFile *.pl  :call InitTemplate('')\n\n to setup placeholder:\n   {{!perl:  print q|test|}}\n   {{!vim: expand('%')}}\n   {{:normal ggyp}}\n   {{place holder}}\n\ngithub:  http://github.com/c9s/template-init.vim\n"}, {:name=>"wwwsearch", :summary=>"Search WWW easily from Vim", :description=>"*wwwsearch* is a Vim plugin to provide various ways to search the World Wide\nWeb with various web search engines.  For example,\n\n\t:Wwwsearch vim\n\nthe above command activates your favorite Web browser then searches WWW for\na keyword \"vim\" with a search engine (by default, Google).  You can also\nspecify which search engine to use as follows:\n\n\t:Wwwsearch -google vim\n\nSee also |wwwsearch-interface|, |wwwsearch-customizing| and\n|wwwsearch-examples| for more details.\n\n\nRequirements:\n- Vim 7.2 or later\n\nOptionals:\n- |operator-user| (vimscript#2692)\n\nLatest version:\nhttp://github.com/kana/vim-wwwsearch\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/wwwsearch.html"}, {:name=>"cpan.vim", :summary=>"cpan module helper", :description=>"please see:\nhttp://github.com/c9s/cpan.vim"}, {:name=>"Melt-Vim", :summary=>"Plugin for Melt files", :description=>"Plugin for Melt (http://melt.forge.ocamlcore.org/) files: \n- syntax colouring (with handling of spelling) \n- filetype detection \n- filetype plugin \n- compiler plugin \n\nFeatures: \n* automatic detection of .mlt files \n* syntax coloration \n* compiler error handling (i.e. go to the location of the error indicated by Melt - warning: approximative) \n* handling of spelling, english is the default, see :h spell for more details \n* and the following commands: \n\n+ normal mode: \n - gf on a module name will open the corresponding file \n\n+ visual mode (xxx denotes the selected text, xxx -> ... means \"xxx is rewritten as ...\"): \n - <LocalLeader>\": xxx -> \"xxx\" (i.e. inserts quotes around xxx) \n - <LocalLeader>(: xxx -> (xxx) \n - <LocalLeader>{: xxx -> {xxx} \n - <LocalLeader>[: xxx -> [xxx] \n - <LocalLeader>cc: xxx -> (*xxx*) \n - <LocalLeader>e: xxx -> {emph \"xxx\"} \n - <LocalLeader><LocalLeader>: ask for a string s (typically a caml function), then xxx -> {s \"xxx\"} \nNote: <LocalLeader> is generally bound to ',' \n\n+ if the matchit plugin (http://www.vim.org/scripts/script.php?script_id=39) is installed then '%' will switch between struct/end, let/in, match/with, ... \n\n+ if the Nerd commenter plugin (http://www.vim.org/scripts/script.php?script_id=1218) is installed then its usual commands handle melt comments \n\n+ if you set the variable g:MeltCloseDelimiters then: \n - typing \" will write \"\" and put the cursor between the quotes \n - typing ( will write () and put the cursor between the parentheses \n - typing { will write {} and put the cursor between the braces \n - typing [ will write [] and put the cursor between the brackets \n\n+ main rule to detect the compiler for :make (see compiler/melt.vim for details): \n1. if there is a Makefile then :make launches make \n2. if there is a myocamlbuild.ml then :make launches ocamlbuild \n3. otherwise launch melt \n"}, {:name=>"InsertList", :summary=>"Insert number-list.", :description=>"Function:\n ------------\n This plugin inserts input-string before select position, and increments last-number.\n\nUsage:\n ------------\n Execute vim script in selected area (with Visual Mode).\n Plugin will be used for create following number-list.\n\nnumber-list\n--------------------------\n1.\n     1.1.\n         1.1.1.\n         1.1.2.\n         1.1.3.\n         1.1.4.\n     1.2.\n     1.3.\n     1.4.\n     1.5.\n     1.6.\n2.\n     2.1.\n     2.2.\n     2.3.\n     2.4.\n--------------------------\n\n------------------------------------------------------------------------------\n[command format]\n:'<,'>INSERTLIST numberlist\n   or \n:'<,'>InsertList numberlist\n\nex1: \n========================================\nbefore text\n------------\n\n\n------------\n\n(1) Please use \"Visual mode blockwise\", and select following text area.\n------------\n|\n|\n------------\n\n(2) Input following command.\n:'<,'>INSERTLIST 1.\n\nafter text\n------------\n1.\n2.\n------------\n========================================\nex2: \nbefore text\n------------\naaa \nbbb \n------------\n\n(1) Please use \"Visual mode blockwise\", and select following text area.\n------------\naaa|\nbbb|\n------------\n\n(2) Input following command.\n:'<,'>INSERTLIST 1.\n\nafter text\n------------\naaa1.\nbbb2.\n------------\n========================================\nex3:\n\nbefore text\n------------\n\n\n------------\n\n(1) Please use \"Visual mode blockwise\", and select following text area.\n------------\n|\n|\n------------\n\n(2) Input following command.\n:'<,'>INSERTLIST strName[0] = \n\nafter text\n------------\nstrName[0] = \nstrName[1] = \n------------\n========================================\nex4:\n\nbefore text\n------------\n\n\n------------\n\n(1) Set following option.\n:set virtualedit=all\n\n(2) Please use \"Visual mode blockwise\", and select following text area.\n------------\n    |\n    |\n------------\n\n(3) Input following command.\n:'<,'>INSERTLIST 1.\n\nafter text\n------------\n    1.\n    2.\n------------\n========================================\nex5: Other input-string format pattern.\n\n(1) 1.1 to 1.N\n(2) 1-1 to 1-N\n(3) <1> to <N>\n(4) 001 to 00N\n"}, {:name=>"rargs.vim", :summary=>"read the contents of many files at one time.", :description=>"':RArgs' command that this plugin defined can read\nselected files contents at one time.\n( like :read command, but for multiple files. )\n\n\n------------------------------------------------------------------------------\n[command format]\n\n\" read {filename1}, {filename2}, and {filename3},\n\" contents are inserted into N.\n:[N]RArgs [++opt] {filename1} [{filename2} {filename3}...]\n\n[N]\n    contents read are inserted into the specified line,\n    or not specify line, contents are inserted into cursor position.\n\n[++opt]\n    file reading option.\n    see ':help ++opt', for more information.\n\n{filename1} [{filename2} {filename3}...]\n    filepath list.\n\n\n------------------------------------------------------------------------------\n[filepath parameters]\n\n\" read sample1.txt, sample2.txt, and sample3.txt\n:RArgs sample1.txt sample2.txt sample3.txt\n\n\" wildcards are allowed\n:RArgs sample*\n\n\" Vim special keywords are allowed\n:RArgs #2 #4 #6<.bak\n\n\" reading the file at multiple times are allowed\n:RArgs sample1.txt sample1.txt sample1.txt\n\n\" file encoding, file format\n:RArgs ++enc=utf-8 ++ff=unix sample1.txt sample2.txt sample3.txt\n\n\n------------------------------------------------------------------------------\n[inserting file position]\n\nIf you do not specify line number,\nthe contents of selected files are inserted into cursor line.\n\n\" contents are inserted into cursor line.\n:RArgs sample1.txt sample2.txt sample3.txt\n\n\" contents are inserted into specified line.\n:200RArgs sample1.txt sample2.txt sample3.txt\n\n\" contents are inserted into first line of buffer.\n:0RArgs sample1.txt sample2.txt sample3.txt\n\n\n------------------------------------------------------------------------------\n[Configuration]\n\n'g:rargs_exit_when_error'\n\nIf you set 1 to 'g:rargs_exit_when_error',\nexit when error is found. Default aciion is error is ignored.\n\nlet g:rargs_exit_when_error = '1'\n\n"}, {:name=>"cmdline-increment.vim", :summary=>"increment, decrement commandline number.", :description=>"Increment last appearing number in commandline-mode command with Control-a ,\nand decrement with Control-x .\n\n    <C-a> increment commandline last appearing number.\n    <C-x> decrement commandline last appearing number.\n\n\n------------------------------------------------------------------------------\n[Usage]\n\n1.  Enter commandline mode.\n2.  Enter next command.\n\n    :edit workfile_1.txt\n\n3.  And Press Control-a , or press Control-x .\n\n\n------------------------------------------------------------------------------\n[Customized Mapping]\n\nIf you will customize increment, decrement mapping,\nadd put these code to your vimrc .\n\n    \" (for example)\n    \" increment with Shift-Up\n    cmap <S-Up> <Plug>IncrementCommandLineNumber\n    \" decrement with Shift-Down\n    cmap <S-Down> <Plug>DecrementCommandLineNumber\n"}, {:name=>"popup_it--su", :summary=>"Auto complete popup plugin", :description=>"use regexp to match line pattern\nthen auto popup complete menu.\ndefault support c c.gtk tex html css javascript \n\n\"             let g:usrPopup= {}\n\"             let s:usrPopup[\"type\"] = [\n\"                         \\ {'cmd'     : \"\\<c-n>\",\n\"                         \\  'pattern' : ['xx', 'yy'],\n\"                         \\  'exclude' : ['zz'],\n\"                         \\ },\n\"                         \\{item2}\n\"                         \\{item3}\n\"                         \\]\n"}, {:name=>"perdirvimrc--Autoload-vimrc-files-per-di", :summary=>"Loads vimrc files that are above the opened file in the directory tree", :description=>"This script loads Vim configuration files at startup beginning\nfrom the root directory down to the current working directory.\n\nThis is useful when you want to to set up a specific configuration that\nis only loaded when you edit files within a certain directory.\n \nLet's look at a common situation. To configure Vim depending on your\nproject, your tree would look like this:\n\n~/projects  .................................. Your programming projects\n~/projects/.vim  .......................... Vim settings for all your projects\n~/projects/c-projects  ................ Your C projects\n~/projects/c-projects/.vim  ........ Vim settings for your C projects\n~/projects/php-projects  ........... Your PHP projects\n~/projects/php-projects/.vim  ... Vim settings for your PHP projects\n\nWhen you open the file ~/projects/c-projects/main.c the plugin loads\nthis files in the given order:\n\n~/projects/.vim\n~/projects/c-projects/.vim\n\nThe scripts autoloads files with the name\n\n      _vimrc\n      _vim\n      .vimrc\n      .vim\n\n"}, {:name=>"hybridevel", :summary=>"plugin for hybrid program", :description=>"This plugin provides lots of functions for hybrid project. Each function has \nthe shortcut and the Ex command.\n\nNow the plugin supports the following projects: c,c++,java,make,ant,\nflash, and matlab are listed in the $VIMRUNTIME/development directory. You\ncan write scripts such as python.vim to support other projects."}, {:name=>"phpErrorMarker", :summary=>"Mark syntax errors in php file", :description=>"phpErrorMarker set makeprg et errroformat automaticaly for php file.\nA call to :make launch php syntax checking and set sign (:h sign for more informations) if there are any errors in file.\nSome variables may be interesting :\ng:phpErrorMarker#autowrite : if true, file will be automaticaly write before syntax checking, default is \"0\".\ng:phpErrorMarker#php : path to php binary, default is \"php\".\ng:phpErrorMarker#textError : sign used for error, default is \"><\".\ng:phpErrorMarker#textWarning : sign used for warning, default is \"--\".\ng:phpErrorMarker#automake : if true, make is automaticaly done after a write command like \":w\", default is \"0\".\n g:phpErrorMarker#openQuickfix : if true, quickfix window will be automaticaly opened after \":make\".\nSet these variables in your .vimrc to override default values, like that :\n\nlet g:phpErrorMarker#autowrite = 1\n\nPlease, report any bug to phpErrorMarker.vim[..at..]mageekbox.net. "}, {:name=>"Functionator", :summary=>"Simple script that shows the name of the current function", :description=>"This is a simple script I use that shows the name of the function the cursor is currently in when gn is pressed, and goes to the [count] line of that function when [count]gn is used.\n\nCurrently supports: C, Objective-C, JavaScript, Python, and Vim script."}, {:name=>"CheckAttach.vim", :summary=>"Check for attachments when writing mails with mutt", :description=>"If you like the plugin, please rate it!\n\nYou can now follow the plugin at github: http://github.com/chrisbra/CheckAttach\n\n                                                                  *CheckAttach*\n1. Functionality\n\nWhen using mutt as your mail user agent, you can specify which files to attach\nusing the pseudo header :Attach. This only works when edit_headers is set in\nyour .muttrc configuration file. See the mutt manual for further information\nabout that topic.\n\nA simple version of this plugin has been posted to the mutt-users list (see\nhttp://marc.info/?i=20090116091203.GB3197%20()%20256bit%20!%20org) and\nafter using it for some time, I decided to make a plugin out of it.\n\nThis plugin checks, whether certain keywords exist in your mail, and if found,\nyou'll be asked to attach the files. This is done to prevent that you sent\nmails in which you announce to attach some files but actually forget to attach\nthe files so that your have to write a second mail which often is quite\nembarassing.\n\nTherefore this plugin checks for the presence of keywords which indicate that\nan attachment should be attached. If if finds these keywords, the plugin will\nask you for the files to attach, whenever you save your mail.\n\nThis looks like this:\nAttach file: (leave empty to abbort):\n\nAt that prompt you can specify any file you'd like to attach. It allows\nfilename completion, so you can use <Tab> to let vim complete file paths.\nAdditionally you can specify glob patterns and let vim attach all files, that\nmatch the pattern. So if you enter ~/.vim/plugin/*.vim vim would add for each\nplugin it finds an Attach-header.  If you enter an empty value or \"n\" (without\nthe quotes), no file will be attached.\n\nThe plugin will by default escape blank space in your filename by using '&#039.\nmutt before version 1.5.20 had a bug, that would not allow you to add files\nwhose filename contain spaces. If you are using mutt version smaller 1.5.20\nthis means you would have to rename those files first before attaching them.\n(See mutt bug 3179: http://dev.mutt.org/trac/ticket/3179)\n\nYou can specify which keywords will be searched by setting the\ng:attach_check_keywords variable. By default this variable is specified as:\nlet g:attach_check_keywords = 'attach,attachment,angehängt,Anhang'\nso that it can handle German and English. If you would like to add the keyword\nfoobar, use this command:\nlet g:attach_check_keywords .=',foobar'\n\n                                         *EnableCheckAttach* *DisableCheckAttach*\nYou can disable the plugin by issuing the command\n:DisableCheckAttach\nEnabling the attachment check is then again enabled by issuing\n:EnableCheckAttach\nYou can also use the ! attribute when saving your buffer to temporarily skip\nthe check. So if you use :w! the buffer will not be checked for attachments,\nonly if you use :w it will.\n\n\n==============================================================================\n2. CheckAttach History                                      *CheckAttach-history*\n    0.2: Sept 29, 2009     Added Documentation\n    0.1: Sept 29, 2009     First working version, using simple commands\n\n==============================================================================\nvim:tw=78:ts=8:ft=help"}, {:name=>"SoftTabStops", :summary=>"Set typewriter like tabstops.", :description=>"Description:\n  This plugin provides the ability to enter tabular data quickly in two\n  different ways:\n      - Set explicit stops at the columns.\n      - Enter a sample row and have the stops inferred from it.\n  The plugin provides a visual editor such that you can set explicit stops\n  with ease. The stops can be toggled using a mouse or keyboard. You can\n  toggle the plugin functionality on and off at the buffer or global\n  level.\n\nUsage:\n  - Use :STTgl to toggle using tabstops. This maps/unmaps <Tab> and <BS>.\n    When buffer-local tabs are enabled (the default), the maps are made\n    local to the current buffer, otherwise, the maps are global.\n  - Use :STEdit[!] to bring up an editor for setting explicit tab stops (or\n    to just view them). You would see three lines, two with numbers to guide\n    the column number and another to show the current tab stops. To toggle\n    stop at a any column, move cursor to the column and push spacebar or\n    directly click left mouse button. To save changes at the end, use :wq\n    command (or just :w, to leave the window open). You can press \"q\" to\n    quit when no changes have been made. When buffer-local tabs have been\n    enabled (the default), use bang to edit the global tabstops.\n  - Use STReset to reset the tabstops to one every 8 columns (or whatever\n    'tabstop' is set to), or STClear to clear all of them.\n  - By default the stops are lcoal to a buffer\n    (g:softtabstops_local_to_buffer setting is set). This helps to localize\n    the stops and maps to the current buffer of interest, but as a result\n    are not shared across buffers. The tabstops will be stored as a list of\n    columns in the buffer local variable called \"b:softtabstops\". To have\n    same set of stops for all buffers reset this setting and have the stops\n    stored in the global variable \"g:softtabstops\".\n  - You can manipulate softtabstops in any of these ways:\n      - directly, by using the Vim's |List| functions. You can even clone\n        (using |copy()| function) the global \"g:softtabstops\" to the buffer\n        local variable \"b:softtabstops\"\n      - using plugin commands :STAddTab, :STRemoveTab, :STReset and :STClear\n      - using visual editor started by :STEdit command\n  - When softtabstops is toggled on and off, the plugin doesn't try to\n    restore any prior maps for <Tab> and <BS>, this is because Vim doesn't\n    provide any means to capture a map completely. If the experimental\n    g:softtabstops_restore_original_map option is turned on the plugin\n    attempts to capture the maps by parsing the :map command output and the\n    maparg() result, but this method is very limited, and will not work for\n    many scenarios. If you have have your own insert mode mappings for <Tab>\n    and <BS> or use a plugin that defines them, make sure this plugin\n    doesn't conflict with them.\n\nSettings:\n  - g:softtabstops_local_to_buffer (default: 1). Set to 0 to make tabstops\n    shared globally by all buffers. This also makes :STTgl create global\n    maps.\n  - g:softtabstops_repeat_last_stop (default: 0). When set to 1, the plugin\n    repeats the entire sequence of tabstops when it needs to extend them.\n  - g:softtabstops_align_line_with_editor (default: 1): Set to 0 to avoid\n    repositioning the current line when the tab editor is opened.\n  - g:softtabstops_infer_tabstops (default: 1). Set to 0, if you don't want\n    the plugin to infer the tabstops based on the previous lines, when no\n    explicit tabstops are set (or existing ones are cleared using :STClear)\n  - g:softtabstops_infer_imm_nonblank_only (default: 1). Set to 0, if you\n    want the tabstops to be inferred from the previous line, only when there\n    are no blank lines between them.\n  - g:softtabstops_editor_guide_start_num (default: 0). Controls the column\n    number sequence in the tab editor. Should be between 0 to 9.\n  - g:softtabstops_editor_guide_end_num (default: 9). Controls the column\n    number sequence in the tab editor. Should be between 0 to 9 and greater\n    than g:softtabstops_editor_guide_start_num.\n  - g:softtabstops_restore_original_map (default: 0). Set to 1 to enable the\n    experimental feature to save and restore maps while toggling on and off.\n\nLimitations:\n  - Can only insert all spaces, not a mix of tabs and spaces.\n"}, {:name=>"Pasto", :summary=>"paste it to Pasto", :description=>"Paste & read from Pasto server\nhttp://trac-hg.assembla.com/pasto\n\nExample server:\nhttp://pasto.elefantesrosas.com.ar/"}, {:name=>"tango.vim", :summary=>"Full Tango based colorscheme", :description=>"Based on the Tango color palette.\t\nThe background is white by default, to have a really full Tango colorscheme put this in your .vimrc file:\n\nlet g:bg_tango = 1\n\nScreenshots: \nC - http://www.focolivre.org/arquivos/tango_vim.png\nPython - http://www.focolivre.org/arquivos/tango_vim1.png\nPerl - http://www.focolivre.org/arquivos/tango_vim2.png\n\nTo more about the Tango Project: http://tango.freedesktop.org\nFor suggestions or any other thing, feel free to email me."}, {:name=>"Windows-PowerShell-indent-enhanced", :summary=>"New version - everything indents correctly", :description=>"PowerShell indentation script. Partially relying on the built-in cindent but fixing many PowerShell specific indentations like the comment problem (lines that begin with # were considered precompiler and were never indented) and extraneous indentation after a param() line or a line that ends with a .net function call.\n\nBest used with the Windows PowerShell syntax and ftplugin files (vimscript #1327 and vimscript #1816)\n\nIndentation should be perfect now.\nIf you happen to find anything that does not indent correctly - please comment on my blog post:\nhttp://blogs.msdn.com/lior/archive/2009/10/18/powershell-indentation-for-vim-version-2-0.aspx"}, {:name=>"NERD_tree-Project", :summary=>"It tries to find out root project directory, browse project file with NERD_tree.", :description=>"This plugin works together with NERD_tree (http://www.vim.org/scripts/script.php?script_id=1658). It tries to find out root project directory for current file, and calls NERD_tree in that directory. If no project found, then calls NERD_tree in current directory.\n\n=== How does this plugin work ===\nIt searches several files used to indicate a project root directory when creating or reading file:\n    build.xml, Makefile, .project, .lvimrc\nIf any one of them found, the located directory is recognized as project root directory. Command 'ToggleNERDTree' should open this directory as root so that you could keep working on the proper project. NERD_tree opens current directory if nothing found.\n\n=== Usage ===\n  Type in normal mode:\n      :ToggleNERDTree<CR>,\n  or map shortcut in your .vimrc file:\n      map <F8> :ToggleNERDTree<CR>\n\n=== Customize ===\n  Make NERD_tree Project to recognize more project, such as scons:\n      let g:NTPNames = add(g:NTPNames, 'SConstruct')\n  or add more file types:\n      extend(g:NTPNames, ['*.sln', '*.csproj'])"}, {:name=>"JavaScript-syntax-add-E4X-support", :summary=>"Fix highlighting on E4X (CDATA) blocks", :description=>"Supplementary syntax file for JavaScript.\n\nAdds support for properly highlighting E4X (ECMAscript4XML) blocks, which is a CDATA chunk of raw text inside ECMAscript/JavaScript code.  See http://en.wikipedia.org/wiki/ECMAScript_for_XML or http://userscripts.org/guides/4"}, {:name=>"php_localvarcheck.vim", :summary=>"highlight unused/unassigned local variable", :description=>"function example($unused) {\n  echo $unassigned;\n}\n\n$unused and $unassigned are highlighted when the cursor is in example()."}, {:name=>"chocolate.vim", :summary=>"Choclolate color scheme, based on the W3C core style", :description=>"\"Choclolate\", a dark colorscheme based on the W3C core style of the same name and 'clean.vim' by Ron Aaron.\n\nSee http://www.w3.org/StyleSheets/Core/Overview\n\nSample:\n\nhttp://happy.cat/blog/VIM-Chocolate-Colorscheme-2008-06-04-16-30.html"}, {:name=>"assistant", :summary=>"Show the prototype of function(PHP/Vim/...)", :description=>"\"   To show the prototype of function or method, just press <C-h>,also upport user complete function(<C-x-u>) \n\"   Now support php and vim(zh-cn) function list.\n\"   It's very easy to make your self function list, see the file in assistant dir, the help file formate is like 'key' => 'value'\n\n\"   <C-h>快捷键显示当前位置函数的原型，支持PHP、Vim脚本\n\"   <C-x-u>补全当前位置函数\n\"   若喜欢用netbeans或者eclipse的补全快捷键，可以将=config=中的键映射启用。\n\"   需要添加支持更多的文件，只要将符合 键=>值 形式的字典文件\n\"   以 补全文件后缀名.txt 保存到 assistant 目录下即可，1.35版之后会自动载入。"}, {:name=>"md5.vim", :summary=>"md5() function", :description=>"This is a port of rfc1321 md5 function.\n\n:echo md5#md5(\"hello, world\")\ne4d7f1b4ed2e42d15898f4b27b019da4"}, {:name=>"Nmap-syntax-highlight", :summary=>"Nmap syntax highlight", :description=>"Nmap syntax highlight file. With this file you can view Nmap (*.nmap) files with nice colors :)"}, {:name=>"haxe_plugin", :summary=>"Alternative flashdeveloper for programming on haxe", :description=>"You love omnicomplete for vim.\nThis begin decision for best navigation on standard haxe library at console enviroment.\nScript is a dampish, but function executes.\n"}, {:name=>"fontsize.vim", :summary=>"Increment or decrement font size via keypresses", :description=>"===============================================================================\nIntroduction                                        *fontsize-intro*\n\nThis plugin provides convenient mappings for changing the font size in Gvim.\n\n  <Leader>==    Begin \"font size\" mode\n  <Leader>++    Increment font size\n  <Leader>--    Decrement font size\n  <Leader>00    Revert to default font size\n\n(Note that by default, <Leader> is the backslash character, so for example\n<Leader>++ is invoked by pressing \\++ from normal mode.)\n\nThe above mappings initiate a \"font size\" mode in which the following\nadditional individual keys become active:\n\n  +          Increment font size (may also use = to avoid shift key)\n  -          Decrement font size\n  0          Revert to default font size\n  !          Save current size as new default\n  q          Quit \"font size\" mode\n  <SPACE>    Quit \"font size\" mode\n  <CR>       Quit \"font size\" mode\n\nOther keys pressed will exit \"font size\" mode and perform their normal\nfunction.\n\nIn addition, \"font size\" mode will automatically timeout after |timeoutlen|\nmilliseconds have elapsed without a keypress, because \"font size\" mode is\nbased on mappings.\n\nDetails on customization are found in the |fontsize-customization| section\nof the included documentation.\n\n===============================================================================\nCustomization                                       *fontsize-customization*\n\nThe default value of |timeoutlen| is 1000 milliseconds (1 second), which might\nbe too fast.  The author uses the following setting in his |vimrc|: >\n\n  \" Slow down mapping timeout from default 1000 milliseconds.\n  set timeoutlen=3000\n\nYou may change the mappings that initiate \"font size\" mode by creating\nyour own mappings in your |vimrc|file.  For example, use these mappings\nto use single characters instead of doubled ones:\n\n  nmap <silent> <Leader>=  <Plug>FontsizeBegin\n  nmap <silent> <Leader>+  <Plug>FontsizeInc\n  nmap <silent> <Leader>-  <Plug>FontsizeDec\n  nmap <silent> <Leader>0  <Plug>FontsizeDefault\n\nOr, use a single mapping to begin \"font size\" mode and disable other mappings:\n\n  nmap <silent> <F8>                        <Plug>FontsizeBegin\n  nmap <silent> <SID>DisableFontsizeInc     <Plug>FontsizeInc\n  nmap <silent> <SID>DisableFontsizeDec     <Plug>FontsizeDec\n  nmap <silent> <SID>DisableFontsizeDefault <Plug>FontsizeDefault\n\nAny mapping to <Plug>FontsizeXxx overrides the default mappings, even if that\nmapping is meaningless like <SID>SomeRandomName.\n\nNormally, the plugin detects the default font size from 'guifont\".  This may\nbe overridden in the |vimrc| file.  E.g., to set the default to 12: >\n\n  let g:fontsize#defaultSize = 12\n\nIf your Gvim uses a different encoding for 'guifont' than what's found in\n'encoding', you can set g:fontsize#encoding in your |vimrc| file to convert\nthe font names.  For example, on Chinese Windows XP, the fonts are encoded in\n\"gbk\", so if you use \"utf8\" for your 'encoding', you'd use the following: >\n\n  let g:fontsize#encoding = \"gbk\"\n\n(Converting font name encodings requires the +iconv feature.)"}, {:name=>"InsertChar", :summary=>"Press <tab> to insert a single character", :description=>"Allows you to use <tab> <letter> to insert a single character (no need to press escape). You can also use 3<tab> <letter> to insert 3 characters.\n\nIf you install vimscript #2136, then the '.' command will also repeat the last insert.\n"}, {:name=>"hlasm.vim", :summary=>"asm370 hlasm mvs", :description=>"Syntax highlight file for hlasm or asm370. You can freely add any missing keyword in \"syn keyword xInstruction\", \"syn keyword xDirective\", \"syn keyword xMacro\",  \"syn keyword xParameter\" \"syn keyword xRegister' etc."}, {:name=>"term.vim", :summary=>"Terminal library", :description=>"Terminal library for Unix CUI terminal.\n\nExample:\n  \" Display current time at bottom of screen.\n  \" move cursor\n  call term#position(&lines, 1)\n  \" fg=blue bg=red\n  call term#attr(0, 34, 41)\n  \" print text\n  call term#text(strftime(\"%c\"))\n  \" reset attribute\n  call term#attr()\n  \" output\n  call term#out()\n\nTry :call term#demo()\n"}, {:name=>"MailApp", :summary=>"This plugin allows Mac OS X users to send e-mails from Vim using Mail.app.", :description=>"This plugin allows Mac OS X users to send e-mails from Vim using the Mail.app application.\n\nIt provides syntax highlighting, auto-completion for header name, e-mail and attachment.\n\nTo start a new e-mail, use the command :NewMailApp, which will open a new buffer where you can start writing. To send the e-mail, use the command :SendMailApp."}, {:name=>"PyMol-syntax", :summary=>"PyMol syntax ", :description=>"May be useful for editing .pml scripts of PyMol http://pymol.org."}, {:name=>"hornet.vim", :summary=>"Hornet style colorscheme", :description=>"Hornet is a modification of the colorscheme busybee (vimscript #2549) by Patrick Anderson.\nHornet refers to the famous \"Green hornet\" and is supposed to be a greener version of busybee."}, {:name=>"Execute-selection-in-Python-and-append", :summary=>"Execute a selection in Python and paste result after", :description=>"This script executes a selection in Python and then pastes the result after that selection or replaces the selection. Useful for testing small software snippets and documenting them in the same buffer.\n\nIt is based on http://vim.wikia.com/wiki/Execute_Python_from_within_current_file"}, {:name=>"testname", :summary=>"Generate unused file name for testing purpose", :description=>"Get an unused file name for testing purpose.\n\nFile names are counted A1,A2,..,A9,B10,..,B99,C100,..  Several \"sets\" can be\ndefined.  A set specifies path and extension of the file name to be\ngenerated.  Files named \"lastnr.dat\" maintain the counter(s) for each set.\nSelect a set with a KEY.  An expr-abbr is a useful way to trigger the\nfunctions.\n\nUsage: edit a new test file:\n    :new tn#\n\nCustomization: variables in the vimrc\n\ng:testname#set    (dictionary)\n\n    :let g:testname#set = {}\n    :let g:testname#set[KEY] = { \"ext\": EXT, \"path\": PATH [, \"lnk\": LNPK] }\n    :...\n    \n    KEY - (string) the selector; for use in the abbreviation, e.g. \"vim\"\n    EXT - (string) extension for the file name to be generated, e.g. \".vim\"\n    PATH - (string) path in which to create the new files and \"lastnr.dat\"\n        (user creates the files, script only creates lastnr.dat)\n    LNPK - (string) optional selector to choose the path for lastnr.dat from\n        another set; \"LastNr.dat Path Key\".  Makes it possible to have a\n        single lastnr.dat file for all paths.\n    \n    * You can overwrite the one default KEY \"vim\".\n    * Different KEYs can share PATH (the lastnr file contains a line for\n      each KEY), only PATH + EXT must be unique (in general).\n\ng:testname#lastnrfile\t    (string)\n\n    name of lastnr-file in PATH; must be given without (esp. absolute) path;\n    default is \"lastnr.dat\"\n\ng:testname#firstnr    (string)\n\n    first \"number\" to be used, default \"A1\"\n"}, {:name=>"Asneeded-2", :summary=>"Load scripts as needed", :description=>"Asneeded allows loading a script by the name of a command or function that\nthe script defines.  You can use :AN to load by a command; functions are\nloaded automatically (via FuncUndefined).\n\nExample (this is supposed to work with the default setup):\n\n\t:AN ANedit\n\nThis will source the script  AsNeeded/anplus.vim  (located below the\n'runtimepath') which defines the :ANedit command.\n\nBefore :AN can be used, user scripts need to be scanned with :ANmakeTags to\ncreate ANtags files.  These files (like normal tags files) map commands and\nfunctions to script file names.  In order to find ANtags files,\ng:asneeded_path needs to be set up properly.\n\nThis script has the same purpose as the AsNeeded plugin created by DrChip\n(vimscript #915).\n\nThe ANtags file format is compatible, but paths included in file names are\nnot recognized.  In other words, each directory needs its own ANtags file.\n\n\nComparison (not to be taken too seriously...) of both scripts:\n\nAdvantages:\n- no creation of temporary buffers\n- configurable load path (load scripts from more than one location)\n- command-line completion instead of a menu\n- :ANmakeTags creates tags for certain files, not for a whole directory\n- :AN only loads a script if the command argument is not defined yet\n- single tags can be disabled in the ANtags file to solve ambiguities\n\nLeft Offs:\n- mappings are not recognized (at least not per default)\n- no \"on-the-fly\" mode: search for functions and commands requires an ANtags\n  file\n- :AN only takes a command name as argument (not a function name)\n- no creation of skeleton commands (beyond purpose)\n\nDrChip's AsNeeded version: 17c"}, {:name=>"smarty-syntax", :summary=>"Syntax highlight for Smarty Template Engine", :description=>"Bug fix of script: http://www.vim.org/scripts/script.php?script_id=1798"}, {:name=>"DBGp-client--Lancien", :summary=>"Initial upload", :description=>"This is a small modification of Ethan McCreadie's version, itself a modification of \nSeung Woo Shin's XDebug remote debugger: http://www.vim.org/scripts/script.php?script_id=2218\n\nIt fixes a bug I encountered when adding a breakpoint to a remote file on a local mount."}, {:name=>"sqlplus.vim--Rey", :summary=>" Execute SQL queries and commands from within VIM (using Oracle's SQL*Plus)", :description=>"This file contains routines that may be used to execute SQL queries and describe\ntables from within VIM.  It depends on SQL*Plus.  You must have $ORACLE_HOME\n$ORACLE_SID set in your environment, although you can explicitly set the\ndatabase name to use with the :DB <db-name> command.\n\nIn command mode:\n  <F7>: execute the whole script without applying any changes to it\n  <F8>: execute the SELECT query under your cursor.  The query must begin with\n        the \"select\" keyword and end with a \";\"\n  <Leader><F8>: prompt for an SQL command/query to execute.\n  <F9>: treat the identifier under the cursor as a table name, and do a 'describe'\n        on it.\n  <F10>: prompt for a table to describe.\n  <Leader>sb: open an empty buffer in a new window to enter SQL commands in\n  <Leader>ss: execute the (one-line) query on the current line\n  <Leader>se: execute the query under the cursor (as <F8>)\n  <Leader>st: describe the table under the cursor (as <F9>)\n  <Leader>sc: open the user's common SQL buffer (g:sqlplus_common_buffer) in a\n              new window.\n\n  :Select <...> -- execute the given Select query.\n  :Update <...> -- execute the given Update command.\n  :Delete <...> -- execute the given Delete command\n  :DB <db-name> -- set the database name to <db-name>\n  :SQL <...> -- open a blank SQL buffer in a new window, or if a filename is\n                specified, open the given file in a new window.\n\nIn visual mode:\n  <F8>: execute the selected query\n\nIf queries contain bind variables, you will be prompted to give a value for each\none.  if the value is a string, you must explicitly put quotes around it.  If the\nquery contains an INTO clause, it is removed before executing.\n\nYou will be prompted for your user-name, password and tnsname the first time you access\none of these functions during a session.  After that, your user-id and password\nwill be remembered until the session ends.\n\nThe results of the query/command are displayed in a separate window.\n\nYou can specify the values of the following global variables in your .vimrc\nfile, to alter the behavior of this plugin:\n\n  g:sqlplus_userid -- the user-id to log in to the database as.  If this\n      is specified, g:sqlplus_passwd must be given as well, which is the\n      password to use.  Default: \"\"\n  g:sqlplus_path -- the path the the SQL*Plus executable, including any\n      command line options.  Default: $ORACLE_HOME . \"/bin/sqlplus -s\"\n  g:sqlplus_common_commands -- any SQL*Plus commands that should be\n      executed every time SQL*Plus is invoked.\n      Default: \"set pagesize 10000\\nset wrap off\\nset linesize 9999\\n\"\n  g:sqlplus_common_buffer -- the name of a file that will contain\n      common SQL queries and expressions, that may be opened via the\n      <Leader>sc command.\n  g:sqlplus_db -- the name of the database to connect to.  This variable\n      may also be modified via the :DB command.\n\nAll the honor goes to Jamis Buck \"http://www.vim.org/account/profile.php?user_id=261&quot; who wrote the  first version \"http://www.vim.org/scripts/script.php?script_id=97&quot; of this script. Unfortunately I can not maintain his original script, so I had to fork it."}, {:name=>"unicode.vim", :summary=>"A Completion function for Unicode glyphs", :description=>"For a screenshot, see: http://www.256bit.org/~chrisbra/vim_unicode.png\n\n\n                                                              *unicode-plugin*\n1. Functionality\n\nThis plugin was written to enable an easier use of any Unicode glyph\navailable. The unicode.vim Plugin uses the data available from the Unicode\nConsortium's website (http://www.unicode.org) to let you enter Unicode\ncharacters using a completion function.\n\nBy default, the plugin creates a directory unicode below the path autoload\nwhere this plugin is located. Within this directory it will store  the file\nIndex.txt from http://www.unicode.org/Public/UNIDATA/Index.txt which it will\ntry to download using *netrw* . If this is unsuccessfull, or you do not have\n|netrw| enabled, dowload the file manually and save it in the unicode\ndirectory below the autoload directory in which unicode.vim is located.\n\n\n\t\t\t\t\t\t *:EnableUnicodeCompletion*\nBy default the plugin is not enabled. To enable it enter\n:EnableUnicodeCompletion\nWhen you run this command, *unicode.vim* checks for the availability of\nIndex.txt from the Unicode Consortium, and if it is not available, it will try\nto download it. \n\nThis will also set up the completion function |completefunc| to use for your\nbuffer. You can use |i_CTRL-X_CTRL-U| then to start the completion. \n\n\t\t\t\t\t\t *:DisableUnicodeCompletion*\nIf you want to disable the plugin, enter\n:DisableUnicodeCompletion\n\n\t\t\t\t\t\t    *unicode-plugin-usage*\nIf you have enabled the plugin using |:EnableUnicodeCompletion| then there are\n2 possibilities to use the plugin. You can either enter the Unicode Character\nname, or enter the Unicode-Codeposition.\n\nFor example, you would like to enter Æ, so you enter AE and press <C-X><C-U>\nwhile in insert mode. Alternatively you can enter the Unicode-Codepoint: U+C6\nand press <C-X><C-U> and the popup menu will show you all characters, that\nhave a codepoint like C6 with leading zeros, eg. U+00C6 and U+0C66\n\nA popup menu will appear, showing you the Unicode-Codeposition value, the\nUnicode Character Name and the Unicode Character (and if you have enabled it,\nit can also show you the digraph characters needed to create this character in\nparanthesis, see |unicode-plugin-config| ). You can scroll down in the menu by\npressing <C-N> and up by pressing <C-P>.\n\n\n\t\t\t\t\t\t    *unicode-plugin-config*\nThe plugin can be customized to include the 2 digraph characters you have to\ntype, to get that character. This works only, if there is a digraph defined\nfor that Unicode char. If you would like this you need to set\ng:showDigraphCode, e.g.\n:let g:showDigraphCode=1\nThis functionality is by default disabled, cause it seems to cause some delay\nand screen-rendering errors in the menu. Enter\n:let g:showDigraphCode=0\nto disable the Digraph feature afterwards.\n\nIf you would like to specify a different URL from which to download Index.txt,\nenter the URL as:\n:let g:unicode_URL='http:....'\nTo force downloading the file from that new url, enter\n:call unicode#CheckUniFile(1)\n\n\t\t\t\t\t\t     *unicode-plugin-error*\nIf the plugin gives an error, first check, that Index.txt from the Unicode\nConsortium has been successfully downloaded. It should look something like\nthis:\nA WITH ACUTE, LATIN CAPITAL LETTER\t00C1\nA WITH ACUTE, LATIN SMALL LETTER\t00E1\nA WITH BREVE, LATIN SMALL LETTER\t0103\nA WITH CARON, LATIN SMALL LETTER\t01CE\nA WITH CIRCUMFLEX, LATIN CAPITAL LETTER\t00C2\nA WITH CIRCUMFLEX, LATIN SMALL LETTER\t00E2\nA WITH DIAERESIS, LATIN CAPITAL LETTER\t00C4\nA WITH DIAERESIS, LATIN SMALL LETTER\t00E4\nA WITH DOT ABOVE, LATIN SMALL LETTER\t0227\nA WITH DOT BELOW, LATIN SMALL LETTER\t1EA1\nA WITH DOUBLE GRAVE, LATIN SMALL LETTER\t0201\nA WITH GRAVE, LATIN CAPITAL LETTER\t00C0\n[...]\n(several thounsand lines following)\n\nelinks is known to mangle that file and make it unusable, so please check\nfirst if the format is right.\n\nIf the file looks correct, and the plugin is still not working correctly\ncontact the maintainer. You'll find his email-adress in the first line of this\ndocument. Please be patient, it might take a while, until I can take care of\nyour report."}, {:name=>"baan.vim", :summary=>"Indenting for Baan scripts", :description=>"Hitherto I have not found an indent vim script for Baan. This is just a small indent file that works for baan scripts. \n\nVersion created: Gvim 7.2\n\nPlease let me know if there are any improvement/bugs. \n\n"}, {:name=>"libperl.vim", :summary=>"provide standard vim functions for perl code", :description=>"git repository:   http://github.com/c9s/libperl.vim\n\n\nyou can just call those function by:\n\nlet retsult = libperl#whatever_function(  arg , arg2 )\n\nfunctions:\n\nfun! libperl#echo(msg)\nfun! libperl#get_perl_lib_paths()\nfun! libperl#get_module_file_path(mod)\nfun! libperl#tab_open_module_file_in_paths(mod)\nfun! libperl#tab_open_tag(tag)\nfun! libperl#translate_module_name(n)\nfun! libperl#open_tag(tag)\nfun! libperl#open_module()\nfun! libperl#get_cursor_module_name()\nfun! libperl#get_cursor_method_name()\nfun! libperl#find_method(method_name)\nfun! libperl#edit_file(fullpath,method)\nfun! libperl#tab_edit_file(fullpath,method)\nfun! libperl#tab_open_module_from_cursor()\nfun! libperl#open_module_in_paths(mod)\nfun! libperl#get_inc()\nfun! libperl#find_perl_package_files()\nfun! libperl#install_module()\nfun! libperl#get_package_sourcelist_path()\nfun! libperl#find_base_classes(file)\nfun! libperl#grep_file_functions(file)\nfun! libperl#parse_base_class_functions(filepath)\nfun! libperl#get_method_comp_refer_start()\nfun! libperl#get_method_comp_refer_base()\nfun! libperl#get_method_comp_start()\nfun! libperl#get_method_comp_base()\nfun! libperl#clear_method_comp_base()\nfun! libperl#get_pkg_comp_start()\nfun! libperl#get_pkg_comp_base()\nfun! libperl#use_ok(pkg)\nfun! libperl#get_cpan_module_list(force)\nfun! libperl#get_installed_cpan_module_list(force)\nfun! libperl#get_currentlib_cpan_module_list(force)\nfun! libperl#get_current_lib_package_name()\n"}, {:name=>"filter", :summary=>"apply filters to text, by filetype", :description=>"You can filter text in vim by executing the following command \n:%!filter_executable\nWith an appropriate collection of filters, this feature can help to format text or source code, pretty print, or do advanced editing. \nHowever, each filter has to be in your $PATH (unless you want to specify the path manually), and you have to remember the name of the program.\nAlso, if you have many filters, organizing them can be complicated. You may be tempted to give them long names, or you may be feeling that you end up clogging your $PATH with numerous filters that you only use in rare situations.\n\nThis plugin helps to solve this problem. You maintain your filter scripts inside of your vim folder, in a folder 'filters' with subfolders per filetype (~/.vim/filters/all for filters that are always available).\n\nYou can then apply a filter both with an Ex command (:Filter) and with a shortcut (\\f in normal mode, <C-L>f in insert mode, by default). The plugin looks in ~/.vim/filters for filter scripts appropriate to the file type, and allows you to select one, interactively. The given current range is then filtered through the script."}, {:name=>"multisearch.vim", :summary=>"Search + highlight multiple search terms", :description=>"I routinely need to examine log files from production, and found the need to highlight and search multiple terms during the process. I took ideas from such scripts such as Highlighter.vim, MultipleSearch.vim and MultipleSearch2.vim and created a script to help me with the above task. In April, 2008, I rewrote the script virtually from scratch and over the last year and a half improved its functionality. I now submit the result of my efforts for the benefit of the Vim community.\n\nMulti Search enables highlighting (and searching) multiple search terms. Each defined search term's highlight state can be enabled or disabled. Searches can be performed on all the defined terms, all enabled terms, or on specific terms.\n\nOn platforms that support it, the Multi Search menu makes it easier to use some of the Multi Search commands. Multi Search also defines mappings for the more commonly used commands.\n\nAlthough it is marked as requiring Vim 7.2, the Multi Search plugin was developed and tested using Vim 7.1. Please see the installation instructions below. Once installed, detailed help can be obtained by\n\n\t:help Msearch\n\nEmail bug reports and enhancement requests to the author. Happy Viming!"}, {:name=>"RTM.vim", :summary=>"Vim plugin for Remember The Milk", :description=>"============\nProject info\n============\n\nAuthor: Kosei Kitahara <surgo.jp@gmail.com>\nProject host: http://bitbucket.org/Surgo/rtm.vim/\n\n=====\nUsage\n=====\n\nAdd Task\n--------\n\n * add current line to task\n   `:C[RTM] -a` command\n * add current buffer to task\n   `:B[RTM] -a` command\n\n====\nTODO\n====\n\n * set tag, location, priority to task\n * complete task\n * delete task"}, {:name=>"Cobalt-Colour-scheme", :summary=>"Vim version of TextMates Cobalt colour scheme", :description=>"This is a Vim version of one of TextMate's default colour schemes, Cobalt. Only designed for GVim.\n\nIf you want to follow the development you can find it on Github at http://github.com/dterei/VimCobaltColourScheme"}, {:name=>"roo.vim", :summary=>"Spring Roo syntax highlighting", :description=>"Simple syntax highlighting for Spring Roo (http://www.springsource.org/roo) script files"}, {:name=>"csv.vim", :summary=>"A Filetype plugin for csv files.", :description=>"This is a filetype plugin for CSV files. It was heavily influenced by the Vim\nWiki Tip667 (http://vim.wikia.com/wiki/VimTip667), though it works\ndifferently.\n\n                                                           *csv-toc*\n1. Installation.................................|csv-installation|\n2. CSV.Commands.................................|csv-commands|\n    2.1 WhatColumn..............................|WhatColumn|\n    2.2 NrColumns...............................|NrColumns|\n    2.3 SearchInColumn..........................|SearchInColumn|\n    2.4 HiColumn................................|HiColumn|\n    2.5 ArrangeColumn...........................|ArrangeColumn|\n    2.6 DeleteColumn............................|DeleteColumn|\n3. CSV Filetype configuration...................|csv-configuration|\n    3.1 Delimiter...............................|csv-delimiter|\n    3.2 Column..................................|csv-column|\n    3.3 hiGroup.................................|csv-higroup|\n\n==============================================================================\n1. Installation\t\t\t\t\t*csv-installation*\n\nIn order to have vim automatically detect csv files, you need to have\n|ftplugins| enabled (e.g. by having this line in your |.vimrc| file:\n\n   :filetype plugin on\n\nTo have Vim automatically detect csv files, you need to do the following.\n\n   1) Create your user runtime directory if you do not have one yet. This \n      directory needs to be in your 'runtime' path. In Unix this would\n      typically the ~/.vim directory, while in Windows this is usually your\n      ~/vimfiles directory. Use :echo expand(\"~\") to find out, what Vim thinks\n      your user directory is. \n      To create this directory, you can do:\n\n\t  :!mkdir ~/.vim \n\t  \n      for Unix and\n\n\t  :!mkdir ~/vimfiles \n\n      for Windows.\n\n   2) In that directory you create a file that will detect csv files.\n\n\tif exists(\"did_load_csvfiletype\")\n\t  finish\n\tendif\n\tlet did_load_csvfiletype=1\n\n\taugroup filetypedetect\n\t  au! BufRead,BufNewFile *.csv,*.dat\t\tsetfiletype csv\n\taugroup END\n\n      You save this file as \"filetype.vim\" in your user runtime diretory:\n\n        :w ~/.vim/filetype.vim\n\n   3) To be able to use your new filetype.vim detection, you need to restart\n      Vim. Vim will then  load the csv filetype plugin for all files whose\n      names end with .csv.\n\n==============================================================================\n2. Installation\t\t\t\t\t                *csv-commands*\n\nThe CSV ftplugin provides several Commands:\n\n2.1 WhatColumn                                                  *WhatColumn*\n--------------\n\nIf you would like to know, on which column the cursor is, use :WhatColumn.\n\n2.2 NrColumns                                                   *NrColumns*\n--------------\n\n:NrColumns outputs the maximum number of columns available. It does this by\ntesting the first 10 lines for the number of columns. This usually should be\nenough.\n\n2.3 SearchInColumn                                          *SearchInColumn*\n------------------\n\nUse :SearchInColumn to search for a pattern within a specific column. The\nusage is:\n:SearchInColumn <nr> /{pat}/\n\nSo if you would like to search in Column 1 for the word foobar, you enter\n\n:SearchInColumn 1 /foobar/\n\nInstead of / as delimiter, you can use any other delimiter you like.\n\n2.4 HiColumn                                                     *HiColumn*\n------------\n\n:HiColumn <nr> can be used to highlight Column <nr>. Currently the plugin uses\nthe WildMenu Highlight Group. If you would like to change this, you need to\ndefine the variable |g:csv_hiGroup|.\n\n2.5 ArrangeColumn                                           *ArrangeColumn*\n-----------------\n\nIf you would like all columns to be arranged visually, you can use the\n:ArrangeColumn command. Beware, that this will change your file and depending\non the size of your file may slow down Vim significantly. This is highly\nexperimental.\n:ArrangeCommand will try to vertically align all columns by their maximum\ncolumn size.\n\n2.6 DeleteColumn                                           *DeleteColumn*\n----------------\n\nThe command :DeleteColumn can be used to delete a specific column.\n\n:DeleteColumn 2\n\nwill delete column 2.\n\n==============================================================================\n3. CSV Configuration\t\t\t\t\t  *csv-configuration*\n\nThe CSV plugin tries to automatically detect the field delimiter for your\nfile, cause although often the file is called CSV (comma separated values), a\nsemicolon is actually used. The column separator is stored in the buffer-local\nvariable (|b:var| delimiter. This delimiter is heavily used, because you need\nit to define a column. Almost all commands use this variable therefore.\n\n3.1 Delimiter                                                  *csv-delimiter*\n-------------   \n\nSo to override the automatic detection of the plugin and define the separator\nmanually, use:\n\n:let b:delimiter=','\n\nto let the comma be the delimiter.\n\n3.2 Column                                                  *csv-column*\n----------\n\nThe definition, of what a column is, is defined as buffer-local variable\nb:col. By default this variable is initialized to:\n\nlet b:col='\\%(\\%([^' . b:delimiter . ']*\"[^\"]*\"[^' . b:delimiter . ']*' \n    \\. b:delimiter . '\\)\\|\\%([^' . b:delimiter . ']*\\%(' . b:delimiter \n    \\. '\\|$\\)\\)\\)'\n\nThis should take care of quoted delimiters within a column. Those should\nobviously not count as a delimiter. \n\nIf you changed the b:delimiter variable, you need to redefine the b:col\nvariable, cause otherwise it will not reflect the change. To change the\nvariable from the comma to a semicolon, you could call in your CSV-Buffer\nthis command:\n\n:let b:col=substitute(b:col, ',', ';', 'g')\n\nCheck with :echo b:col, if the definition is correct afterwards.\n\n3.3 Hilighting Group                                         *csv-higroup*\n--------------------\n\nBy default the csv ftplugin uses the WildMenu highlighting Group to define how\nthe |HiColumn| command highlights columns. If you would like to define a\ndifferent highlighting group, you need to set this via the g:csv_hiGroup\nvariable. You can e.g. define it in your .vimrc:\n\n:let g:csv_hiGroup = \"IncSearch\"\n\nYou need to restart Vim, if you have changed this variable.\n"}, {:name=>"mimicpak", :summary=>"Converted colorschemes from other Editors/IDEs, plus originals.", :description=>"The MimicPak is a set of 17 colorschemes which were converted (ripped-off)\nfrom other editors and IDEs and that use and share some common\ntweaking options, like the font style among others.  Some original,\npersonal, invented and cloned colorschemes are included too.\n\nThe IDEs/Editors may have had more colorschemes, but only some\n(which I think that were great) are included.  Most of the colorschemes\nare only for gVim, this is so, because of time reasons and available\nnumber of colors.  However, you can use the CSApprox plugin\n( vimscript#2390 ) to use them on 88/256 color terms.  Although some of them\nhave the cterm colors for 16 color terminals.\n\nFor a fast way to try out these schemes, the included mimicpak.vim\nplugin script creates a submenu \"MimicPak\" under the \"Themes\" menu on the main\nmenubar.\n\nAfter correctly installing this pack, you can see the help with:\n   :h mimicpak\n       >> to get general help\n   :h mimic-overview\n       >> quick overview of colorschemes by background colors.\n   :h mimic-options\n       >> to see the shared options.\n   :h name_of_scheme.vim   \n       >> to see specific options (if any) of a  particular colorscheme.\n\n================\nSHARED OPTIONS\n================\nAll the included colorschemes use and share the following common option\nvariables (these can either be set as: buffer, window, tabpage or global) :\n\n   * mimic_font_style:  controls the style of the fonts.\n\n        let  mimic_font_style = 0    \" schemes will use plain fonts\n        let  mimic_font_style = 1    \" schemes will use bold fonts\n        let  mimic_font_style = 2    \" schemes will use italic fonts\n        let  mimic_font_style = 3    \" schemes will use bold and italic fonts\n\n   * mimic_colorize_gui:  if set, GUI elements (menu, toolbar,\n        scrollbar) will be colorized (works only for some GUIs).\n\nThat said, you only need to set these options once and you'll get the\nsame look when changing to another of these schemes.\n\nFor further help about these, try:\n   :h mimic_font_style\n   :h mimic_colorize_gui\n\n==============\nSCREENSHOTS\n==============\nHere are some: http://img97.imageshack.us/g/scameemacsplain.png/\n\nA slideshow: http://img513.imageshack.us/slideshow/player.php?id=img513/5013/1256781939pe8.smil\n\nMost of the included colorschemes are intended to be \"easy on the eyes\"\n(well, almost) and I hope that you might find at least 2 or 3\ncolorschemes from this pack that you could use for every day coding :)\n\nIf you like it (or if you don't) PLEASE RATE this thing!\n"}, {:name=>"xmms2ctrl", :summary=>"Control XMMS2 through VIM", :description=>"A plugin to control XMMS2 from vim using nyxmms2.  It is released under GPLv2\n\nIt has the following features\n\n    * toggle play/pause\n    * add track to playlist\n    * remove track from playlist\n    * previous track\n    * next track\n    * stop playing\n    * clear playlist\n    * seek through songs or goto specific time in a song\n    * change volume\n    * show current song playing\n    * jump to specific track in playlist\n    * load xmms2 playlist\n    * list all xmms2 playlists\n    * remove xmms2 playlist\n    * set config options in xmms2 "}, {:name=>"buf_it", :summary=>"Buffer list in statusline", :description=>"Buffer list in statusline\nUse\n\\ + num to change buf \n,num to split buf\n\\n \\p Show next part list If too much buf.\n,bo close other bufs.\n"}, {:name=>"template.vim", :summary=>"Simple and flexible template engine.", :description=>"*template* is a Vim plugin to read the template file automatically when the\nedit of the file is newly started.  Template file is selected to match the\nfile name to open. Also, you can run any command after the open.\n\n\nExample:\nIf the template files are located as follows:\n\n ~/.vim/template\n |-- doc\n |   `-- template.txt\n |-- plugin\n |   `-- template.vim\n |-- template.java\n |-- template.rb\n |-- template.vim\n |-- template_spec.rb\n `-- templateTest.java\n\nTemplate is loaded as follows.\n\nOpen file                       Template that is loaded\n---------                       -----------------------\nfoo.vim                         template.vim\nplugin/foo.vim                  plugin/template.vim\nFoo.java                        template.java\nFooTest.java                    templateTest.java\nfoo.rb                          template.rb\nfoo_spec.rb                     template_spec.rb\nfoo.txt                         (None)\ndoc/foo.txt                     doc/template.txt\n\n\nAnd, you can execute commands when template loaded.\n\nExamples:\nDefines replacing keywords:\n    autocmd User plugin-template-loaded call s:template_keywords()\n    function! s:template_keywords()\n      %s/<+FILE NAME+>/\\=expand('%:t')/g\n      %s/<+DATE+>/\\=strftime('%Y-%m-%d')/g\n      \" And more...\n    endfunction\n\nEvaluate by vim and expand the inside of <%= %>:\n    autocmd User plugin-template-loaded\n    \\ silent %s/<%=\\(.\\{-}\\)%>/\\=eval(submatch(1))/ge\n\nExpand the date it is written in the following template.\n    <%= strftime('%Y-%m-%d') %>\n\nMove the cursor to <+CURSOR+>:\n    autocmd User plugin-template-loaded\n    \\    if search('<+CURSOR+>')\n    \\  |   execute 'normal! \"_da>'\n    \\  | endif\n\nFiltered by an external command:\n    autocmd User plugin-template-loaded silent! :%!erb\n    autocmd User plugin-template-loaded silent! :%!php\n\n\nLatest Version:\nhttp://github.com/thinca/vim-template"}, {:name=>"phpcodesniffer.vim", :summary=>"Revisar los estándares de programación con PhpCodeSniffer", :description=>"Revisar los estándares de programación sobre el fichero que estamos trabajando.\n\nEste script esta basado sobre el script de Thomas Link (samul@web.de) (phpchecksyntax)"}, {:name=>"wikinotes", :summary=>"Wikipedia syntax with added functionality for taking notes", :description=>"It is very practical to keep all kinds of notes in simple text files (as for example suggested in David Allen's \"Getting Things Done\" and blogs like joelonsoftware.com).\n\nCombining this with the editing mightiness of vim and some syntax highlighting for better structuring, you've got an easy but powerful tool for notes at your hand.\n\nI used the Wikipedia syntax as base, since it's proven simple human-readable syntax, that is well known.\nThen I added a few features like c-style commenting and html link highlighting.\n\nScreenshot: http://www.oxpal.com/downloads/vim/wikinotes_syntax.png\n\nIt's most practical when setting this syntax file as standard for .txt or .wiki files. It then can also be used for editing actual Wikipedia text using vim (you might want to check out the firefox \"it's all text\" extension)."}, {:name=>"powershellCall", :summary=>"Allow the use of Powershell to evaluate some buffer lines", :description=>"This script provide 2 commands permitting some dialog with Microsoft Powershell.\n\nLines can be evaluated within vim, no filtering allowed for the moment."}, {:name=>"HiVim", :summary=>"HiVim is a color scheme creator", :description=>"HiVim is actually a great (in my opinion) G/Vim color scheme creator written in Tcl/Tk/Tix/Bwidget.\n\nHiVim calls GVim so to test your scheme (the fun part) you need GVim installed.\n\nYou also need Tcl/Tk/Tix/Bwidget installed...\n\nA screen shot is here:\n\nhttp://img.photobucket.com/albums/v124/DefEye/Screenshot-17.png\n\nA stand alone executable is here (all libraries included):\n\nhttp://www.mediafire.com/file/zy5ux4yn0wm/HiVim-executable.tar.gz\n"}, {:name=>"QuickFixHighlight", :summary=>"Initial release", :description=>"QuickFixHighlight highlights lines that have quickfix errors defined for them.\n\nA screenshot can be found at http://miffe.org/wiki/Blog/QuickFixHighlight/"}, {:name=>"noused", :summary=>"..", :description=>"."}, {:name=>"coldgreen.vim", :summary=>"base on dark background and green, blue color", :description=>"This is vim color scheme file. base on dark background and green and blue color. This color script is optimized for Python source code, Now.\n\nscreenshots here: http://www.hexacosa.net/project/coldgreen/"}, {:name=>"vorg", :summary=>"vim organizer syntax file", :description=>"vorg is a simple organizer file format for managing your notes and tasks. It was inspired by org-mode for emacs but the format is different. \nIt is still very much work-in-progress. \n\nUsage:\t\ncreate a file with the .vorg extension and insert the following line:\t\t\n\nvim:ft=vorg\n\t\t\nvorg format:\n\n- Topic Title\n  - Sub Topic Title (tag)\n    - Sub Sub Topic Title\n      sub sub topic text\n      [ ] sub sub topic task\n\t\t\nNotes: \n\n  ( vorg works best with the vim blackboard theme)\n\n  - To indent sub topics in insert mode, use <TAB>\n  - In normal mode, use <TAB> to fold and unfold topics\n  - You can also use asterisk signs (*) instead of minus signs(-)\n  - Tasks are indicated using a pair of square brackets with a blank inside [ ]\n  - You can create tasks without sub items by omitting the -\n\nMore Info:\n\n\t\t- Topic with a context @context\n\t\t- Topic with a deadline < {date}\n\t\t- Topic with a list of tags (tag1,tag2,tag3)\n\t\t- Topic with a timestamp | {date} @ {time}\n\t\t- Topic with a timestamp | {datetime}\n\t\t- Topic with a text content\n\t\t  some text...\n\n\n \t\tInsert-mode Shortcuts:\n\n\t\t-- create a new indented item\n\t\t-= create a new task\n\n\t\tctrl+j move line down\n\t\tctrl+k move line up\n\n\t\tdd - current date\n\t\tdt - current date+time\n\n\n\t\tNormal-mode Shortcuts:\n\t\t\n\t\t<TAB> expand/collapse topics, use <shift> for all sub-topics\n\n\t\tctrl+t find tags (type the tag name and then press <CR>)\n\t\tctrl+o find contexts (type the context and then press <CR>)\n\n\t\tctrl+j  shifts line down\n\t\tctrl+k shifts line up\n\n\t\t,c checkmark a task\n\t\t,u uncheckmark a task\n\n\t\t,w follow hyperlink\n\nThanks Niels AdB for Tip 1557!\nThanks Frank Butler for Tip 646!\n\nMore info can be found inside the script..\nFor updates follow me on twitter (L3V3L9) and look for the upcoming vorg screencast.\n\n"}, {:name=>"FlipLR", :summary=>"Flips left hand side and right hand side.", :description=>"This script flips left hand side and right hand side.\n'lhs {operator} rhs' => 'rhs {operator} lhs'\n\nUsage:\n  1. In visual mode, select left hand side, operator and right hand side.\n  2. execute ':FlipLR operator'\n  2'. execute ':FlipLR /operator/' to flip with regexp\n\n  This mapping may help you.\n      noremap \\f :FlipLR <C-R>=g:FlipLR_detectPivot()<CR>\n\nScreencast:\n  http://bitbucket.org/shu/fliplr/downloads/fliplr.htm\n\nRepository:\n  http://bitbucket.org/shu/fliplr/"}, {:name=>"simple-comment", :summary=>"simple toggle comment script", :description=>"Simple comment is a small script (eight lines) to toggle line comment. It use \"s\" as trigger key. You can easily add more langages, take a look at the .vim !"}, {:name=>"ywchaos", :summary=>"Journal taking and diary making, to record all the chaos of your life :)", :description=>"It's at the very early stage. If you feel the script is useful but still not so convenient in the journal taking and chaos orgnizing with vim in KISS way, any feedback is welcome, if you have thoughts on improvement, any advice is appreciated! My email is:\n\n        ywupub AT gmail DOT com\n\n1. Journal recording.\n\nHit the key <Leader>n (<Leader> normally means \\ on your keyboard if you haven't changed the <Leader> definition.) to create a new journal entry. ywchaos will insert a new entry with timestamp under today's datestamp for you.\n\n2. Tag support.\n\nyou can add a tag with the format of \"@tag\"(Without the double quotes) at anywhere you want in a file, or use \"@tag1|tag2\" for creating multi-tags, you can also use \"@tag:subtag\" to define sub-tags. <tab> can be used for autocompletion after '@', '|' or ':'.\nAfter a \"@tag\" has been defined, next time you edit ywchaos file, ywchaos will add the \"tag\" to TAGS list region which is on the very first part of the file. You can also use <Leader><C-l> to reflesh the TAGS list region manually.\n\n(subtag support is experimental, not so convenient for subtag adding at present, you much create tag then :subtag for every subtag.)\n\n3. Folding & highlighting & picture supporting.\n\nywchaos folds the file according to the datestamp[mm/dd/yyyy], the timestamp[hh:mm:ss], and the snip. Just a few highlightings(tags, journal entries) for ywchaos itself are supported at present, ywchaos is to manage the..., chaos, so I've no idea which stuffs should be highlighted, if you have a good advice, please let me know.\n\nBUT great news is, you can insert any other different filetypes of snip as you like, and use their syntaxs to hightlight(if they exists), so ywchaos can actually support all highlightings as vim supports! Only syntax is supported, not indentation. I don't know if filetype's indentation can be integrated in one file, if you know, please let me know.\n\nywchaos makes the insertion of picture is easy, you can hit <Leader>i, select the html tag, then use the auto completion to insert a <img src=> tag(auto-completion for file name after '=' is supported), then you can rename ywchaos file from foo.ywchaos to foo.html, then see the pictures in your browser.\n\nSpecial note for txtfmt users: you can use set ft=ywchaos.txtfmt, instead of simply ft=ywchaos to make ywchaos and txtfmt[http://www.vim.org/scripts/script.php?script_id=2208] work together. Thanks Brett Stahlman for such nice script to turn vim into a word processor :) You could go to http://txtfmt.webs.com/ywchaos.htm for the screenshots!\n\n4. keybinding:\n\n<Leader>n          Create a new journal entry with the format of \"$datestamp\\n$timestamp\" and start editing.\n\n<Leader>i          ywchaos will prompt you to insert html tags or other filetype of snips as you like(auto-completion is supported), and use the corresponding syntax to highlight the html tag or snip region.\n\n<Tab>       When on TAGS list region, unfolds all the entries which have the tag under the cursor, another <Tab> will restore to old fold way, otherwise do folding/unfolding toggling. When in insert mode, <tab> will try to complete the tag name after '@' or '|'.\n\n<Leader><C-l>      Refresh the TAGS list region manually.\n\n<C-]>       To vimgrep the tag(auto-completion is supported) for current file.\n\n5. A sample test.ywchaos(Trick: you can name it to test.htm to view the picture):\n\n------------------------------------------------\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<pre style=\"word-wrap: break-word; white-space: pre-wrap; white-space: -moz-pre-wrap\" >\n<TAGS>\nChinese \nProgramming      C\nvim              ywchaos\n中文 \n</TAGS>\n\nLogo pic:\n<img src=http://www.google.com/intl/en_ALL/images/logo.gif >\n\n11/18/2009\n22:40:40 @中文|Chinese\n这是中文测试. This is a test for Chinese.\n11/08/2009 \n15:52:00 @vim:ywchaos \nI've created a new ywchaos entry in vim. \nIt's not so good, I'll email developer to improve it! \n\nFollowing the a C snip that I'm learning for programming! @Programming:C \n<BEGINSNIP=c> \n#include <stdio.h> \n/* Just for example. */\nmain() \n{ \n    int i; \n    printf(\"Hello, ywchaos!\\n\"); \n} \n<ENDSNIP=c> \n\nvim:ft=ywchaos:\n------------------------------------------------\n\n6. Thanks:\n\nChristian Brabandt for the help with the function that gets tags in file.\nXbeta for the inspiration of html tag support[http://xbeta.info/pre-txt.htm]"}, {:name=>"haskellFold", :summary=>"Provide a foldexpr function which give nice folding for haskell files.", :description=>"Nice folding for haskell (*.hs) files.\n\n"}, {:name=>"pod-helper.vim", :summary=>"perl pod helpers", :description=>"please refer to:\n\nhttp://github.com/c9s/pod-helper.vim"}, {:name=>"Script-Walker", :summary=>"Walks up and down the file for you", :description=>"On pressing of F12 key starts the cursor walking to the top and then bottom of the file. Rate sate by updatetime. If it's too slow for you put set ut=1000 somewhere in you vimrc, that will make it walk every second. Press F11 to switch direction. (Simply change the mappings if you'd like to use different keys.)\n\nWorks very will with \"Changing Colour\" script. (http://www.vim.org/scripts/script.php?script_id=2658). Coding will now never be boring again."}, {:name=>"color-codes-SQL-keywords-from-Oracle-11g", :summary=>"code update from Alvin Steele", :description=>"Update more function from Alvin Steele"}, {:name=>"FindInNERDTree", :summary=>"Expands NERDTree to file in current buffer", :description=>"!!! THE CURRENT VERSION OF NERDTree ALREADY HAS THIS FEATURE !!!\n\nI.e. you don't need this plugin :)\n\n---\n\nFindInNERDTree is a NERDTree vimscript #1658 plugin that recursively opens the tree to the location of the current buffer. If you jump around source code using ctags, trying to open the tree to where you are can be quite a chore. With this script you can hit a key combination and have the tree immediately pop open to your location.\n\nThe script is also hosted on GitHub:\nhttp://github.com/dmcinnes/FindInNERDTree"}, {:name=>"Speedware", :summary=>"Syntax Highlighting for Speedware", :description=>"Highlights syntax for Speedware/Autobahn II code. Works for viewing spec files and any txt file with the .spw extension. Also allows for syntax highlighting if Vim is set as external editor in Autobahn.\n\nThis is a very rough file, improvements are welcome. I may also be the only one that would actually use this. If you like it or want something changed, please email me at patrick dot rubbs dot regan at gmail dot com."}, {:name=>"perlomni.vim", :summary=>"perl omni completion  (perl-completion.vim)", :description=>"This perl omni completion support basic Moose syntax, variable name (array , hash .. ) completion , class method , object method completion ...etc.\n\nSee screencast:\nhttp://www.youtube.com/watch?v=hZ7871WcIv0\n\n\nplease refers to:\nhttp://github.com/c9s/perlomni.vim\n\n"}, {:name=>"go.vim", :summary=>"Syntax file for the Go programming language", :description=>"Syntax file for the Go programming language.\n\nNOTE: There is already a syntax file in the go repository. You can find it under $GOROOT/misc/vim/go.vim"}, {:name=>"go.vim-B", :summary=>"Syntax file for the Go programming language", :description=>"Syntax file for the Go programming language.\n\nNOTE: There is already a syntax file in the go repository. You can find it under $GOROOT/misc/vim/go.vim"}, {:name=>"github-theme", :summary=>"A gvim colorscheme based on github's syntax highlighting", :description=>"Screenshot: http://i.imgur.com/LJXdy.png\nDiffsplit screenshot: http://i.imgur.com/RKtVD.png\n\nThis is a port of github's lovely light-background syntax highlighting theme.  I tried to make it as comprehensive as possible; it should look good with:\n - Completion menus\n - Diffsplit\n - STL highlighting\n\nIt's not an exact replica, but it's pretty close - enjoy!"}, {:name=>"vimmpc", :summary=>"Manipulate a running mpd daemon from within vim", :description=>"Uploading this old utility due to popular demand (and to promote interest).\n\nAbout\n--------\n\nVimmpc provides functionality for manipulating http://www.musicpd.org/\nfrom within Vim.\n\nMain site: http://gavin.brokentrain.net/projects/vimmpc/"}, {:name=>"exjumplist", :summary=>"Extra commands for jumplist", :description=>"*exjumplist* is a Vim plugin to provide extra commands for |jumplist|:\n\n- Go to the next/previous position in different buffer.\n- Go to the first/last position in jumplist\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-exjumplist\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/exjumplist.html"}, {:name=>"textobj-fatpack", :summary=>"Various text objects in single package", :description=>"*textobj-fatpack* is a Vim plugin to provide many kinds of |text-objects|.  In\nother words, this is a meta package which includes the following plugins to\nprovide various text objects:\n\n|textobj-datetime| 0.3.1 (vimscript#2101)    Date and time\n|textobj-diff|     0.0.0 (vimscript#2415)    Diff hunk\n|textobj-entire|   0.0.1 (vimscript#2610)    Entire buffer\n|textobj-fold|     0.1.2 (vimscript#2275)    Folding\n|textobj-function| 0.1.0 (vimscript#2619)    Function\n|textobj-indent|   0.0.3 (vimscript#2484)    Indented block\n|textobj-jabraces| 0.1.1 (vimscript#2276)    Japanese braces\n|textobj-lastpat|  0.0.0 (vimscript#2355)    Last search pattern\n|textobj-syntax|   0.0.0 (vimscript#2716)    Syntax highlighted item\n|textobj-user|     0.3.8 (vimscript#2100)    For your own one\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-textobj-fatpack\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/textobj-fatpack.html"}, {:name=>"grey2", :summary=>"dark scheme ", :description=>"dark scheme like terminal but not very sharp.\nPreview:\nhttp://photo.blog.sina.com.cn/photo/5bc27867t78c51c25aefd\n\nIt\u0091s designed for XPTemplate :\nhttp://www.vim.org/scripts/script.php?script_id=2611"}, {:name=>"prettyprint.vim", :summary=>"Prettyprint vim variables.", :description=>"*prettyprint* is a Vim plugin to prettyprint vim variable for debug.\n\nExample:\nWhen g:prettyprint_width = 78, you run the following command,\n    :PP {'triangular':[3,6,9,12,15],'squares':[1,4,16,25,36],'pentagonal':[1,5,12,22,35]}\n\nYou get the following display as a result.\n    {\n      'pentagonal': [1, 5, 12, 22, 35],\n      'squares': [1, 4, 16, 25, 36],\n      'triangular': [3, 6, 9, 12, 15]\n    }\n\n\nExample of usage: You try the following command to view the all global variables.\n\n    :PP g:\n\n\nLatest Version:\nhttp://github.com/thinca/vim-prettyprint"}, {:name=>"JumpInCode-new-update", :summary=>"Cscope and tags plugin , build files in your Current directory", :description=>"我喜欢这个插件,我觉得很方便所以我修改了下感谢zuopeng chen提供的脚本\n\n此代码修改于http://www.vim.org/scripts/script.php?script_id=2770 也是自动生成tags和cscope,但它生成的文件是在当前目录/OutDB/下\n\n提示：\n      请确定了你已安装了ctags和cscope， 如果是windows请把ctags.exe和cscope.exe放到$VIM\\vim7* 目录下。\n       ctags 和cscope Win32版： http://code.google.com/p/easy-vim/ \n\n\n--------------------华丽的分界线------------------\n***** 1.03vesion *******\n\ncommand:\n<leader>jc  Generate tags and cscope database from current directory to :\n                    生成当前目录的tags和cscope到:\n\nall OS  //buillding file in Current Directory\nCurrentDirectory(当前目录)/OutDB/cscope.out,tags\n\nother command \n<leader>jst       list existed tags full name and choose tags\n                          列举已存在tags的全路径,选择要使用的tags \n<leader>jsc      list existed cscope database full name and choose cscope.out \n                          列举已存在cscope的数据库的全路径, 选择要使用的cscope.out \n\n----------------------------------------------------------\n\nThanks to zuopeng chen .\nthe code change from http://www.vim.org/scripts/script.php?script_id=2770.\nalso auto build tags & cacope ,but this script build path at CurrentDirectory/OutDB in all OS\n\nAdditional:\n        Please insure you have installed ctags and cscope, Win32 Vim puts ctags.exe and cscope.exe in $VIM\\vim7*\n\n        ctags and cscope for win32 you can download from : http://code.google.com/p/easy-vim/\n\nvim default <leader> is \" \\ \"  :P"}, {:name=>"GNU-as-syntax", :summary=>"GNU as (AT&T) syntax for *86 CPUs", :description=>"This file defines a (almost) complete syntax for GNU as assembler.\n\nMy motivation in writing this was the lack of a complete, working syntax for this\ncommon assembler.\n\nFor now the basic as directives as well as the Intel / AMD instruction sets are included.\nOpcodes supporting a size suffix are recognized plain as well as suffixed with b/w/l/q.\n\n== Supported instructions a per version 0.6:\n\n-- X86 common instruction set (8086 - 686)\n-- Katmai Streaming SIMD instructions (SSE -- a.k.a. KNI, XMM, MMX2)\n-- Introduced in Deschutes but necessary for SSE support\n-- XSAVE group (AVX and extended state)\n-- Generic memory operations\n-- New MMX instructions introduced in Katmai\n-- AMD Enhanced 3DNow! (Athlon) instructions\n-- Willamette SSE2 Cacheability Instructions\n-- Willamette MMX instructions (SSE2 SIMD Integer Instructions)\n-- Willamette Streaming SIMD instructions (SSE2)\n-- Prescott New Instructions (SSE3)\n-- VMX Instructions\n-- Extended Page Tables VMX instructions\n-- Tejas New Instructions (SSSE3)\n-- AMD SSE4A\n-- New instructions in Barcelona\n-- Penryn New Instructions (SSE4.1)\n-- Nehalem New Instructions (SSE4.2)\n-- AMD SSE5 instructions\n-- Intel SMX\n-- Geode (Cyrix) 3DNow! additions\n-- Intel AES instructions\n-- Intel AVX AES instructions\n-- Intel AVX instructions\n-- Intel Carry-Less Multiplication instructions (CLMUL)\n-- Intel AVX Carry-Less Multiplication instructions (CLMUL)\n-- Intel Fused Multiply-Add instructions (FMA)\n-- VIA (Centaur) security instructions\n-- AMD XOP, FMA4 and CVT16 instructions (SSE5)\n-- Systematic names for the hinting nop instructions\n\nYou can set different highlighting for each set listed above by adding a line like this to you .vimrc:\n\nhi def link gasOpcodeX86_PENT_SSE  <some_highlighting>\n\nscreenshot here: http://skitch.com/shirkrin/neq8c/gnu-as-syntax-for-vim\n\n== per-file opcode enable / disable\n\nSince version 0.6 it is possible to disable sets of opcodes by either CPU they where introduced in or by their extension name.\nThis is done by setting a special variable recognized by gas.vim to the list of disabled opcodes.\n\nE.g.\n\n\" globally disable all x86_64 opcodes\n:let g:gasDisableOpcodes='x86_64'\n\n\" disable SSE and SSE2 for this buffer\nlet b:gasDisableOpcodes='sse sse2'\n\nDisabled opcodes will be highlighted as errors.\n\nrecognized CPU groups:\n           186, 286, 386, 3862, 486, 8086, amd, future, ia64, katmai, nehalem,\n            p6, pentium_m, pentium, prescott, sandybridge, x64, x642, x86_64\n\nrecognized extension groups:\n           base, 3dnow, mmx, mmx2, sse, sse2, sse3, ssse3, sse4.1, sse4.2, sse4a,\n           sse5, avx, fma, vmx\n\n\nI hope this syntax file will be useful to other people \n  - but don't blame me if it doesn't suit your needs.\n"}, {:name=>"NSIS-syntax-highlighting", :summary=>"NSIS syntax file for NSIS 2.45", :description=>"This is a new syntax file for NSIS 2.45, properly documented as to where in the user manual each keyword comes from as well.  It was based originally on nsis.vim from Vim 7.2 (last edited 12 May 2004), and all keywords were refreshed from the 2.45 user manual.\n\nAll new NSIS syntax is properly supported and highlighted.\n\n(I really think that this should go into the Vim core runtime files as an update to the old script, but I'm not sure about how to go about getting that to happen.)"}, {:name=>"colqer", :summary=>"switch to colemak in insert mode", :description=>"This script allows to quicky switch to Colemak   from a Qwerty keyboard, which is usefull if you are learning Colemak or want to come back to the Qwerty keybinding from a Colemaek keyboard.\n \nThis is a an approximation of the langmap feature, but which works even if your vim version has been compiled with the langmap feature.\n\nDepending of your keyboard layout, this script will either map the qwerty key into Colemak key in insert mode\nor map the Colemak key to qwerty in command mode.\nSo whatever your keyboard is Qwerty or Colemak, you could type text in Colemak and command in Qwerty.\n\nThis script is disabled by default, to activate it, type \\; (on a Qwerty keyboard) or \\o )on a Colemak one).\nMapping:\n<Leader>; toggle script on Qwerty keyboard\n<Leader>o toggle script activation on a Colemak keyboard\n(if you don't know wthat Leader is, it would probably be  \"\\\" in your case, so the mapping are \\; and \\o)\n\nWarning, this script might interfere with your personal mapping, in that case the easiest way to do it is to delete or modify  the problematic mapping/unmapping  lines in the script."}, {:name=>"gemcolors", :summary=>"colorfull theme dark background", :description=>"Example:\nhttp://farm3.static.flickr.com/2564/4127746406_5c93fea0a8_o.png\n\nhttp://farm3.static.flickr.com/2679/4126975329_9c9966d1db_o.png\n\n\nBug report: http://huacnlee.com/blog/vim-color-scheme-gemcolors"}, {:name=>"Go-Syntax", :summary=>"Syntax definitions for Google's \"Go\" language.", :description=>"I am new to syntaxes, but this is a first-attempt at hacking up some Go syntax support.\n\nI started with the existing C syntax file and just hacked it up until it looked ok.\n\nImprovements are welcome."}, {:name=>"fortran_line_length", :summary=>"According to the file extension of a FORTRAN source file, a valid length is set.", :description=>"-*- vim -*-\nFILE: fortran_line_length.vim\nVim plugin\n\nDESCRIPTION:\nAccording to the file extension of a FORTRAN source file, this plugin sets a valid line length.\nAny characters occurring after this column are considered as error, and are matched so by highlighting.\n\nThis plugin is run automatically. But, if you want to use any other valid size for some reason, the commands are available.\n\nFor a screenshot, see\nhttp://caglartoklu.blogspot.com/2009/12/fortran-valid-line-length-plugin-for.html\n\nLAST MODIFICATION: 2010-04-23\n(C) Copyright 2009 Caglar Toklu <caglartoklu[aat]gmail.com>\nMaintained by Caglar Toklu <caglartoklu[aat]gmail.com>\nVERSION: 0.0.3\n\nCHANGELOG:\n- 0.0.3, 2010-04-23\n  - FIX: Loosing the match ID after removing the match in another buffer.\n  - Priority can be customized.\n  - Group name can be customized if necessary.\n  - Script will not load itself if it has been loaded before.\n  - Script is now respecting the script ID to avoid clashes with others.\n- 0.0.2, 2009-12-07\n  - The display format for match is now read from the global variable g:FORTRANMatchDisplayFormat instead of hard coded settings.\n    Now you can adapt it to your favorite colorscheme within VIMRC without modifiying the plugin itself.\n  - The file is saved in UNIX file format instead of Windows.\n- 0.0.1, 2009-11-23\n  - First version.\n\nOPTIONS:\nThese are options that can be customized from your VIMRC:\n- g:FORTRANMatchDisplayFormat\n  The format/color of the matched characters.\n  The default is:\n  let g:FORTRANMatchDisplayFormat = 'guifg=#FF0000'\n- g:let g:FORTRANMatchGroup\n  The name of the match group. Changing this is generally unnecessary, do it if another plugin uses the same group name.\n  The default is:\n  g:let g:FORTRANMatchGroup = 'FortranLineMatch'\n- g:let g:FORTRANMatchPriority\n  The priority, Vim's default is 10.\n  If some other highlighting group shadows this one, or this one is shadowing another one, you can change it.\n  Higher number gives higher priority.\n  The default is:\n  g:let g:FORTRANMatchPriority = 10\n\nUSAGE:\nAll commands defined by this plugin starts with 'FORTRAN'.\nSo, you can type :FORTRAN and press tab to see the available values.\n\nREFERENCES:\nhttp://gnu.huihoo.org/gcc/gcc-3.3.6/g77/Fortran-Dialect-Options.html\nhttp://docs.sun.com/app/docs/doc/805-4939/6j4m0vn6l?a=view"}, {:name=>"Ruby-Single-Test", :summary=>"Runs a single Ruby test under the cursor", :description=>"When a ruby test file with your cursor within a test block, hit\n<leader>.\n(that's <leader><period>) and that test, and only that test, will run in quickfix.\nThat's it!\n\nCurrently only supports Test::Unit and Rspec.  If run on an Rspec describe block it will run all the tests in that block (just using existing spec command-line functionality for that one).\n\nThe script is also hosted on GitHub:\nhttp://github.com/dmcinnes/ruby_single_test"}, {:name=>"OmniTags", :summary=>"This plugin can help you to maintenance tags file.", :description=>" 12 \"   This plugin can help you to maintenance tags file.\n 13 \"\n 14 \"   There are 3 commands:\n 15 \"\n 16 \"     1. :OmniTagsLoad /path/to/tags-file\n 17 \"\n 18 \"     Load the tags-file and generate a list of source files indexed by\n 19 \"     tags-file.\n 20 \"\n 21 \"     If tags-file doesn't exist, it can create a null file automaticlly.\n 22 \"\n 23 \"     Once tags-file are loaded, every buffer-write event will trigger a\n 24 \"     re-index operation on current file if current file exists in tags-file.\n 25 \"\n 26 \"     The re-index operation will do:\n 27 \"       a) delete tags of current file from tags-file.\n 28 \"       b) call \"ctags -a\" command add the tags of current file to tags-file.\n 29 \"\n 30 \"     Therefor, your tags-file will always updated.\n 31 \"\n 32 \"     Don't mind the speed of re-index operation, it is indetectable while\n 33 \"     the tags-file size small than 20MiB.\n 34 \"\n 35 \"     2. :OmniTagsUpdate {file1} {file2} ...\n 36 \"\n 37 \"     Update the tags-file loaded before, you can specify many files and use\n 38 \"     wildcards(see \":h wildcards\"), \"wildignore\" option(see \"h: wildignore\")\n 39 \"     also influences the result of wildcards parsing.\n 40 \"\n 41 \"     If files are not in tags yet, the plugin will add those files to tags,\n 42 \"     if files already exists, the plugin will update them.\n 43 \"\n 44 \"     You can specify no files, for re-index all files that already indexed.\n 45 \"\n 46 \"     3. :OmniTagsUnload\n 47 \"\n 48 \"     Just an oppsite of :OmniTagsLoad, usually needs not be called by human."}, {:name=>"FindMate", :summary=>"Find files in your whole system or current directory", :description=>"FindMate provides a convenient way (at least for me) to quickly find the\nfiles you want. It uses the locate and file commands to achieve its goal\n(vimgrep on windows). \n\nOriginality it was released by Manuel Aguilar and Victor Guardiola but since I\ncouldn't reach neither of them I decide to upload it by myself (and add some\ndocumentation) because I consider that this script could help someone else.\n\nThe original script can be still found at\n\nhttp://snipt.net/voyeg3r/findmate-plugin-for-vim/\n\nYou can launch FindMate by typing:\n\n    ,, File_name (two commas)\n\nOr\n\n    :FindMate File_name\n\nThe shortcut can be redefined by using:\n\n    map your_shortcut   <Plug>FindMate"}, {:name=>"signature_block.vim", :summary=>"Add and manipulate signature blocks in e-mails", :description=>"signature_block.vim is a simple plugin for adding and manipulating signature blocks in e-mails.\n\nIt provides handy functions that can be called from maps or autocommands.\n\nThere are other scripts offering similar functionality, see vimscript #45 or vimscript #10 or vimscript #509 but signature_block.vim is easier to understand and it can be easily extended."}, {:name=>"record-repeat.vim", :summary=>"Repeat sequences of commands", :description=>"Automagically record and repeat a sequence of commands using the [count]@(<command>) mapping.\n\nFor example: 5@(jj) will move the cursor down 10 lines. This is similar to qajjq4@a but hopefully easier to type and understand."}, {:name=>"php.vim--Garvin", :summary=>"PHP syntax file updated for PHP 5.3", :description=>"This is an updated version of the php.vim syntax file distributed with VIM. The list of PHP constants, functions, and classes was updated to be current with PHP 5.3. Many new classes were added in the 5.2 branch and the distributed version only covers up to 5.1.4. In addition I simplified the file, removing several sections that are not often used (at least by me) such as automatic folding of all control structures and ASP tags support. I also removed several switches designed for b/c with VIM 5.X and 6.X. As an addition I have included the PHP file I used to generate the constant, function, class list. It uses reflection to mine out these items from your PHP installation and generate part of the php.vim script. Before running open up the file and adjust the output file location and the list of extensions to generate syntax for. Then run \"php php_vimgen.php\" from your shell."}, {:name=>"signal_dec_VHDL", :summary=>"Defines internal signals in VHDL", :description=>"This utility defines an internal signal in VHDL. It map the function to key combination ,,. Within the architecture region, do ,, in visual mode and you will be prompted for the length of the signal. Only works for std_logic and std_logic_vector."}, {:name=>"HTML-menu-for-GVIM", :summary=>"my HTML menu with Tag I use often", :description=>"This is my personal Html menu for GVim. I started to write it for 6.x release and updated it everytime I needed ;)\nIt includes :\n\n* a \"new blank Html\" feature, \n* all Heading tags, \n* formatting text with tags most used (not all...) and font/color tags, \n* function to insert Tables, List Item, special chars\n* option to indent source page \n\nand more...\n"}, {:name=>"spinner.vim", :summary=>"fast buffer/file/tab/window switching plugin with only 3 keys.", :description=>"Introduction:\na basic idea is easy pressable key,\nand quickly switchable search type .\n\nBasic Usage:\nDefault defined key map is\n    <C-CR>     open next item .\n    <S-CR>     open previous item .\n    <C-S-CR>   switch spinner.vim search mode .\n\nspinner.vim search mode is switching, when you press <C-S-CR>.\nDefined search mode is\n    1. open next/previous buffer (initial) .\n    2. open next/previous file in currently opened file directory .\n    3. open next/previous most recently edited file (last 10 files) .\n    4. open next/previous tab .\n    5. open next/previous window .\n    6. open next/previous quickfix line .\n    7. open next/previous quickfix file .\n\nSpinner Search Mode Details:\n1.open next/previous buffer (initial) .\n    <C-CR> open next buffer.\n    <S-CR> open previous buffer.\n  same with :bnext, :bNext .\n\n2.open next/previous file in currently opened file directory .\n    <C-CR> open alphabetically next file.\n    <S-CR> open alphabetically previous file .\n  opening files are searched in currently opened file directory.\n\n  current test version use code from\n  nextfile : open the next or previous file\n  (vimscript #2605)\n\n3.open next/previous most recently edited file (last 10 files) .\n    <C-CR> open alphabetically next file.\n    <S-CR> open alphabetically previous file .\n\n  recently edited file path are stored at openinig file (limit 10 item).\n  stored file is placed at\n      $HOME/.vim_spinner_mru_files , or\n      $VIM/.vim_spinner_mru_files , or\n      $USERPROFILE/_vim_spinner_mru_files .\n\n  current test version use code from\n  mru.vim : Plugin to manage Most Recently Used (MRU) files\n  (vimscript #521)\n\n4.open next/previous tab .\n    <C-CR> go to next tab.\n    <S-CR> go to previous tab.\n  same with :tabnext, :tabNext .\n\n5.open next/previous window .\n    <C-CR> move cursor to next splitted window.\n    <S-CR> move cursor to previous splitted window.\n\n6.open next/previous quickfix line .\n    <C-CR> go to next error in quickfix list.\n    <S-CR> go to previous error in quickfix list.\n  same with :cnext, :cNext .\n\n7.open next/previous quickfix file .\n    <C-CR> go to next error file in quickfix list.\n    <S-CR> go to previous error file in quickfix list.\n  same with :cnfile, :cNfile .\n\nOther Usage:\nswitch search mode with number.\n    1<C-S-CR>  set switch spinner.vim mode to buffer type.\n    2<C-S-CR>  set switch spinner.vim mode to same_directory_file type.\n    3<C-S-CR>  set switch spinner.vim mode to most_recently_edited type.\n    4<C-S-CR>  set switch spinner.vim mode to tab type.\n    5<C-S-CR>  set switch spinner.vim mode to window type.\n    6<C-S-CR>  set switch spinner.vim mode to quickfix type.\n    7<C-S-CR>  set switch spinner.vim mode to quickfix_file type.\n\nthis key map display current spinner search mode.\n    <A-CR>     display current spinner mode .\n    <M-CR>     display current spinner mode .\n\nConfigurations:\nAction Key Map:\n    let g:spinner_nextitem_key = {mapping}\n    let g:spinner_previousitem_key = {mapping}\n    let g:spinner_switchmode_key = {mapping}\n    let g:spinner_displaymode_key = {mapping}\n\n    for example,\n    let g:spinner_nextitem_key = ',n'\n    let g:spinner_previousitem_key = ',p'\n    let g:spinner_switchmode_key = ',s'\n    let g:spinner_displaymode_key = ',d'\n\ncaution!!\n    default mapping is for GUI. default mapping do not work on\n    Windows DOS prompt, PowerShell, Mac OSX Terminal,,,\n\nInitial Search Type:\n  let g:spinner_initial_search_type = {seach type number}\n\n  for example,\n  let g:spinner_initial_search_type = 2\n\n      1 : buffer (default)\n      2 : same_directory_file\n      3 : most_recently_edited\n      4 : tab\n      5 : window\n      6 : quickfix\n      7 : quickfix_file\n\nSource Repository:\n    https://code.google.com/p/spinner-vim-plugin/\n"}, {:name=>"RDoc", :summary=>"Syntax highlight for Ruby Documentation", :description=>"Visit http://github.com/hallison/vim-rdoc for more information about this plugin/syntax."}, {:name=>"XPstatusline", :summary=>"statusline with many infomation", :description=>"statusline config of grey2 colortheme : http://www.vim.org/scripts/script.php?script_id=2859;\n\n\nPreview : http://photo.blog.sina.com.cn/photo/5bc27867t78c51c25aefd;"}, {:name=>"rc.vim", :summary=>"syntax highlight file for the rc shell scripting language", :description=>"This is a syntax file for the rc shell scripting language.  \n\nCredits\n\nMost of the work is done by Andy.  I have only made some minor changes to make this syntax highlight works with Byron Rakitzis' reimplementation.\n\nFor unix (not plan9) users, there are two slightly different rc available.  One is plan9port's version and the other is Byron Rakitzis' (as packaged by Debian and other *nix software distribution).  This syntax file is compatible with both versions.  (There is a minor tradeoff: less powerful `(ba)sh like substitution` syntax error detection. For a pure syntax file\" for p9p, see: http://lug.rose-hulman.edu/svn/misc/trunk/config/spenceal/vim/ )\n\nBug Report: http://bitbucket.org/weakish/weakishscripts/issues/\n\nTips for using rc shell in Vim (this is not related to syntax directly, but I think users who codes rc shell script in Vim may have interests):\n\nAdd the following lines to your .vimrc:\n\nset shell=/usr/bin/rc\\ -l\n\"  or /bin/rc or /usr/local/bin/rc or /opt/local /bin/rc, etc\nset shellcmdflag=-c\nset shellpipe=>[2=1]\\|\\ tee\nset shellredir=>%s\\ >[2=1]\n\n"}, {:name=>"mib_translator", :summary=>"Translate SNMP OIDs from within Vim", :description=>"FILE: mib_translator.vim\nVim plugin\n\nThis plugin allows you to translate the SNMP OIDs from within Vim.\n\nScreenshot for version 0.0.3:\nhttp://dl.dropbox.com/u/3027364/mib_translator/mib_translator0.0.3_a.png\n\nYou can see a screenshot of the plugin(0.0.1, uncolored unlike the newer ones) in the following link.\nhttp://caglartoklu.blogspot.com/2009/12/snmp-oid-translator-plugin-for-vim.html\n\nAUTHOR:\n  Caglar Toklu caglartoklu[aat]gmail.com\n  http://caglartoklu.blogspot.com/\n\nLICENSE:\n  Copyright (C) 2009  Caglar Toklu\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see http://www.gnu.org/licenses/.\n\nCHANGELOG:\n0.0.4, 2010-04-12\n- Fixed: If the opened buffer is deleted by hand, that raised an error when the buffer is opened again.\n0.0.3, 2010-04-12\n- Fixed: Opened buffer remained unmodifiable for the second run.\n0.0.2, 2010-04-12\n- The opened buffer is colored with MIB file syntax, making it more readable.\n- The opened buffer is not modifiable from now on.\n- Made it more compatible with other plugins, the functions starts with 's:'.\n0.0.1, 2009-12-04\n- First version with forward and reverse OID translation\n\nCOMMANDS:\n  :OidReverseTranslate <oidName>\n    Displays the OID information if the OID name is given. This is the reverse translation.\n    :OidReverseTranslate ipv6MIB\n  :OidTranslate <oidNumber>\n    Displays the OID information if the OID number is given. This is the forward translation.\n    :OidTranslate .1.3.6.1.2.1.55\n\nUSAGE:\n  You can use the plugin as the COMMANDS section shows.\n  Note that you do not have to open a MIB file to use this plugin.\n  It will work anyway, but if you open a MIB file, you can use as:\n    1. Get the cursor to a OID name, for example ipv6MIB.\n    2. Type : to get to command mode.\n    3. Type OidReverseTranslate\n    4. Type <space>\n    5. Type <C-r> <C-w>\n    6. Press <enter>\n\n\nCONFIGURATION:\n  The options are:\n\n  g:OidTranslatorBufferName:\n    The name of the MIB translator buffer.\n    The tranlated values will be displayed here.\n    There is no need to change this if there are no clash with another plugin.\n    Default is 'OIDTranslator'.\n\n  g:OidTranslatorBufferSize:\n    The size of the buffer. It is the line count. If your screen is small, you can reduce the this size, or if your screen is huge, you can raise this number.\n    Default is 10.\n\n  g:SnmpTranslatePath:\n    The executable path of the snmptranslate command of Net-SNMP.\n    If the bin folder is in your path, no need to change this setting.\n    If it is not, set this option from your VIMRC.\n    The value must the path to the executable, not the directory including the executable.\n    For example, a valid value is:\n    let g:SnmpTranslatePath = 'C:\\\\usr\\\\bin\\\\snmptranslate.exe'\n    The default value is 'snmptranslate', so that it can directly run without modification if snmptranslate is included in a directory on path.\n    Note that if Net-SNMP is not on the path, even though you define this option correct, snmptranslate itself can have difficulties to find the MIB files, so it is recommended to keep it on the path and not changing this option.\n\nREQUIREMENTS:\n  - Net-SNMP package must be installed on your system.\n    http://net-snmp.sourceforge.net/\n    It is also strongly recommended to add 'C:\\usr\\bin' to the path in Windows.\n"}, {:name=>"Markdown", :summary=>"Syntax highlight for Markdown text files", :description=>"See the script http://www.vim.org/scripts/script.php?script_id=1242.\n\nThis is a new version and distribution of the Markdown syntax highlight. Visit http://github.com/hallison/vim-markdown for more information about this plugin/syntax.\n"}, {:name=>"growlnotify.vim", :summary=>"growlnotify wrapper for vim script.", :description=>"see: http://github.com/c9s/growlnotify.vim"}, {:name=>"JavaAspect", :summary=>"A script that generates aspect template for Java.", :description=>"Most of the popular aspect programming models in java, either introduce new language keywords or heavily use reflection and xml to achieve the goal.  This script takes a different approach, it generates the aspect boilerplate at the source code level without the extra effort to learn new programming framework.  The generated code can be used as a decorator to wrap around the real object, thusly working as an aspect.  Besides basic OO concepts, It has no fancy names to pollute your brain, it just lets you concentrate on your real work.  "}, {:name=>"gsession.vim", :summary=>"global session manager (improved)", :description=>"gsession.vim provides global namespace and current path namespace for you to save session. so if you save session with the same name in different space, it won't conflict.\n\ngsession.vim also provides anonymous sessions , so you don't need to think about session name , gsession.vim saves time for you.\n\ngsession.vim saves your session files into the same directory (~/.vim/session/) by default. and auto-detect your session file to load session file when you are opening vim editor without arguments. you can also define your session dir by g:session_dir option.\n\ngsession.vim also save your session file when you are leaving vim editor.\n\ngsession.vim also support making a local session file <leader>sS, which is just like :mksession! command. but you can define your favorite session filename."}, {:name=>"cgc.vim", :summary=>"A compiler description for nVidia cg compiler", :description=>"An error format parsing for cg programs"}, {:name=>"manuscript", :summary=>"Dark colorscheme", :description=>"GUI only dark colorscheme. No bolds and italics.\n\nScreenshots: http://habamax.ru/myvim/index.html#manuscript"}, {:name=>"CodeOverview", :summary=>"Display a graphical overview of code alongside a gvim window.", :description=>"Demonstration video : http://www.youtube.com/watch?v=vQqeAk__vvE\n\n/!\\ /!\\\nThis plugin is tested on vim 7.2 with patches up to 264,\nit may not work with previous versions!\nup-to-date compiled vim versions for windows can be found here :\nhttp://sourceforge.net/projects/cream/files/Vim\n/!\\ /!\\\n\nTo use this plugin, you must :\n- Be running on Windows with .net Framework >= 3.0\n- use gVim version >= 7.2 (possibly with some patches)\nthen launch gvim and type the following commands to start the plugin :\n:ShowCodeOverview\n:CodeOverviewAuto \n:SnapshotFile\n\nBy default the automatic overview generation is deactivated to avoid\nhurting performances. If you always want CodeOverview, put the first two\ncommands in your .vimrc. The last command is just to force refresh for\nyour current file.\n\nUsage :\n======\n:ShowCodeOverview \n    Start the overview panel.\n\n:HideCodeOverview \n    Hide the overview panel\n    Also stop automatic overview generation.\n\n:CodeOverviewNoAuto \n    Disable automatic overview generation.\n\n:CodeOverviewAuto \n    Setup automatic overview generation.\n\n:SnapshotFile \n    Refresh your current overview.\n\nAs some requested, Here's the code source of binary parts, it's a little messy, sorry :\nhttp://github.com/Twinside/CodeOverview\n\nKnown problems :\n==============\n- View doesn't really track vim scrolling\nIt's the current trade-off between performance and functionality."}, {:name=>"bluechia.vim", :summary=>"A dark color scheme for GUI", :description=>"A dark color scheme for GUI. \n\nScreenshot: http://f21.aaacafe.ne.jp/~crux/bluechia.html"}, {:name=>"slurper.vim", :summary=>"Provides vim features for .slurper files.", :description=>"Description\nslurper.vim was written as a companion to the slurper gem (http://github.com/hashrocket/slurper). The slurper gem allows you compose stories in a plain text file and then slurp them into Pivotal Tracker through the api in bulk. You will need to install the slurper gem for slurper.vim to be useful.\n\nslurper.vim turns on spell check and provides macros for generating story templates in the correct format to speed up your story writing even further. It also provides syntax highlighting and indenting for .slurper files.\n\nIf you find slurper.vim useful or have suggestions please let me know. Constructive input is greatly appreciated.\n\nInstallation\nDownload the packaged file from www.vim.org/scripts/script.php?script_id=2890 extract and copy the slurper.vim files into their corresponding folders within your .vim directory.\n\nAlternately my preferred method of installing vim plugins is to use Tim Pope's pathogen.vim plugin (http://www.vim.org/scripts/script.php?script_id=2332) and git clone plugins into my ~/.vimbundles directory.\n\nUsage\nCTRL-h generates a new chore and puts you in insert mode on the name line.\n\n==\nstory_type:\n  chore\nname:\n\ndescription:\n\n\nlabels:\nCTRL-j generates a new feature and puts you in insert mode on the name line.\n\n==\nstory_type:\n  feature\nname:\n\ndescription:\n  In order to\n  As a\n  I want\n\n  -\n\nlabels:\n\n\nCTRL-k generates a new release and puts you in insert mode on the name line.\n\n==\nstory_type:\n  release\nname:\n\ndescription:\n\n\nlabels:\n\n\nCTRL-l generates a new bug and puts you in insert mode on the name line.\n\n==\nstory_type:\n  bug\nname:\n\ndescription:\n\n\nlabels:\n\n\nThe macros work the same in insert or edit modes. They also work anywhere in a story file.\n\nStory Folding\nWe found that frequently we wanted to see just a list of all of the features in our file. To do this you can use the built in code folding key strokes.\n\nClose all folds (Show just story names)\n\nzM\nOpen all folds (Show full stories)\n\nzR\nFor more on folding in Vim check out\n\n:help folding"}, {:name=>"create_start_fold_marker.vim", :summary=>"create start fold marker with level number", :description=>"This plugin helps insert start fold markers with level numbers: {{{1, {{{2, {{{3, and so on. It creates the following global mappings for Normal and Visual modes:\n\n<Leader>fm         Create start fold marker with level number. It is apppended to the end of current line. The level is set to that of the previous start fold marker with level number (if any). The start fold marker string is obtained from option 'foldmarker'.\n\n<Leader>fM         Create fold marker as child: level number is incremented by 1.\n\n<Leader>cm         Create fold marker as comment according to buffer's filetype.  E.g., if filetype is html, <!--{{{1--> is appended. Dictionary s:commentstrings defines comment strings for a few filetypes.  For all other filetypes, comment strings are obtained from option 'commentstring'. If comment strings are not what you want, you can edit dictionary s:commentstrings.\n\n<Leader>cM         Create fold marker as comment and as child.\n"}, {:name=>"doubleTap", :summary=>"Double Tap Certain Characters to insert and jump out of character pairs.", :description=>"This plugin provides an easy, way to insert matching pair characters, ie: [],(),'', and not so matchy characters like + and . , common concatenation characters.\n DoubleTap also provides a quick and easy way to terminate a line no matter where on the line the cursor is. \nFor instance a double semicolon, ;;, will trim all of the white space at the end of the line and insert a semicolon at the end of the current line.\nDoubleTap provides some simple abstraction functions to do the more intricate work and then provides default mappings to wire those functions to characters,pairs and events. You can easily use the core functions provided by doubleTap to create your own mappings and behaviours.\n"}, {:name=>"filetype-completion.vim", :summary=>"filetype completion", :description=>"\nFiletype Completion\n===================\n`setfiletype` command doesn't provide completion. this plugin provides a way\nfor you to set filetype with a command which supports completion. just type:\n\n    :sft\n\nor \n\n    :setf\n\n`:sft` or `:setf` will simply expand to SetFiletype command.\n"}, {:name=>"vikitasks", :summary=>"Search viki files for tasks and display them in a list", :description=>"vikitasks is a distributed todo lists manager. It provides a quick \noverview of priority/task lists maintained in several viki files. \nDepending on your settings, you can quickly search all \"homepages\" \nof intervikis or search only project-specific files. Buffers \ncontaining task lists are added to the list of vikitasks. There is \nalso an option to view a list of current tasks on startup.\n\n\nUsage:\n    :VikiTasks[!] [CONSTRAINT] [PATTERN] [FILE_PATTERNS]\n\n\nFeatures:\n    - Collect tasks from viki's priority lists (see |viki-tasks|)\n    - Sort those tasks\n    - Browse tasks with a given date\n    - Optionally browse all tasks (incl. those without a date)\n\n\nLet's say you have the files:\n\nfoo.txt: >\n    * Foo\n        #A 2009-12-13 Do this\n        #C 2009-12-20 :call @Anna What was it she wanted to tell me?\n        #A Whatever\n\nbar.txt: >\n    * Bar\n        #C 2009-12-24 :call @Bernie Wish him good luck\n        #D 2009-11-01 Do that\n\nLet's assume you have added both files to |g:vikitasks#files|. Switch to \nthe buffer foo.txt and call >\n\n    :VikiTasks!\n\nand you get the following list: >\n\n    Bar.txt|2| #D 2009-11-01 Do that\n    Foo.txt|2| #A 2009-12-13 Do this\n    Foo.txt|3| #C 2009-12-20 Call @Anna\n    Bar.txt|3| #C 2009-12-24 Wish @Bernie good luck\n\nIf you do/had done this on the 15 December 2009, the third line would be \nhighlighted, i.e. the entries above the cursor refer to passed/missed \nevents. If you had called :VikiTasks! (behold the bang), then the \n\"Whatever\" entry would have been included in the list too.\n\nIf you had called >\n    \n    :VikiTasks current\n\nonly the first two items would be listed.\n\nThis week's tasks (i.e. the tasks that should be accomplished today or \nwithin the following six days) could be listed with >\n    \n    :VikiTasks 6\n\n\nAlso available via git\nhttp://github.com/tomtom/vikitasks_vim"}, {:name=>"PyPit", :summary=>"Python version of pitconfig.vim", :description=>"You can put configurations such as passwords or user names out of vimrc.\n\nWhen you want to backup vimrc into public repository service such as GitHub, you may put secret informations out of vimrc.\nBut how?\n\npypit.vim (and its parents, pitconfig.vim and rbpit.vim) can.\n\nAs pitconfig.vim requires Perl interface, and rbpit.vim requires Ruby interface, pypit.vim requires Python interface."}, {:name=>"open-terminal-filemanager", :summary=>"Open native terminal , file manager app for various platforms", :description=>"Some vim user want to shell like emacs's eshell. But vim don't support shell, \nterminal interface in vim (at least  7.x version). \n\nIn this situation, I try some terminal patches or shell attached plugins. But everyone don't perfectly emulate native terminal or have much dependencies. So I use simple native terminal and filemanager open script for my various platforms. \n\n\n\nCommmands \n    :OpenTerminal              Open native terminal sw. \n    :OpenFilemanager        Open native file manager. \n\n\n\nKey map recommendations (I'm using) \n   nnoremap <silent> <F9> :OpenTerminal<CR> \n   nnoremap <silent> <F10> :OpenFilemanager<CR><CR> \n\n\n\nTested platform \n * Mac  ~ Terminal.app,      finder\n  * MacVim\n * Windows 7 64bit, XP ~cmd.exe , explorer \n  * [portable] gVim\n * Gnome  ~ gnome-terminal,  nautilus\n  * gVim\n\nThis is very simple script. If plugin show wrong operation feedback to me. I can't test in windows xp, KDE etc  :)\n "}, {:name=>"Chrysoprase", :summary=>"A dark-on-light colour scheme", :description=>"Chrysoprase is a Vim colour scheme influenced by the github.com default syntax highlighting colour theme.  \n\nScreenshots:\n\nHaskell with two vertical windows: http://users.jyu.fi/~anhekalm/misc/chrysoprase1.png\nPHP with TagList and NERDTree: http://users.jyu.fi/~anhekalm/misc/chrysoprase2.png\n\n(Font used is DejaVu Sans Mono 12pt with GDI++ font enhancements on Windows 7.)"}, {:name=>"circos.vim", :summary=>"Syntax file for Circos visualization program conf files", :description=>"Circos http://mkweb.bcgsc.ca/circos is a visualization program for genes, but can also be used for anything you would like to visualize as a circle with relationships.\n\nThis syntax file helps edit circos.conf, ideogram.conf and ticks.conf."}, {:name=>"TxtBrowser", :summary=>"Browse plain text easily(show the title tag and syntax highlight)", :description=>"\nThe \"TxtBrowser\" plugin is a plain text browser plugin for Vim and provides the\nfollowing features to allow you to efficiently browse through plain text\nfiles(for example RFCs). Chinese intruction is available at(中文介绍请访问):\n\nhttp://guoyoooping.blog.163.com/blog/static/1357051832009112910162389/\n\n1. Title tag list: Show an overview of the structure of plain text and list all\nthe titles in the taglist windows, you can jump to them just by clicking. Use\n\":Tlist\" command to open the taglist and use \":TlistUpdate\" to update the\ntaglist after modification. \n\n2. Syntax highlight: highlight the key element in your plain text. This include\nthe title, URLs, keywords you defined(default is TODO, ERROR, etc), Words in\nbracket, etc. Syntax hightlight would be auto loaded after install. Snapshot of\nfeature 1 and 2 are available at:\n\nhttp://guoyoooping.blog.163.com/album/edit/#m=1&aid=193892890\n\n3. Browser Utilities(use \":help txt-howto\" for details): \n\n<Leader>s: Search text under cursor(or selected) through search engine(google).\n<Leader>f: Find text under cursor(or selected) through web dictionary(www.dict.cn).\n<Leader>g: Goto the URL under cursor(or selected).\n<Leader>h: Highlight the word under cursor(or selected), it's easy and\n\t            simple, for more powerful highlight, You could refer to\n\t            txtfmt(vimscript #2208)\n*: Search forward for the word under cursor(or text selected).\n#: Search backward for the word under cursor(or text selected)."}, {:name=>"gitolite.vim", :summary=>"Syntax highlight for gitolite configuration", :description=>"Syntax highlight for gitolite (http://github.com/sitaramc/gitolite) configuration file \"gitolite.conf\".\n\nSource: http://github.com/tmatilai/gitolite.vim"}, {:name=>"ShowFunc.vim--nianyang", :summary=>"Show the function's define.", :description=>"This plugin can show the function's define where the cursor at when you type \"fd\".\nWell,You can also type \"(\" after a functionname,then the define will show in the command line.\n\nAfter all:\nThis plugin supports types such as cpp,c,java,c# with Exuberant Ctags.\n\nMy home page: http://www.vimer.cn ,and willcome.\n"}, {:name=>"AuthorInfo", :summary=>"You can add your author info in any source files,such as cpp,c,java,and c#.", :description=>"You can add your author info in any source files,such as cpp,c,java,and c#.\nLike this:\n/*=============================================================================\n#\n#   Author: \t\tDanteZhu - dantezhu@vip.qq.com\n#\n#   HomePage: \t\thttp://www.vimer.cn\n#\n#   Last modified:\t2009-12-27 19:19\n#\n#   Filename:\t\t\n#\n#   Description: \t\n#\n=============================================================================*/\n\nwhen you type <F4>,this will add in the head of your source file,and when you type <F4> again,It will update automatically.\n\nMy homepage is http://www.vimer.cn,and wellcome。"}, {:name=>"Cfengine-3-ftplugin", :summary=>"Abbreviations and other help for Cfengine 3 files", :description=>"Abbreviations and other help for Cfengine 3 files"}, {:name=>"Cfengine-version-3-syntax", :summary=>"Cfengine 3 syntax highlighting", :description=>"Cfengine 3 syntax highlighting"}, {:name=>"vim-addon-manager", :summary=>"manage and update plugins easily", :description=>"Note:\nThere is also  http://packages.debian.org/sid/vim-addon-manager\nwhich servers a similar purpose but is Debian specific.\nI chose the same name by accident.\n\nusage example:\n\nset runtimepath+=~/path-to/vim-plugin-manager\ncall scriptmanager#Activate([\"vim-haxe\",\"The_NERD_tree\",\"vim-latex\"])\n\nOn startup you'll be asked for confirmation that vim may install the plugin for you.\n\nHow to quickly install a plugin and see whether it does what you want?\n:ActivateAddons <c-d>vim-latex\n:UninstallNotLoadedAddons vim-latex\n\nThis script should be kept as simple as possible.\n\nIt's main task is to fetch Vim plugins putting each into its own directory.\nThose directories are added to runtimepath for you.\nA plugin can depend on other Vim plugins. Those dependencies are fetched as well.\n\nScripts are updated by running git pull, svn up etc.\n\nI recommend installing this plugin using\ngit clone git://github.com/MarcWeber/vim-addon-manager.git\n(project page): http://github.com/MarcWeber/vim-addon-manager\n\nso that it's easier for you keeping it up to date.\n\nNote: I wrote this plugin to make your and my life easier.\nHelp my improving it by sending feedback!\n\nCredits to Tim Pope who sent first patches!\n\nNote: I setup a cron job which updates the \nvim-plugin-manager-known-repositories once a day automatically.\nEnjoy!\n\nsimilar work:\n=======================\nThis script servers a similar purpose:\nhttp://github.com/c9s/Vimana\n\nvim-addon-manager differs:\n* it installs each plugin into it's own directory.\n   (I'm sure it's easy to patch Vimana to do the same)\n* You can activate / install plugins at runtime as needed using the\n    ActivateAddons command\n   This is nice because plugins can have optional dependencies which\n   are loaded when required only !\n* cause it's written in VimL you only need these dependencies:\n  - curl\n  - git   (recommended)\n  - svn (for vim-latex)\n\nTry both tools. Use whatever serves you best!"}, {:name=>"Vim-Condensed-Quick-Reference", :summary=>"Vim quick reference in LaTeX, PDF and PS formats", :description=>"This a condensed quick reference on Vim commands and options. I tried to squeeze as many as possible into two-sided A4.\n\nIt is not user manual or guide, just a reference. For notation see the last column.\n\nPlease send your feedback to sergey.khorev@gmail.com"}, {:name=>"hlint", :summary=>"Compiler definition for the hlint (haskell checker) tool", :description=>"hlint is an haskell code source checker, producing many warnings/recommendations. This script allow to vim to parse it's output and then jumping directly to pointed locations.\n\nTo use it :\n:comp hlint"}, {:name=>"Enhanced-Ex", :summary=>"Improve your efficiency in ex-mode", :description=>"Improve your editing efficiency when in ex-mode.\n\nThis plugin provides a collection of functions and mappings to help you increase your productivity on the command-line. Functions include:\n- Reverse search your ex history using regular expressions,\n- Zap to any previously typed character,\n- Capture all ex output in a *Messages* buffer for processing, just like in Emacs,\n- and more."}, {:name=>"Flex-Development-Support", :summary=>"Flex development support, ftplugin, indent, syntax, code completion, ...", :description=>"Adobe Flex is a highly productive, free open source framework for building and maintaining expressive web applications that deploy consistently on all major browsers, desktops, and operating systems.  Flex applications can be built using the free Flex SDK (http://www.adobe.com/cfusion/entitlement/index.cfm?e=flex3sdk).\n\nHere is a snippet from :h flex.txt (after installing).\n\nThis document outlines the various features the Vim Flex Development Support suite provides and how to interact with it to enhance the Vim development experience for Flex applications.\n\n1. Overview\n2. Filetypes\n3. Navigation\n    3.1 Matchit\n    3.2 Text Object Motions\n    3.3 Macros\n    3.4 Imports\n4. OMNI MXML Completion\n5. Compilation\n    5.1 mxmlc\n    5.2 Ant \n6. Indenting\n7. Syntax Highlighting\n8. Flex Tutorial\n    8.1 Code Completion\n    8.2 Imports\n    8.3 Compiling\n        8.3.1 mxmlc\n        8.3.2 Ant\n\nEssentially, this suite provides:\n    file type support\n    indent\n    syntax\n    compiler\n    code completion\n    \nSince this is a new project, please post to vim_use with comments and suggestions.  Especially if you are having difficultly getting things working as expected.\n\n\nIf someone knows how to generate a list of classes and the associated methods for ActionScript, please let me know.  I will add code completion for it in addition to the MXML code completion.\n\n"}, {:name=>"restart.vim", :summary=>"Restart your gVim", :description=>"Change Log:\n  0.0.0: Initial upload\n  0.0.1:\n  - Do not restart if modified buffer(s) exist.\n  - etc.\n  0.0.2:\n  - Don't show 'modified buffer(s) ...' when banged.\n  - Add g:restart_save_window_values, g:restart_save_fn.\n  0.0.3:\n  - Add g:restart_vim_progname.\n  - Support MS Windows.\n  - Fix minor bugs.\n\nUsage:\n  Commands:\n      :Restart\n          If modified buffer(s) exist, gVim won't restart.\n          If you want to quit anyway, add bang(:Restart!).\n\n  Global Variables:\n      g:restart_command (default: 'Restart')\n          command name to restart gVim.\n\n      g:restart_save_window_values (default: 1)\n          Save window values when restarting gVim.\n          Saving values are as follows:\n          - &line\n          - &columns\n          - gVim window position (getwinposx(), getwinposy())\n          Before v0.0.1, restart.vim saves above values.\n          So this variable is for compatibility.\n\n      g:restart_save_fn (default: g:restart_save_fn is true: ['s:save_window_values'], false: [])\n          This variable saves functions returning ex command.\n          e.g., in your .vimrc:\n\n              function! Hello()\n                  return 'echomsg \"hello\"'\n              endfunction\n              let g:restart_save_fn = [function('Hello')]\n\n          This meaningless example shows \"hello\" in new starting up gVim.\n          When g:restart_save_window_values is true,\n          this variable is ['s:save_window_values'].\n\n              function! s:save_window_values()\n                  return join([\n                  \\       printf('set lines=%d', &lines),\n                  \\       printf('set columns=%d', &columns),\n                  \\       printf('winpos %s %s', getwinposx(), getwinposy()),\n                  \\   ],\n                  \\   ' | '\n                  \\)\n              endfunction\n\n         As you can see, this function saves current gVim's:\n         - &line\n         - &columns\n         - getwinposx()\n         - getwinposy()\n\n      g:restart_vim_progname (default: \"gvim\")\n         gVim program name to restart.\n\n         FIXME:\n         Under MS Windows, you must not assign .bat file path\n         to this variable. Because cmd.exe appears and won't close.\n\nTODO:\n  - Support vim (Is this possible...?)\n\n\nSee also:\n  WinMove(vimscript#2576)"}, {:name=>"selfdot", :summary=>"type ", :description=>"Vim plugin that lets you type `self.` by pressing `.` in Python files.\n\nTyping `self.` can be annoying, mistyping -- even more.  This plugin\nlets you save keystrokes by expanding `.` into `self.` in places where\nputting a dot is a syntax error (e.g. at the beginning of an indented\nline or right after an operator).  Plugin is disabled in strings and\ncomments in order for you to be able to type `cd ..` and stay sane."}, {:name=>"syntaxGemfile.vim", :summary=>"The syntax file of Gemfile which is used for a RubyGems library \"Bundler\"", :description=>"Highlights some method names for Gemfile."}, {:name=>"spidermonkey.vim", :summary=>"    spidermonkey syntax supports and snippets , reference query.", :description=>"\n    spidermonkey syntax supports and snippets , reference query.\n"}, {:name=>"pep8", :summary=>"Check your python source files with PEP8", :description=>"You need to install this tool: http://github.com/cburroughs/pep8.py\nIt's a simple program that just checks if your python code is pep-8 compliant.\n\nPressing F5 will run it using the \"quickfix\" feature.\nThis way you can \"navigate\" through errors using :cn and other standard commands.\n\nThis is mostly copied from http://www.vim.org/scripts/script.php?script_id=891"}, {:name=>"startup_profile", :summary=>"Profile vim startup", :description=>"With the introduction of the autoload directory, plugins were often \nsplit into several separate files. The downside is that it isn't always \nthat obvious which files are actually loaded on startup.\n\nThis macro creates a CSV file including a list of loaded files during \nstartup and some indicators (number of lines/bytes, timing). You can \nopen this (semicolon-separated) CSV in any spreadsheet application, sort \nthe data etc.\n\nIn order to activate the macro, check the value of g:startup_profile_csv \nin the source code and temporarily insert the following line(s) at the \nbeginning of your |vimrc| file: >\n\n    \" Setting g:startup_profile_csv is optional.\n    let g:startup_profile_csv = \"...\"\n    runtime macros/startup_profile.vim\n\nThe list can serve as a starting point for optimizing your startup time, \ne.g. by delaying certain calls to functions in autoload files or by \nmaking use of the AsNeeded (vimscript #915) or the tplugin (vimscript #2917) \nplugins.\n\nDepending on your system configuration and the speed of your hard drive, \nseeking for files or, e.g., creating menu entries may prove to be costly \nwith respect to startup time.\n"}, {:name=>"extended-help", :summary=>"Simple plugin to open and close help without leaving current window", :description=>"Plugin to open and close help without leaving current window\nIt is mostly useful when you want a quick reference\n\nUse:\n:Help subject - get help using :help command. It opens help window but cursor stays in the current window\n:Help! subject - help with :help! command\n:Help or :Help! - close help window\n"}, {:name=>"tplugin", :summary=>"A plugin loader/runtimepath manager with autoload capabilities", :description=>"This plugin helps users to deal with plugins that are distributed via \nsource code repositories. Usually, you would make those plugins \navailable to vim by adding the local copies of those repositories to \n|runtimepath|. The disadvantage of this approach is that the value of \n|runtimepath| becomes unnecessarily complex and that the plugins are \nloaded on startup.\n\ntplugin scans those plugins for commands and functions. It then amends \nthe |runtimepath| only if a respective command/function/map is called \n(similar to the AsNeeded plugin). This helps to keep your |runtimepath| \nsimple and to improve startup time.\n\nIn order to achieve this goal, plugins are installed in an alternative \ndirectory structure where each plugin (consequently referred to as \n\"repo\") is installed in a subdirectory. tplugin takes care of modifying \n'runtimepath' and of loading the vim script files as necessary.\n\nAlternative directory layout:\n\n    ROOT/\n      repo1/\n        after/\n        autoload/\n        doc/\n        plugin/\n      repo2/\n        after/\n        autoload/\n        doc/\n        plugin/\n      ...\n\nRepos can be enabled (i.e. added to 'runtimepath') either explicitly \nwith the |:TPlugin| command or automatically by calling a command, \nfunction, or by requesting a filetype plugin/syntax/indent file defined \nin a repo -- this is done similar to how AsNeeded autoloads files.\n\nFull docs:\nhttp://github.com/tomtom/tplugin_vim/blob/master/doc/tplugin.txt"}, {:name=>"SpitVspit.vim", :summary=>"Allows multiple files splitting.", :description=>"This is a little script I did because I have always wanted to type\n\n:sp a.cpp b.hpp *.tex......\n\nSo... This does it now!\n\nYou just have to source this file in your vimrc and that will remap sp and vsp abbreviation to my functions, allowing you to type :vsp *.txt\n\nLet me know if you find some bugs ;-)"}, {:name=>"Preamble", :summary=>"Automatically folds long licensing and copyright preambles that head sources.", :description=>"This plugin will automatically fold long preambles, such as GPL copyright\nnotices, located at the head of source files.  You may find it helpful if,\nlike me, you use syntax folding infrequently. \n\nVery often, I read third-party library sources and examples, such as Nokia's\nQt library, various GNU utilities, and many others.  I want to see the \nfunctions and read the comments but not the 50 lines of licensing and \ncopyright notices that head every file. Because these are third-party \nsources, I do not want to modify the files to include Vim fold markers.\n\nWHAT IT DOES:\n\nThis plugin does not use fold markers and does not modify files.\nIt adds the fold by changing the foldmethod to \"manual\" and inserting a \nmanual fold. \n\nIf the foldmethod is 'syntax', the plugin will do nothing except try to \nclose the fold on line 1, if one exists.  No fold is created and the\nfoldmethod is not changed.\n\nThe preamble has to start at the top of the file, but may be preceded by \nempty lines.  It will consist of leading blank lines followed by lines \nwith comments starting in column one. The preamble will stop at the first line\nnot having a comment in the first column.  \n\nNote: If the preamble uses 'c' style comments without a border of characters\nin column 1 the preamble will not be recognized. \n\n"}, {:name=>"Mercury-compiler-support", :summary=>"Ftplugin, syntax and supplemental plugin for Mercury compiler", :description=>"This is a set of Vim plugins to simplify work with Mercury language compiler\n(http://www.mercury.csse.unimelb.edu.au)\nNative Mercury installer for Windows can be found here: \nhttp://code.google.com/p/winmercury\n\nFiletype plugin is a modified version of ftplugin from officical Mercury distribution. Syntax plugin is a copy of official plugin\n\nmercury_commands plugin provides convenience commands for Mercury compiler:\n\n:Mmc [arg1]... - Invoke compiler (mmc), using current file when no arguments passed.\n:Mmake [arg1]... - Invoke mmake (mmake.bat on Windows).\n:Mmerr - Show last output from :Mmc or :Mmake.\n:Mmod name [interface_imports]\n:Mmod name {interfaceimports} [implementation_imports] - Insert module template, interface_imports and implementation_imports are comma-separated lists of modules.\n:Mmain name [interface_imports]\n:Mmain name {interfaceimports} [implementation_imports] - Insert module template containing the `main' predicate"}, {:name=>"FirstEffectiveLine.vim", :summary=>"Go to the first effective(non-comment) line of the file", :description=>"This plugin provides a normal mode command 'gG', which moves to the first\neffective line of the current file.\nIn this script, \"effective line\" means a line whose first character is\nnot a comment nor a preprocessor nor empty.\n\nIf you want to map the command to another keys than 'gG', add a line like below\nin your vimrc.\n  nmap YOURKEY <Plug>GotoFirstEffectiveLine\n"}, {:name=>"vimomni", :summary=>"omni completion for VimL", :description=>"please see:    http://github.com/c9s/vimomni.vim\n"}, {:name=>"std.vim", :summary=>"standard util vim functions", :description=>"standard util vim functions for reducing duplicated function code in each plugin ,  this vim function library is in progress. patches are welcome.\n"}, {:name=>"tocterm", :summary=>"Utitliy to add cterm support to color schemes without the GUIColorSchemes plugin", :description=>"Script to add cterm support to color schemes without the need for the GUIColorSchemes plugin\n\nDetails, Installation and Usage: http://shawnbiddle.com/toCterm\n\nNote: The utlity will only convert HTML colors. Named colors (Grey, Green, etc.) will not be translated to cterm.\nNote #2: Depending on the speed of your machine and the size of your colorscheme the script may take a while."}, {:name=>"apt-complete.vim", :summary=>" provide debian package name completion", :description=>"    apt-complete.vim\n    ============\n    provide deb package name completion.\n\n\n    commands\n    =========\n\n        :AptCompleteOn   # turn deb package completion on\n        :AptCompleteOff  # turn deb package completion off (set `completefunc` back)\n        :AptCompleteToggle\n"}, {:name=>"SnippetComplete", :summary=>"Insert mode completion that completes defined abbreviations. ", :description=>"DESCRIPTION\nInsert mode abbreviations and snippets can dramatically speed up editing, but\nhow does one remember all those shortcuts that are rarely used? You can list\nall insert mode abbreviations via :ia to break out of this vicious circle,\nbut switching to command mode for that is cumbersome. \n\nThis plugin offers a context-sensitive insert mode completion to quickly list\nand complete defined abbreviations directly while typing. \n\nUSAGE\ni_CTRL-X_]\t\tFind matches for abbreviations that start with the\n\t\t\ttext in front of the cursor. \n\n\t\t\tThere are three types of abbreviations (full-id,\n\t\t\tend-id and non-id), which can consist of different\n\t\t\tcharacters. Thus, there can be more than one candidate\n\t\t\tfor the existing completion base, e.g. \"pre@c\" can\n\t\t\texpand into a full-id abbreviation starting with \"c\"\n\t\t\tor into a non-id one starting with \"pre@c\". The\n\t\t\tcompletion indicates such a ambiguity through the\n\t\t\tmessage \"base n of m; next: blah\", and you can cycle\n\t\t\tthrough the different completion bases by repeating\n\t\t\tthe i_CTRL-X_] shortcut. \n\n\t\t\tMatches are selected and inserted as with any other\n\t\t\tins-completion, see popupmenu-keys. If you use\n\t\t\t<Space> or i_CTRL-] to select an abbreviation, it'll\n\t\t\tbe expanded automatically. "}, {:name=>"Dictionary-List-Replacements", :summary=>"==SUPERSEDED BY MULTI-REPLACE==", :description=>"Functionality in this script has been superseded by Multi-Replace.\nRefer to http://www.vim.org/scripts/script.php?script_id=2938\n\n-------------------------------------------------------------\n\nThis script provides two replacement capabilities, both involving a second buffer.\n\n[=] OVERVIEW\n\n1. DICTIONARY REPLACE\n=====================\nReplace words according to a tab-separated list of word-pairs.\nWords on the left of the tab are the words to search for, \nwords on the right are the corresponding replacements.\n\nExample:\n  1. %s\n  2. %s\n  3. %b\n  [BEFORE]===============\n  1. stars\n  2. stars\n  3. breasts\n  [AFTER]================\n\nTypical use: \n- Variable substitution on a template.\n- Performing a join on two lists\n- Reording lines given orderd list of keys\n\n2. LIST REPLACE\n===============\nReplace matches using text from line matching\norder of appearance.\n\nExample:\n  1. %f are good for your body.\n  2. %v are bad for your body.\n  3. %f are good for your body.\n  4. %v are bad for your body.\n  5. %f are good for your body.\n  6. %v are bad for your body.\n  [BEFORE]===============\n  1. apples are good for your body.\n  2. %v are bad for your body.\n  3. vegetables are good for your body.\n  4. %v are bad for your body.\n  5. vitamins are good for your body.\n  6. %v are bad for your body.\n  [AFTER]================\n\nTypical use: \n- Repeating blocks of code with different identtifiers\n- Intersparsing lines from a file with lines from another file\n\n[=] USAGE\n\n1. DICTIONARY REPLACE\n=====================\n\nLet's say we have some text.\n  =====================\n  your eyes are like stars kissing the breasts of the galaxies.\n  your %e are like %s kissing the %b of the galaxies.\n  1. %s\n  2. %s\n  3. %b\n  4. %s\n  5. %b\n  6. %e\n  7. %e\n  [TEXT]================\n\nIn a separate buffer, prepare a list of tab-separated words. Make sure\nthat the pairs are sperated by tabs and not space characters!\n  =====================\n  breasts\tstars\n  eyes\tbreasts\n  stars\teyes\n  %s\tstars\n  %b\tbreasts\n  %e\teyes\n  [DICT]================\n\nIn the alternate buffer, runthe command \",dict\" \n(comma-dict) standing for \"dictionary\".\n  ,dict\n\nNow go back to our text buffer, and do a selection to match all words. Only words matching current search pattern are replaced.\n  /\\S\\+\n\nRun the command \",rict\" (comma-rict) standing for \"replace dictionary\".\n  =====================\n  your breasts are like eyes kissing the stars of the galaxies.\n  your eyes are like stars kissing the breasts of the galaxies.\n  1. stars\n  2. stars\n  3. breasts\n  4. stars\n  5. breasts\n  6. eyes\n  7. eyes\n  [TEXT]=[+]=============\n\nLimitation: \nReplacements are only done on words matching \nthe current search pattern. This is not a true\nmulti-replace solution, but more efficient.\n\n2. List Replace\n===============\n\nLet's say we have some text.\n  =====================\n  1. %f are good for your body.\n  2. %v are bad for your body.\n  3. %f are good for your body.\n  4. %v are bad for your body.\n  5. %f are good for your body.\n  6. %v are bad for your body.\n  [TEXT]================\n\nIn a separate buffer, the list for replacement.\nMake sure there are enough rows to match target\ntext!\n  =====================\n  apples\n  vegetables\n  vitamins\n  [DICT]================\n\nIn the alternate buffer, runthe command \",list\" \n(comma-list) standing for \"list\".\n  ,list\n\nNow go back to our text buffer, and do a selection\nto match %f which we want to replace.\n  /%f\n\nRun the command \",rist\" (comma-rist) standing for \"replace list\".\n  =====================\n  1. apples are good for your body.\n  2. %v are bad for your body.\n  3. vegetables are good for your body.\n  4. %v are bad for your body.\n  5. vitamins are good for your body.\n  6. %v are bad for your body.\n  [TEXT]=[+]=============\n\nLimitation: \nMatches on the same line are replaced with the same string. There's no option to choose to replace with the next string right now."}, {:name=>"Vimrc-Version-Numbering", :summary=>"automatic vimrc version numbering", :description=>"Automatically increments and displays version number stored inside  vimrc file itself. Version number is automatically updated when a modified vimrc file is saved.\n\nDisplays version number  of vimrc in use when vim is started. This makes it easy to ensure that you have your latest copy of vimrc on different computers.\n\nAlso useful if someone you know uses your vimrc wholesale, or if there are a few versions of \"standard\" versions of vimrc going around in your environment."}, {:name=>"mark_tools", :summary=>"Toggle and navigate marks", :description=>"The plugin is another try on Vim marks. Often I end up using two separate mark groups for navigation (a-f and t-z) so I created a plugin to simplify this. Version 1.1 adds the ability to display marks in quickfix and location list windows.\n\nProvided mappings:\n<Plug>ToggleMarkAZ - mark/unmark current position, if there are multiple marks on the line, remove the first\n<Plug>ToggleMarkZA - mark/unmark current position, if there are multiple marks on the line, remove the last\n<Plug>ForceMarkAZ - add an unused mark starting from a, even if the position is marked\n<Plug>ForceMarkZA - add an unused mark starting from z, even if the position is marked\n<Plug>NextMarkPos - go to next mark\n<Plug>PrevMarkPos - go to prev mark\n<Plug>NextMarkLexi - go to previous mark in lexicographical order\n<Plug>PrevMarkLexi - go to next mark in lexicographical order\n<Plug>MarksLoc    - open location list window with local mark positions\n<Plug>MarksQF\t    - open quickfix window with marks\n\nRecommended mapping to put into your .vimrc:\nnmap <Leader>a <Plug>ToggleMarkAZ\nnmap <Leader>z <Plug>ToggleMarkZA\nnmap <Leader>A <Plug>ForceMarkAZ\nnmap <Leader>Z <Plug>ForceMarkZA\nnmap <Leader>m <Plug>NextMarkPos\nnmap <Leader>M <Plug>PrevMarkPos\nnmap <Leader>l <Plug>NextMarkLexi\nnmap <Leader>L <Plug>PrevMarkLexi\nnmap <Leader>w <Plug>MarksLoc\nnmap <Leader>W <Plug>MarksQF\n\nSo\n\\a and \\z will toggle a mark at current line\n\\A and \\Z force another mark\n\\m and \\M go to next/prev mark\n\\l and \\L go to next/prev mark alphabetically\n\\w and \\W populate location list/quickfix window with marks\n\nAlso I suggest to install a plugin to visualise marks e.g. quickfixsigns (vimscript#2584)\n\nCustomisation:\ntoggle_marks_wrap_search variable controls whether search wraps around or not (order of precedence: w:toggle_marks_wrap_search, b:toggle_marks_wrap_search, g:toggle_marks_wrap_search)\nPossible values:\n-1 - use 'wrapscan' option value\n 0 - do not wrap\n 1 - always wrap (default)\n\nVariables below define which marks should be displayed in loclist and quickfix windows respectively\nlet g:lmarks_names = 'abcdefghijklmnopqrstuvwxyz''.'\nlet g:gmarks_names = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\nI use the plugin on daily basis. If you found any problems or want to suggest a feature, drop me an email."}, {:name=>"rfc-syntax", :summary=>"Simple syntax highlight for RFC file", :description=>"Simple syntax highlight for RFC (Request For Comments) file.\nIt can highlight the contents, the titles and so on.\n\nA ftplugin is also provided to use <C-]> to jump from the contents or reference note ([1] like things)."}, {:name=>"fontzoom.vim", :summary=>"The fontsize controller in gVim.", :description=>"*fontzoom* is a Vim plugin to control gui fontsize.  You can change fontsize\nwith + and - keys(when default setting).  You can also use the [count].\nThis plugin remember 'guifont', 'lines', and 'columns' when you change\nfontsize first.  And tries to keep the size of the window as much as possible.\n\nsimilar plugins:\nguifont++.vim        http://www.vim.org/scripts/script.php?script_id=593\nzoom.vim        http://www.vim.org/scripts/script.php?script_id=2321\nfontsize.vim        http://www.vim.org/scripts/script.php?script_id=2809\n\nLatest Version:\nhttp://github.com/thinca/vim-fontzoom"}, {:name=>"histwin.vim", :summary=>"Browse the undo tree", :description=>"PLEASE RATE THIS PLUGIN, IF YOU LIKE IT!\n\nFeedback is always welcome. See :h histwin-feedback.\n\nYou can now follow development of this plugin via github: http://github.com/chrisbra/histwin.vim\n\nVim 7 has an amazing feature that is called undo-branches. See :h undo-tree. Unfortunalley it is a little bit clumsy to use. \n\nTherefore this plugin allows for easy navigation between the different undo-branches for a file.\nSee this screenshot: http://www.256bit.org/~chrisbra/vim_undotree.png\nThis plugin was inspired by the undo_branches plugin (http://www.vim.org/scripts/script.php?script_id=1997).\n\nThis plugin allows you to\n- see all available undo-branches (Timestamps and Keywords)\n- tag certain states\n- switching to different states (including the first state (before any changes were made)\n- allow to diff the selected undo-branch with the current version\n- replay the changes (ok, this is just for fun ;)\n\nOpen the UndoBrowse window by issuing :UB\nA new window will appear, which contains the name of the file you are watching a small help\nbanner that contains the most important mappings for this window and a list of all available\nundo-branches (which shows the time when this change was made and your tags for that state, if there are any). On each entry you can press Enter or T to jump to that state or tag that state.\n\nThis plugin maps the following keys:\n- 'Enter' on an entry jump to that state in time of the file\n- 'T' tags a state with a phrase. \n- 'R' lets you replay a change \n- 'I' opens/closes the help banner\n- 'Q' closes the window\n- CTRL-L reload view\n- D diff selected version"}, {:name=>"vim-addon-fcsh", :summary=>"run adobe fcsh Flex compiler shell in background decreasing compilation times", :description=>"There is a Flex SDK for Linux. The complier is written in Java and has a long start time.\nTo increase speed there is the fcsh (flex compiler shell). You compile once and everything will be kept in memory. This plugin runs fcsh for you so that you can get fcsh compilation failures in your quickfix window.\n\nEnjoy!"}, {:name=>"vim-addon-actions", :summary=>"keep list of actions you can bind to shortcuts easily on demand", :description=>"Press <s-FX> to map an action to the FX key where X is one of 2,3,4 ..\nThis action can be\n* run last command\n* run make\n* ....\n\nAlternatively you can set an action which is run whenever you write a buffer:\nSetActionOnBufWrite\n\nThis plugin can be reused by many IDE like plugins (eg my vim-addon-fcsh does so)\n\nI got two bad ratings. Would you consider sending me a note why you think it's that bad?"}, {:name=>"superSnipMate", :summary=>"improved from snipMate with which you can expand your snippet within another", :description=>"developed from snipMate \n\nMy email: gm.chaochao@gmail.com"}, {:name=>"bzr-commit", :summary=>"Commit bazaar using splited view (diff, status and commit comment)", :description=>"This bash script open a vim instance showing diff, status and an editable comment buffer for you commit message."}, {:name=>"hexHighlight.vim", :summary=>"Plugin to highlight hex codes in gvim.", :description=>"This plugin looks for hex codes of the format #ffffff or #fff and toggles a highlight in that color. It is useful for editing colorschemes, and generally any config file dealing with colors.\n\nOnly works with the graphical version of vim."}, {:name=>"Multi-Replace", :summary=>"Perfom non-cumulative multi-replace", :description=>"This script provides several functions to do multiple-string replacements.\n\nThe quick brown fox jumped over the six lazy dogs.\nreplace (dogs=fox, fox=dogs, x=ck) will give\nThe quick brown dogs jumped over the sick lazy fox.\n\nNote that values are non-cumulative and longest-string-first, which is why\n\"x=ck\" does not interfere with \"dogs=fox\" or \"fox=dogs\" replacements.\nThis can be used to specify exceptions in a replacement list. \n\nTypical uses: \n- Replacing variable names (eg code localization / code reuse)\n- Replacing keywords with translations\n- Generating code from a template\n- Swapping keywords\n  etc\n\nIts main function is provided  by the MultiReplace function, which performs\nnon-cumulative replacements, replacing occurrences of hash keys with their corresponding hash values. Hash values may be arrays, in which case values are rotated across the lines containing the key value. Range of lines to replace may also be specified.\n\nMultiReplace(dict, from, to)\n\nSeveral functions that create the \"dict\" hash are also provided.\n\n1) Read values from prompt\nMultiReplace(ReadUserlist(), 1,  \"$\")\n\n2) Replacement dictionary\nA buffer may be also specified. A replacement list buffer will contain TAB separated pairs, with the string to find on the left and the string to replace with on the right. Such a replacement would be invoked with\n\nMultiReplace(ReadDictionary(\"#\"), 1, \"$\")\n\nWhere the \"#\" here refers to the alternate buffer:\nReadDictionary(buffer)\n\n3) Look up table \nA buffer containing delimiter-separated values my also be used. To use a csv that does not contain quote marks (ie, no quotes and no values with linebreaks), and replace all occurrences from column 1 with values from column 4:\n\nMultiReplace(ReadColumns(\"#\", \",\", 1, 4), 1, \"$\")\n\nReadColumns is defined as\nReadColumns(buffer, sep, keycol, valcol)\n\nMappings\nThe following mappings are included in the file. This allows you to select a range of text, enter \",rem\" and then enter \"=\" and specify find=replace pairs for a quick replacement.\n\n:map ,rem :call MultiReplace(\"\",1,\"$\")\n:vmap ,rem :call MultiReplace(\"\",line(\"'<\"),line(\"'>\"))\n\n\n\n\n"}, {:name=>"strawimodo", :summary=>"GUI-only - colorful but sane", :description=>"That's my first theme loosely based on railscasts.vim. It's GUI-only.\n\nScreenshots:\n\nhttp://mhinz.spline.de/strawimodo1.png\nhttp://mhinz.spline.de/strawimodo2.png\n\n"}, {:name=>"vim-addon-mw-utils", :summary=>"some utilities I wrote", :description=>"* cached file contents\n  get some information from files and cache the result.\n  Reparse the file when it has changed automatically.\n\n* tiny-cmd : Never get the \"Press ENTER or type command to continue\"\n   message again\n\n* funcref:\n  - poor man's closures for Vim.\n  - Create function objects calling autoload function without sourcing that file\n  - (be lazy, do the work when it has to be done)\n  - get rid of the \"Use upper case letters for custom functions\" annoyance\n\n   Example:\n  let myFun = funcref#Function(\"return ARGS[0]\")\n  let result = funcref#Call(myFun, [2])\n\n  let myFun2 =  funcref#Function(\"foo#bar#Baz\")\n  \n  \" pass arguments (kind of simple closure):\n  let myFun2 =  funcref#Function(\"return ARGS\", {args: [1]} )\n  echo funcref#Call(myFun, [2])\n\n  echoes [1,2]\n\n  \" bind function to an object:\n  let myFun2 =  funcref#Function(\"return SELF.myvalue\", {self: {\"a\": \"myvalue\"} } )\n\netc..\n\nThis library is used by many of my plugins\n\nIf something doesn't work it's a bug. So tell me to fix it!\n\nReuse this code if you like it!"}, {:name=>"actionscript3id.vim", :summary=>"vim syntax highlight identifiers of actionscript 3", :description=>"All identifiers are mined from the documentations of flex 4 sdk.\nThere are 8 groups: Flex Interfaces, Flex Classes, Flex Constants, Flex Functions and those only available in AIR runtime."}, {:name=>"RubySinatra", :summary=>"Syntax highlight for Ruby/Sinatra micro-framework", :description=>"Vim support for syntax highlight and snippets that helper coding\napplications based in Ruby/Sinatra micro-framework.\n\nThe snippets are written with base the SnipMate #2540 plugin.\n\nYou maybe contributes to source. So, send a feedback in issue tracker (http://github.com/hallison/vim-ruby-sinatra/issues).\n\nVim-Ruby/Sinatra is hosted on following servers:\n\n-- Github (http://github.com/hallison/vim-ruby-sinatra)\n-- Codaset (http://codaset.com/hallison/vim-ruby-sinatra/issues)\n\nCopyright (C) 2010 Hallison Batista <email@hallisonbatista.com>\n"}, {:name=>"ccvext.vim", :summary=>"more convenice way to use ctags and cscope in vim", :description=>"This is a new version from JumpInCode.vim I don't know why i can't upload a new version to the old JumpInCode page (http://www.vim.org/scripts/script.php?script_id=2770)? So I start this branch\n\n\\\"EN\\\"\nctags and cscope plugin, more convenice way to use ctags and cscope in vim\n\nCommand:\n\\sy   Generate tags and cscope database from current directory\n\\sc   Configure window (Take care of the help info the window below)\n                  \nRequirement:\nUnix:   ctags and cscope\nWin32: ctags.exe and cscope.exe  (win32 ctags and cscope could download from:http://code.google.com/p/easy-vim/downloads/list)\n\n\\\"中文  ZH\\\"\n自动生成并使用ctags和cscope\n\n命令：\n\\sy   从当前目录生成tags和cscope.out\n\\sc   配置窗口 (注意配置窗口底部的帮助信息)\n\n系统要求：\n预安装要求ctags和cscope:\nUnix:    ctags and cscope\nWin32: ctags and cscope  （win32版的ctags和cscope下载地址：http://code.google.com/p/easy-vim/downloads/list&#65289;\n"}, {:name=>"visualstar.vim", :summary=>"star(*) for Visual-mode.", :description=>"*visualstar* is a Vim plugin to provide a |star| feature for |Visual-mode|.\nIn other words, you can search your selection text in |Visual-mode|.\n\nLatest Version:\nhttp://github.com/thinca/vim-visualstar"}, {:name=>"AutomaticTexPlugin", :summary=>"Background compilation, completion, bib serch, toc and other nice features.", :description=>"If you have any question, ideas, or suggestion please do not hesitate to write, it is always nice to get some feedback ...\nand many THANKS for RATES, :).\n\nThe plugin is known to not work on MS Windows, a help with porting it is welcome.\n\nThis is a file type plugin for vim to comfortably write LaTeX (TeX) documents, which provides functionality not met in other such file type plugins.  It makes you FREE from compiling procedure, making this process automatic using autocommands. Features include (this is not a complete list):\n\nCompilation Features:\n             * Background tex processing\n             * Making LaTeX documents with just one command \n                          / bibliography, makeindex, table of contents, lists of: figures, tables, theorems [with ntheorem package] /\n             * various debug modes: silent/debug/verbose.\n                          / automatically close debug window (:copen) if there are no errors /\n             * show errors, warnings, citation/reference warnings, \n                font warnings, files used ...\n                          / error file is automatically read after compilation /\n             * open log function, in log file you can sync the tex source with the log file (then errors in the source file will be higlighted!) or the xpdf viewer with the log file. There are also maps to go to next/previous error/warning/info/... message.\n\nEditing Features:\n             * indentation\n             * selection tools for environments (vie, vae) , in line math (vim, vam)\n             * toggling the environment name \n                        / and changes the label if you use the labeling system; this needs activation /   \n             * toggling the star (add remove a star from environment)\n\nCompletions:\n             * completion for commands (also user defined in associate files), \n                environments, citations, references, tikz commands, keywords, provided abbreviations, and much more\n                        / there are two completion modes: when you know what you want with <Tab> \n                         and when you search for a command with <S-Tab> /\n                                          Some completion features:\n                                                            + math commands are completed only in math mode\n                                                            + tikz commands are completed only in tikz environments\n                                                            + completion of \\ref, \\eqref by numbers from the output (\\ref{1.3<Tab> ...)\n                                                            + completion is connected to closing last environment/bracket functions\n                                                               so that you have all under one key <Tab> by default\n                                                            + completion for \\usefont{}{}{}{}, \\fonttype{}, .... commands\n                                                                       / finds completions in font definition files /\n                                                            + completion for \\cite{ supports regular expression which are\n                                                               passed to the searching tool in bibliography files\n             * closing brackets and environments (preserves nested environments in  100%)\n                         / which is included into completion with <Tab> key)\n             * many usefull maps\n             * abbreviations for environments (with tab completion)\n            \nMoving Tools:\n             * table of contents\n                         / which allows moving through files, chapters, sections, opening a preview window /      \n             * list of labels\n                         / as with toc, you can see the context of the label in a preview window /\n             * moving commands to next environment\n                         / configured with vim commands: 'n' and 'N' for repeating / the vim commands: 'n' and 'N' for repeating /\n                         / also to next [inline/displayed] math environment /\n                         / support of project files /\n             * % operates on $:$ (in plain tex also on $$:$$), brackets and \n                \\begin:\\end pairs /which also get highlighted/\n             * (TeX/LaTeX) oriented normal gf map\n                         / gf = go to file under cursor, if there is no file under the cursor gives a recursive list input files /\n                                               + with nice indentation for the list of files to chose\n                                               + with g:atp_developer = 1 you can easily open package (.sty) and classes (.cls) files\n\nSearching Tools:\n             * reverse/inverse searching for xdvi\n             * search for definitions ( \\def ) declared in input files\n                            / like [D command but works with multiple line definitions /\n             * extended search in bib files\n             * query amsref web page for bibliography data  \n             * a function which toggles a command map of <space> to \\_s\\+\n                            / this is a handy way to search in text which is broken into lines /\n\nSupport for Projects\n             * project script which restores project specific variables ( for example: b:atp_MainFile, b:ListOfFiles - the list of files included in the project, ...) \n                            / The project script name is <MainProjectFile>.project.vim /\n                            / It is possible to store many projects in one directory! /\n             * GotoFile function (replace vim gf map), which list all the input files for the main project file and let you go to one of them (it also sets the main file variable for the new buffer to correct value automaticaly).\n             * A command to search in project files (like it would be just one long file)\n                                       + supports flags: bceswW of vim search() function and the \n                                                                 vim 'wrapscan' option.\n            * :Labels command (which list all defined labels) support project files.\n            * :TOC command (Table of Contents) almost supports project files (work in progress).\n            * :NInput/:PInput commands : to go to next/previous input file.\n\nThis plugin includes: vimscript#3109  (LatexBox by David Munger).\n\nProject Web Page:  https://launchpad.net/automatictexplugin\nBUG tracker:       https://bugs.launchpad.net/automatictexplugin"}, {:name=>"AGTD", :summary=>"Almighty GTD File for Vim", :description=>"Tired of trying thousand of tools to organize my life, and inspired in the\nidea of ONE BIG TEXT FILE from Danny O'Brien, I decided that the world needed\nyet another GTD tool. The \"Almighty\" part is a reference to the idea of having\nall type of notes about your tasks in one single file.\n\nThe whole idea of this GTD implementation relies in some custom notation\nmarks, the Folding capabilities of VIM and its power to work quickly with\ntext. I wanted something portable to collect, edit, search and structure\nlightning fast my notes. This is the result so far:\n\n    * Organize project tree with notes, links and tasks\n    * Move tasks from the project tree to the TODO list inserting project label\n    * Neatly collect and display all tasks related with a project\n    * Ease project tasks/notes finding\n    * Build a calendar with all the dates in the text file\n\nI strongly recommend the UTL script as a side companion. It will enhance your\nnotes allowing you to open different links with just a short keystroke.\n\nThis script is my idea of how GTD should be done with VIM. Any comments, bug\nreports, patches, fixes and suggestions are welcome.\n\nIf you like it, please, rate it in the Vim website to let me know that out\nthere there are people who find this useful. Otherwise I will consider this\njust an scrapbook to learn Vim scripting. \n\nAny comments in my webpage would be appreciated. There you can request wished features, report bugs or just tell me to go on and that you would like to see more versions:\nhttp://www.digital-lumberjack.com/tools/vim/agtd\n"}, {:name=>"bvemu.vim", :summary=>"Another Dark Scheme for gvim", :description=>"This is a dark scheme and the preview is available at http://bvemu.blogspot.com/2010/01/preview-of-files-with-colorschemebvemu.html \n\nComments are welcomed\n\nJust place the bvemu.vim files in your .vim/colors/ directory \nand in your .vimrc  set as following \ncolorscheme bvemu"}, {:name=>"GoogleSuggest-Complete", :summary=>"complete function using google suggest API. perhaps, you should input japanese w", :description=>"Lesson1:\n\n  takasu<c-x><c-u>\n        ┌────────┐\n  takasu│高杉晋作========│\n        │高須クリニック  │\n        │高須            │\n        │高鈴            │\n        │高鷲スノーパーク│\n        │高杉さと美      │\n        │高杉良          │\n        │高須光聖        │\n        │高須克弥        │\n        │高須 ブログ     │\n        └────────┘\n  * perhaps, you can see the candidates above.\n\nLesson2:\n\n  watasinonamaeha<c-x><c-u>\n\n  => 私の名前はキムサムスン\n  * who is kim samsoon?\n\nEtc:\n\n  naitu<c-x><c-u>\n  => ナイツ お笑い\n\n  www<c-x><c-u>\n  => www.yahoo.co.jp\n\n  gm<c-x><c-u>\n  => gmailへようこそ\n\n  vimp<c-x><c-u>\n  => vimperator\n\n  puri<c-x><c-u>\n  => プリキュア\n"}, {:name=>"The-Max-Impact-Experiment", :summary=>"A playground to see how much we can do with pithy code", :description=>"The other day I was sitting around drinking beer and thinking, \"Gosh, I hate how long it takes for the list of buffers to show up on the screen when I type :ls. I wish there was a built-in command that quickly opens a window with a list of buffers. Like a :bopen command that works just like the :copen and :lopen commands...\" Then it hit me. Yes, the Frisbee hit me right on the melon and I had to get off my lawn chair to throw it back. When I sat back down I had an idea... The buffer list is a perfect use of the location list! Its got file names... even line numbers! Well, I took out the laptop that I was laying on, brushed off the sand and experimented with it. So... How much work did it take to create a location list containing buffers? Precious little it turns out... \n\nHere's the jist of it... \n\n\" 1. place the output of the ls command into a variable... \n   redir => out \n   silent ls \n   redir END \n\n\" 2. split the string into an array... \n   let l = split(out, '\\n') \n\n\" 3. set the error format to conform to the buffer list format... \n   set efm=%m\\\"%f\\\"%*\\\\sline\\ %l \n\n\" 4. create a location list based on the list of buffers, then open the window... \n   lgetexpr l \n   lopen \n\nBlam! That's it! Now I've got a window that lists buffers, and selecting one of them will take me right to it! Granted, it's raw. But it works and it only took 7 lines of code! \n\nThen I had another loathsome thought as I was rubbing the bump on my forehead... There are many pretty, feature-rich buffer scripts out there. So what use is this? \n\nNow, either I had too much to drink or the Frisbee hit me harder that I thought because my darth-vader pug (http://bboylimping.files.wordpress.com/2009/05/darth-vader-dog-costume.jpg) started arguing with me. He said, \"Because you are using the built-in location list, vim will take care of buffer selection for you, even window management, and all the location list commands are at your disposal!\" \n\nHoping that nobody could see me arguing with Darthy I said, \"Yea, so what? There are other scripts out there that have a much prettier buffer list, have more features...\" \n\n\"Shut up!\u0094 he said, interrupting me. \"It isn't about that. It's about doing as much as you can with as little code as possible.\" \n\nKnowing that he was right and humiliated that my dog beat me in an argument, I threw the Frisbee as hard as I could and hoped that he would leave me alone. It didn't work. He just sat there and stared at me with a look that said \"you're so immature...\" \n\n\"Now, post it!\" \n\"Hell no!\" I said with a scoff. \"Who do you think you are? You're a no-talent-ass-clown pug in a Darth-Vader costume! You're not fooling anyone, you know. Oh, and news flash: you missed the Men in Black auditions by 15 years.\" \n\nHe just stared at me with a judgmental look on his face. Not wanting to give him the satisfaction, I casually turned over with a yawn so he couldn't see me post the script. \n\nSo, here it is... I've added only a *minimum* collection of useful features to the buflist. I've refined the hell out of it; smoothing out the worst of the rough edges. No feature takes more than a few lines of code, the whole thing is only about 70-75 lines. \n\nWhy have this experiment? Well... there are some important advantages to keeping things short: \n- There are fewer places for bugs to hide. \n- The code runs considerably faster because it leverages more of the native C code.\n- It is easier to understand (usually). \n- It is easier to fix bugs. \n- A sufficient level of obfuscation adds to job security... and \n- It saves $0.000000001 in hard-drive space. \n\nDownload it and take a look at it. Play around with it. Adore the elegance of it. Can you think of any other features to add?\n\nDarthy: \"Arff! You can do it!\" Aww, crap... he caught me. \n\nFeel free to contact me with ideas and updates (take a look at my profile for the email). \n\nFor those of you who are expecting the world's best buffer script, then give a negative rating... hey lighten up! This is just a fun exercise! Please add a comment before rating! Comments can be posted on the corresponding wiki page (see link at the top of this page)."}, {:name=>"cflow-output-colorful", :summary=>"to analyze the source codes more effectively by using GNU cflow", :description=>"Regard cflow's output as a new language, thus we could highlight it's output to analyze the source code. so the file name suffix should be \".cflow\", just like \"cflow -o xxx.cflow\" \n\n\nThe snapshot has been in the tarball \n\nSNAPSHOT: \ncyan\t--\tfunctions defined ourself \npurple\t--\tvariables defined ourself \nred\t--\tsystem functions \nblack\t--\tsystem symbols \nyellow\t--\tfile name \ngreen\t--\ttype keywords in C \nwhite\t--\tsomething else \norange(fg) --\tnumber \norange(bg) --\trecursive functions \n\n\nEnjoy it \n\n"}, {:name=>"SaneCL", :summary=>"Quickly indents Common Lisp code and is 100% VimScript", :description=>"Bug reports or comments welcome! Email: oconnore@gmail.com\n----------------\n\nParsing is done using a per character tokenizer. Two stacks are used to simulate a recursive parse.\n\nMappings:\n<Tab> indents lines (or ranges in visual mode)\n<C-\\> indents the toplevel form. Or whatever is at 150[(.\n\nTo indent an entire file, do 1GVG<Tab>. This may take a while for a large file.\n\nCommands:\n:CLLoadLispwords refreshes the lisp word file\n:CLIndentForm indents the toplevel form\n:CLIndentRange indents a range\n:CLIndentLine indents a line\n:CLSetWord <word> <number> sets a lispword\n\nCustomizable variables:\nString :: g:CL_lispwords_file defaults to ~/lispwords.\nBoolean :: g:CL_aggressive_literals defaults to 1\nBoolean :: g:CL_retab_on_open defaults to 1\nInteger :: g:CL_auto_zero_limit defaults to 25\nList <String> :: g:CL_loop_keywords lists all known loop keywords\nList <String> :: g:CL_flets lists forms to be handled similar to flet\nList < List < String, Integer > > :: g:CL_auto_prefixes lists all regexp base lisp numbers.\n\nAdd <<let g:VARIABLE = VALUE >> to your ~/.vimrc to change this. For Boolean variables, 1 is true and 0 is false.\n\nLisp words are stored 1 per line as such:\n<symbol> <lisp #>\n\nAggressive literals means that forms such as (:hello world), ('got milk) and (&optional var1 var2) are treated as literals. The first character of the first symbol (if it is a symbol) are tested to match [&':].\n\nWhile indenting, auto prefixes iterates over each string-integer pair. If the string matches the parent (for example \"def\" matches \"defclass\", and \"^[abc].*$\" matches \"chair\"), then the associated lisp word number is used for indentation. The first match wins.\nI default to: [[\"with-\",1], [\"def\",2], [\"make-\",1], [\"map\",1]]\n\nAuto zero limit was added to preserve screen real estate for long lispy symbol names. If a symbol in your program looks like \"variable-that-holds-an-integer-and-is-used-for-counting\", you may appreciate this setting. Any parent string longer than the limit will be handled as a lisp number zero. By default, this is 25 characters.\n\nMy lispwords file is available at: http://paste.lisp.org/display/97882\nIt is not complete, but might be a useful starting point.\n\nThe indentation behavior was based on a description at http://evalwhen.com/scmindent/index.html."}, {:name=>"c-standard-functions-highlight", :summary=>"highlight most functions in C89/C99/unistd.h", :description=>"general c highlight doesn't support standard function symbols, so mixed with the symbols defined ourselves(wrong? oh, i'm a silly pig).\n\nlet's separate them from now on.\n\nsee in the snapshot including in the tarball. they're black, u'll know that. \n\nmay u have a good day."}, {:name=>"Wavefronts-obj", :summary=>"Syntax for wavefront's obj file format", :description=>"wavefront's obj is a file format to store 3D meshes, and is stored as an ASCII file."}, {:name=>"hypergit.vim", :summary=>"an awesome git plugin for vim.", :description=>"* hypergit plugin provides a tree menu just like NERD_Tree, you can execute\ngit command very easily. you can expand, collpase, execute on each node.\n\n* it also provides a bunch of commands and key mapping, \n\n* support editing of `git rebase -i [branch]`\n\n* status buffer to edit/commit/delete/add files.\n\nPlease see:  http://github.com/c9s/hypergit.vim"}, {:name=>"hex.vim", :summary=>"ftplugin for Intel Hex files", :description=>"This is a filetype plugin for Intel Hex Files.\nShows the address and decimal data at the cursor position.\n:HexGotoAddress 0x...... : Jump to address\n\nActually it is only for 'Extended linear address record ' (type 04)\nIf you need other types too, send me your hex-file"}, {:name=>"csp.vim", :summary=>"syntax file for CSP", :description=>"syntax file for CSP (Communication Sequential Processes, using FDR input syntax). New version because of new Web home page of maintainer."}, {:name=>"load_template", :summary=>"Loading templates as html,makefile,class ... and you can make template yourself!", :description=>"The plugin mainly provides the functionality that loading templates such as class,html,makefile and so on.The plugin also can load templates with script to take the replace of the filename or classname.(As default,the plugin has already included templates as main,singleton class,html,xml,makefile.)\nFor any question,welcome to my blog http://www.vimer.cn,\nand welcome to email me:zny2008@gmail.com / dantezhu@vip.qq.com\nThe plugin's homepage is :\nhttp://www.vimer.cn/2010/02/vimer-cn%e5%8e%9f%e5%88%9bvimgvim%e6%8f%92%e4%bb%b6load_template%e6%ad%a3%e5%bc%8f%e5%8f%91%e5%b8%83.html\nUse guide:\n\t1)Download load_template.vim,and put it into the plugin directory.\n\n\t2)Assign the directory where to load templates in your vimrc file.\n\tFor example\n\tlet g:template_path = 'C:\\template\\&#039\n\tWarning:Don't forget about the last '\\&#039.\n\n\t3)New/Open a test.cpp,execute\n\t:LoadTemplate\n\tIt will show the template list like this:\n\tTemplate filelist:\n\t0\t\t:\t\tcpp/main.cpp\n\t1\t\t:\t\tcpp/singleton.h\n\tplease select:\n\n\t4)There are also options available that allow you to make your own templates(you can write vim script in it.) \n\tJust try it yourself.\n\n=================================================\n该插件主要实现了自动载入各种模板的功能（如类模板，html模板，makefile模板等等），并且支持动态模版的功能，即能够通过脚本动态的实现文件名，类名的替换。（默认已经提供了简单main函数模板、单体类模板、html标准模板、xml标准模板）\n欢迎来 http://www.vimer.cn &nbsp; 来分享你的模板文件，或者直接给我\n发送邮件zny2008@gmail.com/dantezhu@vip.qq.com\n这个插件的主页是：\nhttp://www.vimer.cn/2010/02/vimer-cn%e5%8e%9f%e5%88%9bvimgvim%e6%8f%92%e4%bb%b6load_template%e6%ad%a3%e5%bc%8f%e5%8f%91%e5%b8%83.html\n\n使用说明\n\t1）下载load_template.vim插件，并放在plugin的目录下\n\t2）在vimrc文件中指定你的模板目录，来指定插件读取模板的目录。\n\t如在下载包中已经带了一个template的目录，里面按照文件扩展名、文件类型，分别建立了目录，你可以将这个template文件夹复制到C:\\\\，那么就可以指定\n\tlet g:template_path = 'C:\\template\\&#039\n\t注意，最后的'\\&#039请务必不要忘记（在linux下也是一样要加 '/' ）\n\t3）新建/打开一个test.cpp，执行\n\t:LoadTemplate\n\t试试看，是否有类似模板列表出来啦~\n\tTemplate filelist:\n\t0\t\t:\t\tcpp/main.cpp\n\t1\t\t:\t\tcpp/singleton.h\n\tplease select:\n\t4）你甚至可以自己制作模板文件~~只需要参考已经存在的模板文件就行啦~~支持vim脚本的哦\n"}, {:name=>"emoticon.vim", :summary=>"    emoticon omni completion", :description=>"\n    emoticon omni completion\n"}, {:name=>"emoticon.vim-B", :summary=>"    emoticon omni completion", :description=>"\n    emoticon omni completion\n"}, {:name=>"bisect", :summary=>"Navigation via bisection", :description=>"This plugin will allow you to reach a desired location on the visible screen by\nperforming a sequence of bisections to the left, right, up, and down.  By default,\nthese are performed using the <C-h>, <C-l>, <C-j>, and <C-k> commands, respectively.\n<C-n> cancels a bisect.\n\nFor example, suppose your cursor is above the desired location on the screen.  Call\nthe BisectDown command, and your cursor will move halfway between its current\nlocation and the bottom of the screen.  Now suppose your cursor is below the desired\nposition.  Call the BisectUp command, and your cursor will move to halfway between\nits current position and its original position.  Repeat as necessary.  BisectLeft and\nBisectRight work analagously.  Horizontal and vertical commands can be interleaved.\n\nWorks in normal and all visual modes. \n\nMore information available here: http://github.com/mikezackles/Bisect\n\nNote that the github repo is slightly more up to date.  (Switching to visual mode cancels a bisect).  I swear I'll get around to updating the vimball soon."}, {:name=>"groovyindent", :summary=>"groovy indent script", :description=>"groovy indent script"}, {:name=>"liftweb.vim", :summary=>"A plugin for vim to ease navigation for projects that use the Lift framework.", :description=>"A plugin for vim to ease navigation for projects that use the Lift Scala web\nframework. Heavily inspired by the awesome that is Tim Pope's rails.vim (at\nhttp://rails.vim.tpope.net/) .\n\nCurrently provides a few commands:\n\n* :Lmodel, Lsnippet, Lactor, Lcomet -- all take a class name and take you to\n  the appropriate associated file\n* :Lview -- takes a class name and takes you to the appropriate view file\n* :Lspec or :Ltest -- when called from a class (e.g., GroupSnip), takes you to\n  the associated test file (GroupSnipTest)\n* :Lclass -- the opposite of Lspec, takes you to the class for the current test\n\nThe github repository for this lives at http://github.com/Shadowfiend/liftweb-vim/ ;\nplease file bugs at http://github.com/Shadowfiend/liftweb-vim/issues ."}, {:name=>"line-number-yank", :summary=>"yank lines with line number", :description=>"The script is used for yank lines with their line number.\nYou can yank lines for specific range with their line number by key map \\ny\nFor example, the text from line 9 to 12 is like the follow:\n\nline9\nline10\nline11\nline12\n\nif you specified text from line 9 to line 12 under visual mode, press `\\ny'. Then if you press `p', it would paste:\n\n  9  line9\n 10  line10\n 11  line11\n 12  line12\n\nIf the line number is larger than 999, the format would not that tidy."}, {:name=>"neutron.vim", :summary=>"Light background colorscheme", :description=>"This colorscheme is placed in the Public Domain\nAuthor: Joseph Wecker\n\nPut this together for those days when I need a light background in gvim instead\nof a dark (in which case I usually use zenburn).  This syntax has the following\nattributes:\n\n- Soft and easy on the eyes, but enough contrast\n- No italics or bold text because I sometimes get rendering issues\n- Nice colors - evenly balanced\n- Colors for all main syntax items! (pet-peeve- otherwise great colorschemes\n  that combine syntactic elements into the same color)\n\nI used proton.vim as a starting template (hence the name)- but I don't think\nthere's much of proton left in neutron.\n\nDevelopment at http://github.com/josephwecker/neutron.vim\n"}, {:name=>"SyntaxMotion.vim", :summary=>"Cursor motion & visual selection by syntax highlighting group", :description=>"This plugin provides cursor motion by syntax highlighting groups in normal\nand visual mode:\n\n- type  \\<right>  (actually <Leader><right>) to move the cursor forward to \n  the end of the syntax group where cursor is located.\n\n- type  \\<left>  (actually <Leader><right>) to move the cursor forward to \n  the beginning of the syntax group where cursor is located.\n\nFor example, when inside a string, pressing  \\<right>  moves to the end of \nthe string.  When inside a comment, pressing  \\<left>  moves to the \nbeginning of the comment.  You can extrapolate this behavior to any kind\nof syntax group.\n\nRepeating the motion multiple times will move to the next syntax\nhighlighting group (forward or backward). A repeat count number can also be\ngiven before typing  \\<left>  or  \\<right>.  For example, typing  3\\<left>\nmoves the cursor to the left by 3 syntax elements.\n\nStrictly speaking, motion actually moves to the start or end of the text\nwhich has the same \"color\" (rather than same \"syntax group\") as the color\nof the text where cursor is originally located. So if your color scheme\ndefines the same colors for multiple syntax groups, motion may actually span\nmultiple consecutive syntax groups if they have the same colors.  Motion is\nbased on syntax highlighting colors rather than syntax highlighting groups\nto make behavior more intuitive (what you see is what you get) since users\nsee colors on the screen but may not be aware of different syntax highlight\ngroups.\n\nPlugin also provides a way to select the text visually around the position\nof the cursor with the same syntax group as where cursor is located:\n\n- type  va<right>  to visually select the text with the same syntax as \n  where cursor is located, and move the cursor to the end of the selected\n  text.\n\n- type  va<left>  to visually select the text with the same syntax as \n  where cursor is located, and move the cursor to the beginning of the \n  selected text.\n\nSyntax highlighting must be enabled for the plugin to work.\n\nLicense: The VIM LICENSE applies to SyntaxMotion.vim (see \":help copyright\"\nexcept use \"SyntaxMotion.vim\" instead of \"Vim\").\n\nToDo:\n- write a proper help page\n- provide mapping in operator pending mode\n"}, {:name=>"Doxia-APT", :summary=>"syntax highlighting of Doxia APT files as used by Maven", :description=>"Syntax highlighting for Doxia APT files, as used by Maven for documentation purposes. The format is described here: http://maven.apache.org/doxia/references/apt-format.html"}, {:name=>"daemon_saver.vim", :summary=>"Vim version of FreeBSD daemon_saver", :description=>"This is a Vim version of daemon_saver from FreeBSD.\nThe script adds :Daemon command, which starts screensaver.\nDaemon speed is adjustable through g:daemon_saver_speed variable. Default is '80' (ms).\n\nTo start the screensaver automatically after some time put this to your .vimrc:\n\nau CursorHold * Daemon\nset updatetime=60000\n\nThis will start Daemon after 60 seconds of vim being idle."}, {:name=>"ikiwiki-nav", :summary=>"several helpers for editing ikiwiki pages", :description=>"This ftplugin eases the editing of IkiWiki wikis by providing the following features:\n\n  * Wikilink autocompletion through omnicompletion.\n  * Jump to previous/next wikilink\n  * Open the file corresponding to the wikilink under the cursor in the current window/a new window/a new tab page\n  * Create the file corresponing to the wikilink under the cursor in the current window/a new window/a new tab page\n\nFor the usage details, mappings defined and other stuff, see :help ikiwiki-intro after you install the plugin\n\nThere is a git repo for the plugin in  http://git.devnull.li/ikiwiki-nav.git/. The master branch always has the latest stable version, and the dev branch has the latest version of the plugin.\n\nFeel free to contact the author (see the AUTHORS file in the package) with bug reports/suggestions/whatever :)"}, {:name=>"ucf.vim", :summary=>"Xilinx User Constraint File Syntax", :description=>"This is a syntax file for a Xilinx FPGA User Constraint File (*.ucf)"}, {:name=>"ISBN-10-to-EAN-13-converter", :summary=>"Convert ISBNs to EAN-13s", :description=>"Allows conversions between ISBN-10 >> 978 prefix EAN-13s, and 978 prefix EAN-13s >> ISBN-10 \n\nThere are three methods of converting ISBNs and EANs: \n\n:ReplaceLineIsbnEan \n    If the entirety of the current line is a valid ISBN-10, replaces it with the converted 978 prefix \n    EAN-13 \n:ReplaceLineEanIsbn \n    If the entirety of the current line is a valid EAN-13 with a 978 prefix, replaces it with the \n    converted ISBN-10 \n\n:ReplaceSelectedIsbnEan \n    If the selected text is a valid ISBN-10, replaces that text with the converted 978 prefix EAN-13 \n:ReplaceSelectedEanIsbn \n    If the selected text is a valid EAN-13 with a 978 prefix, replaces it with the converted ISBN-10 \n\n:ReplaceAllIsbnEan \n    Searches for any 10 digit number, of 9 digit number followed by x or X. For each match, if it is \n    a valid ISBN-10, then it replaces that match with the converted 978 prefix EAN-13 \n:ReplaceAllEanIsbn \n    Searches for any 13 digit number. For each match, if it is a valid 978 prefix EAN-13, then it \n    replaces that match with the converted ISBN-10."}, {:name=>"sha1.vim", :summary=>"sha1() function", :description=>"This is a port of rfc 3174 sha1 function.\n\n:echo sha1#sha1(\"hello, world\")\nb7e23ec29af22b0b4e41da31e868d57226121c84"}, {:name=>"hmac.vim", :summary=>"hmac() function", :description=>"This is a port of rfc 2104 hmac function.\n\nhmac#md5(key, text) require vimscript#2806\nhmac#sha1(key, text) require vimscript#2971"}, {:name=>"cucumber.zip", :summary=>"Cucumber runtime files", :description=>"This provides syntax highlightling, indenting, and a filetype plugin for Cucumber, the acceptance testing framework. It's mostly self explanatory. You can use CTRL-] on a step to jump to its Ruby definition.\n\nIf you want to keep up to date, use the version upstream:\n\nhttp://github.com/tpope/vim-cucumber"}, {:name=>"mrkn256.vim", :summary=>"Color scheme designed by mrkn, for 88- and 256-color xterms.", :description=>"These are the color theme designed by mrkn based on \"desert256\" theme created by Henry So, Jr.  This theme is designed to work with with 88- and 256-color xterms.\n\nA screen shot is available at http://img.skitch.com/20100215-rxeg4nguregi8i21dyarspmsgc.png\n\nThe ancestor version \"desert256\" theme is available at http://www.vim.org/scripts/script.php?script_id=1243\n\nThe real feature of this color scheme, with a wink to the \"inkpot\" theme, is the programmatic approximation of the gui colors to the palettes of 88- and 256- color xterms.  The functions that do this (folded away, for readability) are calibrated to the colors used for Thomas E. Dickey's xterm (version 200), which is available at http://dickey.his.com/xterm/xterm.html.\n\nHenry had struggled with trying to parse the rgb.txt file to avoid the necessity of converting color names to #rrggbb form, but decided it was just not worth the effort.  I thank a lot for his results.\n"}, {:name=>"fugitive.vim", :summary=>"A Git wrapper so awesome, it should be illegal", :description=>"I'm not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time. Check out these features:\n\nView any blob, tree, commit, or tag in the repository with :Gedit (and :Gsplit, :Gvsplit, :Gtabedit, ...). Edit a file in the index and write to it to stage the changes. Use :Gdiff to bring up the staged version of the file side by side with the working tree version and use Vim's diff handling capabilities to stage a subset of the file's changes.\n\nBring up the output of git-status with :Gstatus. Press `-` to add/reset a file's changes, or `p` to add/reset --patch that mofo. And guess what :Gcommit does!\n\n:Gblame brings up an interactive vertical split with git-blame output. Press enter on a line to reblame the file as it stood in that commit, or`o` to open that commit in a split.\n\n :Gmove does a git-mv on a file and simultaneously renames the buffer. :Gremove does a git-rm on a file and simultaneously deletes the buffer.\n\nUse :Ggrep to search the work tree (or any arbitrary commit) with git-grep, skipping over that which is not tracked in the repository. :Glog loads all previous revisions of a file into the quickfix list so you can iterate over them and watch the file evolve!\n\n:Gread is a variant of `git checkout -- filename` that operates on the buffer rather than the filename.  This means you can use `u` to undo it and you never get any warnings about the file changing outside Vim. :Gwrite writes to both the work tree and index versions of a file, making it like git-add when called from a work tree file and like git-checkout when called from the index or a blob in history.\n\nAdd %{fugitive#statusline()} to 'statusline' to get an indicator with the current branch in (surprise!) your statusline.\n\nOh, and of course there's :Git for running any arbitrary command.\n\nLike fugitive.vim? Follow the repository on GitHub: http://github.com/tpope/vim-fugitive"}, {:name=>"blowfish.vim", :summary=>"blowfish function", :description=>"This is a port of blowfish function.\n\nlet encrypted = blowfish#encrypt(\"password\", \"data\", 1)\nlet decrypted = blowfish#decrypt(\"password\", encrypted, 1)\necho encrypted\n=> [113, 35, 42, 246, 6, 245, 188, 236]\necho decrypted\n=> [100, 97, 116, 97] (\"data\")"}, {:name=>"underwater", :summary=>"An easy on the eyes dark blue theme", :description=>"A port of my theme for Komodo, this theme is past-midnight coding friendly:\nhttp://imgur.com/iEBiU.png\n\nI do tweak it sometimes, so check back here now and then."}, {:name=>"trogdor", :summary=>"A coding theme to help minimize eye strain.", :description=>"This is an upload of my C/C++ theme for gVim that I designed to minimize long hour coding eye strain, and I think it works better than most.  A picture of it can be found here \nhttp://renderguild.com/vim/colors/trogdor.png\n\n"}, {:name=>"Parameter-Text-Objects", :summary=>"Defines parameter text objects", :description=>"This script defines a parameter text object. A parameter is the text between parentheses or commas, typically found in a function's argument list. \n\nSee: \n:help text-objects \n  for a description of what can be done with text objects. \n\nAlso See: \n:help a( \n  If you want to operate on the parentheses also. \n\nLike all the other text-objects, a parameter text object can be selected following these commands: 'd', 'c', 'y', 'v', etc. The script defines these operator mappings: \n\n   aP    \"a parameter\", select a parameter, including one comma (if there is one). \n\n   iP    \"inner parameter\", select a parameter, not including commas. \n\nThis is a slick version of argtextobj vimscript #2699; though mine is shorter and can handle counts (ie. c3aP).\n\nNOTE: Negative ratings don't help the script to improve. Instead, please send me an email (shown in my profile). Thank you."}, {:name=>"php-doc-upgrade", :summary=>"2005 php-doc plugin w/ added bonuses", :description=>"added things like\n\n- {{{ }}} wrapper support in functions\n- fixed int/bool/string/float crap to properly work\n"}, {:name=>"ZenCoding.vim", :summary=>"vim plugins for HTML and CSS hi-speed coding.", :description=>"\nThis is vim script support expanding abbreviation like zen-coding.\nref: http://code.google.com/p/zen-coding/\n\nThere is a movie using zencoding.vim\nref: http://mattn.github.com/zencoding-vim\n\nSource Repository.\nref: http://github.com/mattn/zencoding-vim\n\nType abbreviation\n   +-------------------------------------\n   | html:5_\n   +-------------------------------------\n\"_\" is a cursor position. and type \"<c-y>,\" (Ctrl + y and Comma)\nNOTE: Don't worry about key map. you can change it easily.\n   +-------------------------------------\n   | <!DOCTYPE HTML>\n   | <html lang=\"en\">\n   | <head>\n   |     <title></title>\n   |     <meta charset=\"UTF-8\">\n   | </head>\n   | <body>\n   |      _\n   | </body>\n   | </html>\n   +-------------------------------------\nType following\n   +-------------------------------------\n   | div#foo$*2>div.bar\n   +-------------------------------------\nAnd type \"<c-y>,\"\n   +-------------------------------------\n   |<div id=\"foo1\">\n   |    <div class=\"bar\">_</div>\n   |</div>\n   |<div id=\"foo2\">\n   |    <div class=\"bar\"></div>\n   |</div>\n   | _\n   +-------------------------------------\n\nTutorial:\n\n  http://github.com/mattn/zencoding-vim/raw/master/TUTORIAL\n\nHow work this:\n\n  http://mattn.github.com/zencoding-vim\n\nTips:\n\nYou can customize behavior of expanding with overriding config.\nThis configuration will be marged at loading plugin. \n\n  let g:user_zen_settings = {\n  \\  'indentation' : '  ',\n  \\  'perl' : {\n  \\    'aliases' : {\n  \\      'req' : 'require '\n  \\    },\n  \\    'snippets' : {\n  \\      'use' : \"use strict\\nuse warnings\\n\\n\",\n  \\      'warn' : \"warn \\\"|\\\";\",\n  \\    }\n  \\  }\n  \\}\n\n  let g:user_zen_expandabbr_key = '<c-e>'\n\n  let g:use_zen_complete_tag = 1\n\nYou can set language attribute in html using zen_settings['lang'].\n"}, {:name=>"jumphl.vim", :summary=>"Highlight cursor line after cursor jump", :description=>"The script highlights the cursor line after a jump. This makes it easy to\nspot the new cursor position. The highlight will be removed automatically\nwhen you move the cursor within the current line, or down or up by one line.\n\nThis is a modification of\nhttp://vim.wikia.com/wiki/Highlight_cursor_line_after_cursor_jump\n\n\nCOMMANDS\n\n:DoJumpHl\n:NoJumpHl\nenable or disable the script.  The script is disabled per default.\n\n\nVARIABLES\n\n:let g:jumphl_ignore_bufpat = '_NERD_tree_\\C'\nDo nothing for buffers where the bufname matches this pattern.\n"}, {:name=>"qmake--syntax.vim", :summary=>"syntax for qmake tool from QT", :description=>"Simple syntax file for project files (*.pro, *.pri) used with qmake tool from QT Toolkit\n"}, {:name=>"R-syntax-highlighting", :summary=>"R syntax highlighting", :description=>"The highlighting principle is sensitivity over specificity.\nThe differences between this file and the prior highlighting syntax file are:\n\nAdd syntax file folding;\nAdd an option to highlight the keywords based on the base package only or based on various contributed packages also;\nAdd some rFunction per some distributions;\nRevise rType based on latest R (Ver 2.10.1) manual;\nAdd rPreProc;\nCorrect rArrow with rOperator according to R manual.\n\nMaintainer contacted but no response. So I upload a new one here."}, {:name=>"BUGS-language", :summary=>"syntax highlighting", :description=>"Yes, it's a quite simple one."}, {:name=>"AddCppClass", :summary=>"this plugin is to help you add a c++ class conveniently", :description=>"this plugin is to help you add a c++ class conveniently. \nafter you install this plugin, type :AddCppClass under normal mode, you will be leaded to a wizard that help you add a c++ class.\n\n\ncontact me if you have any question or suggestion. (email: xuhdev AT gmail DOT com)"}, {:name=>"loadtags", :summary=>"Load the correct set of tags for the file you're editing", :description=>"When you open a file, it searches for tags files in all ancestor directories and loads them. This is useful when you work on several projects and have different set of tags for each of them.\n\nLet's say that you open file /home/user/projects/my_proj/lib/hello.pm. Loadtags plugin looks for files \n\n/home/user/projects/my_proj/lib/tags, \n/home/user/projects/my_proj/tags, \n/home/user/projects/tags, \n/home/user/tags, \n/home/tags, \n/tags \n\nand calls setlocal tags+= on those that exist."}, {:name=>"OpenCL-C-syntax-highlighting", :summary=>"OpenCL C syntax highlighting", :description=>"OpenCL C syntax highlighting."}, {:name=>"pummode", :summary=>"Select completion menu with j and k.", :description=>"Put this in your .vimrc\n\n\tcall pummode#map('i', '', 0, 'j', '<C-n>')\n\tcall pummode#map('i', '', 0, 'k', '<C-p>')\n\tcall pummode#map('i', '', 0, '<CR>', '<C-y>')\n\nSo now you can select popup menu with j and k, <CR> to insert that item.\nSee the document for more detail.\n\nlatest version at http://github.com/tyru/pummode.vim/"}, {:name=>"stickykey", :summary=>"You don't need press very far away meta keys", :description=>"latest version at http://github.com/tyru/stickykey.vim/\n\n\nThis plugin provides Sticky Key to you.\nWith Sticky Key, you can emulate <C-o> by \";o\".\n(In this case, <Plug>(stickykey-ctrl) is mapped to \";\")\n\nAnd I suppose you are using GNU screen :)\nInputting screen's hotkey is a little complicated.\nBut you can send key input to screen fastly, certainly, and easily.\n\n\n\nMAPPINGS\n\n<Plug>(stickykey-...-remap) works like recursive mapping.\n\n\n<Plug>(stickykey-ctrl)\n<Plug>(stickykey-ctrl-remap)\n    Sticky key for |ctrl|.\n\n<Plug>(stickykey-alt)\n<Plug>(stickykey-alt-remap)\n    Sticky key for |alt|.\n\n<Plug>(stickykey-shift)\n<Plug>(stickykey-shift-remap)\n    Sticky key for |shift|.\n\n<Plug>(stickykey-command)\n<Plug>(stickykey-command-remap)\n    Sticky key for Macintosh command key. (see |<D-|)\n\n\nVARIABLES\n\ng:stickykey_when_no_escaped_key\t\t\tstring (default: \"thru\")\n    This variables determines when stickykey can not find\n    escaped input with meta key.\n    For e.g., while waiting the next key after pressing\n    \"<Plug>(stickykey-ctrl)\", <C-o> is input.\n    This variable can be any one of those:\n        \"nop\":\n            Behave like no key is input.\n        \"thru\":\n            Execute key without escaping with meta key.\n        \"again\":\n            Dispose current key input, wait next input again."}, {:name=>"rcom", :summary=>"Evaluate R (www.r-project.org) code via rcom (windows only)", :description=>"The rcom ftplugin uses the RCom interface (http://rcom.univie.ac.at)\nto the R Statistical Package (http://www.r-project.org) for sending \ncode to a running instance of R. This way any R snippet can be easily \nevaluated in that instance of R GUI.\n\nAfter installation, interaction with R via rcom is enabled for all\nbuffers with filetype r. For other filetypes, you can use the\nfunctions |rcom#EvaluateInBuffer()|.\n\nFeatures:\n\n    - Evaluate R code\n    - Omnicompletion for R\n    - Maps for normal, visual, and insert mode\n    - Keyword map (|K|)\n    - Operator\n\nNormal usage~\n\n    1. Start an instance of R GUI and load the image you want.\n    2. Open an R source file in VIM.\n    3. Type <c-cr> to evaluate the current line/visual area in R.\n    4. Type [count]+ or +{motion} to evaluate some text in R. (You can \n       type ++ to invoke |+|.)\n\nFull docs: http://github.com/tomtom/rcom_vim/blob/master/doc/rcom.txt"}, {:name=>"SaveSigns", :summary=>"Save and Restore your Signs", :description=>"This plugin was written to allow you to save your |signs| easily. Signs can be\nused to specific highlight certains rows in a buffer. This might be useful\nwhen using a debugger or display a |mark|. Note however, that this works only\nwhen the signs feature has been compiled into your vim.\n\nIf you have defined signs in your file, you might want to save these signs to\nbe able to reload these signs later on (e.g. with a |Session|). Therefore this\nplugin defines the |:SaveSigns| command, which will store all defined signs in\na file in such a way that reloading that file will restore all defined signs.\n\nWhen saving Signs, the plugin creates a Vim Script, that can be read in using\n|:source| It will save Sign Definitions (see |:sign-define|), Sign placements\n(see |:sign-place|) and the Sign hilighting (see |hl-SignColumn|).\n\nSince signs are usually associated with a buffer or a file, sourcing this file\nusing |:source| will only restore those signs whose buffers are loaded in that\nvim session. Note: All Signs that were defined before reloading this file will\nbe lost.\n\n2.1 :SaveSigns\t\t\t\t\t\t\t*:SaveSigns*\n\n:SaveSigns\t\tStore all currently defined signs in a temporary file.\n\t\t\tThis file will be opened in a new split window and you\n\t\t\tcan edit it further. Note: This file won't be saved.\n\t\t\tYou need to explicitly save it.\n\n:SaveSigns[!] {name}\tStore all currently defined signs in a file called\n\t\t\t{name}. If this file exists, it won't be used a new\n\t\t\ttemporary file will be created. Use ! to force storing\n\t\t\tthe info in that file. This will however erase the\n\t\t\tfile {name}. So use with caution.\n\nKeywords: Signs, Save, Restore"}, {:name=>"ywtxt", :summary=>"Ease vim to write plain documents.", :description=>"1  Introduce:\n   \n   Ease vim to write plain document. It's at the very early stage, with\n   some fancy highlights. Any advice is welcome. My email is:\n\n   ywupub AT gmail DOT com\n\n2  Usage:\n\n   Open a new file: test.ywtxt, done.\n\n3  ywtxt file format:\n3.1  Heading format:\n\nywtxt treats lines start with \"#  \" or \"1  \"(note the following 2\nspaces) as a 1st level heading, \"#.#  \" or \"1.1  \"(note the following 2\nspaces) as a 2nd level heading, so forth.\n\nLines started with optional spaces and \"%\" are treated as a comment\nline. Characters between *bold* will get bolded, /italic/ italic,\n_underlined_ underlined.\n\nTODO and NOTE in document will get highlighted.\n   \n\"Figure #.  \", \"Fig. #.  \", \"图 #.  \", \"Table #.  \",  \"表 #.  \",\n\"Figure #-#.  \", \"Fig. #-#.  \", \"图 #-#.  \", \"Table #-#.  \",  \"表 #-#.  \"\nwill make ywtxt know it's a figure/table, and can generate the figures/tables\nof contents for them(note there are 2 spaces following the \"#.\".\n\nThe first line in document with a trailing space is a title:\n        This is a title, note the spaces after the dot.  \n\nywtxt use foldmethod 'marker' for mom document, so everything you can do with vim folding marker also can be implemented with ywtxt.\n\n3.2  Snip support:\n\nHit <Ctrl-j> then s will prompt you insert a filetype of snip,\nyou can use <tab> to auto-complete the filetype name. The snip region\nwill get highlighted according to the syntax of it(if vim supports it).\nWarn, if you insert a filetype which vim doesn't support, you will meet\nerror warning when opening the file.\n\nNote: Trying to insert ywtxt filetype as a snip will make ywtxt's\nfolding fragible.\n\n3.3  Cross-references\n\nDefine a anchor: '[#anchor]' without the prefix '*', then hit <enter> on the\nstring \"*[path/to/file#anchor]\" will let you go to the anchor.\n\nHit <Enter> on the pattern \"*[path/to/file#anchor]\" in document will let you\ngo to the file and locate onto the \"[#anchor]\" position.\nFor example: \n    *[./mini2.ywtxt#string]\nWill go to mini2.ywtxt and locate on the anchor [#string].\n\nIf you omit the \"file\" part in the pattern, then ywtxt will try to\nlocate the position in the current document.\nFor example: \n    *[#string]\nWill go to the anchor [#string] in the current document.\n\nIf document doesn't contain [#string], ywtxt will warn you and go to normal\nstring \"string\".\n\n3.4  More highlightings\n\nThere are times, however, when the simple markup isn't flexible enough.\nIn such cases, You can use Txtfmt (The Vim Highlighter) to add arbitrary\nhighlighting to my journal entries. The trick is to set 'filetype' equal\nto ywtxt.txtfmt instead of ywtxt alone. The following screenshot shows\nthe result:\n    \n   http://txtfmt.webs.com/ywtxt.htm\n    \nThe highlighting provided by Txtfmt is similar to \"rich text\" in a word\nprocessor: foreground/background colors and all combinations of\nunderline, bold, italic, etc...\n    \nTxtfmt (The Vim Highlighter):\nhttp://www.vim.org/scripts/script.php?script_id=2208\n\n4  Key maps:\n4.1  Key maps for the normal window(mother file window):\n\n      <Tab>               Fold/unfold. Under ^[keyword], echo the corresponding reference name. Under the lines in the bibliography section, jump to the citing point of the document.\n      <Enter>             Under ^[keyword] or the lines in the bibliography section, jump into the .bib file and located to the coressponding location.\n      \\t                  Open a table of contents(toc) window of the current document, it's named as \"_<file you're writing>_TOC_\" .\n      <Ctrl-j>            Prompt for inserting a new (parent/current/child/other level heading)/Non_export2html/Reference/Snip.\n      \\o                  Insert a current level heading line.\n      \\O                  Insert a parent level heading line.\n      \\q                  Close the toc window.\n      \\<tab>              Jump into the toc window without refreshing.\n\n4.2  key maps for insert mode\n      <Ctrl-j>            Prompt for inserting a new (parent/current/child/other level heading)/Non_export2html/Reference/Snip.\n      _{                  _{} insert a subscript.\n      ^{                  ^{} insert a superscript.\n      ^[                  ^[] insert a citation.\n\n4.3  key maps for toc window:\n\n      <Enter>             Jump into the coressponding location of the document.\n      <space>             Jump into the coressponding location of the document without leaving the toc window.\n      x                   Jump into the coressponding location of the document and close the toc window.\n      <Leader><tab>       Jump into the mother file window without changing the position.\n      q                   Close the toc window.\n      r                   Refresh the toc window.\n      Shift_H             Decrease the level of heading.\n      Shift_L             Increase the level of heading.\n      Shift_J             Move current heading region down.\n      Shift_K             Move current heading region up.\n      Shift_D             Delete current heading region, and put the content into register z.\n      Shift_Y             Yank current heading region, and put the content into register z.\n      Shift_S             Auto number the sections mark(#.) in mother file according to the toc's showing.\n      w                   Save the mother file.\n      u                   Undo the mother file.\n      ctrl_R              Redo the mother file.\n      Shift_E             Export the ywtxt file to simple html file.\n      Shift_X             Outline/un-outline the document. (Not working yet)\n      Shift_j             Go to the next line and outline the document. (Not working yet)\n      Shift_k             Go to the previous line and outline the document. (Not working yet)\n      t                   Toggle the toc type: \"Con(t)ents/(F)igures/Ta(b)les/(A)nchors/(L)inks\".\n\n5  html export feature:\n\n   In toc window, hit <shift-e> will export .ywtxt to .html file, after\n   saved the new openning buffer of the generated html file, you can\n   open the html in your browser, or even copy and paste it into your\n   office suite to reserve the looking of .ywtxt.\n\n   All strings _{} will become subscript, ^{} superscript. Comment lines\n   will be deleted. [/path/to/file.bmp] will display directly in\n   html(supports jpg, png, bmp and gif).\n\n   Hit <ctrl-j> then % will insert region mark: \"^% BEGIN_NOHTML {{{\", \"^% END_NOHTML }}}\". Regions between \"^% BEGIN_NOHTML {{{\", \"^% END_NOHTML }}}\" will not be exported to html. Warn!!!: please don't try to nested the region, otherwise you might break up your document!!!\n\n   Hint: You can export the .ywtxt to .html, then paste it into Microsoft Word, then the levels of heading will abey with the html.\n\n6  Misc vars:\n6.1  g:ywtxt_autonumber\n\nConfiguring auto-setting the heading number after creating the heading. Note if you feel it makes vim slow down, you's better disable it.\nExample: set g:ywtxt_autonumber=0\n\n6.2  g:ywtxt_browserapp\n\nConfigure the browser app for viewing the html after exported.\nYou must make sure browser app is runable.\nExample: set g:ywtxt_browserapp = 'opera'\n\n6.3  g:ywtxt_tocwidth\n\nConfiguration for toc window's width. Default is the document's 1/4.\nExample: set g:ywtxt_tocwidth=20\n\n6.4  g:ywtxt_headings_hl\n\nSpecify the colors for headings, you must strictly follow the following pattern:\n\n    \\ 'heading level':[['color for dark term', 'color for light term'], ['color for dark gui',], ['color for light gui'],\n\notherwise, ywtxt will produce error.  Also note that the colors you specify must be ones that vim knows. The setting format is(example is the default setting) is:\n\n    let g:ywtxt_headings_hl = {\n                \\ '1':[['blue', 'blue'],['LightSkyBlue', 'Blue1']],\n                \\ '2':[['yellow', 'yellow'],['LightGoldenrod', 'DarkGoldenrod']],\n                \\ '3':[['cyan', 'cyan'],['Cyan1', 'Purple']],\n                \\ '4':[['red', 'red'],['red1', 'red']],\n                \\ '5':[['green', 'green'],['PaleGreen', 'ForestGreen']],\n                \\ '6':[['magenta', 'magenta'],['Aquamarine', 'CadetBlue']],\n                \\ '7':[['blue', 'blue'],['LightSteelBlue', 'Orchid']],\n                \\ '8':[['green', 'green'],['LightSalmon', 'RosyBrown']],\n                \\ '9':[['blue', 'blue'],['LightSkyBlue', 'Blue1']],\n                \\ '10':[['yellow', 'yellow'],['LightGoldenrod', 'DarkGoldenrod']],\n                \\}\n\nYou can add more highlighting levels than 10 as you wish.\n\nTIP: You can assign blank value for the default bg/fg color in bold face.\n\nlet g:ywtxt_headings_hl = {\n            \\ '1':[['', ''],['', '']],\n            \\ '2':[['', ''],['', '']],\n            \\ '3':[['', ''],['', '']],\n            \\ '4':[['', ''],['', '']],\n            \\ '5':[['', ''],['', '']],\n            \\ '6':[['', ''],['', '']],\n            \\ '7':[['', ''],['', '']],\n            \\ '8':[['', ''],['', '']],\n            \\ '9':[['', ''],['', '']],\n            \\ '10':[['', ''],['', '']],\n            \\}\n\n6.5  g:ywtxt_2htmlpre_usercmds, g:ywtxt_2htmlpost_usercmds\n\nYou can run cmds before and after the 2html routine, format:\n\n    let g:ywtxt_2htmlpre_usercmds=['vim_cmd1', 'vim_cmd2']\n    let g:ywtxt_2htmlpost_usercmds=['vim_cmd3', 'vim_cmd4']\n\nfor example,\n\n    let g:ywtxt_2htmlpre_usercmds=['set nonumber']\n    let g:ywtxt_2htmlpost_usercmds=['set number']\n\nwill make the 2html routine disable the number the lines then back to 'number' option after 2html. However, if you want to do some modification operators, it's very dangrous, use at your own risk!!!\n7  Advanced features\n7.1  Customize section number style:\n\nFor global effect: add a line as the following line in your .vimrc:\n\n    let g:ywtxt_HeadingsPat = '\"Chapter #\" \"Section #\" \"#.\" \"#.#\"'\n\nFor buffer effect: Add a line into .ywtxt(Must add it from a start of line, no any space allowed before the '%'):\n\n    % HEADINGS \"Chapter #\" \"Section #\" \"#.\" \"#.#\"\n\nTo immune from the global effect for some files: Add a line into .ywtxt(Must add it from a start of line, no any space allowed before the '%'):\n\n    % HEADINGS NONE\n\nExplanation:\n\nIf you've defined the headings pattern as the above way, then next time you open the document,  ywtxt will use all(here is \"Chapter #\" \"Section #\" \"#.\") of patterns excluding the last one(here is \"#.#\") as the very first level headings' pattern, the last one is used for ywtxt to determine how to auto-generate the following deeper levels, in this example, the 1st level heading will be \"Chapter #  \", 2nd \"Section #  \", 3th \"#.  \", 4th '#.# ', 5th '#.#.# ', and so on(Note the 2 spaces after the heading). You can omit the last one be a ywtxt's known pattern, then ywtxt will auto-generate the levels from the last one you've specified with \"#.#\", \"#.#.#\", ..., if you want ywtxt to auto-generate with other level, then you have to specify the last one with ywtxt's known heading pattern, e.g.  \"#\", \"#.#\", \"#.#.#\"... Heading is always followed by 2 spaces(but you don't need to specify the space here, ywtxt always auto-inserts them for you.).\n\n7.2  include other files\n\n    Lines starting with '% input /dir/to/file' will include another file when 2html. The feature is very limited at present, no proper heading syntax supporting.\n\n7.3  Advanced .bib file support:\n\n   Warn: It needs you have some basic knowledge on the bib file and its\n   format, if you haven't heard of it, please skip this section. ywtxt's\n   bib supporting is very limited, now it just fits for me, only works\n   for article class.\n\n7.3.1  Usage:\n\n      1) In .ywtxt, you can insert the text like '^[keyword1]' or\n      '^[keyword1, 2]' to mean referrig to a single or multiple references.\n      \"keyword1\" means the keyword in .bib file.\n\n      2) Add the following 2 lines into your foo.ywtxt file whereever you like:\n\n      % bibfile = '/path/to/your/bib/file.bib'\n      % endbib\n\n      3) In toc window, hit <Shift-b> will generate the Bibliography in\n      between the lines of mensioned above for you.\n\n      Warn!!! everything between the above lines will be deleted, you've been warned!\n\n      You can\n      \n        let g:ywtxt_bib_nump = 0\n\n      to disable the [<number>] ahead of the reference list.\n\n      4) Under the ^[keyword], use <Tab> to show you the reference name,\n      under the lines in the Bibliography section, use <Tab> to go to the\n      citing location in the document.\n\n      Under the ^[keyword] or lines in the Bibliography section, use\n      <Enter> to jump into the .bib file and located under the\n      corresponding location.\n\n      After exporting to html, ^[keyword] will change into ^[<num>].\n\n7.3.2  multiple references sections:\n\nYou can use multiple references section, just be sure that every\nreferences section has the following two lines:\n\n      % bibfile = '/path/to/your/bib/file.bib'\n      % endbib\n\n7.3.3  .bib format:\n\n      It has some restrictions with the bib file: every item must start at a new line, and be embraced by {}, ended with a comma ','. Every entry must be ended at a separated line with '}', following is an example:\n\n      @article{keyword1,\n      title = {title},\n      author = {author1 and author2},\n      journal = {journal},\n      volumn = {1},\n      number = {1},\n      year = {2010},\n      pages = {1--2},\n      }\n\n      @book{keyword2,\n      author = {author1 and author2},\n      address = {Nanjing},\n      publisher = {publisher},\n      year = {2010},\n      }\n\n      Customize bib entry type:\n\n      To customize your own types of bib entry, you need to let ywvim know all of them firstly:\n\n          let g:ywtxt_bib_entrytypes = [\"article\", \"book\"] : \n\n      Then specify the format for each bib entry that you have specified before, the format is a list: g:ywtxt_bib_entries_{type}, with the items [entry, trailing character] or [entry, heading character, traling character], the default in ywtxt is:\n\n          let g:ywtxt_bib_entries_article = [\n                      \\[\"author\",\". \"],\n                      \\[\"title\",\". \"],\n                      \\[\"journal\",\", \"],\n                      \\[\"year\",\", \"],\n                      \\[\"volume\",\"\"],\n                      \\[\"number\",\"(\", \") :\"],\n                      \\[\"pages\",\". \"],\n                      \\]\n          let s:ywtxt_bib_entries_book = [\n                      \\[\"author\",\". \"],\n                      \\[\"title\",\". \"],\n                      \\[\"address\",\": \"],\n                      \\[\"publisher\",\", \"],\n                      \\[\"year\",\". \"],\n                      \\]\n\n8  Thanks\n\n   txtbrowser[http://www.vim.org/scripts/script.php?script_id=2899]'s author Guoyooo Ping for the inspiration.\n\n9  Todoes:\n   1) Support to bib input's auto-completion and other input\n   auto-completions\n\n   2) To integrate vimwiki's table support."}, {:name=>"Rackup", :summary=>"Syntax file for Rackup (config.ru) files", :description=>"It defines rackup files (*.ru) and turns on Ruby syntax highlighting on these files. Added \"use\" and \"run\" as keywords.\n\nIt also works nicely with tComment ( vimscript #1173 )\n\ninspired by the Gemfile syntax file by ujihisa ( vimscript #2912 )\n\n"}, {:name=>"colorselector", :summary=>"    provide an emacs-like colorscheme selector buffer.", :description=>"\n    provide an emacs-like colorscheme selector buffer.\n\n    see: http://github.com/c9s/colorselector.vim\n"}, {:name=>"TranslateEnToCn", :summary=>"translate english to chinese in vim", :description=>"put cursor on the english word in normal mode , then type :Trans , \nor in Visual-mode type :TransV ,\nI map the :Trans and :TransV to <Space>,just like \nnnoremap <Space> :Trans<CR>\nvnoremap <Space> <ESC>:TransV<CR>\nin .vimrc files.\nNow,Visual-mode only support 'v' and 'V','<C-V>' will be\ntreated same as 'v' mode\n\nTested in Gvim72 on WindowsXP\n"}, {:name=>"utlx_interwiki.vim", :summary=>"A scheme that adds interwiki linking to the script UTL ", :description=>"A scheme for the vimscript#293 (UTL) that adds interwiki linking.\nRequires vimscript#293. By default it supports UTL version 3.0.\nTo use with UTL 2.0, see Customization below.\n\nA wiki can be defined anywhere in the current file like this:\n\n   [wp]: http://en.wikipedia.org/wiki\n\nA link from the current file to a page on the wiki may look like this:\n\n   iw://wp/Vim_(text_editor)\n\nBy placing the cursor on the link, and executing :Utl, the link will be\ninternally expanded to\n\n   http://en.wikipedia.org/wiki/Vim_(text_editor)\n\nand passed to UTL which will open the URL in the preferred program.\nSee vimscript#293 for more information.\n\nGlobal wikis can be defined in .vimrc:\n\n   let g:utlextra_interwiks = { 'LOG': ['/path/to/log', '.txt'] }\n\nThis defines a wiki named LOG that is in the directory '/path/to/log' and\nuses files with the extension '.txt'. To jump to a log entry from anywhere\nan URL like the following can be used:\n\n   iw://LOG/201002#tn=2010-02-27\n\nwhich will be expanded to:\n   \n   file:///path/to/log/201002.txt#tn=2010-02-27\n\nThe extension .txt is added only if the path in the URL (/201002 in this case)\ndoesn't have one.\n   \nIf at some point the log files are moved to another directory, all references\nto the log entries will be valid if the value for '/path/to/log' is changed \nin g:utlextra_interwiks.\n\nThe format of g:utlextra_interwiks is similar to the format used in\nvimscript#861 (Viki/Deplate). In fact if the 'intervikis' are defined\nfor Viki/Deplate, they will be imported by this script (interwikis\ndefined in g:utlextra_interwiks take precedence).\n\nIf interwikis are defined globally and also in the current file, locally\ndefined interwikis take precedence.\n\nThe format of an interwiki definition is:\n\n   [name]: URL | default_extension\n\nwhere default_extension starts with a dot. The format may change in the future\nto avoid confilcts with other markup applications, for example:\n\n   [w=name]: URL | default_extension\n\n(please report confilcts and suggest alternatives on vim wiki).\n\nThe URL can contain a placeholder '%p' that will be replaced with\nthe path of an interwiki link, for example\n\n   [script]: http://www.vim.org/scripts/script.php?script_id=%p\n   'iw://script/2997' --> http://www.vim.org/scripts/script.php?script_id=2997\n\nInterwikis can also be defined in comments, but only a limited set of\ncomments is currently supported and the feature has not been extensively\ntested:\n   \" [wiki]:...\n   * [wiki]:...\n   # [wiki]:...\n   // [wiki]:...\n   /* [wiki]:...\n\nIf the interwiki URL uses an empty wikiname, the link will be transformed\nas a link inside the current wiki. The path of the current file will be\nmatched to all defined interwikis and if found, the settings for that wiki\nwill be used. If a wiki isn't defined, the target file will have the same\nextension as the current file (if the path in URL doesn't already have an\nextension).\n   \n   'iw:///localfile'        --> ./localfile.txt\n   'iw:///localfile.viki'   --> ./localfile.viki\n   'iw://./localfile'       --> ./localfile.txt\n\n\nCustomization:\n\ng:utlextra_interwiki_scheme = 'iw'\n   Change the scheme to use instead of 'iw'. Multiple schemes can\n   be used for interwiki linking, for example 'iw,wiki'.\n\ng:utlextra_utl_version = 3\n   Which version of UTL is installed. The interface for defining\n   additional schemas handlded by UTL has changed between versions\n   2 and 3. This script supports version 3 by default.\n   Set to 2 to use with UTL 2.0.\n\ng:utlextra_import_viki = 1\n   Set to 1 to import interwikis from Viki/Deplate.\n   Set to 0 to skip importation.\n\ng:utlextra_interwiki_match_case = 0\n   If set to 1, the exact case must be used for interwiki names.\n   If set to 0, first a case-sensitive match will be performed\n   and if it fails a case insensitive will be used.\n"}, {:name=>"BackgroundColor.vim", :summary=>"Define a background color for your vim", :description=>"BackgroundColor.vim only works, if your vim is compiled with signs-support.  If it is, you can use signs, to define a background color for your text.\n\nThis plugin defines these Commands:\n:Red Color the selected Range red\n:White Color the selected Range white\n:Yellow Color the selected Range yellow\n:Blue Color the selected Range blue\n:Green Color the selected range Green\n:Black Color the selected range Black\n:Custom1\n:Custom2\nColor the selected range with your defined Color1 or 2\nThose 2 commands are only defined, if you have specified a color for this command.\nYou can define a custom color using the 2 variables g:bg_color_custom1 and g:bg_color_custom2\n\n:Clear Clear the selected range\n:ClearAll Clear the whole buffer of all background colors.\n\nAll commands (excep :ClearAll, which only uses the whole buffer) accept a range, on which they operate. So you can use, e.g. :%Red to color the whole buffer red.\n\nI am not sure if this is really useful, but in case you find it usefull, please rate this plugin."}, {:name=>"django-template-textobjects", :summary=>"textobject mappings for the django template language", :description=>"Repo: http://github.com/mjbrownie/django-template-textobjects\n\nExample vid (includes other plugins): http://www.youtube.com/watch?v=NbV-OrFMalU\n\n\" Dependencies:\n\"\n\"     textobj-user by Kana Natsuno\n\"     http://www.vim.org/scripts/script.php?script_id=2100\n\"\n\"\n\"\n\" Overview:\n\"     This plugin adds some textobjects to the html.django_template filetype\n\"\n\"     idb/adb - in/around a django {% block %}\n\"     idf/adf - in around a django {% for %} loop\n\"     idi/adi - in/around a django {% if* } tag\n\"     idw/adw - in around a django {% with %} tag \n\"\n\"    so use as you would other text objects in visual selection, cutting and\n\"    deleting etc. \n\"\n\"    Eg. vidb,... vidi ... dadf ... gUidw ... possiblities are as endless as they are awesome\n\nNote there's a complimentary html textobject script as well \n\nhttp://www.vim.org/scripts/script.php?script_id=3000"}, {:name=>"html-advanced-text-objects", :summary=>"some alternate text objects for html", :description=>"Repo: http://github.com/mjbrownie/html-textobjects\nExample vid (includes other plugins): http://www.youtube.com/watch?v=NbV-OrFMalU\n\nThe inbuilt text object for html (cit cat) is great for the immediate tag but requires some additional movement if you have nesting. \nThis plugin gives you some more text objects to play with eg 'cahf' (cut-around-html-form) 'cihb' (cut-in-html-body) , 'viht' (visual-inner-html-table) , 'gUihd' (go UPPERCASE in html div)\n\nThis is still very much a work in progress any ideas on mapping naming conventions/ bugs etc please contact me.\n\n\" Dependencies:\n\"\n\" textobj-user by Kana Natsuno\n\" http://www.vim.org/scripts/script.php?script_id=2100\n\"\n\"\n\" Overview:\n\"\n\" This plugin adds some textobjects to the html filetype\n\"\n\" ihf/ahf - in/around a <form>\n\" ihf/ahd - in/around a <div>\n\" ihf/ahs - in/around a <span>\n\"\n\"\n\" ihb <body>\n\" ihp <p>\n\" ihu <ul>\n\" ihl <li>\n\" iht <table>\n\" ihr <tr>\n\" ihc <td> (in-html-cell to avoid clash with <div>)\n\"\"\n\" so Use as you would other text objects in visual selection, cutting and\n\" dealleting etc.\n\"\n\" Installation:\n\"\n\" Please ensure you have the above plugins installed as instructed\n\" This file should be in your after/ftplugin for html\n\"\n\" ~/.vim/after/ftplugin/html/html_textobjects.vim\n\"\n\" }}\n\nNote theres a complimentary django textobject script \n\nhttp://www.vim.org/scripts/script.php?script_id=2999"}, {:name=>"candyman.vim", :summary=>"dark colorscheme based on jellybeans", :description=>"jellybeans.vim with some clearer color demarcations"}, {:name=>"tag_in_new_tab", :summary=>"Open tag in new tab.", :description=>"With this plugin, Shift-Enter in normal mode opens a definition of identifier under cursor in a new tab. Uses tag files (see :help tags).\n\nSee comments for simpler replacement. Thanks for comment goes to an unknown well-doer! ;-)"}, {:name=>"indentpython", :summary=>"Yet another Python indentation script", :description=>"This is my attempt at indenting Python to conform to PEP8.  Based on the 7.2 Python indentation, with bits of vimscript #974 hacked in."}, {:name=>"vxfold.vim", :summary=>"Fold cycling similar to emacs org-mode (using TAB key)", :description=>"This script implements a fold-cycling functionality similar to\nthe one in emacs org-mode.\n\nSubfolds are open/closed each time TAB or Shift-TAB is pressed.\nTAB operates on the lines below a heading that is in the current line.\nShift-TAB operates on the whole buffer.\n\nAfter each press a step in the following cycle will be performed:\n   1. fold closed\n   2. show direct subheadings\n   3. show structure below heading + first line of text\n   4. unfold all\n\n   NOTES: It is possible to skip step 2 and/or 3, but the per-buffer \n   configuration is still missing (I think emacs-org uses only 1-2-4). In step \n   2 the text under the current heading may be visible; this is because of\n   the way folding is implemented in Vim.\n\nFold cycling will work in buffers that are folded in the following way:\n  * headings have folding levels 1-9\n  * text has a folding level higher than 9\n\nThis means that the script can work with TVO (vimscript#517) without\nchanging the folding mode. To enable fold cycling in TVO mode:\n\n  :VxFoldTvo\n\nFor other modes the foldmethod has to be changed. Foldmethods are\nprovided for viki (vimscript#861) and vimwiki (vimscript#2226).\n\n  :VxFoldViki\n  :VxFoldVimWiki\n\nThe later commands will also work on any buffer that has the headings defined\nwith a number of characters at the beginning of line (viki='*', vimwiki='=').\n\nIf a file uses '#' characers to mark headings with levels, it is also possible\nto use fold cycling in it like this:\n\n  :call vxfold#SetFold_OrgBolCount('#')\n  :VxFoldTvo\n\nThe display of the folded text can be changed with\n\n  :call vxfold#SetFoldTextFirstLine()\n\nwhich is the default for VxFoldVimWiki and VxFoldViki.\n\nVersion 0.1 is less than 2 days old, so it is not perfect. It needs more\nwork especially the customization/command part.\n\nPlease report bugs/suggstions on the Vim/Wiki (link top right).\n\n"}, {:name=>"simplecommenter", :summary=>"simple commenter", :description=>"    quite simple, but support most language (perl,python,ruby,c,javascript ... etc)\n\n    See on github:\n    http://github.com/c9s/simple-commenter.vim/\n"}, {:name=>"CSSMinister", :summary=>"Converts colors in CSS stylesheets from one format to another", :description=>"CSSMinister provides key mappings that convert any hexadecimal, RGB or HSL color values from one format to another.  The mappings fall into two categories:  1) those that change the next matching color only, and 2) those that change all colors matching the requested format in the current file.\n\nMappings that change formats one color at a time include:\n\n  ,xr - hexadecimal to RGB\n  ,xh - hexadecimal to HSL\n  ,rx - RGB to hexadecimal\n  ,rh - RGB to HSL\n  ,hx - HSL to hexadecimal\n  ,hr - HSL to RGB\n  ,kx - color keyword to hexadecimal\n  ,kr - color keyword to RGB\n  ,kh - color keyword to HSL\n\nMappings that change all colors matching the requested color format:\n\n  ,axr - all hexadecimal to RGB\n  ,axh - all hexadecimal to HSL\n  ,arx - all RGB to hexadecimal\n  ,arh - all RGB to HSL\n  ,ahx - all HSL to hexadecimal\n  ,ahr - all HSL to RGB\n  ,akx - all color keywords to hexadecimal\n  ,akr - all color keywords to RGB\n  ,akh - all color keywords to HSL\n\nThis script was tested with CSS, Sass and Less stylesheets.  However, it is possible that it may work anywhere CSS color values are used."}, {:name=>"Twee-Integration-for-Vim", :summary=>"Syntax highlighting and compiler support for twee interactive stories creator", :description=>"This adds syntax highlighting and compiler support for twee files (*.tw).\nThe syntax highlighting was prepared with a dark colorscheme in mind.\n\nTyping :make in .tw files will run twee (1.7.5) on them and pipe it to an html file named as the current file. That is, running :make on fiction.tw will create the fiction.html file.\n\nTwee (http://gimcrackd.com/etc/src/) is an interactive stories creation tool based on TyddlyWiki, developed by Chris Klimas."}, {:name=>"httplog", :summary=>"Highlight access log of Apache, nginx, etc", :description=>"This is a simple syntax file to highlight access log of several HTTP servers (with the default log format).\n\nlocalhost's IP, 192.168.x.x will be highlight differently and 5xx HTTP status code will be highlighted in ErrorMsg. And a few browsers' name will be highlighted too."}, {:name=>"treemenu.vim", :summary=>"customizable treemenu plugin", :description=>"please see: http://github.com/c9s/treemenu.vim"}, {:name=>"delete-surround-html", :summary=>"for deleting surrounding html/django tags", :description=>"Repo: http://github.com/mjbrownie/delete-surround-html\nExample vid (includes other plugins): http://www.youtube.com/watch?v=NbV-OrFMalU\n\n after/ftplugin/html/delete_surround_html.vim\n\n For Deleting Surrounding html  and django tags\n\n This plugin is inspired by Tim Popes surround.vim delete-surround-tag 'dst'\n mapping. It will let you delete the surrounding tag of a specified type\n rather than just the immediate tag.\n\non html filetypes this will add two normal mappings in your vimrc\n\n'dsh' (delete-surround-html) \ndelete - surround - html - (u)l / (l)i / (d)iv / (s)pan / (f)orm / (t)able / t(r) / (c)td / (p):\n\n'dsd' (delete-surround-django) will give you the options\ndelete - surround - django - (b)lock / (c)omment / (i)f* / (w)ith / (f)or :\n\nsimple example here\n\n{% comment%}\n{% block foo %}\n<div id=\"bar\">\n    <ul>\n        <li>'dsdc' here will remove the comment</li>\n        <li>'dsdb' here will remove the block</li>\n        <li>'dshd' here will remove the div</li>\n        <li>'dshu' here will remove the ul</li>\n        <li>'dshl' here will remove the li</li>\n    </ul>\n</div>\n{% endblock %}\n{% endcomment %}\n\nThis scripts mnemonics are intended to compliment these two scripts\n\ndjango-textobjects  http://www.vim.org/scripts/script.php?script_id=2999\nhtml-advanced-textobjects http://www.vim.org/scripts/script.php?script_id=3000\n\nAlso if you want the reverse, ie. to surround a visual selection with django tags\n\nyou can also use http://www.vim.org/scripts/script.php?script_id=1697 with the following mappings\n\nlet g:surround_{char2nr(\"b\")} = \"{% block\\1 \\r..*\\r &\\1%}\\n\\r\\n{% endblock %}\\n\"\nlet g:surround_{char2nr(\"i\")} = \"{% if\\1 \\r..*\\r &\\1%}\\n\\r\\n{% endif %}\\n\"\nlet g:surround_{char2nr(\"w\")} = \"{% with\\1 \\r..*\\r &\\1%}\\n\\r\\n{% endwith %}\\n\"\nlet g:surround_{char2nr(\"c\")} = \"{% comment\\1 \\r..*\\r &\\1%}\\n\\r\\n{% endcomment %}\\n\"\nlet g:surround_{char2nr(\"f\")} = \"{% for\\1 \\r..*\\r &\\1%}\\n\\r\\n{% endfor %}\\n\"\n\nthen go v...sb.. etc"}, {:name=>"tumblr.vim", :summary=>"Syntax highlighting for Tumblr themes", :description=>"Syntax highlighting for Tumblr themes.\n\nScreenshot: http://29.media.tumblr.com/tumblr_kz38v6harE1qz5urdo1_500.png\nSource: http://github.com/inky/tumblr/tree/master/vim/"}, {:name=>"vspec", :summary=>"Test framework for Vim script", :description=>"*vspec* is a Vim library plugin to test Vim script.\n\n\nRequirements:\n- Vim 7.2 or later\n\nLatest version:\nhttp://github.com/kana/vim-vspec\n\nDocument in HTML format:\nhttp://kana.github.com/config/vim/vspec.html"}, {:name=>"tcommand", :summary=>"Select and execute a command or menu item from a list", :description=>"Also available via git: http://github.com/tomtom/tcommand_vim\n\nVIM plugins are cool but with time you forget about even useful \ncommands. This plugin provides a command (|:TCommand|) that lets you \nselect a command or menu item from a list (you can optionally display \nhelp on the currently hightlighted command) and then run it from the \ncommand line. It thus provides an alternative to the built-in \ncommand-line completion.\n"}, {:name=>"ColorX", :summary=>"A script that lets you insert hex color codes by using OS X's color picker", :description=>"This script lets you insert hex or RGB color codes directly into the buffer by using OS X's color picker. This can for example be useful for web developers who are editing their CSS files with Vim on OS X or similar tasks. Furthermore, when the cursor is over a hex color code like #ffffff, this is set as the starting color for the color picker.\n\n:ColorHEX or :ColorRGB will bring up the color picker. After a color has been selected the hex or RGB values will be inserted at the current position in the buffer."}, {:name=>"alex.vim", :summary=>"syntax highlight for alex files", :description=>"Alex is a tool for generating lexical analysers in Haskell, given a description of the tokens to be recognised in the form of regular expressions. This script is syntax file for alex files."}, {:name=>"happy.vim", :summary=>"syntax highlight for happy files", :description=>"Happy is a parser generator system for Haskell, similar to the tool `yacc' for C. This script is syntax file for happy files."}, {:name=>"Cppcheck-compiler", :summary=>"Compiler definition for cppcheck", :description=>"Compiler definition to  use cppcheck static code checker from vim.\n\nUse :comp cppcheck to enable it, then use :make to call it."}, {:name=>"vim-addon-completion", :summary=>"select and cycle completion function", :description=>"This plugin defines a global list of available completion functions so that you can switch completion functions fast.\n\nIf you write a plugin which provides completion functions be kind to your users and use this plugin to never override the choice of a user.\n\nYou can register your completion function to a global list optionally specifying a filetype scope such as \"xml\".\n\nWhen you start completion using <c-x><c-o> you'll be asked which completion function should be used if there are more than one available. This <c-x><c-o> mapping will set 'omnicomplete' by default.\ncompletefunc will be set to the next completefunc automatically (if it wasn't set by you).\n\nIf you jump to a different buffer your last choice will be remembered depending on filetype.\n\nOf course setting a default function can still be annoying. Thus you can just set it in a ftplugin file this way:\nCFComplete haxe#CompleteClassName\n\nOf course there are mappings to cycle through completion functions as well\n\nHave a look at this description:\nhttp://github.com/MarcWeber/vim-addon-completion/blob/master/doc/vim-addon-completion.txt"}, {:name=>"spin.vim", :summary=>"Syntax file for Parallax Spin language", :description=>"This is a syntax file for the Spin language, designed by Parallax for the Propeller microcontroller (\"http://www.parallax.com/tabid/407/Default.aspx&quot;). Now there's cross-platform command line tools to upload your Spin programs to the Propeller, so you don't need the Propeller IDE (and hence, Windows) to use it. \n\nI based this syntax file on the syntax file for the Python language, since the languages have certain similarities."}, {:name=>"EasyOpts", :summary=>"Help other scripts in the option management", :description=>"EasyOpts simplify the options management to other plugins through some facilities:\n - allow the plugin to initialize all the user-exposed variables to a predefined value (if not already specified).\n - allow the user to change the option values through a simple menu\n - check if the values specified by the user are correct\n\nFull documentation about how to use the plugin is provided in the help file and is demoed through some examples"}, {:name=>"Find-files", :summary=>"Easy find & open using find application.", :description=>"findfiles.vim is simple script that helps with finding files, using `find . -iname`\n\nUsage:\n * type  `:Find <file_name> [<find_params> ]` to show list of files that matches\n * type `\\Find` to call `:Find` with `*<cword>*` as search string\n\nResults window:\n * select any file any press <Return> to open it\n * press 'o' to open selected file and close results window\n * press 'q' to close results window\n\n\nScreenshots: \n * http://wstaw.org/m/2010/03/17/2010-03-17-220325_688x314_scrot.png\n * http://wstaw.org/m/2010/03/20/2010-03-20-094909_661x285_scrot.png"}, {:name=>"Bookmarking", :summary=>"A bookmaking facility for Vim for marking points of interest.", :description=>"Add a bookmarking feature to Vim that allows lines of interest to be marked. While similar to marks, you don't need to assign a bookmark to a mark key, instead an infinite number of bookmarks can be created and then jumped through in sequential order (by line number) with no strain on your memory. This is great to use when you are browsing through some source code for the first time and need to mark out places of interest to learn how it works. It lets you just worry about the code and not have to remember which marks you have or haven't used.\n\nUsage:\n  * <F3> / :ToggleBookmark - Set a bookmark at the current location.\n  * <F4> / :PreviousBookmark - Jump to the closest bookmark earlier that the current location in the file.\n  * <F5> / :NextBookmark - Jump to the closest bookmark later than the current location in the file.\n\nYou can follow the development on Github at http://github.com/dterei/VimBookmarking"}, {:name=>"tslime.vim", :summary=>"Send text from vim to a running tmux session", :description=>"Simple script which allow you to send portion of a buffer to a running tmux session.\n\nBased on http://technotales.wordpress.com/2007/10/03/like-slime-for-vim/ which use screen instead of tmux. \n                                                                                                              \n_How to use this script:_ \n  - Considering you have a running Ruby/Python/Clojure/Whatever interpreter in    window 0 of a tmux session named 'my-session'. \n\n  - In vim, select a region in visual mode and press <C-c><C-c>. \n\n  - You will be prompt to enter the session name.  You can type the name of the session directly, in this case 'my-session', or you can press <tab> to  cycle through all the tmux sessions that are currently running. \n\n  - Next, you will be prompt for the window number, in this case 0. Like for session name, completion is available. \n\n  - When you'll press enter, the text you selected will be send to your  interpreter. \n\nCurrent limitation: \n    - The text will always be send to the first pane of the tmux window as tmux doesn't have a way to know which pane you want to paste to. This is only the case for version of tmux <= 1.2 and not for the version in the cvs. "}, {:name=>"vimake", :summary=>"Vimake is a programming aid written in C++ for Linux", :description=>"Ever wanted to edit/compile/assemble/link and debug, then run the completed program all inside one Vim or Gvim editing session. With Vimake you can do this and much more, no need to write Makefiles, no need to exit vim to test your programs, it can all be done using just a few function keys.\nVimake is a programming aid which can build files in C, C++, as(Gas) & Nasm This allows single or mixed language programs to be built at the touch of a  key. You can also write, test and run bash, perl, ruby, and python scripts all\nwhilst in a normal Vim or Gvim session. Used with Vim&#039s QuickFix function it turns Vim into a powerful programming environment.\n~    "}, {:name=>"Command-T", :summary=>"Fast file navigation for VIM", :description=>"The Command-T plug-in provides an extremely fast, intuitive mechanism for opening files with a minimal number of keystrokes. It's named \"Command-T\" because it is inspired by the \"Go to File\" window bound to Command-T in TextMate.\n\nFiles are selected by typing characters that appear in their paths, and are ordered by an algorithm which knows that characters that appear in certain locations (for example, immediately after a path separator) should be given more weight.\n\nFor more details and demonstration screencasts seen on the official Command-T website:\n\n  https://wincent.com/products/command-t\n\nThe latest version of the documentation can be viewed in the project Git repository:\n\n  http://git.wincent.com/command-t.git/blob_plain/HEAD:/README.txt"}, {:name=>"PickAColor.vim", :summary=>"Inserts and edits color codes using a color name or a graphic color chooser.", :description=>"The PickAColor plugin is an attempt to make inserting or modifing colors easier. With it you can use the GTk or Mac OS X color chooser or a color name to insert or modify an existing color code. It borrows heavily from vimscript #3014 and vimscript #2756.\n\nIt provides four commands that will insert the corresponding code:\n- :PickHEX\n- :PickHSL\n- :PickRGB\n- :PickRAW\n\nYou can give a color name as an argument with the command and it will be translated to its corresponding code. You can set which set of color names to use, either web or X11, with the option g:pickacolor_use_web_colors.\n\nUsing any of the commands without arguments will open the Mac OS X (if working on a mac) or GTK (if available) color chooser dialog.\n\nWhen the cursor is on a hexadecimal color code or a color name, it will be replaced with the new color. If you open the color chooser, it will load the current color. This feature can be disabled with g:pickacolor_edit_names and g:pickacolor_edit_hex.\n\nIf there is no hexadecimal color code or a color name under the cursor, the clipboard will be read and parsed for one and it will be used for the color chooser dialog.\n\nWhen you edit or insert a color, the code will be also loaded into the clipboard (under X11 the selection clipboard will be used).\n\nBoth features can be disabled with g:pickacolor_set_clipboard and g:pickacolor_get_clipboard.\n\nThe color name supported are those listed in the following sources:\n\nWeb color names:\n  http://www.w3.org/TR/css3-color/#svg-color\n\nX11 color names:\n  http://cvsweb.xfree86.org/cvsweb/xc/programs/rgb/rgb.txt?rev=1.2\n\nRead :help PickAColor for more details."}, {:name=>"grsecurity", :summary=>"grsecurity ftplugin to edit policy files and see grsec log messages (dmesg)", :description=>"This is a filetype plugin for editing grsecurity poilcy file, here is the short list of features:\n* search for a role, moving to a role, moving to previous/next role\n* search for a subject in a given role, list all subjects of a role in alphabetical order\n* search for an object with given flags (and without some other flags)\n* search for subjects with learning mode set\n\n* reload the policy file and authenticate to admin role\n* list grsecurity messages via dmesg (from the last time that RBAC system was (re)loaded\n\nYou can also find grsecutiry syntax file (it is not included here) among vim scripts."}, {:name=>"rename.vim", :summary=>"rename variables and files in your code", :description=>"This script is a fork of renamec.vim from Bastian Mathes\n\nIt features two functions:\n:call Renamec() renames the variable under the cursor. Cscope is called to get the references to the corresponding C symbol.\n:call Renamef() renames the file under the cursor. The references to this files (like #include\"path/to/file\") are updated.\n\n- When renaming a variable or a file, the quickfix list is updated, so you can jump in the code to modified parts (for example to check if the comments need an update).\n- The buffers where the modifications occured are not unloaded and changes are joined so that they can be canceled easily with ':bufdo undo'\n"}, {:name=>"tex-turkce", :summary=>"convert Turkish characters in .tex files", :description=>"Converts the Turkish characters from TeX form to Unicode and vice versa.\nTürkçe karakterleri TeX halinden Unicode haline ve tersine çevirir.\n\nDefined commands and conversions applied:\nTanımlı komutlar ve uygulanan değişimler:\n\n:KarakterleriNormalKodla\n  ç       =>    \\c{c}\n  Ç       =>    \\c{C}\n  ı       =>    {\\\\i}\n  İ       =>    \\.I\n  ğ       =>    \\u{g}\n  Ğ       =>    \\u{G}\n  ö       =>    \\\"o\n  Ö       =>    \\\"O\n  ş       =>    \\c{s}\n  Ş       =>    \\c{S}\n  ü       =>    \\\"u\n  Ü       =>    \\\"U\n\n:KarakterleriUnicodeKodla\n  \\c{c}   =>    ç\n  \\c{C}   =>    Ç\n  {\\\\i}   =>    ı\n  \\.I     =>    İ\n  \\u{g}   =>    ğ\n  \\u{G}   =>    Ğ\n  \\\"o     =>    ö\n  \\\"O     =>    Ö\n  \\c{s}   =>    ş\n  \\c{S}   =>    Ş\n  \\\"u     =>    ü\n  \\\"U     =>    Ü\n\nStep by Step Usage:\nAdım Adım Kullanımı:\n\nhttp://dl.dropbox.com/u/3027364/tex_turkce/tex_turkce_01.png\nhttp://dl.dropbox.com/u/3027364/tex_turkce/tex_turkce_02.png\nhttp://dl.dropbox.com/u/3027364/tex_turkce/tex_turkce_03.png\nhttp://dl.dropbox.com/u/3027364/tex_turkce/tex_turkce_04.png\n"}, {:name=>"motpat.vim", :summary=>"create motion mappings defined by a pattern", :description=>"Create motion mappings defined by a pattern.\nThe resulting keys can be used in Normal, Visual and Operator-pending mode; and they accept a count.\n\nFunctions:\n\nmotpat#Map({buf-local}, {lhs-forw}, {lhs-back}, {rhs-pat}[, {excl}])\n\n    {buf-local}\t\tif non-zero, create buffer-local mappings, else global mappings\n    {lhs-forw}\t\tkey to be mapped for forward searching (not if empty)\n    {lhs-back}\t\tkey to be mapped for backward searching (not if empty)\n    {rhs-pat}\t\tpattern to define the motion, will be part of the resulting {rhs} of the mapping\n    {excl}\t\ttype of motion, one of \"e\" (default), \"i\" or \"l\", for exclusive, inclusive or linewise, makes use of |o_v|.\n\n\" the following two functions just omit one argument:\nmotpat#Fmap({buf-local}, {lhs-forw}, {rhs-pat}[, {excl}])\nmotpat#Bmap({buf-local}, {lhs-back}, {rhs-pat}[, {excl}])\n\n\nExamples:\n\nftplugin/vim.vim >\n\t\" simpler definition of ]], [[, ][, [], [\" and ]\"\n\n\t\" Move around functions.\n\tcall motpat#Map(1, ']]', '[[', '^\\s*fu\\%[nction]\\>')\n\tcall motpat#Map(1, '][', '[]', '^\\s*endf\\%[unction]\\>', 'l')\n\n\t\" Move around comments\n\tcall motpat#Fmap(1, ']\"', '\\%(^\\s*\".*\\n\\)\\%(^\\s*\"\\)\\@!', 'l')\n\tcall motpat#Bmap(1, '[\"', '\\%(^\\s*\".*\\n\\)\\@<!\\%(^\\s*\"\\)', 'l')"}, {:name=>"orange", :summary=>"a mild color theme", :description=>"a mild color theme"}, {:name=>"Mahewincs", :summary=>"A vim colorscheme", :description=>"I wrote this colorscheme, because I did not find one which pleased me. I also wished to have fun a little. I tried to be in a sence original and I could help myself to use many colors, and I couldn't help to wink at to my colors' country. Mahewincs is actually in the first version, it would change again, but the base will remain the same. I will  also add others colors' definitions for gui(Gvim) and otherslittle things to fix for next version.  \n\nI hope it will be use by the other persons than myself, I will so be pleased."}, {:name=>"Vim-Title-Formatter", :summary=>"Formats the gvim instance titlebar string for efficiency", :description=>"This simple script formats the title string of the gvim/vim instance in the following format:\n\n<servername/user-defined title> | <current filename> (<filepath>)\n\nA user-defined title will take precedence over the servername. If the servername and user-defined title are both not defined or blank, then the title is simply \n\n<filename> (<filepath>)\n\nIf you ever work on multiple projects (each with its files open in a single gvim instance), then using this script, a glance will tell you which instance you're looking at (based on servername or user-defined title)\n\n:SetVimTitleString <titlestring>\n\nwill set the title of the window.\n\n:ClearVimTitleString\n\nwill clear the title of the window."}, {:name=>"syntaxhaskell.vim", :summary=>"Haskell Syntax File", :description=>"Improvement on the default vim haskell.vim syntax file:\n- highlights all Types, not just built in ones\n- highlights top level functions\n- functions and types are highlighted properly in import/export lists\n- repaired spell checking, thus only string and comments are spell checked\n- FFI support\n- QuasiQuotation support\n- highlighting of top level Template Haskell slices\n\non github: http://github.com/urso/dotrc/blob/master/vim/syntax/haskell.vim\n"}, {:name=>"tesla", :summary=>"A dark color scheme for the GUI", :description=>"Features:\n - change cursor color in different modes\n - extra python syntax highlighting (require http://www.vim.org/scripts/script.php?script_id=790)\n\nScreeshots: http://lazycleric.blogspot.com/2010/03/vim.html"}, {:name=>"XTermEsc", :summary=>"highlight xterm escape sequences", :description=>"This highlights text based on xterm escape sequences using the appropriate color. This is similar to the AnsiEsc script but does not depend on the Conceal patch.  (http://www.vim.org/scripts/script.php?script_id=302)\n\nThis is done using one of two modes and is configured by setting the g:xterm_trim_escapes variable. When set to 0, escape sequences will be left in the buffer and highlighted using the Ignore group. When set to 1 and the buffer is modifiable, escape sequences will be deleted and highlighting will be performed based on row-column matching. Row-column matching may not work well if the file is being edited but is appropriate under some circumstances. Note that this only affect the escape sequences themselves, not highlighted text."}, {:name=>"vim-indent-object", :summary=>"Text Objects based on Indentation Level", :description=>"Vim text objects provide a convenient way to select and operate on various\ntypes of objects. These objects include regions surrounded by various types of\nbrackets and various parts of language (ie sentences, paragraphs, etc).\n\nThis plugin defines a new text object, based on indentation levels. This is\nvery useful in languages such as Python, in which the syntax defines scope in\nterms of indentation. Using the objects defined in this plugin, an entire if\nstructure can be quickly selected, for example.\n\nProject Repository:\nhttp://github.com/michaeljsmith/vim-indent-object\n\nFeedback/criticism is welcome:\nmsmith@msmith.id.au\nhttp://msmith.id.au\n\nThis plugin defines two new text objects. These are very similar - they differ\nonly in whether they include the line below the block or not.\n\n        Key Mapping       Description\n\n        <count>ai         (A)n (I)ndentation level and line above.\n        <count>ii         (I)nner (I)ndentation level (no line above).\n        <count>aI         (A)n (I)ndentation level and lines above/below.\n        <count>iI         (I)nner (I)ndentation level (no lines above/below).\n\n\nNote that the iI mapping is mostly included simply for completeness, it is\neffectively a synonym for ii.\n\nJust like regular text objects, these mappings can be used either with\noperators expecting a motion, such as 'd' or 'c', as well as in visual mode.\nIn visual mode the mapping can be repeated, which has the effect of\niteratively increasing the scope of indentation block selected. Specifying a\ncount can be used to achieve the same effect.\n\nThe difference between |ai| and |aI| is that |ai| includes the line\nimmediately above the indentation block, whereas aI includes not only that,\nbut also the line below. Which of these is most useful largely depends on the\nstructure of the language being edited.\n\nFor example, when editing the Python code, |ai| is generally more useful, as\nthe line above the indentation block is usually related to it. For example, in\nthe following code (* is used to indicate the cursor position):\n\n      if foo > 3:\n         log(\"foo is big\") *\n         foo = 3\n      do_something_else()\n\nthe if clause is logically related to the code block, whereas the function\ncall below is not. It is unlikely we would want to select the line below when\nwe are interested in the if block.\n\nHowever, in other languages, such as Vim scripts, control structures are\nusually terminated with something like 'endif'. Therefore, in this example:\n\n      if foo > 3\n         echo \"foo is big\" *\n         let foo = 3\n      endif\n      call do_something_else()\n\nwe would more likely want to include the endif when we select the if\nstructure.\n\nWhen scanning code blocks, the plugin usually ignores blank lines. There is an\nexception to this, however, when the block being selected is not indented. In\nthis case if blank lines are ignored, then the entire file would be selected.\nInstead when code at the top level is being indented blank lines are\nconsidered to delimit the block.\n"}, {:name=>"noweb.vim--McDermott", :summary=>"A syntax file for noweb, with separate highlighting for documentation and code", :description=>"This is a simple syntax for noweb. Basically, it is a nice way to view code and documentation with separate syntax highlighting. Also, it can autofold code blocks.\n\nThe script uses the following options:\n\nnoweb_backend\nnoweb_language\nnoweb_fold_code\n\nSet noweb_backend to the basename of the syntax file you want to use, minus the \\\".vim\\\" extension. So, for TeX, you would:\n\nlet noweb_backend = \\\"tex\\\"\n\nnoweb_language is similar, but is used to highlight the contents of code blocks. So, for example:\n\nlet noweb_language = \\\"cpp\\\"\n\nMakes the syntax for code snippets = C++.\n\nFinally, there is noweb_fold_code, which sets whether or not code blocks should be automatically folded. If 1, then they will be folded. Otherwise, not."}, {:name=>"vimgdb", :summary=>"Emacs like gdb interface to cterm vim", :description=>"This script provides an emacs like GDB interface to vim. Woks in cygwin and unix terminals (no need for +clientserver).\n\nFind the screen shots at \"Vim Viki\"\n\nStart the program like this\n\nvimgdb <gdb-params> <exe-file> <exe-params>\n\nThis will open vim with two windows. Type the gdb commands in bottom window. The top window will show the current file line and breakpoints highlighted.\n\nYou can also jump to top window and use the following keys\n<F6> run\n<F5> continue\n<F7> step into\n<F8> step over\n<F9> toggle break point\nCtr-p Watch the variable under Cursor/Visual selection\n\nwatch the output/variables in bottom window.\n\nKnown Bugs:\nDon't use the quit gdb command (that will hang the vim), instead quit the vim.\n\nCredits:\nThis script is preliminarily based on Tomas Zellerin's gdbvim"}, {:name=>"cmd.vim", :summary=>"Execute shell(or Windows cmd) command in Vim and echo output in Vim", :description=>"\nCmd.vim is a vim plugin to provide vim the ability to execute shell command\ndirectly in vim and echo the result in vim. For example, you could use \":!ls\"\nto list all the files of current directory, Now cmd.vim provide a new command\n\":Ls\" to implement the same function, but the result is in vim insteading of in\nthe shell. The mainpage in Chinese is avaiable at:\n\nhttp://code.google.com/p/cmd-dot-vim/\n\nThere are many well known shell command to implement powerful functions, now I\nport them to vim version, In the current release, there are four command\navailable now, More are to be added. For those not listed below, you could use\n\":Shell your_command\" to execute your_command like \"! your_command\", with the\nresult in Vim insteading of Shell.\n\n\t\":Date\" - print or set the system date and time\n\t\":Gcc\" - gcc - GNU project C and C++ compiler\n\t\":Ls\" - list directory contents\n\t\":Sdcv Words\" - call sdcv to lookup Words in vim\n\n[Note]: Please note that since Vim claim user defined commands must start with an\nuppercase letter, so every shell command start with an uppercase letter.\n\n[Note]: Please note that cmd.vim is an adapter, So please make sure the original\ncommand is available. it is expected that cmd.vim works where the original\ncommand works, whatever it's Linux, Cygwin, Windows, or Mac. \n\n[Note]: In most circumstances, it will be better if you map them to your\nfavorite map, For example, To look up the a word under the cursor, or to lookup\nthe words selected:\n\n\tnmap <script> <silent> <unique> <Leader>l <ESC>:Sdcv '<cword>' <CR>\n\tvmap <script> <silent> <unique> <Leader>l y<ESC>:Sdcv <c-r>\" <CR>"}, {:name=>"RST-Tables", :summary=>"Allows to create and edit restructuredText tables easily", :description=>"This plugin allows to create and edit restructuredText tables easily.\n\nIts adds two new commands:\n\n    ,,c  ->  Creates a new restructuredText table.\n    ,,f  ->  Fix table columns in a table.\n\nFor example, if you have a paragraph with data like this:\n\n    nombre      apellido    edad\n    pepe        zarate      28\n    toto        garcia      29\n\nyou can press \",,c\" to create a simple table:\n\n    +--------+----------+------+\n    | nombre | apellido | edad |\n    +========+==========+======+\n    | pepe   | zarate   | 28   |\n    +--------+----------+------+\n    | toto   | garcia   | 29   |\n    +--------+----------+------+\n\n\nNow, if you change the table content, for example adding characters\nto the first content row.\n\n    +--------+----------+------+\n    | nombre | apellido | edad |\n    +========+==========+======+\n    | Un nombre muy largo que rompe la tabla   | zarate   | 28   |\n    +--------+----------+------+\n    | toto   | un appellido largo...   | 29   |\n    +--------+----------+------+\n\nyou need to fix the columns widths. So, press \",,f\" and you will gets:\n\n    +----------------------------------------+-----------------------+------+\n    | nombre                                 | apellido              | edad |\n    +========================================+=======================+======+\n    | Un nombre muy largo que rompe la tabla | zarate                | 28   |\n    +----------------------------------------+-----------------------+------+\n    | toto                                   | un appellido largo... | 29   |\n    +----------------------------------------+-----------------------+------+\n"}, {:name=>"css3", :summary=>"css3 syntax for vim", :description=>"It's really weird that vim doesn't support css3. \nI am just new to vim, and this is the very first script for vim I've written.\nTake your decision."}, {:name=>"clevercss.vim", :summary=>"syntax highlighting for CleverCSS", :description=>"Rudimentary syntax highlighting for CleverCSS (http://sandbox.pocoo.org/clevercss/)."}, {:name=>"compilerpython.vim--Wolfson", :summary=>"improved python compiler script", :description=>"Based on the script and notation from vimscript #1439. This has been updated for the newer format of py_compile.\n\nFrom the original description:\n\"This compiler script does not run the source through the python interpreter, but instead uses the py_compile package to check for syntax errors.  This allows for a development cycle similar to a compiled language - edit, compile, run.\"\n "}, {:name=>"cmakeref", :summary=>"CMake reference in vimhelp format with a python script to regenerate it", :description=>"CMake reference in vimhelp format with a python script to regenerate it.\n\nReference for CMake 2.8.0 included."}, {:name=>"operator-camelize", :summary=>"snake_case -> SnakeCase, CamelCase -> camel_case", :description=>"*operator-camelize* is a Vim plugin to provide an operator\nto camelize/decamelize a specified text.\n\nRequirements:\n- |operator-user| (vimscript#2692)\n\nRepository:\nhttp://github.com/tyru/operator-camelize.vim"}, {:name=>"scalacommenter.vim", :summary=>"Functions for documenting Scala-code", :description=>"Re-written using the Self.vim Object prototype system, hence\njustifying a major version number increase\n(see: http://www.vim.org/scripts/script.php?script_id=3072).\nThe self.vim code is embedded in the scalacommenter.vim code\nso you don't need to download self.vim.\n\nInspired by Kalle Bjorklid's JCommenter.\nWorks on Vim version 7.0 and above\n\nThis has two capabilities: \n  1) Generating a comment template, and\n  2) Formatting an existing set of comment tags.\n\nGenerating ScalaDoc comments for Scala sources.\nThis is triggered by executing the ScalaCommentWriter() function\n  1) while the cursor is over something meaningful, or\n  2) if a (visual) selection exists,\nThe selected text is parsed and the comment template generated.\n\nThe following comments are generated (in the appropriate situations):\n\n1. File comments: user specifies the template, generated when the\n    cursor is on the first line of the file.\n2. Class comments: generated when on top of a class declaration\n    Tags if applicable: @author, @version, @since, @param, @tparam and @throws\n3. Trait comments: generated when on top of a trait declaration\n    Tags if applicable: @author, @version and @since\n4. Object comments: generated when on top of a object declaration\n    Tags if applicable: @author, @version and @since\n5. Inner Class comments: generated when on top of an inner class declaration\n    Tags if applicable: @param, @tparam and @throws\n6. Inner Trait comments: generated when on top of an inner trait declaration\n7. Inner Object comments: generated when on top of an inner object declaration\n8. Method comments: generated when on top of a method declaration.\n    Tags if applicable: @param, @tparam, @return and @throws\n9. Fields, val and var, comments: generated when on top of a var or val\n    declaration.\n\nIf executed and the class, trait, object or method already has a ScalaDoc\ncomment, an attempt is made to add/remove parameter and template parameter\ntags as needed.\n\nFormatting existing ScalaDoc comments for Scala sources.\nThis is triggered by executing the ScalaCommentFormatter() function\nThe user (visual) selection of the comment tag lines to be formatted\nand invokes the ScalaCommentFormatter() function.\nAs an example, the following is selected and formatted:\n   * @author    Tom  Jones\n   * @version   1.3 03/10/50\n   * @param  name This is the name\n   * @param  value the value to associate with the value\n   *  This is a second line. Here is a second second line.\n   *    This is a third line. Here is a third third line.\n   * @throws java.io.EOFException For no reason\n   * @author Jane Doe\nbecomes:\n   * @author  Tom Jones\n   * @author  Jane Doe\n   * @version 1.3 03/10/50\n   * @param   name                         This is the name\n   * @param   value                          the value to associate with the value This\n   *                                                     is a second line. Here is a second second\n   *                                                     line. This is a third line. Here is a third\n   *                                                     third line.\n   * @throws  java.io.EOFException For no reason\n\nNote that tags are re-ordered and grouped based upon Sun's JavaDoc guide.\nThe start line selected to be formatted must be a comment tag line.\nThe end line selected to be formated should be a comment tag line\nor a line containing additional text for a previous tag line.\n\nWork flow:\n  Generate comment template,\n  Fill in template and then\n  Format the comment's tags.\n\nFor more details about what is produced and how to configure the production,\nsee the start of the script for additional documentation.\n"}, {:name=>"vicom", :summary=>"Intelligent Line Commenter for the most popular programs [LINUX ONLY]", :description=>"Vicom uses the [Ctrl X] and [Ctrl Y] keys to comment or uncomment lines of code in a program.\nIt does this by examining the filename entered on the command line. It automatically writes\nsuitable key maps to a small r/w buffer located in the .vimrc file. Allowing the same pair of\nkeys to perform the comment or uncomment function for different comment styles.\nVicom's purpose is to rapidly comment out or restore blocks of source code whilst testing and\ndebugging. Used with the Vimake package it turns Vim in to a powerful programmers workbench.\nVicom once installed runs as an alias to both Vim and Gvim. So if you normally start a Vim\nsession such as:\n        vi newprog.cc   or gvim newprog.cpp\nVicom first examines the command line and determines that the comment and uncomment maps should\nbe for a cpp program. It then writes these maps to a small buffer then passes control on to Vim\nto perform its normal loading of the file. Now when you press <Ctl+X> or <Ctl+Y> the correct\ncomments occur in your program. If you load a file type that Vicom does not recognize the keymap\nbuffer is cleared.\nVicom recognizes the following file types. Gnu gcc,g++,Nasm,AT&T(gas)as,ruby,perl,python and bash.\n"}, {:name=>"acomment", :summary=>"智能注释插件", :description=>"注释、反注释的插件，\n比较有特色的是头部注释，尽量做到智能了，会根据不同的用户名更新代码头部的注释，并且更新方式和内容是可以自定义的。"}, {:name=>"smartmove.vim", :summary=>"Some useful keymappings for movement", :description=>"1. Jump to next tag on screen in a help file.\n\nWhen the cursor is at or after the last tag on the screen continue the search\nat the top of the screen.\n\nmapped to: <tab>, <s-tab> in normal mode\ndisable with: let g:loaded_smartmove_nexthelptag=-1\n\nThe mapping is created on BufEnter when buftype=help or the buffer is readonly\nand filetype=help.\n\n2. Use H and L instead of ctrl-f and ctrl-b\n\nWhen the cursor is at the top of the screen and H is pressed the screen is\nscrolled up. When count is given or the cursor is not at the top of the screen,\nthe default function of H is executed (Home). Similar for L.\n\nmapped to: H, L in normal and visual mode\ndisable with: let g:loaded_smartmove_smartscreen=-1"}, {:name=>"vimform", :summary=>"Simple text-based forms for vim", :description=>"This library provides simple text-based forms for vim. Currently supported UI elements:\n\n    - text fields (with optional completion, tooltips, and validation)\n    - check boxes\n\nCheck out further examples on:\nhttp://github.com/tomtom/vimform_vim/tree/master/test/\nhttp://github.com/tomtom/vimform_vim/downloads\n"}, {:name=>"changesPlugin", :summary=>"indicate changes of a buffer", :description=>"PLEASE RATE THIS PLUGIN, IF YOU LIKE IT!\n\nFor a screenshot of the plugin see http://www.256bit.org/~chrisbra/changes.png\n\nFollow this plugin at github:\nhttp://github.com/chrisbra/changesPlugin\n\n1. Functionality\n\nThis plugin was written to help visualize which lines have been changes since\nediting started for a file. The plugin was inspired by so called changed-bars,\navailable at other editors, such as Embarcadero C++ Builder (there it is\ncalled Change Bars, see:\nhttp://edn.embarcadero.com/article/33453#6PersonalDeveloperProductivity)\nor Visual Studio where it is called indicator margin (see\nhttp://blog.eveningcreek.com/?p=151).\n\nChangesPlugin.vim uses the |diff|-feature of vim and compares the actual\nbuffer with it's saved state. In order to highlight the indicator signs at the\nfirst column, its using |signs|. For newly added lines, the first column will\nbe displayed with a leading '+' and highlighted using the DiffAdd highlighting\n(see |hl-DiffAdd|), deleted lines will be indicated by a '-' with a\nDiffDelete highlighting (see |hl-DiffDelete|) and modified lines will be\ndisplayed using '*' and a DiffChange highlighting (see |hl-DiffChange|).\n\nThis means, that in order to use this plugin you need a vim, that was built\nwith |+signs|-support and |+diff|-support and you also need an executable diff\ncommand. If neither of these conditions are met, changePlugin.vim will issue a\nwarning and abort.\n\n\t\t\t\t\t\t\t *:EnableChanges*\nBy default the plugin is not enabled. To enable it enter >\n    :EnableChanges\nWhen you run this command, changesPlugin.vim diffs the current file agains\nits saved file on disk and displays the changes in the first column.\n\n\t\t\t\t\t\t\t*:DisableChanges*\nIf you want to disable the plugin, enter >\n    :DisableChanges\n\n==============================================================================\n\t\t\t\t\t\t\t*changesPlugin-Config*\n2. Configuring changesPlugin.vim\n\nThere are basically four different configuration options available.\n\n2.1 Highlighte the whole line\nBy default, changesPlugin.vim will only indicate a change in the first column.\nSetting g:changes_hl_lines to 1 will highlight the whole line. By default this\nvariable is unset (which is the same as setting it to 0).\nIf you'd like to have this, set this variable in your |.vimrc| >\n    :let g:changes_hl_lines=1\n\n2.2 Auto-refresh the changes\nBy default changesPlugin.vim will not automatically update the view. You can\nhowever configure it to do so. This will use an |CursorHold| autocommand to\nupdate the indicator signs after |'updatetime'| seconds in Normal mode when\nno key is pressed. To enable this feature, put this in your |.vimrc| >\n    let g:changes_autocmd=1\n\n2.3 Show what the indicator signs mean.\nBy default, whenever you run |:EnableChanges|, changesVim will print a short\nstatus message, what each sign means. If you don't want this, put this in your\n|.vimrc| >\n    :let g:changes_verbose=0\n\n2.4 Specify different colors.\nchangesVim uses the highlighting used for |diff| mode to indicate the change\nin a buffer. This is consistent, since when you're already used to |vimdiff|\nyou'll probably also know the highlighting. If for any reason you do not like\nthe colors, you have to define your own highlighting items.\nIf for example you want the DiffAdd highlighting to be displayed like White on\na Blue background, you can define it as follows in your |.vimrc| >\n\n    :hi DiffAdd term=bold ctermbg=4 guibg=DarkBlue\n\nIn the same way, you can change DiffDelete for indicating deleted lines and\nDiffChange for indicating modified lines. You can also specify your favorite\nhighlighting colors using your own build |colorscheme|.\n\n==============================================================================\n3. changesPlugin History\t\t\t\t*changesPlugin-history*\n    0.2: Apr 11, 2010:\tAdded Documentation\n\t\t\tcreated an autoload version\n    0.1: Apr 10, 2010:\tFirst working version"}, {:name=>"Maynard", :summary=>"An RPN calculator in an input() prompt", :description=>"Maynard is a (very) simple stack-based RPN calculator written in Python 2.5+ and featuring Python Decimal numbers.\n\nIt uses the Vim \"input()\" function to show the stack and to get input from the user. So if you enter \"2 3 *\" you'll get \"6\" on the stack. Etc. \nPress the = key to write the number at the top of the stack into the current buffer. Press <ESC> to exit. Look at the source for other commands.\n\nIf you have never used an RPN calculator this will probably annoy you, but if you have ever used an HP calculator then it should be reasonably familiar.  I'm keen to get feedback on this one, but please be kind: I'm new to both Vim and Python so it can probably be improved in all sorts of ways.\n\ntoby@cpan.org\n\nBrother Maynard is a Python reference by the way..."}, {:name=>"Otter.vim", :summary=>"Otter theorem prover input file highlighter", :description=>"Highlight input files for the Otter theorem prover. ( http://www.mcs.anl.gov/research/projects/AR/otter/ )\n"}, {:name=>"ciscoasa.vim", :summary=>"Cisco ASA firewall syntax highlighting", :description=>"Cisco ASA - Adaptive Security Appliance\n\nThis syntax file will highlight the many common structures of the configuration. It helps to prevent some obvious mistakes and makes the result a lot more readable.\n\nThe syntax is far from complete, but many important parts have been implemented.\n"}, {:name=>"Translit3", :summary=>"Transliterate a string or your input", :description=>"This plugin provides the ability to transform one sequence of symbols into-\nanother. The typical use case is transliteration of latin symbols into russian-\nsymbols for systems without russian keyboard.\n\nFeatures:\n    \u0097 transliteration of text, provided as function argument;\n    \u0097 transliteration of a selection or a line range;\n    \u0097 input transliteration;\n    \u0097 setting up the input transliteration in current buffer or in all opened\n      buffers;\n    \u0097 plugin system for transliteration function;\n    \u0097 plugin system for input transliteration;\n    \u0097 loading transliteration table from a file, a variable, a dictionary or\n      a function;\n    \u0097 displaying the transliteration table on the screen.\n\nThis plugin also provides Russian documentation. Add «ru» to option «helplang» in order to use it.\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/translit3.txt.html\nRussian documentation: http://vimpluginloader.sourceforge.net/doc/translit3.rux.html\nProject page: http://sourceforge.net/projects/translit3\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader\nvimscript #3185, http://sourceforge.net/projects/jsonvim\nvimscript #3186, http://sourceforge.net/projects/vimstuff\nvimscript #3187, http://sourceforge.net/projects/vimargumentchec\nvimscript #3188, http://sourceforge.net/projects/vimcompcrtr"}, {:name=>"vimsizer", :summary=>"A vim global plugin that allows for quick window sizing", :description=>"Vimsizer is a simple plugin that was inspired by the\nFiresizer (https://addons.mozilla.org/en-US/firefox/addon/5792) extension\nfor Firefox. This plugin gives you the ability to define a re-usable set of\nwindow dimensions.\n\nThere are two default sizes that are defined with the\nvs_window_sizes variable:\n\n    let vs_window_sizes = {\"normal\": \"150 40\", \"bigger\": \"210 50\"}\n\nYou can define your own set of sizes. Example:\n\n    let vs_window_sizes = {\"miniscule\": \"25 10\", \"magiscule\": \"200 60\"}\n\nOnce the window sizes have been defined then you can use the\nVSSelectWindowSize command to switch. Example:\n\n    :VSSelectWindowSize bigger\n    :VSSelectWindowSize normal\n\nYou can also quickly switch to any specific size you like with the\nVSWindowSize command:\n\n    :VSWindowSize 100 20\n\nYou can use the autogroup command to set the window size on startup.\nExample:\n\n    au VimEnter * exe 'VSSelectWindowSize normal'\n\nThis would set the window size to normal upon entering vim for the first\ntime.\n\nYou could also map a shortcut key to a window size. Example:\n\n    map <leader>1 :VSSelectWindowSize normal<CR>\n    map <leader>2 :VSSelectWindowSize bigger<CR>\n\nThe latest code is available on Github: http://github.com/claytron/vimsizer"}, {:name=>"tex_mini.vim", :summary=>"facilitates the preparation of LaTeX documents in vim", :description=>"facilitates the preparation of LaTeX documents in vim without requiring you to master a new interface (it basically provides some minimal <tab> completion for some common LaTeX environments and macros)."}, {:name=>"lastpos.vim", :summary=>"Last position jump improved for Easy Vim", :description=>"With Easy Vim [1], the code to perform a last position jump [2] can't restore a cursor position beyond EOL, because the jump will be executed in Normal mode [3].  The result in this case is a by-one error [4], so most people [5] won't find that annoying ...\n\nThe good news is that Vim seems to store a correct value in the viminfo file -- one solution is to restore the last position while in Insert mode, which is what the plugin does.\n\nEasy Vim actually is not required, the plugin will also work with a normal setup, or when you use  :startinsert  in the vimrc to merely start up in Insert mode.\n\nThe code is slightly more cautious than the original: the cursor won't be moved if something else already moved it, or if the buffer is special (help buffer, etc.).  Furthermore, to fix [6] a related case [7], the BufWinEnter autocommand is used instead of BufReadPost.\n\nThis lengthy description applies for a rather short piece of code.\n\n[1] :help 'insertmode' or :help -y\n[2] :h last-position-jump\n[3] explanation http://groups.google.com/group/vim_use/msg/c571f994f211f8fe\n[4] the position is almost right, no issue for Bram: http://groups.google.com/group/vim_dev/msg/fbcffe406ff01b7f\n[5] especially of the few Easy vimmers\n[6] not sure if \"modify\" is the better word as what follows is probably not a bug\n[7] Cursor column not remembered ... http://groups.google.com/group/vim_dev/msg/b3512cecaab3e0b1\n"}, {:name=>"Manuals", :summary=>"An extensible help system", :description=>"Provides context sensitive word lookup. The manuals in vimhelp format that are not \nrelated to Vim can be kept in separate locations with separate tagfiles.\n\nThe context sensitive lookup is implemented by the plugin vxlib/context.vim. When a \nmanual lookup is required (mapped to K), the plugin checks the context the cursor is \nin - the current filetype and the current syntax element. Then it finds all the help \nproviders that were registered for the detected context. The highest scored provider \nis executed an the results are displayed. It is also possible to display a list of \nproviders applicable in the current context and select one (\\km); if vimuiex is \ninstalled, a popup list will be displayed, otherwise the choices are echoed to the \nscreen and the uesr enters a choice.\n\nExample: when you're editing Python kode and press K on a keyword, an entry from the \nPython documentation will be displayed (the output from pydoc). When the cursor is in \na Python comment or a string, dict will be used instead. Similarly, when editing \nHTML, help for CSS can be displayed when the cursor is in the <style> section.\n\nThere are three possible types of results a provider can produce: \n   t - show help text for keyword\n   k - list similar keywords (and find help for the selected one)\n   g - grep the manuals to find occurences of the word\n\nThe library comes with the following providers (supported types are in parentheses):\n   vimhelp (tkg) - internal vim help\n   extvimhelp (tkg) - external help in vimhelp format, stored in a separate location\n   man (t) - unix man\n   pydoc (tg) - python documentation, requires pydoc program\n   pydiction (k) - uses the dictionary produced by vimscript#850\n   cmakeref (tkg) - vimscript#3045, uses extvimhelp\n   cssref (tkg) - vimscript#918, uses extvimhelp\n   crefvim (tkg) - vimscript#614, vimscript#2353, uses extvimhelp\n   luarefvim (tkg) - vimscript#1291, uses extvimhelp\n   dict (t) - find a dictionary entry using the dict program\n\nThe providers that use extvimhelp expect the manuals to be installed in the location \nset in g:vxlib_manuals_directory. Initially this location is set to ~/.vim/manuals \n(actually the script takes the first item from &rtp and appends /manuals to it). Each \nmanual is stored in a subdirectory of this location, the name of the subdirectory is \nthe same as the name of the provider, eg.\n   ~/.vim/manuals/cmakeref\n   ~/.vim/manuals/luarefvim\n\nAfter you install each manual, don't forget to run :helptags %:p:h on a file from \nthe manual.\n"}, {:name=>"VxLib", :summary=>"Some utility functions packed in a library", :description=>"Script: vxlib\n\nInitially developed for vimuiex (vimscript#2606)\nUsed by manuals (vimscript#3060)\n\nContains a Vim Plugin Generator that parses files in autoload directories and creates \nplugin initialization code for the plugin directory - a single file for all plugins. \nIt searches for specially marked sections in vim files (see vimuiex, manuals).\n\nSee http://vimuiex.sourceforge.net/vimdoc/vxlib_plugin.html for details.\n\nThe command :VxRegen will start the plugin generator, create the plugin \ninitialization code and update the plugin configuration file (plugins/vxplugin.conf).  \n:VxRegen will execute a Python script using an existing Python installation, so \nPython must be in your system PATH. \n\nThe configuration file can be edited with :VxConfig. It is a simple win-ini-type \nfile. Currently it is only possible to include/exclude the plugins from the \ninitialization code. To exclude a plugin, put 'generate=0' in the appropriate \nsections. By default initialization code for all found plugins is generated.\n\nGenerated plugins can also be disabled from .vimrc. Each plugin processed by the \nplugin generator has a unique ID. When the plugins are loaded, this ID is used to \ncheck if the plugin should be loaded or not. To disable a plugin with \nid='vimuiex#textmenu', add 'let g:vxenabled_vimuiex_textmenu=0' to .vimrc.\n\nIncluded in the library is the QuickFixPreview plugin that adds mappings\nto preview the line that is selected in the QuickFix window.\nhttp://vimuiex.sourceforge.net/vimdoc/vxlib_plugins.html#vxlib-quickfixpreview\n\nRelated scripts: genutils(vimscript#197), lh-vim-lib(vimscript#214), \ntlib(vimscript#1863), vim-addon-manager(vimscript#2905), \ntplugin(vimscript#2917),\n"}, {:name=>"256-grayvim", :summary=>"Blue & gray 256 colorscheme", :description=>"Screenshots:\n * http://wstaw.org/m/2010/04/16/2010-04-16-230848_640x772_scrot.png"}, {:name=>"mdark.vim", :summary=>"Dark colorscheme with shade variations, based on rdark/mydark", :description=>"This is a dark colorscheme, based on the great work done in rdark, and its variants (such as mydark). I wanted to build on the idea of pastel highlights with a dark gray background. I ended up expanding the range of colors so that, while one color represents a group of related terms, different sub-groups within that larger group have different shades. For example, the Statements highlight group consists entirely of shades of blue, but Repeat keywords (like for, while...) get a slightly darker blue, while Exception keywords (try, catch, ...) get a lighter blue, and so on. A screenshot at http://web.mit.edu/wolfsonm/www/files/vim/mdark_vim.png shows the scheme in action on many common filetypes.\n\nNote: not all languages will show these differences, as the default syntax files for most languages do not always make such distinctions."}, {:name=>"aftersyntaxc.vim", :summary=>"C Syntax Extensions", :description=>"This file, instead of replacing the normal c.vim file, incorporates and improves upon some of the changes added in vimscript #1201, \"Extended original c.vim.\" Because this file goes in $VIMRUNTIME/after/syntax, it appends these additional definitions to whatever c.vim file comes with the version of Vim you use.\n\nThe main additions identify operators, delimiters, and user-defined functions/function calls. Also included is a wealth of standard ANSI C function names as keywords. This makes C files look significantly richer, especially if your colorscheme includes color variants for the additional syntax groups.\n\nThe Match regexps for user-defined functions have been improved. The rest is mostly just selective porting from the c.vim in vimscript #1201."}, {:name=>"mayansmoke", :summary=>"Ergonomic light-background color scheme.", :description=>"This is a pleasant and ergonomic light-background color scheme, designed for long hours of coding and working. The UI elements are muted without being drab, the syntax elements are colorful without being garish, and the background is relaxing without being soporific. It is of a low-enough contrast so as not to cause eye-burn, but high-enough contrast so as not to cause eye-strain. The syntax coloration offers just a little higher resolution than most, distinguishing between class names vs. functions, strings and numbers vs. other constants, etc. Many of the colors in this color scheme are drawn from Mayan murals, paintings and codices, and thus the name.\n\nScreenshots:\n==========\n\n    - Python: http://jeetworks.org/files/images/mayansmoke-python1.png\n    - C++: http://jeetworks.org/files/images/mayansmoke-cpp1.png\n\nCustomization:\n==============\n\nIf any of the following highlights are defined (e.g., in your \"~/.vimrc\"), these will override the default highlight definitions:\n\n    MayanSmokeCursorLine    (will be applied to: CursorColumn and CursorLine)\n    MayanSmokeSearch        (will be applied to: Search and IncSearch)\n    MayanSmokeSpecialKey    (will be applied to: SpecialKey)\n\nFor example, you can set the following in your \"~/.vimrc\" to select your own colors for these items:\n\n    hi MayanSmokeCursorLine     guifg=NONE   guibg=yellow  gui=NONE\n    hi MayanSmokeSearch         guifg=white  guibg=blue    gui=NONE\n    hi MayanSmokeSpecialKey     guifg=NONE   guibg=green   gui=NONE\n\nAlternatively, you can define one or more of the following values in your \"~/.vimrc\" to select different pre-defined levels of visibility for the above highlights:\n\n    let g:mayansmoke_cursor_line_visibility = 0  \" lower visibility\n    let g:mayansmoke_cursor_line_visibility = 1  \" medium visibility\n    let g:mayansmoke_cursor_line_visibility = 2  \" higher visibility\n\n   let g:mayansmoke_search_visibility = 0 \" low visibility\n   let g:mayansmoke_search_visibility = 1 \" medium visibility (default)\n   let g:mayansmoke_search_visibility = 2 \" high visibility\n   let g:mayansmoke_search_visibility = 3 \" very high visibility\n   let g:mayansmoke_search_visibility = 4 \" highest visibility\n\n    let g:mayansmoke_special_key_visibility = 0  \" lower visibility\n    let g:mayansmoke_special_key_visibility = 1  \" medium visibility\n    let g:mayansmoke_special_key_visibility = 2  \" higher visibility\n\n\n"}, {:name=>"repeater.vim", :summary=>"Repeat an item {n} times", :description=>"Repeater.vim allows you to repeat items {n} times. For example, if you have a\nsection header in ReStructuredText and you need to insert an underbar of\nequals signs that's the same length, you can simply move down a line and\ninvoke ``:Repeater =``. You can also specify a length, but the real utility of\nthis plugin is calculating the length for you.\n\nExamples\n========\n\n1. Insert 78 equals signs:\n    :Repeater = 78\n2. Insert a ReST or Markdown section header for the current line:\n    :Repeater -\n3. Insert \"THIS IS FILLER\" 999 times:\n    :Repeater THIS\\ IS\\ FILLER.\\  999\n"}, {:name=>"ref.vim", :summary=>"Integrated reference viewer.", :description=>"*ref* is a Vim plugin to view the reference.  This plugin can be separated to\ncore of viewer and sources of reference.  As a result, various references can\nbe viewed by the same interface.\n\nFollowing sources are included in this plugin:\n- alc (Online English-Japanese/Japanese-English dictionary)\n- man\n- perldoc\n- phpmanual\n- pydoc\n- refe\n\nReference viewer is mere a buffer to view the reference.  This is opened by :Ref\ncommand or K like :help.  If the reference viewer is already opened in current\ntab page, it is used again.\n\nLatest Version:\nhttp://github.com/thinca/vim-ref"}, {:name=>"recover.vim", :summary=>"Show differences for recovered files", :description=>"Please rate the plugin, if you like it!\n\n2. recover Manual                                       *recover-manual*\n\nFunctionality\n\nWhen using |recovery|, it is hard to tell, what has been changed between the\nrecovered file and the actual on disk version. The aim of this plugin is, to\nhave an easy way to see differences, between the recovered files and the files\nrestored on disk.\n\nTherefore this plugin sets up an auto command, that will create a diff buffer\nbetween the recovered file and the on-disk version of the same file. You can\neasily see, what has been changed and save your recovered work back to the\nfile on disk.\n\nBy default this plugin is enabled. To disable it, use >\n    :RecoverPluginDisable\n\nTo enable this plugin again, use >\n    :RecoverPluginEnable\n\n3. ChangesPlugin Feedback                                   *recover-feedback*\n\nFeedback is always welcome. If you like the plugin, please rate it at the\nvim-page:\nhttp://www.vim.org/scripts/script.php?script_id=3068\n\nYou can also follow the development of the plugin at github:\nhttp://github.com/chrisbra/Recover.vim\n\nPlease don't hesitate to report any bugs to the maintainer, mentioned in the\nthird line of this document.\n"}, {:name=>"Slidedown-Syntax", :summary=>"highlighting for the Slidedown presentation tool", :description=>"Adds syntax highlighting for the Slidedown presentation software (http://github.com/nakajima/slidedown).  Requires that some Markdown syntax file be available."}, {:name=>"ShowMultiBase", :summary=>"Display a number in binary, octal, decimal and hexadecimal formats", :description=>"This is a very simple script to display a number in all or some of binary, octal, decimal and hexadecimal formats at the same time.\n\nThere are several existing converter scripts available, which you might want to check:\n- vimscript #238 : Function to output a number as HEX\n- vimscript #1538 : Convert from base(2,8,10,16) to base(2-32). Also character to html entity.\n- vimscript #54 : Convert to/from various numeric bases\n\nThe motivation of this script is a bit different, however. I often have to read logfiles with hexdumps and numbers with altering bases. Therefore, I want to see the binary, decimal and hexadecimal representations at the same time to help easier reading of these logfiles and to avoid using an external calculator as much as possible. In addition, I wanted to have more control over how the numbers are displayed that I can reuse the displayed numbers in e.g. reports.\n\nE.g, with the default settings, executing the :ShowMultiBase command, while the cursor is on the number 1234, you'll have the following output: b0100 1101 0010 == 02322 == 1234 == 0x04d2\nIf the number is e.g. hexadecimal, you can override the autosensed base (10) with :ShowMultiBase 16\n\nThe conversion utility functions are also available, but if you need a general conversion function, I recommend using vimscript #54.\nThere are several display configurations (e.g: bases to show, prefix usage, segmentation etc.), for details see the comments in the script!\n\nSyntax: :ShowMultiBase [base [number]]\nIf 'number' is not specified, the number under the cursor is taken as input. If 'base' is not specified, it is autosensed. If 'number' is given, 'base' must be also given, but 0 may be used to autosense.\n\nThe following mappings are created by default:\n\\=   Display the number under the cursor with autosensed base in the configured bases\n\\b=  Display the binary number under the cursor in the configured bases\n\\o=  Display the octal number under the cursor in the configured bases\n\\d=  Display the decimal number under the cursor in the configured bases\n\\h=  Display the hexadecimal number under the cursor in the configured bases\n"}, {:name=>"reimin", :summary=>"Add an #include without jumping", :description=>"Usually adding an #include to a C or C++ source file means jumping the cursor to a line near the top of the file, adding the include, and jumping back. I consider jumping away from where the cursor is right now a distracting act, and thus the raison d&#039être of this plugin.\n\nIn normal mode enter :IncludeLocal or :IncludeSystem. You will be prompted for an include: enter the header name with no double quotes or angle-brackets.\n\nThe latest code is at http://github.com/wilhelmtell/reimin, but I will do my best to sync Vim Scripts when I make any significant release."}, {:name=>"self.vim", :summary=>"Vim Self Object Prototype System", :description=>"The self.vim library provides a base Object Prototype for a VimScript object hierarchy which includes\n method and data inheritance. Method  dispatch is static rather than dynamic - a VimScript \nfunction calling limitation. Included are a couple of limited test scripts. Self.vim is used extensively \nby the Scala comment generating/formating script scommenter.vim version-2.0                                                      \n(http://www.vim.org/scripts/script.php?script_id=3047). If you are interested to see larger, \nmore complex usage of self.vim, you\nmight download the scommenter.vim script and see how the ObjectPrototype\nis used there - there are four different object hierarchies.\n(FYI: Scala is a very progressive, large application language, If you are\na Java, C#, C++, Ruby, Python, Erlang application programmer you might\nwant to investigate Scala - or not.)\n"}, {:name=>"kiss.vim", :summary=>"dark and simple colorscheme", :description=>"just a simple colorscheme :)\nscreenshot: http://s.cyrill.lilect.net/uploader/files/201004252246250000.png "}, {:name=>"Trac-Wikimarkup", :summary=>"Better syntax highlighting for Trac wikimarkup", :description=>"Syntax highlighting for Trac WikiMarkup.  \n\nI was a little unsatisfied with the other available wikimarkup highlighters available-- they were either too focused on a specific wiki engine to be useful for Trac, or its highlighting was less-than-complete.\n\nIn an effort to address this issue, I decided to make a few updates and modifications to http://www.vim.org/scripts/script.php?script_id=725."}, {:name=>"NrrwRgn", :summary=>"A Narrow Region Plugin similar to Emacs", :description=>"This is a script emulates Emacs Narrowing feature, by opening a selected range in a new scratch buffer.\n\nSimilar scripts:\nnarrow_region: http://www.vim.org/scripts/script.php?script_id=2038\nnarrow: http://www.vim.org/scripts/script.php?script_id=2097\nnarrow: http://www.vim.org/scripts/script.php?script_id=2446\n\nUse :NarrowRegion to narrow a line based selection or alternatively visually select a range and press <Leader>nr\n\nIn the scratch buffer simply save it and the changes will be copied into the original file.\nThis is only a very simple help. You should probably read the help, that is provided with the plugin. See :h NarrowRegion\n\nThis Plugin is also available at github: http://github.com/chrisbra/NrrwRgn\n\nPlease rate this plugin if you like it!"}, {:name=>"ego.vim", :summary=>"A VIM color scheme using a dark background and beautiful foreground colors.", :description=>"Based on the ego Xcode theme: http://developers.enormego.com/view/xcode_ego_theme \n\nThis is my first theme I've created, so it needs quite a bit of improvement. Feel free to fork the project and contribute: http://github.com/geetarista/ego.vim \n\nScreenshot: http://github.com/geetarista/ego.vim/raw/master/screenshot.png"}, {:name=>"Delphi-7-2010", :summary=>"Delphi syntax highlight", :description=>"This is an updated delphi.vim syntax file for Delphi 2010, based on the original by Thorsten Maerz describedin vimscript #60.   The hard-coded colours have been removed, so changing color schemes will change the delphi syntax highlight colors too.   For Delphi 2010, additional language features will now be recognized, such as \"reference to\" and \"class procedure\" and so on.  I tried to contact Thorsten to find out about updating the existing script, but I have not received a reply as yet.\n\n"}, {:name=>"CodeFactory", :summary=>"A clean and dark color scheme for developers (Vim/GVim)", :description=>"This color scheme uses dark background and sober colors to develop without headache ;-)\n\nThe colors of the terminal version could be more pleasant if you use modified colors in .Xdefaults (or .Xresources depending on your O.S.)\n\nYou can contact me to get my .Xdefaults color theme (for xterm and urxvt): dsw [AT] mailoo.org\n\nEnjoy!\n\nPS: Sorry for my bad english..."}, {:name=>"SyntaxAlwaysOn", :summary=>"deprecated", :description=>"deprecated"}, {:name=>"JavaScript-Indent", :summary=>"Javascript indenter (HTML indent is included)", :description=>"Hosted at: http://code.google.com/p/web-indent/\n\n*Update: (5/14/10) - Beta 3.0 Released (See Below) (First Release Candidate)\n*Update: (5/6/10) - Beta 2.2 Released (See Below)\n*Update: (5/6/10) - Beta 2.1 Released (See Below)\n*Update: (5/5/10) - Beta 2.0 Released (See Below)\n*Update: (5/3/10) - Beta 1.0 Released (See Below)\n\nSummary:\n================================================================================\nI wrote this basically due to the lack of any good javascript indent plugin out there.  And due to javascripts lax syntactical structure cindent() just wont cut it. \n\nWeb-Indent handles all basic forms of add notes, bugs and multi-line and singe line objects: \nvar x = {\n     y : {\n           z;\n     }\n}\n\nvar y = [\n      x,\n      y,\n      z\n]\n\nvar z = {x : x, y : y, w: w};\n\nt; // no indent\n\nHandles all basic control structures (with or without leading '{'):\nif(x)\n      // comment\n      y;\nz;\n\nHandles inline and nextline control structure block initializers ('{' in the vernacular):\nif(x) {\n     x;\n} \nelse \n{\n     z; \n}\n\nHandles multi-line function declarations:\nvar x = function( \n      y, // notice one tab over\n      z,\n      w) {\n      t;\n}\n\nHandles multi-line control structure statements:\nif( x == y ||\n      y == z ||\n      z == w) \n{\n      t;\n}\n\nThis indenter is also fully compatible with Mootools and esp. its Class package.  I haven't tested it with any of the other frameworks, but due to their similar syntactical nature, I'm assuming they will work as will.\n\nIncluded Files:\n================================================================================\n      ~test.js - A sample js file with various coding patterns.  Set tabstop=6 and shiftwidth=6 and comments should line up correctly.\n      ~indent/javascript.vim - The core indenting file\n      ~indent/html.vim - An updated version of the pre-packaged html indenter that utilizes javascript.vim (MUST BE LOCATED IN SAME DIRECTORY!!)\n\nRelease Notes:\n================================================================================\n~Beta 3.0 Released: (5/14/10)\n      - Fixed: Runaway Indentation.  \n      - Fixed: indentkeys now correctly invoke indent.\n      - Fixed: Comment lines with keywords are correctly indented.  Thanks to trojhlav for pointing it out.\n      - Notes:\n            \\ First Release Candidate (v 1.0)\n            \\ Correctly indented entire jQuery source.\n            \\ Correctly indented entire MooTools source.\n      - Concerns: \n            \\ Still no support for continuation lines.\n~ \n\n\n~Beta 2.2 Released: (5/6/10)\n      - Added: Support for enabling/disabling logging.  (Enabled by default.  To Disable: let g:js_indent_log = 0 somewhere in your .vimrc script)\n      - Added: Support for while() control block. \n      - Added: Support for do {} while(); control block. \n      - Added: Support for with() {} control block. \n      - Added: Skeleton support for all MULTI-LINE cntrl blocks  SINGLE LINE cntrl blocks DO NOT HAVE SKELETON VERSIONS!! \n      - Added: Skeleton support for function declarations. \n      - Added: Skeleton support for basic objects. \n      - Added: Tests for skeleton code.\n      - Fixed: Html indent now correctly calls GetJsIndent() while inside <script type=\"text/javascript\"></script>\n      - Fixed: Html will now source the javascript.vim (indent file) via two methods:\n            1.  If g:js_indent is set and points to the location of the indent file, it will source it.\n            2. Looks in your runtime path for indent/javascript.vim (sources first one found)\n      - Added: Tests for HTML + JS\n      - Notes:\n            \\ None\n~ \n\n~Beta 2.1 Released: (5/6/10)\n      - Fixed: Object ending regex is now anchored to beginning and end of line and cannot contain preceding {'s or ['s.\n      - Fixed: Multi Line Invocations.  \n      - Dependencies:\n            \\ Syntax Script must return *Comment* for any type of comment when invoked with synIDattr\n      - Concerns:\n            \\ Multi Line Invocations must end in ; or , to be recognized (although JS doesn't specifically require this) (so as not confuse with multi line declarations)\n            \\ Does not recognize continuation lines. \n      - Notes:\n            \\ Entire test.js file is now correctly indented (except for continuations)\n            \\ NOW SUPPORTS SKELETON CODE\n                  if(x) {\n                  } else if(y) {\n                  } else {\n                  }\n~\n\n~Beta 2.0 Released: (5/5/10)\n      - Now hosted on Google Code: http://code.google.com/p/web-indent/\n      - Completely rewrote script\n      - Fixed: Comments are determined by synIDAttr instead of Regex\n      - Added: Anonymous function support. (function(){})();\n      - Dependencies:\n            \\ None\n      - Concerns:\n            \\ Too many if statements, but extremely well organized.\n            \\ Sometimes vim has trouble indenting an entire file.  Have to scroll through to location above problem area and use =G again. Is this a problem with how the scripts get loaded?\n      - Notes\n            \\ None\n~\n\n~ Beta 1.0 Released: (5/3/10)\n      - Initial Release\n      - Dependencies:\n            \\ Javascript Syntax: http://www.vim.org/scripts/script.php?script_id=1491\n      - Concerns:\n            \\ Comments are determined by regex (==> Cannot determine middle of block comments)\n            \\ Code is poorly organized and hard to understand.\n~\n\nPS: I'm also not sure if I'm allowed to repost the html.vim, since I couldn't find a license for it.  I'm pretty sure it was the one packaged with vim by default.  If anyone has any objections, I'll take it down immediately."}, {:name=>"tagmaster", :summary=>"Tags manipulation script", :description=>"Tagmaster is a plugin aimed for easy operating with tags and tag files. It allows generating tags for current project or file, deleting tags for given file, updating tags, etc.\nTags file name can be either specified explicitly, or deduced. Any tag file (found with tagfiles() function) is checked for if it can belong to current project (placed at the same directory level, or several levels up).\nBefore updating tags for given file, they all are deleted first to avoid duplicate tags.\nWhen generating tags for project, current filetype is considered and only files of this filetype are scanned. This is done to avoid collecting garbage from auxiliary files like config scripts, Makefiles, etc.\n\nNOTE: This plugin supports only exuberant ctags version. You should have it in your PATH environment."}, {:name=>"qiushibaike", :summary=>"在Vim上看糗事百科", :description=>"这个脚本实现了在vim上看糗事百科。\n需要环境：\n    python（默认的vim7.2是支持python2.4的，如果想要2.6的版本，请到  http://www.vimer.cn  下载&#65289;\n    BeautifulSoup\n使用方法：\n    JOKE            最新糗事\n    NEXTJOKE        下一页最新糗事\n    BESTJOKE        最糗糗事\n    NEXTBESTJOKE    下一页最糗糗事\n\n作者主页：http://www.vimer.cn"}, {:name=>"dc.vim", :summary=>"syntax definitions for dc (desktop calculator)", :description=>"Syntax definitions file for dc (desktop calculator). \n\nCatch a glimpse of it at http://brhefele.brainaxle.com/misc/dc.html - note this html file was generated using vim's export highlighted as html tool.\n\nImportant note: this was written to support the way I code dc. The big problem with highlighting dc (IMO) is that of macros. Macros are stored in strings, with no clear way to delineate what a string may or may not be used for later on. Or, at least, no prescribed way. So, I need to prescribe my own way. Basically, everything inside [] is interpreted as a string, unless the string is followed by an execute command (x) OR a save command and a newline (s.\\n). This allows me to use macros as functions, and for the sake of tidiness, I keep all functions on their own lines. I assume, then, that a []sx in the middle of the line is just a string being saved for later. I make a lot of assumptions. And I may change this later to allow for some variables to be set depending on a user's usage. For instance, I also set load/save register operations to a specific highlight. But if you load a register to execute, including as part of a conditional, the whole operation changes to a different highlight (that for execute).\n\nSo again, this won't work for everyone. It might not work for anyone except me, really, since who uses dc these days anyway? But if you have any issues, suggestions, I welcome any and all emails on the subject.\n"}, {:name=>"tf2.vim", :summary=>"TF2 script syntax highlighting", :description=>"Extremely basic syntax highlighting of Team Fortress 2 scripts (.cfg). Pretty much a find/replace of the original quake.vim with the custom color support removed."}, {:name=>"glyph.vim", :summary=>"Syntax highlighting for the Glyph Macro Language", :description=>"A simple syntax highlighter for the Glyph Macro Language. For more information on the Glyph Document Authoring Framework, see http://www.h3rald.com/glyph/"}, {:name=>"OutlookVim", :summary=>"Use Vim to edit the body of an email from Microsoft Outlook", :description=>"For Windows users, this plugin will allow you to add a button in Microsoft Outlook which will create a new buffer in Vim with the body of the current email.  The buffer can be edited in a specific instance of Vim and you can choose whether to use tabs.\n\nThe filetype of the buffer is automatically set to \"mail\".  This allows you to use all of Vim's great plugins and editing features to alter the email and customize the buffer using Vim's standard filetype support.  When finished, simply saving the file will automatically update the body of the email in Microsoft Outlook.\n\nThis has been tested with Outlook 2003 (WinXP SP3) and Outlook 2007 (Windows 7 64bit and 32bit).\n\nThere are a number of preferences you can set within the plugin to customize it for your use.  \nThese settings can be explored here:\n:h outlook-configuration\n:h outlook.txt\n\nInstallation instructions for Outlook can be found here:\n:h outlook-macro\n:h outlook.txt\n\nNOTE:  All code is included in these files.  There are no executables you need to run on your system.   For those interested, the documentation outlines how Vim and Outlook communicate with each other.\n\nPlease use the VimWiki (link at top of page) to post comments and suggestions.\nI routinely monitor the vim_use group.\n\n\n"}, {:name=>"GetFile", :summary=>"Select and Open a File by typing part of its path.", :description=>"This script  caches the content of a part of the filesystem and help retrieves the appropriate file based on a pattern.\nIt has been heavily inspired by the FindFile plugin. However, this plugin is not limited to filename patterns only as you can type any part of a file path (thus including folders).\nThe plugin also comes with some options that allow faster search like automatic search 'completion' of folders, case sensitivity, ...\nThe pattern supports wildcards (* / ?).\n \nIt is a 2 step process to use:\n    1. cache the files\n    2. search through them\n\nThis is my first vim script so feel free to give me advices :)\n\nHere is the documentation that you can find inside the script header:\n\n               You can use the following functions:\n\n                 \":GetFileCacheFiles <path>\" - Caches the files. Has to be called at least once before a call to \":GetFile\".\n                 \":GetFileClearCache\" - Clear the cache.\n                 \":GetFile\" - Start searching for a file.\n\n               You may want to add the following lines in your ~/.vimrc file:\n               (or whatever shortcut you find suitable)\n\n               \"nmap <silent> <unique> fc :GetFileCacheFiles .<CR>\"\n               \"nmap <silent> <unique> ff :GetFile<CR>\"\n\n               Once in the \"[GetFile]\" buffer:\n                 \n                 Use \"<Up>\" / \"<C-p>\" and \"<Down>\" / \"<C-n>\" to select a file. \n                 \"<CR>\" opens the selected file. (If no selection done, it opens the first file).\n                 \"<ESC>\" exits the buffer.\n\n               Supported Options that you can specify in your .vimrc file:\n\n                   \"g:GetFileIgnoreList\" \n                       List of patterns to ignore.\n                       Default = ['*.o', '*.pyc', '*/tmp/*', '*~', '*/.svn/*', '*#']\n\n                   \"g:GetFileIgnoreCase\"\n                       Do not take case into account when searching files.\n                       Default = 0\n\n                   \"g:GetFileAutoFillFolder\"\n                       Speeds up the search when searching through folders as\n                       typing '/' is equivalent to typing '*/'.\n                       There are 3 possible values:\n                           0: do not use this option\n                           1: auto complete the current folder only. (match till\n                           the next '/' only)\n                           2: auto complete the entire sub hierarchy. (match\n                           till the last possible '/')\n                       Default = 1\n\n               Example of how to set an option in you .vimrc file:\n               \n                   \"let g:GetFileAutoFillFolder = 2\"\n"}, {:name=>"vimtl", :summary=>"Allow to handle todo lists", :description=>"Keyboard shotcuts\n=================\n\n,c\n    Create a task.\n,s\n    Create a subtask\n,d\n    Mark Done\n,r\n    Mark as cancel\n,1\n    Convert to OTL style\n,2\n    Convert to litle box style\n,3\n    Convert to single sytyle\n"}, {:name=>"RTL", :summary=>"Color highlighting for gcc rtl dumps", :description=>"This plugin is the syntax file for rtl gcc dump which is useful for gcc debugging."}, {:name=>"Sessions", :summary=>"Vim-Sessions is an automatic session generator, per project basis", :description=>"Vim-Sessions is an automatic session generator, per project (aka directory) basis, for Vim editor.\n\nMore information, please visit the repository http://github.com/edsono/vim-sessions."}, {:name=>"autocomp.vim", :summary=>"Auto-complete VIM script tailored for those with RSI", :description=>"The purpose of this script is to allow the user to auto-complete a word without having to first press a key combination to open up the list of options, and then have to press more keys (usually the arrow keys) until you get to the word you want to type. With this script, you type a letter or two, and then the number that represents the word that you want to type. The idea is to have the user press as few keys as possible for an auto-completion.\n\nThis script is made for people who cannot type as much as they used to anymore. It will probably slow you down somewhat initially, but if you're looking for this script, you're probably not worried about speed.\nUntil someone figures out how to connect speech recognition to VIM in a useful way, this may help.  :-)\n\nDocumentation and usage instructions are in the file autocomp.vim."}, {:name=>"TortoiseTyping", :summary=>"a minimal typing tutor for touch-typists", :description=>"Contents:\n  1. Description\n  2. Quick Start\n  3. Advanced Options and Features\n  4. Licensing\n  5. Installation\n\n\n========================================\n1. Description\n\nTortoiseTyping is a minimal typing tutor aimed at touch-typists who would like to spend a few minutes a week sharpening their skills.\n\nThis script is called TortoiseTyping because with typing its slow, steady, and accurate wins the race.\n\nCompatible with Vim 7.2 and above.  Requires the Vim was compiled with the python switch, which will be true for almost all modern distributions.\n\n\n========================================\n2. Quick Start\n\nEscape ends the program.\n\nRun the :TutorialTyping command to start the two-minute tutorial.\n\nRun the :TortoiseTyping command to start the program with default settings: \"A Christmas Carol\" text, shuffled sentence order, and 150 word session.\n\nRun the :FileTyping <filepath> command to start like :TortoiseTyping, but with the file <filepath> of your choice.\n\n\n========================================\n3. Advanced Options and Features\n\nThe main screen has a progress bar showing percent completion through text.  (Use the tab key to toggle graphical/fraction representation.)  Below that are words per minute and accuracy statistics.\n\nMain program options:\n- filepath: choose source file\n- randomize: whether or not to shuffle sentence order\n- wordcount: truncates source to wordcount number of words\n\nThe main entry point into the program is the python startTyping() function.  The :TortoiseTyping command calls it like this:\n\n  command! TortoiseTyping py startTyping(\n    \\ filepath=\"xmasCarol.txt\",\n    \\ randomize=True,\n    \\ wordCount=150)\n\nFeel free to use combinations of commands, mappings, and functions to customize how the program starts.\n\n\n========================================\n4. Licensing\n\nThis work is distributed as is, and I make no guarantee that it won't trash your system.  As always when trying new things, it makes good sense to save what you're working on first.\n\nFeel free to modify and distribute this script in any way, so long as you credit me and send me an email if you do anything cool with it.\n"}, {:name=>"syntax-codecsconf", :summary=>"syntax for mplayer-src codecs.conf", :description=>"This HELPFUL syntax definition makes your mplayer codecs.conf file shine."}, {:name=>"cvsdiff.vim--McCutcheon", :summary=>"visual 'cvs diff -r version' utility for vim diffsplit", :description=>"This is a version of vimscript #1214 with full functionality: previously the version argument was mis-handled."}, {:name=>"yaifa.vim", :summary=>"Yet Another Indent Finder, Almost...", :description=>"NOTE: This update makes the start-up way faster, sorry for the previous behaviour.\n\nThis plug-in will automatically try to detect the kind of indentation in your file and set Vim's options to keep it that way. It recognizes three types of indentation:\n\n1.- Space: Only spaces are used to indent.\n\n2.- Tab: Only tabs are used.\n\n3.- Mixed: A combination of tabs and space is used. e.g.: a tab stands for 8 spaces, but each indentation level is 4 spaces.\n\nThe values of 'expandtab' and 'shiftwidth' set in your vimrc will be used as the default values.\n\nUse :YAIFAMagic to manually detect and set the indenting settings for the current file, it'll also echo the found settings.\n\nYou can set yaifa_max_lines to customize the max number of lines that will be scanned:\n\n    let yaifa_max_lines = 4096\n\nThis script started as a port to VimL from Philippe Fremy's Python script Indent Finder (vimscript#513), hence the \"Almost\" part of the name."}, {:name=>"Silence", :summary=>"Light color scheme", :description=>"Continuation of the http://www.vim.org/scripts/script.php?script_id=2266 with some updates, \n\nsome screenshots :\n\n( html )  http://img192.imageshack.us/img192/1646/screenhtml.png \n( php )  http://img706.imageshack.us/img706/1218/silencek.png \n( C )     http://img295.imageshack.us/img295/1156/screenc.png\nhttp://img405.imageshack.us/my.php?image=c13rf1.png \nhttp://img210.imageshack.us/my.php?image=c14lk3.png \n\nUpdates for constants, int, float types, boolean now have a light background. "}, {:name=>"PNote", :summary=>"Power Notes", :description=>"Syntax, Folding function and clipboard yank with reformat function for my personal notes\n\nNo documentation! It is simple enough as to understand just by looking at the little code. \n \nAn example of my notes:\n\n# Install\n    ; Bootstrap if doing this not in NetBSD\n        Check platform notes <url:http://www.netbsd.org/docs/pkgsrc/platforms.html&gt;\n        $ cd pkgsrc/bootstrap\n        ; The parameters for OSX -> case and non root user\n        $ ./bootstrap --ignore-case-check --unprivileged\n"}, {:name=>"mflrename", :summary=>"Multiple file rename", :description=>"Small script to ease renaming a set of files\n\nThe idea is to make multiple file renaming as easy (and powerful) as editing a dump of file names. The script will just generate a script with the rename commands\n"}, {:name=>"nevfn", :summary=>"Dark colorscheme based on desert", :description=>"."}, {:name=>"Tumble", :summary=>"A plugin to post to the tumblr.vim microblogging service", :description=>"Tumble for vim\n==============\n\nThis script adds to vim the ability to send text entries to the tumblr.com\nblogging platform. It supports markdown formatting, and is able to edit and\ndelete previous entries.\n\nIn order to work, the variables\n\ntumblr_email\ntumblr_password\ntumblr_tumblelog\n\nmust be set. They are evaluated on every command, so you can change them on\nthe fly in case you need to switch to another blog.\n\ntumble.vim adds three commands to Vim:\n\n:Tumble\n:TumbleLink\n:ListTumbles\n\nThe syntax for :Tumble is\n\n:[range]Tumble [draft|publish]\n\nBy default, it posts the entire current buffer to tumblr.com, but a range can\nbe supplied if that isn't desired. For example, \":,Tumble\" would post the\ncurrent selection.\n\nUnless 'draft' (sans ') is given as an argument, it publishes the post\nimmediately. The default behaviour is equivalent to \":Tumble publish\". Any\nother argument could make the posting to fail. tumble.vim doesn't have safety\nmeasures against that currently.\n\nWhenever it can, tumble.vim tries to be smart. If it finds a first level setext\nstyle markdown title in the first lines of the buffer or range, it detects it\nas a title. If the title is found to be the same as the one from an earlier\npost, it overwrites it, instead of sending a new post.\n\nThe syntax for :TumbleLink is\n\n:[range]TumbleLink\n\nIt assumes the [range] is formatted thus:\n\nline\n1 URL\n2 NAME\n3... DESCRIPTION\n\nNAME and DESCRIPTION are optional, but NAME should always be on line 2 (so if you don't want to give a name to the link, you should keep this line blank).\n\nThe syntax for :ListTumbles is\n\n:ListTumbles draft|published\n\nIt prints a list of your published or drafting posts in the current buffer. If you\npress <enter> over a post line, tumble.vim will try to fetch the post and load it\nfor editing. If you press <delete>, it will delete the post.\n\nThe original version was based on Travis Jeffery's tumblr.vim\n(http://www.vim.org/scripts/script.php?script_id=2329), and the current version\ncontains some ideas from it.\n\nFelipe Morales\nhel.sheep@gmail.com"}, {:name=>"vplinst", :summary=>"[yet another] Vim Plugin Installer", :description=>"Vplinst stands for \"VIM plugin installer\" and is an attempt to make an automatic plugin installer for Vim. It installs scripts distributed in various different manners: vba (VimBall), tgz, .vim, .zip. You just configure the scripts you want in the vplinst.conf file, run the script and it will download and install them for you.\n\nThis utility consists in awk and sh scripts, that almost match POSIX and may run in any UNIX operating system with /bin/sh and awk.\n\nFork it on http://github.com/silasdb/vplinst\n\nPlease, communicate any problems and bugs you experienced."}, {:name=>"tony_light", :summary=>"Another Light Colour Scheme", :description=>"I was frustrated by the light colour files available, so I've written two of my own. This one and another I'm still tweaking. Any comments and suggestions will be appreciated. "}, {:name=>"pyref.vim", :summary=>"Context-sensitive documentation for Python source code", :description=>"The file \"pyref.vim\" is a plug-in for the Vim text editor that maps the <F1> key in Python buffers to search through the Python language and library reference documentation for the keyword or identifier at the current cursor position and open the first match in your web browser. When no GUI is available a command-line web browser like lynx or w3m will be used, otherwise the plug-in prefers a graphical web browser like Mozilla Firefox or Google Chrome. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n\u0095 http://peterodding.com/code/vim/pyref/\n\u0095 http://github.com/xolox/vim-pyref\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!\n\nALTERNATIVES\nIf you don't like using your web browser to read documentation but would rather do so inside Vim, or if you need the documentation of a module that's not in the Python standard library, try vimscript #910 and vimscript #1112. Both of these use the \"pydoc.py\" Python script included with the standard Python installation, which means they automatically work on all modules known to Python (including user-defined modules)."}, {:name=>"legiblelight", :summary=>"another light scheme, easier on eyes", :description=>"This is the other one I've been working on. It is a light colour scheme with more subdued colours to be easier on the eyes. (Or at least easier on my eyes.) \n\nWith 1.1.2, I have added the CTerm section into is so it is functional for the GUI and should be for the terminal as well."}, {:name=>"truebasic.vim", :summary=>"Syntax file for TrueBasic.", :description=>"A simple syntax highlighter for the TrueBasic language.\nhttp://www.truebasic.com/"}, {:name=>"writebackupToAdjacentDir", :summary=>"Backup to an adjacent backup directory. ", :description=>"Redirect backups made by the writebackup plugin (vimscript #1828) that would\nnormally go into the original file's directory into an adjacent directory with a\n\"{dir}.backup\" name, if it exists. This allows to use the plugin in places where\nbackup files would cause problems. \n\nDESCRIPTION\nMany customization directories (e.g. /etc/profile.d/) consider all contained\nfiles, regardless of file extension or execute permissions. Creating a\n{file}.YYYYMMDD[a-z] backup in there causes trouble and strange effects,\nbecause the backups are used in addition to the main configuration file - not\nwhat was intended! However, putting the backups in the same directory\ngenerally is a good idea - just not for these special directories. \n\nThis script offers a solution by integrating into the writebackup.vim script\nso that it checks for a directory with a '.backup' extension (e.g.\n/etc/profile.d.backup/), and places the backups in there, in case it exists.\nIn all other cases, the backup is made in the same directory, as before. \n\nUSAGE\nAdjacent backup directories are never created by this script; you have to\ncreate such a directory yourself to indicate that backups should be placed in\nthere. \n\n:WriteBackupMakeAdjacentDir [{prot}]\n\t\tCreate a backup directory adjacent to the current file's\n\t\tdirectory. If {prot} is given it is used to set the protection\n\t\tbits; default is 0755. \n\nAfter the adjacent backup directory has been created, just use :WriteBackup\nas before. "}, {:name=>"GUI-Box", :summary=>"Color scheme and font menu window", :description=>"This plugin provides:\n- A color scheme menu to choose among your favorite color schemes;\n- A font menu to choose among your favorite fonts;\n- A command to toggle the GUI menu.\n\nSee \":help gui-box\" for details."}, {:name=>"LaTeX-Box", :summary=>"Lightweight Toolbox for LaTeX", :description=>"This plugin provides:\n- Background compilation using latexmk;\n- Completion for commands, environments, labels, and bibtex entries;\n- A simple table of contents;\n- Smart indentation (activated with \"set smartindent\");\n- HIghlight matching \\begin/\\end pairs;\n- Motion between \\begin/\\end pairs with the % key;\n- Motion through brackets/braces (with user-defined keys);\n- Environment objects (e.g., select environement with \"vie\" or \"vae\");\n- Inline math objects (e.g., select inline math with \"vi$\" or \"va$\").\n\nSee \":help latex-box\" for more details.\n\nThis plugins aims at being lightweight and simple. For more fully-fledged plugins, see:\n- LaTeX-Suite: vimscript#475\n- AutomaticTexPlugin: vimscript#2945\n\n"}, {:name=>"mdx.vim", :summary=>"Syntax highlighting for MDX (OLAP queries) ", :description=>"Syntax highlighting for MDX (OLAP queries)\n\nIf you want to add any improvements, please fork the file from:\nhttp://github.com/findango/mdxdotvim\n"}, {:name=>"leglight2", :summary=>"Another light colour scheme based off of legiblelight", :description=>"I wrote legiblelight on a win box and it didn't port over to my linux machine well, so I re-wrote it in linux with a few tweaks. Hope you like it. "}, {:name=>"RemoveFile.vim", :summary=>"Remove a file from the disk", :description=>"Usage:\n\n :Remove[!] [file]\n\nWith a ! the script will remove the specified file without prompting.  If file is omitted, the script uses the file associated with the current buffer.\n\nThis script does not delete, change, or update any associated buffers in any way."}, {:name=>"formatvim", :summary=>"Convert current file to colored HTML, BBCode or whatever", :description=>"There are some things that included out-of-the-box 2html.vim plugin does not support, so I ended in writing my own format.vim script:\n\n    \u0097 'list' and 'listchars' (tab, trail, eol, conceal, including the case when 'list' is on and 'lcs' does not contain tab)\n    \u0097 Foreground colors for lines with differencies (if I am not mistaking, implemented in latest 2html)\n    \u0097 Normal special character coloring\n    \u0097 Background color for the whole line with differencies and folds, not just for text\n    \u0097 Tags linked to their definition (slow, HTML only (unless you write specification by yourself), but partially on by default, also implemented by vimscript #2252 for 2html)\n    \u0097 Side-by-side diff (also present in latest 2html version)\n    \u0097 Full conceal support, including 'cole', 'lcs:conceal' and saving information about actual text present\n    \u0097 Foldcolumn support (2html generates foldcolumn only if dynamic_folds is on, and this foldcolumn is different from what Vim actually displays)\n    \u0097 My killer feature: exporting to any format you can write specification for. (for example, bbcode; bbcode specification for unixforum.org is included in the distribution)\n\nExamples:\nhttp://kp-pav.narod2.ru/formatvim-2.2.1-side-by-side-diff.html\nhttp://kp-pav.narod2.ru/formatvim-2.2.1-diff.html\nhttp://kp-pav.narod2.ru/formatvim-2.2.1-AllFolds.html (if you want to open/close fold permanently, not only at hover, either click anywhere inside the fold or click its header)\nhttp://kp-pav.narod2.ru/formatvim-2.3.2-formatconcealed-1.html\nhttp://kp-pav.narod2.ru/formatvim-2.3.2-formatconcealed-2.html (hover to see actual text present in the line)\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/format.txt.html\nProject page: http://sourceforge.net/projects/formatvim\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader\nvimscript #3186, http://sourceforge.net/projects/vimstuff\nvimscript #3187, http://sourceforge.net/projects/vimargumentchec\nvimscript #3188, http://sourceforge.net/projects/vimcompcrtr"}, {:name=>"easytags.vim", :summary=>"Automated tag file generation and syntax highlighting of tags in Vim", :description=>"This plug-in automatically creates a global tags file and keeps it up-to-date as you edit files in Vim. The tags are also used to perform dynamic syntax highlighting of user-defined functions and types. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n \u0095 http://peterodding.com/code/vim/easytags/\n \u0095 http://github.com/xolox/vim-easytags\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!"}, {:name=>"SingleCompile", :summary=>"Make it more convenient to compile or run a single source file.", :description=>"This plugin aims at making it more convenient to compile or run a single\nsource file without leaving vim.\n\nConsider this situation: you have just written a small c source file for a\nsmall test, but you have to write a Makefile to compile it or exit vim to\ncompile it or compile it using \"!gcc\" without quickfix feature because vim's\nmake command only use the \"make\" command? This plugin will help you out.\n\nadd these key-mappings to your vimrc:\n\n nmap <F9> :SCCompile<cr> \n nmap <F10> :SCCompileRun<cr>\n\nIf your file type is supported, then press F9 to compile your source file, and\npress F10 to compile and run your source file. \n\nHere is a list of built-in supported compilers or interpreters:\n\nC:\n    bcc (Borland C++ Builder), Windows only\n    cc (UNIX C Compiler), UNIX/Linux only\n    ch (SoftIntegration Ch)\n    gcc (GNU C Compiler)\n    icc (Intel C++ Compiler)\n    msvc (Microsoft Visual C++), Windows only\n    open-watcom (Open Watcom C/C++32 Compiler)\n    open64 (Open64 C Compiler), UNIX/Linux only\n    pcc (Portable C Compiler)\n    sol-studio (Sun C Compiler(Sun Solaris Studio)), UNIX/Linux only\n    tcc (Tiny C Compiler)\n\nC++:\n    bcc (Borland C++ Builder), Windows Only\n    ch (SoftIntegration Ch)\n    g++ (GNU C++ Compiler)\n    icc (Intel C++ Compiler)\n    msvc (Microsoft Visual C++), Windows Only\n    open-watcom (Open Watcom C/C++32 Compiler)\n    open64 (Open64 C++ Compiler), UNIX/Linux only\n    sol-studio (Sun C++ Compiler(Sun Solaris Studio)), UNIX/Linux only\n\ncmake:\n    cmake (cmake)\n\ndos batch:\n    dosbatch (DOS Batch)\n    \nFortran:\n    ftn95 (Silverfrost FTN95), Windows only\n    gfortran (GNU Fortran Compiler), UNIX/Linux only\n    g77 (GNU Fortran 77 Compiler)\n    ifort (Intel Fortran Compiler)\n    open-watcom (Open Watcom Fortran 77/32 Compiler)\n    open64-f90 (Open64 Fortran 90 Compiler), UNIX/Linux only\n    open64-f95 (Open64 Fortran 95 Compiler), UNIX/Linux only\n    sol-studio-f77 (Sun Fortran 77 Compiler(Sun Solaris Studio)), UNIX/Linux only\n    sol-studio-f90 (Sun Fortran 90 Compiler(Sun Solaris Studio)), UNIX/Linux only\n    sol-studio-f95 (Sun Fortran 95 Compiler(Sun Solaris Studio)), UNIX/Linux only\n\nhtml:\n    chrome (Google Chrome)\n    firefox (Mozilla Firefox)\n    ie (Microsoft Internet Explorer)\n    opera (Opera)\n\nJava:\n    gcj (GNU Java Compiler)\n    sunjdk (Sun Java Development Kit)\n\nJavaScript:\n    rhino (Rhino)\n\nLaTeX:\n    miktex (MiKTeX), Windows Only\n    texlive (Tex Live)\n\nLISP:\n    clisp (GNU CLISP)\n    ecl (Embeddable Common-Lisp)\n    gcl (GNU Common Lisp)\n\nlua:\n    lua (Lua Interpreter)\n\nMakefile:\n    gmake (GNU Make)\n    nmake (Microsoft Program Maintenance Utility)\n    mingw32-make (MinGW32 Make)\n\nperl:\n    perl (Perl Interpreter)\n\npython:\n    jython (Jython)\n    pypy (PyPy)\n    python (Python Interpreter)\n    python3 (Python 3 Interpreter)\n    \nruby:\n    ruby (Ruby Interpreter)\n    \nsh(UNIX shell):\n    shell (UNIX Shell)\n\nvb script:\n    vb (VB Script Interpreter)\n    \nxhtml:\n    chrome (Google Chrome)\n    firefox (Mozilla Firefox)\n    ie (Microsoft Internet Explorer)\n    opera (Opera)\n\n\nYou can add your compiler or interpreter support if the compiler or \ninterpreter you want is not in the list. See details in the help file \nSingleCompile.txt\n\nThere are some supporting code in this plugin for Marc Weber's\nvim-addon-actions:\n     http://github.com/MarcWeber/vim-addon-actions \n\nIf you find any bug, please report it to xuhdev@gmail.com or submit it on\nthe issue tracker:\nhttp://code.google.com/p/single-compile/issues/list\n\n\nRepository: http://code.google.com/p/single-compile/source/checkout"}, {:name=>"CFWheels-Dictionary", :summary=>"dictionary file for CFWheel functions", :description=>"Functions where taken from http://cfwheels.org/docs/function and placed into a vim dictionary file for code completion.\n\nThis was created for use at http://www.peaksystems.com, we hope you find use for it as well."}, {:name=>"fu", :summary=>"Clean and beautiful colorscheme. Do your eyes a favour.", :description=>"Look for yourself.\nScreenshot1: http://images.datenhalter.de/syntax_highlighting_fu_1.png\nScreenshot2: http://images.datenhalter.de/syntax_highlighting_fu_2.png\n\nBlog post: http://aaron-mueller.de/blog/the-most-awesome-colorscheme-for-vim\n\nWARNING: This colorscheme need a 256 Color terminal."}, {:name=>"skk.vim-B", :summary=>"Japanese SKK", :description=>"* This script is an implementation of the Japanese SKK (Simple Kana to Kanji\nconversion program).\n\n* Get older versions from vimscript#1589.\n(Thanks to Noriaki Yagi for inventing this script!)\n\n* This plugin works under vim6, vim7.\n\n* Repository\nhttp://github.com/tyru/skk.vim/"}, {:name=>"tcbuild.vim", :summary=>"syntax of buildinfo file of TCbuild (build tool for Fortran)", :description=>"Define the syntax (keywords and comments) for the buildinfo file of TCbuild, a new build tool for Fortran."}, {:name=>"grails-vim", :summary=>"Easy file navigation and testing of Grails projects ", :description=>"Grails-vim makes it easy to navigate Grails projects and view the test reports that Grails creates.\n\n  - Navigate from Domain Models to Controllers, Views, Tests and Test Reports\n  - Easily view the errors / failed tests, and jump to the failed tests.\n  - Quickly navigate controller methods, such as Save, Create, Edit, Index\n  - Provides built-in syntax highlighting for .gsp pages\n\nScreenshots:\n\nhttp://notesmine.com/grails_vim#screenshots\n\nRecommended Additional Plugins:\n\nFuzzy Finder:  http://www.vim.org/scripts/script.php?script_id=1984\n\n"}, {:name=>"django_templates.vim", :summary=>"Macros and menus for django templates", :description=>"Almost each django template keyword or filter may be accessed by its short cut (and by the menu if using a GUI) in each of 3 modes.\nIf you don't like to use \"<F8>\" as a trigger you can change it to, for examle \"?\".\nOpen asp.vim in Vim editor and substitute :%s/<F8>/?/g "}, {:name=>"PySuite", :summary=>"A collection of python vim scripts", :description=>"You need vim compiled with python to use these! To test if your vim includes python, use this command:  :python print 'hi'. If you get an error, you don't have python. \n\nIncluded scripts are:\n\n- vimp3 - music player for vim (scores, random mode taking scores into account, multiple playlists per file, option to pause between tracks; note: other scripts will work in win/linux, this one is only for linux)\n- outliner similar to TVO\n- todo list manager\n- project manager (load/unload by dir/project, make an outline of python files, etc)\n- calendar that supports adding notes to dates\n- plugin to track expenses and balances\n- sortable table with fields separated by 2+ spaces\n- resize - set a list of main vim window sizes and use two shortcuts to resize -/+\n- helpgrep - enter a few words and use :helpgrep cmd to search for them in any order\n- pystripdoc - make a copy of buffer with stripped out python docstrings and comments\n- pyfolddoc - fold python docstrings and comments\n- aligncode - align code by '=' or '#' chars\n\nFor a more detailed description, see home page: http://lightbird.net/pysuite/."}, {:name=>"shell.vim--Odding", :summary=>"Improved integration between Vim and its environment (fullscreen, open URL, etc)", :description=>"This plug-in aims to improve the integration between Vim and its environment by providing functions to switch to full-screen (see the screenshots at http://peterodding.com/code/vim/shell/screenshots), open URLs in the user's default web browser and execute external commands in the background without opening a command prompt window. A DLL is included to perform these things on Windows, while on UNIX external commands are used.\n\nFor more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n \u0095 http://peterodding.com/code/vim/shell/\n \u0095 http://github.com/xolox/vim-shell\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!\n\nALTERNATIVES\nAfter publishing this plug-in I found that vimscript #687 and vimscript #2596 also implement full-screen on Windows using a similar approach. I prefer the effect of my plug-in because it seems to hide window decorations more effectively. Also note that my plug-in was developed independently of the other two."}, {:name=>"vim-addon-sbt", :summary=>"run sbt (simple build tool) within vim using python background process", :description=>"This script integrates the sbt (simple-biuld-tool) with Vim. It can be used to develop Java or Scala applications conviniently.\nIntegrates with vim-addon-actions. You can setup a mapping to run sbt and feed compilation results into quickfix window using both: a background python job or a background sh job.\nThe pyhton job is using sbt interactive mode so compilation should be fastest.\nFor large projects you still want to consiider using an IDE..\n\nhttp://github.com/romanroe/codefellow (<- Don't miss this. Its going to provide scala code completion)"}, {:name=>"PIV", :summary=>"PHP Integration environment for Vim", :description=>"PHP Integration for VIM\nDescription\n\nThis project contains the most feature complete and up to date php integration for vim. It began as a fork of the largely outdated VIP (formerly PDV), but has morphed into it's own project. While the file is located here, development happens on github. http://github.com/spf13/PIV.\n\nIt does not include non PHP specific functionality like commenting but rather suggests you use one of the many general purpose plugins that do a great job.. Recommendations provided at the end of this doc.\n\nFeatures\n\nSyntax updated for PHP 5.3\n\nThe list of PHP constants, functions, and classes was updated to be current with PHP 5.3. Many new classes were added in the 5.2 branch and the distributed version only covers up to 5.1.4.\n\nBetter Fold Support\n\nThis plugin can fold PHP functions and/or classes, properties with their PhpDoc, without manually adding marker style folds ({{{ and }}}) http://www.vim.org/scripts/script.php?script_id=1623\n\nCan be turned off by setting\n\nlet g:DisableAutoPHPFolding = 1\nin your .vimrc file.\n\nPHP Doc Gen\n\nGenerate phpDocumentor conforming documentation blocks for your PHP code.\n\nTo use place cursor on line with class, function or variable definition and type ,pd (in n mode)\n\nBetter Completion\n\nPHP completion script for use with omniComplete.\n\nCompletion from current file, tags and php builtin:\n\n* classes (after new), \n* functions  \n* variables\n* constants \n* language keywords \nAfter -> and :: options limited to funcs and vars.\n\nBetter indenting w/automatic formatting\n\nCustom php indenting file for VIM\n\nRecommendations\n\nIt isn't my intention to provide php specific functionality when a good general purpose solution exists.\n\nThe following plugins are recommended and can be found in my vim config repository http://github.com/spf13/spf13-vim.\n\nSnipmate\nNerdCommenter\nNerdTree\nSuperTab\nFugitive\nDelimitMate\nMatchit\nCheckSyntax\nSurrounding\nAutoCloseTag"}, {:name=>"xpcomplete", :summary=>"Completion for the XP-Framework (php)", :description=>"This file provides the ability to handle a better completion with the XP-Framework. This file is based on the original version from phpcomplete.vim delivered by a standard vim installation.\n\nXP-Framework: http://xp-framework.net/\n\nRequirements:\n\nctags:\nUse absolute paths and --PHP-kinds=+cfidv for your ctag files\n\nExample:\nctags -f $HOME/devel/xp.ctags/tags \\\\\n--langmap=\\\"php:+.inc\\\" \\\\\n-h \\\".php.inc\\\" -R --totals=yes \\\\\n--PHP-kinds=+cfidv \\\\\n--fields=+iaS \\\\\n$HOME/devel/xp.public/trunk/skeleton \\\\\n$HOME/devel/xp.public/trunk/ports/classes \\\\\n$HOME/devel/xp.projects/**/src\n\nTODO:\nScreenshots\nBetter description\n"}, {:name=>"gams", :summary=>"gams syntax highlighting", :description=>"syntax highlighting for the GAMS programming language\n\nupdate: moved to http://github.com/trialsolution/gamsvim\nCheck github for updates."}, {:name=>"Search-in-Addressbook", :summary=>"Complete email addresses from an external addressbook", :description=>"This is a script using the User Complete feature to complete the email addresses from an external addressbook. It depends on an external app to get the contacts addreses, included in the package is an example that search the EDS.\n Its a perfect companion when you edit headers while sending mails in mutt"}, {:name=>"teraterm", :summary=>"Teraterm MACRO syntax highlighting", :description=>"Teraterm MACRO syntax highlighting. This script provides syntax highlighting for the Teraterm MACRO programming/scripting language."}, {:name=>"CountJump", :summary=>"Create custom motions and text objects via repeated jumps. ", :description=>"DESCRIPTION\nThough it is not difficult to write a custom movement (basically a :map\nthat executes some kind of search or jump) and a custom text-object (an\n:omap that selects a range of text), this is too complex for a novice user\nand often repetitive. \nThis plugin covers the common use case where the movement and boundaries of a\ntext object can be specified via start and end patterns, and offers a single\nfunction to set up related mappings. With it, you can enhance some built-in\nVim mappings to take an optional [count], and quickly define new mappings for\nhelp file sections, diff hunks, embedded macros, and so on... \n\nAs a generalization of the start and end patterns, the movement and boundaries\nof a text object can also be specified via jump functions, i.e. Funcrefs of\nfunctions that position the cursor on the appropriate location and return that\nlocation. This can be used where the jump is difficult to express with a\nsingle regular expression, the jump may need adapting depending on the\ncontext, or other uses. \nThis plugin contains some support for movement and text objects consisting of\ntext regions that can be defined by continuous lines that match a particular\npattern, e.g. comment blocks that all start with /^\\s*#/. \n\nSEE ALSO\nThe following ftplugins use this plugin: \n\ndiff_movement\t  (vimscript #3180): Movement over diff hunks with ]] etc.\nfortunes_movement (vimscript #3181): Movement over email fortunes with ]] etc.\nhelp_movement     (vimscript #3179): Movement over Vim help sections with ]] etc.\nmail_movement     (vimscript #3182): Movement over email quotes with ]] etc.\n\nRELATED WORKS\n- motpat.vim (vimscript #3030) offers similar functions to setup motion\n  mappings, but no text objects (yet). \n- textobj-user (vimscript #2100) has support for user-defined text objects via\n  regular expressions. \n\nUSAGE\nThe plugin defines several functions, which set up the appropriate mappings\nbased on the arguments that you supply. The following is an overview; you'll\nfind the details directly in the implementation files in the\n.vim/autoload/CountJump/ directory. \n\nCountJump#Motion#MakeBracketMotion( mapArgs, keyAfterBracket, inverseKeyAfterBracket, patternToBegin, patternToEnd, isEndPatternToEnd, ... )\n\nThis function sets up mappings starting with [ and ] for movement (with\noptional [count]) relative to the current cursor position, targeting either a\ntext pattern at the beginning ([{keyAfterBracket} mapping) or a text pattern\nat the end (]{inverseKeyAfterBracket} mapping) of whatever you want to treat\nas a text block. \n\nCountJump#Motion#MakeBracketMotionWithJumpFunctions( mapArgs, keyAfterBracket, inverseKeyAfterBracket, JumpToBeginForward, JumpToBeginBackward, JumpToEndForward, JumpToEndBackward, isEndJumpToEnd, ... )\n\nThis function sets up mappings starting with [ and ] for movement (with\noptional [count]) relative to the current cursor position, but rely on four\npassed jump functions instead of text patterns to do the movement. \n\n\nCountJump#TextObject#MakeWithCountSearch( mapArgs, textObjectKey, types, selectionMode, patternToBegin, patternToEnd )\n\nDefines a complete set of mappings for inner and/or outer text objects that\nsupport an optional [count] and are driven by search patterns for the\nbeginning and end of a block. Outer text objects include the matched pattern\ntext, inner ones not. Selection can be characterwise, linewise or blockwise. \n\n\nCountJump#TextObject#MakeWithJumpFunctions( mapArgs, textObjectKey, types, selectionMode, JumpToBegin, JumpToEnd )\n\nThis is a generalization of CountJump#TextObject#MakeWithCountSearch() that\ninvokes custom functions instead of searching for a fixed pattern. This is\nuseful if the check for a match is too complex for a single regular\nexpression, or if you need to adjust the match position depending on the\ncircumstances. \n\n\nOften, a region can be defined as a block of continuous lines that all match a\ncertain pattern. The following functions aid in implementing movements to the\nboundaries of these regions and text objects consisting of the region: \n\nCountJump#Region#JumpToRegionEnd( count, pattern, step )\n\nStarting from the current line, search for the position where the count'th\nregion ends. Use this function to build Funcrefs for forward / backward jumps\nthat can then be passed to CountJump#TextObject#MakeWithJumpFunctions(). \n\nCountJump#Region#JumpToNextRegion( count, pattern, step, isAcrossRegion )\n\nStarting from the current line, search for the position where the count'th\nregion begins/ends. \n\nCountJump#Region#Jump( mode, JumpFunc, ... )\n\nImplement a custom motion by jumping to the <count>th occurrence of the passed\npattern. This function allows to implement jump functions working on text\nregions. These can then be passed to\nCountJump#Motion#MakeBracketMotionWithJumpFunctions(). \n    function! s:JumpToBeginForward( mode )\n\treturn CountJump#Region#Jump(a:mode, function('CountJump#Region#JumpToNextRegion'), '^\\s*#', 1, 0)\n    endfunction\n\nEXAMPLE\nLet's illustrate the usage by developing custom motions and text objects for\nPascal begin..end blocks. \n\nWe want to move around blocks, and override the default section movements for\nit: \n]]\t\t\tGo to [count] next start of a block. \n][\t\t\tGo to [count] next end of a block. \n[[\t\t\tGo to [count] previous start of a block. \n[]\t\t\tGo to [count] previous end of a block. \n\n    call CountJump#Motion#MakeBracketMotion('<buffer>', '', '', '\\c^begin\\n\\zs', '\\c^.*\\nend', 0)\nThe begin pattern positions the cursor on the beginning of the line following\nthe \"begin\" keyword, the end pattern on the beginning of the line\npreceding the \"end\" keyword. \n\n\nWe want to select a block, either including or excluding the lines with the\nbegin..end keywords: \nib\t\t\t\"inner block\" text object, select [count] contents of\n\t\t\ta block. \nab\t\t\t\"a block\" text object, select [count] blocks. \n\n    call CountJump#TextObject#MakeWithCountSearch('<buffer>', 'b', 'ai', 'V', '\\c^begin\\n', '\\c^end.*$')\n\nIf there is a filetype detection for Pascal files, we can simply put the\nabove calls in a ~/.vim/ftplugin/pascal_movement.vim script and are done. "}, {:name=>"darkBlue", :summary=>"A darkblue color scheme.", :description=>"This is a color scheme that I mimicked a SciTE color scheme.\nSee screenshot at http://lilydjwg.heliohost.org/images/darkBlue_vim.png\nor http://lilydjwg.123bemyhost.com/imgaes/darkBlue_vim.png (the same one, in case something goes wrong.)"}, {:name=>"underwater-mod", :summary=>"Eye-pleasing dark blue scheme based on Underwater colorscheme", :description=>"Underwater-mod is a tweak of a favorite theme, Underwater [1]. Colors for NERDTree, Ruby, ERB, HAML and HTML elements were assigned. Tweaks to general colors, like vertical split, give Vim a simpler appearance.  See screenshot [2] which uses Consolas font.\n\nThe MacVim downloadable from [3] does not render accurate colors. To see the difference, compare your MacVim using this theme against my screenshot. Subtle themes like Zenburn look really washed out. The fix is to compile MacVim [4], or better yet install with the excellent Homebrew package manager [5]. \n\n[1] http://www.vim.org/scripts/script.php?script_id=2977\n[2] http://img193.imageshack.us/img193/8104/screenshot20100623at319.png\n[3] http://code.google.com/p/macvim/\n[4] http://code.google.com/p/macvim/wiki/Building\n[5] http://mxcl.github.com/homebrew/"}, {:name=>"open-browser.vim", :summary=>"Open URI with your favorite browser from your favorite editor", :description=>"SYNOPSIS\n\nnmap map-you-like <Plug>(openbrowser-open)\nvmap map-you-like <Plug>(openbrowser-open)\n\n\" In command-line\n:OpenBrowser http://google.com/\n\n\nENVIRONMENTS\n\nWe have tested on these environments.\n- Ubuntu 9.10 GNOME\n- Windows XP\n- Cygwin\n- Mac OS X\n\nThanks for testing:\n- mfumi (Mac OS X)\n- iicebar (Windows XP)\n\nLATEST VERSION\nhttp://github.com/tyru/open-browser.vim"}, {:name=>"rvm.vim", :summary=>"RVM Integration", :description=>"Adds RVM (Ruby Version Manager http://rvm.beginrescueend.com/) integration to Vim.\n\nCurrently that is a function for adding the active Ruby to the status line.\n\nLatest and greatest is on github, also that is the place to report issues http://github.com/csexton/rvm.vim"}, {:name=>"Vim-Script-Updater", :summary=>"Automatically update vim scripts", :description=>"This Python script updates vim scripts listed in a watch list that you create.\nIt converts any script to a vimball, thus allowing for easier uninstallation with :RmVimball.\nYou can have multiple watch lists if you want to keep things sorted.\n\nIf you don't care about vimballs and prefer a script that is run from within Vim rather than in the terminal, you can use GetLatestVimScripts: vimscript#642\n\nWhen run, it parses a watch-list file, looks for updates on www.vim.org, asks for a confirmation to download updated scripts, converts them to vimballs and installs them, and commits changes to the watch list.\n\nThe script is quite new and still needs some debugging. Please report bugs to me.\n\nIf you use a watch list from the former bash implementation, the new Python version will need to redownload all the scripts once to upgrade the watch list format. I have rewritten the script in Python to get rid of the dependencies (xsltproc, curl, etc.) of the bash version.\n\n--------------------------------------------------------------------\n\nusage: ./vim-update-scripts.py watchlist\n\nwhere watchlist is a file containing one or more lines with the following syntax:\n\tscript ID\nor\n\tscript ID|prefix\n\nExample file:\n\t42\n\t1259|colors\n\t3096|plugin\n\t3108\n"}, {:name=>"beluga-syntax", :summary=>"Syntax for Beluga fles (http://www.cs.mcgill.ca/~complogic/beluga/)", :description=>"Syntax for Beluga fles (http://www.cs.mcgill.ca/~complogic/beluga/).\n\nIf colouring gets desynchronized, type <LocalLeader>s."}, {:name=>"tac-syntax", :summary=>"Syntax for Tac files (http://slimmer.gforge.inria.fr/tac/)", :description=>"Syntax for Tac files (http://slimmer.gforge.inria.fr/tac/)"}, {:name=>"datascript.vim", :summary=>"Syntax file for the Datascript modelling binary datatypes language", :description=>"Syntax file for the Datascript modelling binary datatypes language.\n\nScreenshot of syntax highlighted datascript file with doxygen comments:\n  http://dominique.pelle.free.fr/pic/datascript-syntax.png\n\nFor more information about Datascript language, see:\n  http://datascript.berlios.de/ "}, {:name=>"phd", :summary=>"Color theme with dark blue background for coding", :description=>"I'll skip long talks about how this theme looks, take a look for yourself at http://leetless.de/vim.html\n\nNote that this theme (like all my themes) only defines colors for gvim, i.e. textmode/console colors are not being set. Feel free to contact me for questions and suggestions, for example via the methods mentioned on http://leetless.de"}, {:name=>"obsidian", :summary=>"a colorscheme based on Obsidian Coast", :description=>"Most KDE users are familiar with the classic Obsidian Coast colorscheme-- dark with blue selection highlights. I ported it to GVim using the excellently commented lucius colorscheme. I included some extra colors from Kate's schemata as well.\n\nUpdated version: http://github.com/dbbolton/themes/blob/master/obsidian.vim\n\nor\n\nhttp://github.com/dbbolton/obsidian-extra/blob-master/obsidian.vim"}, {:name=>"ez_scroll", :summary=>"Scroll a window using right click+drag", :description=>"Sometimes I prefer to use the mouse to scroll a file.  Like if I'm just reading a file and not editing it then my hands aren't going to be perched on the keyboard and so looking down to find the right keys to control the scrolling is going to be distressful.  Or if I'm looking at a different window or if I've just focused the window with the file in it and my hand is already on the mouse.  But scroll-bars --- with their variable sized beveled areas ---  are precision controls that require quite a lot of attention and sobriety to operate.  And if I'm less than a few pages from where I want to scroll to (like, maybe I'm reading the whole file line-by-line) and if the file is really large (like, maybe it's a book) then scroll-bars are just plain silly: You're looking at maybe a couple millimeters of beveled area that you've got to click on and then drag another couple millimeters.  Another medium that often has large files that one reads line-by-line is the pdf.  The designers of pdf reading software have noticed the scroll-bar issue and they've come up with what I think is a nice interface: You can right-click anywhere on the window with the `hand' cursor and just paw your way through the pages.  It's even enabled by default; so sure are they that this is what you're going to want to use to scroll around.  Another common way to scroll by less than a few lines with the mouse is the scroll-wheel interface.  That's already there in vim if you have `:set mouse=a' (and this is on in gvim by default).  But I really detest it.  It engenders a really awkward finger movement that I reserve for one activity only and it's not scrolling.  And I don't think that finger movement's good for your hand anyway and so it shouldn't be used outside of bed.  So after all of this, why not have the right-click and drag functionality in vim?  Right drag isn't used for anything else anyways.\n"}, {:name=>"vim-snipplr", :summary=>"frontend for http://www.snipplr.com/", :description=>"snipplr.vim \n============\nSnipplr.vim is frontend for http://www.snipplr.com/\nYou can open your favoritted snippet or get snippet you specified by ID or URL.\nRequire Ruby to work(not require +ruby feature).\nCurrently work on *nix only.\n\nINSTALL\n---------------\n\n    cp plugin/snipplr.vim $HOME/.vim/plugin/\n    cp syntax/snipplrlist.vim $HOME/.vim/syntax/\n    copy bin/snipplr.rb to one of the directory in $PATH\n\nSETUP\n---------------\n\nCreate account on http://www.snipplr.com/\nYou can find API KEY at buttom of \"Setting\" page.\n\nthen save API KEY as `~/.snipplr/api_key`\n\nGLOVAL VARIABLE\n---------------\nYou can exclusively set path for snipplr.rb in `.vimrc`\n\n    let g:snipplr_rb = '$HOME/.vim/bundle/snipplr/bin/snipplr.rb'\n\nCommand\n----------\n\nsnipplr.rb save snippets once get as `~/.snipplr/db.yml.`\nYou can avoid cache with exlamation(!) version command.\n\n### SnipplrGet\nIn opend snippet buffer you can use 'i' to view informatin about that snippet.\n\n    :SnipplrGet 1234\n    :SnipplrGet http://snipplr.com/view/1234/sample\n\n### SnipplrList\n\n    :SnipplrList\n    :SnipplrList!\n\n### SnipplrFind\nTo this comman work, you have to install [ fuzzyfinder ]( http://www.vim.org/scripts/script.php?script_id=1984 )\n\n    :SnipplrFind\n    :SnipplrFind!\n\nKeyMapping Example\n------------------\n\n    nnoremap <silent> <Space>sl :<C-u>SnipplrFind<CR>\n    nnoremap <silent> <Space>sr :<C-u>SnipplrFind!<CR>\n\nTODO\n------------------\nparametarize cache dir and api_key location etc..  \nquery with metadata(tag, user.. etc)  \npost snippet from vim buffer  \nmore informative syntax highlight with predefined keyword for lang name  \ndynamically change window height for snipplr list  \nmerge more than one cache data to one cache(which is comvenient for  \n   collabolate with coworker  "}, {:name=>"vim-haxe", :summary=>"haxe language support", :description=>"depends on some more plugins. See vim-haxe-addon-info.txt.\nI recommend you installing it using the vim-addon-manager plugin.\n\nThis plugin provides HaXe completion syntax highlighting, completion based on the HaXe compiler output, running HaXe using vim-addon-actions"}, {:name=>"hgrev", :summary=>"Display Mercurial revision info in the Vim statusline.", :description=>"HGRev is a small plugin that can find the current buffer's revision ID from a Mercurial (http://mercurial.selenic.com/) repository.\n\nIt is intended for use in the Vim statusline - here's an example to enable it:\n\n   set statusline=[r%{HGRev()}] \n\nHGRev exports the \"HGRev()\" function (for use in the statusline), and\na command called \":RefreshMercurialRev\", which you can use to manually\nupdate the revision information for the current buffer.  If you've added\nHGRev() to your statusline, you'll see the file revision, branch, tags,\nand file status reflected -- if you used the statusline example above,\nyou should see something like this:\n\n   [r192+ default tip M]\n\nThe information displayed can be easily customized, and HGRev can also\nautomatically update the status line on file changes.  (This behavior is\ndisabled by default -- see the documentation for details.)\n\nOnce installed, HGRev has built-in help.  Access it via \":help HGRev\".\n"}, {:name=>"zetavim", :summary=>"Plugin to ftdetect, syntax highlight ZWiki-zeta markup. Interface with Zeta site", :description=>"Short Description :\n===============\n\nA collection of plug-in that is useful with Zwiki tool and Zeta project collaboration suite. The package contains three parts, namely,\n\n* detecting text files written in ZWiki-zeta markup\n*  syntax highlighting markup text\n*  vim & python plugin to interface with zeta http server to edit wiki, tickets and reviews with vim\n\nQuick Links :\n===========\n\nTo know more on how to interface with Zeta project collaboration site, check out the link,\nhttp://dev.discoverzeta.com/help/VimIntegration\n\nUse structured-text while interfacing with Zeta server via Vim.\nhttp://dev.discoverzeta.com/help/StructuredText\n\nDownload ZWiki-zeta from python package index,\nhttp://pypi.python.org/pypi/zwiki-zeta/0.9beta\n\nFor documentation and obtaining Zeta application,\nhttp://discoverzeta.com\n\nParticipate in our mailing list with your queries and comments,\nhttp://groups.google.com/group/zeta-discuss"}, {:name=>"quickrun.vim", :summary=>"Run a command and show its result quickly.", :description=>"*quickrun* is Vim plugin to execute whole/part of editing file and show the result.\nIt provides :QuickRun command for it.\n\nDefault is set in the following languages:\n\n- awk\n- bash\n- c\n- cpp\n- dosbatch\n- eruby\n- go\n- groovy\n- haskell\n- io\n- java\n- javascript\n- llvm\n- lua\n- ocaml\n- perl\n- perl6\n- php\n- python\n- r\n- ruby\n- scala\n- scheme\n- sed\n- sh\n- vim\n- zsh\n\nYou can add settings for other languages and situations.\n\nLatest Version:\nhttp://github.com/thinca/vim-quickrun\n"}, {:name=>"wmgraphviz", :summary=>"Plugin for Graphviz DOT", :description=>"Vim plugin for Graphviz DOT.\n\nFeatures:\n- Omnicompletion\n- Compiling and viewing commands\n\nMost recent version available at http://github.com/wannesm/wmgraphviz.vim"}, {:name=>"reload.vim", :summary=>"Automatic reloading of Vim scripts ((file-type) plug-ins, auto-load/syntax/inden", :description=>"The reload.vim plug-in automatically reloads various types of Vim scripts as they're being edited in Vim to give you instant feedback on the changes you make. For example while writing a Vim syntax script you can open a split window of the relevant file type and every time you :update your syntax script, reload.vim will refresh the syntax highlighting in the split window. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n \u0095 http://peterodding.com/code/vim/reload/\n \u0095 http://github.com/xolox/vim-reload\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!"}, {:name=>"Smooth-Center", :summary=>"Smoothly centres display when you press Esc like zz, zt and zb", :description=>"Normal VIM lets you center the file based on the current cursor position when you press zz, zt and zb.  This is nice but wouldn't it be nicer if this centering took place smoothly, like panning across a scene of a movie.  This script gives you this: Esc, SHIFT-Esc and SHIFT-F1 in Normal mode work like for zz, zt and zb respectively.  You can cancel by re-pressing Esc.   Script correctly accounts for 'scrolloff' setting.  Note: the default updatetime should be lowered to see this or else it will not appear to do anything.  The default is 4000 but I use 650.  There are some glitches in the Center (Normal mode / ESC) like the scrolling keeps going back in on itself when there are folds present, and the scrolling tries to continue if you are at the bottom of the buffer.  These do not affect S-Esc / S-F1, (zb and zt equivs. respectively) and works ok if there are no folds or you are not at the bottom of the script.  Working on these!! :)"}, {:name=>"session.vim--Odding", :summary=>"Extended session management for Vim", :description=>"The session.vim plug-in improves upon Vim's built-in :mksession command by enabling you to easily and (if you want) automatically persist and restore your Vim editing sessions. It works by generating a Vim script that restores your current settings and the arrangement of tab pages and/or split windows and the files they contain. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n\u0095 http://peterodding.com/code/vim/session/\n\u0095 http://github.com/xolox/vim-session\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!"}, {:name=>"pytestator", :summary=>"simple script to simplify the use of unit test in python", :description=>"This a really simple script to made your life easier if you write unit test in python (you should !).\n\nThis script assume that your test file is name test_<other file name>.\nBtw, this shouldn't be hard to change\n\nHere are the basic commands:\n,tc create the test file - stand for \"test create\"\n,tF force to create a test file (this will be necessary if another file already have the matching name, this file will be destroyed) - \"test Force (create)\"\n,tr run the unittest for this file - stand for \"test run\"\n,s  swap between test file and actual file, if the test file doesn't exist, it will be created - stand for \"swap\"\n\nYou'll be mostly (exclusivly ?) using only ,s and ,tr\n\nOther feature:\n - will display a big red stupid message in your statusline if this python file don't have a test file, remove the set statusline+=blabla if you don't want to have it.\n\nIf you have comments/bugs repport/feature request/chocolate feel free to send me an email or ping me on irc (psycojoker@irc.freenode.net#vim)\n\n*Not* include in the script, I love those mappings:\nimap ,ar self.assertRaises()<left>\nimap ,ae self.assertEqual()<left>\nimap ,at self.assertTrue()<left>\nimap ,af self.assertFalse()<left>"}, {:name=>"sablecc.vim", :summary=>"syntax highlighting for sablecc", :description=>"This file provides syntax highlighting for sablecc grammar. For windows compatible the \ngrammar should end with .scc\n"}, {:name=>"CSS-one-line--multi-line-folding", :summary=>"Folded text is compressed on one line", :description=>"/* one-line CSS (see http://neutroncreations.com/blog/single-line-vs-multi-line-css-plus-textmate-tips/) */\nheader h1 { float: left;  width: 155px; height: 50px;  }\n\n/* Multiline CSS */\nheader h1 {\n  float: left;\n  width: 155px;\n  height: 50px;\n}\n\nWhich to choose? One line CSS is easier to scan through and saves space, but multi-line CSS is easier to grep and edit.\n\nThis script sets you up so you edit and save multi-line CSS, but when you turn folding on, everything´s compressed on one line so you can scan through it easier.\n\nControls are vim´s standard for text folding:\nzo and zc: Open and Close fold (set multiline, set oneline)\nzR and zM: Reopen and Close all (globally set multiline, globally set oneline)\nzj, zk: go down and up a fold (CSS block).\n"}, {:name=>"vorax", :summary=>"An Oracle IDE for Geeks.", :description=>"VoraX aims to be a simple, yet a powerful IDE for Oracle databases. Instead of reinventing the wheel, VoraX relies on the well-known SqlPLUS which is actually used to connect to the database, to execute and to get the results back. However, this interaction is hidden from the user who just uses his/her Vim environment without knowing that, behind, a SqlPLUS process does all the work.\n\nThe big advantage of this approach is that, in VoraX, almost all SqlPLUS commands may be used without any problems. You can format columns, set pagination, autotrace queries etc. Basically, everything you used to type on your SqlPLUS prompt is guaranteed to work in VoraX, except maybe for some exotic cases (e.g. using vim in console mode, having the EDITOR set to a terminal editor and executing the \"ed\" sqlplus command).\n\nAnother advantage is that you'll get an efficient Oracle IDE with a very small footprint. For Oracle DBAs this is huge because they don't need heavy tools with a lot of features they never use. Likewise, the fact that VoraX may be used within a regular console makes it suitable for server environments.\n\nFEATURES\n\n    * 99.9% of the sqlplus commands supported\n    * advanced code completion system\n    * Windows and UNIX systems are supported\n    * a nice results window with highlighting for errors and logging support \n    * a database explorer which may be used to browse the database objects in a hierarchical way\n    * support for editing and compiling PLSQL objects like packages, types etc.\n    * fuzzy search for database items\n    * offline search through the oracle documentation\n\nThis project is hosted on: http://code.google.com/p/vorax/"}, {:name=>"slang_syntax", :summary=>"Sytanx files for OpenGL shader languages GLSL 400 and GLSL 330", :description=>"Sytax files for GLSL 400 and GLSL 330\n\nThis is based on vimscript#1002, but include new keywords and constructs.\n\nShows compatibility keywords/functions etc as warnings."}, {:name=>"ikiwiki-syntax", :summary=>"syntax highlighting for ikiwiki files", :description=>"This syntax file highlights the wikilinks and directives in IkiWiki files\n(.mdwn)\n\nPlease note that this syntax definition only defines highlighting for directives\nand wikilinks, *not* markdown files. To obtain proper highlighting of ikiwiki\nfiles (markdown + wikilinks/directives), you must install the Markdown syntax\nfile (vimscript #1242).\n\nYou can also use this syntax definition if you use reST, by installing the reST\nsyntax file (vimscript #973), and putting the following in your .vimrc file:\n\n    let g:ikiwiki_render_filetype = 'rest'\n\nThis step is not required for using markdown files.\n\nThis syntax file has a git repository; you can clone it with:\n\ngit clone http://git.devnull.li/ikiwiki-syntax.git\n"}, {:name=>"opencl.vim", :summary=>"Syntax file for OpenCL 1.1", :description=>"Script provides syntax highlight for OpenCL (Open Computing Language) syntax files (*.cl)."}, {:name=>"gitview", :summary=>"browse changed git files within vim", :description=>"this plugin enables you to open a window which lists changed git files as seen by git status -s\nuse by invoking\n:GitView\n\nvery preliminary version, but basically works\n\nshamelessly using stolen code from NERDTree :)\n"}, {:name=>"ekini-dark-colorscheme", :summary=>"Dark and cool color scheme", :description=>"Vim color scheme port of http://bit.ly/1VpbZy\n\nScreenshot: http://imgur.com/24oot.png"}, {:name=>"pep8--Driessen", :summary=>"Vim filetype plugin for running PEP8 on Python files", :description=>"Usage\n-----\n1. Open a Python file\n2. Press `<F6>` to run `pep8` on it\n\nIt shows the errors inside a quickfix window, which will allow your to quickly\njump to the error locations by simply pressing [Enter].\n\nCustomization\n-------------\nIf you don't want to use the `<F6>` key for PEP8-checking, simply remap it to\nanother key.  It autodetects whether it has been remapped and won't register\nthe `<F6>` key if so.  For example, to remap it to `<F3>` instead, use:\n\n    autocmd FileType python map <buffer> <F3> :call Pep8()<CR>\n"}, {:name=>"pyflakes", :summary=>"Vim filetype plugin for running pyflakes on Python files", :description=>"Usage\n-----\n1. Open a Python file\n2. Press `<F7>` to run `pyflakes` on it\n\nIt shows the errors inside a quickfix window, which will allow your to quickly\njump to the error locations by simply pressing [Enter].\n\nCustomization\n-------------\nIf you don't want to use the `<F7>` key for pyflakes-checking, simply remap it to\nanother key.  It autodetects whether it has been remapped and won't register\nthe `<F7>` key if so.  For example, to remap it to `<F3>` instead, use:\n\n    autocmd FileType python map <buffer> <F3> :call Pyflakes()<CR>\n"}, {:name=>"tabops", :summary=>"A collection of miscellaneous functionalities operating tabs.", :description=>"Description:\n  This script provides tab operation functionalities.\n  Going to some tab, moving some tab, sorting tabs and reopening closed tabs.\n                                                                                      \nUsage:\n  1. (optional) set prefix if you want to change. (let g:Tabops_prefix)\n     default: <Tab>\n  2. (optional) let g:Tabops_use??? variables 0 if you want to disable some features.\n  3. start editing\n                                                                                      \nFeature:\n\n  * the default prefix is <Tab>\n                                                                           \n  if g:Tabops_useGoto == 1 then ...\n      <C-Tab>  : goto the next tab.\n      <S-C-Tab>: goto the prev tab.\n                                                                           \n      {prefix}1: goto the 1st tab.\n      {prefix}2: goto the 2nd tab.\n         :\n      {prefix}8: goto the 8th tab.\n      {prefix}9: goto the LAST tab.\n                                                                           \n  if g:Tabops_useMove == 1 then ...\n      {prefix}l: swap the current tab with the right one.\n      {prefix}h: swap the cerrent tab with the left one.\n                                                                           \n  :TabopsSortByPath\n      sorts tabs comparing their paths.\n                                                                           \n  :TabopsSortByBufnr\n      sorts tabs comparing their internal numbers.\n                                                                           \n  :TabopsSortByLastChange\n      sorts tabs comparing their recently-changed timestamps.\n      the most recent tab comes to left.\n                                                                           \n  :TabopsUniq\n      closes duplicate tabs.\n                                                                           \n  :TabopsCloseRight\n  :TabopsCloseLeft\n      closes right/left tabs except a current tab.\n                                                                           \n  :TabopsOpenSiblings [LOADED]\n      scans buffers that are in the same directory, and open them in tabs.\n      with LOADED, only loaded buffers are read in tabs. (not globbed)\n"}, {:name=>"endline", :summary=>"Easily add filetype-specific line-endings.", :description=>"This plugin maps (by default) <S-CR> to add a filetype's provided \"line ending\"\nto the end of the current line if it is not already present. For instance, a ';'\nwould be added to the end of a line of JavaScript source.\n\nThis is similar to a feature provided by TextMate, mapped to\nCommand-Option-Return in that application.\n\nUsage:\n\nSomewhere in your .vimrc (or equivalent), provide a global dict mapping filetype\nnames to line endings, like so:\n\nlet g:Endlines = {\n  &#039erlang': '.',\n  &#039java': ';',\n  &#039javascript': ';',\n  &#039ocaml': ';;',\n  &#039perl': ';',\n  &#039php': ';',\n  &#039python': ':',\n  &#039sml': ';'\n\\}\n\nBy default, <S-CR> is mapped in both insert and normal mode. In insert mode, a\nnew line is added as well.\n\nGlobal Options:\n\ng:EndlineMapping ('<S-CR>'): The default endline mapping.\ng:EndlineInsertMapping (g:EndlineMapping): The insert mode mapping.\ng:EndlineNormalMapping (g:EndlineMapping): The normal mode mapping.\ng:EndlineInsert (1): 0 to disable the insert mode mapping.\ng:EndlineNormal (1): 0 to disable the normal mode mapping.\ng:Endlines ({}): See \"Usage\""}, {:name=>"pythondo", :summary=>"Add ", :description=>"This plugin adds a command \":Pythondo\", which is rather like \":perldo\" or\" \":rubydo\".\n\n  :[range]Pythondo {cmd}\n  :[range]Pyd {cmd}\n          Execute Python command {cmd} for each line in the\n           [range], with variable \"s\" being set to the text of each line in\n           turn, and variable \"n\" being the corresponding line number.  \n           Setting variable \"s\" will change the text, but note that it \n           is not possible to add or delete lines using this command.\n           The default for [range] is the whole file: \"1,$\".\n           Setting variable \"n\" will set the text to line of number n, not\n           the current line. It's better not to set variable \"n\".\n  \n\nHere are some things you can try: >\n  :Pythondo s = str(n+1) + ' ' + s  # Add line number to each line\n  :py import time\n  :.Pythondo s = time.ctime()\n"}, {:name=>"obviously-insert", :summary=>"Makes it REALLY obvious if you are in insert mode.", :description=>"This script will change the colour of both the status bar and background when you enter and exit insert mode so no more typing : in the middle of your code.\n\nYou can choose the colours to use right at the top of the script.\n\nCredits: Many people on irc://irc.freenode.org in #vim.\n\nSpecial Credits:\ngodlygeek - Answered so many of my questions I lost count.\nDave Kirby - Pointing out version 0.5 was broken with gvim in GUI mode and why.\n\nI deleted the previous versions because they are broken in some (benign) way so you shouldn't use them."}, {:name=>"toggle_mouse", :summary=>"Toggles the mouse focus on or off.", :description=>"Toggles the mouse focus between Vim and your terminal emulator, allowing terminal emulator mouse commands, like copy/paste."}, {:name=>"regbuf.vim", :summary=>"Handy :registers buffer", :description=>"|regbuf| is handy |:reg| buffer.\n\n1. Yank/Paste register\n2. Edit register on buffer\n3. etc."}, {:name=>"mojo.vim", :summary=>"Mojolicious templates syntax", :description=>"Syntax file for highlighting embedded Perl code in Mojolicious (http://mojolicio.us) templates.\nDesigned to highlight syntax of both html.ep and html.epl formats and (optional) __DATA__ section in Perl files.\n\nmojo.vim lives at http://github.com/yko/Vim-Mojo-Data-syntax"}, {:name=>"luainspect.vim", :summary=>"Semantic highlighting for Lua in Vim", :description=>"This Vim plug-in uses the LuaInspect tool to (automatically) perform semantic highlighting of variables in Lua source code. It was inspired by lua2-mode (for Emacs) and the SciTE plug-in included with LuaInspect. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n \u0095 http://peterodding.com/code/vim/lua-inspect/\n \u0095 http://github.com/xolox/vim-lua-inspect\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!"}, {:name=>"pw", :summary=>"programming theme for gvim", :description=>"dark, lucid inspired theme suitable for e.g C programming.\n\nscreenshot:\nhttp://i34.photobucket.com/albums/d137/badeip/pwtheme.png"}, {:name=>"phpcomplete.vim", :summary=>"php omnicomplete with extra support", :description=>"Default phpcomplete.vim does not support in-file checking of $var = new Class; so if you don't have a tags file with the variable in it already you have to hack around it by placing the comment /* @var $yourvar YourClass */ above the line which is really kludgy.\n\nThis patch allows for in-file checking so you don't need the comment.\n\n$instance = new Class;\n...\n$instance->Blah(); // <-- complete without comment\n\nIt also allows support for singleton instantiations:\n\n$instance = Class::getInstance();\n$instance->completeMe(); // sweet completion\n\n=== Usage ===\n// example class which has a TAGS file generated for it somewhere\nclass SomeClass {\n  private function _private_method() {} // never shows up in completion list\n  public static function staticMethod() {} // only shows up when using completion on SomeClass::<C-X><C-O>\n  public function completeMe() {} // only shows up when using completion on $instance_of_someclass-><C-X><C-O>\n}\n\n== Non-static completion ==\n$instance = new SomeClass;\n...\n$instance-><C-X><C-O> to display the omnicompletion menu (see :help ins-completion)\n$instance->completeMe(); // will autoselect completeMe since it's the only public non-static method\n\n== Static completion ==\nSomeClass::<C-X><C-O> to display omnicompletion menu\nSomeClass::staticMethod(); // once again will autoselect staticMethod since it's the only public static method\n\n== Singleton completion ==\n$instance = SomeClass::getInstance();\n$instance-><C-X><C-O> complete just like non-static\n\n\n\n=== Other features ===\n * Correct restriction of static or standard methods based on context ( show only static methods with :: and only standard with ->)\n * Real support for self:: and $this-> with the aforementioned context restriction\n * Constant variable completion (not just define(VARIABLE, 1) but const VARIABLE = 1)\n\nFollow updates:\nhttp://github.com/shawncplus/phpcomplete.vim"}, {:name=>"SyntaxComplete", :summary=>"OMNI Completion based on the current syntax highlights", :description=>"SyntaxComplete.vim is a plugin which uses the new Vim7 OMNI completion features (intellisense code completion).\n\nSyntaxComplete.vim version 5.0 is included in the Vim 7.2 release.\nSyntaxComplete.vim version 7.0 is included in the Vim 7.3 release.\n\nWhat does it do:\n-----------------------\nVim has the ability to color syntax highlight nearly 500 languages.  Part of this highlighting includes knowing what keywords are part of a language.  Many filetypes already have custom completion scripts written for them, the syntaxcomplete plugin provides basic completion for all other filetypes.  It does this by populating the omni completion list with the text Vim already knows how to color highlight.  It can be used for any filetype and provides a minimal language-sensitive completion.\n\nThere are not many languages with full blown OMNI completion scripts written in Vim.  Yet, having a list of functions and keywords to complete can be very handy especially when you are working with a predefined API.\n\nAdding the following to your .vimrc, will setup SyntaxComplete for every filetype that does not already have a language specific OMNI script:\n\n    if has(\"autocmd\") && exists(\"+omnifunc\")\n\tautocmd Filetype *\n\t\t    \\\tif &omnifunc == \"\" |\n\t\t    \\\t\tsetlocal omnifunc=syntaxcomplete#Complete |\n\t\t    \\\tendif\n    endif\n\n\nIt also provides some public functions so other plugin writers can pull syntax keywords (based on group names) from Vim and utilize them in any manor.  Examples are included in the help files, but here is a simple example:\n    let myKeywords = []\n    let myKeywords = OmniSyntaxList( ['sqlKeyword'] )\n    let allItems = OmniSyntaxList( [] )\n\n\nExisting instructions can be found within Vim7 using\n:h ft-syntax-omni\n\nThis plugin is new to Vim7.  Improvements to the script will be uploaded here, and supplied to Bram for inclusion into future versions of Vim7.\n \n"}, {:name=>"Vim-Syntax-File-for-Google-Code-Wiki", :summary=>"Vim Syntax File for Google Code Wiki", :description=>"This is a syntax file for Google Code Wiki, supporting highlighting of main features of Google Code Wiki, like:\n\n* Formating (bold, emphasis etc.)\n* Code text\n* Block links\n* Google Code Wiki pragmas\n* Titles\n* Folding between sections and in code block\n\nBesides syntax and folding features, it has a powerful function for the formatexpr option. Just :set formatexpr=googlecodewiki#FormatExpr() and you will be able to format your texts without breaking link blocks or quote blocks. This features can be turned off with global variables.\n\nYou might want to follow its development on its Google Code page: http://code.google.com/p/vimgcwsyntax/"}, {:name=>"JsLint-Helper", :summary=>"a javascript code validator", :description=>"when use  \":w\" to save a .js file, this plugin will validate its content and display the errors via Vim's sign functionality.\n\nsee the screen shot:\nhttp://i1021.photobucket.com/albums/af333/aj3423/jslint.png\n\ncode stole from Eclim :) \n\nnot tested for linux yet -_-\n"}, {:name=>"Haskell-Highlight-Enhanced", :summary=>"highlight all Haskell98 standard function & classes & datatypes", :description=>"Mainly based on the plugin (http://www.vim.org/scripts/script.php?script_id=2062) which is no longer maintained,\nthe last version is 1.2, so I get started from 1.3.\nThx to it !\n\nThat one regards 'class' and 'datatype' as the same, but this one separates them.\nThat one only highlights the func & class & datatype in the standard Prelude, but this one includes all the official.\n\nHere's the SNAPSHOT\nhttp://treblih.is-programmer.com/user_files/treblih/Image/hask.png\n\nU could see that 'datatype' and 'keyword' are in green, while 'class' in black, function in purple.\n\nEnjoy"}, {:name=>"typeredeemer", :summary=>"Simple font-size unit conversion for your CSS stylesheets", :description=>"Ever wanted to change your font-size/line-height declarations from one unit to another without resorting to going back and forth between vim and an online conversion tool? This script lets you convert between px, em and % values through the use of some simple key mappings.\n\nMappings for converting one font-size/line-height declaration at a time include:\n\n<leader>px - convert value to px equivalent\n<leader>em - convert value to em equivalent\n<leader>p% - convert value to percent equivalent\n\nTo convert all font-size and line-height declarations at the same time:\n\n<leader>apx - convert all to px\n<leader>aem - convert all to em\n<leader>ap% - convert all to %\n\nYou don't have to be bound to the browser default size of 16px, which this script uses by default. To change this value, use the mapping '<leader>sd' and specify a new default size in px (i.e. 17.0). To check what this value is at any time, use the mapping '<leader>gd'."}, {:name=>"BusierBee", :summary=>"A modification of BusyBee.vim", :description=>"This is a (tiny) modification of the BusyBee colour scheme (\"vimscript #2549\") by Patrick J. Anderson... basically just changed Function colours to be different from Normal colours (hence the \"busier\") and tweaked the String colour."}, {:name=>"Shapley-Values", :summary=>"This scripts computes Some Shapley values for Gmes with Externalities", :description=>"The script provides tools to compute:\nShapley Value (also using Ieong-Shoham rules) of a Normal form game,\nMcQuillin-Shapley value\nPham-Do-Norde-Shapley value \nMeyrson-Shapley values                (all three for games in partition form, i.e. with externalities) \n"}, {:name=>"help_movement", :summary=>"Movement over Vim help sections with ]] etc. ", :description=>"DESCRIPTION\nThis filetype plugin provides movement commands for Vim help sections. \n\nUSAGE\n\t\t\tMove around Vim help sections (starting with a =====\n\t\t\tline). \n]]\t\t\tGo to [count] next start of a help section. \n][\t\t\tGo to [count] next end of a help section. \n[[\t\t\tGo to [count] previous start of a help section. \n[]\t\t\tGo to [count] previous end of a help section. "}, {:name=>"diff_movement", :summary=>"Movement over diff hunks with ]] etc. ", :description=>"DESCRIPTION\nThis filetype plugin provides movement commands and text objects for diff hunks.\nSupports traditional, context and unified diff formats. \n\nUSAGE\n\t\t\tMove around diff hunks: \n]]\t\t\tGo to [count] next start of a diff hunk. \n][\t\t\tGo to [count] next end of a diff hunk. \n[[\t\t\tGo to [count] previous start of a diff hunk. \n[]\t\t\tGo to [count] previous end of a diff hunk. \n\nih\t\t\t\"inner hunk\" text object, select [count] hunk contents. \nah\t\t\t\"a hunk\" text object, select [count] hunks, including\n\t\t\tthe header. "}, {:name=>"fortunes_movement", :summary=>"Movement over email fortunes with ]] etc. ", :description=>"DESCRIPTION\nThis filetype plugin provides movement commands and text objects for email\nfortunes, i.e. blocks of text delimited by /^-- \\?$/. \n\nUSAGE\n\t\t\tMove around fortunes: \n]]\t\t\tGo to [count] next start of a fortune. \n][\t\t\tGo to [count] next end of a fortune. \n[[\t\t\tGo to [count] previous start of a fortune. \n[]\t\t\tGo to [count] previous end of a fortune. \n\nif\t\t\t\"inner fortune\" text object, select [count] fortunes,\n\t\t\texcluding the fortune separator. \naf\t\t\t\"a fortune\" text object, select [count] fortunes, including\n\t\t\tthe preceding fortune separator. "}, {:name=>"mail_movement", :summary=>"Movement over email quotes with ]] etc. ", :description=>"DESCRIPTION\nThis filetype plugin provides movement commands and text objects for email\nquotes. \n\nUSAGE\n\t\t\tMove around email quotes of a certain nesting level, as\n\t\t\tdetermined by the current line; if the cursor is not on\n\t\t\ta quoted line, any nesting level will be used. \n]]\t\t\tGo to [count] next start of an email quote. \n][\t\t\tGo to [count] next end of an email quote. \n[[\t\t\tGo to [count] previous start of an email quote. \n[]\t\t\tGo to [count] previous end of an email quote. \n\n\t\t\tMove to nested email quote (i.e. of a higher nesting\n\t\t\tlevel as the current line; if the cursor is not on a\n\t\t\tquoted line, any nesting level will be used). \n]+\t\t\tGo to [count] next start of a nested email quote. \n[+\t\t\tGo to [count] previous start of a nested email quote. \n\naq\t\t\t\"a quote\" text object, select [count] email quotes\niq\t\t\t\"inner quote\" text object, select [count] regions with\n\t\t\tthe same quoting level"}, {:name=>"CSS3-Highlights", :summary=>"CSS3 Highlights", :description=>"Dumped! Please check this: http://www.vim.org/scripts/script.php?script_id=3220\n\nBased on original css.vim.\n\nAdded CSS3 properties highlights, support most of CSS3 prop, and will recognize prefix like -moz-, -webkit-\n\nNext step is make both prop and attr highlight colors more readable.\n\nWelcome for any feedbacks!"}, {:name=>"vimpluginloader", :summary=>"Plugin that helps to create complicated vim scripts", :description=>"This plugin provides the ability to autoload plugins on demand, create \nglobal functions and commands and extend mksession with plugin support.\n\nFeatures:\n    \u0097 Autoloading plugins on FuncUndefined event.\n    \u0097 Autoloading plugins when their command is called.\n    \u0097 Autoloading plugins when their mapping is used.\n    \u0097 Autoloading plugins when their functionality is required.\n    \u0097 Displaying plugins' status.\n    \u0097 Unloading and reloading plugins (useful for plugin developers).\n    \u0097 Searching for a function number through registered plugins.\n    \u0097 Checking function arguments before running a function.\n    \u0097 Create a session file with plugin's data.\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/load.txt.html\nProject page: http://sourceforge.net/projects/vimpluginloader\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3187, http://sourceforge.net/projects/vimargumentchec\nvimscript #3188, http://sourceforge.net/projects/vimcompcrtr\nvimscript #3190, http://sourceforge.net/projects/yamlvim"}, {:name=>"jsonvim", :summary=>"Library that makes vim able to safely load JSON files", :description=>"This plugin provides the ability to load JSON encoded data from files and dump \nVim variables to files. Data loaded is cached in order to speed up the \nplugin.\n\nThis plugin also provides Russian documentation. Add «ru» to option «helplang» in order to use it.\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/json.txt.html\nRussian documentation: http://vimpluginloader.sourceforge.net/doc/json.rux.html\nProject page: http://sourceforge.net/projects/jsonvim\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader\nvimscript #3186, http://sourceforge.net/projects/vimstuff"}, {:name=>"vimstuff", :summary=>"Some useful vim functions", :description=>"This plugin contains some functions that can be useful for plugin developers and one command that may be useful to all users:\n\n    \u0097 :SE command (:e replacement with zsh-like completion and multiple file arguments support)\n    \u0097 Pure vimscript base64 decoder\n    \u0097 Bitwise OR and AND functions (slow and unsigned integer only)\n    \u0097 Some escaping and quoting functions\n    \u0097 Function that prints table with higlighted header\n    \u0097 Failsafe builtin `string()' replacement (for representation purposes only)\n    \u0097 ...\n\nProject page: http://sourceforge.net/projects/vimstuff\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader"}, {:name=>"vimargumentchec", :summary=>"Library that helps to check function and command arguments.", :description=>"This plugin provides the ability to check whether function or command\narguments match specific model or whether some value matches specific model.\n\nFeatures:\n    \u0097 Checks a list of arguments against specified model\n    \u0097 Checks a single value against specified model\n    \u0097 Provides a way to specify default values for optional arguments\n    \u0097 Provides a way to check a single value, convert it, and check again\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/chk.txt.html\nProject page: http://sourceforge.net/projects/vimargumentchec\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader"}, {:name=>"vimcompcrtr", :summary=>"Script that makes creating completion functions much easier.", :description=>"This plugin makes creating custom completion functions much easier.\n\nFeatures:\n    \u0097 Ability to get variants from list and from dictionary keys\n    \u0097 Ability to get variants from custom function\n    \u0097 Allows modifying the completion description\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/comp.txt.html\nProject page: http://sourceforge.net/projects/vimcompcrtr\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader\nvimscript #3186, http://sourceforge.net/projects/vimstuff\nvimscript #3187, http://sourceforge.net/projects/vimargumentchec\nvimscript #3325, http://bitbucket.org/ZyX_I/vim-fileutils/overview"}, {:name=>"vimoop", :summary=>"Adds some features of Python OOP model to vim.", :description=>"Provides inheritance, uses __init__ function as a constructor. This plugin was used to create YAML parser (vimscript #3190) by rewriting Python code in vimscript.\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/oop.txt.html\nProject page: http://sourceforge.net/projects/vimoop\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader"}, {:name=>"yamlvim", :summary=>"YAML dumper/emitter in pure vimscript", :description=>"This is the library that is able to represent arbitrary Vim data in YAML 1.2. It also provides a parser that is python YAML parser pyyaml rewritten in pure vimscript.\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/yaml.txt.html\nProject page: http://sourceforge.net/projects/yamlvim\nDependencies (you do not need to install them by yourself, see installation details):\nvimscript #3184, http://sourceforge.net/projects/vimpluginloader\nvimscript #3186, http://sourceforge.net/projects/vimstuff\nvimscript #3189, http://sourceforge.net/projects/vimoop"}, {:name=>"DokuVimKi", :summary=>"Allows to edit DokuWiki pages via XMLRPC", :description=>"This plugin allows you to edit wiki pages of a remote DokuWiki [1] instance using the DokuWiki XMLRPC API. \n\nFor more information please visit  http://www.chimeric.de/projects/dokuwiki/dokuvimki\n\n[1] http://dokuwiki.org"}, {:name=>"jade.vim", :summary=>"Jade syntax and indenting", :description=>"Runtime files for the Jade template engine."}, {:name=>"v4daemon", :summary=>"Send vim buffer lines to your background daemon (i.e. netcat)", :description=>"This script eases sending lines to the ahead-started daemon. I needed and tested it for creating a test server with netcat and send the pre-recorded sentences to the clients:\n\n:V4dStart nc -l -p 10010\n\nStarts netcat listening on port 10010. Then you start a client somewhere.\nFrom the buffer you are working:\n\n[Select by v,V,ctrl-v] :V4dSendLine\n[Select by v] :V4dSendWord\n\nSends the line(s) you are on/selected to the daemon (and pushed to clients in my case).\n\n:V4dStop\n\n(-:njoy!\n"}, {:name=>"ovim", :summary=>"open files in running gvim from a terminal", :description=>"ovim is a zsh script that makes it convenient to open files\nor execute \"ex\" commands in gvim from a Unix terminal.\n\nExamples:\n\nOpen all c files and jump to the first \"main\" string:\n    ovim *.c +/main\n\nOpen all cpp files that contain the \"sstream\" string:\n    grep -l sstream *.cpp | xargs ovim\nor\n    ovim -c vimgrep sstream *.cpp\n\nOpen the README.txt file in a new window:\n    ovim -c split README.txt\n\nMake gvim jump to a tag with respect to the \"tags\" file\nin the shell directory (try this in /usr/share/vim/vim72/doc):\n    ovim -c tag /grail\n\nChange to the current shell directory in gvim:\n    ovim -c cd .\n\nOpen all txt files in the gvim server MYGVIM.  The server name is\ncapitalized thus \"-s mygvim\" is the same as \"-s MYGVIM\":\n    ovim -s mygvim *.txt\n\nMake gvim a bit animated:\n    ovim -c \"winpos \"{1..400}\" 1|\"\n\nFeautures:\n\n* speed \"gvim --remote f1 f2 f3 ... f50\" could cause about 10 second screen\nupdates in some older gvim versions.  With ovim gvim sources a temporary\nscript file and avoids such slow downs.\n\n* intelligent server selection.  ovim attempts to reuse\nthe last server used, if it is not running, it will select the last live\ngvim server or finally would start new gvim process.  The server\nselection can be forced with a \"-s MYSERVER\" option.  Note that this\nserver choice is permanent, i.e., subsequent calls of ovim would try\nto use the same server.\n\n* \"ex\" commands are executed in the current shell directory\n\"ovim -c split filename\" works even if terminal and the gvim server are\nin different directories.  The gvim directory is changed to the terminal\ndirectory just before the ex commands execution and then restored back.\nThis is done in such way that \"ovim -c cd somewhere\" works as expected.\n"}, {:name=>"Starting-.vimrc", :summary=>"Simple .vimrc to get up and running", :description=>"This is my base .vimrc that I synchronise between all my machines, there's nothing fancy here, just some syntax, line numbers and some other niceties."}, {:name=>"gedim", :summary=>"Auto-size Graphical EDitor DIMensions on open.", :description=>"My portable computer is my primary workstation. I either use an external, high resolution monitor or its built-in screen, depending on where I am. I often use also someone else's monitors, when I'm working remotely. This forces me to change the graphical Vim editor dimensions for every location where I happen to be. Though not complicated, it's annoying. That's why I wrote this script/Vim auto-command that does the job instead. Just define the desired editor columns and lines for a given resolution, and MacVim will open at that size every time that the same resolution is detected.\n\nFeatures:\n\n    * User configurable: add as many output device resolutions and editor sizes as desired or needed\n    * MacVim and gVim compatible\n    * Works on OS X, Linux/Gnome, Linux/KDE, and Windows\n    * Unobtrusive; set it up once and forget about it\n\nNo more dragging the window corners to resize. No more :set columns=128. Just open Vim and get to work!"}, {:name=>"current-func-info.vim", :summary=>"Get current function name", :description=>"Supported languages: C, Perl, Ruby, Python, PHP, Vim script\nRepository: http://github.com/tyru/current-func-info.vim\n\n\ncurrent-func-info shows current function's name to statusline, tabline,\nanywhere.\n|cfi#get_func_name()| to get function's name.\n\n\ncfi#load()\t\t\t\t*cfi#load()*\n\tLoad \"autoload/cfi.vim\" and \"plugin/cfi.vim\".\n\ncfi#get_func_name([{filetype}])\t\t\t\t*cfi#get_func_name()*\n\tReturns function's name.\n\tIf {filetype} is omitted, current 'filetype' is used instead.\n\tInclude this expression to |'statusline'| or |'tabline'| and so on.\n\ncfi#format({fmt}, {default})\t\t\t*cfi#format()*\n\tReturns formatted string. >\n    let &statusline = '%{cfi#format(\"[%s()]\", \"no function\")}'\n<\tThis returns \"no function\" if cfi#get_func_name() returns empty string.\n\tOr returns \"[func()]\" if cfi#get_func_name() returns \"func\".\n\ncfi#create_finder({filetype})\t\t\t\t*cfi#create_finder()*\n\tReturns Dictionary of instance for finder.\n\n\tTo create finder, implement |s:finder.find()| or\n\timplement |s:finder.get_func_name()|, |s:finder.find_begin()|,\n\t|s:finder.find_end()|.\n\n\t(TODO: Write more descriptions)\n\n\tSee ftplugin/*.vim for the details.\n\ncfi#supported_filetype({filetype})\t\t\t\t*cfi#supported_filetype()*\n\tReturn boolean value if {filetype} is supported."}, {:name=>"undofile.vim", :summary=>"persistent undo: enable 'undofile' for certain files only", :description=>"If you want 'undofile' only for certain files, you will notice that 'undofile' cannot be set in a modeline, or once the buffer is loaded (because an existing undo file will not be loaded then).  Bram suggests to use a BufReadPre autocmd which sets 'undofile' before the buffer is loaded.  This script does the steps for you.\n\nUsage:\n\n:SetUndoFile[!]\n\n  execute :setlocal undofile, install a BufReadPre autocmd for the current file name and also maintain a plugin file \"plugin/undofile_autocmds.vim\" that enables all such autocmds at next startup of Vim.\n\n  This means you can execute this command once for the current file and then never ever again -- FIRE AND FORGET ;)\n\n  The plugin file (if not found in the runtimepath) is stored in the first directory of the runtimepath (which must contain a \"plugin\" folder).  Older Vims will ignore the plugin.\n\n  With [!], ignore if 'undofile' is already set.\n\n\n:UnsetUndoFile\n\n  opposite of :SetUndoFile.  Does :setlocal noundofile, removes the autcommand and the autcommand entry from \"plugin/undofile_autocmds.vim\"; finally it executes :DelUndoFile.\n\n\n:DelUndoFile\n\n  delete the undofile for the current buffer.  Fails silently.\n\nPLEASE REPORT BUGS"}, {:name=>"vim-addon-ocaml", :summary=>"collected ocaml scripts - some completion - annotations", :description=>"http://github.com/MarcWeber/vim-addon-ocaml\n\nThis collection includes well known scripts I was pointed to such as ocaml\nindentation, annot support as well as omni completion support\n\nI modified the indenting slightly so that the args  \"..\" and x y are not\nindented at all. (Using vim indentation they are indented the same as Printf\nwhich is annoying)\n\nlet f x =\n  let y = x + 1 in\n  Printf.printf\n    \"%d + 1 = %d\"\n    x y\n\ncompletion details:\n====================\n\nAll completion is based on .mli files found in all tag files.\nIf you don't have tags, tell Vim which .mli files to use:\n\nlet g:vim_addon_ocaml = { 'provide_additional_mlis': function('name of function returning a list of .mli files') }\n\na) name completion:\n  all .mli files are grepped for the name\n  Additionally all let bindings found in current buffer are taken into account\n\nb) type completion:\n\n  con:str           finnds concat : string -> string\n\n  :^int->string$    finds string_of_int\n\nc) var based completion (not that well tested)\n\n  x:conc\n\n  the type of x is looked up by .annot files (you must have created the musing ocamlc or ocamelopt)\n  Then b) completion is used using the type of x.\n"}, {:name=>"Haskell-Conceal", :summary=>"Add some conceal operation to haskell's syntax", :description=>"Use some unicode operators in haskell file without changing it.\n\nRequire : Vim 7.3 or Vim compiled with the conceal patch\n  \n"}, {:name=>"trailing-whitespace", :summary=>" Highlights trailing whitespace in red and offers:FixWhitespace", :description=>"This plugin causes all trailing whitespace to be highlighted in red.\n\nTo fix the whitespace errors, just call :FixWhitespace.  By default it\noperates on the entire file.  Pass a range (or use V to select some lines)\nto restrict the portion of the file that gets fixed.\n\nThe repo is at http://github.com/bronson/vim-trailing-whitespace\n\nBased on http://vim.wikia.com/wiki/Highlight_unwanted_spaces\n"}, {:name=>"rdark-terminal", :summary=>"256 Color Terminal version of the rdark colorscheme", :description=>"I ported the rdark colorscheme (http://www.vim.org/scripts/script.php?script_id=1732) to fit in a 256 color capable terminal.\n\nInfo: As the original background color is not available in 256 color mode\nI've set it to black. But you can set the color your terminal should display\nfor black to #1e2426 and you will have almost a 1:1 copy of the gui scheme.\nI also suggest to set the second black color to #2c3032. (It is the\nbackground color which ist used for NonText)\nIf you're using a terminal which reads from Xdefaults (e.g. urxvt) you just\ndo this in your .Xdefaults:\n*color0:     rgb:1e/24/26\n*color8:     rgb:2c/30/32\n\nScreenshot: http://www.img-share.net/uploads/125vim_b1.png"}, {:name=>"mantip", :summary=>"quick tip from synopsis section in man pages for words", :description=>"with default key binding enabled, move the cursor over a word, for example strcmp and press <leader>d\nthis will put the following line in the status line:\n\nSTRCMP(3) 1/2: int strcmp(const char *s1, const char *s2);\n(STCMP(3) - man page, 1/2 - first line of two lines)\n\npressing <leader>d again will show the next decelration:\n\nSTRCMP(3) 2/2: int strncmp(const char *s1, const char *s2, size_t n);\n\n<leader>D show the previous one, the list is cyclic\n\nuse <leader>1..9 to man specific sections\n\nsee code for more details\n"}, {:name=>"htip", :summary=>"quick haskell hints at the status line", :description=>"with default key binding enabled, move the cursor over a word, for example \"map\" and press <leader>ht \nthis will put the following line in the status line: \n\n\n1/1: map :: (a->b) -> [a] -> [b]\n(1/1 - first line of, well, a single line) \n\npressing <leader>hh will show the next line, if any.\n\n<leader>hH show the previous one, the list is cyclic \n\nthere are also <leader>hi for info, <leader>hb for browse, <leader>hk for kind.\n\nsee code for more details "}, {:name=>"python_showpydoc.vim", :summary=>"Show document string of python3 or later in command line~", :description=>"The script has updated for support both python2.x and python3.x \ngo to vimscript#3212 for new version.  \nNote: this plugin needs python3/dyn so that using gvim7.3 is easist and best way.\n\nusage:         commands:\n                 :Spydoc object\n                 the \"object\" can be an \"imported\" class, module or function(/method)\n                 the command return document string corresponding to the object.\n                 else return type of the object.\n                 if the object is \"unimported\" the command will fail except for\n                 modules re, vim and\n                 FunctionType, MethodType, ModuleType, BuiltinFunctionType,\n                 BuiltinMethodType imported from module types\n\ntip:             this plugin now is just designed for standart python3 library,\n                 if try the command with a user-defined \"object\", \n                 be very likely to get an error \"name 'object' is not defined\".\n\nexamples:  lets say a simple python script:\n                   import sys;\n                   form sys import path;\n                   class Test(object): pass;\n                   t = Test();\n                and input following commands:\n\n                :Spydoc sys \n                sys document(module)\n\n                :Spydoc sys.exit\n                sys.exit document(function)\n\n                :Spydoc sys.path\n                type of sys.path(built-in type list)\n\n                :Spydoc path\n                type of os.path(same as above)\n\n                :Spydoc Test:\n                error: name 'Test' is not define\n\n                :Spydoc t:\n                error: name 't' is not define\n\n                :Spydoc sys.ss\n                error: 'module' object has no attribute 'ss'\n\n                :Spydoc sys.exit()\n                error: 'sys.exit()' is a wrong?"}, {:name=>"tangoshady", :summary=>"the real TANGO colorscheme", :description=>"This is a dark background tango colorscheme for gvim, macvim etc.\n\nInspired by the default vim settings in ubuntu linux gnome-terminal. Colors are one-to-one except some modifications like the Pmenu for better reading experience.\n\nIMPORTANT: THIS IS ONLY FOR GUI VIM\n\nScreenshot:\nhttp://niksan.com/vim/tangoshady.png\n\n\nFor donations email Shady at vimpimps@gmail.com"}, {:name=>"bundler", :summary=>"Vim Ex-command wrapper for Ruby Bundler", :description=>"Ruby Bundler is a RubyGem that is used for Rails 3+ and other Ruby projects to check dependencies of RubyGems for the project.\n\nTo use you can do the following:\n * :cd to a project with a Gemfile located at the root.\n * Open Gemfile\n * In Ex-command mode type <tt>:Bundle check</tt>\n * This will check your Gemfile dependencies are satisfied.  If there are RubyGem requirements specified in your Gemfile that are not satisfied the plugin will open up a quickfix window and for each error open up the Gemfile at the requirement that fails using quickfix keybindings.\n\nFull featured quickfix support for other Bundler subcommands coming soon.  You can clone the Git repository on GitHub from here:\nhttp://github.com/mbbx6spp/vim-bundler"}, {:name=>"cHiTags", :summary=>"Hi tags", :description=>"Hi Tags Use C. \nIn linux fast.\nWindows Slow."}, {:name=>"Quotes", :summary=>"Minimal but smart quote handling for programming", :description=>"Useful handling of quote-symbols for programming, without becoming too complicated or restrictive.\n\nThis script is designed so the sequence of keystrokes you would normally type (without any scripted assistance) yields the same result as with this script enabled. But that doesn\\\\&#039t mean you have to.\n\n- Typing \\\\\\\" introduces a new string and puts the cursor inside unless one of the following cases applies.\n- Typing \\\\\\\" just before the end of a string jumps out of the string (so you can continue typing).\n- Typing \\\\\\\" inside a string introduces a pair of escaped quote-symbols and puts the cursor in between.\n- Typing \\\\\\\" inside a string right after an escape character (i.e. an odd number of back-slashes) just inserts a \\\\\\\".\n- Typing \\\\\\\" just before \\\\\\\\\\\\\\\" inside a string jumps over the \\\\\\\\\\\\\\\", so (again) you can continue typing.\n\nIt\\\\&#039s pretty minimal, but useful I hope.\n\nThis is a 0.1 version, it has not yet been heavily used."}, {:name=>"Smart-Parentheses", :summary=>"Minimal but smart parentheses handling for programming", :description=>"Actually most types of brackets are supported, as long it works with %. This script aims to provide some useful tricks of ParEdit but be less restrictive and more geared towards C-style programming rather than Lisp. It has less than 5% of ParEdit probably, if you want something more similar, look for slimev.\n\nThis makes the open brackets (, [, and < introduce a balanced pair. If there is already an unbalance, the script determines if adding a closing bracket makes matters better or worse. In the latter case, the closing bracket is not added.\n\nTyping the close bracket checks if the next non-whitespace character is already that same symbol. If it is, the script just zaps all white-space until the existing symbol and moves past it. If there is no closing symbol, a new closing bracket is introduced. (Note that is much less restrictive than ParEdit but also much less safe).\n\nFor { a special case exists: typing a second { in a row introduces extra newlines for C-style programming rather than a nested pair of curly brackets. Also, } doesn't remove all white-space like the other brackets do. Again, this is convenient for programming.\n\nIn normal mode, you can type a number N and then an opening bracket, and the script will put brackets around the following N words, similar to what you can do in ParEdit."}, {:name=>"operator-reverse", :summary=>"Operator to reverse text/lines", :description=>"operator-reverse provides operator / ex commands to reverse text / lines.\n\nRequirements:\n- |operator-user| (vimscript#2692)\n\n\nrepository\n  http://github.com/tyru/operator-reverse.vim"}, {:name=>"python_showpydoc", :summary=>"Show document python within gvim command line~", :description=>"details in scripts\n"}, {:name=>"rslTools", :summary=>"A tool set for renderman shading language developers", :description=>"RSL Vim tools are a set of Vim commands that help people to write, compile and render their RSL shaders in one place. Usually at the time of shader writing, switching between different applications to compile and render the shader is very time consuming. These scripts intgrate all of these steps and using them, developer can manage his\\her time more efficiently. It is customizable and support different renderman implementations."}, {:name=>"presets", :summary=>"Quickly switch between vim configurations", :description=>"This plugins allows users to push presets (sets of |options|) onto a \nconfiguration stack and remove them later on, i.e., it allows users to \nquickly switch between pre-defined configurations (e.g. GUI-related \noptions).\n\nIn order to push a preset, use the |:Preset| command:\n\n    :Preset! NAME\n\nFull docs:\nhttp://github.com/tomtom/presets_vim/blob/master/doc/presets.txt"}, {:name=>"View-Ports", :summary=>"Change tab title in terminal version of Vim", :description=>"Basic script to name your Vim tabs the way you want.\n\nMore tab operations is planned, but for now that's all."}, {:name=>"Replay.vim", :summary=>"Record and Replay your editing Session", :description=>"Feedback is welcome. Please rate this plugin, if you like it.\n\nThis is probably a little bit a silly plugin, but may be this is of use for someone.\n\nThis plugin does not cope with recording and replaying macros, rather it steps though your undo tree so you can see, \nwhat changes have been done, since starting editing.\n\nUse :StartRecording \"tag\" to start recording from the current change on and save it under the name \"tag\"\nUse :StopRecording \"tag\" to let the Recording for \"tag\" end at this change.\nUse :Replay \"tag\" to Replay your changes.\n\nYou can usually leave tagname out and Replay.vim will record your changes under the name \"Default\".\nSee :h Replay.txt to read the help\n\nThis Plugin is also available at github: http://github.com/chrisbra/Replay"}, {:name=>"qnamebuf", :summary=>"QuickNameBuf: A quick buffer manager", :description=>"I really like qname (vimscript #2317) and qbuf (vimscript #1910) and decided that it would be nice to combine them.  The author recommended I upload under my name.\n\nUsage:\n<F4> opens a list of the current buffers, and typing a string filters the list (by default ala lustyexplorer vimscript #1890).  All filtering is case insensitive (even if using Regular Expressions).  If there are many files open goes to a simplified view (just relative buffer number, and the filename with path), when filtered enough shows more information:\n    1) Relative Buffer Number\n    2) Current Buffer (%), Alternative Buffer (#), or if it is open in a visible split (=)\n    3) File name\n    4) Buffer number\n    5) Relative file path\n\nWhen Open:\n    <BS> Delete last char entered\n    <C-U> Delete all entered chars\n    <M-L> Toggle between listed and unlisted buffers\n    <M-D> bdelete the selected buffer, the explorer stays open and retains cursor position\n    <M-C> Close the window containing the buffer\n    <ESC> or <F4> close the explorer\n    <CR> Open the selected file in the current window\n    <M-S> Open the selected file in a split window\n    <M-V> Open the selected file in a vert split window\n    <M-T> Open the selected file in a new tab\n    <UP> <DOWN> <LEFT> <RIGHT> navigates the selection\n    <HOME> <END> move to the first/last item\n    <M-1>, ..., <M-0> open the first, ..., tenth file in the list\n\nNote, I wanted these to be <C-...> but <C-1>...<C-0> are not real key sequences.\n\nCustomization:\n    g:qnamebuf_hotkey  Set the default key to toggle qnamebuf (defaults to <F4>)\n    nmap <KEY> :call QNameBufInit(1)<cr>:~ Use regular expressions instead of the lusty file filter\n    nmap <KEY> :call QNameBufInit(X, <SIZE>)<cr>:~ Set the popup size to SIZE, defaults to 1/2 the visible lines (&lines / 2)\n\nHints:\nI find the following mappings very useful (jump to the ith file):\n    nmap <silent> <M-1> :brewind<CR>\n    nmap <silent> <M-2> :brewind \\| 1bn<CR>\n    nmap <silent> <M-3> :brewind \\| 2bn<CR>\n    nmap <silent> <M-4> :brewind \\| 3bn<CR>\n    nmap <silent> <M-5> :brewind \\| 4bn<CR>\n    nmap <silent> <M-6> :brewind \\| 5bn<CR>\n    nmap <silent> <M-7> :brewind \\| 6bn<CR>\n    nmap <silent> <M-8> :brewind \\| 7bn<CR>\n    nmap <silent> <M-9> :brewind \\| 8bn<CR>\n    nmap <silent> <M-0> :brewind \\| 9bn<CR>\nWhen starting the buffer the numbers are displayed and this allows consistant access."}, {:name=>"processing-snipmate", :summary=>"A port of the Textmate bundle to work with processing pde files", :description=>"Port of the original bundle for textmate to work with pde files (processing). Use with snipMate. \n\npls, use my http://github.com/tcha-tcho to contact me about this code      :)\n\nthankyou all"}, {:name=>"ProjectTag", :summary=>"This plugin is aimed at generating tags for a whole project.", :description=>"This plugin is aimed at generating tags for a whole project. \nExuberant Ctags is required for this plugin:\nhttp://ctags.sourceforge.net/\nThis plugin is quite useful when used with omnicomplete plugins, such as \nOmniCppComplete(vimscript #1520\n), pythoncomplete(vimscript #1542), javacomplete(vimscript #1785)\n.\nvim must be compiled with python support for this plugin to run. At least python 2.4 is required. Python 3.x is not supported currently.\n\nFor C/C++ projects, there's no need to generate a seperate tag file for the\nincluded header files any more! This plugin will also parses the header files\ncited in your source code, so a tag file providing information of all sources\nfiles in your project and header files included in your sources would be\ngenerated. \n\n\nThe following is a short tutorial.\n\nFirst, enter your project root directory, for example /home/user/myproject.\nThen create a project file, the file name must be \"project.prom\". Edit this\nfile. Copy the following content to this file:\n=========\n[general]\nsources=source1,source2,...\ninclude_dirs=include_dir1,include_dir2,...\ntagprog=ctags_command\ntagflag=--your-tag-flags\n=========\n\nReplace source1,source2,... with your source file, such as main.c,\nsrc/foo.cpp;\n\nreplace include_dir1,include_dir2,... with your include directories, such as\n/usr/include, /usr/local/include (not required for non C/C++ project, in fact,\neven for C/C++ project, it is also optional);\n\nreplace ctags_command with your ctags command, such as ctags, /usr/bin/ctags;\n\nreplace --your-tag-flags with your tag flags, such as --extra=+q.\n\n\nFor example, for the following source tree:\n\n- src/\n  main.c\n  foo.c\n  bar.c\n- include/\n  foo.h\n  bar.h\n\nThe project file could be like the following:\n=========\n[general]\nsources=src/main.c,src/foo.c,src/bar.c\ninclude_dirs=./include,/usr/include\ntagprog=ctags\ntagflag=--extra=+q\n=========\n\nThen save the file.\n\nUse vim to open a source file, such as source1.cpp. Use the command\n\":GenProTags\" to generate the tag file(this might be some kind of slow). if\nyou don't want to be blocked when generating the tag file, use \":GenProTagsBg\"\ninstead. This will generate the tag file in background.\n\n\nIf you find any bug, please report it to xuhdev@gmail.com, or submit it on the\nissue tracker: http://code.google.com/p/project-tag/issues/list\n\nRepository: http://code.google.com/p/project-tag/source/checkout"}, {:name=>"Better-CSS-Syntax-for-Vim", :summary=>"Make CSS more readable.", :description=>"GIT: http://github.com/ChrisYs/Better-CSS-Syntax-for-Vim\n\nWhat's differences with built-in CSS syntax in Vim:\n    1. Support most of HTML & CSS properties, including HTML5 & CSS3.\n    2. Different highlight colors for properties, value, units and so on.\n\nNOTICE:\n    DO NOT support CSS color plugin yet, I'll fix it when I have time.\n\nhttp://www.vim.org/scripts/script.php?script_id=3183 this script is dumped and I will continue to update this syntax."}, {:name=>"indexer.tar.gz", :summary=>"indexing all files in project with ctags (can work as add-on for project.tar.gz)", :description=>"IMPORTANT! You need patched version of ctags (5.8.1) to make this plugin work correctly (starting from Indexer version 2.0), because of bug in ctags 5.8. You can read detailed info about this bug and download pathed version here: http://dfrank.ru/ctags581/en.html\n\nPLEASE NOTE that in version 1.3 default name of project settings directory has been changed from \".vim\" to \".vimprj\" to avoid conflicts with standard ~/.vim directory. If you are using this feature and your project settings dir is \".vim\", please rename it.\n--------------------------------------------------------------\n\nThis plugin automatically indexes your project files using ctags and keeps tags up-to-date (at every save of file from project tags will be updated). This can be very useful when it's used together with plugins omnicppcomplete (for c, c++ development), code_complete.vim and other plugins that using tags.  You also will be able to jump from function call to its definition just by pressing Ctrl-] or g]\n\nThis plugin can work as add-on for project.tar.gz plugin ( http://www.vim.org/scripts/script.php?script_id=69 ). Indexer reads project file, parses it and builds tags for all files in project. But it also works fine without project.tar.gz.\n\n\nActually, if you are using project.tar.gz plugin and your projects file is default (~/.vimprojects), then setting Indexer up is very easily: you can just copy indexer.vim to your plugins directory, start Vim and open any file from your project.  The indexer plugin will detect that opened file is a file from project and automatically start ctags for each file in this project.  It also set &path and &tags options for Vim.\n\nIf you are using project.tar.gz, but you have another projects file, you should set option g:indexer_projectsSettingsFilename in your vimrc.\n\nIf you don't use project.tar.gz then you can use \".indexer_files\" to define projects and files to index.  Default location of this file is \"~/.indexer_files\". You can change it by modifying variable g:indexer_indexerListFilename\n\nSyntax of this file is simple, propably the best way to explain it is to show an example:\n--------------------- example ~/.indexer_files -----------------------\n[CoolProject] \n \n/home/user/myproject/src/*.c \n/home/user/myproject/src/*.h \n/home/user/myproject/inc/*.h \n \n[AnotherProject] \n \n/home/user/myproject2**/*.c \n/home/user/myproject2**/*.h \n-------------------------------------------------------------------------------\n\nIf you have many projects and you are lazy to put every project in\nthis file, you can put in your ~/.indexer_files something like this:\n\n--------------------- example ~/.indexer_files -----------------------\n[PROJECTS_PARENT filter=\"*.c *.h *.cpp\"]\n~/workspace\n-------------------------------------------------------------------------------\n\nThe keyword is PROJECTS_PARENT.\nIn this way, every directory in ~/workspace will be interpreted as separate\nproject, and you can open any file from any project in ~/workspace, and the \nwhole proper project will be indexed.\n\n\nAnd, finally, it can autodetect project root. So, you can move your project to another place in filesystem, and all files will be indexed anyway.  More detailed help see in options, variable \"g:indexer_lookForProjectDir\".\n\nYou need PATCHED ctags to be installed to make this plugin work. http://dfrank.ru/ctags581/en.html\n\nYou also need SED for better result. If you're using Unix-like system, then SED is already in your system (99.99%), if you're using Windows, then the best way is to install Cygwin ( http://cygwin.org ). NOTE that i tested this Windows version of SED: ( http://gnuwin32.sourceforge.net/packages/sed.htm ), it is not work correctly. Cygwin's SED works fine.\n\nI have tested it both on Linux and Windows, in Vim 7.3\nIf you have any troubles using this plugin, feel free to email me.\n"}, {:name=>"285colors-with-az-menu", :summary=>"285 color schemes for Vim with alphabetical menu", :description=>"A version of \"Color Sampler Pack\", original by Robert Melton <iam@robertmelton.com>\nI have added many colors and have placed them all alphabetically.\n\nHappy vimming! :))\n\n"}, {:name=>"LanguageTool", :summary=>"Grammar checker for English, French, German (etc.) in Vim ", :description=>"This plugin integrates the LanguageTool grammar checker into Vim.\nCurrent version of LanguageTool can check grammar in many languages: \nen, de, pl, fr, es, it, nl, lt, uk, ru, sk, sl, sv, ro, is, gl, ca, da, ml, be.\nSee http://www.languagetool.org/ for more information about LanguageTool.\n\nThe script defines 2 commands:\n\n* Use  :LanguageToolCheck  to check grammar in current buffer.\n  This will check for grammar mistakes in text of current buffer \n  and highlight the errors.  It also opens a new scratch window with the\n  list of grammar mistakes with further explanations for each error.\n  Pressing <Enter> or clicking on an error in scratch buffer will jump\n  to that error.  The location list for the buffer being checked\n  is also populated.  So you can use location commands such as\n  :lopen to open the location list window, :lne to jump to the \n  next error, etc. The :LanguageToolCheck command accepts a\n  range. You can for example check grammar between lines\n  100 and 200 in buffer with :100,200LanguageToolCheck.\n\n* Use  :LanguageToolClear  to remove highlighting of grammatical errors\n  and close the scratch window containing the list of errors.\n\nSee screenshots of grammar checking in English and French at:\n  http://dominique.pelle.free.fr/pic/LanguageToolVimPlugin_en.png\n  http://dominique.pelle.free.fr/pic/LanguageToolVimPlugin_fr.png\n\nYou can customize this plugin by setting the following variables in \nyour ~/.vimrc (plugin already sets default values).\n\n  g:languagetool_jar  \n      This variable specifies the location of the LanguageTool java\n      grammar checker program.\n      Default is: $HOME/JLanguageTool/dist/LanguageTool.jar\n\n  g:languagetool_disable_rules\n      This variable specifies checker rules which are disabled.\n      Each disabled rule must be comma separated\n      Default is: WHITESPACE_RULE,EN_QUOTES\n\n  g:languagetool_win_height\n      This variable specifies the height of the scratch window which \n      contains all grammatical mistakes with some explanations. You \n      can use a negative value to disable opening the scratch window.\n      Default is: 14\n\nYou can also customize the following syntax highlighting groups:\n  LanguageToolError\n  LanguageToolCmd\n  LanguageToolLabel\n  LanguageToolErrorCount\n\nLanguage is selected automatically from the Vim 'spelllang' option.\nCharacter encoding is selected automatically from the Vim 'fenc' option\nor from 'enc' option if 'fenc' is empty.\n\nBugs:  \n  Column number reported by LanguageTool indicating the location of the \n  error is sometimes incorrect. There is an opened ticket about this bug: \n  http://sourceforge.net/tracker/?func=detail&aid=3054895&group_id=110216&atid=655717 \n  The script currently works around it by doing pattern matching with  \n  information context but it is not a perfect workaround: it can cause \n  spurious highlighting of errors in rare cases.\n\nLicense:\n  The VIM LICENSE applies to LanguageTool.vim plugin\n  (see \":help copyright\" except use \"LanguageTool.vim\" instead of Vim\")."}, {:name=>"VIM-Color-Picker", :summary=>"A simple color picker for VIM, based on GTK color chooser dialog.", :description=>"VIM Color Picker is a simple color selector, based on GTK color chooser dialog. It permit you to easily insert an hexadecimal color in your CSS or HTML code. \n\nSCREENSHOT:\n    http://static.flogisoft.com/vim/vim_color_picker_0.1.png\n\nUSE:\n  When your are in insert mode or visual mode, press the <F5> button.\n  The color picker dialog appear, select a color and validate.\n\nDEPENDENCIES:\n  For working, this script need:\n    * VIM 7.x with Python support\n    * PyGTK 2.x"}, {:name=>"Flex-4", :summary=>"Syntax highlighting for Adobe Flex 4", :description=>"Syntax highlighting for Adobe Flex 4 - mxml, actionscript 3 programming languages.\n(Modified version 1.1)\n\nThanks to previous authors:\nJohannes Zellner <johannes [at] zellner [dot] org>\nPaul Siegmann <pauls [at] euronet [dot] nl>\nAbdul Qabiz <mail [at] abdulqabiz [dot] com>"}, {:name=>"lodestone", :summary=>"My custom 256 color scheme", :description=>"A really wonderful color scheme. \n\nScreenshot: http://cl.ly/2KIP"}, {:name=>"Simple-Javascript-Indenter", :summary=>"A simple javascript indent script, support OOP, jquery", :description=>"A simple indent plugin for javascript\n\nRepository: http://github.com/JiangMiao/simple-javascript-indenter\nScreenshot: http://www.jiangmiao.org/blog/wp-content/uploads/2010/09/vim_simple_javascript_indenter_v1.2.0.png\n\n==Options==\ng:SimpleJsIndenter_BriefMode (default 0)\n  set 1 to turn brief mode on.\n\n===About Brief Mode===\nAdd 'let g:SimpleJsIndenter_BriefMode = 1' to ~/.vimrc to use brief mode.\n\nIn Brief Mode script will not indent more than one shiftwidth each line.\neg:\nFor a lot of people prefer set shiftwidth to 4, so in normal mode, it will indent looks like\neach(function() {\n........something(); // indent 2 shiftwidth\n});\n(((\n............something(); // indent 3 shiftwidth\n)));\n\nIn brief mode it will indent as\neach(function() {\n....something(); // indent 1 shiftwidth\n});\n(((\n....something();\n)))\n\n===ATTENTION===\nBe sure to always close the brackets with the same level as open, or the after code will not indent correctly.\neg:\nfunction() {\n....each(function() {\n....} // should use }); instead of }\n);    // already indented..\nsomething();\n}\n\n\n== Indent Effects  ==\n/*\n* Comment Test \n* function() {\n*/\n{\n  /* a [{( */\n  // b [{(\n  comment('/* com', a /* [{( */); /* c */ // d\n  ok();\n  // Assign Test\n  var a, /* { */\n      b, // [\n      c = '{'\n  var a = \"Hello\" +\n          \"World\"\n  d = function() {\n    aoeu\n  }\n  var k = function() {\n    var k=3,\n        m=4\n  }\n\n  var rurl = /{[('\"/,\n      r20 = /%20/g,\n\n  a = 1,\n  b = 2\n  a = 1 +\n      2 *\n      3\n}\n\n// Function nested\n;(function($) {\n    $(document).ready(function() {\n        $('#foo').click(function() {\n            $.post(url, {\n                a: 1, \n                b: 2,\n              }, function() {\n                ok(); \n              }\n            );\n        });\n    });\n})(jQuery);\n\n// Array Object Test\nstring_test(\"('\",'(\"',\"[\",'{',\"\\\"{\",\"\\&#039{\"); \n{\n  array_object_test: [\n    1,\n    2,\n    {\n      a: [3,4],\n      b: [\n        3,\n        4\n      ],\n      c: string_test(\"('\",'(\"',\"[\",'{',\"\\\"{\",\"\\&#039{\"),\n      function_test: function() {\n        return 0;\n      },\n      one_line_function_test: function() { return [1] }\n    }\n  ]\n}\n\n// One Line Test\n{\n  if( a == b &&\n    c == d ||\n    e == f) \n  {\n    ok();\n  }\n  if(a) {\n    b;\n  } else {\n    e;\n  }\n  if(a)\n    b;\n  else if(k) {\n    aeou\n  } else\n    c;\n  while(true)\n    foo += 1;\n  try\n    a;\n  catch\n    b;\n  finally\n    c;\n  ok();\n}\n"}, {:name=>"porter-stem", :summary=>"PorterStem implements the Porter stemming algorithm for use as script utility ", :description=>"Source and associated data files for testing hosted at:\nhttp://github.com/msbmsb/porter-stem.vim\n\nPorterStem is a vim script that implements the Porter stemming algorithm, by Martin Porter, details of which can be found at: http://tartarus.org/~martin/PorterStemmer/\n\nThe main function outputs the single string of the stem, and the script only\nechoes the output to the screen. This script, while it can be used as-is\nif you want to know what the stem for a word is, is mostly a container for \nthe algorithm implementation in vim script.\n\nPorterStem command syntax:\n-  :PorterStem (<word>)*\n\nEach word input to the :PorterStem command will be stemmed and processed by\nthe ProcessStem function, that by default simply echoes to the screen.\nWithout any word given for input, it will attempt to stem the current word \nunder the cursor via expand('<cword>').\n\nFor example:\n-  :PorterStem searching\nwill output:\n-  search\nand a string of words will work as well, matching in order:\n-  :PorterStem thieves are running from the bunny\nwill output:\n-  thiev are run from bunni\n\nRunning :PorterTest <test-file> <expected-results-file> will run each \nword in <test-file> and match the stem result to the same line in the \n<expected-results-file>, showing if any are incorrect stem matches.\nProvided in the github repository are two files voc.txt and output.txt \nfrom Martin Porter's site providing a set of test words.\n\n----\nTo use this vim script, add it to ~/.vim/plugin/\n\nSee doc/porter-stem.vim.txt for more information about the script.\nSee http://github.com/msbmsb/stem-search.vim for a script that uses this method for reverse-stem searching in a file.\n\n----"}, {:name=>"stem-search", :summary=>"StmSrch is a reverse-stem searching script", :description=>"Source and associated data files for testing hosted at:\nhttp://github.com/msbmsb/stem-search.vim\n\nStmSrch is a reverse-stem searching script. It implements the Porter stemming algorithm, by Martin Porter. It also handles irregular verbs and noun pluralizations.\n\nThis script can be useful for searching or scanning through corpus files.\n\nEach word input to the :StmSrch command will be stemmed and then formulated in such a way as to match possible conjugations or pluralizations. Without any word given for input, it will attempt to stem the current word under the cursor. The matching is done using word boundaries so not just any substring will match.\n\nFor example: \n- :StmSrch search \nwill match any of: \n- search, searching, searches, searchers, searched, ...\nand a string of words will work as well, matching in order: \n- :StmSrch thieves are running from bunnies \nwill match strings of words like: \n- thief was ran from bunny \n- thieves be run from bunnies\n\nSearch hits are highlighted, and the highlight color can be modified by\nediting the color in the s:StmSrchInit() function. The matches will stay \nhighlighted even if you search again using the normal &#039/&#039 key. This is\nuseful for cases where you are browsing through a large corpus file, for \nexample and want to see the relative location of matches. \n\nUse :ClrStmSrch to clear the highlighting for the StmSrch group.\n\nFor stemmed words, the search is greedy and may over match. This was useful \nfor my purposes. If more exact word endings are required, this can be added.\n\n----\nTo use this vim script, add it to ~/.vim/plugin/\n\nSee doc/stem-search.vim.txt for more information about the script.\n\n----\n"}, {:name=>"TeX-PDF", :summary=>"Lightweight \"stay-out-of-your-way\" TeX-to-PDF development support", :description=>"Description\n===========\n\nThis plugin provides support for specialized lightweight \"stay-out-of-your-way\"\nTeX-to-PDF compilation and viewing.  In contrast to some of the other more\ncomprehensive TeX/LaTeX suites, it provides nothing else but two commands, and\nleaves the rest of your Vim platform undisturbed, except for a few key maps to\ninvoke the commands.\n\nFeatures\n========\n\n    - Runs \"make\" if a Makefile is found, otherwise invokes Rubber (if\n      installed) or pdflatex (otherwise) on the current file.\n    - Successful builds will result in PDF being opened/refreshed in the\n      default external viewer.\n    - Unsuccessful builds will result in the QuickFix buffer being opened and\n      to list the errors, with line numbers, description etc.\n\nUsage\n=====\nOnce the plugin is installed (see below), when you have a TeX or LaTeX document\nopen in the buffer, type '\\r' or <Shift-F9> to compile the document and open\n(or refresh) the resulting PDF in your system's default PDF viewer. To just\ncompile the document to PDF without opening it, type '\\m' or <F9>.  If there\nare any compile errors, a window will open and list all the problematic lines.\nAs usual, you can navigate forward and backward through this list using the\n':cnext' and ':cprev' commands, and you will automatically be taken to the\ncorresponding line in the source document.\n\nWorking with Rubber\n===================\n\nThis plugin will work quite happily with the stock TeX/LaTeX tools found on\nmost systems. As described above, for example, this plugin will run \"make\" if a\nMakefile is found in the current working directory (by-passing Rubber, even if\ninstalled), and fall back to the standard \"pdflatex\" if Rubber is not\ninstalled.\n\nHowever, installation of \"Rubber\" (https://launchpad.net/rubber) in conjunction\nwith this plugin makes Vim a *very* powerful, yet highly ergonomic and\nnon-intrusive, LaTeX IDE, making Makefiles unneccessary for many document\nprojects. Rubber takes care of the multiple TeX compile passes required to get\nthe the bibliographies, references, cross-references, etc. correctly built,\nwhile this plug-in takes care of opening/refreshing the PDF view on successful\nbuilds, as well as providing for a *clean* view of the errors on an\nunsuccessful build.\n\nOperation\n=========\n\nThis plugin provides two commands: \"BuildAndViewTexPdf\" and \"BuildTexPdf\".\n\n\"BuildAndViewTexPdf\" will build the PDF from the TeX source, and, if\nsuccessful, will open the resulting PDF for viewing in an external viewer (or\nrefresh the PDF if already opened).\n\n\"BuildTexPdf\" will build the PDF from the TeX source without opening/refreshing\nthe PDF.\n\nThe build logic is:\n\n    (1) If a Makefile is found in the current directory, then \"make\" will be\n        invoked.\n    (2) If there is no Makefile in the current directory, but \"Rubber\"\n        (https://launchpad.net/rubber) is installed and available, then this will\n        invoked on the current buffer file.\n    (3) If Rubber is not installed, then \"pdflatex\" will be invoked on the\n        current buffer file.\n\nIf the build is unsuccessful, the QuickFix buffer is populated with the\n(parsed, cleaned, and filtered) error messages and automatically opened,\nshowing, for each error, the line number and description of the error. You can\nthen used \":cnext\", \":cprev\", etc. to visit each of the error lines.\n\nKey Mapping\n===========\n\nBy default, '<Leader>r' (mnemonic: 'run') and '<S-F9>' are mapped to\n\"BuildAndViewTexPdf\", while '<Leader>m' (mnemonic: 'make') and '<F9>' are\nmapped to \"BuildTexPdf\"\n\nIf you prefer not to have any of the above keys mapped, then include the\nfollowing in your '~/.vimrc':\n\n    let g:tex_pdf_map_keys = 0\n\nIf you prefer not to have the '\\r' and '\\m' leader keys mapped but keep the\nfunction key mapping, you can include the following in your '~/.vimrc':\n\n    let g:tex_pdf_map_leader_keys = 0\n\nAlternatively, you can keep the leader keys mapped but by-pass the function key\nmapping by including the following in your '~/.vimrc':\n\n    let g:tex_pdf_map_func_keys = 0\n\nYou can, of course, map any keys that you want to the commands. For example,\nby including the following in your '~/.vimrc', you will map Command-V to the\n\"compile and view\" command and Command-T to the \"just compile\" command in\nboth normal and insert modes:\n\n    noremap <silent> <D-V> <Esc>:BuildAndViewTexPdf<CR>\n    inoremap <silent> <D-V> <Esc>:BuildAndViewTexPdf<CR>\n    noremap <silent> <D-T> <Esc>:BuildTexPdf<CR>\n    inoremap <silent> <D-T> <Esc>:BuildTexPdf<CR>\n"}, {:name=>"PyInteractive", :summary=>"Simple python read-eval-print loop inside Vim", :description=>"This plugin is a simple realization of read-eval-print loop for Python in Vim command window. It requires Python support (see +python) and at least version 2.5 of Python interpreter (you can check python version by running :py import sys; print(sys.version) ). \n\nDemonstration (ver 0.5): http://www.youtube.com/user/clericJ?feature=mhsn\nProject home: http://code.google.com/p/vim-pyinteractive-plugin/\n\n\nCommands:\n\n :PyInteractiveREPL\n     Opens an interactive Python console in vim. If you want to finish working with the interpreter, \n      press <esc>. Interpreter states are saved between PyInteractive sessions (but not between vim\n     sessions), so that if you use PyInteractiveREPL, type x=1 here, close it and then reopen again, \n     variable x will still have value 1. \n\n :PyInteractiveHistory [options]\n     Echoes session history. Possible options:\n               -r Print history without any formatting (mnemonic: raw)\n               -i Print only input history (mnemonic: input)\n               -f {FILE} Write history to file {FILE} \n\n :PyInteractiveEval {code}\n    Evaluate given code in the interpreter. Command is useful for quickly testing results\n    and for scripting purposes (for example, in context menu). Example:\n            :PyInteractiveEval def inc(x): return x+1\n            :PyInteractiveEval inc(1)\n            2\n            :PyInteractiveREPL\n            >>> inc(10)\n            11\n\nAutocompletion is defined for PyInteractiveEval command and for input() opened by PyInteractiveREPL command and can be accessed by pressing <tab> key (default, see wildchar if you want to change this). \n\n\nExamples:\n\n:PyInteractiveREPL\n>>> def inc_10(x):\n...     return x+10\n...\n>>> inc_10(7)\n17\n>>>  import sys\n>>> sys.ex<tab> # codecompletion (see pyinteractive-autocompletion)\n<built-in function exit>\n\n<ESC>\n\n:PyInteractiveEval inc_10(11) +1\n22\n:PyInteractiveHistory\n in[1]: def inc_10(x):\n in[2]:     return x+10\n in[3]:\n in[4]: inc_10(7)\nout[1]: 17\n in[5]: import sys\n in[6]: sys.exit\nout[2]: <built-in function exit>\n in[7]: inc_10(11) +1\nout[3]: 22"}, {:name=>"HTML5-Syntax-File", :summary=>"HTML5 Syntax File", :description=>"HTML5 syntax file plus microdata, RDFa, WAI-ARIA support\n\nRepository: http://github.com/othree/html5-syntax.vim"}, {:name=>"VimgrepBuffer", :summary=>"Run vimgrep on buffers", :description=>"This plugin provides easy application of the 'vimgrep' command on buffers\n(as opposed to the filesystem, which is its normal mode of operation).\nIt provides two commands: one to search just the current buffer, and the\nother to search all listed buffers.\nThe QuickFix buffer will be populated with the search results, if any, and\nopened for viewing. The search pattern will also be assigned to the search\nregister, so that matches will be highlighted if 'hlsearch' is on (':set\nhlsearch').\n\nTwo commands are provided, ':G' and ':GG'. The first limits the search to\nthe current buffer, while the second searches all listed buffers.\n\nIf you do not like the cryptic/genericness of these 'short' commands, put:\n\n    let g:vimgrepbuffer_long_command = 1\n\nin your \"~/.vimrc\", and ':VimgrepBuffer' and ':VimgrepBuffers' will be set as\nthe commands instead.\n\nThe pattern specification is *exactly* like that for 'vimgrep'.  This means\nthat if the pattern starts with a non-identifier character or contains any literal whitespace\ncharacters, for correct behavior you will have to enclose the pattern in\ndelimiter characters (e.g. \"/\", \"@\", \"#\"):\n\n   :G /\\s*print \"\\d/\n   :GG /\\s*def\\s\\+\\w\\+(/\n   :G /\\(def\\s\\+\\|class\\s\\+\\)/\n   :GG /\\cisland/\n   :G /the quick brown \\w\\+/\n   :GG /except \\+\\w\\+Error/\n\nIf your pattern starts with an identifier-character you can omit the enclosing\ndelimiters:\n\n   :G def\\s\\+\\w\\+(.*\\*\\*kwargs)\n   :GG except\\s\\+\\w\\+Error\n\nIn this latter case, the pattern will be considered to be\nwhitespace-delimited, and so if your pattern contains any literal whitespace\nyou may get incorrect results. This behavior is exactly like that of\n'vimgrep'.\n\nYou might also be interested in looking at \"grep.vim\" (http://www.vim.org/scripts/script.php?script_id=311) as an alternative for \"grep-on-buffer\" operations, especially if you want to use external grep programs.\n\"grep.vim\" provides a much broader range of functionality and commands, and is typically faster.  However, the grep dialect you will have to use is that of the external grep programs, rather than that of Vim. The main reason I wrote \"VimgrepBuffer\" (and why you might be interested in using it) is to be able to use Vim's grep dialect to express the search patterns. "}, {:name=>"ToggleLineNumberMode", :summary=>"Switch between \"Relative\" / \"Absolute\" line number", :description=>"switch between \"Relative\" and \"Absolute\" line number is easy with command\n''':set nu'''\nand\n''':set rnu'''\n\nit could be more easier by a vim script:\n\nfunction! g:ToggleNuMode()\n\tif(&rnu == 1)\n\t\tset nu\n\telse\n\t\tset rnu\n\tendif\nendfunc\n\nand a Ctrl+L key map\nnnoremap <C-L> :call g:ToggleNuMode()<cr>\n\nthis is exactly what the script does, you can just put the code into your vimrc if you don't want install a plugin :)"}, {:name=>"showcolor.vim", :summary=>"show all color in term or gui with vim.", :description=>"show all color in term or gui with vim.\n\nterm:\n:call ShowColorTerm()\ngui:\n:call ShowColor(0x00,0xFF,15)"}, {:name=>"html5.vim", :summary=>"HTML5 omnicomplete funtion and syntax for Vim", :description=>"HTML5 omnicomplete funtion and syntax for Vim.\nBased on the default htmlcomplete.vim.\n\nSupport all new elements and attribute.\nSupport microdata.\nSupport RDFa.\nSupport WAI-ARIA.\n\nsyntax from http://www.vim.org/scripts/script.php?script_id=3232\n\ngit repo: http://github.com/othree/html5.vim"}, {:name=>"blockinsert", :summary=>"Easy Insert/Append to a paragraph of text", :description=>"                   Easy Insert/Append to a paragraph of text\n\nBlockinsert can take a range but if no such is given it will act upon the\ncurrent paragraph.\n\n        First line of code\n            Another line of code\n    Yet another one\n        Last line of code\n\n1.1 Insert\n\n[count] \\i - will transform the above into: (count 3 used)\n\n        ---First line of code\n            ---Another line of code\n    ---Yet another one\n        ---Last line of code\n\n1.2 Append\n\n[count] \\a > will transform the above into: (count 2 used)\n\n        ---First line of code>>\n            ---Another line of code>>\n    ---Yet another one>>\n        ---Last line of code>>\n\n1.3 Delete\n\n[count] \\i or \\a without any text will delete as many characters: (3\\i used)\n\n        First line of code>>\n            Another line of code>>\n    Yet another one>>\n        Last line of code>>\n\n1.4 Act on both ends\n\n[count] \\[] will use both \\i and \\a: (2\\[] * ** used)\n\n        Note: the same [count] will be applied to both operations\n\n        **First line of code>>****\n            **Another line of code>>****\n    **Yet another one>>****\n        **Last line of code>>****\n\n1.5 Act on both ends using the same text\n\n[count] \\[[ will use both \\i and \\a and the same text: (| used)\n\n        |**First line of code>>****|\n            |**Another line of code>>****|\n    |**Yet another one>>****|\n        |**Last line of code>>****|\n\n1.6 Record\n\n\\qi, \\qa and \\q[] will execute rather than write the text in input.\n\nExample with \\qa gUaW:\n\n        |**First line of CODE>>****|\n            |**Another line of CODE>>****|\n    |**Yet another ONE>>****|\n        |**Last line of CODE>>****|\n\n==========================================================\n\nThere is one special case. When selecting text in visual block mode, the\nboundaries of the text acted upon are defined by the limits of the visual area.\n\nExample: (the <bar>s represent our selection)\n\n    Some text here                |stridx(      |       end of this line\n    Some other text...            |strridx(     |       text after a function\n    Let's start a third line       |strlen(      |       ...finish this line\n    End of paragraph            |substitute(|       end indeed.\n\nNow that a selection has been defined, all you need to do is type:\n\\a followed by )\nand your text will become:\n\n    Some text here                 stridx()              end of this line\n    Some other text...             strridx()             text after a function\n    Let's start a third line        strlen()              ...finish this line\n    End of paragraph              substitute()       end indeed.\n\n==========================================================\n\nFor all this to work you MUST define your custom mappings in your vimrc:\n\nvmap <leader>i  <plug>blockinsert-i\nvmap <leader>a  <plug>blockinsert-a\nvmap <leader>qi <plug>blockinsert-qi\nvmap <leader>qa <plug>blockinsert-qa\n\nnmap <leader>i  <plug>blockinsert-i\nnmap <leader>a  <plug>blockinsert-a\nnmap <leader>qi <plug>blockinsert-qi\nnmap <leader>qa <plug>blockinsert-qa\n\nvmap <leader>[]  <plug>blockinsert-b\nvmap <leader>[[  <plug>blockinsert-ub\nvmap <leader>]]  <plug>blockinsert-ub\nvmap <leader>q[] <plug>blockinsert-qb\nvmap <leader>q[[ <plug>blockinsert-uqb\nvmap <leader>q]] <plug>blockinsert-uqb\n\nnmap <leader>[]  <plug>blockinsert-b\nnmap <leader>[[  <plug>blockinsert-ub\nnmap <leader>]]  <plug>blockinsert-ub\nnmap <leader>q[] <plug>blockinsert-qb\nnmap <leader>q[[ <plug>blockinsert-uqb\nnmap <leader>q]] <plug>blockinsert-uqb\n\nNote: You can replace \\i, \\a, \\qi, \\qa, \\[], \\[[, \\]], \\q[], \\q[[, \\q]]\n      with whatever you like."}, {:name=>"LimitWindowSize", :summary=>"Reduce the current window size by placing an empty padding window next to it. ", :description=>"DESCRIPTION\nText files that do not have \"hard\" word wrapping via embedded line breaks can\nbe cumbersome to edit in a wide editor window, as it is strenuous on the eyes\nto jump back and forth between begin and end of the soft-wrapped lines. \nThe simplest solution is to resize the editor window (:set columns=80), but\none may still want to have the large editor size for other edited buffers that\nbenefit from the large screen real estate. \n\nThis plugin places an empty padding window next to the current window, thereby\nreducing its size while maintaining the overall editor size. \n\nUSAGE\n:LimitWindowWidth [{width}]\n\t\t\tLimit the window width of the current window by placing\n\t\t\tan empty padding window to the right. If there already\n\t\t\tis a padding window, its size is adapted according to\n\t\t\t'textwidth' / {width}, or removed if the width is so\n\t\t\tlarge that no padding is needed. "}, {:name=>"minibufexplorerpp", :summary=>"Elegant buffer explorer - takes very little screen space", :description=>"This is a modification of the script available here: http://www.vim.org/scripts/script.php?script_id=159\n\nAdded to the original script were the following keybindings:\nh and l to move left and right when selecting buffers in addition to the original Tab and Shift-Tab\no and e to show a buffer in addition to the original <CR>\ns to open the selected buffer in a split window\nv to open the selected buffer in a vertically split window\n\nBig thanks to Bindu Wavell for writing this script! I just added some minor things which I think others might find useful. I tried submitting this as a patch to him, but got no answer. Bindu: Contact me if you want to integrate this into your plugin and I'll remove this one.\n\nOriginal description:\n\nSeveral modern GUI editors list your open buffers as tabs along the top or bottom of your screen (VisualStudio, DreamWeaver, EditPlus and UltraEdit come to mind), now we have this feature in VIM! You can checkout a screenshot here: http://www.wavell.net/vim/vim_screenshot.gif. \n\nYou can quickly switch buffers by double-clicking the appropriate \"tab\" (if you don't want to use the mouse just put the cursor on the \"tab\" and press enter). As you open and close buffers the tabs get updated. Buffers that are modified get visually marked and buffers that are open in a window get visually marked. The -MiniBufferExplorer- opens automatically when you open more than one eligible buffer (no need to open the explorer if you\u0092re only editing one file.) -MiniBufExplorer- doesn't bother showing non-modifiable or hidden buffers. You can delete buffers by selecting them and pressing d on the keyboard. \n\nWhen you are in the -MiniBufExplorer- window, Tab and Shift-Tab move forward and backward respectively through the buffer list. \n\nThere are a growing number of optional features in this script that are enabled by letting variables in your .vimrc: \n\n  control + the vim direction keys [hjkl] can be made to move you between windows. \n  control + arrow keys can be made to do the same thing \n  control + tab & shift + control + tab can be setup to switch through your open windows (like in MS Windows) \n  control + tab & shift + control + tab can alternatively be setup to cycle forwards and backwards through your modifiable buffers in the current window \n\nNOTE: Some versions of vim don't support all of the key mappings that this script uses so you may experience degraded functionality. For example on Solaris SHIFT-TAB appears to fire the regular TAB mappings (same for console and gvim.) Also CONTROL+ARROWS appears to work in gvim on Solaris, but not in my xterm. All of the key bindings appear to work in Windows. \n\n[Thanks to Jeff Lanzarotta for his BufExplorer plugin (http://vim.sourceforge.net/scripts/script.php?script_id=42) that got me started down this slippery slope.]"}, {:name=>"tdvim_FoldDigest", :summary=>"Creates an outline view from folds in the current buffer", :description=>"This plugin creates a new buffer with an outline view of all folds in the current buffer.\nIt is based on vimscript #732.\nUsage:\n\t:FoldDigest\n\n   Transform all folds in the current buffer into digest tree form, and\n   show it in another buffer.  The buffer is called ==FOLDDIGEST==.  It shows\n   not only all fold start positions, but also a tree depended on original\n   folds hierarchy.\n\n   In a FOLDDIGEST, you can move around the cursor, and when type <CR> jump\n   to fold at under it.  If you enter FOLDDIGEST window from other windows,\n   when depended buffer is availabeled, it will be synchronized\n   automatically.  If you want to force synchronize, type \"r\" in a\n   FOLDDIGEST buffer.\n   It is also possible to jump to the folsd under the cursor with a double\n   click.\n   The FOLDDIGEST window is updated when entering in a new buffer.\n\n   :FoldDigestToggle\n\n   Toggles FOLDDIGEST window\n\n   :FoldDigestClose\n\n   close FOLDDIGEST window\n\n   You can also map your own keys to these commands"}, {:name=>"bufsurf", :summary=>"Plugin for navigating buffers webbrowser style.", :description=>"When editing multiple files oftentimes it would be nice to be able to go back\nand forth between the last edited files, just like a web browser allows the\nuser to navigate web pages forward and backward in history. The standard\n:bn(ext) and :bp(revious) Vim commands allow to switch between next and\nprevious buffers respectively, but they do no take the history of the last\nused files into account. Instead, they use the order in which the files were\nopened, which can cause confusion in case the user expects to navigate forward\nand backwards in history.  For example, in case the user opened the files A,\nB, and C in the order:\n\nA, B, C\n\nand the navigation history would be\n\nA, B, C, B\n\nthen :bp(revious) in the last buffer (B) would open up buffer A, where C is\npreferable. This buffer supplies the user with the commands :BufSurfForward\nand :BufSurfBack to navigate buffers forwards and backwards according to the\nnavigation history.\n\nThe latest version of this plugin is available at:\n\n  http://github.com/ton/vim-bufsurf\n\nBugs can be reported there as well.\n\nbufsurf allows the user to navigate between buffers in a window based on the\nnavigation history. The navigation history is maintained per window / tab.\nYou can navigate backwards in history by issuing the command:\n\n  :BufSurfBack\n\nSimilarly, to navigate forward in history, issue the command:\n\n  :BufSurfForward\n\nNo default keymappings are provided, but can easily be defined by the user.\nFor example, to map Control+I to :BufSurfBack, and Control+O to\n:BufSurfForward, include the following lines in your Vim configuration:\n\n  nmap <silent> <C-i> :BufSurfBack<CR>\n  nmap <silent> <C-o> :BufSurfForward<CR>"}, {:name=>"Open-associated-programs", :summary=>"Open files and web pages in associated programs from Vim", :description=>"This plug-in knows how to open files, directories, URLs and e-mail addresses from inside Vim using the associated programs. It should work on Windows, Mac OS X and most Linux installations. For more information about the plug-in please refer to its homepage or the project page on GitHub:\n\n \u0095 http://peterodding.com/code/vim/open-associated-programs/\n \u0095 http://github.com/xolox/vim-open-associated-programs\n\nIf you have questions, bug reports, suggestions, etc. the author can be contacted at peter@peterodding.com. If you like this plug-in please vote for it below!"}, {:name=>"aspnetide.vim", :summary=>"aspnetide.vim: A Plugin that turns vim into an asp.net IDE!", :description=>"Turns VIM into an asp.net IDE!\n\nFeatures\n-------------\n* ASPHelp - F1: Jump to online help based on selected word.\n* ASPBuild - <leader>ab: Find a solution file for the project and build. Errors shown in quickfix.\n* ASPAltFile - <leader>af: Navigate to alternate files (ASPX <-> code-behind).\n* ASPRun - F5: Run app in local webserver and navigate to selected page.\n* ASPGoTo - <leader>ag: Go to class file based on name.\n\nScreencast of how to use this plugin:\nhttp://www.youtube.com/watch?v=9lYgblj1tc0\n\nNotes:\n--------\n*For those new to vim, <leader> is a backslash by default.\n*You may need to have VS.NET installed for ASPRun to work. Not sure if the local web server gets installed with just the framework.\n*The  ASPBuild and ASPRun features only work on windows. With a few tweaks this could work nicely for mono on linux though...\n\nPatches welcome, github location:\ngit://github.com/bryanthankins/vim-aspnetide.git"}, {:name=>"Timer-routine", :summary=>"Does a 'timer' for vimscript like there is on other languages", :description=>"Most programming environments give you some sort of a timer callback facility you can attach to one of your functions to do a thing periodically.  This is missing in VIM.  This script 'emulates' one by doing a quick series of un-obstrusive kepresses that cause the key pressed timeout to reset continually.  Normally this happens every for seconds.  This can be changed.  The updatetimer is used to achive this.  A value of 1000 will cause the 'timer' to be called every one second.  When you want to hook something up to this timer, simply create an autocommand for on update wait or something, I forget what it is called.  It looks something similar to: au * onUpdateTimeout * do something, but this is not right.  More later :)"}, {:name=>"Heliotrope", :summary=>"A dark-on-light color scheme ", :description=>"A green-orange color scheme. \n\nHeliotrope (a.k.a. bloodstone) is a mineral that is a dark chalcedony green with orange-red streaks. \n\nAs I do most of my coding in Haskell, the colors for syntax elements has been chosen with their prevalence in mind: functions in orange, green for types and then different shades of each for the rest.\n\nScreenshots: \n    http://luola.net/~ane/misc/helio1.png - Haskell and Java\n    http://luola.net/~ane/misc/helio2.png - Haskell (again!) and Ruby"}, {:name=>"CaptureClipboard", :summary=>"Append system clipboard changes to current buffer. ", :description=>"DESCRIPTION\nQuotes or text fragments can be collected from various sources outside Vim\ninto a single text document through the clipboard. This plugin makes\nconsecutive copy-and-pastes into Vim much more comfortable by monitoring the\nsystem clipboard for changes and appending them into the current Vim buffer\nautomatically. Feedback about the number of captures is given in Vim's window\ntitle, so one does not have to switch back and forth between applications any\nmore, and can completely focus on text collection via CTRL-C, CTRL-C, ...\n\nUSAGE\n:[count]CaptureClipboard[!] [{delimiter}]\n:[count]CaptureClipboardReverse[!] [{delimiter}]\n\t\t\tMonitors the clipboard for changes and inserts any\n\t\t\tchange of clipboard contents into the current buffer\n\t\t\t(in new lines, or delimited by {delimiter} if given).\n\t\t\tTo stop, press <CTRL-C> or copy a literal dot (\".\") to\n\t\t\tthe clipboard. If [count] is given, the capture stops\n\t\t\tafter [count] captures. \n\n\t\t\tIf [!] is given, whitespace (including new lines) is\n\t\t\ttrimmed from the beginning and end of each capture.\n\n\t\t\tWith :CaptureClipboardReverse, changes are prepended,\n\t\t\treverting the insertion order. Normally, changes are\n\t\t\tappended to the current or given [line].\n\t\t\tUse :$|CaptureClipboard to append to the end of the\n\t\t\tcurrent buffer. \n\n\t\t\t{delimiter} is evaluated as an expression if it is\n\t\t\t(single- or double-)quoted, or contains backslashes. \n\t\t\tThe default {delimiter} is \"\\n\"; each capture is\n\t\t\tplaced on a new line. Use '' to place everything next\n\t\t\tto each other, ' ' to put a space character in\n\t\t\tbetween, \"\\n--\\n\" to insert a -- separator line\n\t\t\tbetween captures. When {delimiter} contains a newline\n\t\t\tcharacter, the first capture will already start on a\n\t\t\tnew line. "}, {:name=>"Shades-of-Amber", :summary=>"Amber monitor influenced, nostalgic colour scheme", :description=>"At college (way back when), whenever I was given the choice, I would choose the amber terminal over the green one every time.\nIt's easy on the eye, and somehow \u0093cooler\u0094.\n\nAnyway, here's my stab at reproducing the experience (with a broader palette of oranges).\nAnd it's in constant daily use. Hope you like it.\n\n[comments welcome]"}, {:name=>"Zephyr-Color-Scheme", :summary=>"Dark color scheme with distinct but calm colors", :description=>"This is a color scheme based on gardener and modified to have more distinct colors which aren&#039t too bright.\n\nScreenshot (PHP) [v1.0.1]: http://i.imgur.com/6l9Nm.png"}, {:name=>"Jasmine-snippets-for-snipMate", :summary=>"A set of snippets for the Jasmine JavaScript BDD Framework", :description=>"Jasmine (http://pivotal.github.com/jasmine/) is a behavior-driven-development framework for JavaScript with some very nice features. This set of snipMate snippets aims to make developing tests with Jasmine quicker and easier.\n\nFor example, rather than typing out the full:\n\n\"description('Description Here', function() {});\"\n\nYou can type \"des<TAB>\". This will create the full description block, with convenient tab stops. Tre magnifique!\n\nList of Included Snippets (this is actually just the file):\n\n# After Each\nsnippet aft\n\tafterEach(function() { \n\t\t${1} \n\t}\n\n# Any\nsnippet any\n\tjasmine.any(${1})\n\n#\tBefore Each\nsnippet bef\n\tbeforeEach(function() {\n\t\t${1}\n\t});\n\n# Describe\nsnippet des\n\tdescribe(\"${1:description}\", function() {\n\t\t${2}\n\t});${3}\t\n\n# Expect not to be defined\nsnippet notd\n\texpect(${1:target}).not.toBeDefined();${2}\n\n# Expect not to be falsy\nsnippet notf\n\texpect(${1:target}).not.toBeFalsy();${2}\n\n# Expect not to be null\nsnippet notn\n\texpect(${1:target}).not.toBeNull();${2}\n\n# Expect to be truthy\nsnippet nott\n\texpect(${1:target}).not.toBeTruthy();${2}\n\n# Expect not to contain\nsnippet notc\n\texpect(${1:target}).not.toContain(${2:value});${3}\n\n# Expect not to equal\nsnippet note\n\texpect(${1:target}).not.toEqual(${2:value});${3}\n\n# Expect not to match\nsnippet notm\n\texpect(${1:target}).not.toBeDefined();${2}\n\n# Expect not\nsnippet notx\n\texpect(${1:target}).not;${2}\n\n# Expect to be defined\nsnippet ed\n\texpect(${1:target}).toBeDefined();${2}\n\n# Expect to be falsy\nsnippet ef\n\texpect(${1:target}).toBeFalsy();${2}\n\n# Expect to be null\nsnippet en\n\texpect(${1:target}).toBeNull();${2}\n\n# Expect to be truthy\nsnippet et\n\texpect(${1:target}).toBeTruthy();${2}\n\n# Expect to contain\nsnippet ec\n\texpect(${1:target}).toContain(${2:value});${3}\n\n# Expect to equal\nsnippet ee\n\texpect(${1:target}).toEqual(${2:value});${3}\n\n# Expect to match\nsnippet em\n\texpect(${1:target}).toMatch(${2:pattern});${3}\n\n# Expect was called with\nsnippet escw\n\texpect(${1:target}).wasCalledWith(${2:arguments});${3}\n\n# Expect was called\nsnippet esc\n\texpect(${1:target}).wasCalled();${2}\n\n# Expect was not called with\nsnippet notscw\n\texpect(${1:target}).wasNotCalledWith(${2:arguments});${3}\n\n# Expect was not called\nsnippet notsc\n\texpect(${1:target}).wasNotCalled();${3}\n\n# Expect\nsnippet ex\n\texpect(${1:target});${2}\n\n# It\nsnippet it\n\tit(\"${1:description}\", function() {\n\t\t${2}\n\t});${3}\n\n# Runs\nsnippet ru\n\truns(function() {\n\t\t${1}\n\t});${2}\n\n# Spy on and call fake\nsnippet scf\n\tspyOn(${1:object}, \"${2:method}\").andCallFake(${3:function});${4}\n\n# Spy on and call through\nsnippet sct\n\tspyOn(${1:object}, \"${2:method}\").andCallThrough();${3}\n\n# Spy on and return\nsnippet sr\n\tspyOn(${1:object}, \"${2:method}\").andReturn(${3:arguments});${4}\n\n# Spy on and throw\nsnippet st\n\tspyOn(${1:object}, \"${2:method}\").andThrow(${3:exception});${4}\n\n# Spy on\nsnippet s\n\tspyOn(${1:object}, \"${2:method}\");${3}\n\n# Waits (wa)\nsnippet wa\n\twaits(${1});${2}"}, {:name=>"swap", :summary=>"Easy swapping of text", :description=>"1. Visual mode\n\n    1.1 \\x\n\n    First select some text ([] represents the highlighted area). Then press \\x\n\n    [a ==   123] [  a == 123 ] [a==123]\n           |              |             |\n          V            V           V\n     123 ==   a     123 == a    123==a\n\n    Note: Your selection can be loose and include white spaces at both ends.\n\n    1.2 \\\\x\n\n    By default the plugin acts on comparison operators\n    You are however allowed to specify any pivot for the swapping.\n\n    First select some text. Then press \\\\x\n    You will be asked to give a pattern (% used here)\n\n    Just testing  %  a percentage as a pivot\n                             |\n                            V\n    a percentage as a pivot  %  Just testing\n\n    1.3\n\n    You can also use V, v or ^v to select several lines (v used), then press \\x\n\n    a == [123\n    user !~ unknown\n    0]!=#1\n         |\n        V\n    123 == a\n    unknown !~ user\n    1!=#0\n\n--------------------------------------------------\n2. Normal mode\n\n    Swap with WORD on the right \\x\n    ========================\n\n    # indicates the cursor position in the examples below.\n\n          #\n    zero one      a_longer_word three\n              |\n             V\n    zero a_longer_word      one three\n\n    Swap with WORD on the left  \\X\n    ========================\n\n    zero one two       three\n    let's have some more fun\n      #      |\n             V\n    zero one two       let's\n    three have some more fun\n\n2.1 Repeat\n\n    This plugin integrates with Tim Pope's repeat plugin. It means that you can\n    use . to repeat any normal mode (for now) swap mapping you just used!\n\n    For more information see: http://github.com/tpope/vim-repeat\n\n--------------------------------------------------\n3. Supported comparison operators\n\n    Comparison operators\n        ===    !==     <>    ==#    !=#     >#\n        >=#     <#    <=#    =~#    !~#    ==?\n        !=?     >?    >=?     <?    <=?    =~?\n        !~?     ==     !=     >=     =~     <=\n        !~      ~=\n\n    Logical operators\n         &&     ||\n\n    Assignment operators\n         +=     -=     *=     /=     %=     &=\n         |=     ^=    <<=    >>=\n\n    Scope operators\n         ::\n\n    Pointer operators\n        ->*     ->     .*\n\n    Bitwise operators\n         <<     >>\n\n    Misc operators\n         >      <       =      +      -      *\n         /      %       &      |      ^      .\n         ?      :       ,     '=     '<     '>\n         !<     !>\n\n3.1 Custom operators\n\n    You can define your own operators by putting a similar line in your vimrc:\n\n    let g:swap_custom_ops = ['first_operator', 'second_operator', ...]\n\n4. Custom mappings\n\nYou have the possibility to define your own custom mappings in your .vimrc:\n\n    vmap <leader>x         <plug>SwapSwapOperands\n    vmap <leader><leader>x <plug>SwapSwapOperandsPivot\n    nmap <leader>x         <plug>SwapSwapWithR_WORD\n    nmap <leader>X         <plug>SwapSwapWithL_WORD\n\nNote: You can replace \\x, \\\\x, \\X with whatever you like.\n\nLatest version at:\nhttp://github.com/kurkale6ka/vimfiles/blob/master/doc/swap.txt"}, {:name=>"RubyProxy", :summary=>"Makes most of vims functions available to ruby via a proxy. ", :description=>"RubyProxy\nRubyProxy acts as a proxy between ruby and vim, so that most of vims functions are usable in ruby. Only the functions, which accepts lists and dictionary won't work. And functions, which returns Dictionaries. It can work with functions that return lists now (including depth n with n > 1).  Floats are a problem, because the string function won't accept it in VIM 7.2. \n\nThere is a example added in  RubyProxy.vim, to show to use this class.\n\nUSAGE\n\nYou need to prefix every vim function with the letter V (from VIM). E.g:\n\nwithProxy:\n\nwithProxy accepts a block and makes the proxy available in the scope of the block. \n\nEvery function from :help functions can be called. \nIf you want to use a certain function, the function name must be prefixed with V to avoid clashes with ruby's functions. \n\nEXAMPLE: \n\nruby withProxy { |p| puts p.Vconfirm(\"Test\",\"&Yes\\n&No\")}\n\nThis will show you a dialog box and return one if someone clicked Yes and 2 where someone clicked No.\n\nAnother example (with a function, which returns lists):\n\nwithProxy {|p| p.Vgetbufline(1,1,10).each {|x| puts (\"hello\" + x)}}\n\nThis appends hello to the first 10 lines from buffer 1 and echo the lines.\n\nTODO:\n\nAdding support for dictionaries. \nAdding support for floats. (It is built in, but the string function won't accept floats) \nAdding data conversions from Ruby to Vim. Now it only accepts list, strings or numbers. \n\nThis approach would probably be pretty easy to adopt for other languages, so create more plugin for different languages. \n\nSee the wiki for more information. Or for some information in Dutch, see here: http://www.i-bytes.nl/code"}, {:name=>"L9", :summary=>"Vim-script library", :description=>"Repository:\n  https://bitbucket.org/ns9tks/vim-l9/\n\nIssues:\n  http://bitbucket.org/ns9tks/vim-l9/issues/\n\nDownload latest(development) version\n  https://bitbucket.org/ns9tks/vim-l9/get/tip.zip\n\n\n==============================================================================\nINTRODUCTION                                                 *l9-introduction*\n\nl9 is a Vim-script library, which provides some utility functions and commands\nfor programming in Vim.\n\n==============================================================================\n INSTALLATION                                                *l9-installation*\n\nPut all files into your runtime directory. If you have the zip file, extract\nit to your runtime directory.\n\nYou should place the files as follows:\n>\n        <your runtime directory>/plugin/l9.vim\n        <your runtime directory>/doc/l9.txt\n        ...\n<\nIf you are disgusted to make your runtime directory confused with a lot of\nplugins, put each of the plugins into a directory individually and just add\nthe directory path to 'runtimepath'. It's easy to uninstall plugins.\n\nThen update your help tags files to enable help for this plugin. See\n|add-local-help| for details.\n\n==============================================================================\nUSAGE                                                               *l9-usage*\n\nSee source code.\n\n==============================================================================\n"}, {:name=>"makesd.vim", :summary=>"Generate Perl and C-style section dividers", :description=>"This is a simple plugin to generate fancy-looking comments / section dividers with centered titles and append them at the current cursor position. For an example, see:\n\nhttp://www.chaseventers.org/2010/09/vim-plugin-makesdmakecsd.html"}, {:name=>"ora-workbench", :summary=>"A workbench for Oracle databases", :description=>"The ORA-Workbench is a VIM plugin to use VIM a development environment for\nORACLE databases. \n\nThe ORA-Workbench shows the typical layout of modern development environment consiting\nof:\n\t- the object tree on the left side\n\t- a editing area in upper right \n\t- a \"log\" window in the lower right\n\nThe workbench requires a Oracle Client installation (I'm calling SQLPLUS). The\nprogram \"sqlplus\" must be in the \"path\". \n\nThis plugin has been tested with:\n\t- vim*7.2\n\t- ORACLE*10.2\n\t- MS Windows 2000\n\t- SUSE Linux*10\n"}, {:name=>"sequence", :summary=>"Increment / Decrement a sequence of numbers", :description=>"Usage:\n\nPut the cursor anywhere on these lines. The range will be guessed and the first\nsequence of numbers will be transformed. If you want to transform the second\nsequence of numbers you must use a visual block selection (dashes in this\nexample).\n\narray [1] = 9              array [1] = -9-              array [1] = 9\narray [1] = 9              array [2] = -9-              array [2] = 8\narray [1] = 9    alt-a:    array [3] = -9-    alt-x:    array [3] = 7\narray [1] = 9              array [4] = -9-              array [4] = 6\narray [1] = 9              array [5] = -9-              array [5] = 5\n\nWith a count:\n\narray [1] = 9                array [1] = -9-                array [1] = 9\narray [1] = 9                array [3] = -9-                array [3] = 7\narray [1] = 9    2 alt-a:    array [5] = -9-    2 alt-x:    array [5] = 5\narray [1] = 9                array [7] = -9-                array [7] = 3\narray [1] = 9                array [9] = -9-                array [9] = 1\n\nNote: If the range is not easy to guess, use a selection instead\n\nIf you wanted to increment / decrement all numbers by only one, select your\nlines and press ^a / ^x\n\n   v mode                     ^v mode\narray [1] = 8             array [6] = -8-             array [6] = 5\narray [1] = 8             array [6] = -8-             array [6] = 5\narray [1] = 8    5 ^a:    array [6] = -8-    3 ^x:    array [6] = 5\narray [1] = 8             array [6] = -8-             array [6] = 5\narray [1] = 8             array [6] = -8-             array [6] = 5\n\n----------------------------------------------------------------------------\n\nThis plugin integrates with Tim Pope's repeat plugin. It means that you can use\n. to repeat any normal mode (for now) sequence mapping you just used!\n\nFor more information see: http://github.com/tpope/vim-repeat\n\n----------------------------------------------------------------------------\n\nYou have the possibility to define your own custom mappings in your .vimrc:\n\n    vmap <m-a> <plug>SequenceV_Increment\n    vmap <m-x> <plug>SequenceV_Decrement\n    nmap <m-a> <plug>SequenceN_Increment\n    nmap <m-x> <plug>SequenceN_Decrement\n\n    vmap <c-a> <plug>SequenceAdd\n    vmap <c-x> <plug>SequenceSubtract\n\nNote: You can replace Alt+a, Alt+x, Ctrl+a and Ctrl+x with whatever you like."}, {:name=>"phaver", :summary=>"phaver syntax highlighting script ", :description=>"A very simple syntax highlighting script for the phaver language"}, {:name=>"Say-Time", :summary=>"Say time date and time through speakers every 1/2 hr", :description=>"For Windows.  It is handy to know what day and time it is but it is easy to forget.  This program reminds you of that every half hour.  Says:  day of week, day of month, month, and time in 24-hour format.  Not a vimscript, but seems relevant.  You might also try my gradually changing color scheme for vim: http://www.vim.org/scripts/script.php?script_id=2658."}, {:name=>"pyunit", :summary=>"Quick source/test switcher and unit test runner for Python", :description=>"Usage\n-----\n1. Open a Python file (or its corresponding unit test file named\n   ``test_<filename>.py``)\n2. Press ``<F8>`` to run ``nosetests`` on it\n\nIt shows the errors inside a quickfix window, which will allow your to\nquickly jump to the error locations by simply pressing ``[Enter]``.\n\n\nSource files vs. test files\n---------------------------\n``vim-pyunit`` assumes that you have a single test file for each Python\nsource file.  The settings ``PyUnitTestPrefix``, ``PyUnitSourceRoot``,\n``PyUnitTestsRoot``, and ``PyUnitTestsStructure`` determine how the plugin\nfinds which test files belong to which source files.\n\nThe ``PyUnitTestsStructure`` setting is the most important one, because it\ndetermines where the PyUnit plugin searches for source and test files.\nThere are three options:\n\n* **flat**: Put all test files in a single test directory.  File names are\n  composed by resembling the source's module structure, using underscores\n  as separators.  For example, the test file for the source file\n  ``foo/bar.py`` is called ``tests/test_foo_bar.py``.\n* **side-by-side**: Put all the test files in the same directory as the\n  source files.  Test files are prefixed with ``test_``.  For example, the\n  test file for the source file ``foo/bar.py`` is called\n  ``foo/test_bar.py``.  Use this setting when testing Django apps.\n* **follow-hierarchy**: Put all the test files in a separate test\n  directory (specified by ``PyUnitTestsRoot``), but keep the same\n  directory hierarchy as used in the source directory.\n  For example, the test file for the source file ``foo/bar.py`` is called\n  ``tests/test_foo/test_bar.py``.\n\n\nKeyboard mappings\n-----------------\nBy default, the ``vim-pyunit`` plugin defines the following keyboard\nmappings:\n\n+----------+------------------------------------------------------------+\n| Keymap   | Description                                                |\n+==========+============================================================+\n| F8       | Run ``nosetests`` for the current file. This mapping can   |\n|          | be used on both the source file, and on its corresponding  |\n|          | test file. Calls ``PyUnitRunTests()``                      |\n+----------+------------------------------------------------------------+\n| Shift+F8 | Run ``nosetests`` for all test files in the project, this  |\n|          | is equivalent to running ``nosetests`` in the root of your |\n|          | project. Calls ``PyUnitRunAllTests()``                     |\n+----------+------------------------------------------------------------+\n| F9       | Switch between the source and the corresponding test file. |\n|          | If the source or test file is not yet open, it is opened.  |\n|          | The setting ``tests_split_window`` is used to determine    |\n|          | where the file needs to be opened screen-wise. Calls       |\n|          | ``PyUnitSwitchToCounterpart()``                            |\n+----------+------------------------------------------------------------+\n\nThe plugin autodetects whether you have remapped the functions to custom\nkeyboard mappings.  If so, if does not register the default mappings.  So\nto pick your own shortcut key mappings, simply add lines like this to your\n``.vimrc``::\n\n    noremap ,t :call PyUnitRunTests()<CR>\n    noremap! ,t <Esc>:call PyUnitRunTests()<CR>\n\n(Which would map the test runner to comma-T. ``<F8>`` then remains what it\nwas.)\n\nIf you wish to disable any automatic keyboard mapping, simply set::\n\n    let no_pyunit_maps = 1\n\n\nConfiguration\n-------------\nThe plugin supports setting of the following variables:\n\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| Variable                      | Description                                    | Values                    | Default                           |\n+===============================+================================================+===========================+===================================+\n| ``PyUnitShowTests``           | Shows the tests.                               | 0 or 1                    | 1                                 |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitCmd``                 | The command to run the unit test.              | any string                | \"nosetests -q --with-machineout\"  |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``ProjRootIndicators``        | List of filenames indicating the project root. | list of file names        | [\".git\", \"setup.py\", \"setup.cfg\"] |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``ProjRootStopAtHomeDir``     | Stop the search for the project root at the    | 0 or 1                    | 1                                 |\n|                               | user's home dir.                               |                           |                                   |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitTestPrefix``          | The filename prefix to use for test files.     | any string                | \"test\\_\"                          |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitTestSuffix``          | *Not implemented yet*                          | 0 or 1                    | n/a                               |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitSourceRoot``          | The relative location where all source files   | directory spec, or empty  | \"\"                                |\n|                               | live.                                          |                           |                                   |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitTestsRoot``           | The relative location where all tests live.    | directory spec            | \"tests\"                           |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitTestsStructure``      | Specifies how you wish to organise your tests. | flat, follow-hierarchy,   | \"follow-hierarchy\"                |\n|                               |                                                | side-by-side              |                                   |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitTestsSplitWindow``    | Specifies where test files should be opened,   | left, right, top, bottom, | \"right\"                           |\n|                               | when oopened next to the source file. When set | no                        |                                   |\n|                               | to ``no``, doesn't open a new window at all,   |                           |                                   |\n|                               | but reuses the current buffer.                 |                           |                                   |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n| ``PyUnitConfirmTestCreation`` | Ask to confirm creation of new test files.     | 0 or 1                    | 1                                 |\n+-------------------------------+------------------------------------------------+---------------------------+-----------------------------------+\n\n\nTips\n----\nThis plugin goes well together with the following plugins:\n\n- PEP8_ (Python coding style checker under ``<F6>``)\n- PyFlakes_ (Python static syntax checker under ``<F7>``)\n\n.. _PEP8: http://github.com/nvie/vim-pep8\n.. _PyFlakes: http://github.com/nvie/vim-pyflakes\n"}, {:name=>"clang", :summary=>"Clang compiler definition", :description=>"Compiler definition for clang, use :compiler clang to use it"}, {:name=>"Son-of-Obisidian", :summary=>"Port of Visual Studio 2010 Son of obsidian color scheme", :description=>"Port of a Visual Studio 2010 theme :\nhttp://studiostyles.info/schemes/son-of-obsidian"}, {:name=>"Selenitic", :summary=>"Port of Visual Studio 2010 Selenetic color scheme", :description=>"Port of the Selenetic color scheme ( http://studiostyles.info/schemes/selenitic )"}, {:name=>"diff-fold.vim", :summary=>"Folds changesets, files, and hunks in Mercurial diff output", :description=>"View patches or pipe various Mercurial diff output to vim and see changesets, files, and hunks folded nicely together.\n\nSome examples:\n       hg in --patch | vim - -c \"setlocal ft=diff\"\n       hg diff | gvim -\n       hg diff -r 12 -r 13 | vim -\n\nRight now, this pretty much just works with Mercurial diff output.  Because Hg can use Git style patches, it does work with some Git output but it is not 100% reliable or useful.\n\nEventually, I hope to make this work with more version control systems and just about anything that can produce unified diff output.\n\nThe script can also be found on my bitbucket repo: https://bitbucket.org/thetoast/vimstuff"}, {:name=>"Bird-Syntax", :summary=>"Syntax highlighting for Bird configuration files", :description=>"This is a syntax file for the Bird Internet Routing Daemon configuration files.  It supports all keywords as of Bird version 1.2.4, along with filter, function, and protocol section folding.\n\nBird information can be found here: http://bird.network.cz/\n\nThere isn't any accompanying file type detection, so you'll need to \":setf bird\" or use a modeline, a la:\n\n# vim: set ft=bird nosta noet ts=4 sw=4:"}, {:name=>"Vimtodo", :summary=>"Todo manager script inspired by todo.txt and org-mode", :description=>"Vimtodo originally started out as a set of syntax highlights for the todo.txt\n(http://www.todotxt.com/) format in vim with a few added extras such as\nsubtasks. However, it quickly grew into a more fully featured task management\nsystem, taking several ideas from Emacs' org-mode.\n\nGithub: http://github.com/mivok/vimtodo"}, {:name=>"cSyntaxAfter", :summary=>"Operator highlighting for C-like languages", :description=>"Created for Code::Blocks theme (vimscript #3266) to highlight c operators."}, {:name=>"Code.Blocks-Dark", :summary=>"Code::Blocks original theme in a dark manner", :description=>"Inspired by the original Code::Blocks theme in a dark manner.\n\nScreenshot:\nhttps://sites.google.com/site/svlasovs/home/codeblocks_dark.png\n\nPlease use along with cSyntaxAfter plugin (vimscript #3265) to highlight c operators."}, {:name=>"omnetpp", :summary=>"help to edit and debug the ned file by OMNeT++", :description=>"help to edit and debug the ned file by OMNeT++. "}, {:name=>"command-list", :summary=>"create a list of command and display as needed", :description=>"Command list allowed you to define a list(group) of command\nDefine a shortcut to display the list, from there you can choose a command to execute. Command list is written in ruby so your vim need +ruby supported\n\nScreenshot:\n\nhttp://vim.wikia.com/wiki/File:Screen_shot.png\n\nFor any question please put it on this script's wiki page\n\nhttp://vim.wikia.com/wiki/Script:3268\n"}, {:name=>"open_file_from_clip_board", :summary=>"open file path that is copied in clipboard", :description=>"Note this script need clipboard supported \n\nhttp://vim.wikia.com/wiki/Accessing_the_system_clipboard\n\nspecifically, it use the * register to get the text in the clipboard\n\nthis little script define a function call OpenFilesFromClipboard()\n\nIf you, for example, execute some command from the terminal (maybe a grep) and get result like this:\n\n/Users/me/myfile:23:something something\n/Users/me/anotherfile: 34 I am a file\n/Users/me/yetanotherone hello\n\nwhat you can do with this plugin is: highlight the text and copy it into your system clipboard (Cmd-c in MacOSX and Ctrl-c in Windows)\n\nAssuming you have a mapping in your .vimrc\nmap <LEADER>jc :call OpenFilesFromClipboard()\n\nthen open your vim and type <LEADER>jc will open that each file into a new tab\nI hard code to tabnew for now, check back later version for more flexibility\n\nNote:\n just reallize that support different program on different environment is impossible. If it works for you, great, otherwise, please read the code, the idea and code it up for your usage"}, {:name=>"CommandWithMutableRange", :summary=>"Execute commands which may add or remove lines for each line in the range. ", :description=>"DESCRIPTION\nThis plugin offers enhanced versions of the :[range]normal[!] and :[range]call\ncommands which allow for additions and deletions of lines during iteration,\nand adapt the initially supplied [range] accordingly. \n\nThe built-in :normal[!] and :call commands can take a [range], and are then\nexecuted for each line in the range. If the supplied command / function\nmodifies the number of lines in the buffer, the iteration continues over the\ninitially supplied range of line numbers, totally oblivious to the changes.\nThus, if you want to apply modifications that add or delete lines before or\ninside the [range], this built-in Vim functionality isn't much of a help. (You\ncan work around this by recording a macro and then manually repeating it over\neach line, until you reach the end of the range, but you need to do the\nchecking.)  \n\nRELATED WORKS\n- RangeMacro.vim (vimscript #3271) executes macros repeatedly until the end of\n  a range is reached, also taking addition / removal of lines into account.\n\nUSAGE\nThe plugin provides enhanced versions of the :call, :normal and :execute\nVim commands: \n\n:[range]CallWithMutableRange {name}([arguments])\n\t\t\tCall a function (that does not need to accept a range)\n\t\t\tonce for every line in [range]. \n\n:[range]NormalWithMutableRange[!] {commands}\n\t\t\tExecute Normal mode commands {commands} for each line\n\t\t\tin the [range]. \n\n:[range]ExecuteWithMutableRange {expr1} ...\n\t\t\tExecute the string that results from the evaluation of\n\t\t\t{expr1} as an Ex command, once for every line in\n\t\t\t[range]. {expr1} is re-evaluated on each line. \n\t\t\tNormally, (custom) commands that can operate over\n\t\t\tmultiple lines should take an optional [range], but\n\t\t\tsometimes this wasn't implemented, and the command\n\t\t\tonly operates on the current position. In these cases,\n\t\t\t(in addition to ad-hoc expressions) this command is\n\t\t\tuseful, and also handles (most) deletions and\n\t\t\tinsertions gracefully. \n\nFor each iteration, the cursor is positioned in the first column of that line.\nFolding is temporarily disabled. The cursor is left at the last line (possibly\nmoved by the last invocation). The arguments are re-evaluated for each line. "}, {:name=>"RangeMacro", :summary=>"Execute macro repeatedly until the end of a range is reached. ", :description=>"DESCRIPTION\nMacros are a fantastic way to apply the same modification many many times.\nJust record once and then repeat, repeat, repeat...\n\nThough it's easy to repeat (@@, [count]@{0-9a-z\".=*}) a macro, explicit\nrepeating becomes cumbersome when you're dealing with hundreds of repeats. You\ncan write a recursive macro (i.e. invoking the macro at the end), but that\nwill execute over the entire buffer, until the macro errors out on the border\nof the buffer. Simple macros that mostly restrict themselves to a single line\ncan be repeated via :[range]normal @{0-9a-z\".=*}, but that breaks when lines\nare inserted or removed, or the macro jumps to other lines. \n\nWhat's needed for extensive macro repetitions is to repeatedly execute the\nmacro over a range, and stop once the macro navigates out of the range. \n\nThis plugin provides a :RangeMacro command and mappings that execute a\nrecorded macro over a range, area of text covered by {motion}, or the current\nseletion. \n\nRELATED WORKS\n- CommandWithMutableRange.vim (vimscript #3270) executes commands which may\n  add or remove lines for each line in the range. \n\nUSAGE\n:[range]RangeMacro {0-9a-z\".*+}\n\t\t\tPosition the cursor on the first column of the start\n\t\t\tof [range] and execute the contents of register\n\t\t\t{0-9a-z\".*+} repeatedly until the cursor moves beyond\n\t\t\tthe lines covered by [range]. \n\n<Leader>@{0-9a-z\".*+}{motion}\n\t\t\tRepeatedly execute the contents of register\n\t\t\t{0-9a-z\".*+} until the cursor moves outside the text\n\t\t\tcovered by {motion}. \n\n{Visual}<Leader>@{0-9a-z\".*+}\n\t\t\tPosition the cursor on the first column of the\n\t\t\tselection and execute the contents of register\n\t\t\t{0-9a-z\".*+} repeatedly until the cursor moves outside\n\t\t\tthe selection. All selection modes are supported:\n\t\t\tcharacterwise, linewise and blockwise. \n\nNote: The check whether the macro moved outside the range is only done _after_\neach macro invocation. During macro evaluation, jumps outside the range can be\nused and will not stop macro execution. \n\nSUITABLE MACROS\nTo make a macro repeatable, the macro must move to the position where the next\nmacro call needs to take place, typically either as the first or last command\nof the macro. The macro will always be executed from top to bottom of the\nrange, regardless of how {motion} or the selection was made. \nSo, for example, if the macro processes line(s) sequentially, append the \"j\"\ncommand to move to the next line; if the buffer areas are located via\nsearching, you could use the \"n\" command to move to the next match. "}, {:name=>"tchaba", :summary=>"A dark color scheme, 256 color terminals", :description=>"Some screenshots of the scheme:\n\nC\nhttp://img718.imageshack.us/img718/4649/21984810.png\n\nPerl\nhttp://img835.imageshack.us/img835/8715/perl.png\n\nAssembly\nhttp://img85.imageshack.us/img85/5391/assembly.png"}, {:name=>"kirikiri.vim", :summary=>"syntax file for kirikiri (吉里吉里)", :description=>"repository: http://github.com/tyru/kirikiri.vim\n\n\n吉里吉里のsyntaxファイルです。\nsyntax/tjs.vimがあればiscript, endscriptの間もハイライトします。\n(syntax/tjs.vimはまだ開発中です)\n\nsyntax file for kirikiri.\nIf syntax/tjs.vim is installed,\nit highlights between iscript, endscript.\n(NOTE: syntax/tjs.vim is under development)"}, {:name=>"Liquid-Carbon", :summary=>"Dark-background GUI color scheme.", :description=>"Matte dark-gray background with flat dark blue-slate trimmings, and colorful yet harmonious syntax highlighting. Screenshots available at: http://jeetworks.org/liquidcarbon . Higher-contrast (darker background) can be set by defining \"g:liquidcarbon_high_contrast=1\" in '~/.vimrc'."}, {:name=>"actionscript.vim--Cuss", :summary=>"ActionScript 3.0 syntax file with regular expressions", :description=>"Improves vimscript #1061 by adding regular expression support. Nothing fancy."}, {:name=>"ProjectCTags", :summary=>"Generates CTAGS for versioned projects without the need to maintain project file", :description=>"ProjectCTags is a plugin that enables you to generate CTags for a project which is under version control. These tags can then be used to Eclipse-like \"Jump-To-Definition\" or autocompletion of source code. Currently the plugin recognizes source code projects which are versioned with git, CVS and SVN version control systems. This plugin eases the task of generating up-to-date tag files. For people who like to maintain vim project files (Personally I do not like to do that, I just want tags for everything in my project folders), vimscript #3221 might be more appropriate. Once you have generated the tags you can use them in the following ways:\n\n* Jump to definition of the tag (if it is located in your project) under the cursor with Ctrl-]\n* Autocomplete C/C++ source code with vimscript #1520 (See vimscript #1643 for intelligent <Tab> key completion)\n\nWhen you have opened a file, the plugin may either automatically update the corresponding tagfiles or it does this on your command (optional). It creates two tagfiles: One in the current folder, which contains detailed informations such as tags for local variables, and one tagfile in the project folder, which contains a less detailed overview of the globally visible tags in all source files in the versioned tree. By default it creates tags in the proper format for vimscript #1520.\n\nThe generated tags will only cover the code that is contained in your project! STL code etc is not included. If you want autocompletion for STL code you must download vimscript #2358 and insert the following into your .vimrc\n\nset tags += \"path/to/stl_tag_file\"\n\nIf you have questions or suggestions about/for the plugin, feel free to contact me."}, {:name=>"Python-2.x-Standard-Library-Reference", :summary=>"The Python 2.x standard library documentation as a Vim help file", :description=>"Installing this help file will give you access to the Python 2.7 standard library documentation as a Vim help file (available from within Vim by typing \":help py2stdlib\"). For this release I've only tagged the module names (otherwise the help tagspace becomes too cluttered).  I have also left a lot of RST syntax decorations (e.g., backticks, bold) intact to preserve table alignment etc. If you have any suggestions for improvement or find areas in the documentation that need to be fixed, please let me know."}, {:name=>"Python-3.x-Standard-Library-Reference", :summary=>"The Python 3.x standard library documentation as a Vim help file", :description=>"Installing this help file will give you access to the Python 3.1 standard library documentation as a Vim help file (available from within Vim by typing \":help py3stdlib\"). For this release I've only tagged the module names (otherwise the help tagspace becomes too cluttered). I have also left a lot of RST syntax decorations (e.g., backticks, bold) intact to preserve table alignment etc. If you have any suggestions for improvement or find areas in the documentation that need to be fixed, please let me know."}, {:name=>"ProjectParse", :summary=>"Parse common project types to augment the project plugin", :description=>"ProjectParse is a plugin that analyzes several common project formats and creates entries for them for use with  Vim's `project` plugin.  ProjectParse currently supports the following project types:\n\n    * Microsoft Visual Studio Projects and Solutions\n    * Code::Blocks Projects and Workspaces\n    * Automake Makefiles\n\nOne of the most popular plugins available for Vim, the `project` plugin vimscript #69 provides a mechanism for creating lists of files that makeup a project. Beyond just giving you a file listing, it provides some great functionality such as automatically opening your project files, grepping through each file in the list, and running arbitrary commands on these files.                \n\nThe project plugin creates a project by scanning through the user's filesystem for files that match a specified pattern.  This approach, while effective for some projects, isn't optimal for others.  Often, the filesystem may contain files that match the specified pattern but are not a part of the project (such as temporary files or older revisions of relevant files).  Also, when the user's filesystem is large, generating the list of files can be quite time-consuming (I've had projects with 1,500 relevant files in a directory of 30,000 files, where >28,000 files are analyzed unnecessarily).  Another problem is that by relying on a pre-configured file pattern, certain important files can be missed when they are not part of the configured pattern, especially as projects evolve.\n\nOften, software developers already have a list of their relevant files in the form of a project for a well-known software tool like Microsoft Visual Studio. This is where ProjectParse enters.  ProjectParse is capable of analyzing project files for several popular software tools to automatically (and quickly) create a project for the `project` plugin.\n\nBy simply running the :ProjectParse command on a relevant file, a file listing will be added to a user's configuration for the `project` plugin and he or she can need not worry about whether any files have been missed (or added in error)."}, {:name=>"Tabbi", :summary=>"Aligns text as a table", :description=>"A simple vim plugin that aligns text separated with tabs or two or more whitespaces, so that each part starts in the same column as in the other lines. Just like a table, but without lines.\nBefore:\npart one        part two     part three\n another part one              another part two    another part three\n\nAfter:\npart one                  part two                 part three\nanother part one    another part two   another part three\n\n(would be more observable with monospace type)\n\n\nUsage: to align the whole buffer, type :Tabbi, for aligning parts type e.g. :10,20Tabbi or use visual mode."}, {:name=>"run_python_tests", :summary=>"Run Python unit tests asynchronously", :description=>"Run Python Tests\n\n    http://bitbucket.org/tartley/vim_run_python_tests\n\n    Vim scripts to run Python unit tests.\n\n    Only currently tested on Vim 7.2 on Windows XP.\n    \n\nDESCRIPTION\n    \n    Provides key bindings to:\n\n    <Leader>a : toggles between the Python file in the current buffer and its unit tests.\n    F4 : Toggle the quickfix window open or closed.\n    F5 : Run the Python file in the current buffer\n           (i.e. run \"python dir\\subdir\\file.py\".)\n    F6 : Find & run the unit tests of the Python file in the current buffer\n           (i.e. find the unittest module as described below, then run \n           \"python -m unittest package.subpackage.module\"\n    F7 : Run the single test method under the cursor \n            (i.e. find the name of the test method the cursor is in, find its test class name, then run\n            \"python -m unittest --verbose package.subpackage.module.class.method\")\n\n    For F5, F6, & F7, you will want to check what Vim's current directory is. This will affect the path or sequence of packages used to reference your test module. Set the current directory in Vim using the :cd command. It should be set to the same directory that you'd have to be in to execute your tests from the command-line, which is generally your project root.\n\n    All running of files or tests is done asynchronously, so you can continue using Vim while it runs. When complete, the output is read into Vim's quickfix window.\n    \n    Alternatively, pressing Shift-F5, -F6, or -F7 will run the respective command in a new text terminal, which will remain open to display the results, and will automatically re-run the command whenever it detects changes to any file in or below the current directory.\n\n    When looking for the test module that corresponds to the current file, we search in the same dir, and in a bunch of likely-named subdirectories (e.g. 'test', 'tests', 'unittest', 'unittests') for a file of an likely-sounding test name. e.g. when 'widget.py' is the current buffer, we search for 'testwidget.py', 'test_widget.py', 'widget_tests.py', etc.\n\n\nTROUBLESHOOTING\n\n    Q) When I try to run tests, I see a traceback from unittest, such as: \"ImportError: No module named X\", or \"ValueError: Attempted relative import beyond toplevel package\"\n    A) Are you sure Vim's current working directory is correct?\n\n\nPYTHON TRACEBACKS IN THE VIM QUICKFIX WINDOW\n\n    The default value of Vim's errorformat variable for working with Python only shows one entry from each traceback, which seems unhelpful to me. To fix this, you can create a file ~/.vim/compiler/pyunit, which contains just:\n\n        CompilerSet efm=\\%A\\ \\ File\\ \\\"%f\\\"\\\\,\\ line\\ %l\\\\,\\ %m,%C\\ %m,%Z\n\n    Now when you run the ':compiler pyunit' command (as run_python_tests does whenever you press F5, F6, or F7), Vim's quickfix window will display all the entries in each traceback.\n\n\nTODO\n\n    * Make it all work on Linux\n    * Instead of printing out status messages, can we prepend them to the output in the quickfix window?\n\n\nTHANKS\n\n    Pretty much all of this is stolen from various existing scripts at vim.org, or from my awesome colleagues at Resolver Systems.\n\n\nCONTACT\n\n    I know nothing about Vim scripting, so I'd love to hear about it if you have problems with this script, or ideas on how it could be better.\n\n    Jonathan Hartley, tartley@tartley.com\n"}, {:name=>"eregex.vim", :summary=>"Perl/Ruby style regular expression", :description=>"# Introduction\n\nhttp://vim.wikia.com/wiki/Perl_compatible_regular_expressions\n\nIn this tip. I introduced a plugin to help you use Perl style regular expression in Vim.\nBut the maintainer is disappear. And the default package is not easy to install.\nSo I start to maintain it.\n\nRepo: http://github.com/othree/eregex.vim\n\n\n# Quick Start\n\nAdd the following code to .vimrc file.\n\nnnoremap / :M/\nnnoremap ,/ /\n\nNow you can use / to use Perl style regexp to find.\n:S (uppercase S) to use Perl style regexp to replace. \n\n\n# Attribute\n\nAuthor : 安久津\n"}, {:name=>"OMNeTpp4.x-NED-Syntax-file", :summary=>"The script is a syntax file for OMNeT++ 4.x NED scripts", :description=>"I find the syntax file for ned, but it is just for OMNeT++ 3.x network simulator and was not updated for a long time. Now, The OMNeT++ 4.x network simulator is released, I wish the ned.vim file can help users work easily.\n\nThe syntax file include:\n* highlight all functions keywords\n* highlight the number, float, double types and so on\n* highlight the properties(such as: @loose, @prompt, @unit and so on)\n* code folding\n    you can set this by edit the .vimrc, for examples \"let ned_fold=1\" or \"let ned_nofold_blocks=1\" or \"let ned_nofold_packages=1\"\n* highlight the document keywords, TODO, FIXME and so on\n\nmore information in the ned.vim, enjoy it."}, {:name=>"Quotes--Dimitrov", :summary=>"Use \"\" (2 double quotes) instead of ci' or ci\"", :description=>"Use \"\" (2 double quotes) instead of ci' or ci\".\n\nYou don't even have to be on the line you're interested in. The first screen line containing a pair of quotes will be used (a top screen line will be used if there are no quotes below the cursor).\n\nIn a line containing pairs of both type of quotes, the first quote left to the cursor will be used to decide.\n\nYou can repeat your action with '.', just install Tim Pope's repeat plugin.\n\nPersonalization: nmap \"\" <plug>QuotesCIQuotes"}, {:name=>"looks", :summary=>"Manage various looks/settings of vim", :description=>"This is a vim plugin I created for myself to help me manage various *looks* of vim. Each look is dictionary of settings and options that makes vim get a unique look.\n\nThese looks are defined in vimrc (or somewhere else but are source-d) like the following,\n\n    let g:looks = {}\n    let g:looks.dark = {\n        \\ '_map': \"d\",\n        \\ ':colorscheme': \"lucius\",\n        \\ '&guifont': \"Inconsolata\\\\ Medium\\\\ 15\",\n        \\ '&cursorline': 1\n        \\ }\n    let g:looks.light = { \":colorscheme\": \"tango\" }\n\nand the looks can be loaded with :Look command, like so\n\n    :Look dark\n\nTab completion is also available on the command line for all available looks.\n\nPlugin hosted over at bitbucket.org, https://bitbucket.org/sharat87/vim-looks\n\nFor more details, see \":h looks\"."}, {:name=>"LiteTabPage", :summary=>"A Tab Page extension plugin", :description=>"\nScreenshot: http://ayuanx.files.wordpress.com/2010/10/litetablabel.jpg\n\nThis is an (extremely) simple plugin, which makes VIM Tab Page functions more user-friendly. \n\n<> Features:\n1. \":E %FILNAME%\"\t\t\tOpen the file in a new tab instead of in current window.\n\n2. \"<Alt-H> / <Alt-L>\"\t\tToggle current tab forward/backword.\n\n3. \"<ALt-1>, <Alt-2> to <Alt-0>\"\tSwitch to tab 1/2/3/4/5/6/7/8/9/10.\n\n4. Show GUI Tab Labels in format: \"[Tab Number]:[+][Buffer Name]\"\n\tPS: [+] stands for one or more buffer in that tab has been modified.\n\n<> Feedback:\n     You are always encouraged to modify this plugin freely to suit your own needs!\n"}, {:name=>"Show-mandictperldocpydocphpdoc-use-K", :summary=>"Show man", :description=>"Show man/dict/perldoc/pydoc/phpdoc use K Y"}, {:name=>"newsprint.vim", :summary=>"A (pleasant) monochromatic color scheme for Vim", :description=>"newsprint.vim is a (pleasant) monochromatic color scheme ideal for simulating a black and white terminal from a color terminal or GUI. This color scheme is intended for black on white display."}, {:name=>"pf_earth.vim", :summary=>"Dark, Earthy Color Scheme", :description=>"This was originally based on the textmate krTheme.  It is heavily modified though.  It looks quite nice while coding in Ruby/C/C++.  "}, {:name=>"RevealExtends", :summary=>"A plugin to reveal extended URLs from the buildout cache", :description=>"Developers can use zc.buildout to manage the build of a software project. It\nis most commonly used in the Zope and Plone world, but has been gaining\ntraction in other communities like Django.\n\nOne of the nice things about buildout is the ability to define the\nconfiguration via ini style files. You can extend a local file or a URL. In\nversion 1.4.0 of buildout, the option to cache the URL locally was added along\nwith the new download API.\n\nHere is an example: >\n\n    [buildout]\n    versions = versions\n    extends = \n       http://dist.example.org/versions.cfg\n       versions.cfg\n\n>\n\nThis allows you to pull in a list of versions from example.org. If you have\nyour default.cfg setup to cache the URL then you could find that file\nmanually. This requires that you know the md5 hash of the URL string. Not the\nmost convenient way to find the file. This is where the plugin comes in\nhandy.\n\nThe plugin allows you to use the current line, a visual selection or a string\npassed in to get the contents of the extended URL using the :RevealExtends command.\n\nSee the included docs for more information.\n\nPython support is required for retrieving the URL from the internet if it can't\nbe found in the cache.\n\nSee the code on github: http://github.com/claytron/RevealExtends"}, {:name=>"openurl.vim", :summary=>"open a url in a default browser", :description=>" Summary\n =======\n The OprnUrl function opens a url which is a first one in a line.\n\n Require\n =======\n You need a python interface.\n\n Usage\n =====\n If there is a line such that\n\n Sample line. http://aaa http://bbb\n\n You use ':OpenUrl' command in this line, \n then you can open http://aaa in a default web browser.\n\n\n\n I set a command for OpenUrl function, such that\n\n command OpenUrl :call OpenUrl()\n \n You can change command name by changing above command ame 'OpenUrl'.\n\n example)\n command AnotherOpenUrlName :call OpenUrl()\n"}, {:name=>"southernlights", :summary=>"A 256 colors scheme", :description=>"A 256 colors scheme with identical colors in both Vim and GVim.\n\nscreenshots: http://sites.google.com/site/jalvesaq/vimrplugin"}, {:name=>"numbered", :summary=>"Number items in a list.", :description=>":help numbered"}, {:name=>"grass.vim", :summary=>"syntax file for grass", :description=>"syntax file for grass (http://www.blue.sky.or.jp/grass/doc_ja.html).\nrepository: http://github.com/tyru/grass.vim\n\nsample:\n無限に草植えときますねｗＷＷｗｗｗｗＷＷｗｗ\n\nＹコンビネータｗｗＷＷｗｗＷｗｗｖちょｗｗＷＷＷｗＷＷＷｗｖおまｗＷＷｗＷｗｖ\n\nｗｗｗｗｖｗｖｗｗＷＷｗｖｗｗＷｗｗｖｗｗｗｗＷＷＷｗｗＷｗｗＷＷＷＷＷＷｗｗｗｗＷｗ\nｗｖｗＷＷｗＷｗｗｖｗＷＷＷｗｗｗｗｗＷｗｗｗｗｗｗＷＷｗＷＷＷｗＷＷＷＷＷＷｗＷ\nＷＷＷＷＷＷＷｗｗｗＷｗｗＷＷＷＷＷＷＷＷＷＷｗＷｗｗｗｗｗＷＷＷＷＷＷＷＷ\nＷＷＷｗｗｗｗｗＷＷＷＷＷＷＷＷＷＷＷＷｗｗｗｗＷＷＷＷＷＷＷＷＷＷＷＷＷ\nｗｗｗＷＷＷＷＷＷＷＷＷＷＷＷＷＷｗｗｗＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷｗＷ\nＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷｗｗｗＷｗｗｗｗｗｗｗｗｗｗｗｗｗｗＷＷＷＷ\nＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗｗｗＷｗｗＷＷＷＷＷＷＷＷＷＷＷ\nＷＷＷＷＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗＷｗｗｗｗ\nｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗ　　　　　　　　　　　　　ｗｗｗｗｗｗｗｗＷＷｗｗｗｗｗｗｗ\nｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗ　　　　　　　 　 は　　 ｗｗｗｗｗＷＷＷＷＷＷＷＷＷＷ\nＷＷＷＷＷｗＷｗｗｗＷＷＷＷ　　　　わ　　　い　　 ＷＷＷＷＷＷＷｗｗｗＷｗｗＷＷ\nＷＷＷＷＷＷＷＷＷＷｗｗｗｗ　　　　ろ　　　は　　  ｗＷｗｗｗｗｗｗｗＷＷＷＷＷＷＷ\nＷＷＷＷＷＷＷＷＷＷｗｗｗｗ　　　　す　　　い　　　ｗｗｗＷｗｗＷＷＷＷＷＷＷＷＷ\nＷＷＷＷＷＷＷＷＷｗｗｗｗｗ　　　　 わ　　　　　　　ｗｗｗｗＷｗｗＷＷＷＷＷＷＷＷ\nＷＷＷＷＷＷＷＷＷＷＷＷＷ　　　　ろ　　　　　　　ＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗ\nｗｗｗｗｗＷｗｗＷＷＷＷＷＷＷ　　　 す　　　　　　　ＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗ\nｗｗｗｗｗｗｗＷｗｗｗｗｗｗｗｗｗ　　　　　　　　　　　　 ｗｗｗｗｗｗＷＷＷＷＷＷＷＷＷ\nＷＷＷＷＷＷＷＷｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗ\nｗｗｗｗｗｗＷｗｗｗｗｗｗｗｗｗｗｗｗｗｗＷＷｗｗｗｗｗｗｗｗｗＷＷＷｗｗＷＷＷＷｗｗｗ\nｗｗｗｗｗｗｗｗｗｗｗｗＷＷＷＷＷｗｗＷＷＷＷＷＷｗｗｗｗＷＷＷＷＷＷＷｗｗＷＷＷ\nＷＷＷＷＷｗｗｗｗＷＷＷＷＷＷＷＷＷｗｗＷＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗｗｗｗ\nｗｗｗｗＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗ\nｗｗｗｗｗＷｗｗｗＷＷｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗＷＷＷｗｗＷＷＷＷｗｗｗｗｗｗ\nｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗＷＷＷＷＷｗｗＷＷＷＷＷＷｗｗｗｗｗｗｗＷＷＷＷ\nＷＷＷｗｗＷＷＷＷＷＷＷＷｗｗｗｗｗｗＷＷＷＷＷＷＷＷＷｗｗＷＷＷＷＷＷＷＷ\nＷＷｗｗｗｗｗｗＷＷＷＷＷＷＷＷＷＷＷｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗｗ"}, {:name=>"toggle_option", :summary=>"Initial upload", :description=>"This script provides a very small utility to toggle an option or a variable with an unified syntax. This can be useful when writing scripts.\n\nUsage:\n\n:Toggle <my-options>\n\nexample\n\n:Toggle paste\n:Toggle paste spell\n:let g:my_variable=0\n:Toggle g:my_variable"}, {:name=>"idp.vim", :summary=>"Syntax file for IDP", :description=>"This is a very basic syntax file for the IDP language (http://dtai.cs.kuleuven.be/krr/software/idp)\n"}, {:name=>"sjump.vim", :summary=>"Display labels in the sign area and jump to selected label", :description=>"When executed the plugin will display labels in the sign area and wait\nfor the user to enter a label. Then it will jump to the line with the\nentered label and hide the labels (by removing the signs).\n\nThe plugin is mapped to the sequence gl (Goto Line). The mapping can\nbe disabled with:\n   let g:sjump_enable_keymap = 0\n\nTo put the mapping on another key:\n   nmap <F9> :call sjump#JumpToLabel()<cr>\n\nMore configuration options are in help (:help sjump).\n\nRequires: +signs\nUse :version to see if +signs is enabled."}, {:name=>"vim_faq", :summary=>"The Vim-FAQ from vimdoc.sourceforge.net", :description=>"This is the vimfaq from http://vimdoc.sf.net (with slight changes added by myself).\n\nThis Vim FAQ is created from the questions and answers posted to the\nvim@vim.org user mailing list and the comp.editors newsgroup. There are\nseveral ways to solve a problem in Vim. This FAQ gives one of those several\npossibilities. You can explore the other ways using the information and\nlinks given in this FAQ. The credit for the answers in this FAQ goes to\nPeppe, Benji, Charles Campbell and numerous others.\n\nThis is only a documentation plugin. \n\nThe source can be found at github: http://github.com/chrisbra/vim_faq"}, {:name=>"Sorcerer", :summary=>"Dark-background GUI color scheme.", :description=>"A heavily-reworked version of 'Mustang' by Henrique C. Alves, with lower-keyed colors. Screenshots available at: http://jeetworks.org/sorcerer ."}, {:name=>"up.vim", :summary=>"Dark-background color scheme", :description=>"Screenshot available on GitHub \u0097 http://github.com/kossnocorp/up.vim"}, {:name=>"TrimBlank", :summary=>"help trim trailing blank characters and blank lines", :description=>"TrimBlank is a vim plugin aimed at helping trim trailing blank characters and\nblank lines.\n\nHow to use this plugin?\nSelect some lines and type \"<Leader>ttb\"(<Leader> would be \"backslash\" by\ndefault), then the trailing blank characters of the lines selected will be\ntrimmed; select some lines and type \"<Leader>tbl\", then the blank lines among\nthe lines selected will be trimmed; select some lines and type \"<Leader>tab\",\nthen both trailing blank characters and blank lines would be trimmed.\n\nIf you find any bug, please report it to xuhdev@gmail.com or submit it on the \nissue tracker: \nhttps://bitbucket.org/xuhdev/trimblank/issues\n\n\nRepository: https://bitbucket.org/xuhdev/trimblank"}, {:name=>"clang-complete", :summary=>"Use of Clang for completing C, C++, Objective-C and Objective-C++", :description=>"This plugin use clang for accurately completing C, C++, Objective-C and Objective-C++ code.\n\nYou don't need any ctags for it to work! Only clang is needed. Clang version 2.8 or higher is recommended for c++ completion. After a . , -> and :: it is automatically trying to complete the code. If you want to \"force\" the completion, use <C-X><C-U> which is the mapping for user defined completion (It may be changed to omnicomplete mapping in a near future). Because clang is parsing your source file, it can detect errors inside your code, and highlight them! Plus it can open the quickfix window automatically,\n\nIf you've got special flags for a project (especially -I and -D ones), clang may be unable to complete your code. To overcome this limitation put the flags inside the file .clang_complete at the root of your project.\n\nLatest version will always be on github: http://github.com/Rip-Rip/clang_complete\n\nDo not hesitate to report bugs or ask for features.\n\nConfiguration:\n  - g:clang_complete_auto:\n       if equal to 1, automatically complete after '->', '.', '::'\n       Default: 1\n\n  - g:clang_complete_copen:\n       if equal to 1, open quickfix window on error.\n       Default: 0\n\n  - g:clang_hl_errors:\n       if equal to 1, it will highlight the warnings and errors the\n       same way clang does it.\n       Default: 1\n\n  - g:clang_periodic_quickfix:\n       if equal to 1, it will periodically update the quickfix window\n       Note: You could use the g:ClangUpdateQuickFix() to do the same\n             with a mapping.\n       Default: 0\n\n  - g:clang_snippets:\n       if equal to 1, it will do some snippets magic after a '(' or a ','\n       inside function call. Not currently fully working.\n       Default: 0"}, {:name=>"smartbd", :summary=>"keep splits when deleting buffers", :description=>"Adds a command for deleting buffers like :bd but does not close splits. Instead it tries to go to the next buffer first before deleting the buffer.\n"}, {:name=>"Gundo", :summary=>"Visualize your undo tree.", :description=>"Gundo is a Vim plugin for visualizing your undo tree to make it usable.\n\nGo to the site for more information: http://sjl.bitbucket.org/gundo.vim/\n\nRequirements: Vim 7.3+ with Python 2.4+ support."}, {:name=>"altera_sta.vim", :summary=>"Syntax file for Altera Quartus TimeQuest (sdc) files", :description=>"This is a syntax file for Altera Quartus (version .9.1) static timing files.  This includes Altera's version of sdc, plus Altera's extensions.  A dictionary file is included and will automatically link in if found to provide command completion."}, {:name=>"altera.vim", :summary=>"Syntax file for Altera Quartus qsf files", :description=>"This is a syntax file for Altera Quartus (version .9.1) qsf files.  A dictionary file is included and will automatically link in if found to provide command completion."}, {:name=>"vim-addon-async", :summary=>"asynchronous communication for Vim", :description=>"start external processes using VimL, write to their stdin and get notified when they produce output or kill the process when you're done.\n\nThis plugin also implements an experimental minimalistic terminal like interface so that you can run you favourite interpreter (irb, python, /bin/sh, sbt, scala, ...) inside a simple Vim buffer.\n\nThe API is non blocking and should be strong enough to enterface with debuggers etc.\n\nImplementation details: You have to compile an external c helper application which interfaces with the external process notifying Vim about arriving stdout blocks by using the client-server feature.\n\nIts used in production by me. Interface may still change slightly in the future. Under some conditions Vim crashes although it shouldn't. Try it and report how well it works for you.\n\nIf you've trouble getting started contact me."}, {:name=>"vim-refact", :summary=>"Some refactoring for Vim", :description=>"Refactor plugin for Vim.\n\nYou can use this plugin to make some refactoring on your code.\nIt was originally written to work with the Ruby language, but it's\nflexible (I hope, I'll add some more languages later) to work with\nanother languages.\n\nhttp://github.com/taq/vim-refact"}, {:name=>"vydark", :summary=>"A versatile, comfortable colour scheme for every day use. Dark background.", :description=>"A pleasant environment for those extended coding sessions. This color scheme is meant for use with a gui version of Vim. \n\nPreview screenshot: http://www.node.mu/images/vy-color-schemes/vydark.png"}, {:name=>"gdb4vim", :summary=>"This script give you some ability to use gdb", :description=>"This is actually my first script, so please give me your feedbacks and say whatever you like and whenever you want to!\n\nWritten with python, this script implements few basic functions in debugging, such as:\n1. Add a variable display\n2. Set/clear breakpoint\n3. step/next\n4. edit the value of a variable (since 0.023)\n\nYou can find this project at:\nhttp://code.google.com/p/gdb4vim/\n\nEMail me if you'd like to participate!"}, {:name=>"savemap.vim", :summary=>"savemap is the library to save current mapping(s)/abbreviation(s)", :description=>"Repository: http://github.com/tyru/savemap.vim\n\nRequirements:\n- Vim 7.3 or higher\n\n\n|savemap| is the library to provide a way\nto restore current mapping(s)/abbreviation(s) \"perfectly\".\n\n...But remember, you can always use |:map-<buffer>| for \"simple\" case.\n\n>\n    nmap foo blahblahblah\n\n    let foo_nmap = savemap#save_map('n', 'foo')\n    if empty(foo_nmap)\n        echoerr 'your vim version is lower than 7.3.032!'\n    endif\n\n    nmap foo bar\n    \" Execute 'bar'.\n    normal foo\n\n    call foo_nmap.restore()\n    \" Execute 'blahblahblah'.\n    normal foo\n\n\nOmit 2nd arg of |savemap#save_map()| to save all mappings of the mode.\n>\n    let normal_mappings = savemap#save_map('n')\n    if empty(normal_mappings)\n        echoerr 'your vim version is lower than 7.3.032!'\n    endif\n\n   \" Clear!\n    nmapclear\n\n    \" Map own mappings.\n    nnoremap a b\n    nnoremap c d\n    ...\n\n    try\n        ... \" Do it\n    finally\n        call normal_mappings.restore()\n    endtry"}, {:name=>"operator-html-escape", :summary=>"operator-html-escape provides operator to escape HTML entities.", :description=>"Repository: http://github.com/tyru/operator-html-escape.vim\n\n\n|operator-html-escape| provides |operator| to escape HTML entities.\n>\n\tnmap <c-h> <Plug>(operator-html-escape)\n\tnmap <c-u> <Plug>(operator-html-unescape)\n\nThis has similar feature with this wiki page:\n\thttp://vim.wikia.com/wiki/HTML_entities\n\nBut the fact is that it is certainly NOT the same\nbecause this is operator.\nso this can work with |text-objects|.\nYou can also enhance |text-objects| by |textobj-user|.\n\nRequirements:\n- Vim 7.2 or later\n- |operator-user| 0.0.5 or later (vimscript#2692)"}, {:name=>"Mizore", :summary=>"A dark color scheme in cyan, blue and violet tones.", :description=>"A dark color scheme in cyan, blue and violet tones.\n\nAn example: http://luinnar.narod.ru/vim/Mizore.png"}, {:name=>"maxivim", :summary=>"Maximize/unmaximize gvim without window manager", :description=>"In some environments (for example, KDE 3), gvim is unable to properly maximize or unmaximize itself, due to interactions with window managers or other issues.\n\nMaxivim bypasses window managers, allowing you to maximize gvim vertically, horizontally, or both, and restore it from having maximized it.\n\nMaxivim also allows you to set the initial size of your gvim windows by setting environment variables ($GVIM_LINES and $GVIM_COLUMNS).\n\n(This used to work with Vim 6, but I've only recently tested on Vim 7)."}, {:name=>"vim-addon-json-encoding", :summary=>"make Vim read and write JSON objects", :description=>"I think JSON is the preferred way to make Vim communicate with external tools because it can speak it (almost) natively using eval / string.\n\nstring serialization encodes strings using &#039 instead of \\\". This the encoding has been rewritten using VImL\n\ntrue, false, null can&#039t be represented in VimL. Thus they are encoded by unique function values (See code)\n\nThis plugin is used by the ensime plugin (and similar code is used by the scion plugin).\nIn both cases Vim sends small commands and receives completion data or the like.\nBecause native eval is used for reading JSON data you can&#039t be faster.\n"}, {:name=>"tohtml_wincp", :summary=>"Autodetect installed Windows encodings for :TOhtml", :description=>"This plugin will automatically add any encodings which you have installed on\nyour Microsoft Windows system to the g:html_encoding_override and\ng:html_charset_override options of the :TOhtml plugin which is distributed\nas part of the official Vim runtime.\n\nThis plugin has no mappings or user-defined commands. It sets up an :autocmd\nthat will be invoked the first time that you call the :TOhtml command or\ndirectly :source the 2html.vim script.\n\nBecause the plugin does not trigger until just before the first :TOhtml\nconversion, you will not see any changes to the encoding detection options\nright away. This is normal, do not be alarmed!"}, {:name=>"vim-addon-signs", :summary=>"work around the bad API of Vim setting, unsetting signs (markers at the left)", :description=>"you push a whole list of signs. The plugin will take care about applying incremental updates. An example is provided which can be used to highlight error lines of quickfix or error location list."}, {:name=>"unite-colorscheme", :summary=>"A Unite.vim plugin for changing your colorscheme.", :description=>"A Unite.vim plugin for changing your colorscheme. See details in the following pages. \n\n* http://github.com/ujihisa/unite-colorscheme (development) \n* http://ujihisa.blogspot.com/2010/11/how-to-make-unite-plugin.html (for version 1.0)\n"}, {:name=>"unite-font", :summary=>"A Unite.vim plugin for changing your font.", :description=>"A Unite.vim plugin for changing your font. See details in the following pages. \n\n* http://github.com/ujihisa/unite-font (development) \n* https://github.com/shougo/unite.vim (unite core)\n\nNote: version 1.0 only supports Mac OS X. Next version will support other platforms as well."}, {:name=>"vim-addon-xdebug", :summary=>"xdebug support for VIm using vim-addon-async", :description=>"This plugin wants to support sane PHP debugging for Vim.\n\nFeatures which work:\n- stack\n- step into, over, out, run\n- eval PHP code (inspect vars)\n- show current line which will be executed next\n\nAdding the remaining features should be easy now."}, {:name=>"VimCoder.jar", :summary=>"The TopCoder Arena editor plugin with Vim integration.", :description=>"The TopCoder Arena is a Java applet providing access to free programming\nchallenges and competitions.  The applet contains a built-in editor for\nsolving the algorithm problems, but coding in Vim is much easier.  This is\na plugin for the arena providing support for using Vim as your editor.  You\ncan learn about TopCoder at their site: http://www.topcoder.com/tc\n\nSome features of this plugin:\n\n- Use Vim to edit your TC Arena problems.\n- Keeps track of your code files locally so you'll always have a copy.\n- Works with any language supported by TC.\n- Downloads and stores a copy of the problem statement with your code for\n    off-line viewing.\n- Support for templates (default templates provided only for C++ and Java).\n- Test-case \"drivers\" can be generated locally with the example test-case\n    data (currently C++ only).\n\nRequirements:\n\nYou need to have client/server support compiled into Vim.  This is usually\nthe case.  You also need to have a recent Java runtime implementation in\norder to run the arena applet and editor plugin.\n\nYou can also use Vim's :make command to build the C++ test cases, but\nof course you'll need the make utility and a C++ compiler.\n\nA more detailed description of this plugin is available on the project page:\nhttp://www.dogcows.com/vimcoder\n\nThis software is not endorsed by TopCoder and is provided as-is.\n"}, {:name=>"FTPDEV", :summary=>"This is filetype plugin for vim scripts.", :description=>"This file type plugin provides some additional tools which makes the life easier when writing plugins which are big projects with many functions, commands and maps across different files which share a common root directory. It provides commands for\n    - finding functions, commands, variable definitions and maps which name matches a pattern\n    - searching a function which wrap around the end of function\n    - Pgrep command which uses vimgrep to grep inside the plugin directory.\n\nThere is a help file which explains all the details."}, {:name=>"lilypink", :summary=>"A dark color scheme, modification of mrpink", :description=>"Some modification of mrpink (vimscript #2704). There's not many pink at all. The 'pink' in the name is from the original one.\n\nSupports 256-color terminal.\n\nscreenshot http://img.ly/2qtI"}, {:name=>"js-mask", :summary=>"More concise JavaScript using Vim's \"conceal\" feature", :description=>"js-mask: Give Your JavaScript A Beautiful Mask So It Wouldn't Look Ugly\n=======================================================================\n\nA Vim plugin that makes your javascripts look more concise. The original intention is to make anonymous function less verbose and easier to understand at a glance. Requires Vim at least version 7.3.\n\nBefore:\n    function Add(b, c) { return b + c; };\n    setTimeout(function() { console.log(\"wooot\") }, 10);\n\nAfter:\n    𝑓 Add(b, c) { return b + c; };\n    setTimeout(𝑓 { console.log(\"wooot\") }, 10);\n\nThat's it. Check https://github.com/tyok/js-mask for more docs.\n\nFeel free to suggest additions and improvements via https://github.com/tyok/js-mask/issues. Or you can fork this from https://github.com/tyok/js-mask and add your own very personalized flavor.\n\nInspired by https://github.com/ehamberg/vim-cute-python which, in turn, is inspired by vimscript#3200."}, {:name=>"vim-fileutils", :summary=>"Cross-platform file manipulation library", :description=>"Cross-platform file manipulation library, alpha version.\n\nDocumentation: http://vimpluginloader.sourceforge.net/doc/vim-fileutils.txt\nProject page: http://bitbucket.org/ZyX_I/vim-fileutils/overview"}, {:name=>"stakeholders", :summary=>"Pimp up your old templates with dynamic place-holders", :description=>"Experimental.\n\nOlder templating plugins for VIM often used simple markup for placeholders (e.g. <+VARIABLE_NAME+>). A placeholder was simply a pattern you could easily search for. Some newer templating plugins support dynamic replacement of placeholders with the same name.\n\nThe stakeholders plugin turns your old templating system into a high  potential overachiever. It provides dynamic replacement of placeholders with the same name/ID for older templating plugins. By default, it assumes placeholders match /<+\\([[:alpha:]_]\\+\\)+>/ since this pattern is used in several templating systems (e.g., vimscript #1160). You can easily change that pattern by setting |g:stakeholders#def| or b:stakeholders_def.\n\n\nUsage~\n\nThe tskeleton templating plugin provides a parameter (|g:tskeleton#enable_stakeholders|) that enables integration with the stakeholders plugin. For other templating plugins, you have to enable stakeholders by calling either |stakeholders#EnableBuffer()| or |stakeholders#EnableInRange()|.\n\nDemo: \nhttp://vimsomnia.blogspot.com/2010/11/tskeleton-and-stakeholders-vim-plugins.html\n\nAlso available via git: http://github.com/tomtom/stakeholders_vim/"}, {:name=>"PyScratch", :summary=>"allows processing of Python commands directly in Vim buffer", :description=>"PyScratch is a simple plugin that lets you use any Vim buffer as a scratchpad for running and viewing the output of Python commands.  This plugin can also be found at github:\nhttps://github.com/hsitz/PyScratch\n\nYou can watch a screencast of PyScratch at:\nhttp://vimeo.com/16871727\n\nThe PyScratch plugin consists of a single vimscript file that a Vim user can\ninstall by placing it in their 'plugin' directory.\n\nPyScratch requires a Vim executable compiled with Python support. It has been\ntested with Python26 but version should not matter.\n\nOver last few years several different plugins have been designed to send \ncommands in a Vim buffer out to a shell for processing (typically scripting the \n'Gnu Screen utility), where the output can be viewed.  This works well, but for \nlanguages where Vim has built-in support some people might prefer executing the \ncommands and getting output right in the Vim buffer.  All this takes is \nredirecting the output from a supported language's command to the user's buffer \ninstead of to a message buffer.  This technique is possible only for the \nlanguages where Vim offers compile-in support, which include Python, Perl, \nRuby, Lua, MZScheme (anything else?)  This plugin is specific to Python but it \nshould be relatively easy to extend to other supported languages.\n\nWhen the PyScratch plugin is loaded you can process Python commands and get \nPython output in your Vim buffer in several different ways:\n\n(1)  Prepend a '>>>' user prompt as first characters in a line, then press \n<enter>.  The command will be evaluated and results will be shown beginning in \nthe next line.  Commands that provide no output have the command itself \nmirrored as output as confirmation that they have been processed.  You will \ntypically want to issue Python print commands, and these can be abbreviated \nwith 'p' instead of 'print'.  Some examples:\n\n>>> print 8 + 16\n24\n>>> p 8 + 16\n24\n>>> import sys\n( import sys )\n>>> for i in range(5): print i\n1\n2\n3\n4\n5\n>>> etc. etc.\n\n(2)  You can execute a block of lines at one time by visually selecting them \nand pressing <ctrl_enter>.  The block should be a clean block of code with no \nuser prompt chars (i.e, '>>>') at left margin.  Output will be returned below \nthe block of lines.  Note that this method uses <ctrl-enter> rather than the \nsimple <enter> of the single-line-prompt method.\n\n(3)  It's not part of the plugin, but an entire file of Python can be executed \nwith the Vim command:   pyfile <filename>.  The plugin does not capture any \noutput from this command, however functions defined in the file can may then be \naccessed in the Vim buffer using single-line-prompt Python commands or the \nblock-select Python processing.\n\nThe plugin has a couple of lines defining a syntax region for error messages \nand a highlight command that displays them in red.  This may be overwritten by \na syntax file that clears all syntax settings so if you want to use these you \nmay want to move the syntax and the highlight command to a syntax and color \nfile, respectively.\n\nThis is just a Sunday afternoon hack and there are lots of little tweaks and \nimprovements that could be added.   I'd be happy to hear comments or \nsuggestions. . . \n"}, {:name=>"Blueshift", :summary=>"Light color scheme (white background, Visual Studio and Python colors)", :description=>"I use this color scheme when I want a clean and bright coding environment.\nIt's inspired by:\n  - Visual Studio colors\n  - pyte color scheme vimscript #1492.\n\nScreenshot:\n\nhttp://zwiener.org/pics/blueshift.png"}, {:name=>"VimCalc", :summary=>"Plugin that provides a convenient interactive calculator inside a Vim buffer.", :description=>"VimCalc provides a convenient way to access a powerful interactive calculator whilst inside a Vim session. Quickly rattle off a few sums to test an idea. Perform complex calculations using built-in functions to validate answers. Quickly and simply convert from octal to hex to decimal and back again. Setup a bunch of variables to be used in a complex expression. Change variables easily and then simply re-evaluate the expression. Whatever you may need a calculator for, VimCalc is up to the task.\n\nNot only can VimCalc calculate but it uses Vim for input and editing. Quickly and easily perform edits on previous calculations using the power of Vim and then re-evaluate them by simply hitting return. Once you've got the answers yank them into several registers and paste with ease into other buffers!\n\nHere are some example expressions run in a VimCalc session:\n\n> 5+4\nans = 9.0\n> let x = 4\nx = 4.0\n> 9 * sqrt(4)\nans = 18.0\n> 9**2 - (sqrt(4)+2)\nans = 77.0\n> 0xff + 2\nans = 257.0\n\nHere is an example of calculating the roots of a quadratic equation:\n\n> let a = 2\na = 2.0\n> let b = -1\nb = -1.0\n> let c = -6\nc = -6.0\n> ((b*-1) + sqrt(b**2 - 4*a*c))/(2*a)\nans = 2.0\n> ((b*-1) - sqrt(b**2 - 4*a*c))/(2*a)\nans = -1.5"}]